from __future__ import absolute_import import os import unittest import uuid import sys from market . api . api import MarketAPI from market . database . backends import MemoryBackend from market . database . database import MarketDatabase from market . models import DatabaseModel from market . models . document import Document from market . models . user import User class ModelTestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . db = MarketDatabase ( MemoryBackend ( ) ) self . api = MarketAPI ( self . db ) self . db . backend . set_option ( <str> , <str> ) self . db . backend . set_option ( <str> , <str> )  def test_signed_model_no_save ( self ) :          model = DatabaseModel ( ) with self . assertRaises ( RuntimeError ) :              model . sign ( self . api )   def test_signed_model ( self ) :          model = DatabaseModel ( ) model . post_or_put ( self . db ) pre_hash = model . generate_sha1_hash ( ) model . sign ( self . api ) post_hash = model . generate_sha1_hash ( ) self . assertEqual ( pre_hash , post_hash ) self . assertEqual ( model . signer , self . db . backend . get_option ( <str> ) ) self . assertTrue ( DatabaseModel . signature_valid ( model ) )  def test_signed_model_detect_tamper ( self ) :          model = DatabaseModel ( ) model . post_or_put ( self . db ) pre_hash = model . generate_sha1_hash ( ) model . sign ( self . api ) model . _id = <str> post_hash = model . generate_sha1_hash ( ) self . assertNotEqual ( pre_hash , post_hash ) self . assertEqual ( model . signer , self . db . backend . get_option ( <str> ) ) self . assertFalse ( DatabaseModel . signature_valid ( model ) )  def test_model_equal ( self ) :          model1 = DatabaseModel ( ) model2 = DatabaseModel ( ) self . assertEqual ( model1 , model2 )  def test_model_unequal ( self ) :          model1 = DatabaseModel ( ) model2 = DatabaseModel ( ) model2 . post_or_put ( self . db ) self . assertNotEqual ( hash ( model1 ) , hash ( model2 ) ) self . assertNotEqual ( model1 , model2 )  def test_post_or_put_time ( self ) :          model = DatabaseModel ( ) model . post_or_put ( self . db ) model . sign ( self . api ) model . post_or_put ( self . db ) original_sign_time = model . time_signed model_copy = self . db . get ( <str> , model . id ) self . assertEqual ( original_sign_time , model_copy . time_signed ) model_copy . sign ( self . api ) new_sign_time = model . time_signed model_copy . post_or_put ( self . db ) model_new_copy = self . db . get ( <str> , model . id ) self . assertEqual ( new_sign_time , model_new_copy . time_signed ) model_new_copy . _time_signed = 0 model_new_copy . post_or_put ( self . db , check_time = True ) model_last_copy = self . db . get ( <str> , model . id ) self . assertEqual ( new_sign_time , model_last_copy . time_signed )  def test_user_key_immutable ( self ) :          public_key = <str> time_added = 100 user = User ( public_key , time_added ) user . post_or_put ( self . api . db ) self . assertEqual ( user . time_added , time_added ) with self . assertRaises ( IndexError ) as cm :              user . generate_id ( force = True )  exception = cm . exception self . assertEqual ( exception . message , <str> )  def test_document_model ( self ) :          file_name = <str> mime = <str> file_path = os . path . join ( os . path . dirname ( sys . modules [ <str> ] . __file__ ) , <str> ) document = Document . encode_document ( file_name , file_path ) self . assertTrue ( isinstance ( document , Document ) ) self . assertEqual ( document . name , file_name ) self . assertEqual ( document . mime , mime ) this_folder = os . getcwd ( ) document . decode_document ( os . path . join ( this_folder , file_name ) ) new_file_path = os . path . join ( this_folder , file_name ) self . assertEqual ( open ( file_path ) . read ( ) , open ( new_file_path ) . read ( ) ) os . remove ( new_file_path )    