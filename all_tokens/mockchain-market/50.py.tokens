from __future__ import absolute_import import unittest from mock import mock , Mock from market . database . backends import MemoryBackend , PersistentBackend from market . database . database import Database , MarketDatabase from market . models import DatabaseModel class DatabaseTestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . database = Database ( )  def test_get ( self ) :          with self . assertRaises ( NotImplementedError ) :              self . database . get ( None , None )   def test_put ( self ) :          with self . assertRaises ( NotImplementedError ) :              self . database . put ( None , None , None )   def test_post ( self ) :          with self . assertRaises ( NotImplementedError ) :              self . database . post ( None , None )   def test_delete ( self ) :          with self . assertRaises ( NotImplementedError ) :              self . database . delete ( None )   def test_get_all ( self ) :          with self . assertRaises ( NotImplementedError ) :              self . database . get_all ( None )    class MarketDatabaseTestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . database = MarketDatabase ( MemoryBackend ( ) ) self . model1 = DatabaseModel ( ) self . model2 = DatabaseModel ( )  def test_init ( self ) :          database = MarketDatabase ( MemoryBackend ( ) ) with self . assertRaises ( AssertionError ) :              database2 = MarketDatabase ( None )   def test_post ( self ) :          self . assertIsNone ( self . model1 . id ) id = self . database . post ( self . model1 . type , self . model1 ) self . assertEqual ( self . model1 . id , self . database . get ( self . model1 . type , self . model1 . id ) . id )  def test_get ( self ) :          self . database . post ( self . model1 . type , self . model1 ) self . assertEqual ( self . model1 , self . database . get ( self . model1 . type , self . model1 . id ) ) self . assertIsNone ( self . database . get ( self . model1 . type , <str> ) )  def test_put ( self ) :          with self . assertRaises ( AssertionError ) :              self . assertFalse ( self . database . put ( self . model1 . type , self . model1 . id , self . model1 ) )  self . model1 . _id = <str> self . assertFalse ( self . database . put ( self . model1 . type , self . model1 . id , self . model1 ) ) test_string = <str> with self . assertRaises ( AttributeError ) :              self . assertEqual ( self . model1 . test , test_string )  self . model1 . test = test_string self . database . post ( self . model1 . type , self . model1 ) self . assertEqual ( self . database . get ( self . model1 . type , self . model1 . id ) . test , test_string ) test_string2 = <str> self . model1 . test = test_string2 self . assertTrue ( self . database . put ( self . model1 . type , self . model1 . id , self . model1 ) ) self . assertEqual ( self . database . get ( self . model1 . type , self . model1 . id ) . test , test_string2 ) self . model2 . _id = <str> with self . assertRaises ( AssertionError ) :              self . assertFalse ( self . database . put ( self . model1 . type , self . model1 . id , self . model2 ) )   def test_delete_assert ( self ) :          with self . assertRaises ( AssertionError ) :              self . database . delete ( None )   def test_delete ( self ) :          self . database . post ( self . model1 . type , self . model1 ) self . assertTrue ( self . database . delete ( self . model1 ) ) self . assertIsNone ( self . database . get ( self . model1 . type , self . model1 . id ) )  def test_get_all ( self ) :          self . database . backend . clear ( ) self . database . post ( self . model1 . type , self . model1 ) self . database . post ( self . model2 . type , self . model2 ) all_tests = self . database . get_all ( self . model1 . type ) self . assertIsInstance ( all_tests , list ) self . assertIn ( self . model1 , self . database . get_all ( self . model1 . type ) ) self . assertIn ( self . model2 , self . database . get_all ( self . model2 . type ) ) self . assertIsNone ( self . database . get_all ( <str> ) )  @ mock . patch ( <str> ) def test_generate_id_on_clash ( self , encode_patch ) :          encode_patch . return_value = True model = DatabaseModel ( ) self . database . post ( model . type , model ) model2 = DatabaseModel ( ) unique_id = <str> model2 . generate_id = Mock ( ) model2 . generate_id . side_effect = [ model . id , unique_id ] self . database . post ( model2 . type , model2 ) self . assertEqual ( model2 . id , unique_id ) self . assertEqual ( model2 . generate_id . call_count , 2 )   class DatabasePersistentTestSuite ( MarketDatabaseTestSuite ) :      def setUp ( self ) :          self . database = MarketDatabase ( PersistentBackend ( <str> ) ) self . database . backend . clear ( ) self . model1 = DatabaseModel ( ) self . model2 = DatabaseModel ( )  def tearDown ( self ) :          self . database . backend . close ( )    