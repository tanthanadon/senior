import intervals , load A = [ ( 1 , 5 , <str> , <str> , <str> ) , ( 4 , 10 , <str> ) , ( 13 , 15 , <str> ) , ( 32 , 34 , <str> ) , ( 61 , 68 , <str> ) ] B = [ ( 1 , 6 ) , ( 7 , 15 , <str> ) , ( 16 , 17 , <str> ) , ( 62 , 69 , <str> ) ] C = [ ( 2 , 6 , <str> ) , ( 18 , 20 , <str> ) , ( 21 , 23 , <str> ) , ( 25 , 29 ) , ( 31 , 35 ) ] D = [ ( 2 , 7 , <str> ) , ( 12 , 17 , <str> ) , ( 61 , 65 , <str> ) ] ST = intervals . comparison ( ( A , B , C , D ) ) OVERLAPS_0_1 = ST . find_overlaps ( 0 , 1 ) OVERLAPS_0_1_2 = ST . find_overlaps ( 0 , 1 , 2 ) print <str> print <str> , len ( OVERLAPS_0_1_2 ) , <str> for O in OVERLAPS_0_1_2 : 	 print <str> , O , O . start , O . stop , len ( O . overlaps . keys ( ) ) print <str> for interval_original in O . overlaps : 	         print interval_original . INFO == <str> print interval_original , interval_original . start , interval_original . stop , interval_original . INFO   print <str> UNIQUE_2 = ST . get_isolated ( 2 ) print <str> print <str> , len ( UNIQUE_2 ) , <str> for I in UNIQUE_2 : 	 print I , I . start , I . stop , I . INFO  print <str> V = ST . compute_venn ( 0 , 1 , 2 , 3 , display = False ) UNIQUE_2 = V . get_comparison ( 2 ) ALL_NOT_MUTUAL_EXCLUSIVE_OVERLAPS = V . get_comparison ( 0 , 1 , 3 ) MUTUAL_EXCLUSE_COUNTS = ST . get_counts ( 0 , 1 ) print <str> print <str> print MUTUAL_EXCLUSE_COUNTS MUTUAL_EXCLUSE_COUNTS = ST . get_counts ( 0 , 1 , ignore = ( 2 , 3 ) ) print <str> print <str> print MUTUAL_EXCLUSE_COUNTS print <str> print <str> , len ( ALL_NOT_MUTUAL_EXCLUSIVE_OVERLAPS ) , <str> for O in ALL_NOT_MUTUAL_EXCLUSIVE_OVERLAPS : 	 print <str> , O , O . start , O . stop , len ( O . overlaps . keys ( ) ) print <str> for interval_original in O . overlaps : 		 print interval_original , interval_original . start , interval_original . stop , interval_original . INFO   print <str> V = ST . compute_venn ( 0 , 1 , 2 , display = True , labels = ( <str> , <str> , <str> ) ) V = ST . compute_venn ( 0 , 2 , display = True , labels = ( <str> , <str> , <str> ) ) REAL_INTERVALS = False if REAL_INTERVALS : 	 BED_FILE_DIRECTORY = <str> BED_FILE_1 = <str> BED_FILE_2 = <str> BED_FILE_3 = <str> REFSEQ_FILE = <str> R = load . refseq_table ( <str> ) Allen2014 = load . bed_file ( <str> , FILTER = R ) [ <str> ] Anderson2014 = load . bed_file ( <str> , FILTER = R ) [ <str> ] Luo2014 = load . bed_file ( <str> , FILTER = R ) [ <str> ] ST = intervals . comparison ( ( Allen2014 , Anderson2014 , Luo2014 ) , verbose = False ) ST . compute_venn ( 0 , 1 , 2 , display = True ) ST . compute_venn ( 0 , 1 , display = True )   