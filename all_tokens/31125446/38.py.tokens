__author__ = <str> import matplotlib matplotlib . use ( <str> ) import matplotlib . pyplot as plt import os import sys import math import numpy as np def add_header ( header , file1 ) :      lines = list ( ) with open ( file1 ) as F :          for line in F :              lines . append ( line )   outfile = open ( file1 , <str> ) outfile . write ( header ) for line in lines :          outfile . write ( line )   def concatenate_files ( file1 , file2 ) :      all_lines = list ( ) with open ( file1 ) as F :          with open ( file2 ) as F2 :              for line in F :                  line2 = F2 . readline ( ) line = line . strip ( <str> ) . split ( <str> ) line2 = line2 . strip ( <str> ) . split ( <str> ) line . append ( line2 [ - 1 ] ) all_lines . append ( line )    outfile = open ( file1 , <str> ) for line in all_lines :          outfile . write ( <str> . join ( line ) + <str> )   def create_bidir_interval_file ( filelist , filedir , condition1bam , condition2bam ) :      os . system ( <str> + <str> . join ( filelist ) + <str> + filedir + <str> ) os . system ( <str> + filedir + <str> + filedir + <str> ) os . system ( <str> + filedir + <str> + filedir + <str> ) os . system ( <str> + filedir + <str> + filedir + <str> ) os . system ( <str> + condition1bam + <str> + condition2bam + <str> + filedir + <str> + filedir + <str> )  def create_intersect_file ( interval_file , path_to_PSSMs , filedir ) :      header = [ <str> , <str> , <str> , <str> , <str> ] i = 0 for TF in os . listdir ( path_to_PSSMs ) :          header . append ( TF ) if i == 0 :              os . system ( <str> + interval_file + <str> + path_to_PSSMs + TF + <str> + filedir + <str> )  else :              os . system ( <str> + interval_file + <str> + path_to_PSSMs + TF + <str> + filedir + <str> ) concatenate_files ( filedir + <str> , filedir + <str> )  i += 1  add_header ( <str> . join ( header ) + <str> , filedir + <str> )  def sort_intersect_file ( intersect_file , filedir ) :      fcs = list ( ) intervals = list ( ) with open ( intersect_file ) as F :          TFnames = F . readline ( ) . strip ( <str> ) . split ( <str> ) [ 5 : ] TFvals = [ [ ] for i in range ( len ( TFnames ) ) ] for line in F :              line = line . strip ( <str> ) . split ( <str> ) val1 = float ( line [ 3 ] ) + 0.0000001 val2 = float ( line [ 4 ] ) - 0.0000001 if ( val1 + val2 ) / 2 > 10 :                  intervals . append ( <str> . join ( line [ : 3 ] ) ) try :                      log2fc = math . log ( val1 / val2 , 2 ) fcs . append ( log2fc )  except :                      fcs . append ( 0 )  for i in range ( len ( line [ 5 : ] ) ) :                      val = int ( line [ 5 + i ] ) if val != 0 :                          TFvals [ i ] . append ( 1 )  else :                          TFvals [ i ] . append ( 0 )      indices = [ i [ 0 ] for i in sorted ( enumerate ( fcs ) , key = lambda x : x [ 1 ] , reverse = True ) ] outfile = open ( filedir + <str> , <str> ) outfile . write ( <str> + <str> . join ( TFnames ) + <str> ) for i in indices :          outfile . write ( intervals [ i ] + <str> + str ( fcs [ i ] ) ) for vals in TFvals :              outfile . write ( <str> + str ( vals [ i ] ) )  outfile . write ( <str> )   def gsea_analysis ( sorted_intersect_file , figuredir ) :      with open ( sorted_intersect_file ) as F :          TFnames = F . readline ( ) . strip ( <str> ) . split ( <str> ) [ 4 : ] TFvals = [ [ ] for i in range ( len ( TFnames ) ) ] for line in F :              line = line . strip ( <str> ) . split ( <str> ) for i in range ( len ( line [ 4 : ] ) ) :                  val = line [ 4 + i ] TFvals [ i ] . append ( float ( val ) )    ind = np . arange ( 0 , len ( TFvals [ 0 ] ) ) for i in range ( len ( TFnames ) ) :          ESlist = list ( ) TF = TFnames [ i ] vals = TFvals [ i ] a = 1 b = - ( float ( sum ( vals ) ) / float ( len ( vals ) ) ) ES = 0 for tick in vals :              if tick == 0 :                  ES += b  else :                  ES += a  ESlist . append ( ES )  ES = max ( [ max ( ESlist ) , math . fabs ( min ( ESlist ) ) ] ) print TF , ES   if __name__ == <str> :      folder1 = <str> folder2 = <str> filelist = [ folder1 + <str> , folder1 + <str> , folder1 + <str> , folder1 + <str> , folder1 + <str> , folder1 + <str> , folder2 + <str> , folder2 + <str> , folder2 + <str> , folder2 + <str> , folder2 + <str> , folder2 + <str> ] filedir = <str> filelist = [ filedir + <str> , filedir + <str> ] figuredir = <str> bamfolder = <str> condition1bam = bamfolder + <str> condition2bam = bamfolder + <str> path_to_PSSMs = <str> sorted_intersect_file = filedir + <str> gsea_analysis ( sorted_intersect_file , figuredir )   