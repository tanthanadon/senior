__author__ = <str> import matplotlib matplotlib . use ( <str> ) import matplotlib . pyplot as plt from matplotlib import rcParams rcParams . update ( { <str> : True } ) import os import sys import pybedtools from pybedtools import BedTool import math import numpy as np def parent_dir ( directory ) :      pathlist = directory . split ( <str> ) newdir = <str> . join ( pathlist [ 0 : len ( pathlist ) - 1 ] ) return newdir  def get_histone_bed ( histones , genes ) :      names = list ( ) with open ( histones ) as F :          F . readline ( ) for line in F :              line = line . strip ( ) . split ( ) names . append ( line [ - 5 ] )   bed = list ( ) with open ( genes ) as F :          for line in F :              line = line . strip ( ) . split ( ) geneName = line [ 3 ] . split ( <str> ) [ 0 ] if geneName in names :                  chrom , start , stop = line [ : 3 ] bed . append ( [ chrom , start , stop , geneName ] )    return bed  def run ( bg1 , bg2 , genes , histones , figuredir ) :      a = BedTool ( bg1 ) b = BedTool ( bg2 ) bed = BedTool ( get_histone_bed ( histones , genes ) ) m = bed . map ( a , c = 4 , o = <str> ) bed = BedTool ( get_histone_bed ( histones , genes ) ) n = bed . map ( b , c = 4 , o = <str> ) x = list ( ) for item in m :          try :              x . append ( math . log ( float ( item [ - 1 ] ) ) ) print item [ - 2 ] , math . log ( float ( item [ - 1 ] ) )  except :              x . append ( 0 )   y = list ( ) for item in n :          try :              y . append ( math . log ( float ( item [ - 1 ] ) ) )  except :              y . append ( 0 )   F = plt . figure ( ) ax = F . add_subplot ( 111 ) ax . set_title ( <str> ) ax . set_ylabel ( <str> ) ax . set_xlabel ( <str> ) ax . scatter ( x , y ) lims = [ np . min ( [ ax . get_xlim ( ) , ax . get_ylim ( ) ] ) , np . max ( [ ax . get_xlim ( ) , ax . get_ylim ( ) ] ) , ] ax . plot ( lims , lims , <str> , alpha = 0.75 , zorder = 0 ) ax . set_aspect ( <str> ) ax . set_xlim ( lims ) ax . set_ylim ( lims ) plt . savefig ( figuredir + <str> , dpi = 1200 )  if __name__ == <str> :      homedir = os . path . dirname ( os . path . realpath ( __file__ ) ) filedir = parent_dir ( homedir ) + <str> figuredir = parent_dir ( homedir ) + <str> scriptdir = parent_dir ( homedir ) + <str> outdir = parent_dir ( homedir ) + <str> genes = filedir + <str> histones = filedir + <str> bg1 = <str> bg2 = <str> run ( bg1 , bg2 , genes , histones , figuredir )    