__author__ = <str> import matplotlib . pyplot as plt from sklearn import linear_model import math import numpy as np from scipy . stats import gaussian_kde import numpy . polynomial . polynomial as poly import pybedtools import sys def get_gc ( sequence ) :      gc = 0.0 for letter in sequence :          if letter == <str> or letter == <str> or letter == <str> or letter == <str> :              gc += 1.0   return gc / len ( sequence )  def show_value ( s ) :       if sys . version_info . major == 2 :           if isinstance ( s , unicode ) :               return str ( s )   return s  def get_factor_norm ( countsfile , name_order , header ) :      factornorm = [ 0 ] * len ( name_order ) with open ( countsfile ) as F :          if header :              F . readline ( )  for line in F :              line = line . strip ( <str> ) . split ( <str> ) [ 6 : ] for i in range ( len ( line ) ) :                  factornorm [ i ] += float ( line [ i ] )    factornorm = [ factornorm [ 0 ] / factornorm [ i ] for i in range ( len ( factornorm ) ) ] return factornorm  def MA_plot ( x , y , c , condition1 , condition2 , figuredir ) :      F = plt . figure ( ) ax = F . add_subplot ( 111 ) plt . scatter ( x , y , c = c , edgecolor = <str> , s = 14 , alpha = 0.5 ) ax . set_title ( <str> ) ax . set_ylabel ( <str> + condition1 + <str> + condition2 + <str> ) ax . set_xlabel ( <str> ) ax . get_xaxis ( ) . tick_bottom ( ) ax . get_yaxis ( ) . tick_left ( ) plt . colorbar ( ) plt . savefig ( figuredir + <str> , dpi = 1200 )  def gc_scatter ( exp , gc_content , condition1 , condition2 , figuredir ) :      x_new = np . linspace ( 0 , 1 , num = len ( gc_content ) * 10 ) coefs = poly . polyfit ( gc_content , exp , 1 ) print coefs ffit = poly . polyval ( x_new , coefs ) ffit = poly . Polynomial ( coefs ) F = plt . figure ( ) ax = F . add_subplot ( 111 ) plt . scatter ( gc_content , exp , edgecolor = <str> , s = 14 , alpha = 0.5 ) ax . set_title ( <str> ) ax . set_ylabel ( <str> + condition1 + <str> + condition2 + <str> ) ax . set_xlabel ( <str> ) ax . set_xlim ( [ 0 , 1 ] ) ax . get_xaxis ( ) . tick_bottom ( ) ax . get_yaxis ( ) . tick_left ( ) plt . savefig ( figuredir + <str> , dpi = 1200 )  def run ( exonfasta , countsfile , name_order , condition1 , condition2 , figuredir , header = False ) :      fastadict = dict ( ) with open ( exonfasta ) as F :          for line in F :              if <str> in line [ 0 ] :                  key = line [ 1 : ] . strip ( <str> )  else :                  fastadict [ key ] = line    x = list ( ) y = list ( ) c = list ( ) exp = list ( ) factornorm = get_factor_norm ( countsfile , name_order , header = header ) with open ( countsfile ) as F :          if header :              F . readline ( )  for line in F :              line = line . strip ( <str> ) . split ( <str> ) index1 = name_order . index ( condition1 ) index2 = name_order . index ( condition2 ) basemean1 = float ( line [ 6 + index1 ] ) * factornorm [ index1 ] basemean2 = float ( line [ 6 + index2 ] ) * factornorm [ index2 ] avg = ( basemean1 + basemean2 ) / 2.0 key = line [ 0 ] + <str> + line [ 1 ] + <str> + line [ 2 ] gc = get_gc ( fastadict [ key ] ) try :                  y . append ( math . log ( basemean1 / ( basemean2 * ( 2 ** ( ( - 5.30326135 * gc ) + 2.5648209 ) ) ) , 2 ) ) x . append ( math . log ( ( basemean1 + basemean2 ) / 2.0 , 10 ) ) c . append ( gc )  except :                  y . append ( 0 ) x . append ( 0 ) c . append ( gc )    MA_plot ( x , y , c , condition1 , condition2 , figuredir )  def correct_counts_file_pybedtools ( name_order , condition1 , exonfasta , countsfile , genecountsfile ) :      index1 = name_order . index ( condition1 ) fastadict = dict ( ) with open ( exonfasta ) as F :          for line in F :              if <str> in line [ 0 ] :                  key = line [ 1 : ] . strip ( <str> )  else :                  fastadict [ key ] = line    a = pybedtools . BedTool ( countsfile ) . cut ( [ 0 , 1 , 2 ] ) outfile = open ( genecountsfile + <str> , <str> ) with open ( genecountsfile ) as F :          outfile . write ( F . readline ( ) ) counter = 0 for line in F :              line = line . strip ( <str> ) . split ( <str> ) basemean1 = float ( line [ 6 + index1 ] ) genecoord = line [ 3 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] + <str> + line [ 3 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 1 ] . split ( <str> ) [ 0 ] . split ( <str> ) [ 0 ] + <str> + line [ 3 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 1 ] . split ( <str> ) [ 0 ] . split ( <str> ) [ 1 ] b = pybedtools . BedTool ( genecoord , from_string = True ) c = b . intersect ( b = a , stream = True , wb = True ) print c seq = <str> for interval in c :                  key = show_value ( interval . chrom ) + <str> + str ( show_value ( interval . start ) ) + <str> + str ( show_value ( interval . stop ) ) seq += fastadict [ key ]  if len ( seq ) != 0 :                  gc = get_gc ( seq ) basemean1_normalized = basemean1 * ( 2 ** ( ( 10.19644627 * ( gc ** 2 ) ) + ( - 15.5988791 * gc ) + 5.3616822 ) ) outfile . write ( <str> . join ( line [ : 6 + index1 ] ) + <str> + str ( basemean1_normalized ) + <str> )  print counter counter += 1    def correct_counts_file ( name_order , condition1 , exonfasta , gene_exon_countsfile ) :      index1 = name_order . index ( condition1 ) fastadict = dict ( ) with open ( exonfasta ) as F :          for line in F :              if <str> in line [ 0 ] :                  key = line [ 1 : ] . strip ( <str> )  else :                  fastadict [ key ] = line    outfile = open ( gene_exon_countsfile . split ( <str> ) [ 0 ] + <str> , <str> ) with open ( gene_exon_countsfile ) as F :          oldgene = <str> for line in F :              line = line . strip ( <str> ) . split ( <str> ) currentgene = line [ 3 ] if oldgene == <str> :                  exons = list ( ) exons . append ( line [ 14 ] + <str> + line [ 15 ] + <str> + line [ 16 ] )  elif oldgene != currentgene :                  exons = set ( list ( ( exons ) ) ) seq = <str> for exon in exons :                      seq += fastadict [ exon ]  gc = get_gc ( seq ) basemean1 = float ( line [ 6 + index1 ] ) basemean1_normalized = basemean1 * ( 2 ** ( ( 10.19644627 * ( gc ** 2 ) ) + ( - 15.5988791 * gc ) + 5.3616822 ) ) outfile . write ( <str> . join ( line [ : 6 + index1 ] ) + <str> + str ( int ( basemean1_normalized ) ) + <str> ) exons = list ( ) exons . append ( line [ 14 ] + <str> + line [ 15 ] + <str> + line [ 16 ] )  else :                  exons . append ( line [ 14 ] + <str> + line [ 15 ] + <str> + line [ 16 ] )  oldgene = currentgene    def correct_exon_counts_file ( name_order , condition1 , exonfasta , countsfile , header = False ) :      index1 = name_order . index ( condition1 ) fastadict = dict ( ) with open ( exonfasta ) as F :          for line in F :              if <str> in line [ 0 ] :                  key = line [ 1 : ] . strip ( <str> )  else :                  fastadict [ key ] = line    outfile = open ( countsfile . split ( <str> ) [ 0 ] + <str> , <str> ) with open ( countsfile ) as F :          if header :              F . readline ( )  for line in F :              line = line . strip ( <str> ) . split ( <str> ) basemean1 = float ( line [ 6 + index1 ] ) key = line [ 0 ] + <str> + line [ 1 ] + <str> + line [ 2 ] gc = get_gc ( fastadict [ key ] ) basemean1_normalized = basemean1 * ( 2 ** ( ( - 5.30326135 * gc ) + 2.5648209 ) ) outfile . write ( <str> . join ( line [ : 6 + index1 ] ) + <str> + str ( int ( basemean1_normalized ) ) + <str> )    def get_gene_from_exonlist ( gene_exon_countsfile , exonlist ) :      genelist = list ( ) with open ( gene_exon_countsfile ) as F :          for line in F :              line = line . strip ( <str> ) . split ( <str> ) exon = line [ 17 ] if exon in exonlist :                  genelist . append ( line [ 3 ] . split ( <str> ) [ 1 ] )    genelist = set ( list ( genelist ) ) for item in genelist :          print item   if __name__ == <str> :      exonfasta = <str> genefasta = <str> countsfile = <str> genecountsfile = <str> gene_exon_countsfile = <str> name_order = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] condition1 = <str> condition2 = <str> figuredir = <str> exonlist = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] correct_exon_counts_file ( name_order , condition2 , genefasta , genecountsfile , header = True )   