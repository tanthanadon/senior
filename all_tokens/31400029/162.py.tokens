from __future__ import absolute_import import os import sys from django . test import TestCase from fakeredis import FakeStrictRedis from mock import patch , Mock , MagicMock from time import time from delft3dcontainermanager . tasks import delft3dgt_kube_pulse from delft3dcontainermanager . tasks import get_argo_workflows from delft3dcontainermanager . tasks import get_kube_log from delft3dcontainermanager . tasks import do_argo_create from delft3dcontainermanager . tasks import do_argo_stop from delft3dcontainermanager . tasks import do_argo_remove class AsyncTaskTest ( TestCase ) :      mock_options = { } def setUp ( self ) :          self . get_redis = patch ( <str> ) self . mocked_redis = self . get_redis . start ( ) self . redis = FakeStrictRedis ( ) self . mocked_redis . return_value = self . redis  @ patch ( <str> ) def test_delft3dgt_kube_pulse ( self , mockCall ) :          delft3dgt_kube_pulse . delay ( ) self . redis . set ( <str> , int ( time ( ) ) + 100 ) delft3dgt_kube_pulse . delay ( ) delft3dgt_kube_pulse . delay ( ) mockCall . assert_called_with ( <str> ) self . assertEqual ( mockCall . call_count , 1 )  def tearDown ( self ) :          self . redis . flushall ( ) self . get_redis . stop ( )   class TaskTest ( TestCase ) :      mock_options = { } def setUp ( self ) :          self . get_redis = patch ( <str> ) self . mocked_redis = self . get_redis . start ( ) self . redis = FakeStrictRedis ( ) self . mocked_redis . return_value = self . redis  @ patch ( <str> , ** mock_options ) @ patch ( <str> , ** mock_options ) def test_get_argo_workflows ( self , mockConfig , mockClient ) :          mockConfig . new_client_from_config . return_value = Mock ( ) get_argo_workflows . delay ( ) mockConfig . new_client_from_config ( ) . call_api . assert_called_with ( <str> , <str> , auth_settings = [ <str> ] , response_type = <str> , _return_http_data_only = True )  @ patch ( <str> , ** mock_options ) @ patch ( <str> , ** mock_options ) def test_get_kube_log ( self , mockConfig , mockClient ) :          wf_id = <str> pod_id = <str> pods = Mock ( ) pods . to_dict . return_value = { <str> : [ { <str> : { <str> : pod_id } } ] } mockClient . CoreV1Api ( ) . list_namespaced_pod . return_value = pods get_kube_log . delay ( wf_id ) mockClient . CoreV1Api ( ) . list_namespaced_pod . assert_called_with ( <str> , label_selector = <str> . format ( wf_id ) ) mockClient . CoreV1Api ( ) . read_namespaced_pod_log . assert_called_with ( pod_id , <str> , container = <str> , tail_lines = 25 )  @ patch ( <str> , ** mock_options ) @ patch ( <str> , ** mock_options ) def test_do_argo_create ( self , mockConfig , mockClient ) :          yaml = <str> do_argo_create . delay ( yaml ) mockClient . CustomObjectsApi ( ) . create_namespaced_custom_object . assert_called_with ( <str> , <str> , <str> , <str> , yaml )  @ patch ( <str> , ** mock_options ) @ patch ( <str> , ** mock_options ) def test_do_argo_stop ( self , mockConfig , mockClient ) :          wf_id = <str> pod_id = <str> pods = Mock ( ) pods . to_dict . return_value = { <str> : [ { <str> : { <str> : pod_id , <str> : { <str> : <str> } } } ] } mockClient . CoreV1Api ( ) . list_namespaced_pod . return_value = pods do_argo_stop . delay ( wf_id ) mockClient . CoreV1Api ( ) . list_namespaced_pod . assert_called_with ( <str> , label_selector = <str> . format ( wf_id ) ) mockClient . CoreV1Api ( ) . delete_namespaced_pod . assert_called_with ( pod_id , <str> )  @ patch ( <str> , ** mock_options ) @ patch ( <str> , ** mock_options ) def test_do_argo_remove ( self , mockConfig , mockClient ) :          wf_id = <str> do_argo_remove . delay ( wf_id ) mockClient . CustomObjectsApi ( ) . delete_namespaced_custom_object . assert_called_with ( <str> , <str> , <str> , <str> , wf_id , { } )    