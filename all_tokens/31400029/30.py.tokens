from __future__ import absolute_import from datetime import datetime from django . contrib . auth . models import Group from django . contrib . auth . models import Permission from django . contrib . auth . models import User from django . urls import reverse from django . test import TestCase from rest_framework import status from rest_framework . test import APITestCase from rest_framework . test import APIRequestFactory from rest_framework . test import force_authenticate from guardian . shortcuts import assign_perm from mock import patch from delft3dworker . models import Scenario from delft3dworker . models import Scene from delft3dworker . models import Template from delft3dworker . models import Workflow from delft3dworker . views import ScenarioViewSet from delft3dworker . views import SceneViewSet from delft3dworker . views import UserViewSet from delft3dworker . utils import apply_default_tz class ApiAccessTestCase ( TestCase ) :      def setUp ( self ) :          self . factory = APIRequestFactory ( ) self . user_foo = User . objects . create_user ( username = <str> , password = <str> ) self . user_bar = User . objects . create_user ( username = <str> , password = <str> ) self . user_other = User . objects . create_user ( username = <str> , password = <str> ) groups_world = Group . objects . create ( name = <str> ) groups_world . user_set . add ( self . user_foo ) groups_world . user_set . add ( self . user_other ) groups_world . user_set . add ( self . user_bar ) groups_foo = Group . objects . create ( name = <str> ) groups_foo . user_set . add ( self . user_foo ) groups_foo . user_set . add ( self . user_other ) groups_bar = Group . objects . create ( name = <str> ) groups_bar . user_set . add ( self . user_bar ) self . template = Template . objects . create ( name = <str> , ) self . scenario = Scenario . objects . create ( name = <str> , owner = self . user_foo , template = self . template , ) a = Scene . objects . create ( name = <str> , owner = self . user_foo , parameters = { <str> : { <str> : 2 } , } , state = <str> , shared = <str> , ) a . scenario . add ( self . scenario ) b = Scene . objects . create ( name = <str> , owner = self . user_foo , parameters = { <str> : { <str> : 3 } , } , state = <str> , shared = <str> , ) b . scenario . add ( self . scenario ) self . user_foo . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_foo . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_foo . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_foo . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) assign_perm ( <str> , self . user_foo , self . scenario ) assign_perm ( <str> , self . user_foo , self . scenario ) assign_perm ( <str> , self . user_foo , self . scenario ) assign_perm ( <str> , self . user_foo , a ) assign_perm ( <str> , self . user_foo , a ) assign_perm ( <str> , self . user_foo , a ) assign_perm ( <str> , self . user_foo , b ) assign_perm ( <str> , self . user_foo , b ) assign_perm ( <str> , self . user_foo , b ) self . user_foo = User . objects . get ( pk = self . user_foo . pk ) self . user_bar = User . objects . get ( pk = self . user_bar . pk ) self . user_other = User . objects . get ( pk = self . user_other . pk )  @ patch ( <str> , autospec = True , ) def test_scenario_post ( self , mockedStartMethod ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , } response = self . client . post ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) self . assertEqual ( mockedStartMethod . call_count , 0 )  def test_search ( self ) :          self . assertEqual ( len ( self . _request ( ScenarioViewSet , self . user_foo ) ) , 1 ) self . assertEqual ( len ( self . _request ( SceneViewSet , self . user_foo ) ) , 2 ) self . assertEqual ( len ( self . _request ( ScenarioViewSet , self . user_bar ) ) , 0 ) self . assertEqual ( len ( self . _request ( SceneViewSet , self . user_bar ) ) , 0 ) self . assertEqual ( len ( self . _request ( UserViewSet , self . user_foo ) ) , 2 ) self . assertEqual ( len ( self . _request ( UserViewSet , self . user_other ) ) , 2 ) self . assertEqual ( len ( self . _request ( UserViewSet , self . user_bar ) ) , 1 )  def _request ( self , viewset , user ) :          view = viewset . as_view ( { <str> : <str> } ) request = self . factory . get ( <str> ) force_authenticate ( request , user = user ) response = view ( request ) response . render ( ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) return response . data   class SceneTestCase ( APITestCase ) :      def setUp ( self ) :          self . user_foo = User . objects . create_user ( username = <str> , password = <str> ) self . user_bar = User . objects . create_user ( username = <str> , password = <str> ) for user in [ self . user_foo , self . user_bar ] :              for perm in [ <str> , <str> , <str> , <str> ] :                  user . user_permissions . add ( Permission . objects . get ( codename = perm ) )   groups_world = Group . objects . create ( name = <str> ) groups_world . user_set . add ( self . user_foo ) groups_world . user_set . add ( self . user_bar ) self . scene_1 = Scene . objects . create ( suid = <str> , name = <str> , owner = self . user_foo , shared = <str> , phase = Scene . phases . fin ) self . scene_2 = Scene . objects . create ( suid = <str> , name = <str> , owner = self . user_foo , shared = <str> , phase = Scene . phases . fin ) self . workflow_1 = Workflow . objects . create ( scene = self . scene_1 , name = <str> ) self . workflow_2 = Workflow . objects . create ( scene = self . scene_2 , name = <str> ) for perm in [ <str> , <str> , <str> , <str> ] :              assign_perm ( perm , self . user_foo , self . scene_1 ) assign_perm ( perm , self . user_foo , self . scene_2 )   def test_scene_get ( self ) :          url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND )  def test_scene_post ( self ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . post ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . post ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_201_CREATED )  def test_scene_put ( self ) :          url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND )  def test_scene_no_put_after_publish ( self ) :          self . scene_1 . publish_company ( self . user_foo ) url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_403_FORBIDDEN ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND )  @ patch ( <str> , autospec = True ) def test_scene_start ( self , mocked_scene_method ) :          url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND ) self . assertEqual ( mocked_scene_method . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) mocked_scene_method . assert_called_with ( self . scene_1 )  @ patch ( <str> , autospec = True ) def test_scene_no_start_after_publish ( self , mocked_scene_method ) :          self . scene_1 . publish_company ( self . user_foo ) url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_403_FORBIDDEN ) self . assertEqual ( mocked_scene_method . call_count , 0 )  @ patch ( <str> , autospec = True ) def test_scene_reset ( self , mocked_scene_method ) :          url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND ) self . assertEqual ( mocked_scene_method . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) mocked_scene_method . assert_called_with ( self . scene_1 )  @ patch ( <str> , autospec = True ) def test_scene_no_reset_after_publish ( self , mocked_scene_method ) :          self . scene_1 . publish_company ( self . user_foo ) url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_403_FORBIDDEN ) self . assertEqual ( mocked_scene_method . call_count , 0 )  @ patch ( <str> , autospec = True ) def test_scene_redo ( self , mocked_scene_method ) :          query_entrypoint = { <str> : <str> } url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND ) self . assertEqual ( mocked_scene_method . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) mocked_scene_method . assert_called_with ( self . scene_1 , <str> ) self . scene_1 . publish_world ( self . user_foo ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) mocked_scene_method . assert_called_with ( self . scene_1 , <str> )  @ patch ( <str> , autospec = True ) def test_scene_evil_redo ( self , mocked_scene_method ) :          mocked_scene_method . return_value = False url = reverse ( <str> , args = [ self . scene_1 . pk ] ) self . client . login ( username = <str> , password = <str> ) query_entrypoint = { <str> : <str> } response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) query_entrypoint = { <str> : <str> } response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) query_entrypoint = <str> response = self . client . put ( url , query_entrypoint , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) self . assertEqual ( mocked_scene_method . call_count , 1 )  @ patch ( <str> , autospec = True ) def test_multiple_scenes_publish_company ( self , mocked_scene_method_company ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . post ( url , { <str> : [ ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) self . assertEqual ( mocked_scene_method_company . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 1 ) response = self . client . post ( url , { <str> : [ <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 3 ) response = self . client . post ( url , { <str> : [ <str> , <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_company . call_count , 5 ) response = self . client . post ( url , { <str> : [ <str> , <str> , <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) self . assertEqual ( mocked_scene_method_company . call_count , 5 )  @ patch ( <str> , autospec = True ) def test_multiple_scenes_publish_world ( self , mocked_scene_method_world ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . post ( url , { <str> : [ ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) self . assertEqual ( mocked_scene_method_world . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 0 ) response = self . client . post ( url , { <str> : [ <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 1 ) response = self . client . post ( url , { <str> : [ <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 3 ) response = self . client . post ( url , { <str> : [ <str> , <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertEqual ( mocked_scene_method_world . call_count , 5 ) response = self . client . post ( url , { <str> : [ <str> , <str> , <str> , <str> ] } ) self . assertEqual ( response . status_code , status . HTTP_400_BAD_REQUEST ) self . assertEqual ( mocked_scene_method_world . call_count , 5 )   class SceneSearchTestCase ( TestCase ) :      def setUp ( self ) :          self . user_bar = User . objects . create_user ( id = 1 , username = <str> , password = <str> ) self . template = Template . objects . create ( name = <str> ) self . scenario = Scenario . objects . create ( name = <str> , owner = self . user_bar , template = self . template , ) self . scene_1 = Scene . objects . create ( name = <str> , owner = self . user_bar , date_created = apply_default_tz ( datetime ( 2333 , 1 , 1 , 0 , 0 , 0 , 0 ) ) , parameters = { <str> : { <str> : 2 } , <str> : { <str> : <str> } , } , state = <str> , shared = <str> , ) self . scene_1 . save ( ) self . scene_1 . scenario . add ( self . scenario ) self . scene_1 . info = { <str> : { <str> : 0.1 } } self . scene_1 . save ( ) self . scene_2 = Scene . objects . create ( name = <str> , owner = self . user_bar , date_created = apply_default_tz ( datetime ( 2666 , 1 , 1 , 0 , 0 , 0 , 0 ) ) , parameters = { <str> : { <str> : 3 } , <str> : { <str> : <str> } , } , state = <str> , shared = <str> , ) self . scene_2 . save ( ) self . scene_2 . scenario . add ( self . scenario ) self . scene_2 . info = { <str> : { <str> : 0.9 , <str> : 0.5 } } self . scene_2 . save ( ) assign_perm ( <str> , self . user_bar , self . scenario ) assign_perm ( <str> , self . user_bar , self . scene_1 ) assign_perm ( <str> , self . user_bar , self . scene_2 ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar = User . objects . get ( pk = self . user_bar . pk )  def test_search_props ( self ) :          search_query_exact_a = { <str> : <str> } search_query_exact_b = { <str> : <str> } search_query_exact_c = { <str> : <str> , <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_exact_a ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_exact_b ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_exact_c ) ) , 1 )  def test_search_search ( self ) :          search_query_partial_a = { <str> : <str> } search_query_partial_b = { <str> : <str> } search_query_partial_c = { <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_partial_a ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_partial_b ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_partial_c ) ) , 2 )  def test_search_params ( self ) :          search_query_parameter_a = { <str> : <str> } search_query_parameter_b = { <str> : <str> } search_query_parameter_c = { <str> : <str> } search_query_parameter_d = { <str> : <str> } search_query_parameter_e = { <str> : <str> } search_query_parameter_f = { <str> : <str> } search_query_parameter_g = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_parameter_a ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_parameter_b ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_parameter_c ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_parameter_d ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_parameter_e ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_parameter_f ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_parameter_g ) ) , 0 ) search_query_postproc_1 = { <str> : <str> } search_query_postproc_2 = { <str> : <str> } search_query_postproc_3 = { <str> : <str> } search_query_postproc_4 = { <str> : <str> } search_query_postproc_5 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_postproc_1 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_postproc_2 ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_postproc_3 ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_postproc_4 ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_postproc_5 ) ) , 1 )  def test_search_user ( self ) :          search_query_users_1 = { <str> : [ ] } search_query_users_2 = { <str> : [ <str> ] } search_query_users_3 = { <str> : [ <str> ] } search_query_users_4 = { <str> : [ <str> ] } search_query_users_5 = { <str> : [ <str> ] } search_query_users_6 = { <str> : [ <str> , <str> ] } self . assertEqual ( len ( self . _request ( search_query_users_1 ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_users_2 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_users_3 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_users_4 ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_users_5 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_users_6 ) ) , 2 )  def test_search_creation_date ( self ) :          search_query_date_before_1 = { <str> : <str> } search_query_date_before_2 = { <str> : <str> } search_query_date_before_3 = { <str> : <str> } search_query_date_before_4 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_before_1 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_2 ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_date_before_3 ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_date_before_4 ) ) , 2 ) search_query_date_after_1 = { <str> : <str> } search_query_date_after_2 = { <str> : <str> } search_query_date_after_3 = { <str> : <str> } search_query_date_after_4 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_after_1 ) ) , 2 ) self . assertEqual ( len ( self . _request ( search_query_date_after_2 ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_date_after_3 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_after_4 ) ) , 2 )  def test_search_start_date ( self ) :          search_query_date_before_00 = { <str> : <str> } search_query_date_before_01 = { <str> : <str> } search_query_date_before_02 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_before_00 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_01 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_02 ) ) , 2 ) search_query_date_before_03 = { <str> : <str> } search_query_date_before_04 = { <str> : <str> } search_query_date_before_05 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_before_03 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_04 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_05 ) ) , 2 ) self . scene_1 . shift_to_phase ( self . scene_1 . phases . idle ) self . scene_1 . start ( ) search_query_date_before_06 = { <str> : <str> } search_query_date_before_07 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_before_06 ) ) , 0 ) self . assertEqual ( len ( self . _request ( search_query_date_before_07 ) ) , 1 ) search_query_date_before_08 = { <str> : <str> } search_query_date_before_09 = { <str> : <str> } self . assertEqual ( len ( self . _request ( search_query_date_before_08 ) ) , 1 ) self . assertEqual ( len ( self . _request ( search_query_date_before_09 ) ) , 0 )  def test_search_hack ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 0 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 1 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 1 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 2 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 2 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 2 )  def _request ( self , query ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , query , format = <str> ) return response . data   class ScenarioTestCase ( APITestCase ) :      def setUp ( self ) :          self . user_foo = User . objects . create_user ( username = <str> , password = <str> ) self . user_bar = User . objects . create_user ( username = <str> , password = <str> ) for user in [ self . user_foo , self . user_bar ] :              for perm in [ <str> , <str> , <str> , <str> ] :                  user . user_permissions . add ( Permission . objects . get ( codename = perm ) )   self . template = Template . objects . create ( name = <str> , ) self . scenario = Scenario . objects . create ( name = <str> , owner = self . user_foo , template = self . template , ) for perm in [ <str> , <str> , <str> , <str> ] :              assign_perm ( perm , self . user_foo , self . scenario )   def test_scenario_get ( self ) :          url = reverse ( <str> , args = [ self . scenario . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND )  def test_scenario_post ( self ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : [ ] , } response = self . client . post ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : [ ] , } response = self . client . post ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_201_CREATED )  def test_scenario_put ( self ) :          url = reverse ( <str> , args = [ self . scenario . pk ] ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : [ ] , } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . client . login ( username = <str> , password = <str> ) data = { <str> : <str> , <str> : [ ] , } response = self . client . put ( url , data , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND )  @ patch ( <str> , autospec = True ) def test_scenario_start ( self , mocked_scene_method ) :          url = reverse ( <str> , args = [ self . scenario . pk ] ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_404_NOT_FOUND ) self . assertEqual ( mocked_scene_method . call_count , 0 ) self . client . login ( username = <str> , password = <str> ) response = self . client . put ( url , { } , format = <str> ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) mocked_scene_method . assert_called_with ( self . scenario , self . user_foo )   class ScenarioSearchTestCase ( TestCase ) :      def setUp ( self ) :          self . user_bar = User . objects . create_user ( username = <str> , password = <str> ) self . template = Template . objects . create ( name = <str> ) self . scenario_1 = Scenario . objects . create ( name = <str> , owner = self . user_bar , parameters = { <str> : { <str> : [ 2 , 3 ] } , <str> : { <str> : [ <str> , <str> ] } , } , scenes_parameters = [ ] , template = self . template , ) self . scenario_2 = Scenario . objects . create ( name = <str> , owner = self . user_bar , parameters = { <str> : { <str> : [ 3 , 4 ] } , <str> : { <str> : [ <str> , <str> ] } , } , scenes_parameters = [ ] , template = self . template , ) self . scenario_3 = Scenario . objects . create ( name = <str> , owner = self . user_bar , parameters = { } , scenes_parameters = [ ] , template = Template . objects . create ( name = <str> ) , ) self . scenario_4 = Scenario . objects . create ( name = <str> , owner = self . user_bar , parameters = { <str> : { <str> : <str> } } , scenes_parameters = [ ] , template = Template . objects . create ( name = <str> ) , ) assign_perm ( <str> , self . user_bar , self . scenario_1 ) assign_perm ( <str> , self . user_bar , self . scenario_2 ) assign_perm ( <str> , self . user_bar , self . scenario_3 ) assign_perm ( <str> , self . user_bar , self . scenario_4 ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar . user_permissions . add ( Permission . objects . get ( codename = <str> ) ) self . user_bar = User . objects . get ( pk = self . user_bar . pk )  def test_search_search ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def test_search_name ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 0 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 1 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 1 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 0 )  def test_search_template ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def test_search_param ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def test_search_param_val ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def test_search_param_valrange ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def test_search_hack ( self ) :          query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 ) query = { <str> : <str> } self . assertEqual ( len ( self . _request ( query ) ) , 4 )  def _request ( self , query ) :          url = reverse ( <str> ) self . client . login ( username = <str> , password = <str> ) response = self . client . get ( url , query , format = <str> ) return response . data   class UserTestCase ( TestCase ) :      def setUp ( self ) :          self . user_foo = User . objects . create_user ( username = <str> , first_name = <str> , last_name = <str> , email = <str> ) groups_foo = Group . objects . create ( name = <str> ) groups_foo . user_set . add ( self . user_foo ) self . factory = APIRequestFactory ( )  def test_me ( self ) :          view = UserViewSet . as_view ( { <str> : <str> } ) request = self . factory . get ( <str> ) force_authenticate ( request , user = self . user_foo ) response = view ( request ) response . render ( ) self . assertEqual ( response . status_code , status . HTTP_200_OK ) self . assertContains ( response , <str> ) self . assertContains ( response , <str> ) self . assertContains ( response , <str> ) self . assertContains ( response , <str> )    