from rest_framework import serializers from delft3dworker . models import Version_Docker from delft3dworker . models import Scenario from delft3dworker . models import Scene from delft3dworker . models import SearchForm from delft3dworker . models import Template from django . contrib . auth . models import Group from django . contrib . auth . models import User class VersionSerializer ( serializers . ModelSerializer ) :      class Meta :          model = Version_Docker fields = <str>   class UserSerializer ( serializers . ModelSerializer ) :      class Meta :          model = User fields = ( <str> , <str> , <str> , <str> , <str> , <str> , )   class GroupSerializer ( serializers . ModelSerializer ) :      class Meta :          model = Group fields = ( <str> , <str> , )   class SceneFullSerializer ( serializers . ModelSerializer ) :      owner = UserSerializer ( read_only = True ) state = serializers . CharField ( source = <str> , read_only = True ) template = serializers . SerializerMethodField ( ) outdated = serializers . BooleanField ( source = <str> , read_only = True ) entrypoints = serializers . SerializerMethodField ( read_only = True ) outdated_changelog = serializers . CharField ( source = <str> , read_only = True ) class Meta :          model = Scene fields = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> )  def get_entrypoints ( self , obj ) :          if hasattr ( obj , <str> ) :              return obj . workflow . outdated_entrypoints ( )  else :              return None   def get_template ( self , obj ) :          scenario = obj . scenario . first ( ) if scenario is not None and scenario . template is not None :              return scenario . template . name  else :              return None    class SceneSparseSerializer ( serializers . ModelSerializer ) :      state = serializers . CharField ( source = <str> , read_only = True ) template_name = serializers . SerializerMethodField ( ) class Meta :          model = Scene fields = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , )  def get_template_name ( self , obj ) :          scenario = obj . scenario . first ( ) if scenario is not None and scenario . template is not None :              return scenario . template . name  else :              return None    class ScenarioSerializer ( serializers . ModelSerializer ) :      state = serializers . CharField ( source = <str> , read_only = True ) owner_url = serializers . HyperlinkedRelatedField ( read_only = True , view_name = <str> , source = <str> ) class Meta :          model = Scenario fields = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , )   class SearchFormSerializer ( serializers . ModelSerializer ) :      class Meta :          model = SearchForm fields = ( <str> , <str> , <str> , <str> , )   class TemplateSerializer ( serializers . ModelSerializer ) :      class Meta :          model = Template fields = ( <str> , <str> , <str> , <str> , )    