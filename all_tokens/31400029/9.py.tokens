from __future__ import absolute_import import base64 from uuid import UUID from django . contrib . auth import authenticate from django . contrib . auth import login from django . contrib . auth . decorators import login_required from django . contrib . auth . models import AnonymousUser from django . http import HttpResponse from django . shortcuts import get_object_or_404 from delft3dworker . models import Scene @ login_required def files ( request , simulation_uuid , loc ) :      try :          uuid = UUID ( simulation_uuid )  except ValueError :          return HttpResponse ( status = 404 )  scene = get_object_or_404 ( Scene , suid = uuid ) if not request . user . has_perm ( <str> , scene ) :          return HttpResponse ( status = 403 )  response = HttpResponse ( ) response [ <str> ] = <str> . format ( simulation_uuid , loc ) return response  @ login_required def thredds_catalog ( request ) :      if not request . user . is_superuser :          return HttpResponse ( status = 403 )  response = HttpResponse ( ) response [ <str> ] = ( <str> ) return response  def thredds ( request , folder , simulation_uuid , loc ) :      try :          uuid = UUID ( simulation_uuid )  except ValueError :          return HttpResponse ( status = 404 )  scene = get_object_or_404 ( Scene , suid = uuid ) if <str> in request . META :          auth = request . META [ <str> ] . split ( ) if len ( auth ) == 2 :              if auth [ 0 ] . lower ( ) == <str> :                  decoded_auth = base64 . b64decode ( auth [ 1 ] ) uname , passwd = decoded_auth . decode ( <str> ) . split ( <str> ) user = authenticate ( username = uname , password = passwd ) if user is not None :                      if user . is_active :                          login ( request , user ) request . user = user      if not request . user . has_perm ( <str> , scene ) :          return HttpResponse ( status = 403 )  response = HttpResponse ( ) response [ <str> ] = ( <str> ) . format ( folder , simulation_uuid , loc , request . META . get ( <str> , <str> ) ) return response  def thredds_static ( request , loc ) :      if <str> in request . META :          auth = request . META [ <str> ] . split ( ) if len ( auth ) == 2 :              if auth [ 0 ] . lower ( ) == <str> :                  uname , passwd = base64 . b64decode ( auth [ 1 ] ) . split ( <str> ) user = authenticate ( username = uname , password = passwd ) if user is not None :                      if user . is_active :                          login ( request , user ) request . user = user      if not request . user . is_authenticated :          return HttpResponse ( status = 403 )  response = HttpResponse ( ) response [ <str> ] = ( <str> ) . format ( loc , request . META . get ( <str> , <str> ) ) return response   