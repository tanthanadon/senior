from __future__ import absolute_import import logging from shutil import rmtree from six . moves import configparser from celery import shared_task from celery . utils . log import get_task_logger from celery_once import QueueOnce from django . conf import settings from django . core . management import call_command from json import dumps from kubernetes import client , config from kubernetes . client . rest import ApiException from requests . exceptions import HTTPError logger = get_task_logger ( __name__ ) @ shared_task ( bind = True , base = QueueOnce , once = { <str> : True , <str> : 60 } ) def delft3dgt_kube_pulse ( self ) :      return call_command ( <str> )  @ shared_task ( bind = True , base = QueueOnce , once = { <str> : True , <str> : 60 } , throws = ( HTTPError ) ) def get_argo_workflows ( self ) :      client_api = config . new_client_from_config ( ) wf = client_api . call_api ( <str> , <str> , auth_settings = [ <str> ] , response_type = <str> , _return_http_data_only = True ) json_wf = dumps ( wf . to_dict ( ) , default = str ) return { <str> : json_wf }  @ shared_task ( bind = True , throws = ( HTTPError ) ) def get_kube_log ( self , wf_id , tail = 25 ) :      client_api = config . new_client_from_config ( ) v1 = client . CoreV1Api ( client_api ) log = <str> pods = v1 . list_namespaced_pod ( <str> , label_selector = <str> . format ( wf_id ) ) pods_dict = pods . to_dict ( ) if <str> in pods_dict :          for item in pods_dict [ <str> ] :              name = item [ <str> ] [ <str> ] try :                  podlog = v1 . read_namespaced_pod_log ( name , <str> , container = <str> , tail_lines = tail ) log += podlog  except Exception as e :                  print ( e )    return { <str> : log }  @ shared_task ( bind = True , throws = ( HTTPError ) ) def do_argo_create ( self , yaml ) :      client_api = config . new_client_from_config ( ) crd = client . CustomObjectsApi ( client_api ) status = crd . create_namespaced_custom_object ( <str> , <str> , <str> , <str> , yaml ) return { <str> : status }  @ shared_task ( bind = True , throws = ( HTTPError , ) ) def do_argo_stop ( self , wf_id ) :      status = { } client_api = config . new_client_from_config ( ) v1 = client . CoreV1Api ( client_api ) pods = v1 . list_namespaced_pod ( <str> , label_selector = <str> . format ( wf_id ) ) pods_dict = pods . to_dict ( ) for item in pods_dict . get ( <str> , [ ] ) :          if item [ <str> ] . get ( <str> , { } ) . get ( <str> , <str> ) == <str> :              name = item [ <str> ] [ <str> ] try :                  status = v1 . delete_namespaced_pod ( name , <str> ) . to_dict ( )  except ApiException as e :                  logger . error ( <str> . format ( e ) )  break   return { <str> : status }  @ shared_task ( bind = True , throws = ( HTTPError ) ) def do_argo_remove ( self , workflow_id ) :      client_api = config . new_client_from_config ( ) crd = client . CustomObjectsApi ( client_api ) status = crd . delete_namespaced_custom_object ( <str> , <str> , <str> , <str> , workflow_id , { } ) return { <str> : status }   