import os from django . contrib import admin from django . core . mail import send_mail from django . conf import settings from django . db . models import F from django . db . models import Sum from django . db . models import Count from django . db . models import ExpressionWrapper from django . db . models import DurationField from rangefilter . filter import DateRangeFilter , DateTimeRangeFilter from guardian . admin import GuardedModelAdmin from . models import Scenario from . models import Scene from . models import Workflow from . models import Version_Docker from . models import SearchForm from . models import Template from . models import GroupUsageSummary from . models import UserUsageSummary class WorkflowInline ( admin . StackedInline ) :      extra = 0 model = Workflow  class SceneInline ( admin . StackedInline ) :      extra = 0 model = Scene  class VersionInline ( admin . StackedInline ) :      extra = 0 model = Version_Docker  @ admin . register ( Scenario ) class ScenarioAdmin ( GuardedModelAdmin ) :      pass  @ admin . register ( Scene ) class SceneAdmin ( GuardedModelAdmin ) :      inlines = [ WorkflowInline , ] actions = [ <str> ] def check_sync ( self , request , queryset ) :          finshed_runs = queryset . filter ( phase = Scene . phases . fin ) sync_failed = [ ] for obj in finshed_runs :              sync_log = os . path . join ( obj . workingdir , <str> , <str> ) if os . path . exists ( sync_log ) :                  if <str> in open ( sync_log ) . read ( ) :                      sync_failed . append ( obj . name )    if len ( sync_failed ) == 0 :              subject = <str>  else :              subject = <str>  message = <str> . join ( sync_failed ) from_email = settings . DEFAULT_FROM_EMAIL recipient_list = [ <str> ] send_mail ( subject , message , from_email , recipient_list )   @ admin . register ( Workflow ) class WorkflowAdmin ( GuardedModelAdmin ) :      pass  @ admin . register ( Version_Docker ) class VersionAdmin ( GuardedModelAdmin ) :      pass  @ admin . register ( SearchForm ) class SearchFormAdmin ( GuardedModelAdmin ) :      pass  @ admin . register ( Template ) class TemplateAdmin ( GuardedModelAdmin ) :      extra = 0 inlines = [ VersionInline , ]  @ admin . register ( GroupUsageSummary ) class GroupUsageSummaryAdmin ( admin . ModelAdmin ) :      change_list_template = <str> list_filter = ( ( <str> , DateRangeFilter ) , ) def changelist_view ( self , request , extra_context = None ) :          response = super ( GroupUsageSummaryAdmin , self ) . changelist_view ( request , extra_context = extra_context , ) try :              qs = response . context_data [ <str> ] . queryset qs = qs . exclude ( name = <str> ) . order_by ( <str> )  except ( AttributeError , KeyError ) as e :              return response  values = [ <str> , <str> ] metrics = { <str> : Count ( <str> , distinct = True ) , <str> : Count ( <str> ) , <str> : ExpressionWrapper ( Sum ( F ( <str> ) - F ( <str> ) ) , output_field = DurationField ( ) ) , } response . context_data [ <str> ] = list ( qs . values ( * values ) . annotate ( ** metrics ) ) response . context_data [ <str> ] = dict ( qs . aggregate ( ** metrics ) ) return response   @ admin . register ( UserUsageSummary ) class UserUsageSummaryAdmin ( admin . ModelAdmin ) :      change_list_template = <str> list_filter = ( ( <str> , DateRangeFilter ) , ) def changelist_view ( self , request , extra_context = None ) :          response = super ( UserUsageSummaryAdmin , self ) . changelist_view ( request , extra_context = extra_context , ) try :              qs = response . context_data [ <str> ] . queryset qs = qs . order_by ( <str> )  except ( AttributeError , KeyError ) as e :              return response  values = [ <str> ] metrics = { <str> : Count ( <str> ) , <str> : ExpressionWrapper ( Sum ( F ( <str> ) - F ( <str> ) ) , output_field = DurationField ( ) ) , } response . context_data [ <str> ] = list ( qs . values ( * values ) . annotate ( ** metrics ) ) response . context_data [ <str> ] = dict ( qs . aggregate ( ** metrics ) ) return response    