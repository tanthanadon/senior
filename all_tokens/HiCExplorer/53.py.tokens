import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) from hicexplorer import hicBuildMatrix , hicInfo from hicmatrix import HiCMatrix as hm from tempfile import NamedTemporaryFile , mkdtemp import shutil import os import numpy . testing as nt ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) sam_R1 = ROOT + <str> sam_R2 = ROOT + <str> dpnii_file = ROOT + <str> def are_files_equal ( file1 , file2 , delta = None ) :      equal = True if delta :          mismatches = 0  with open ( file1 ) as textfile1 , open ( file2 ) as textfile2 :          for x , y in zip ( textfile1 , textfile2 ) :              if x . startswith ( <str> ) :                  continue  if x != y :                  if delta :                      mismatches += 1 if mismatches > delta :                          equal = False break   else :                      equal = False break     return equal  def test_build_matrix ( capsys ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) qc_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( sam_R1 , sam_R2 , outfile . name , qc_folder ) . split ( ) hicBuildMatrix . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( test . cut_intervals , new . cut_intervals ) print ( set ( os . listdir ( ROOT + <str> ) ) ) assert are_files_equal ( ROOT + <str> , qc_folder + <str> ) assert set ( os . listdir ( ROOT + <str> ) ) == set ( os . listdir ( qc_folder ) ) assert abs ( os . path . getsize ( ROOT + <str> ) - os . path . getsize ( <str> ) ) < 64000 os . unlink ( outfile . name ) shutil . rmtree ( qc_folder ) os . unlink ( <str> )  def test_build_matrix_cooler ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) qc_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( sam_R1 , sam_R2 , outfile . name , qc_folder ) . split ( ) hicBuildMatrix . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( len ( new . cut_intervals ) , len ( test . cut_intervals ) ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) assert are_files_equal ( ROOT + <str> , qc_folder + <str> ) assert set ( os . listdir ( ROOT + <str> ) ) == set ( os . listdir ( qc_folder ) ) os . unlink ( outfile . name ) shutil . rmtree ( qc_folder )  def test_build_matrix_cooler_metadata ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) qc_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( sam_R1 , sam_R2 , outfile . name , qc_folder ) . split ( ) hicBuildMatrix . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( len ( new . cut_intervals ) , len ( test . cut_intervals ) ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) assert are_files_equal ( ROOT + <str> , qc_folder + <str> ) assert set ( os . listdir ( ROOT + <str> ) ) == set ( os . listdir ( qc_folder ) ) outfile_metadata = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile_metadata . close ( ) args = <str> . format ( outfile . name , outfile_metadata . name ) . split ( ) hicInfo . main ( args ) assert are_files_equal ( ROOT + <str> , outfile_metadata . name , delta = 7 ) os . unlink ( outfile . name ) shutil . rmtree ( qc_folder )  def test_build_matrix_cooler_multiple ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) qc_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( sam_R1 , sam_R2 , outfile . name , qc_folder ) . split ( ) hicBuildMatrix . main ( args ) test_5000 = hm . hiCMatrix ( ROOT + <str> ) test_10000 = hm . hiCMatrix ( ROOT + <str> ) test_20000 = hm . hiCMatrix ( ROOT + <str> ) new_5000 = hm . hiCMatrix ( outfile . name + <str> ) new_10000 = hm . hiCMatrix ( outfile . name + <str> ) new_20000 = hm . hiCMatrix ( outfile . name + <str> ) nt . assert_equal ( test_5000 . matrix . data , new_5000 . matrix . data ) nt . assert_equal ( test_10000 . matrix . data , new_10000 . matrix . data ) nt . assert_equal ( test_20000 . matrix . data , new_20000 . matrix . data ) nt . assert_equal ( len ( new_5000 . cut_intervals ) , len ( test_5000 . cut_intervals ) ) nt . assert_equal ( len ( new_10000 . cut_intervals ) , len ( test_10000 . cut_intervals ) ) nt . assert_equal ( len ( new_20000 . cut_intervals ) , len ( test_20000 . cut_intervals ) ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new_5000 . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test_5000 . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new_10000 . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test_10000 . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new_20000 . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test_20000 . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) assert are_files_equal ( ROOT + <str> , qc_folder + <str> ) assert set ( os . listdir ( ROOT + <str> ) ) == set ( os . listdir ( qc_folder ) ) os . unlink ( outfile . name ) shutil . rmtree ( qc_folder )  def test_build_matrix_rf ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) qc_folder = mkdtemp ( prefix = <str> ) args = <str> <str> <str> <str> <str> . format ( sam_R1 , sam_R2 , dpnii_file , outfile . name , qc_folder ) . split ( ) hicBuildMatrix . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( test . cut_intervals , new . cut_intervals ) print ( set ( os . listdir ( ROOT + <str> ) ) ) assert are_files_equal ( ROOT + <str> , qc_folder + <str> ) assert set ( os . listdir ( ROOT + <str> ) ) == set ( os . listdir ( qc_folder ) ) os . unlink ( outfile . name ) shutil . rmtree ( qc_folder )   