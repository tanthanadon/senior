from HttpMD5Util import buildMySign , httpGet , httpPost class OKCoinFuture :      def __init__ ( self , url , apikey , secretkey ) :          self . __url = url self . __apikey = apikey self . __secretkey = secretkey  def future_ticker ( self , symbol , contractType ) :          FUTURE_TICKER_RESOURCE = <str> params = <str> if symbol :              params += <str> + symbol if params else <str> + symbol  if contractType :              params += <str> + contractType if params else <str> + symbol  return httpGet ( self . __url , FUTURE_TICKER_RESOURCE , params )  def future_depth ( self , symbol , contractType , size ) :          FUTURE_DEPTH_RESOURCE = <str> params = <str> if symbol :              params += <str> + symbol if params else <str> + symbol  if contractType :              params += <str> + contractType if params else <str> + symbol  if size :              params += <str> + size if params else <str> + size  return httpGet ( self . __url , FUTURE_DEPTH_RESOURCE , params )  def future_trades ( self , symbol , contractType ) :          FUTURE_TRADES_RESOURCE = <str> params = <str> if symbol :              params += <str> + symbol if params else <str> + symbol  if contractType :              params += <str> + contractType if params else <str> + symbol  return httpGet ( self . __url , FUTURE_TRADES_RESOURCE , params )  def future_index ( self , symbol ) :          FUTURE_INDEX = <str> params = <str> if symbol :              params = <str> + symbol  return httpGet ( self . __url , FUTURE_INDEX , params )  def exchange_rate ( self ) :          EXCHANGE_RATE = <str> return httpGet ( self . __url , EXCHANGE_RATE , <str> )  def future_estimated_price ( self , symbol ) :          FUTURE_ESTIMATED_PRICE = <str> params = <str> if symbol :              params = <str> + symbol  return httpGet ( self . __url , FUTURE_ESTIMATED_PRICE , params )  def future_userinfo ( self ) :          FUTURE_USERINFO = <str> params = { } params [ <str> ] = self . __apikey params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_USERINFO , params )  def future_position ( self , symbol , contractType ) :          FUTURE_POSITION = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_POSITION , params )  def future_trade ( self , symbol , contractType , price = <str> , amount = <str> , tradeType = <str> , matchPrice = <str> , leverRate = <str> ) :          FUTURE_TRADE = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType , <str> : amount , <str> : tradeType , <str> : matchPrice , <str> : leverRate } if price :              params [ <str> ] = price  params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_TRADE , params )  def future_batchTrade ( self , symbol , contractType , orders_data , leverRate ) :          FUTURE_BATCH_TRADE = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType , <str> : orders_data , <str> : leverRate } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_BATCH_TRADE , params )  def future_cancel ( self , symbol , contractType , orderId ) :          FUTURE_CANCEL = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType , <str> : orderId } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_CANCEL , params )  def future_orderinfo ( self , symbol , contractType , orderId , status , currentPage , pageLength ) :          FUTURE_ORDERINFO = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType , <str> : orderId , <str> : status , <str> : currentPage , <str> : pageLength } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_ORDERINFO , params )  def future_userinfo_4fix ( self ) :          FUTURE_INFO_4FIX = <str> params = { <str> : self . __apikey } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_INFO_4FIX , params )  def future_position_4fix ( self , symbol , contractType , type1 ) :          FUTURE_POSITION_4FIX = <str> params = { <str> : self . __apikey , <str> : symbol , <str> : contractType , <str> : type1 } params [ <str> ] = buildMySign ( params , self . __secretkey ) return httpPost ( self . __url , FUTURE_POSITION_4FIX , params )    