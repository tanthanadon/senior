import socket import six from . _exceptions import * from . _utils import * from . _ssl_compat import * DEFAULT_SOCKET_OPTION = [ ( socket . SOL_TCP , socket . TCP_NODELAY , 1 ) ] if hasattr ( socket , <str> ) :      DEFAULT_SOCKET_OPTION . append ( ( socket . SOL_SOCKET , socket . SO_KEEPALIVE , 1 ) )  if hasattr ( socket , <str> ) :      DEFAULT_SOCKET_OPTION . append ( ( socket . SOL_TCP , socket . TCP_KEEPIDLE , 30 ) )  if hasattr ( socket , <str> ) :      DEFAULT_SOCKET_OPTION . append ( ( socket . SOL_TCP , socket . TCP_KEEPINTVL , 10 ) )  if hasattr ( socket , <str> ) :      DEFAULT_SOCKET_OPTION . append ( ( socket . SOL_TCP , socket . TCP_KEEPCNT , 3 ) )  _default_timeout = None __all__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] class sock_opt ( object ) :      def __init__ ( self , sockopt , sslopt ) :          if sockopt is None :              sockopt = [ ]  if sslopt is None :              sslopt = { }  self . sockopt = sockopt self . sslopt = sslopt self . timeout = None   def setdefaulttimeout ( timeout ) :      global _default_timeout _default_timeout = timeout  def getdefaulttimeout ( ) :      return _default_timeout  def recv ( sock , bufsize ) :      if not sock :          raise WebSocketConnectionClosedException ( <str> )  try :          bytes = sock . recv ( bufsize )  except socket . timeout as e :          message = extract_err_message ( e ) raise WebSocketTimeoutException ( message )  except SSLError as e :          message = extract_err_message ( e ) if message == <str> :              raise WebSocketTimeoutException ( message )  else :              raise   if not bytes :          raise WebSocketConnectionClosedException ( <str> )  return bytes  def recv_line ( sock ) :      line = [ ] while True :          c = recv ( sock , 1 ) line . append ( c ) if c == six . b ( <str> ) :              break   return six . b ( <str> ) . join ( line )  def send ( sock , data ) :      if isinstance ( data , six . text_type ) :          data = data . encode ( <str> )  if not sock :          raise WebSocketConnectionClosedException ( <str> )  try :          return sock . send ( data )  except socket . timeout as e :          message = extract_err_message ( e ) raise WebSocketTimeoutException ( message )  except Exception as e :          message = extract_err_message ( e ) if message and <str> in message :              raise WebSocketTimeoutException ( message )  else :              raise     