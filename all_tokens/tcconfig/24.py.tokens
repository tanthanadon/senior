from __future__ import absolute_import , division import pingparsing import pytest import typepy from subprocrunner import SubprocessRunner from tcconfig . _const import Tc from . common import ASSERT_MARGIN , DEADLINE_TIME , execute_tcdel @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def dst_host_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def dst_host_ex_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def transmitter ( ) :      transmitter = pingparsing . PingTransmitter ( ) transmitter . ping_option = <str> transmitter . deadline = DEADLINE_TIME return transmitter  @ pytest . fixture def pingparser ( ) :      return pingparsing . PingParsing ( )  class Test_tcset_two_network ( object ) :      @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] ] ) def test_network ( self , device_option , dst_host_option , dst_host_ex_option , transmitter , pingparser , shaping_algo , ) :          if device_option is None :              pytest . skip ( <str> )  if any ( [ typepy . is_null_string ( dst_host_option ) , typepy . is_null_string ( dst_host_ex_option ) ] ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) delay = 100 command_list = [ Tc . Command . TCSET , tc_target , <str> . format ( delay ) , <str> . format ( dst_host_ex_option ) , <str> . format ( shaping_algo ) , ] assert SubprocessRunner ( <str> . join ( command_list ) ) . run ( ) == 0 transmitter . destination = dst_host_option without_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg transmitter . destination = dst_host_ex_option with_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg rtt_diff = with_tc_rtt_avg - without_tc_rtt_avg assert rtt_diff > ( delay * ASSERT_MARGIN ) execute_tcdel ( tc_target )     