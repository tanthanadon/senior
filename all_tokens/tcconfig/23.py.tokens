import itertools import pytest from allpairspy import AllPairs from humanreadable import ParameterError from tcconfig . _const import ShapingAlgorithm , Tc , TrafficDirection from tcconfig . _netem_param import ( MAX_CORRUPTION_RATE , MAX_PACKET_DUPLICATE_RATE , MAX_PACKET_LOSS_RATE , MAX_REORDERING_RATE , MIN_CORRUPTION_RATE , MIN_PACKET_DUPLICATE_RATE , MIN_PACKET_LOSS_RATE , MIN_REORDERING_RATE , NetemParameter , ) from tcconfig . traffic_control import TrafficControl from . common import is_invalid_param MIN_VALID_PACKET_LOSS = 0.0000000232 @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> . join ( opt_list ) ] for opt_list in AllPairs ( [ [ <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , ] ) ] , ) def test_TrafficControl_validate_bandwidth_rate_normal ( value ) :      tc_obj = TrafficControl ( <str> , netem_param = NetemParameter ( <str> , bandwidth_rate = value ) , direction = TrafficDirection . OUTGOING , shaping_algorithm = ShapingAlgorithm . HTB , ) tc_obj . netem_param . validate_bandwidth_rate ( )  @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> . join ( opt_list ) , ParameterError ] for opt_list in AllPairs ( [ [ <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ] ) ] + [ [ <str> . join ( value ) , ParameterError ] for value in ( <str> , <str> , <str> , <str> ) ] + [ [ <str> , ParameterError ] ] , ) def test_TrafficControl_validate_bandwidth_rate_exception_1 ( value , expected ) :      with pytest . raises ( expected ) :          tc_obj = TrafficControl ( <str> , netem_param = NetemParameter ( <str> , bandwidth_rate = value , latency_time = Tc . ValueRange . LatencyTime . MIN , latency_distro_time = Tc . ValueRange . LatencyTime . MIN , ) , direction = TrafficDirection . OUTGOING , shaping_algorithm = ShapingAlgorithm . HTB , ) tc_obj . netem_param . validate_bandwidth_rate ( )   @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> . join ( opt_list ) , ParameterError ] for opt_list in itertools . product ( [ <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ) ] , ) def test_TrafficControl_validate_bandwidth_rate_exception_2 ( value , expected ) :      with pytest . raises ( expected ) :          tc_obj = TrafficControl ( <str> , netem_param = NetemParameter ( <str> , bandwidth_rate = value , latency_time = Tc . ValueRange . LatencyTime . MIN , latency_distro_time = Tc . ValueRange . LatencyTime . MIN , ) , shaping_algorithm = ShapingAlgorithm . HTB , ) tc_obj . netem_param . validate_bandwidth_rate ( )   class Test_TrafficControl_validate ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] , [ opt_list for opt_list in AllPairs ( [ [ None , <str> , <str> , <str> , <str> ] , [ TrafficDirection . OUTGOING ] , [ Tc . ValueRange . LatencyTime . MIN , Tc . ValueRange . LatencyTime . MAX ] , [ Tc . ValueRange . LatencyTime . MIN , Tc . ValueRange . LatencyTime . MAX ] , [ None , MIN_PACKET_LOSS_RATE , MIN_VALID_PACKET_LOSS , MAX_PACKET_LOSS_RATE , ] , [ None , MIN_PACKET_DUPLICATE_RATE , MAX_PACKET_DUPLICATE_RATE ] , [ None , MIN_CORRUPTION_RATE , MAX_CORRUPTION_RATE ] , [ None , <str> , <str> ] , [ None , <str> , <str> ] , [ None , <str> , <str> , <str> , <str> , <str> , ] , [ None , <str> , <str> ] , [ None , 65535 ] , [ None , 22 ] , [ None , 65535 ] , [ None , 22 ] , [ ShapingAlgorithm . HTB , ShapingAlgorithm . TBF ] , ] , n = 3 , ) ] , ) def test_normal ( self , device_option , rate , direction , delay , delay_distro , loss , duplicate , corrupt , src_network , exclude_src_network , dst_network , exclude_dst_network , src_port , exclude_src_port , dst_port , exclude_dst_port , shaping_algorithm , ) :          if device_option is None :              pytest . skip ( <str> )  tc_obj = TrafficControl ( device = device_option , direction = direction , netem_param = NetemParameter ( device = device_option , bandwidth_rate = rate , latency_time = delay , latency_distro_time = delay_distro , packet_loss_rate = loss , packet_duplicate_rate = duplicate , corruption_rate = corrupt , ) , src_network = src_network , exclude_src_network = exclude_src_network , dst_network = dst_network , exclude_dst_network = exclude_dst_network , src_port = src_port , exclude_src_port = exclude_src_port , dst_port = dst_port , exclude_dst_port = exclude_dst_port , is_enable_iptables = True , shaping_algorithm = shaping_algorithm , ) if is_invalid_param ( rate , delay , loss , duplicate , corrupt , reordering = None ) :              with pytest . raises ( ParameterError ) :                  tc_obj . validate ( )   else :              tc_obj . validate ( )   @ pytest . mark . parametrize ( [ <str> , <str> , <str> ] , [ opt_list for opt_list in AllPairs ( [ [ TrafficDirection . OUTGOING ] , [ <str> , Tc . ValueRange . LatencyTime . MAX ] , [ MIN_REORDERING_RATE , MAX_REORDERING_RATE ] , ] , n = 2 , ) ] , ) def test_normal_reordering ( self , device_option , direction , delay , reordering ) :          if device_option is None :              pytest . skip ( <str> )  tc_obj = TrafficControl ( device = device_option , netem_param = NetemParameter ( device = device_option , latency_time = delay , latency_distro_time = Tc . ValueRange . LatencyTime . MIN , reordering_rate = reordering , ) , direction = direction , shaping_algorithm = ShapingAlgorithm . HTB , ) tc_obj . validate ( )  @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ { <str> : <str> } , ParameterError ] , [ { <str> : <str> } , ParameterError ] , [ { <str> : <str> , <str> : <str> } , ParameterError ] , [ { <str> : <str> , <str> : <str> } , ParameterError ] , [ { <str> : MIN_PACKET_LOSS_RATE - 0.1 } , ParameterError ] , [ { <str> : MAX_PACKET_LOSS_RATE + 0.1 } , ParameterError ] , [ { <str> : <str> , <str> : MIN_PACKET_DUPLICATE_RATE - 0.1 } , ParameterError , ] , [ { <str> : <str> , <str> : MAX_PACKET_DUPLICATE_RATE + 0.1 } , ParameterError , ] , [ { <str> : MIN_CORRUPTION_RATE - 0.1 } , ParameterError ] , [ { <str> : MAX_CORRUPTION_RATE + 0.1 } , ParameterError ] , [ { <str> : MIN_REORDERING_RATE - 0.1 } , ParameterError ] , [ { <str> : MAX_REORDERING_RATE + 0.1 } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { Tc . Param . DST_NETWORK : <str> } , ParameterError ] , [ { <str> : - 1 } , ParameterError ] , [ { <str> : 65536 } , ParameterError ] , [ { <str> : - 1 } , ParameterError ] , [ { <str> : 65536 } , ParameterError ] , ] , ) def test_exception ( self , device_option , value , expected ) :          if device_option is None :              pytest . skip ( <str> )  tc_obj = TrafficControl ( device = device_option , netem_param = NetemParameter ( device = device_option , bandwidth_rate = value . get ( <str> ) , latency_time = value . get ( <str> , Tc . ValueRange . LatencyTime . MIN ) , latency_distro_time = value . get ( <str> , Tc . ValueRange . LatencyTime . MIN ) , packet_loss_rate = value . get ( <str> ) , packet_duplicate_rate = value . get ( <str> ) , corruption_rate = value . get ( <str> ) , ) , dst_network = value . get ( Tc . Param . DST_NETWORK ) , src_port = value . get ( <str> ) , dst_port = value . get ( <str> ) , shaping_algorithm = ShapingAlgorithm . HTB , ) with pytest . raises ( expected ) :              tc_obj . validate ( )    class Test_TrafficControl_ipv4 ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> , <str> , <str> , <str> ] , [ [ <str> , False , 4 , <str> , <str> ] , [ <str> , False , 4 , <str> , <str> ] , [ <str> , True , 6 , <str> , <str> ] , [ <str> , True , 6 , <str> , <str> ] , ] , ) def test_normal ( self , device_option , network , is_ipv6 , expected_ip_ver , expected_protocol , expected_protocol_match , ) :          if device_option is None :              pytest . skip ( <str> )  tc_obj = TrafficControl ( device = device_option , netem_param = NetemParameter ( device = device_option , latency_time = Tc . ValueRange . LatencyTime . MIN , latency_distro_time = Tc . ValueRange . LatencyTime . MIN , ) , dst_network = network , is_ipv6 = is_ipv6 , shaping_algorithm = ShapingAlgorithm . HTB , ) assert tc_obj . ip_version == expected_ip_ver assert tc_obj . protocol == expected_protocol assert tc_obj . protocol_match == expected_protocol_match    