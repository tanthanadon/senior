class BSTIterator ( object ) :      stack = [ ] def __init__ ( self , root ) :          if root is None :              return  self . stack . append ( root ) l = root . left while l :              self . stack . append ( l ) l = l . left   def hasNext ( self ) :          if len ( self . stack ) > 0 :              return True  return False  def next ( self ) :          smallest = self . stack . pop ( ) r = smallest . right if r is not None :              self . stack . append ( r ) l = r . left while l :                  self . stack . append ( l ) l = l . left   return smallest . val    