class Node ( object ) :      def __init__ ( self , val , a , b ) :          self . val = val self . a = a self . b = b  def __cmp__ ( self , other ) :          return self . val - other . val   import heapq class Solution :      def kthSmallestSum ( self , A , B , k ) :          if not A and not B :              return None  if not A :              return B [ k - 1 ]  if not B :              return A [ k - 1 ]  if k == 1 :              return A [ 0 ] + B [ 0 ]  heap = [ Node ( A [ 0 ] + B [ 0 ] , 0 , 0 ) ] visited = set ( ) visited . add ( ( 0 , 0 ) ) result = None while k >= 1 :              cur_smallest = heapq . heappop ( heap ) result , a , b = cur_smallest . val , cur_smallest . a , cur_smallest . b k -= 1 if a + 1 < len ( A ) and ( a + 1 , b ) not in visited :                  heapq . heappush ( heap , Node ( A [ a + 1 ] + B [ b ] , a + 1 , b ) ) visited . add ( ( a + 1 , b ) )  if b + 1 < len ( B ) and ( a , b + 1 ) not in visited :                  heapq . heappush ( heap , Node ( A [ a ] + B [ b + 1 ] , a , b + 1 ) ) visited . add ( ( a , b + 1 ) )   return result    