from bisect import insort class Solution ( object ) :      def medianSlidingWindow ( self , nums , k ) :          if not nums or k < 1 :              return [ ]  if k == 1 :              return map ( lambda x : x * 1.0 , nums )  result , window = [ ] , [ ] for i in xrange ( len ( nums ) ) :              insort ( window , nums [ i ] ) if i >= k :                  window . remove ( nums [ i - k ] )  if i >= k - 1 :                  if k % 2 == 0 :                      result . append ( ( window [ k / 2 - 1 ] + window [ k / 2 ] ) / 2.0 )  else :                      result . append ( window [ k / 2 ] * 1.0 )    return result   import heapq class Solution :      def medianSlidingWindow ( self , nums , k ) :          if not nums or k < 1 :              return [ ]  if k == 1 :              return nums  left_size = k / 2 if k % 2 == 0 else k / 2 + 1 right_size = k - left_size left_heap , right_heap , result = [ ] , [ ] , [ ] for i in xrange ( len ( nums ) ) :              heapq . heappush ( left_heap , nums [ i ] * - 1 ) heapq . heappush ( right_heap , heapq . heappop ( left_heap ) * - 1 ) if len ( left_heap ) < len ( right_heap ) :                  heapq . heappush ( left_heap , heapq . heappop ( right_heap ) * - 1 )  if i >= k :                  delete_target = nums [ i - k ] cur_median = left_heap [ 0 ] * - 1 target_heap = right_heap if delete_target <= cur_median :                      target_heap = left_heap delete_target = delete_target * - 1  popped_out = [ ] while target_heap :                      cur_popped = heapq . heappop ( target_heap ) if cur_popped == delete_target :                          break  popped_out . append ( cur_popped )  for po in popped_out :                      heapq . heappush ( target_heap , po )  if len ( left_heap ) < left_size :                      heapq . heappush ( left_heap , heapq . heappop ( right_heap ) * - 1 )  if len ( right_heap ) < right_size :                      heapq . heappush ( right_heap , heapq . heappop ( left_heap ) * - 1 )   if i >= k - 1 :                  result . append ( left_heap [ 0 ] * - 1 )   return result    