class Solution ( object ) :      def searchRange ( self , nums , target ) :          if not nums :              return [ - 1 , - 1 ]  begin , end = 0 , len ( nums ) - 1 while begin < end :              mid = ( begin + end ) / 2 if nums [ mid ] <= target :                  begin = mid + 1  else :                  end = mid   tail = - 1 if begin > 0 and nums [ begin - 1 ] == target :              tail = begin - 1  if nums [ begin ] == target :              tail = begin  if tail == - 1 :              return [ - 1 , - 1 ]  begin , end = 0 , len ( nums ) - 1 while begin + 1 < end :              mid = ( begin + end ) / 2 if nums [ mid ] < target :                  begin = mid  else :                  end = mid   head = - 1 if nums [ end ] == target :              head = end  if nums [ begin ] == target :              head = begin  return [ head , tail ]   class Solution ( object ) :      def searchRange ( self , nums , target ) :          result = [ - 1 , - 1 ] if not nums :              return result  left , right = 0 , len ( nums ) - 1 while left < right :              mid = ( left + right ) / 2 if nums [ mid ] < target :                  left = mid + 1  else :                  right = mid   if nums [ left ] == target :              result [ 0 ] = left  else :              return result  left , right = 0 , len ( nums ) - 1 while left < right :              mid = ( left + right ) / 2 + 1 if nums [ mid ] <= target :                  left = mid  else :                  right = mid - 1   result [ 1 ] = right return result   class Solution ( object ) :      def searchRange ( self , nums , target ) :          result = [ - 1 , - 1 ] if not nums :              return result  left = self . __binary_search ( nums , target ) if nums [ left ] != target :              return result  result [ 0 ] = left right = self . __binary_search ( nums , target + 1 ) result [ 1 ] = right if nums [ right ] == target else right - 1 return result  def __binary_search ( self , nums , t ) :          begin , end = 0 , len ( nums ) - 1 while begin < end :              mid = ( begin + end ) / 2 if nums [ mid ] < t :                  begin = mid + 1  else :                  end = mid   return begin    