class Solution :      def lengthOfLongestSubstringKDistinct ( self , s , k ) :          if not s or k == 0 :              return 0  if len ( s ) == 1 :              return 1  slow , d , max_len = 0 , { } , float ( <str> ) for fast in xrange ( len ( s ) ) :              cur_char = s [ fast ] if cur_char in d :                  d [ cur_char ] += 1  else :                  d [ cur_char ] = 1  while len ( d ) > k :                  tail_char = s [ slow ] if d [ tail_char ] > 1 :                      d [ tail_char ] -= 1  else :                      del d [ tail_char ]  slow += 1  max_len = max ( max_len , fast - slow + 1 )  return max_len    