class Solution ( object ) :      def findMedianSortedArrays ( self , nums1 , nums2 ) :          n1 , n2 = len ( nums1 ) , len ( nums2 ) if n1 < n2 :              nums1 , nums2 = nums2 , nums1 n1 , n2 = n2 , n1  if n2 == 0 :              return ( nums1 [ ( n1 - 1 ) / 2 ] + nums1 [ n1 / 2 ] ) / 2.0  lo , hi = 0 , n2 * 2 while lo <= hi :              cut2 = ( lo + hi ) / 2 cut1 = n1 + n2 - cut2 l1 = float ( <str> ) if cut1 == 0 else nums1 [ ( cut1 - 1 ) / 2 ] l2 = float ( <str> ) if cut2 == 0 else nums2 [ ( cut2 - 1 ) / 2 ] r1 = float ( <str> ) if cut1 == n1 * 2 else nums1 [ cut1 / 2 ] r2 = float ( <str> ) if cut2 == n2 * 2 else nums2 [ cut2 / 2 ] if l1 > r2 :                  lo = cut2 + 1  elif l2 > r1 :                  hi = cut2 - 1  else :                  return ( max ( l1 , l2 ) + min ( r1 , r2 ) ) / 2.0   return - 1    