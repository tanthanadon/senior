class Solution :      def continuousSubarraySumII ( self , A ) :          if not A :              return [ ]  min_sum , min_start , min_end = float ( <str> ) , - 1 , - 1 max_sum , max_start , max_end = float ( <str> ) , - 1 , - 1 r_max_start , r_max_end = - 1 , - 1 r_min_start , r_min_end = - 1 , - 1 cur_min , cur_max = 1 , - 1 all_sum = 0 for i in xrange ( len ( A ) ) :              a = A [ i ] all_sum += a if cur_max < 0 :                  cur_max = a max_start = max_end = i  else :                  cur_max += a max_end = i  if cur_max > max_sum :                  max_sum = cur_max r_max_start , r_max_end = max_start , max_end  if cur_min > 0 :                  cur_min = a min_start = min_end = i  else :                  cur_min += a min_end = i  if cur_min < min_sum :                  min_sum = cur_min r_min_start , r_min_end = min_start , min_end   if all_sum == min_sum :              return [ r_max_start , r_max_end ]  elif all_sum - min_sum > max_sum :              return [ r_min_end + 1 , r_min_start - 1 ]  return [ r_max_start , r_max_end ]    