from collections import deque class LRUCache1 ( object ) :      def __init__ ( self , capacity ) :          self . cap = capacity self . d = { } self . idx = deque ( )  def get ( self , key ) :          if not self . d . has_key ( key ) : return - 1 self . push_to_head ( key ) return self . d [ key ]  def set ( self , key , value ) :          if self . d . has_key ( key ) :              self . d [ key ] = value self . push_to_head ( key ) return  if len ( self . idx ) >= self . cap :              idx_delete = self . idx . pop ( ) del self . d [ idx_delete ]  self . d [ key ] = value self . idx . appendleft ( key )  def push_to_head ( self , key ) :          self . idx . remove ( key ) self . idx . appendleft ( key )   class DLL ( object ) :      def __init__ ( self , key = None , value = None ) :          self . key = key self . val = value self . prev = None self . next = None   class LRUCache2 ( object ) :      def __init__ ( self , capacity ) :          h = DLL ( ) t = DLL ( ) h . next = t t . prev = h self . vol = 0 self . cap = capacity self . d = { } self . head = h self . tail = t  def get ( self , key ) :          if self . d . has_key ( key ) :              node = self . d [ key ] self . move_to_head ( key ) return node . val  return - 1  def set ( self , key , value ) :          if self . cap <= 0 : reutrn if self . d . has_key ( key ) :              node = self . d [ key ] node . val = value self . move_to_head ( key ) return  if self . vol >= self . cap :              self . pop ( )  self . add_new ( key , value )  def add_new ( self , key , value ) :          new_node = DLL ( key , value ) self . d [ key ] = new_node self . append ( key ) self . vol += 1  def move_to_head ( self , key ) :          self . remove ( key ) self . append ( key )  def remove ( self , key ) :          node = self . d [ key ] node . prev . next = node . next node . next . prev = node . prev  def append ( self , key ) :          node = self . d [ key ] node . prev = self . head node . next = self . head . next self . head . next . prev = node self . head . next = node  def pop ( self ) :          key = self . tail . prev . key self . remove ( key ) del self . d [ key ] self . vol -= 1   def test ( ) :      print <str> l = LRUCache2 ( 2 ) l . set ( 1 , 1 ) l . set ( 2 , 2 ) l . get ( 1 ) l . set ( 3 , 3 ) l . get ( 2 ) l . get ( 3 )  def test1 ( ) :      print <str> l2 = LRUCache2 ( 2 ) l2 . set ( 2 , 1 ) l2 . set ( 1 , 1 ) l2 . get ( 2 ) l2 . set ( 4 , 1 ) l2 . get ( 1 ) l2 . get ( 2 )  def test2 ( ) :      print <str> l = LRUCache2 ( 1 ) l . set ( 2 , 1 ) l . set ( 3 , 2 ) l . get ( 2 ) l . get ( 3 )  def test3 ( ) :      print <str> l = LRUCache2 ( 10 ) l . set ( 10 , 13 ) l . set ( 3 , 17 ) l . set ( 6 , 11 ) l . set ( 10 , 5 ) l . set ( 9 , 10 ) l . get ( 13 ) l . set ( 2 , 19 ) l . get ( 2 ) l . get ( 3 ) l . set ( 5 , 25 ) l . get ( 8 ) l . set ( 9 , 22 ) l . set ( 5 , 5 ) l . set ( 1 , 30 ) l . get ( 11 ) l . set ( 9 , 12 ) l . get ( 7 ) l . get ( 5 ) l . get ( 8 ) l . get ( 9 ) l . set ( 4 , 30 ) l . set ( 9 , 3 ) l . get ( 9 ) l . get ( 10 ) l . get ( 10 ) l . set ( 6 , 14 ) l . set ( 3 , 1 ) l . get ( 3 ) l . set ( 10 , 11 ) l . get ( 8 ) l . set ( 2 , 14 ) l . get ( 1 ) l . get ( 5 ) l . get ( 4 ) l . set ( 11 , 4 ) l . set ( 12 , 24 ) l . set ( 5 , 18 ) l . get ( 13 ) l . set ( 7 , 23 ) l . get ( 8 ) l . get ( 12 ) l . set ( 3 , 27 ) l . set ( 2 , 12 ) l . get ( 5 ) l . set ( 2 , 9 ) l . set ( 13 , 4 ) l . set ( 8 , 18 ) l . set ( 1 , 7 ) l . get ( 6 ) l . set ( 9 , 29 ) l . set ( 8 , 21 ) l . get ( 5 ) l . set ( 6 , 30 ) l . set ( 1 , 12 ) l . get ( 10 ) l . set ( 4 , 15 ) l . set ( 7 , 22 ) l . set ( 11 , 26 ) l . set ( 8 , 17 ) l . set ( 9 , 29 ) l . get ( 5 ) l . set ( 3 , 4 ) l . set ( 11 , 30 ) l . get ( 12 ) l . set ( 4 , 29 ) l . get ( 3 ) l . get ( 9 ) l . get ( 6 ) l . set ( 3 , 4 ) l . get ( 1 ) l . get ( 10 ) l . set ( 3 , 29 ) l . set ( 10 , 28 ) l . set ( 1 , 20 ) l . set ( 11 , 13 ) l . get ( 3 ) l . set ( 3 , 12 ) l . set ( 3 , 8 ) l . set ( 10 , 9 ) l . set ( 3 , 26 ) l . get ( 8 ) l . get ( 7 ) l . get ( 5 ) l . set ( 13 , 17 ) l . set ( 2 , 27 ) l . set ( 11 , 15 ) l . get ( 12 ) l . set ( 9 , 19 ) l . set ( 2 , 15 ) l . set ( 3 , 16 ) l . get ( 1 ) l . set ( 12 , 17 ) l . set ( 9 , 1 ) l . set ( 6 , 19 ) l . get ( 4 ) l . get ( 5 ) l . get ( 5 ) l . set ( 8 , 1 ) l . set ( 11 , 7 ) l . set ( 5 , 2 ) l . set ( 9 , 28 ) l . get ( 1 ) l . set ( 2 , 2 ) l . set ( 7 , 4 ) l . set ( 4 , 22 ) l . set ( 7 , 24 ) l . set ( 9 , 26 ) l . set ( 13 , 28 ) l . set ( 11 , 26 )  text = def print_fucking_test_case ( text ) :      begin = None end = None for i , c in enumerate ( text ) :          if c == <str> or c == <str> :              begin = i continue  if begin and c == <str> :              end = i print text [ begin : end + 1 ]     