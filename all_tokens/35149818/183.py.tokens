class Solution :      def submatrixSum ( self , matrix ) :          if not matrix or not matrix [ 0 ] :              return [ ]  len_row , len_col = len ( matrix ) , len ( matrix [ 0 ] ) dp = [ [ 0 ] * ( len_col + 1 ) for i in xrange ( len_row + 1 ) ] for row in xrange ( 1 , len_row + 1 ) :              for col in xrange ( 1 , len_col + 1 ) :                  dp [ row ] [ col ] = dp [ row ] [ col - 1 ] + dp [ row - 1 ] [ col ] - dp [ row - 1 ] [ col - 1 ] + matrix [ row - 1 ] [ col - 1 ]   for max_row in xrange ( len_row ) :              for max_col in xrange ( len_col ) :                  end_sum = dp [ max_row + 1 ] [ max_col + 1 ] for row in xrange ( max_row + 1 ) :                      for col in xrange ( max_col + 1 ) :                          cur_sum = end_sum - ( dp [ max_row + 1 ] [ col ] + dp [ row ] [ max_col + 1 ] ) + dp [ row ] [ col ] if cur_sum == 0 :                              return [ ( row , col ) , ( max_row , max_col ) ]      return [ ]    