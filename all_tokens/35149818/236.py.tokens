class Solution ( object ) :      def lowestCommonAncestor ( self , root , p , q ) :          if p . val < root . val and q . val < root . val :              return self . lowestCommonAncestor ( root . left , p , q )  elif p . val > root . val and q . val > root . val :              return self . lowestCommonAncestor ( root . right , p , q )  return root   class Solution ( object ) :      def lowestCommonAncestor ( self , root , p , q ) :          if root is None :              return None  if root . val == p . val or root . val == q . val :              return root  l = self . lowestCommonAncestor ( root . left , p , q ) r = self . lowestCommonAncestor ( root . right , p , q ) if l is None and r is None :              return None  if l is not None and r is None :              return l  if r is not None and l is None :              return r  return root    