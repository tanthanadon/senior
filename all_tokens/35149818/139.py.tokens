class Solution ( object ) :      def minWindow ( self , s , t ) :          if not t or not s or len ( t ) > len ( s ) :              return <str>  pool = { } char_count = len ( t ) for c in t :              if c in pool :                  pool [ c ] += 1  else :                  pool [ c ] = 1   result = <str> q = collections . deque ( ) for i in xrange ( len ( s ) ) :              cur_char = s [ i ] if cur_char not in pool :                  continue  q . append ( ( cur_char , i ) ) if pool [ cur_char ] > 0 :                  char_count -= 1  pool [ cur_char ] -= 1 if char_count != 0 :                  continue  while pool [ q [ 0 ] [ 0 ] ] < 0 :                  pool [ q [ 0 ] [ 0 ] ] += 1 q . popleft ( )  if not result or q [ - 1 ] [ 1 ] - q [ 0 ] [ 1 ] + 1 < len ( result ) :                  result = s [ q [ 0 ] [ 1 ] : q [ - 1 ] [ 1 ] + 1 ]   return result    