import sys class Codec :      def serialize ( self , root ) :          def s_helper ( root ) :              if not root : return r . append ( str ( root . val ) ) s_helper ( root . left ) s_helper ( root . right )  r = [ ] s_helper ( root ) return <str> . join ( r )  def deserialize ( self , data ) :          dl = data . split ( ) root = self . helper ( - sys . maxint - 1 , sys . maxint , dl ) return root  def helper ( self , low , high , data_list ) :          if not data_list : return None first_val = int ( data_list [ 0 ] ) if first_val < low or first_val > high : return None root = TreeNode ( first_val ) del data_list [ 0 ] root . left = self . helper ( low , root . val , data_list ) root . right = self . helper ( root . val , high , data_list ) return root   class TreeNode ( object ) :      def __init__ ( self , x ) :          self . val = x self . left = None self . right = None   def d ( data ) :          def doit ( ) :              val = next ( vals ) if val == <str> :                  return None  node = TreeNode ( int ( val ) ) node . left = doit ( ) node . right = doit ( ) return node  vals = iter ( data . split ( ) ) return doit ( )  tree_str = <str> tree_root1 = d ( tree_str ) codec = Codec ( ) codec . deserialize ( codec . serialize ( tree_root1 ) )  