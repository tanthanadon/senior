class Solution :      def stoneGame ( self , A ) :          if not A :              return 0  lens = len ( A ) sums = [ 0 ] * ( lens + 1 ) for i in xrange ( 1 , lens + 1 ) :              sums [ i ] = sums [ i - 1 ] + A [ i - 1 ]  dp = [ [ 0 ] * lens for i in xrange ( lens ) ] return self . __dfs ( 0 , lens - 1 , dp , sums )  def __dfs ( self , left , right , dp , sums ) :          if left > right or left == right :              return 0  cur_sum = sums [ right + 1 ] - sums [ left ] if left == right + 1 or right == left + 1 :              return cur_sum  if dp [ left ] [ right ] != 0 :              return dp [ left ] [ right ]  cur_min = float ( <str> ) for i in xrange ( left , right ) :              l = self . __dfs ( left , i , dp , sums ) r = self . __dfs ( i + 1 , right , dp , sums ) cur_min = min ( cur_min , l + r )  dp [ left ] [ right ] = cur_min + cur_sum return cur_min + cur_sum    