class Solution :      def copyRandomList ( self , head ) :          if not head :              return None  head_copy_original = head while head_copy_original :              self . copy_node ( head_copy_original ) head_copy_original = head_copy_original . next . next  head_copy_random = head while head_copy_random :              if head_copy_random . random :                  head_copy_random . next . random = head_copy_random . random . next  head_copy_random = head_copy_random . next . next  dummy = RandomListNode ( - 1 ) new_head = dummy while head :              new_head . next = head . next head . next = head . next . next new_head = new_head . next head = head . next  return dummy . next  def copy_node ( self , node ) :          new_node = RandomListNode ( node . label ) new_node . next = node . next node . next = new_node  def _print_linkedlist ( self , head ) :          random = [ ] l = <str> while head :              l += <str> % head . label r = head . random . label if head . random else None random . append ( r ) head = head . next  l += <str> print l print random   class Solution ( object ) :      def copyRandomList ( self , head ) :          entry_point = RandomListNode ( - 1 ) prev = entry_point cur = head d = { } while cur :              if d . has_key ( cur ) :                  prev . next = d [ cur ] new_node = prev . next  else :                  new_node = RandomListNode ( cur . label ) d [ cur ] = new_node prev . next = new_node  if not cur . random :                  new_node . random = None  elif d . has_key ( cur . random ) :                  new_node . random = d [ cur . random ]  else :                  new_random = RandomListNode ( cur . random . label ) d [ cur . random ] = new_random new_node . random = new_random  cur = cur . next prev = prev . next  return entry_point . next    