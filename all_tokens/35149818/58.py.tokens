class Solution ( object ) :      def findWords ( self , words ) :          row1 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) row2 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) row3 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) result = [ ] for w in words :              w_set = set ( w . lower ( ) ) if w_set . issubset ( row1 ) or w_set . issubset ( row2 ) or w_set . issubset ( row3 ) :                  result . append ( w )   return result   class Solution ( object ) :      def findWords ( self , words ) :          row1 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) row2 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) row3 = set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) rows = [ row1 , row2 , row3 ] result = [ ] for w in words :              if not w :                  continue  row = - 1 first_letter = w [ 0 ] . lower ( ) for idx , r in enumerate ( rows ) :                  if first_letter in r :                      row = idx break   for i in xrange ( 1 , len ( w ) + 1 ) :                  if i == len ( w ) :                      result . append ( w ) break  if w [ i ] . lower ( ) not in rows [ row ] :                      break    return result    