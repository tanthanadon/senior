class UnionFind ( object ) :      def __init__ ( self , father , fathers ) :          self . father = father self . fathers = fathers  def find ( self , node ) :          if self . father [ node ] == node :              return node  f = self . find ( self . father [ node ] ) self . father [ node ] = f return f  def union ( self , n1 , n2 ) :          f1 = self . find ( n1 ) f2 = self . find ( n2 ) if f1 != f2 :              self . father [ f1 ] = f2 self . fathers [ f2 ] += self . fathers [ f1 ] del self . fathers [ f1 ]   def f ( self ) :          return self . fathers   class Solution :      def connectedSet2 ( self , nodes ) :          if not nodes :              return [ ]  father = { } fathers = { } for n in nodes :              father [ n . label ] = n . label fathers [ n . label ] = [ n . label ] for neighbor in n . neighbors :                  father [ neighbor . label ] = neighbor . label fathers [ neighbor . label ] = [ neighbor . label ]   uf = UnionFind ( father , fathers ) for n in nodes :              for neighbor in n . neighbors :                  uf . union ( n . label , neighbor . label )   regions = uf . f ( ) . values ( ) result = [ ] for r in regions :              result . append ( sorted ( r ) )  return result    