class Solution ( object ) :      def lengthOfLongestSubstringKDistinct ( self , s , k ) :          if not s or k <= 0 :              return 0  d = { } prev = 0 result = 0 for i in xrange ( len ( s ) ) :              if s [ i ] in d :                  d [ s [ i ] ] += 1  else :                  d [ s [ i ] ] = 1  while prev < i and len ( d ) > k :                  if d [ s [ prev ] ] > 1 :                      d [ s [ prev ] ] -= 1  else :                      del d [ s [ prev ] ]  prev += 1  result = max ( result , i - prev + 1 )  return result   class Solution ( object ) :      def lengthOfLongestSubstringKDistinct ( self , s , k ) :          d = { } low , ret = 0 , 0 for i , c in enumerate ( s ) :              d [ c ] = i if len ( d ) > k :                  low = min ( d . values ( ) ) del d [ s [ low ] ] low += 1  ret = max ( i - low + 1 , ret )  return ret    