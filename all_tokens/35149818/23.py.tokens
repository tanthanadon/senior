class Node ( object ) :      def __init__ ( self , ch , count , first_index ) :          self . ch = ch self . count = count self . i = first_index  def __cmp__ ( self , other ) :          if self . count != other . count :              return other . count - self . count  return self . i - other . i  def __str__ ( self ) :          return self . ch * self . count   class Solution ( object ) :      def frequencySort ( self , s ) :          if not s :              return <str>  d = { } for idx , c in enumerate ( s ) :              if c in d :                  d [ c ] . count += 1  else :                  d [ c ] = Node ( c , 1 , idx )   char_list = sorted ( d . values ( ) ) result = <str> for n in char_list :              result += str ( n )  return result   class Solution ( object ) :      def frequencySort ( self , s ) :          if not s :              return <str>  d = [ 0 ] * 256 max_count = 0 for c in s :              d [ ord ( c ) ] += 1 max_count = max ( max_count , d [ ord ( c ) ] )  conut_map = [ None ] * ( max_count + 1 ) for c in s :              count = d [ ord ( c ) ] if count == 0 :                  continue  if not conut_map [ count ] :                  conut_map [ count ] = [ c ]  else :                  conut_map [ count ] . append ( c )  d [ ord ( c ) ] = 0  result = <str> for i in xrange ( len ( conut_map ) - 1 , - 1 , - 1 ) :              if not conut_map [ i ] :                  continue  for cm in conut_map [ i ] :                  result += cm * i   return result    