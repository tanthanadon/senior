class Solution ( object ) :      def getFactors ( self , n ) :          if n <= 3 :              return [ ]  def dfs ( start , cur_path , remain , result ) :              if remain == 1 :                  result . append ( cur_path [ : ] ) return  for i in xrange ( start , int ( math . sqrt ( remain ) ) + 1 ) :                  if remain % i != 0 :                      continue  cur_path . append ( i ) dfs ( i , cur_path , remain / i , result ) cur_path . pop ( )  cur_path . append ( remain ) dfs ( remain , cur_path , 1 , result ) cur_path . pop ( )  result = [ ] dfs ( 2 , [ ] , n , result ) result . pop ( ) return result    