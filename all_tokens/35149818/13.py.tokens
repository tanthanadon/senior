class Solution ( object ) :      def lengthLongestPath ( self , input ) :          if not input :              return 0  lines = input . splitlines ( ) stack = [ ] cur_len = 0 result = 0 for l in lines :              cur_string = l . lstrip ( <str> ) cur_level = len ( l ) - len ( cur_string ) while stack and stack [ - 1 ] [ 1 ] >= cur_level :                  popped_str = stack . pop ( ) [ 0 ] cur_len -= len ( popped_str )  stack . append ( ( cur_string , cur_level ) ) cur_len += len ( cur_string ) if <str> in cur_string :                  result = max ( result , cur_len + len ( stack ) - 1 )   return result   class Solution ( object ) :      def lengthLongestPath ( self , input ) :          if not input :              return 0  stack , result = [ 0 ] , 0 for l in input . splitlines ( ) :              cur_string = l . lstrip ( <str> ) cur_level = len ( l ) - len ( cur_string ) while len ( stack ) - 2 >= cur_level :                  popped_str = stack . pop ( )  stack . append ( len ( cur_string ) + stack [ - 1 ] ) if <str> in cur_string :                  result = max ( result , stack [ - 1 ] + cur_level )   return result    