class Solution :      def expressionExpand ( self , s ) :          if not s :              return <str>  stack = [ ] number = 0 for c in s :              if c . isdigit ( ) :                  number = number * 10 + int ( c )  elif c == <str> :                  stack . append ( str ( number ) ) number = 0  elif c == <str> :                  sub_str = self . pop_stack ( stack ) repeat = int ( stack . pop ( ) ) for i in xrange ( repeat ) :                      stack . append ( sub_str )   else :                  stack . append ( c )   return self . pop_stack ( stack )  def pop_stack ( self , stack ) :          q = collections . deque ( ) while stack and not stack [ - 1 ] . isdigit ( ) :              q . appendleft ( stack . pop ( ) )  return <str> . join ( q )    