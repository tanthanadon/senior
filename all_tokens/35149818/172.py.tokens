class Solution :      def connectedSet ( self , nodes ) :          if not nodes :              return [ ]  all_nodes = set ( ) for n in nodes :              all_nodes . add ( n ) for neighbor in n . neighbors :                  all_nodes . add ( neighbor )   result = [ ] q = collections . deque ( ) while all_nodes :              first_node = all_nodes . pop ( ) sub_result = [ ] q . appendleft ( first_node ) all_nodes . discard ( first_node ) while len ( q ) > 0 :                  cur_len = len ( q ) for i in xrange ( cur_len ) :                      cur_node = q . pop ( ) sub_result . append ( cur_node . label ) for neighbor in cur_node . neighbors :                          if neighbor in all_nodes :                              all_nodes . discard ( neighbor ) q . appendleft ( neighbor )     sub_result . sort ( ) result . append ( sub_result )  return result    