class Solution :      def maxSlidingMatrix ( self , matrix , k ) :          if not matrix or not matrix [ 0 ] :              return 0  len_row , len_col = len ( matrix ) , len ( matrix [ 0 ] ) if k > len_row or k > len_col :              return 0  if k == len_row and k == len_col :              return sum ( map ( lambda x : sum ( x ) , matrix ) )  sums = [ [ 0 ] * ( len_col + 1 ) for i in xrange ( len_row + 1 ) ] for row in xrange ( 1 , len_row + 1 ) :              for col in xrange ( 1 , len_col + 1 ) :                  sums [ row ] [ col ] = sums [ row - 1 ] [ col ] + sums [ row ] [ col - 1 ] - sums [ row - 1 ] [ col - 1 ] + matrix [ row - 1 ] [ col - 1 ]   max_sum = float ( <str> ) for row in xrange ( k - 1 , len_row ) :              for col in xrange ( k - 1 , len_col ) :                  cur_sum = sums [ row + 1 ] [ col + 1 ] - sums [ row + 1 - k ] [ col + 1 ] - sums [ row + 1 ] [ col + 1 - k ] + sums [ row + 1 - k ] [ col + 1 - k ] max_sum = max ( max_sum , cur_sum )   return max_sum    