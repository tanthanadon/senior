class Solution ( object ) :      def reorderList ( self , head ) :          if not head :              return  first , second = self . __split ( head ) second = self . __reverse ( second ) result = self . __merge ( first , second )  def __split ( self , head ) :          slow = fast = head while fast and fast . next :              slow = slow . next fast = fast . next . next  middle = slow . next slow . next = None return ( head , middle )  def __reverse ( self , head ) :          prev , cur = None , head while cur :              next = cur . next cur . next = prev prev = cur cur = next  return prev  def __merge ( self , head1 , head2 ) :          dummy = ListNode ( 0 ) cur = dummy while head1 or head2 :              if head1 :                  cur . next = head1 head1 = head1 . next cur = cur . next  if head2 :                  cur . next = head2 head2 = head2 . next cur = cur . next   return dummy . next    