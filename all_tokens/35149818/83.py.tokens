class Solution ( object ) :      def getIntersectionNode ( self , headA , headB ) :          if not headA or not headB :              return None  a , b = headA , headB while a is not b :              a = a . next if a else headB b = b . next if b else headA  return a   class Solution ( object ) :      def getIntersectionNode ( self , headA , headB ) :          if not headA or not headB :              return None  lenA , lenB = self . __length ( headA ) , self . __length ( headB ) while lenA > lenB :              headA = headA . next lenA -= 1  while lenB > lenA :              headB = headB . next lenB -= 1  while headA is not headB :              headA = headA . next headB = headB . next  return headA  def __length ( self , head ) :          if not head :              return 0  len = 0 while head :              len += 1 head = head . next  return len    