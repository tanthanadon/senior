class Solution ( object ) :      def inorderSuccessor ( self , root , p ) :          if not root : return None if p . val >= root . val : return self . inorderSuccessor ( root . right , p ) left = self . inorderSuccessor ( root . left , p ) return left if left else root  def inorderPredecessor ( self , root , p ) :          if not root : return None if p . val <= root . val : return self . inorderSuccessor ( root . left , p ) right = self . inorderSuccessor ( root . right , p ) return right if right else root   class Solution ( object ) :      def inorderSuccessor ( self , root , p ) :          succ = None while root :              if p . val < root . val :                  succ = root root = root . left  else :                  root = root . right   return succ   class Solution ( object ) :      prev = None def inorderSuccessor ( self , root , p ) :          if not root : return None l = self . inorderSuccessor ( root . left , p ) if l : return l if self . prev is p :              self . prev = root return root  self . prev = root r = self . inorderSuccessor ( root . right , p ) if r : return r return None    