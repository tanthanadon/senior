class NumMatrix ( object ) :      def __init__ ( self , matrix ) :          if not matrix or not matrix [ 0 ] :              return  self . m = matrix self . len_row , self . len_col = len ( matrix ) , len ( matrix [ 0 ] ) self . sums = [ [ 0 ] * ( self . len_col + 1 ) for i in xrange ( self . len_row + 1 ) ] for row in xrange ( 1 , self . len_row + 1 ) :              for col in xrange ( 1 , self . len_col + 1 ) :                  self . sums [ row ] [ col ] = self . sums [ row - 1 ] [ col ] + self . sums [ row ] [ col - 1 ] - self . sums [ row - 1 ] [ col - 1 ] + matrix [ row - 1 ] [ col - 1 ]   self . updates = collections . OrderedDict ( )  def update ( self , row , col , val ) :          if row < 0 or row >= self . len_row or col < 0 or col >= self . len_col :              return  old = self . m [ row ] [ col ] for r in xrange ( row , self . len_row ) :              for c in xrange ( col , self . len_col ) :                  self . sums [ r + 1 ] [ c + 1 ] = self . sums [ r + 1 ] [ c + 1 ] - old + val   self . m [ row ] [ col ] = val  def sumRegion ( self , row1 , col1 , row2 , col2 ) :          result = self . sums [ row2 + 1 ] [ col2 + 1 ] - self . sums [ row1 ] [ col2 + 1 ] - self . sums [ row2 + 1 ] [ col1 ] + self . sums [ row1 ] [ col1 ] return result    