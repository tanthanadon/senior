class Solution ( object ) :      def addTwoNumbers ( self , l1 , l2 ) :          if not l1 or not l2 :              return l1 or l2  l1 = self . reverse ( l1 ) l2 = self . reverse ( l2 ) carry = False dummy = ListNode ( 0 ) new_head = dummy while l1 or l2 :              l1_val = l1 . val if l1 else 0 l2_val = l2 . val if l2 else 0 cur_sum = l1_val + l2_val + 1 if carry else l1_val + l2_val if cur_sum > 9 :                  carry = True cur_sum %= 10  else :                  carry = False  new_head . next = ListNode ( cur_sum ) new_head = new_head . next l1 = l1 . next if l1 else None l2 = l2 . next if l2 else None  if carry :              new_head . next = ListNode ( 1 )  return self . reverse ( dummy . next )  def reverse ( self , head ) :          if not head or not head . next :              return head  prev , cur = None , head while cur :              next = cur . next cur . next = prev prev = cur cur = next  return prev   class Solution ( object ) :      def addTwoNumbers ( self , l1 , l2 ) :          if not l1 or not l2 :              return l1 or l2  stack1 , stack2 = [ ] , [ ] while l1 or l2 :              if l1 :                  stack1 . append ( l1 . val )  if l2 :                  stack2 . append ( l2 . val )  l1 = l1 . next if l1 else None l2 = l2 . next if l2 else None  prev , carry = None , False while stack1 or stack2 :              val1 = stack1 . pop ( ) if stack1 else 0 val2 = stack2 . pop ( ) if stack2 else 0 cur_sum = val1 + val2 + 1 if carry else val1 + val2 if cur_sum > 9 :                  carry = True cur_sum %= 10  else :                  carry = False  new_node = ListNode ( cur_sum ) new_node . next = prev prev = new_node  if carry :              new_head = ListNode ( 1 ) new_head . next = prev return new_head  return prev    