class Solution ( object ) :      def flatten ( self , root ) :          self . helper ( root )  def helper ( self , root ) :          if root is None :              return None  l = self . helper ( root . left ) r = self . helper ( root . right ) if not l and not r :              return [ root , root ]  if not l :              root . right = r [ 0 ] return [ root , r [ 1 ] ]  if not r :              root . right = l [ 0 ] root . left = None return [ root , l [ 1 ] ]  root . right = l [ 0 ] root . left = None left_tail = l [ 1 ] left_tail . right = r [ 0 ] return [ root , r [ 1 ] ]   class Solution ( object ) :      prev = None def flatten ( self , root ) :          if root is None :              return  self . flatten ( root . right ) self . flatten ( root . left ) root . right = self . prev root . left = None self . prev = root    