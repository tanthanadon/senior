class Solution :      def findPeakII ( self , A ) :          len_row , len_col = len ( A ) , len ( A [ 0 ] ) top , bottom = 0 , len_row - 1 while top < bottom :              row = ( top + bottom ) / 2 col_max = 0 for i in xrange ( 1 , len_col ) :                  if A [ row ] [ i ] > A [ row ] [ col_max ] :                      col_max = i   if A [ row + 1 ] [ col_max ] > A [ row ] [ col_max ] :                  top = row  elif A [ row - 1 ] [ col_max ] > A [ row ] [ col_max ] :                  bottom = row  else :                  return [ row , col_max ]     class Solution :      def findPeakII ( self , A ) :          len_row , len_col = len ( A ) , len ( A [ 0 ] ) top , bottom , left , right = 0 , len_row - 1 , 0 , len_col - 1 top_down = True while top < bottom and left < right :              if top_down :                  row = ( top + bottom ) / 2 col_max = left for i in xrange ( left + 1 , right + 1 ) :                      if A [ row ] [ i ] > A [ row ] [ col_max ] :                          col_max = i   if A [ row + 1 ] [ col_max ] > A [ row ] [ col_max ] :                      top = row  elif A [ row - 1 ] [ col_max ] > A [ row ] [ col_max ] :                      bottom = row  else :                      return [ row , col_max ]   else :                  col = ( left + right ) / 2 row_max = top for i in xrange ( top + 1 , bottom + 1 ) :                      if A [ i ] [ col ] > A [ row_max ] [ col ] :                          row_max = i   if A [ row_max ] [ col + 1 ] > A [ row_max ] [ col ] :                      left = col  elif A [ row_max ] [ col - 1 ] > A [ row_max ] [ col ] :                      right = col  else :                      return [ row_max , col ]   top_down = not top_down     