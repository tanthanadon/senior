class CriticalPoint ( object ) :      def __init__ ( self , id , a = True , x = 0 , h = 0 , p = - 1 ) :          self . id = id self . a = a self . x = x self . h = h  def __cmp__ ( self , other ) :          return other . h - self . h  def __str__ ( self ) :          return <str> % ( self . id , self . h )   class HeapQueueWithDelete ( object ) :      def __init__ ( self ) :          self . heap = [ CriticalPoint ( id = - 1 ) ] self . delete_map = { }  def push ( self , point ) :          heapq . heappush ( self . heap , point ) self . delete_map [ str ( point ) ] = point  def peak ( self ) :          while self . heap and not self . heap [ 0 ] . a :              heapq . heappop ( self . heap )  return self . heap [ 0 ]  def delete ( self , point ) :          pid = point . id prev_map_key = <str> % ( pid , - point . h ) prev_point = self . delete_map . pop ( prev_map_key ) prev_point . a = False    