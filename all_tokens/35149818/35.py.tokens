class Solution :      def maxSquare ( self , matrix ) :          if not matrix :              return 0  len_row , len_col = len ( matrix ) , len ( matrix [ 0 ] ) dp = [ [ 0 ] * len_col for i in xrange ( len_row ) ] def inbound ( r , c ) :              return 0 <= r < len_row and 0 <= c < len_col  max_area = 0 for row in xrange ( len_row ) :              for col in xrange ( len_col ) :                  dp [ row ] [ col ] = [ 0 , 0 ] if matrix [ row ] [ col ] == 0 :                      continue  up_row , up_col = row - 1 , col dp [ row ] [ col ] [ 1 ] = dp [ up_row ] [ up_col ] [ 1 ] + 1 if inbound ( up_row , up_col ) else 1 left_row , left_col = row , col - 1 dp [ row ] [ col ] [ 0 ] = dp [ left_row ] [ left_col ] [ 0 ] + 1 if inbound ( left_row , left_col ) else 1 if inbound ( row - 1 , col - 1 ) :                      matrix [ row ] [ col ] = min ( matrix [ row - 1 ] [ col - 1 ] + 1 , min ( dp [ row ] [ col ] [ 0 ] , dp [ row ] [ col ] [ 1 ] ) )  max_area = max ( max_area , matrix [ row ] [ col ] ** 2 )   return max_area   class Solution :      def maxSquare ( self , matrix ) :          if not matrix :              return 0  len_row , len_col = len ( matrix ) , len ( matrix [ 0 ] ) if len_row < 1 or len_col < 1 :              return 0  def inbound ( r , c ) :              return 0 <= r < len_row and 0 <= c < len_col  max_area = 0 for row in xrange ( len_row ) :              for col in xrange ( len_col ) :                  if matrix [ row ] [ col ] == 0 :                      continue  if inbound ( row - 1 , col - 1 ) :                      matrix [ row ] [ col ] = min ( matrix [ row - 1 ] [ col - 1 ] , min ( matrix [ row - 1 ] [ col ] , matrix [ row ] [ col - 1 ] ) ) + 1  else :                      matrix [ row ] [ col ] = 1  max_area = max ( max_area , matrix [ row ] [ col ] ** 2 )   return max_area    