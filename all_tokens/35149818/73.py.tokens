class Solution :      def subarraySumII ( self , A , start , end ) :          if not A or start > end :              return 0  for i in xrange ( 1 , len ( A ) ) :              A [ i ] += A [ i - 1 ]  A . sort ( ) result = 0 for a in A :              if start <= a <= end :                  result += 1  small = a - end big = a - start result += self . __bs ( A , big + 1 ) - self . __bs ( A , small )  return result  def __bs ( self , A , value ) :          lens = len ( A ) if A [ - 1 ] < value :              return lens  begin , end = 0 , lens - 1 while begin + 1 < end :              mid = ( begin + end ) / 2 if A [ mid ] >= value :                  end = mid - 1  else :                  begin = mid   if end < 0 or ( A [ end ] >= value and A [ begin ] >= value ) :              return 0  if A [ end ] < value :              return end + 1  return begin + 1    