class Solution ( object ) :      def maxPoints ( self , points ) :          if not points :              return 0  lens = len ( points ) if lens <= 2 :              return lens  def find_gcd ( x , y ) :              if y == 0 :                  return x  return find_gcd ( y , x % y )  result = 0 for i in xrange ( lens ) :              m = { } cur_x = points [ i ] . x cur_y = points [ i ] . y overlap = cur_max = 0 for j in xrange ( lens ) :                  if i == j :                      continue  next_x = points [ j ] . x - cur_x next_y = points [ j ] . y - cur_y if next_x == 0 and next_y == 0 :                      overlap += 1 continue  gcd = find_gcd ( next_x , next_y ) if gcd != 0 :                      next_x /= gcd next_y /= gcd  if next_x in m :                      if next_y in m [ next_x ] :                          m [ next_x ] [ next_y ] += 1  else :                          m [ next_x ] [ next_y ] = 1   else :                      m [ next_x ] = { next_y : 1 }  cur_max = max ( cur_max , m [ next_x ] [ next_y ] )  result = max ( result , cur_max + overlap + 1 )  return result    