class Solution ( object ) :      def numSquares ( self , n ) :          if n <= 0 :              return 0  if n <= 3 :              return n  dp = [ float ( <str> ) ] * ( n + 1 ) dp [ 0 ] = 0 for i in xrange ( 1 , n + 1 ) :              j = 1 while j * j <= i :                  dp [ i ] = min ( dp [ i ] , dp [ i - j * j ] + 1 ) j += 1   return dp [ n ]   class Solution ( object ) :      _dp = [ 0 ] def numSquares ( self , n ) :          if n <= 0 :              return 0  if n <= 3 :              return n  if n < len ( self . _dp ) :              return self . _dp [ n ]  start , end = len ( self . _dp ) , n diff = n - ( len ( self . _dp ) - 1 ) self . _dp += [ float ( <str> ) ] * ( diff ) for i in xrange ( start , end + 1 ) :              j = 1 while j * j <= i :                  self . _dp [ i ] = min ( self . _dp [ i ] , self . _dp [ i - j * j ] + 1 ) j += 1   return self . _dp [ n ]    