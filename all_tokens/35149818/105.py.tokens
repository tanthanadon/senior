class TrieNode ( object ) :      def __init__ ( self , c = None ) :          self . c = c self . has_word = False self . d = { }   class WordDictionary :      def __init__ ( self ) :          self . root = TrieNode ( )  def addWord ( self , word ) :          if not word :              return  cur_node = self . root for c in word :              if c not in cur_node . d :                  cur_node . d [ c ] = TrieNode ( c )  cur_node = cur_node . d [ c ]  cur_node . has_word = True  def search ( self , word ) :          return self . __search ( word , 0 , self . root )  def __search ( self , word , cur_word_idx , cur_node ) :          for idx in xrange ( cur_word_idx , len ( word ) ) :              c = word [ idx ] if c in cur_node . d :                  cur_node = cur_node . d [ c ]  elif c == <str> :                  for node in cur_node . d . values ( ) :                      if self . __search ( word , idx + 1 , node ) :                          return True   return False  else :                  return False   return cur_node . has_word    