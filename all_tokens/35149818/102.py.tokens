from urlparse import urlparse class Codec :      d = { } counter = itertools . count ( ) DOMAIN = <str> m = <str> def __id_to_base62 ( self , id ) :          result = <str> while id > 0 :              cur_dec = id % 62 result = self . m [ cur_dec ] + result id /= 62  result_len = len ( result ) missing_zeros = 6 - result_len return <str> * missing_zeros + result  def __base62_to_id ( self , base62 ) :          id = 0 for c in base62 :              if ord ( <str> ) <= ord ( c ) <= ord ( <str> ) :                  id = id * 62 + int ( c )  elif ord ( <str> ) <= ord ( c ) <= ord ( <str> ) :                  id = id * 62 + ( ord ( c ) - ord ( <str> ) + 10 )  else :                  id = id * 62 + ( ord ( c ) - ord ( <str> ) + 36 )   return id  def get_uri ( self , url ) :          return urlparse ( url ) . path [ 1 : ]  def encode ( self , longUrl ) :          new_id = next ( self . counter ) self . d [ new_id ] = longUrl base62 = self . __id_to_base62 ( new_id ) return self . DOMAIN + base62  def decode ( self , shortUrl ) :          base62 = self . get_uri ( shortUrl ) id = self . __base62_to_id ( base62 ) return self . d [ id ]   class Codec :      alphabet = string . ascii_letters + <str> def __init__ ( self ) :          self . url2code = { } self . code2url = { }  def encode ( self , longUrl ) :          while longUrl not in self . url2code :              code = <str> . join ( random . choice ( Codec . alphabet ) for _ in range ( 6 ) ) if code not in self . code2url :                  self . code2url [ code ] = longUrl self . url2code [ longUrl ] = code   return <str> + self . url2code [ longUrl ]  def decode ( self , shortUrl ) :          return self . code2url [ shortUrl [ - 6 : ] ]    