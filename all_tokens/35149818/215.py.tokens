class TrieNode :      def __init__ ( self , c = None ) :          self . c = c self . d = { } self . has_word = False   class Trie :      def __init__ ( self ) :          self . root = TrieNode ( )  def insert ( self , word ) :          if not word :              return  cur_node = self . root for c in word :              if c in cur_node . d :                  cur_node = cur_node . d [ c ]  else :                  new_node = TrieNode ( c ) cur_node . d [ c ] = new_node cur_node = new_node   cur_node . has_word = True  def search ( self , word ) :          if not word :              return False  cur_node = self . root for c in word :              if c not in cur_node . d :                  return False  cur_node = cur_node . d [ c ]  return cur_node . has_word  def startsWith ( self , prefix ) :          if not prefix :              return False  cur_node = self . root for c in prefix :              if c not in cur_node . d :                  return False  cur_node = cur_node . d [ c ]  return cur_node . has_word or len ( cur_node . d ) != 0    