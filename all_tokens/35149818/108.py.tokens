class UnionFind ( object ) :      def __init__ ( self , nodes ) :          self . father = { } self . fathers = { } for n in nodes :              self . father [ n ] = n self . fathers [ n ] = [ n ]   def find ( self , node ) :          if self . father [ node ] == node :              return node  f = self . find ( self . father [ node ] ) self . father [ node ] = f return f  def union ( self , node1 , node2 ) :          f1 = self . find ( node1 ) f2 = self . find ( node2 ) if f1 != f2 :              self . father [ f1 ] = f2 self . fathers [ f2 ] += self . fathers [ f1 ] del self . fathers [ f1 ]   def subsets ( self ) :          return self . fathers   class Solution :      def connectedSet ( self , nodes ) :          all_nodes = set ( ) for n in nodes :              all_nodes . add ( n . label ) for neighbor in n . neighbors :                  all_nodes . add ( neighbor . label )   uf = UnionFind ( all_nodes ) for n in nodes :              for neighbor in n . neighbors :                  uf . union ( n . label , neighbor . label )   regions = uf . subsets ( ) result = [ ] for r in regions . values ( ) :              r . sort ( ) result . append ( r )  return result    