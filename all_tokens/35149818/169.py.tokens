class Solution :      def __init__ ( self ) :          self . dict = { }  def cloneGraph ( self , node ) :          if not node : return None self . dict [ node ] = UndirectedGraphNode ( node . label ) q = collections . deque ( [ node ] ) while len ( q ) > 0 :              cur_node = q . pop ( ) cur_node_copy = self . dict [ cur_node ] for n in cur_node . neighbors :                  if self . dict . has_key ( n ) :                      cur_node_copy . neighbors . append ( self . dict [ n ] )  else :                      new_neighbor = UndirectedGraphNode ( n . label ) self . dict [ n ] = new_neighbor cur_node_copy . neighbors . append ( new_neighbor ) q . appendleft ( n )    return self . dict [ node ]    