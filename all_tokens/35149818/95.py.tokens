class Solution :      def firstWillWin ( self , values ) :          if not values :              return False  dp = [ [ 0 ] * ( len ( values ) ) for i in xrange ( len ( values ) ) ] max_current = self . __dfs ( 0 , len ( values ) - 1 , values , dp ) return max_current > sum ( values ) / 2  def __dfs ( self , left , right , values , dp ) :          if left > right :              return 0  if dp [ left ] [ right ] != 0 :              return dp [ left ] [ right ]  cur = 0 if left == right :              cur = values [ left ]  if left == right - 1 :              cur = max ( values [ left ] , values [ right ] )  else :              l = min ( self . __dfs ( left + 2 , right , values , dp ) , self . __dfs ( left + 1 , right - 1 , values , dp ) ) + values [ left ] r = min ( self . __dfs ( left + 1 , right - 1 , values , dp ) , self . __dfs ( left , right - 2 , values , dp ) ) + values [ right ] cur = max ( l , r )  dp [ left ] [ right ] = cur return cur    