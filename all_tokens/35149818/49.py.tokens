class Solution :      def longestRepeatingSubsequence ( self , str ) :          if not str :              return 0  dp = [ [ 0 ] * ( len ( str ) + 1 ) for i in xrange ( len ( str ) + 1 ) ] for i in xrange ( 1 , len ( str ) + 1 ) :              for j in xrange ( i , len ( str ) + 1 ) :                  if i != j and str [ i - 1 ] == str [ j - 1 ] :                      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + 1  else :                      dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )    return dp [ - 1 ] [ - 1 ]   class Solution :      def longestRepeatingSubsequence ( self , str ) :          if not str :              return 0  prev = [ 0 ] * ( len ( str ) + 1 ) cur = [ 0 ] * ( len ( str ) + 1 ) for i in xrange ( 1 , len ( str ) + 1 ) :              for j in xrange ( i , len ( str ) + 1 ) :                  if i != j and str [ i - 1 ] == str [ j - 1 ] :                      cur [ j ] = prev [ j - 1 ] + 1  else :                      cur [ j ] = max ( cur [ j - 1 ] , prev [ j ] )   prev = cur [ : ]  return cur [ - 1 ]    