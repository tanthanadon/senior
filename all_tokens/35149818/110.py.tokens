class UnionFind ( object ) :      def __init__ ( self , n ) :          self . father = [ 0 ] * n self . count = n for i in xrange ( n ) :              self . father [ i ] = i   def find ( self , n ) :          if self . father [ n ] == n :              return n  f = self . find ( self . father [ n ] ) self . father [ n ] = f return f  def union ( self , n1 , n2 ) :          f1 = self . find ( n1 ) f2 = self . find ( n2 ) if f1 != f2 :              self . father [ f1 ] = f2 self . count -= 1   def query ( self ) :          return self . count   class Solution :      def validTree ( self , n , edges ) :          if not n or len ( edges ) != n - 1 :              return False  uf = UnionFind ( n ) for e in edges :              uf . union ( e [ 0 ] , e [ 1 ] )  return uf . query ( ) == 1    