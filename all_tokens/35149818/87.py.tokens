class Solution :      def longestIncreasingContinuousSubsequenceII ( self , A ) :          if not A or not A [ 0 ] :              return 0  self . len_row , self . len_col = len ( A ) , len ( A [ 0 ] ) self . delta_row = [ 0 , 0 , 1 , - 1 ] self . delta_col = [ 1 , - 1 , 0 , 0 ] self . dp = [ [ 0 ] * self . len_col for i in xrange ( self . len_row ) ] result = float ( <str> ) for row in xrange ( self . len_row ) :              for col in xrange ( self . len_col ) :                  result = max ( result , self . __dfs ( row , col , A ) )   return result  def __dfs ( self , row , col , A ) :          if self . dp [ row ] [ col ] < 0 :              return self . dp [ row ] [ col ] * - 1  max_here = 1 for i in xrange ( len ( self . delta_row ) ) :              next_row = row + self . delta_row [ i ] next_col = col + self . delta_col [ i ] if self . __within_bound ( next_row , next_col ) and A [ row ] [ col ] > A [ next_row ] [ next_col ] :                  max_here = max ( max_here , self . __dfs ( next_row , next_col , A ) + 1 )   self . dp [ row ] [ col ] = max_here * - 1 return max_here  def __within_bound ( self , row , col ) :          return 0 <= row < self . len_row and 0 <= col < self . len_col    