class Solution ( object ) :      def maxCoins ( self , nums ) :          if not nums :              return 0  lens = len ( nums ) nums_plus_dummies = [ 1 ] + nums + [ 1 ] dp = [ [ - 1 ] * lens for i in xrange ( lens ) ] self . __dfs ( 1 , lens , dp , nums_plus_dummies ) return dp [ 0 ] [ - 1 ]  def __dfs ( self , left , right , dp , nums ) :          if left > right :              return 0  if left == right :              dp [ left - 1 ] [ right - 1 ] = nums [ left - 1 ] * nums [ left ] * nums [ left + 1 ] return dp [ left - 1 ] [ right - 1 ]  if dp [ left - 1 ] [ right - 1 ] != - 1 :              return dp [ left - 1 ] [ right - 1 ]  cur_max = float ( <str> ) for i in xrange ( left , right + 1 ) :              cur_b = nums [ left - 1 ] * nums [ i ] * nums [ right + 1 ] l = self . __dfs ( left , i - 1 , dp , nums ) r = self . __dfs ( i + 1 , right , dp , nums ) cur_max = max ( cur_max , cur_b + l + r )  dp [ left - 1 ] [ right - 1 ] = cur_max return cur_max   class Solution ( object ) :      def maxCoins ( self , nums ) :          if not nums :              return 0  lens = len ( nums ) nums_with_walls = [ 1 ] + nums + [ 1 ] dp = [ [ 0 ] * ( lens + 2 ) for i in xrange ( lens + 2 ) ] for dist in xrange ( 1 , lens + 1 ) :              for left in xrange ( 1 , lens - dist + 2 ) :                  right = left + dist - 1 for i in xrange ( left , right + 1 ) :                      cur_points = nums_with_walls [ left - 1 ] * nums_with_walls [ i ] * nums_with_walls [ right + 1 ] dp [ left ] [ right ] = max ( dp [ left ] [ right ] , cur_points + dp [ left ] [ i - 1 ] + dp [ i + 1 ] [ right ] )    return dp [ 1 ] [ lens ]    