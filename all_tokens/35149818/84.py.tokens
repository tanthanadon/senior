class Node ( object ) :      def __init__ ( self , count ) :          self . count = count self . keys = collections . OrderedDict ( ) self . prev = None self . next = None   class LFUCache ( object ) :      def __init__ ( self , capacity ) :          self . cap = capacity self . value_hash = { } self . node_hash = { } self . head = Node ( - 1 ) self . tail = Node ( - 1 ) self . head . next = self . tail self . tail . prev = self . head  def get ( self , key ) :          if key in self . value_hash :              self . __increase_count ( key ) return self . value_hash [ key ]  return - 1  def put ( self , key , value ) :          if self . cap <= 0 :              return  if key in self . value_hash :              self . value_hash [ key ] = value  else :              if len ( self . value_hash ) >= self . cap :                  self . __pop_lfu ( )  self . value_hash [ key ] = value self . __add_to_head ( key )  self . __increase_count ( key )  def __increase_count ( self , key ) :          node = self . node_hash [ key ] cur_count = node . count del node . keys [ key ] if len ( node . keys ) == 0 :              self . __delete_node ( node ) node = node . prev  cur_node = None if node . next . count == cur_count + 1 :              cur_node = node . next  else :              cur_node = Node ( cur_count + 1 ) cur_node . next = node . next node . next . prev = cur_node cur_node . prev = node node . next = cur_node  cur_node . keys [ key ] = None self . node_hash [ key ] = cur_node  def __pop_lfu ( self ) :          if self . head . next . count == - 1 :              return  first_node = self . head . next key , value = first_node . keys . popitem ( last = False ) if len ( first_node . keys ) == 0 :              self . __delete_node ( first_node )  del self . value_hash [ key ] del self . node_hash [ key ]  def __add_to_head ( self , key ) :          node = None if self . head . next . count == 0 :              node = self . head . next  else :              node = Node ( 0 ) node . next = self . head . next self . head . next . prev = node self . head . next = node node . prev = self . head  node . keys [ key ] = None self . node_hash [ key ] = node  def __delete_node ( self , node ) :          node . prev . next = node . next node . next . prev = node . prev    