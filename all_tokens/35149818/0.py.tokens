class Solution ( object ) :      def maxProfit ( self , prices ) :          if len ( prices ) <= 1 : return 0 left_to_right = [ 0 ] * len ( prices ) right_to_left = [ 0 ] * len ( prices ) left , min_left , m_left = 0 , float ( <str> ) , 0 for left in xrange ( len ( prices ) ) :              min_left = min ( min_left , prices [ left ] ) m_left = max ( m_left , prices [ left ] - min_left ) left_to_right [ left ] = m_left  right , max_right , m_right = len ( prices ) - 1 , float ( <str> ) , 0 for right in xrange ( len ( prices ) - 1 , - 1 , - 1 ) :              max_right = max ( max_right , prices [ right ] ) m_right = max ( m_right , max_right - prices [ right ] ) right_to_left [ right ] = m_right  result = 0 for i in xrange ( len ( prices ) ) :              result = max ( result , left_to_right [ i ] + right_to_left [ i ] )  return result   class Solution ( object ) :      def maxProfit ( self , prices ) :          if len ( prices ) <= 1 : return 0 right_to_left = [ 0 ] * len ( prices ) right , max_right , m_right = len ( prices ) - 1 , float ( <str> ) , 0 for right in xrange ( len ( prices ) - 1 , - 1 , - 1 ) :              max_right = max ( max_right , prices [ right ] ) m_right = max ( m_right , max_right - prices [ right ] ) right_to_left [ right ] = m_right  min_left , m_left , result = float ( <str> ) , 0 , 0 for i in xrange ( len ( prices ) ) :              min_left = min ( min_left , prices [ i ] ) m_left = max ( m_left , prices [ i ] - min_left ) result = max ( result , m_left + right_to_left [ i ] )  return result   class Solution ( object ) :      def maxProfit ( self , prices ) :          hold1 , release1 , hold2 , release2 = float ( <str> ) , 0 , float ( <str> ) , 0 for p in prices :              release2 = max ( release2 , hold2 + p ) hold2 = max ( hold2 , release1 - p ) release1 = max ( release1 , hold1 + p ) hold1 = max ( hold1 , - p )  return release2    