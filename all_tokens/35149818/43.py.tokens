class Solution ( object ) :      def PredictTheWinner ( self , nums ) :          if not nums or len ( nums ) == 1 :              return True  lens = len ( nums ) sums = [ 0 ] for n in nums :              sums . append ( sums [ - 1 ] + n )  dp = [ [ 0 ] * lens for i in xrange ( lens ) ] for i in xrange ( lens ) :              dp [ i ] [ i ] = nums [ i ]  for l in xrange ( 2 , lens + 1 ) :              for left in xrange ( 0 , lens - l + 1 ) :                  right = left + l - 1 cur_sum = sums [ right + 1 ] - sums [ left ] dp [ left ] [ right ] = max ( cur_sum - dp [ left + 1 ] [ right ] , cur_sum - dp [ left ] [ right - 1 ] )   return dp [ 0 ] [ - 1 ] >= sums [ - 1 ] / 2.0   class Solution ( object ) :      def PredictTheWinner ( self , nums ) :          if not nums or len ( nums ) == 1 :              return True  lens = len ( nums ) dp = [ [ 0 ] * lens for i in xrange ( lens ) ] for i in xrange ( lens ) :              dp [ i ] [ i ] = nums [ i ]  for l in xrange ( 2 , lens + 1 ) :              for left in xrange ( 0 , lens - l + 1 ) :                  right = left + l - 1 dp [ left ] [ right ] = max ( nums [ left ] - dp [ left + 1 ] [ right ] , nums [ right ] - dp [ left ] [ right - 1 ] )   return dp [ 0 ] [ - 1 ] >= 0   class Solution ( object ) :      def PredictTheWinner ( self , nums ) :          if not nums or len ( nums ) == 1 :              return True  lens = len ( nums ) if lens % 2 == 0 :              return True  dp = [ 0 ] * lens for i in xrange ( lens - 1 , - 1 , - 1 ) :              for j in xrange ( i , lens ) :                  dp [ j ] = nums [ j ] if i == j else max ( nums [ i ] - dp [ j ] , nums [ j ] - dp [ j - 1 ] )   return dp [ - 1 ] >= 0    