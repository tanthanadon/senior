import copy class Solution :      def lowestCommonAncestor3 ( self , root , A , B ) :          def helper ( root , A , B ) :              if not root : return None , False , False l , l_found_A , l_found_B = helper ( root . left , A , B ) r , r_found_A , r_found_B = helper ( root . right , A , B ) found_A = l_found_A or r_found_A or root is A found_B = l_found_B or r_found_B or root is B if root is A or root is B or ( l and r ) :                  return root , found_A , found_B  return l or r , found_A , found_B  lca , A_exist , B_exist = helper ( root , A , B ) return lca if A_exist and B_exist else None    