class Solution :      def backPack ( self , m , A ) :          if not A :              return 0  dp = [ False ] * ( m + 1 ) dp [ 0 ] = True cur_row = [ ] result = float ( <str> ) for i in xrange ( 1 , len ( A ) + 1 ) :              for S in xrange ( m + 1 ) :                  take = dp [ S - A [ i - 1 ] ] if S - A [ i - 1 ] >= 0 else False cur_vol = dp [ S ] or take cur_row . append ( cur_vol ) if i == len ( A ) and cur_vol :                      result = max ( result , S )   dp = cur_row cur_row = [ ]  return result    