class Solution ( object ) :      def arrangeCoins ( self , n ) :          if n <= 1 : return n begin , end = 1 , n while begin + 1 < end :              mid = ( begin + end ) / 2 cur = ( mid * ( mid + 1 ) ) / 2 if cur == n : return mid if cur > n :                  end = mid  else :                  begin = mid   if ( end * ( end + 1 ) ) / 2 <= n :              return end  return begin   class Solution ( object ) :      def arrangeCoins ( self , n ) :          if n <= 1 : return n begin , end = 1 , n while begin <= end :              mid = ( begin + end ) / 2 cur = ( mid * ( mid + 1 ) ) / 2 if cur == n : return mid if cur > n :                  end = mid - 1  else :                  begin = mid + 1   return begin - 1   class Solution ( object ) :      def arrangeCoins ( self , n ) :          return int ( math . sqrt ( n * 8 + 1 ) - 1 ) / 2    