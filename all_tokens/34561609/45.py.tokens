import numpy as np import glob import os import pickle import tqdm from itertools import product from joblib import Parallel , delayed import datetime import neuraltda . simpComp as sc import neuraltda . spectralAnalysis as sa import neuraltda . topology2 as tp2 import pyslsa daystr = datetime . datetime . now ( ) . strftime ( <str> ) figsavepth = <str> + daystr + <str> print ( figsavepth ) bps = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } birds = [ <str> ] windt = 10.0 dtovr = 0.5 * windt segment_info = [ 0 , 0 ] cluster_group = [ <str> ] comment = <str> bdfs = { } scgfs = { } thresh = 6.0 for bird in birds :      block_path = bps [ bird ] bfdict = tp2 . dag_bin ( block_path , windt , segment_info , cluster_group = cluster_group , dt_overlap = dtovr , comment = comment ) bdf = glob . glob ( os . path . join ( bfdict [ <str> ] , <str> ) ) [ 0 ] print ( bdf ) bdfs [ bird ] = bdf  for bird in birds :      block_path = bps [ bird ] scg_f = sa . pyslsa_compute_chain_groups_binned ( block_path , bdfs [ bird ] , thresh , comment = comment ) scgfs [ bird ] = scg_f  scg_data = scgfs [ bird ] dims = [ 1 , 2 , 3 ] betas = [ - 2.0 , - 1.5 , - 0.95 , - 0.65 ] stims = list ( scg_data . keys ( ) ) Nstim = len ( stims ) Ntrials = 15 KL_divs = np . zeros ( ( Nstim , Nstim , Ntrials * Ntrials , len ( dims ) , len ( betas ) ) ) for k , beta in enumerate ( betas ) :      for l , dim in enumerate ( dims ) :          for i , stim1 in enumerate ( stims ) :              for j , stim2 in enumerate ( stims ) :                  print ( <str> . format ( stim1 , stim2 ) ) scg1_dat = scg_data [ stim1 ] scg2_dat = scg_data [ stim2 ] for ( trial1 , trial2 ) in tqdm . tqdm ( product ( range ( Ntrials ) , range ( Ntrials ) ) ) :                      scg1 = scg1_dat [ trial1 ] scg2 = scg2_dat [ trial2 ] KL = pyslsa . KL ( scg1 , scg2 , dim , beta ) KL_divs [ i , j , trial1 * Ntrials + trial2 , l , k ] = KL      with open ( os . path . join ( figsavepth , <str> . format ( bird ) ) , <str> ) as f :      pickle . dump ( [ KL_divs , betas , dims , stims , Ntrials ] , f )   