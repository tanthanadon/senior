import neuraltda . simpComp as sc import neuraltda . topology2 as tp2 import neuraltda . spectralAnalysis as sa import pickle import glob import os from ephys import core , events , clust blockPath = <str> winSize = 10.0 thresh = 13.0 povers = 0.5 cluster_group = [ <str> , <str> ] widenarrow_threshold = 0.000540 segmentInfo = [ 2500 , 0 ] spikes = core . load_spikes ( blockPath ) trials = events . load_trials ( blockPath ) fs = core . load_fs ( blockPath ) clusters = core . load_clusters ( blockPath ) clusters = clusters [ clusters . quality . isin ( cluster_group ) ] [ <str> ] . unique ( ) ( wide , narrow ) = clust . get_wide_narrow ( blockPath , clusters , widenarrow_threshold ) correctTrials = trials [ trials [ <str> ] == True ] incorrectTrials = trials [ trials [ <str> ] == False ] bfdict = tp2 . do_dag_bin_lazy ( blockPath , spikes , correctTrials , clusters , fs , winSize , segmentInfo , cluster_group = [ <str> , <str> ] , dt_overlap = povers * winSize , comment = <str> ) bdf = glob . glob ( os . path . join ( bfdict [ <str> ] , <str> ) ) [ 0 ] sa . computeChainGroups ( blockPath , bdf , thresh , comment = <str> , clusters = wide ) bfdict = tp2 . do_dag_bin_lazy ( blockPath , spikes , correctTrials , clusters , fs , winSize , segmentInfo , cluster_group = [ <str> , <str> ] , dt_overlap = povers * winSize , comment = <str> ) bdf = glob . glob ( os . path . join ( bfdict [ <str> ] , <str> ) ) [ 0 ] sa . computeChainGroups ( blockPath , bdf , thresh , comment = <str> , clusters = narrow ) bfdict2 = tp2 . do_dag_bin_lazy ( blockPath , spikes , incorrectTrials , clusters , fs , winSize , segmentInfo , cluster_group = [ <str> , <str> ] , dt_overlap = povers * winSize , comment = <str> ) bdf2 = glob . glob ( os . path . join ( bfdict2 [ <str> ] , <str> ) ) [ 0 ] sa . computeChainGroups ( blockPath , bdf2 , thresh , comment = <str> , clusters = wide ) bfdict2 = tp2 . do_dag_bin_lazy ( blockPath , spikes , incorrectTrials , clusters , fs , winSize , segmentInfo , cluster_group = [ <str> , <str> ] , dt_overlap = povers * winSize , comment = <str> ) bdf2 = glob . glob ( os . path . join ( bfdict2 [ <str> ] , <str> ) ) [ 0 ] sa . computeChainGroups ( blockPath , bdf2 , thresh , comment = <str> , clusters = narrow )   