from __future__ import division from __future__ import print_function import numpy as np import itertools as it class Closure ( object ) :      def __init__ ( self , obs ) :          self . source = obs . source self . ra = obs . ra self . dec = obs . dec self . rf = obs . rf self . bw = obs . bw self . ampcal = obs . ampcal self . phasecal = obs . phasecal self . opacitycal = obs . opacitycal self . dcal = obs . dcal self . frcal = obs . frcal self . timetype = obs . timetype self . tarr = obs . tarr self . tkey = obs . tkey sites = [ self . tarr [ i ] [ 0 ] for i in range ( len ( self . tarr ) ) ] bl = list ( it . combinations ( sites , 2 ) ) tris = list ( it . combinations ( sites , 3 ) ) quads = list ( it . combinations ( sites , 4 ) ) print ( <str> ) cp = [ ] for tri in tris :              cpdat = obs . cphase_tri ( tri [ 0 ] , tri [ 1 ] , tri [ 2 ] ) time = cpdat [ <str> ] cphase = cpdat [ <str> ] sigmacp = cpdat [ <str> ] cpdat = np . array ( [ time , cphase , sigmacp ] ) cp . append ( cpdat )  print ( <str> ) ca = [ ] for quad in quads :              cadat = obs . camp_quad ( quad [ 0 ] , quad [ 1 ] , quad [ 3 ] , quad [ 3 ] ) time = cadat [ <str> ] camp = cadat [ <str> ] sigmaca = cadat [ <str> ] cadat = np . array ( [ time , camp , sigmaca ] ) ca . append ( cadat )  self . cp = [ ] self . tri = [ ] for i in range ( len ( cp ) ) :              if cp [ i ] is not None :                  ( self . cp ) . append ( cp [ i ] ) ( self . tri ) . append ( tris [ i ] )   self . ca = [ ] self . quad = [ ] for i in range ( len ( ca ) ) :              if ca [ i ] is not None :                  ( self . ca ) . append ( ca [ i ] ) ( self . quad ) . append ( quads [ i ] )    def record_cp ( self , tri_id ) :          cp = np . array ( self . cp [ tri_id ] ) fname = <str> % ( self . tri [ tri_id ] [ 0 ] , self . tri [ tri_id ] [ 1 ] , self . tri [ tri_id ] [ 2 ] ) f = open ( fname , <str> ) for i in range ( len ( cp [ 0 ] ) ) :              f . write ( <str> % ( cp [ 0 ] [ i ] , cp [ 1 ] [ i ] , cp [ 2 ] [ i ] ) )  f . close ( )  def record_ca ( self , quad_id ) :          ca = np . array ( self . ca [ quad_id ] ) fname = <str> % ( self . quad [ quad_id ] [ 0 ] , self . quad [ quad_id ] [ 1 ] , self . quad [ quad_id ] [ 2 ] , self . quad [ quad_id ] [ 3 ] ) f = open ( fname , <str> ) for i in range ( len ( ca [ 0 ] ) ) :              f . write ( <str> % ( ca [ 0 ] [ i ] , ca [ 1 ] [ i ] , ca [ 2 ] [ i ] ) )  f . close ( )    