from builtins import str from builtins import range from builtins import object import numpy as np import ehtim . observing . obs_simulate as simobs import ehtim . io . save import ehtim . io . load from ehtim . const_def import * from ehtim . observing . obs_helpers import * class Array ( object ) :      def __init__ ( self , tarr , ephem = { } ) :          self . tarr = tarr self . ephem = ephem for line in self . tarr :              if np . any ( np . isnan ( [ line [ <str> ] , line [ <str> ] , line [ <str> ] ] ) ) :                  sitename = str ( line [ <str> ] ) try :                      elen = len ( ephem [ sitename ] )  except NameError :                      raise Exception ( <str> % sitename )  if elen != 3 :                      raise Exception ( <str> % sitename )    self . tkey = { self . tarr [ i ] [ <str> ] : i for i in range ( len ( self . tarr ) ) }  def listbls ( self ) :          bls = [ ] for i1 in sorted ( self . tarr [ <str> ] ) :              for i2 in sorted ( self . tarr [ <str> ] ) :                  if not ( [ i1 , i2 ] in bls ) and not ( [ i2 , i1 ] in bls ) and i1 != i2 :                      bls . append ( [ i1 , i2 ] )    return np . array ( bls )  def obsdata ( self , ra , dec , rf , bw , tint , tadv , tstart , tstop , mjd = MJD_DEFAULT , timetype = <str> , polrep = <str> , elevmin = ELEV_LOW , elevmax = ELEV_HIGH , tau = TAUDEF , fix_theta_GMST = False ) :          obsarr = simobs . make_uvpoints ( self , ra , dec , rf , bw , tint , tadv , tstart , tstop , mjd = mjd , polrep = polrep , tau = tau , elevmin = elevmin , elevmax = elevmax , timetype = timetype , fix_theta_GMST = fix_theta_GMST ) uniquetimes = np . sort ( np . unique ( obsarr [ <str> ] ) ) scans = np . array ( [ [ time - 0.5 * tadv , time + 0.5 * tadv ] for time in uniquetimes ] ) source = str ( ra ) + <str> + str ( dec ) obs = ehtim . obsdata . Obsdata ( ra , dec , rf , bw , obsarr , self . tarr , source = source , mjd = mjd , timetype = timetype , polrep = polrep , ampcal = True , phasecal = True , opacitycal = True , dcal = True , frcal = True , scantable = scans ) return obs  def make_subarray ( self , sites ) :          all_sites = [ t [ 0 ] for t in self . tarr ] mask = np . array ( [ t in sites for t in all_sites ] ) return Array ( self . tarr [ mask ] , ephem = self . ephem )  def save_txt ( self , fname ) :          ehtim . io . save . save_array_txt ( self , fname ) return   def load_txt ( fname , ephemdir = <str> ) :      return ehtim . io . load . load_array_txt ( fname , ephemdir = ephemdir )   