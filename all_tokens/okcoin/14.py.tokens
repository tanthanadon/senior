import six import socket import errno import os import sys if six . PY3 :      from base64 import encodebytes as base64encode  else :      from base64 import encodestring as base64encode  from . _logging import * from . _url import * from . _socket import * from . _exceptions import * from . _ssl_compat import * __all__ = [ <str> , <str> , <str> ] class proxy_info ( object ) :      def __init__ ( self , ** options ) :          self . host = options . get ( <str> , None ) if self . host :              self . port = options . get ( <str> , 0 ) self . auth = options . get ( <str> , None ) self . no_proxy = options . get ( <str> , None )  else :              self . port = 0 self . auth = None self . no_proxy = None    def connect ( url , options , proxy ) :      hostname , port , resource , is_secure = parse_url ( url ) addrinfo_list , need_tunnel , auth = _get_addrinfo_list ( hostname , port , is_secure , proxy ) if not addrinfo_list :          raise WebSocketException ( <str> + hostname + <str> + str ( port ) )  sock = None try :          sock = _open_socket ( addrinfo_list , options . sockopt , options . timeout ) if need_tunnel :              sock = _tunnel ( sock , hostname , port , auth )  if is_secure :              if HAVE_SSL :                  sock = _ssl_socket ( sock , options . sslopt , hostname )  else :                  raise WebSocketException ( <str> )   return sock , ( hostname , port , resource )  except :          if sock :              sock . close ( )  raise   def _get_addrinfo_list ( hostname , port , is_secure , proxy ) :      phost , pport , pauth = get_proxy_info ( hostname , is_secure , proxy . host , proxy . port , proxy . auth , proxy . no_proxy ) if not phost :          addrinfo_list = socket . getaddrinfo ( hostname , port , 0 , 0 , socket . SOL_TCP ) return addrinfo_list , False , None  else :          pport = pport and pport or 80 addrinfo_list = socket . getaddrinfo ( phost , pport , 0 , 0 , socket . SOL_TCP ) return addrinfo_list , True , pauth   def _open_socket ( addrinfo_list , sockopt , timeout ) :      err = None for addrinfo in addrinfo_list :          family = addrinfo [ 0 ] sock = socket . socket ( family ) sock . settimeout ( timeout ) for opts in DEFAULT_SOCKET_OPTION :              sock . setsockopt ( * opts )  for opts in sockopt :              sock . setsockopt ( * opts )  address = addrinfo [ 4 ] try :              sock . connect ( address )  except socket . error as error :              error . remote_ip = str ( address [ 0 ] ) if error . errno in ( errno . ECONNREFUSED , ) :                  err = error continue  else :                  raise   else :              break   else :          raise err  return sock  def _can_use_sni ( ) :      return ( six . PY2 and sys . version_info [ 1 ] >= 7 and sys . version_info [ 2 ] >= 9 ) or ( six . PY3 and sys . version_info [ 2 ] >= 2 )  def _wrap_sni_socket ( sock , sslopt , hostname , check_hostname ) :      context = ssl . SSLContext ( sslopt . get ( <str> , ssl . PROTOCOL_SSLv23 ) ) context . load_verify_locations ( cafile = sslopt . get ( <str> , None ) ) context . verify_mode = sslopt [ <str> ] if HAVE_CONTEXT_CHECK_HOSTNAME :          context . check_hostname = check_hostname  if <str> in sslopt :          context . set_ciphers ( sslopt [ <str> ] )  return context . wrap_socket ( sock , do_handshake_on_connect = sslopt . get ( <str> , True ) , suppress_ragged_eofs = sslopt . get ( <str> , True ) , server_hostname = hostname , )  def _ssl_socket ( sock , user_sslopt , hostname ) :      sslopt = dict ( cert_reqs = ssl . CERT_REQUIRED ) certPath = os . path . join ( os . path . dirname ( __file__ ) , <str> ) if os . path . isfile ( certPath ) :          sslopt [ <str> ] = certPath  sslopt . update ( user_sslopt ) check_hostname = sslopt [ <str> ] != ssl . CERT_NONE and sslopt . pop ( <str> , True ) if _can_use_sni ( ) :          sock = _wrap_sni_socket ( sock , sslopt , hostname , check_hostname )  else :          sslopt . pop ( <str> , True ) sock = ssl . wrap_socket ( sock , ** sslopt )  if not HAVE_CONTEXT_CHECK_HOSTNAME and check_hostname :          match_hostname ( sock . getpeercert ( ) , hostname )  return sock  def _tunnel ( sock , host , port , auth ) :      debug ( <str> ) connect_header = <str> % ( host , port ) if auth and auth [ 0 ] :          auth_str = auth [ 0 ] if auth [ 1 ] :              auth_str += <str> + auth [ 1 ]  encoded_str = base64encode ( auth_str . encode ( ) ) . strip ( ) . decode ( ) connect_header += <str> % encoded_str  connect_header += <str> dump ( <str> , connect_header ) send ( sock , connect_header ) try :          status , resp_headers = read_headers ( sock )  except Exception as e :          raise WebSocketProxyException ( str ( e ) )  if status != 200 :          raise WebSocketProxyException ( <str> + status )  return sock  def read_headers ( sock ) :      status = None headers = { } trace ( <str> ) while True :          line = recv_line ( sock ) line = line . decode ( <str> ) . strip ( ) if not line :              break  trace ( line ) if not status :              status_info = line . split ( <str> , 2 ) status = int ( status_info [ 1 ] )  else :              kv = line . split ( <str> , 1 ) if len ( kv ) == 2 :                  key , value = kv headers [ key . lower ( ) ] = value . strip ( ) . lower ( )  else :                  raise WebSocketException ( <str> )    trace ( <str> ) return status , headers   