import inspect from xotl . tools . deprecation import deprecated __all__ = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ) MAX_DEEP = 25 def getargvalues ( frame ) :      from xotl . tools . values . simple import force_sequence_coerce as array from xotl . tools . future . itertools import flatten pos , args , kwds , values = inspect . getargvalues ( frame ) res = { } for keys in pos :          if keys :              res . update ( { key : values [ key ] for key in flatten ( array ( keys ) ) } )   if args :          i = 0 for item in values [ args ] :              res [ <str> % ( args , i ) ] = item i += 1   if kwds :          res . update ( values [ kwds ] )  return res  def __error_info ( tb , * args , ** kwargs ) :      ALL = True res = [ ] kwargs . update ( dict . fromkeys ( args , ALL ) ) if kwargs :          deep = 0 processed = set ( ) while tb and ( deep < MAX_DEEP ) :              frame = tb . tb_frame func_name = frame . f_code . co_name attrs1 = kwargs . get ( func_name , None ) attrs2 = kwargs . get ( deep , None ) if attrs1 or attrs2 :                  processed . add ( func_name ) processed . add ( deep ) if ( attrs1 is ALL ) or ( attrs2 is ALL ) :                      attrs = ALL  else :                      attrs = list ( attrs1 ) if attrs1 else [ ] if attrs2 :                          attrs . extend ( attrs2 )   if attrs is ALL :                      item = frame . f_locals . copy ( )  else :                      item = { key : frame . f_locals . get ( key ) for key in attrs }  item [ <str> ] = func_name item [ <str> ] = deep item [ <str> ] = tb . tb_lineno item [ <str> ] = frame . f_code . co_filename res . append ( item )  tb = tb . tb_next deep += 1  for item in processed :              if item in kwargs :                  del kwargs [ item ]   if kwargs :              res [ <str> ] = kwargs   return res  def error_info ( * args , ** kwargs ) :      import sys _error_type , _error , tb = sys . exc_info ( ) return __error_info ( tb , * args , ** kwargs )  def printable_error_info ( base , * args , ** kwargs ) :      import sys _error_type , error , tb = sys . exc_info ( ) if tb :          res = <str> % ( base , error ) info = __error_info ( tb , * args , ** kwargs ) return res + <str> . join ( str ( item ) for item in info )  else :          return <str>   def object_info_finder ( obj_type , arg_name = None , max_deep = MAX_DEEP ) :      frame = inspect . currentframe ( ) try :          deep = 0 res = None while ( res is None ) and ( deep < max_deep ) and ( frame is not None ) :              ctx = getargvalues ( frame ) d = { arg_name : ctx . get ( arg_name ) } if arg_name is not None else ctx for key in d :                  value = d [ key ] if isinstance ( value , obj_type ) :                      res = ( value , key , deep , frame )   frame = frame . f_back deep += 1  return res  finally :          del frame   def object_finder ( obj_type , arg_name = None , max_deep = MAX_DEEP ) :      finder = object_info_finder ( obj_type , arg_name , max_deep ) info = finder ( ) return info [ 0 ] if info else None  def track_value ( value , max_deep = MAX_DEEP ) :      frame = inspect . currentframe ( ) . f_back . f_back deep = 0 res = None while ( res is None ) and ( deep < max_deep ) and ( frame is not None ) :          ctx = getargvalues ( frame ) for _key in ctx :              _value = ctx [ _key ] if ( type ( value ) == type ( _value ) ) and ( value == _value ) :                  res = ( ctx , _key )   frame = frame . f_back deep += 1  return res  def iter_stack ( max_deep = MAX_DEEP ) :      frame = inspect . currentframe ( ) try :          deep = 0 while ( deep < max_deep ) and ( frame is not None ) :              yield frame frame = frame . f_back deep += 1   finally :          del frame   @ deprecated ( iter_stack ) def iter_frames ( max_deep = MAX_DEEP ) :      frame = inspect . currentframe ( ) try :          deep = 0 while ( deep < max_deep ) and ( frame is not None ) :              yield ( deep , frame . f_code . co_filename , frame . f_lineno , frame . f_code . co_firstlineno , frame . f_locals , ) frame = frame . f_back deep += 1   finally :          del frame   del deprecated  