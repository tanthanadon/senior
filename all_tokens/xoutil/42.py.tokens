from xotl . tools . tasking import local from xotl . tools . future . collections import StackedDict , Mapping __all__ = ( <str> , <str> , <str> ) class LocalData ( local ) :      def __init__ ( self ) :          super ( ) . __init__ ( ) self . contexts = { }   _data = LocalData ( ) class MetaContext ( type ( StackedDict ) ) :      def __len__ ( self ) :          return len ( _data . contexts )  def __iter__ ( self ) :          return iter ( _data . contexts )  def __getitem__ ( self , name ) :          return _data . contexts . get ( name , _null_context )  def __contains__ ( self , name ) :          return bool ( self [ name ] )   class Context ( StackedDict , metaclass = MetaContext ) :      __slots__ = ( <str> , <str> ) def __new__ ( cls , name , ** data ) :          self = cls [ name ] if not self :              self = super ( ) . __new__ ( cls ) super ( Context , self ) . __init__ ( ) self . name = name self . count = 0  return self ( ** data )  @ classmethod def from_dicts ( cls , ctx , overrides = None , defaults = None ) :          if not overrides :              overrides = { }  if not defaults :              defaults = { }  current = cls [ ctx ] current_attrs = dict ( current ) if current else { } attrs = dict ( defaults , ** current_attrs ) attrs . update ( overrides ) return cls ( ctx , ** attrs )  @ classmethod def from_defaults ( cls , ctx , ** defaults ) :          return cls . from_dicts ( ctx , defaults = defaults )  def __init__ ( self , * args , ** kwargs ) :           def __call__ ( self , ** data ) :          self . push_level ( ** data ) return self  def __nonzero__ ( self ) :          return bool ( self . count )  __bool__ = __nonzero__ def __enter__ ( self ) :          if self . count == 0 :              _data . contexts [ self . name ] = self  if self . count + 1 == self . level :              self . count += 1 return self  else :              msg = <str> raise RuntimeError ( msg % ( self . name , self . count , self . level ) )   def __exit__ ( self , exc_type , exc_value , traceback ) :          self . count -= 1 if self . count == 0 :              del _data . contexts [ self . name ]  self . pop_level ( ) return False   context = Context class NullContext ( Mapping ) :      __slots__ = ( ) instance = None name = <str> def __new__ ( cls ) :          if cls . instance is None :              cls . instance = super ( ) . __new__ ( cls )  return cls . instance  def __len__ ( self ) :          return 0  def __iter__ ( self ) :          return iter ( ( ) )  def __getitem__ ( self , key ) :          raise KeyError ( key )  def __nonzero__ ( self ) :          return False  __bool__ = __nonzero__ def __enter__ ( self ) :          return _null_context  def __exit__ ( self , exc_type , exc_value , traceback ) :          return False  def get ( self , name , default = None ) :          return default  @ property def level ( self ) :          return 0   _null_context = NullContext ( )  