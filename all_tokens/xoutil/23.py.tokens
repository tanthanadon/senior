from xoutil . modules import moduleproperty from xoutil . objects import memoized_property @ moduleproperty def this ( self ) :      return self  @ moduleproperty def store ( self ) :      return getattr ( self , <str> , None )  @ store . setter def store ( self , value ) :      setattr ( self , <str> , value )  @ store . deleter def store ( self ) :      delattr ( self , <str> )  def prop ( self ) :      return getattr ( self , <str> , None )  def _prop_set ( self , val ) :      setattr ( self , <str> , val )  def _prop_del ( self ) :      delattr ( self , <str> )  prop = moduleproperty ( prop , _prop_set , _prop_del ) def otherfunction ( ) :      return 1  def memoized ( self ) :      return self  memoized = moduleproperty ( memoized , base = memoized_property ) try :      @ memoized . setter def memoized ( self , value ) :          pass   except AttributeError :      pass  else :      raise AssertionError ( <str> )   