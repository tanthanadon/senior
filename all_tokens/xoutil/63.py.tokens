<str> def hyphen_name ( name , join_numbers = True ) :      import re from xotl . tools . string import force_ascii name = force_ascii ( name ) regex = re . compile ( <str> ) name = regex . sub ( <str> , name ) regex = re . compile ( <str> ) all = regex . findall ( name ) i , count , parts = 0 , len ( all ) , [ ] while i < count :          part = all [ i ] if part != <str> :              upper = <str> <= part <= <str> if upper :                  part = part . lower ( )  j = i + 1 if j < count and upper and <str> <= all [ j ] <= <str> :                  aux = part [ : - 1 ] if aux :                      parts . append ( aux )  part = part [ - 1 ] + all [ j ] i = j j += 1  if j < count and <str> <= all [ j ] <= <str> and join_numbers :                  part = part + all [ j ] i = j  parts . append ( part )  i += 1  return <str> . join ( parts )  def program_name ( ) :      import sys from os . path import basename return basename ( sys . argv [ 0 ] )  def command_name ( cls ) :      unset = object ( ) names = ( <str> , <str> ) i , res = 0 , unset while i < len ( names ) and res is unset :          name = names [ i ] res = getattr ( cls , names [ i ] , unset ) if res is unset :              i += 1  elif not isinstance ( res , str ) :              raise TypeError ( <str> . format ( name ) )   if res is unset :          res = hyphen_name ( cls . __name__ )  return res   