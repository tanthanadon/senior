import unittest from xoutil . future . textwrap import wrap , fill , dedent , indent class BaseTestCase ( unittest . TestCase ) :      def show ( self , textin ) :          if isinstance ( textin , list ) :              result = [ ] for i in range ( len ( textin ) ) :                  result . append ( <str> % ( i , textin [ i ] ) )  result = <str> . join ( result )  elif isinstance ( textin , str ) :              result = <str> % repr ( textin )  return result  def check ( self , result , expect ) :          msg = <str> % ( self . show ( expect ) , self . show ( result ) ) self . assertEqual ( result , expect , msg )  def check_wrap ( self , text , width , expect , ** kwargs ) :          result = wrap ( text , width , ** kwargs ) self . check ( result , expect )  def check_split ( self , text , expect ) :          result = self . wrapper . _split ( text ) self . assertEqual ( result , expect , <str> <str> % ( expect , result ) )   class IndentTestCases ( BaseTestCase ) :      def setUp ( self ) :          self . text =  def test_fill ( self ) :          expect = result = fill ( self . text , 40 ) self . check ( result , expect )  def test_initial_indent ( self ) :          expect = [ <str> , <str> , <str> ] result = wrap ( self . text , 40 , initial_indent = <str> ) self . check ( result , expect ) expect = <str> . join ( expect ) result = fill ( self . text , 40 , initial_indent = <str> ) self . check ( result , expect )  def test_subsequent_indent ( self ) :          expect = result = fill ( self . text , 40 , initial_indent = <str> , subsequent_indent = <str> ) self . check ( result , expect )   class DedentTestCase ( unittest . TestCase ) :      def assertUnchanged ( self , text ) :          self . assertEqual ( text , dedent ( text ) )  def test_dedent_nomargin ( self ) :          text = <str> self . assertUnchanged ( text ) text = <str> self . assertUnchanged ( text ) text = <str> self . assertUnchanged ( text ) text = <str> self . assertUnchanged ( text )  def test_dedent_even ( self ) :          text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) )  def test_dedent_uneven ( self ) :          text = expect = self . assertEqual ( expect , dedent ( text ) ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) )  def test_dedent_preserve_internal_tabs ( self ) :          text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) ) self . assertEqual ( expect , dedent ( expect ) )  def test_dedent_preserve_margin_tabs ( self ) :          text = <str> self . assertUnchanged ( text ) text = <str> self . assertUnchanged ( text ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> self . assertEqual ( expect , dedent ( text ) ) text = <str> expect = <str> self . assertEqual ( expect , dedent ( text ) )   class IndentTestCase ( unittest . TestCase ) :      ROUNDTRIP_CASES = ( <str> , <str> , <str> , ) CASES = ROUNDTRIP_CASES + ( <str> , <str> , ) def test_indent_nomargin_default ( self ) :          for text in self . CASES :              self . assertEqual ( indent ( text , <str> ) , text )   def test_indent_nomargin_explicit_default ( self ) :          for text in self . CASES :              self . assertEqual ( indent ( text , <str> , None ) , text )   def test_indent_nomargin_all_lines ( self ) :          predicate = lambda line : True for text in self . CASES :              self . assertEqual ( indent ( text , <str> , predicate ) , text )   def test_indent_no_lines ( self ) :          predicate = lambda line : False for text in self . CASES :              self . assertEqual ( indent ( text , <str> , predicate ) , text )   def test_roundtrip_spaces ( self ) :          for text in self . ROUNDTRIP_CASES :              self . assertEqual ( dedent ( indent ( text , <str> ) ) , text )   def test_roundtrip_tabs ( self ) :          for text in self . ROUNDTRIP_CASES :              self . assertEqual ( dedent ( indent ( text , <str> ) ) , text )   def test_roundtrip_mixed ( self ) :          for text in self . ROUNDTRIP_CASES :              self . assertEqual ( dedent ( indent ( text , <str> ) ) , text )   def test_indent_default ( self ) :          prefix = <str> expected = ( <str> , <str> , <str> , <str> , <str> , ) for text , expect in zip ( self . CASES , expected ) :              self . assertEqual ( indent ( text , prefix ) , expect )   def test_indent_explicit_default ( self ) :          prefix = <str> expected = ( <str> , <str> , <str> , <str> , <str> , ) for text , expect in zip ( self . CASES , expected ) :              self . assertEqual ( indent ( text , prefix , None ) , expect )   def test_indent_all_lines ( self ) :          prefix = <str> expected = ( <str> , <str> , <str> , <str> , <str> , ) predicate = lambda line : True for text , expect in zip ( self . CASES , expected ) :              self . assertEqual ( indent ( text , prefix , predicate ) , expect )   def test_indent_empty_lines ( self ) :          prefix = <str> expected = ( <str> , <str> , <str> , <str> , <str> , ) predicate = lambda line : not line . strip ( ) for text , expect in zip ( self . CASES , expected ) :              self . assertEqual ( indent ( text , prefix , predicate ) , expect )     