from himlarcli . client import Client import requests import json from himlarcli import utils class Sensu ( Client ) :      def __init__ ( self , config_path , debug = False , log = None ) :          super ( Sensu , self ) . __init__ ( config_path , debug , log ) self . logger . debug ( <str> % config_path ) self . api_url = self . get_config ( <str> , <str> ) self . session = requests . Session ( ) self . session . auth = ( self . get_config ( <str> , <str> ) , self . get_config ( <str> , <str> ) ) self . headers = { <str> : <str> }  def delete_client ( self , host ) :          url = self . api_url endpoint = <str> + host if not self . dry_run :              response = self . session . delete ( url + endpoint ) self . logger . debug ( <str> % response . status_code )  else :              self . logger . debug ( <str> % host )   def silence_host ( self , host , expire = None ) :          url = self . api_url endpoint = <str> payload = { <str> : <str> + host , <str> : <str> , <str> : <str> } if expire :              payload . update ( { <str> : int ( expire ) } )  else :              payload . update ( { <str> : True } )  json_payload = json . dumps ( payload ) response = self . session . post ( url + endpoint , headers = self . headers , data = json_payload ) self . logger . debug ( <str> % ( response . status_code ) )  def list_silenced ( self ) :          url = self . api_url endpoint = <str> reponse = self . session . get ( url + endpoint , headers = self . headers ) print ( reponse . text )  def clear_silenced ( self , host ) :          url = self . api_url endpoint = <str> payload = { <str> : <str> + host } json_payload = json . dumps ( payload ) response = self . session . post ( url + endpoint , headers = self . headers , data = json_payload ) self . logger . debug ( <str> % response . status_code )  def get_client ( self ) :          return self . client    