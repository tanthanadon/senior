import itertools from himlarcli . client import Client from glanceclient import Client as glclient from glanceclient import exc import sys class Glance ( Client ) :      version = 2 images = None image = None def __init__ ( self , config_path , debug = False , log = None , region = None ) :          super ( Glance , self ) . __init__ ( config_path , debug , log , region ) self . logger . debug ( <str> % ( self . version , self . region ) ) self . client = glclient ( self . version , session = self . sess , region_name = self . region )  def get_client ( self ) :          return self . client  def get_image_by_id ( self , image_id ) :          try :              image = self . client . images . get ( image_id )  except exc . HTTPNotFound :              image = None self . log_error ( <str> % image_id )  return image  def get_images ( self , ** kwargs ) :          return self . client . images . list ( ** kwargs )  def find_image ( self , ** kwargs ) :          images = self . client . images . list ( ** kwargs ) return list ( images )  def get_image ( self , name ) :          if not self . images :              self . __get_images ( )  self . images , image_list = itertools . tee ( self . images ) for image in image_list :              if name == image [ <str> ] :                  self . logger . debug ( <str> % name ) self . image = image return image   self . logger . debug ( <str> % name ) return None  def create_image ( self , source_path , ** kwargs ) :          self . logger . debug ( <str> % kwargs [ <str> ] ) self . image = self . client . images . create ( ** kwargs ) self . upload_image ( source_path ) return self . image  def delete_private_images ( self , project_id ) :          images = self . get_images ( filters = { <str> : project_id } ) for image in images :              self . delete_image ( image . id )   def delete_image ( self , image_id ) :          if not self . image and not image_id :              self . logger . critical ( <str> ) return  if not image_id :              image_id = self . image . id  self . debug_log ( <str> % image_id ) if not self . dry_run :              self . client . images . delete ( image_id )   def update_image ( self , name , image_id = None , ** kwargs ) :          if not self . image and not image_id :              self . logger . debug ( <str> % name ) if name :                  self . get_image ( name )  else :                  self . logger . critical ( <str> ) sys . exit ( 1 )   if not image_id :              image_id = self . image . id  self . client . images . update ( image_id = image_id , name = name , ** kwargs )  def set_access ( self , image_id , project_id , action = <str> ) :          if action not in [ <str> , <str> ] :              self . logger . warn ( <str> % action ) return  members = self . client . image_members . list ( image_id ) found = False for member in members :              if member . member_id == project_id :                  found = True continue   if found and action == <str> :              self . logger . debug ( <str> % image_id ) return  if not found and action == <str> :              self . logger . debug ( <str> % image_id ) return  if action == <str> :              result = self . client . image_members . create ( image_id , project_id ) self . logger . debug ( <str> % result ) self . client . image_members . update ( image_id , project_id , <str> )  if action == <str> :              result = self . client . image_members . delete ( image_id , project_id ) self . logger . debug ( <str> % result )   def get_access ( self , image_id ) :          return self . client . image_members . list ( image_id )  def deactivate ( self , name = None , image_id = None ) :          if not self . image and not image_id :              self . logger . debug ( <str> % name ) if name :                  self . get_image ( name )  else :                  self . logger . critical ( <str> ) sys . exit ( 1 )   if not image_id :              image_id = self . image . id  self . client . images . deactivate ( image_id ) self . logger . debug ( <str> % image_id )  def reactivate ( self , image_id ) :          try :              self . logger . debug ( <str> % image_id ) self . client . images . reactivate ( image_id )  except exc . HTTPNotFound :              self . logger . error ( <str> % image_id )   def upload_image ( self , source_path , name = None ) :          if not self . image :              self . logger . debug ( <str> % name ) if name :                  self . get_image ( name )  else :                  self . logger . critical ( <str> ) sys . exit ( 1 )   try :              self . client . images . upload ( self . image . id , open ( source_path , <str> ) ) self . logger . debug ( <str> % source_path )  except BaseException as e :              print e self . logger . critical ( <str> % self . image . name ) sys . exit ( 1 )   @ staticmethod def find_optimal_flavor ( image , flavors ) :          for flavor in flavors :              if flavor . ram >= image [ <str> ] and flavor . disk >= image [ <str> ] :                  return flavor   return None  def __get_images ( self ) :          self . images = self . client . images . list ( )    