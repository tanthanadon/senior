from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . glance import Glance from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils himutils . is_virtual_env ( ) parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) ksclient = Keystone ( options . config , debug = options . debug ) ksclient . set_dry_run ( options . dry_run ) logger = ksclient . get_logger ( ) regions = ksclient . find_regions ( ) def action_disabled ( ) :      for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) instances = novaclient . get_instances ( ) printer . output_dict ( { <str> : <str> % region } ) groups = { <str> : 0 , <str> : 0 , <str> : 0 } count = 0 for i in instances :              project = ksclient . get_by_id ( <str> , i . tenant_id ) if project . enabled :                  continue  host = getattr ( i , <str> ) . split ( <str> ) [ 0 ] output = { <str> : i . name , <str> : project . name , <str> : host } printer . output_dict ( output , sort = True , one_line = True ) if <str> in host or <str> in host :                  groups [ <str> ] += 1  elif <str> in host or <str> in host :                  groups [ <str> ] += 1  elif <str> in host or <str> in host :                  groups [ <str> ] += 1  count += 1  output = { <str> : <str> , <str> : count } output . update ( groups ) printer . output_dict ( output )   def action_nodiscard ( ) :      for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) glclient = Glance ( options . config , debug = options . debug , log = logger , region = region ) instances = novaclient . get_instances ( ) printer . output_dict ( { <str> : <str> % region } ) count = 0 for i in instances :              image = glclient . get_image_by_id ( i . image [ <str> ] ) project = ksclient . get_by_id ( <str> , i . tenant_id ) if project . enabled :                  continue  if image and <str> in image :                  continue  if not image :                  image = dict ( ) image [ <str> ] = <str> image [ <str> ] = <str>  output = { <str> : i . name , <str> : image [ <str> ] , <str> : image [ <str> ] } printer . output_dict ( output , sort = True , one_line = True ) count += 1  printer . output_dict ( { <str> : <str> , <str> : count } )   action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  