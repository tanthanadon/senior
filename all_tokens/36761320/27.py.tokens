import pprint from datetime import datetime , timedelta from email . mime . text import MIMEText from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . glance import Glance from himlarcli import utils as himutils from himlarcli . mail import Mail from himlarcli . parser import Parser from himlarcli . parser import Printer import novaclient . exceptions as novaexc import time import sys from datetime import date , datetime himutils . is_virtual_env ( ) today = datetime . today ( ) date = datetime ( today . year , today . month , today . day , 15 , 0 ) + timedelta ( days = 5 ) parser = Parser ( ) parser . update_default ( <str> , date . strftime ( <str> ) ) options = parser . parse_args ( ) printer = Printer ( options . format ) ksclient = Keystone ( options . config , debug = options . debug ) logger = ksclient . get_logger ( ) novaclient = Nova ( options . config , debug = options . debug , log = logger ) novaclient . set_dry_run ( options . dry_run ) glclient = Glance ( options . config , debug = options . debug , log = logger ) domain = <str> zone = <str> % ksclient . region legacy_aggregate = [ <str> , <str> , <str> ] if <str> in options and options . host :      if <str> in options . host :          host = options . host  else :          domain = ksclient . get_config ( <str> , <str> ) host = options . host + <str> + domain   else :      host = None  def action_show ( ) :      aggregate = novaclient . get_aggregate ( options . aggregate ) print <str> for key , value in aggregate . metadata . iteritems ( ) :          print <str> % ( key , value )  print <str> for h in aggregate . hosts :          services = novaclient . get_service ( h ) print <str> % ( h , services [ 0 ] . status )   def action_list ( ) :      filters = dict ( ) if options . az :          filters [ <str> ] = options . az  aggregates = novaclient . get_filtered_aggregates ( ** filters ) for aggregate in aggregates :          header = <str> % ( aggregate . name , aggregate . availability_zone ) enabled = <str> if <str> in aggregate . metadata else <str> printer . output_dict ( { <str> : header } ) if options . detailed :              printer . output_dict ( aggregate . to_dict ( ) )  else :              printer . output_dict ( { <str> : aggregate . name , <str> : enabled } )    def action_instances ( ) :      instances = novaclient . get_instances ( options . aggregate , host ) pp = pprint . PrettyPrinter ( indent = 1 ) stats = dict ( ) for i in instances :          if i . status in stats :              stats [ i . status ] += 1  else :              stats [ i . status ] = 1  network = next ( iter ( i . addresses ) ) print <str> % ( i . id , unicode ( i . name ) , i . status , network )  print <str> print <str> pp . pprint ( stats )  def action_users ( ) :      users = novaclient . get_users ( options . aggregate , simple = True ) for user in users :          print user   def action_activate ( ) :      aggregates = novaclient . get_aggregates ( ) dry_run_txt = <str> if options . dry_run else <str> for aggregate in aggregates :          if aggregate not in legacy_aggregate :              continue  print <str> % aggregate metadata = novaclient . get_aggregate ( aggregate ) if aggregate == options . aggregate :              for h in metadata . hosts :                  print <str> % ( dry_run_txt , h ) novaclient . enable_host ( h )  tags = { <str> : datetime . today ( ) , <str> : None , <str> : None } if not options . dry_run :                  novaclient . update_aggregate ( aggregate , tags )   else :              for h in metadata . hosts :                  services = novaclient . get_service ( h ) if services [ 0 ] . status == <str> :                      print <str> % ( dry_run_txt , h ) novaclient . disable_host ( h )   tags = { <str> : datetime . today ( ) , <str> : None } if not options . dry_run :                  novaclient . update_aggregate ( aggregate , tags )     def action_migrate ( ) :      aggregates = novaclient . get_aggregates ( ) active_aggregate = <str> for aggregate in aggregates :          if aggregate not in legacy_aggregate :              continue  info = novaclient . get_aggregate ( aggregate ) if <str> in info . metadata :              active_aggregate = aggregate break   if active_aggregate == <str> :          himutils . sys_error ( <str> )  q = <str> % ( options . aggregate , active_aggregate ) if not himutils . confirm_action ( q ) :          return  instances = novaclient . get_instances ( options . aggregate , host ) count = 0 target_host = next ( iter ( novaclient . get_aggregate_hosts ( active_aggregate ) or [ ] ) , None ) if not target_host :          himutils . sys_error ( <str> % active_aggregate )  for instance in instances :          count += 1 if options . dry_run :              logger . debug ( <str> % unicode ( instance . name ) )  else :              logger . debug ( <str> % unicode ( instance . name ) ) try :                  instance . migrate ( host = target_host . hypervisor_hostname ) time . sleep ( 2 ) if count % options . limit == 0 and ( options . hard_limit and count < options . limit ) :                      logger . debug ( <str> , options . sleep ) time . sleep ( options . sleep )   except novaexc . BadRequest as e :                  sys . stderr . write ( <str> % e ) sys . stderr . write ( <str> ) break   if options . hard_limit and count >= options . limit :              logger . debug ( <str> , options . limit ) break    def action_terminate ( ) :      users = dict ( ) instances = novaclient . get_instances ( options . aggregate ) snapshot_name = <str> + datetime . now ( ) . strftime ( <str> ) count = 0 for i in instances :          count += 1 if count > options . limit :              break  email = None user = ksclient . get_by_id ( <str> , i . user_id ) if not user :              project = ksclient . get_by_id ( <str> , i . tenant_id ) if hasattr ( project , <str> ) :                  email = project . admin  else :                  continue   if not email :              if not user . name :                  continue  if <str> not in user . name :                  continue  email = user . name . lower ( )  if email not in users :              users [ email ] = dict ( )  users [ email ] [ i . name ] = { <str> : i . name + snapshot_name } if not options . dry_run :              project = ksclient . get_by_id ( <str> , i . tenant_id ) metadata = { <str> : <str> , <str> : project . id , <str> : <str> } if i . status == <str> :                  i . stop ( ) status = i . status while status != <str> :                      time . sleep ( 5 ) tmp_i = novaclient . get_by_id ( <str> , i . id ) status = tmp_i . status   image_name = i . name + snapshot_name image_id = i . create_image ( image_name = image_name , metadata = metadata ) time . sleep ( 2 ) image = glclient . get_image_by_id ( image_id ) ksclient . debug_log ( <str> % image_name ) while image . status != <str> :                  time . sleep ( 5 ) image = glclient . get_image_by_id ( image_id ) ksclient . debug_log ( <str> % image_name )    if users :          mail = Mail ( options . config , debug = options . debug )  for user , instances in users . iteritems ( ) :          user_instances = <str> for server , info in instances . iteritems ( ) :              user_instances += <str> % ( server , info [ <str> ] )  mapping = dict ( region = ksclient . region . upper ( ) , region_lower = ksclient . region . lower ( ) , instances = user_instances ) body_content = himutils . load_template ( inputfile = options . template , mapping = mapping , log = ksclient . get_logger ( ) ) if not body_content :              print <str> % options . msg sys . exit ( 1 )  msg = MIMEText ( body_content , <str> , <str> ) msg [ <str> ] = ( <str> % ( ksclient . region ) ) if not options . dry_run :              mail . send_mail ( user , msg ) print <str> % user  else :              print <str> % user   pp = pprint . PrettyPrinter ( indent = 1 ) print <str> print <str> pp . pprint ( users )  def action_notify ( ) :      users = dict ( ) instances = novaclient . get_instances ( options . aggregate ) if not options . dry_run :          metadata = { <str> : options . date } novaclient . update_aggregate ( options . aggregate , metadata = metadata )  for i in instances :          email = None user = ksclient . get_by_id ( <str> , i . user_id ) if not user :              project = ksclient . get_by_id ( <str> , i . tenant_id ) if hasattr ( project , <str> ) :                  email = project . admin  else :                  continue   if not email :              if not user . name :                  continue  if <str> not in user . name :                  continue  email = user . name . lower ( )  if email not in users :              users [ email ] = dict ( )  users [ email ] [ i . name ] = { <str> : i . status }  if users :          mail = Mail ( options . config , debug = options . debug )  for user , instances in users . iteritems ( ) :          user_instances = <str> for server , info in instances . iteritems ( ) :              user_instances += <str> % ( server , info [ <str> ] )  action_date = himutils . get_date ( options . date , date . today ( ) , <str> ) mapping = dict ( region = ksclient . region . upper ( ) , date = action_date . strftime ( <str> ) , region_lower = ksclient . region . lower ( ) , instances = user_instances ) body_content = himutils . load_template ( inputfile = options . template , mapping = mapping , log = ksclient . get_logger ( ) ) if not body_content :              print <str> % options . msg sys . exit ( 1 )  msg = MIMEText ( body_content , <str> , <str> ) msg [ <str> ] = ( <str> % ( options . date , ksclient . region ) ) if not options . dry_run :              mail . send_mail ( user , msg ) print <str> % user  else :              print <str> % user   pp = pprint . PrettyPrinter ( indent = 1 ) print <str> print <str> pp . pprint ( users )  action = locals ( ) . get ( <str> + options . action ) if not action :      logger . error ( <str> % options . action ) sys . exit ( 1 )  action ( )  