from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . gnocchi import Gnocchi from himlarcli . cinder import Cinder from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils from datetime import date , timedelta from collections import OrderedDict parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_domain ( options . domain ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) regions = kc . find_regions ( ) def action_whales ( ) :      start = himutils . get_date ( options . start , date . today ( ) - timedelta ( days = 1 ) ) stop = himutils . get_date ( options . end , date . today ( ) + timedelta ( days = 1 ) ) if start > stop :          himutils . sys_error ( <str> % ( start , stop ) )  logger . debug ( <str> , start ) logger . debug ( <str> , stop ) for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) cc = Cinder ( options . config , debug = options . debug , log = logger , region = region ) project_usage = nc . get_usage ( start = start , end = stop ) logger . debug ( <str> , options . threshold ) print_header = True for usage in project_usage :              project = kc . get_by_id ( obj_type = <str> , obj_id = usage . tenant_id ) if not project :                  logger . debug ( <str> , usage . tenant_id ) continue  if len ( usage . server_usages ) < options . threshold :                  continue  cinderusage = cc . get_quota ( usage . tenant_id , True ) admin = project . admin if hasattr ( project , <str> ) else <str> output = OrderedDict ( ) output [ <str> ] = len ( usage . server_usages ) output [ <str> ] = cinderusage [ <str> ] [ <str> ] output [ <str> ] = project . name output [ <str> ] = admin if print_header :                  output [ <str> ] = <str> % region print_header = False  printer . output_dict ( objects = output , sort = False , one_line = True )    def action_flavors ( ) :      project = kc . get_project_by_name ( options . project ) start = himutils . get_date ( options . start , date . today ( ) - timedelta ( days = 1 ) ) stop = himutils . get_date ( options . end , date . today ( ) + timedelta ( days = 1 ) ) if start > stop :          himutils . sys_error ( <str> % ( start , stop ) )  logger . debug ( <str> , start ) logger . debug ( <str> , stop ) flavors = dict ( ) for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) usage = nc . get_usage ( project_id = project . id , start = start , end = stop ) if not hasattr ( usage , <str> ) :              continue  for server in usage . server_usages :              flavors [ server [ <str> ] ] = flavors . get ( server [ <str> ] , 0 ) + 1   flavors [ <str> ] = <str> % project . name printer . output_dict ( flavors )  def action_resources ( ) :      project = kc . get_project_by_name ( options . project ) start = himutils . get_date ( options . start , date . today ( ) - timedelta ( days = 1 ) ) stop = himutils . get_date ( options . end , date . today ( ) + timedelta ( days = 1 ) ) logger . debug ( <str> , start ) logger . debug ( <str> , stop ) output = dict ( { <str> : 0 , <str> : 0 } ) for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) gc = Gnocchi ( options . config , debug = options . debug , log = logger , region = region ) deleted = nc . get_project_instances ( project_id = project . id , deleted = True ) running = nc . get_project_instances ( project_id = project . id ) for i in deleted + running :              resource = gc . get_resource ( resource_type = <str> , resource_id = i . id ) if not resource :                  continue  metrics = dict ( ) metrics [ <str> ] = gc . get_client ( ) . metric . get ( <str> , i . id ) metrics [ <str> ] = gc . get_client ( ) . metric . get ( <str> , i . id ) for key , value in metrics . iteritems ( ) :                  measurement = gc . get_client ( ) . metric . get_measures ( metric = value [ <str> ] , aggregation = <str> , start = start , stop = stop ) if measurement :                      output [ key ] += measurement [ 0 ] [ 2 ]     printer . output_dict ( { <str> : <str> % project . name } ) printer . output_dict ( output )  action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  