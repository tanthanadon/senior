import sys from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils himutils . is_virtual_env ( ) parser = Parser ( ) options = parser . parse_args ( ) ksclient = Keystone ( options . config , debug = options . debug ) ksclient . set_domain ( <str> ) logger = ksclient . get_logger ( ) printer = Printer ( options . format ) regions = himutils . load_region_config ( <str> , region = ksclient . region , log = logger ) def project ( ) :      stats = { <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 } for name in sorted ( regions [ <str> ] . iterkeys ( ) ) :          logger . debug ( <str> % name ) novaclient = Nova ( options . config , debug = options . debug , log = logger , region = name ) instances = novaclient . get_instances ( ) stats [ <str> ] += len ( instances ) for i in instances :              project = ksclient . get_by_id ( <str> , i . tenant_id ) if not project :                  sys . stderr . write ( <str> % ( i . tenant_id , i . name ) ) continue  if hasattr ( project , <str> ) :                  stats [ <str> ] += 1  elif <str> in project . name :                  stats [ <str> ] += 1  else :                  if hasattr ( project , <str> ) :                      if project . type not in stats :                          print <str> % ( project . type , project . name )  else :                          stats [ project . type ] += 1   else :                      stats [ <str> ] += 1     if options . output == <str> :          stats [ <str> ] = <str> printer . output_dict ( stats )  else :          percent = dict ( ) if stats [ <str> ] > 0 :              for s in sorted ( stats ) :                  percent [ s ] = ( float ( stats [ s ] ) / float ( stats [ <str> ] ) ) * 100   percent [ <str> ] = <str> printer . output_dict ( percent )   def users ( ) :      stats = dict ( ) stats [ <str> ] = 0 for name in sorted ( regions [ <str> ] . iterkeys ( ) ) :          logger . debug ( <str> % name ) novaclient = Nova ( options . config , debug = options . debug , log = logger , region = name ) instances = novaclient . get_instances ( ) stats [ <str> ] += len ( instances ) for i in instances :              user = ksclient . get_by_id ( <str> , i . user_id ) if not user :                  org = <str> logger . debug ( <str> % ( i . name , i . id ) )  elif <str> not in user . name :                  org = <str>  else :                  org = user . name . split ( <str> ) [ 1 ]  if org in stats :                  stats [ org ] += 1  else :                  stats [ org ] = 1    if options . output == <str> :          stats [ <str> ] = <str> printer . output_dict ( stats )  else :          percent = dict ( ) if stats [ <str> ] > 0 :              for s in sorted ( stats ) :                  percent [ s ] = ( float ( stats [ s ] ) / float ( stats [ <str> ] ) ) * 100   percent [ <str> ] = <str> printer . output_dict ( percent )   def org ( ) :      stats = dict ( ) stats [ <str> ] = 0 for name in sorted ( regions [ <str> ] . iterkeys ( ) ) :          logger . debug ( <str> % name ) novaclient = Nova ( options . config , debug = options . debug , log = logger , region = name ) instances = novaclient . get_instances ( ) stats [ <str> ] += len ( instances ) for i in instances :              user = ksclient . get_by_id ( <str> , i . user_id ) if not user :                  org = <str> logger . debug ( <str> % ( i . name , i . id ) )  elif <str> not in user . name :                  org = <str>  else :                  domain = user . name . split ( <str> ) [ 1 ] if len ( domain . split ( <str> ) ) > 1 :                      org = domain . split ( <str> ) [ - 2 ]  else :                      org = <str>   if org in stats :                  stats [ org ] += 1  else :                  stats [ org ] = 1    if options . output == <str> :          stats [ <str> ] = <str> printer . output_dict ( stats )  else :          percent = dict ( ) if stats [ <str> ] > 0 :              for s in sorted ( stats ) :                  percent [ s ] = ( float ( stats [ s ] ) / float ( stats [ <str> ] ) ) * 100   percent [ <str> ] = <str> printer . output_dict ( percent )   def user ( ) :      if not ksclient . is_valid_user ( email = options . email ) :          print <str> % options . email sys . exit ( 1 )  obj = ksclient . get_user_objects ( email = options . email , domain = <str> ) projects = obj [ <str> ] total = 0 for project in projects :          project_type = project . type if hasattr ( project , <str> ) else <str> print <str> % ( project . name , project_type ) for name in sorted ( regions [ <str> ] . iterkeys ( ) ) :              logger . debug ( <str> % name ) novaclient = Nova ( options . config , debug = options . debug , log = logger , region = name ) instances = novaclient . get_project_instances ( project . id ) total += len ( instances ) for i in instances :                  print <str> % i . name    print <str> % ( options . email , total )  action = locals ( ) . get ( options . action ) if not action :      logger . error ( <str> % options . action ) sys . exit ( 1 )  action ( )  