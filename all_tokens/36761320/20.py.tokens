from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils import time parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) nc = Nova ( options . config , debug = options . debug , log = logger ) nc . set_dry_run ( options . dry_run ) if hasattr ( options , <str> ) :      regions = kc . find_regions ( region_name = options . region )  else :      regions = kc . find_regions ( )  def action_dualstack ( ) :      for region in regions :          nc = himutils . get_client ( Nova , options , logger , region ) instances = nc . get_all_instances ( ) printer . output_dict ( { <str> : <str> } ) status = dict ( { <str> : 0 } ) for i in instances :              if options . type :                  project = kc . get_by_id ( <str> , i . tenant_id ) if hasattr ( project , <str> ) and project . type != options . type :                      status [ <str> ] = options . type continue   network = i . addresses . keys ( ) [ 0 ] if len ( i . addresses . keys ( ) ) > 0 else <str> if network != <str> :                  continue  output = { <str> : i . id , <str> : i . name , <str> : i . status , <str> : network } printer . output_dict ( output , sort = True , one_line = True ) status [ <str> ] += 1 status [ str ( i . status ) . lower ( ) ] = status . get ( str ( i . status ) . lower ( ) , 0 ) + 1  printer . output_dict ( { <str> : <str> } ) printer . output_dict ( status )   action = locals ( ) . get ( <str> + options . action . replace ( <str> , <str> ) ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  