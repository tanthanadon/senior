import sys import ConfigParser import unicodedata from keystoneclient . auth . identity import v3 from keystoneauth1 import session from himlarcli import utils from abc import ABCMeta , abstractmethod class Client ( object ) :      __metaclass__ = ABCMeta region = None def __init__ ( self , config_path , debug , log = None , region = None ) :          self . config_path = config_path self . config = utils . get_config ( config_path ) self . logger = utils . get_logger ( __name__ , self . config , debug , log ) self . logger . debug ( <str> % config_path ) self . debug = debug self . dry_run = False openstack = self . get_config_section ( <str> ) auth = v3 . Password ( auth_url = openstack [ <str> ] , username = openstack [ <str> ] , password = openstack [ <str> ] , project_name = openstack [ <str> ] , user_domain_name = openstack [ <str> ] , project_domain_name = openstack [ <str> ] ) if <str> in openstack :              self . sess = session . Session ( auth = auth , verify = openstack [ <str> ] )  else :              self . sess = session . Session ( auth = auth )  if region :              self . region = region  else :              self . region = self . get_config ( <str> , <str> )   @ abstractmethod def get_client ( self ) :          pass  def set_dry_run ( self , dry_run ) :          self . logger . debug ( <str> % ( dry_run , type ( self ) . __name__ ) ) self . dry_run = True if dry_run else False  def get_region ( self ) :          return self . get_config ( <str> , <str> )  def get_config_section ( self , section ) :          try :              openstack = self . config . items ( section )  except ConfigParser . NoSectionError :              self . logger . exception ( <str> % section ) self . logger . critical ( <str> , section , self . config_path ) sys . exit ( 1 )  return dict ( openstack )  def get_config ( self , section , option , default = None ) :          try :              value = self . config . get ( section , option ) return value  except ConfigParser . NoOptionError :              self . logger . debug ( <str> % ( section , option ) )  except ConfigParser . NoSectionError :              self . logger . debug ( <str> % section )  return default  def get_logger ( self ) :          return self . logger  def debug_log ( self , msg ) :          prefix = <str> if self . dry_run else <str> self . logger . debug ( <str> , prefix , msg )  def log_dry_run ( self , function , ** kwargs ) :          if self . dry_run :              output = <str> % ( function , kwargs ) self . logger . debug ( output )   def get_fqdn ( self , hostname ) :          if not hostname :              return None  if <str> in hostname :              return hostname  domain = self . get_config ( <str> , <str> ) return hostname + <str> + domain  @ staticmethod def get_attr ( obj , attr ) :          if isinstance ( obj , dict ) and attr in obj :              return obj [ attr ]  elif not isinstance ( obj , dict ) and hasattr ( obj , attr ) :              return getattr ( obj , attr )  return None  @ staticmethod def get_dict ( obj ) :          if isinstance ( obj , dict ) :              return obj  elif hasattr ( obj , <str> ) :              return getattr ( obj , <str> ) ( )  else :              return dict ( )   @ staticmethod def convert_ascii ( text , format = <str> ) :          text_unicode = unicode ( text , <str> ) if isinstance ( text , str ) else text text_normalize = unicodedata . normalize ( <str> , text_unicode ) return text_normalize . encode ( <str> , format )  @ staticmethod def log_error ( msg , code = 0 ) :          sys . stderr . write ( <str> % msg ) if code > 0 :              sys . exit ( code )     