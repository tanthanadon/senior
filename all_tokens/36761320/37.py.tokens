from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . cinder import Cinder from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as utils from himlarcli . mail import Mail from datetime import datetime , date , timedelta import re parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_domain ( options . domain ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) regions = kc . find_regions ( ) def action_disable ( ) :      projects = kc . get_projects ( ) subject = <str> logfile = <str> . format ( date . today ( ) . isoformat ( ) ) if options . template :          template = options . template  else :          template = <str>  mail = utils . get_client ( Mail , options , logger ) fromaddr = mail . get_config ( <str> , <str> ) for project in projects :          project = expired_project ( project ) if not project :              continue  disabled_date = utils . get_date ( project . notified , None , <str> ) gracetime = timedelta ( 30 ) if date . today ( ) - disabled_date < gracetime :              continue  for region in regions :              nc = utils . get_client ( Nova , options , logger , region ) instances = nc . get_project_instances ( project_id = project . id ) for i in instances :                  if i . status == <str> :                      i . stop ( )    mapping = dict ( project = project . name , enddate = project . enddate ) body_content = utils . load_template ( inputfile = template , mapping = mapping , log = logger ) msg = mail . get_mime_text ( subject , body_content , fromaddr ) mail . send_mail ( project . admin , msg , fromaddr ) print <str> . format ( project . admin ) if not options . dry_run :              utils . append_to_file ( logfile , project . admin )  kc . update_project ( project_id = project . id , enabled = False , disabled = str ( date . today ( ) ) )   def action_notify ( ) :      projects = kc . get_projects ( ) subject = <str> logfile = <str> . format ( date . today ( ) . isoformat ( ) ) mail = utils . get_client ( Mail , options , logger ) fromaddr = mail . get_config ( <str> , <str> ) if options . template :          template = options . template  else :          template = <str>  for project in projects :          project = expired_project ( project ) if not project or hasattr ( project , <str> ) :              continue  mapping = dict ( project = project . name , enddate = project . enddate ) body_content = utils . load_template ( inputfile = template , mapping = mapping , log = logger ) msg = mail . get_mime_text ( subject , body_content , fromaddr ) mail . send_mail ( project . admin , msg , fromaddr ) print <str> . format ( project . admin ) if not options . dry_run :              utils . append_to_file ( logfile , project . admin )  kc . update_project ( project_id = project . id , notified = str ( date . today ( ) ) )   def action_list ( ) :      projects = kc . get_projects ( ) count = 0 i_count = 0 printer . output_dict ( { <str> : <str> } ) for project in projects :          project = expired_project ( project ) if not project :              continue  if hasattr ( project , <str> ) :              project_mail = <str>  elif hasattr ( project , <str> ) :              project_mail = <str>  else :              project_mail = <str>  output_project = { 0 : project . enddate , 1 : project . type , 2 : project . name , 5 : project_mail } resources = dict ( { <str> : 0 , <str> : 0 } ) for region in regions :              nc = utils . get_client ( Nova , options , logger , region ) instances = nc . get_project_instances ( project_id = project . id ) resources [ <str> ] = resources . get ( <str> , 0 ) + len ( instances )  output_project [ 4 ] = resources [ <str> ] i_count += int ( resources [ <str> ] ) count += 1 printer . output_dict ( output_project , sort = True , one_line = True )  printer . output_dict ( { <str> : <str> , <str> : count , <str> : i_count } )  def expired_project ( project ) :      if not hasattr ( project , <str> ) :          kc . debug_log ( <str> . format ( project . name ) ) return None  if not hasattr ( project , <str> ) :          project . type = <str>  if re . search ( <str> , project . enddate ) :          new_enddate = utils . convert_date ( project . enddate , <str> ) kc . update_project ( project_id = project . id , enddate = new_enddate ) project . enddate = new_enddate  if project . enddate == <str> or not utils . past_date ( project . enddate ) :          kc . debug_log ( <str> . format ( project . name , project . enddate ) ) return None  return project  action = locals ( ) . get ( <str> + options . action . replace ( <str> , <str> ) ) if not action :      utils . sys_error ( <str> % options . action )  action ( )  