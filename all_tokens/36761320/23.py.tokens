import sys import time from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils from himlarcli . notify import Notify himutils . is_virtual_env ( ) parser = Parser ( ) options = parser . parse_args ( ) ksclient = Keystone ( options . config , debug = options . debug ) logger = ksclient . get_logger ( ) printer = Printer ( options . format ) project_types = himutils . load_config ( <str> , log = logger ) if options . type and options . type not in project_types [ <str> ] :      sys . stderr . write ( <str> % options . type ) sys . exit ( 1 )  regions = list ( ) if options . region :      regions = regions . append ( options . region )  else :      for region in ksclient . get_regions ( ) :          regions . append ( region . id )   logger . debug ( <str> % regions ) def action_list ( ) :      search_filter = dict ( ) if options . type :          search_filter [ <str> ] = options . type  projects = ksclient . get_projects ( ** search_filter ) count = 0 for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) for project in projects :              if not options . filter or options . filter in project . name :                  instances = novaclient . get_project_instances ( project . id ) for i in instances :                      network = i . addresses . keys ( ) [ 0 ] if len ( i . addresses . keys ( ) ) > 0 else <str> if options . network and options . network != network :                          continue  count += 1 output = dict ( ) output [ <str> ] = region output [ <str> ] = i . id output [ <str> ] = i . status output [ <str> ] = unicode ( i . name ) output [ <str> ] = project . name printer . output_dict ( objects = output , one_line = True )     print <str> % count  def action_delete ( ) :      q = <str> answer = raw_input ( q ) if answer . lower ( ) != <str> :          print <str> return  search_filter = dict ( ) if options . type :          search_filter [ <str> ] = options . type  projects = ksclient . get_projects ( ** search_filter ) count = 0 for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) for project in projects :              if not options . filter or options . filter in project . name :                  instances = novaclient . get_project_instances ( project . id ) for i in instances :                      network = i . addresses . keys ( ) [ 0 ] if len ( i . addresses . keys ( ) ) > 0 else <str> if options . network and options . network != network :                          continue  logger . debug ( <str> % ( i . name , project . name ) ) if not options . dry_run :                          i . delete ( ) count += 1 time . sleep ( 2 )      print <str> % count  def action_notify ( ) :      q = <str> answer = raw_input ( q ) if answer . lower ( ) != <str> :          print <str> return  search_filter = dict ( ) if options . type :          search_filter [ <str> ] = options . type  projects = ksclient . get_projects ( ** search_filter ) for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) for project in projects :              if not options . filter or options . filter in project . name :                  instances = novaclient . get_project_instances ( project . id ) verified_instances = list ( ) for i in instances :                      network = i . addresses . keys ( ) [ 0 ] if len ( i . addresses . keys ( ) ) > 0 else <str> if options . network and options . network != network :                          continue  verified_instances . append ( i )  mapping = dict ( region = region . upper ( ) , project = project . name ) body_content = himutils . load_template ( inputfile = options . template , mapping = mapping , log = logger ) subject = ( <str> % ( region ) ) notify = Notify ( options . config , debug = False , log = logger ) notify . set_keystone_client ( ksclient ) notify . set_dry_run ( options . dry_run ) users = notify . mail_instance_owner ( verified_instances , body_content , subject ) notify . close ( ) if users :                      print users      action = locals ( ) . get ( <str> + options . action ) if not action :      logger . error ( <str> % options . action ) sys . exit ( 1 )  action ( )  