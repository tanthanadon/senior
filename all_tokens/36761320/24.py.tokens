from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . cinder import Cinder from himlarcli . mail import Mail from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils from datetime import date parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_domain ( options . domain ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) if hasattr ( options , <str> ) :      regions = kc . find_regions ( region_name = options . region )  else :      regions = kc . find_regions ( )  def action_list ( ) :      projects = kc . get_projects ( type = <str> ) printer . output_dict ( { <str> : <str> } ) count = { <str> : 0 , <str> : 0 , <str> : 0 } for project in projects :          ins_data = { <str> : 0 , <str> : 0 } vol_data = dict ( { <str> : 0 , <str> : 0 } ) for region in regions :              nc = utils . get_client ( Nova , options , logger , region ) cc = utils . get_client ( Cinder , options , logger , region ) instances = nc . get_project_instances ( project_id = project . id ) ins_data = { <str> : 0 , <str> : 0 } for i in instances :                  ins_data [ <str> ] += i . flavor [ <str> ] ins_data [ <str> ] += 1  volumes = cc . get_volumes ( detailed = True , search_opts = { <str> : project . id } ) for volume in volumes :                  vol_data [ <str> ] += volume . size vol_data [ <str> ] += 1   output = { <str> : project . name , <str> : ins_data [ <str> ] , <str> : ins_data [ <str> ] , <str> : vol_data [ <str> ] , <str> : vol_data [ <str> ] } printer . output_dict ( output , one_line = True ) count [ <str> ] += vol_data [ <str> ] count [ <str> ] += ins_data [ <str> ] count [ <str> ] += ins_data [ <str> ]  printer . output_dict ( { <str> : <str> , <str> : count [ <str> ] , <str> : count [ <str> ] , <str> : count [ <str> ] } )  def action_instances ( ) :      projects = kc . get_projects ( type = <str> ) printer . output_dict ( { <str> : <str> } ) count = 0 for project in projects :          for region in regions :              nc = utils . get_client ( Nova , options , logger , region ) instances = nc . get_project_instances ( project_id = project . id ) for i in instances :                  created = utils . get_date ( i . created , None , <str> ) output = { <str> : i . id , <str> : i . name , <str> : ( date . today ( ) - created ) . days , <str> : i . flavor [ <str> ] } count += 1 printer . output_dict ( output , one_line = True )    printer . output_dict ( { <str> : <str> , <str> : count } )  def action_notify ( ) :      projects = kc . get_projects ( type = <str> ) mail = Mail ( options . config , debug = options . debug ) fromaddr = mail . get_config ( <str> , <str> ) subject = <str> logfile = <str> . format ( date . today ( ) . isoformat ( ) ) for project in projects :          demo_instances = <str> for region in regions :              nc = utils . get_client ( Nova , options , logger , region ) instances = nc . get_project_instances ( project_id = project . id ) for i in instances :                  created = utils . get_date ( i . created , None , <str> ) demo_instances += <str> . format ( i . name , ( date . today ( ) - created ) . days , region . upper ( ) )   if not demo_instances :              continue  if not hasattr ( project , <str> ) :              utils . sys_error ( <str> . format ( project . name ) , 0 ) continue  mapping = dict ( project = project . name , instances = demo_instances ) body_content = utils . load_template ( inputfile = options . template , mapping = mapping , log = logger ) msg = mail . get_mime_text ( subject , body_content , fromaddr ) mail . send_mail ( project . admin , msg , fromaddr ) print <str> . format ( project . admin ) if not options . dry_run :              utils . append_to_file ( logfile , project . admin )    action = locals ( ) . get ( <str> + options . action . replace ( <str> , <str> ) ) if not action :      utils . sys_error ( <str> % options . action )  action ( )  