import sys import os import time from IPy import IP from datetime import datetime from himlarcli import utils as himutils from himlarcli . keystone import Keystone from himlarcli . glance import Glance from himlarcli . nova import Nova from himlarcli . neutron import Neutron from himlarcli . parser import Parser from himlarcli . printer import Printer himutils . is_virtual_env ( ) parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) glclient = Glance ( options . config , debug = options . debug , region = options . region ) logger = glclient . get_logger ( ) tags = list ( ) if hasattr ( options , <str> ) :      if options . type != <str> :          tags . append ( options . type )   def action_grant ( ) :      print <str> print <str> ksclient = Keystone ( options . config , debug = options . debug , log = logger ) project = ksclient . get_project ( project = options . project , domain = options . domain ) if not project :          himutils . sys_error ( <str> % ( options . project , options . domain ) )  if options . name :          tags . append ( options . name )  filters = { <str> : <str> , <str> : tags , <str> : <str> } logger . debug ( <str> % filters ) images = glclient . get_images ( filters = filters ) for image in images :          log_msg = <str> % ( image . name , project . name ) if not options . dry_run :              glclient . set_access ( image . id , project . id )  else :              log_msg = <str> % log_msg  logger . debug ( <str> % log_msg )   def action_purge ( ) :      if not himutils . confirm_action ( <str> ) :          return  images = image_usage ( ) for image in images . itervalues ( ) :          if image [ <str> ] > 0 :              logger . debug ( <str> % image [ <str> ] ) continue  log_msg = <str> % image [ <str> ] if not options . dry_run :              glclient . delete_image ( image [ <str> ] )  else :              log_msg = <str> % log_msg  logger . debug ( <str> , log_msg )   def action_usage ( ) :      output = image_usage ( options . detailed ) out_image = { <str> : <str> } printer . output_dict ( out_image ) distros = { <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 } distros [ <str> ] = <str> tags = dict ( ) tags [ <str> ] = <str> for image in output . itervalues ( ) :          out_image = { <str> : image [ <str> ] , <str> : image [ <str> ] , <str> : image [ <str> ] } if options . detailed :              out_image [ <str> ] = image [ <str> ] out_image [ <str> ] = image [ <str> ]  one_line = False if options . detailed else True printer . output_dict ( out_image , sort = True , one_line = one_line ) for distro in distros . iterkeys ( ) :              if distro in image [ <str> ] . lower ( ) :                  for tag in image [ <str> ] :                      tags [ tag ] = tags . get ( tag , 0 ) + image [ <str> ]  distros [ distro ] += image [ <str> ] continue    printer . output_dict ( distros ) printer . output_dict ( tags ) return output  def action_retire ( ) :      image_templates = himutils . load_config ( <str> % options . image_config ) if not image_templates or <str> not in image_templates or <str> not in image_templates :          sys . stderr . write ( <str> % options . image_config ) sys . exit ( 1 )  image_type = image_templates [ <str> ] image_msg = options . name if options . name else <str> question = <str> % image_msg if not himutils . confirm_action ( question ) :          return  found = False for name , image_data in image_templates [ <str> ] . iteritems ( ) :          if options . name and name != options . name :              logger . debug ( <str> , name ) continue  tags = list ( ) tags . append ( image_type ) tags . append ( name ) filters = { <str> : tags , <str> : <str> } logger . debug ( <str> % filters ) images = glclient . find_image ( filters = filters , limit = 1 ) if images and len ( images ) > 0 :              if not options . dry_run :                  timestamp = datetime . utcnow ( ) . replace ( microsecond = 0 ) . isoformat ( ) glclient . update_image ( image_id = images [ 0 ] [ <str> ] , name = image_data [ <str> ] , depricated = timestamp ) glclient . deactivate ( image_id = images [ 0 ] [ <str> ] )   found = True  if not found :          print <str> % options . image_config   def action_list ( ) :      ksclient = Keystone ( options . config , debug = options . debug , log = logger ) status = <str> if options . deactive else <str> filters = { <str> : status , <str> : options . visibility , <str> : tags } logger . debug ( <str> % filters ) images = glclient . get_images ( filters = filters ) out_image = { <str> : <str> } if options . format == <str> :          printer . output_dict ( out_image )  count = 0 for image in images :          out_image = { <str> : image . name , <str> : image . created_at , <str> : image . id } if options . detailed and image . visibility == <str> :              access = glclient . get_access ( image . id ) if access :                  access_list = list ( ) for member in access :                      project = ksclient . get_by_id ( <str> , member [ <str> ] ) if project :                          access_list . append ( project . name )   out_image [ <str> ] = access_list   if options . detailed and hasattr ( image , <str> ) :              out_image [ <str> ] = image . depricated  if options . detailed :              out_image [ <str> ] = image . tags  one_line = False if options . detailed else True printer . output_dict ( out_image , sort = True , one_line = one_line ) count += 1  out_image = { <str> : <str> , <str> : count } printer . output_dict ( out_image )  def action_update ( ) :      image_templates = himutils . load_config ( <str> % options . image_config ) if not image_templates or <str> not in image_templates or <str> not in image_templates :          sys . stderr . write ( <str> % options . image_config ) sys . exit ( 1 )  image_type = image_templates [ <str> ] for name , image_data in image_templates [ <str> ] . iteritems ( ) :          if options . name and name != options . name :              logger . debug ( <str> , name ) continue  mandatory = [ <str> , <str> , <str> , <str> , <str> , <str> ] if not bool ( all ( k in image_data for k in mandatory ) ) :              logger . debug ( <str> % name ) continue  update_image ( name , image_data , image_type )   def image_usage ( detailed = False ) :      status = <str> if options . deactive else <str> novaclient = Nova ( options . config , debug = options . debug , log = logger , region = options . region ) filters = { <str> : status , <str> : options . visibility , <str> : tags } logger . debug ( <str> % filters ) image_usage = dict ( ) images = glclient . get_images ( limit = 1000 , page_size = 999 , filters = filters ) for image in images :          image_usage [ image . id ] = image image_usage [ image . id ] [ <str> ] = 0 search_opts = { <str> : image . id } instances = novaclient . get_all_instances ( search_opts = search_opts ) if detailed :              image_usage [ image . id ] [ <str> ] = list ( )  for i in instances :              image_usage [ image . id ] [ <str> ] += 1 if detailed :                  image_usage [ image . id ] [ <str> ] . append ( i . id )    return image_usage  def update_image ( name , image_data , image_type ) :      if <str> in image_data and <str> in image_data :          checksum_url = <str> % ( image_data [ <str> ] , image_data [ <str> ] ) checksum_type = image_data [ <str> ]  else :          checksum_type = checksum_url = None  url = ( image_data [ <str> ] + image_data [ <str> ] ) imagefile = himutils . download_file ( image_data [ <str> ] , url , logger , checksum_type , checksum_url , 10000 ) if not imagefile :          logger . debug ( <str> % url ) return  tags = list ( ) tags . append ( image_type ) tags . append ( name ) filters = { <str> : tags , <str> : <str> } logger . debug ( <str> % filters ) images = glclient . find_image ( filters = filters , limit = 1 ) if images and len ( images ) == 1 :          logger . debug ( <str> % name ) checksum = himutils . checksum_file ( imagefile , <str> ) if checksum != images [ 0 ] [ <str> ] :              logger . debug ( <str> % checksum ) result = create_image ( name , imagefile , image_data , image_type ) if not options . dry_run :                  timestamp = datetime . utcnow ( ) . replace ( microsecond = 0 ) . isoformat ( ) glclient . update_image ( image_id = images [ 0 ] [ <str> ] , name = image_data [ <str> ] , depricated = timestamp ) glclient . deactivate ( image_id = images [ 0 ] [ <str> ] )   else :              result = None logger . debug ( <str> )   else :          logger . debug ( <str> % name ) result = create_image ( name , imagefile , image_data , image_type )  if result :          logger . debug ( <str> % result )  if os . path . isfile ( imagefile ) :          os . remove ( imagefile )   def create_image ( name , source_path , image , image_type ) :      visibility = image [ <str> ] if <str> in image else <str> disk_format = image [ <str> ] if <str> in image else <str> container_format = image [ <str> ] if <str> in image else <str> properties = { } if <str> in image :          for key , value in image [ <str> ] . iteritems ( ) :              properties [ key ] = value   tags = list ( ) tags . append ( image_type ) tags . append ( name ) if <str> in image :          for tag in image [ <str> ] :              tags . append ( tag )   log_msg = <str> % image [ <str> ] if not options . dry_run :          result = glclient . create_image ( source_path , name = image [ <str> ] , visibility = visibility , disk_format = disk_format , min_disk = image [ <str> ] , min_ram = image [ <str> ] , container_format = container_format , tags = tags , ** properties )  else :          log_msg = <str> + log_msg result = None  logger . debug ( <str> % log_msg ) return result  def action_test ( ) :      novaclient = Nova ( options . config , debug = options . debug , log = logger , region = options . region ) neutronclient = Neutron ( options . config , debug = options . debug , log = logger , region = options . region ) filters = { <str> : <str> , <str> : options . visibility , <str> : tags } logger . debug ( <str> % filters ) images = glclient . get_images ( filters = filters ) flavors = novaclient . get_flavors ( <str> ) networks = neutronclient . list_networks ( ) secgroup_name = <str> + str ( int ( time . time ( ) ) ) secgroup = neutronclient . create_security_port_group ( secgroup_name , 22 ) tests = dict ( { <str> : 0 , <str> : 0 , <str> : 0 } ) for image in images :          if options . name and options . name not in image . tags :              logger . debug ( <str> , options . name , <str> . join ( image . tags ) ) continue  for network in networks :              if network [ <str> ] == <str> :                  continue  try :                  starttime = int ( time . time ( ) ) print <str> % ( image . name , network [ <str> ] ) flavor = glclient . find_optimal_flavor ( image , flavors ) if not flavor :                      print <str> % image . name print <str> continue  logger . debug ( <str> % flavor . name ) nics = list ( ) nics . append ( { <str> : network [ <str> ] } ) server = novaclient . create_server ( name = <str> + str ( int ( time . time ( ) ) ) , flavor = flavor , image_id = image . id , security_groups = [ secgroup [ <str> ] ] , nics = nics ) timeout = 300 if not server :                      print <str> continue  server = novaclient . get_instance ( server . id ) while timeout > 0 and server . status == <str> :                      time . sleep ( 2 ) timeout -= 2 server = novaclient . get_instance ( server . id )  if timeout <= 0 :                      print ( <str> % ( image . name , timeout ) )  if server . status == <str> :                      print <str> print server . fault  else :                      used_time = int ( time . time ( ) ) - starttime print <str> % used_time  if server . addresses :                      for net in server . addresses [ network [ <str> ] ] :                          starttime = int ( time . time ( ) ) ip = IP ( net [ <str> ] ) print ( <str> % ( net [ <str> ] , ip , ip . iptype ( ) ) ) if ip . iptype ( ) == <str> :                              print <str> tests [ <str> ] += 1 continue  elif ip . iptype ( ) == <str> :                              print <str> tests [ <str> ] += 1 continue  timeout = 90 port = False while timeout > 0 and not port :                              start = int ( time . time ( ) ) port = himutils . check_port ( address = str ( ip ) , port = 22 , timeout = 2 , log = logger ) time . sleep ( 3 ) timeout -= ( int ( time . time ( ) ) - start )  used_time = int ( time . time ( ) ) - starttime if port :                              print <str> % ( ip , ip . iptype ( ) ) tests [ <str> ] += 1  else :                              print ( <str> % ( ip , used_time , ip . iptype ( ) ) ) tests [ <str> ] += 1    else :                      print <str> % server . name  try :                      server . delete ( ) time . sleep ( 3 ) print <str>  except :                      himutils . sys_error ( <str> )  print <str>  except KeyboardInterrupt :                  if server :                      server . delete ( ) time . sleep ( 5 ) print <str>     print <str> neutronclient . delete_security_group ( secgroup [ <str> ] ) printer . output_dict ( { <str> : <str> } ) printer . output_dict ( tests )  action = locals ( ) . get ( <str> + options . action ) if not action :      logger . error ( <str> % options . action ) sys . exit ( 1 )  action ( )  