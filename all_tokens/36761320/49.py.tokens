import ConfigParser import smtplib import sys from email . mime . text import MIMEText from himlarcli import utils class Notify ( object ) :      def __init__ ( self , config_path , debug = False , log = None ) :          debug_level = 1 if debug else 0 self . config_path = config_path self . config = utils . get_config ( config_path ) self . logger = utils . get_logger ( __name__ , self . config , debug , log ) self . logger . debug ( <str> % config_path ) self . debug = debug self . dry_run = False self . ksclient = None self . server = smtplib . SMTP ( self . get_config ( <str> , <str> ) , 25 ) self . server . set_debuglevel ( debug_level ) self . server . starttls ( )  def send_mail ( self , toaddr , msg ) :          from_addr = self . get_config ( <str> , <str> ) msg [ <str> ] = from_addr msg [ <str> ] = toaddr try :              self . server . sendmail ( from_addr , toaddr , msg . as_string ( ) )  except smtplib . SMTPRecipientsRefused as e :              self . log_error ( e )   def close ( self ) :          self . server . quit ( )  def set_dry_run ( self , dry_run ) :          self . dry_run = dry_run  def set_keystone_client ( self , ksclient ) :          self . ksclient = ksclient  def get_config ( self , section , option ) :          try :              value = self . config . get ( section , option ) return value  except ConfigParser . NoOptionError :              self . logger . debug ( <str> % ( section , option ) )  except ConfigParser . NoSectionError :              self . logger . debug ( <str> % section )  return None  def mail_user ( self , body , subject , user ) :          msg = MIMEText ( body , <str> , <str> ) msg [ <str> ] = subject log_msg = <str> % user if not self . dry_run :              self . send_mail ( user , msg ) self . logger . debug ( <str> , log_msg )  else :              log_msg = <str> + log_msg self . logger . debug ( <str> , log_msg ) self . logger . debug ( <str> , body )   def mail_instance_owner ( self , instances , body , subject , admin = False , options = [ <str> ] ) :          if not self . ksclient :              self . logger . error ( <str> ) return  users = dict ( ) for i in instances :              if not admin :                  user = self . ksclient . get_by_id ( <str> , i . user_id ) email = self . __get_user_email ( user )  if admin or not email :                  project = self . ksclient . get_by_id ( <str> , i . tenant_id ) email = self . __get_project_email ( project )  if not email :                  self . logger . debug ( <str> , i . name , i . id ) continue  if email not in users :                  users [ email ] = dict ( )  users [ email ] [ i . name ] = { <str> : i . status , <str> : getattr ( i , <str> ) } if admin :                  users [ email ] [ i . name ] [ <str> ] = project . name   for user , instances in users . iteritems ( ) :              user_instances = ( <str> <str> ) for server , info in instances . iteritems ( ) :                  extra = list ( ) for option in options :                      extra . append ( info [ option ] )  user_instances += <str> % server + <str> . join ( extra ) + <str>  msg = MIMEText ( user_instances + body , <str> , <str> ) msg [ <str> ] = subject log_msg = <str> % user if not self . dry_run :                  self . send_mail ( user , msg )  else :                  log_msg = <str> + log_msg  self . logger . debug ( <str> , log_msg )  return users  @ staticmethod def log_error ( msg , code = 0 ) :          sys . stderr . write ( <str> % msg ) if code > 0 :              sys . exit ( code )   @ staticmethod def __get_user_email ( user ) :          if not user :              return None  if hasattr ( user , <str> ) :              return user . email . lower ( )  if hasattr ( user , <str> ) and <str> in user . name :              return user . name . lower ( )  return None  @ staticmethod def __get_project_email ( project ) :          if not project :              return None  if hasattr ( project , <str> ) :              return project . admin . lower ( )  if hasattr ( project , <str> ) and project . type == <str> :              if hasattr ( project , <str> ) and <str> in project . name :                  return project . name . lower ( )   return None    