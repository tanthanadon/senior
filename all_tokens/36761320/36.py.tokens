from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils import time parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) nc = Nova ( options . config , debug = options . debug , log = logger ) nc . set_dry_run ( options . dry_run ) source = nc . get_fqdn ( options . source ) search_opts = dict ( all_tenants = 1 , host = source ) if not nc . get_host ( source ) :      himutils . sys_error ( <str> % source )  def action_list ( ) :      instances = nc . get_all_instances ( search_opts = search_opts ) printer . output_dict ( { <str> : <str> } ) for i in instances :          output = { <str> : i . id , <str> : i . name , <str> : getattr ( i , <str> ) , <str> : getattr ( i , <str> ) } printer . output_dict ( output , sort = True , one_line = True )   def action_migrate ( ) :      target = nc . get_fqdn ( options . target ) target_details = nc . get_host ( target ) if not target_details or target_details . status != <str> :          himutils . sys_error ( <str> % options . target )  q = <str> % ( source , target ) if not himutils . confirm_action ( q ) :          return  if not options . dry_run and not options . no_disable :          nc . disable_host ( source )  dry_run_txt = <str> if options . dry_run else <str> instances = nc . get_all_instances ( search_opts = search_opts ) count = 0 for i in instances :          if options . large :              if i . flavor [ <str> ] > options . large_ram :                  migrate_instance ( i , target )  else :                  kc . debug_log ( <str> % ( i . name , i . flavor [ <str> ] , options . large_ram ) )   else :              migrate_instance ( i , target )  count += 1 if options . limit and count >= options . limit :              kc . debug_log ( <str> % options . limit ) break    def action_evacuate ( ) :      source_host = nc . get_host ( source ) if source_host . state != <str> :          himutils . sys_error ( <str> )  hosts = nc . get_aggregate_hosts ( options . aggregate ) found_enabled = list ( ) for host in hosts :          if host . hypervisor_hostname == source :              continue  if host . status == <str> and host . state == <str> :              found_enabled . append ( host . hypervisor_hostname )   if not found_enabled :          himutils . sys_error ( <str> % options . aggregate )  logger . debug ( <str> , <str> . join ( found_enabled ) ) q = <str> % source if not himutils . confirm_action ( q ) :          return  instances = nc . get_all_instances ( search_opts = search_opts ) dry_run_txt = <str> if options . dry_run else <str> count = 0 for i in instances :          state = getattr ( i , <str> ) logger . debug ( <str> , dry_run_txt , i . name ) if state == <str> and not options . dry_run :              i . evacuate ( ) time . sleep ( options . sleep )  elif state == <str> and not options . dry_run :              i . evacuate ( ) time . sleep ( options . sleep )  elif not options . dry_run :              logger . debug ( <str> , i . name , state )  count += 1 if options . limit and count > options . limit :              logger . debug ( <str> , options . limit ) break    def migrate_instance ( instance , target ) :      state = getattr ( instance , <str> ) state_task = getattr ( instance , <str> ) if state_task :          kc . debug_log ( <str> % state_task ) return  kc . debug_log ( <str> % ( instance . name , target ) ) if ( state == <str> or state == <str> ) and not options . dry_run :          instance . live_migrate ( host = target ) time . sleep ( options . sleep )  elif state == <str> and not options . dry_run :          instance . migrate ( host = target ) time . sleep ( options . sleep )  elif not options . dry_run :          kc . debug_log ( <str> % ( instance . name , state ) )   action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  