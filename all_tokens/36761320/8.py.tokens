import utils import re from himlarcli . keystone import Keystone from himlarcli . designate import Designate from himlarcli import utils as himutils from himlarcli . parser import Parser from himlarcli . printer import Printer from collections import OrderedDict from prettytable import PrettyTable himutils . is_virtual_env ( ) parser = Parser ( ) parser . set_autocomplete ( True ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_domain ( options . domain ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) dns = Designate ( options . config , debug = options . debug ) if options . action [ 0 ] == <str> :      if options . dry_run :          print <str>  else :          print <str>   elif options . action [ 0 ] == <str> :      if options . dry_run :          print <str>  else :          print <str>   BULK_DESC = <str> def __diff_arrays ( first , second ) :      second = set ( second ) return [ item for item in first if item not in second ]  def action_blacklist_list ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) blacklists = designateclient . list_blacklists ( ) outputs = [ <str> , <str> , <str> ] if options . pretty :          x = PrettyTable ( ) x . field_names = outputs x . align [ <str> ] = <str> x . align [ <str> ] = <str> if isinstance ( blacklists , list ) :              for b in blacklists :                  if not isinstance ( b , dict ) :                      b = b . to_dict ( )  array = [ ] for o in outputs :                      array . append ( b [ o ] )  x . add_row ( array )   print ( x )  else :          header = <str> % ( <str> . join ( outputs ) ) printer . output_dict ( { <str> : header } ) output = OrderedDict ( ) if isinstance ( blacklists , list ) :              for b in blacklists :                  if not isinstance ( b , dict ) :                      b = b . to_dict ( )  for out in outputs :                      output [ out ] = b [ out ]  printer . output_dict ( objects = output , one_line = True , sort = False )     def action_blacklist_create ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) designateclient . create_blacklist ( pattern = options . pattern , description = options . comment )  def action_blacklist_delete ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) designateclient . delete_blacklist ( blacklist_id = options . this_id )  def action_blacklist_update ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) data = dict ( ) if options . pattern :          data [ <str> ] = options . pattern  if options . comment :          data [ <str> ] = options . comment  designateclient . update_blacklist ( blacklist_id = options . this_id , values = data )  def action_blacklist_show ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) res = designateclient . get_blacklist ( blacklist_id = options . this_id ) print print <str> % res [ <str> ] print <str> % res [ <str> ] print <str> % res [ <str> ] print <str> % res [ <str> ] print <str> % res [ <str> ] print  def action_tld_list ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) tlds = designateclient . list_tlds ( ) outputs = [ <str> , <str> , <str> ] if options . pretty :          x = PrettyTable ( ) x . field_names = outputs x . align [ <str> ] = <str> x . align [ <str> ] = <str> x . sortby = <str> if isinstance ( tlds , list ) :              for b in tlds :                  if not isinstance ( b , dict ) :                      b = b . to_dict ( )  array = [ ] for o in outputs :                      array . append ( b [ o ] )  x . add_row ( array )   print ( x )  else :          header = <str> % ( <str> . join ( outputs ) ) printer . output_dict ( { <str> : header } ) output = OrderedDict ( ) if isinstance ( tlds , list ) :              for b in tlds :                  if not isinstance ( b , dict ) :                      b = b . to_dict ( )  for out in outputs :                      output [ out ] = b [ out ]  printer . output_dict ( objects = output , one_line = True , sort = False )     def action_tld_create ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) designateclient . create_tld ( name = options . name , description = options . comment )  def action_tld_delete ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) designateclient . delete_tld ( tld = options . this_id )  def action_tld_update ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) data = dict ( ) if options . name :          data [ <str> ] = options . name  if options . comment :          data [ <str> ] = options . comment  designateclient . update_tld ( tld = options . this_id , values = data )  def action_tld_show ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) tld = designateclient . get_tld ( name = options . name ) print print <str> % tld [ <str> ] print <str> % tld [ <str> ] print <str> % tld [ <str> ] print <str> % tld [ <str> ] print <str> % tld [ <str> ] print  def action_tld_import ( ) :      designateclient = Designate ( options . config , debug = options . debug , log = logger ) global BULK_DESC existing = designateclient . list_tlds ( ) registered_tlds = [ ] if isinstance ( existing , list ) :          for this_tld in existing :              if not isinstance ( this_tld , dict ) :                  this_tld = this_tld . to_dict ( )  if this_tld [ <str> ] == BULK_DESC :                  registered_tlds . append ( this_tld [ <str> ] ) ;    bulkfile = open ( options . file , <str> ) iana_tlds = [ ] for name in bulkfile :          name = name . rstrip ( ) name = unicode ( name , <str> ) name = name . lower ( ) if re . match ( <str> , name ) :              continue  if re . match ( <str> , name ) :              continue  iana_tlds . append ( name )  remove_tlds = __diff_arrays ( registered_tlds , iana_tlds ) for name in remove_tlds :          if options . debug :              print <str> % name  designateclient . delete_tld ( tld = name )  add_tlds = __diff_arrays ( iana_tlds , registered_tlds ) for name in add_tlds :          if options . debug :              print <str> % name  designateclient . create_tld ( name = name , description = BULK_DESC )   action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  