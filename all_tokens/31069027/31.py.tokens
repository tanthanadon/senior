from openerp . osv import fields , osv from openerp import fields as fields2 class stock_move ( osv . osv ) :      _inherit = <str> def _create_invoice_line_from_vals ( self , cr , uid , move , invoice_line_vals , context = None ) :          invoice_line_vals [ <str> ] = move . id return super ( stock_move , self ) . _create_invoice_line_from_vals ( cr , uid , move , invoice_line_vals , context = context )   class stock_picking ( osv . osv ) :      _inherit = <str> _columns = { <str> : fields . many2many ( <str> , <str> , <str> , <str> , <str> ) , <str> : fields . related ( <str> , <str> , type = <str> , relation = <str> , string = <str> , readonly = True ) , } purchase_id = fields2 . Many2one ( <str> , related = <str> , store = True ) def init ( self , cr ) :          cr . execute ( )  def action_invoice_create ( self , cr , uid , ids , journal_id = False , group = False , type = <str> , context = None ) :          res = super ( stock_picking , self ) . action_invoice_create ( cr , uid , ids , journal_id , group , type , context ) invoice_ids = res inv_obj = self . pool . get ( <str> ) for inv in inv_obj . browse ( cr , uid , invoice_ids ) :              pick_ids = set ( ) for l in inv . invoice_line :                  if l . stock_move_id and l . stock_move_id . picking_id :                      pick_ids . add ( l . stock_move_id . picking_id . id )   pick_ids = list ( pick_ids ) inv . write ( { <str> : [ ( 6 , 0 , pick_ids ) ] } )  return res  def copy ( self , cr , uid , id , default = None , context = None ) :          if default is None :              default = { }  default = default . copy ( ) default . update ( { <str> : [ ] , } ) return super ( stock_picking , self ) . copy ( cr , uid , id , default , context )    