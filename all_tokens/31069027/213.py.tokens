from openerp import models , fields , api from openerp . tools . translate import _ from openerp . exceptions import except_orm from openerp . addons . stock_account . wizard . stock_invoice_onshipping import JOURNAL_TYPE_MAP class FastReturn ( models . TransientModel ) :      _name = <str> @ api . model def _get_journal ( self ) :          journal_obj = self . env [ <str> ] journal_type = self . _get_journal_type ( ) journals = journal_obj . search ( [ ( <str> , <str> , journal_type ) ] ) return journals and journals [ 0 ] or False  @ api . model def _get_journal_type ( self ) :          return JOURNAL_TYPE_MAP . get ( ( <str> , <str> ) , [ <str> ] ) [ 0 ]  journal_id = fields . Many2one ( <str> , <str> , required = True , default = _get_journal ) journal_type = fields . Selection ( [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , <str> , readonly = True , default = _get_journal_type ) @ api . multi def fast_return ( self ) :          pickings = self . env [ <str> ] . browse ( self . env . context [ <str> ] ) picking_ids = pickings . fast_returns ( ) self . create_invoice ( picking_ids ) data_pool = self . env [ <str> ] model_data_ids = data_pool . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) ] ) model_data_form_ids = data_pool . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) ] ) resource_id = model_data_ids . read ( fields = [ <str> ] ) [ 0 ] [ <str> ] resource_form_id = model_data_form_ids . read ( fields = [ <str> ] ) [ 0 ] [ <str> ] return { <str> : _ ( <str> ) , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ ( resource_id , <str> ) , ( resource_form_id , <str> ) ] , <str> : <str> + <str> . join ( map ( str , picking_ids ) ) + <str> , <str> : self . env . context , <str> : <str> , }  def create_invoice ( self , pickings ) :          picks = self . env [ <str> ] . browse ( pickings ) pick_ids = [ p . id for p in picks if p . invoice_state == <str> ] print pick_ids if pick_ids :              invoice_wzd_vals = { <str> : self . journal_id . id , <str> : self . journal_type , <str> : False , <str> : False } invoice_wzd = self . env [ <str> ] . create ( invoice_wzd_vals ) invoice_ids = invoice_wzd . with_context ( active_ids = pick_ids ) . create_invoice ( ) invoices = self . env [ <str> ] . browse ( invoice_ids ) for invoice in invoices :                  rect_inv_id = invoice . picking_ids [ 0 ] . move_lines [ 0 ] . origin_returned_move_id . picking_id . invoice_ids [ 0 ] . id print <str> print rect_inv_id vals = { <str> : [ ( 6 , 0 , [ rect_inv_id , ] ) ] } print vals invoice . write ( vals )      