from openerp . osv import orm , osv from openerp import fields from openerp . tools . translate import _ class account_invoice ( osv . osv ) :      _inherit = <str> blocked = fields . Boolean ( related = <str> , copy = False ) allow_confirm_blocked = fields . Boolean ( <str> ) def invoice_validate ( self , cr , uid , ids , context = None ) :          for invoice in self . browse ( cr , uid , ids , context ) :              partner_ids_to_check = [ invoice . partner_id . commercial_partner_id and invoice . partner_id . commercial_partner_id . id or False , invoice . partner_id . id ] unique_partner_ids_to_check = filter ( lambda a : a != False , [ x for i , x in enumerate ( partner_ids_to_check ) if x not in partner_ids_to_check [ i + 1 : ] ] ) for part_id in unique_partner_ids_to_check :                  partner_fields_dict = self . pool . get ( <str> ) . read ( cr , uid , part_id , [ <str> , <str> ] ) if partner_fields_dict [ <str> ] and not invoice . allow_confirm_blocked :                      title = _ ( <str> ) % partner_fields_dict [ <str> ] message = _ ( <str> ) raise osv . except_osv ( title , message )    return super ( account_invoice , self ) . invoice_validate ( cr , uid , ids , context = context )  def onchange_partner_id ( self , cr , uid , ids , type , partner_id , date_invoice = False , payment_term = False , partner_bank_id = False , company_id = False , context = None ) :          if not partner_id :              return { <str> : { <str> : False , <str> : False , } }  warning = { } title = False message = False partner_dict = self . pool . get ( <str> ) . read ( cr , uid , partner_id , [ <str> ] ) partner_ids_to_check = [ partner_dict [ <str> ] [ 0 ] , partner_id ] unique_partner_ids_to_check = filter ( lambda a : a != False , [ x for i , x in enumerate ( partner_ids_to_check ) if x not in partner_ids_to_check [ i + 1 : ] ] ) for part_id in unique_partner_ids_to_check :              partner_fields_dict = self . pool . get ( <str> ) . read ( cr , uid , part_id , [ <str> , <str> ] ) if partner_fields_dict [ <str> ] :                  title = _ ( <str> ) % partner_fields_dict [ <str> ] message = _ ( <str> ) warning = { <str> : title , <str> : message }   result = super ( account_invoice , self ) . onchange_partner_id ( cr , uid , ids , type , partner_id , date_invoice = date_invoice , payment_term = payment_term , partner_bank_id = partner_bank_id , company_id = company_id , context = context ) if result . get ( <str> , False ) :              warning [ <str> ] = title and title + <str> + result [ <str> ] [ <str> ] or result [ <str> ] [ <str> ] warning [ <str> ] = message and message + <str> + result [ <str> ] [ <str> ] or result [ <str> ] [ <str> ]  return { <str> : result . get ( <str> , { } ) , <str> : warning }    