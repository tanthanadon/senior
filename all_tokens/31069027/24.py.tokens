import logging from openerp import api , models , fields , _ from datetime import datetime import pytz _logger = logging . getLogger ( __name__ ) MIN_MINUTE = 3 EMPLOYEE_FIELDS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] USER_FIELDS = [ <str> , <str> , <str> , <str> ] CONF_FIELDS = [ <str> , <str> , <str> , <str> , <str> , <str> ] class HrEmployee ( models . Model ) :      _inherit = <str> def get_time_to_user_tz ( self , today ) :          utc = pytz . timezone ( <str> ) context_tz = pytz . timezone ( self . user_id . tz ) utc_today = utc . localize ( today , is_dst = False ) context_today = utc_today . astimezone ( context_tz ) return context_today  @ api . multi def get_last_sign_split ( self ) :          for emp in self :              if emp . last_sign :                  last_sign_date = datetime . strptime ( emp . last_sign , <str> )  else :                  last_sign_date = datetime . now ( )  last_sign = self . get_time_to_user_tz ( last_sign_date ) emp . apk_date = self . get_time_to_user_tz ( datetime . now ( ) ) emp . last_sign_day = last_sign . strftime ( <str> ) emp . last_sign_hour = last_sign . strftime ( <str> ) emp . last_sign_tz = last_sign . strftime ( <str> )   last_sign_hour = fields . Char ( compute = <str> ) last_sign_day = fields . Char ( compute = <str> ) last_sign_tz = fields . Char ( compute = <str> ) apk_date = fields . Char ( compute = <str> ) @ api . model def attendance_action_change_apk ( self , vals ) :          employee = self . env [ <str> ] . browse ( vals . get ( <str> , False ) ) last_signin = self . env [ <str> ] . search ( [ ( <str> , <str> , employee . id ) ] , limit = 1 , order = <str> ) if last_signin :              last_signin_datetime = datetime . strptime ( last_signin . name , <str> ) now_datetime = datetime . now ( ) diffmins = ( now_datetime - last_signin_datetime ) . seconds / 60 if diffmins <= MIN_MINUTE and False :                  return { <str> : True , <str> : ( _ ( <str> ) . format ( diffmins ) ) }   ctx = self . _context . copy ( ) if <str> in vals :              ctx . update ( gps_info = vals [ <str> ] )  res = employee . with_context ( ctx ) . attendance_action_change ( ) if res :              return { <str> : False , <str> : <str> }   @ api . model def get_employee_info ( self , vals ) :          user_id = vals . get ( <str> , False ) if user_id :              user_id = self . env [ <str> ] . browse ( user_id )  employee_id = vals . get ( <str> , False ) if not user_id and not employee_id :              return { <str> : True , <str> : <str> }  if employee_id :              employee_id = self . browse ( employee_id )  if user_id and not employee_id :              domain = [ ( <str> , <str> , user_id . id ) ] employee_id = self . env [ <str> ] . search ( domain , limit = 1 ) if not employee_id :                  return { <str> : True , <str> : <str> }  domain = [ ( <str> , <str> , user_id . company_id . id ) ] apk = self . env [ <str> ] . search ( domain , limit = 1 ) if not apk :                  return { <str> : True , <str> : <str> }   if employee_id :              employee = { } for f in EMPLOYEE_FIELDS :                  if f == <str> :                      employee [ f ] = employee_id [ f ] . id or False  else :                      employee [ f ] = employee_id [ f ]   if vals . get ( <str> , False ) :                  return employee   if user_id :              res = { } for f in USER_FIELDS :                  if f == <str> :                      res [ f ] = user_id [ f ] . id or False  else :                      res [ f ] = user_id [ f ]    if apk :              conf = { } for f in CONF_FIELDS :                  conf [ f ] = apk [ f ]  res [ <str> ] = conf  res [ <str> ] = employee return { <str> : False , <str> : res }   class HrAttendance ( models . Model ) :      _inherit = <str> @ api . model def get_google_maps_url ( self ) :          for att in self :              origin = <str> . format ( att . latitude , att . longitude ) destination = att . get_related_attendance ( ) if destination :                  destination_obj = self . env [ <str> ] . browse ( destination ) destination_point = <str> . format ( destination_obj . latitude , destination_obj . longitude )  else :                  if att . attendance_position_ids :                      destination_point = <str> . format ( att . attendance_position_ids [ - 1 ] . latitude , att . attendance_position_ids [ - 1 ] . longitude )  else :                      destination_point = origin   waypoints = att . attendance_position_ids waypoints_str = <str> if waypoints :                  for point in waypoints :                      if point == waypoints [ 0 ] :                          waypoints_str = <str> . format ( point . latitude , point . longitude )  else :                          waypoints_str = <str> . format ( waypoints_str , point . latitude , point . longitude )    att . google_maps_url = <str> . format ( origin , destination_point , waypoints_str )   google_maps_url = fields . Char ( compute = <str> ) @ api . model def get_attendance_data ( self , attendance_id ) :          attendance = self . browse ( attendance_id ) return { <str> : attendance . action , <str> : attendance . get_related_attendance ( ) , }  def get_related_attendance ( self ) :          for attendance in self :              if attendance . action == <str> :                  return self . env [ <str> ] . search ( [ ( <str> , <str> , attendance . employee_id . id ) , ( <str> , <str> , attendance . id ) , ( <str> , <str> , <str> ) ] , limit = 1 , order = <str> ) . id or False  else :                  return self . env [ <str> ] . search ( [ ( <str> , <str> , attendance . employee_id . id ) , ( <str> , <str> , attendance . id ) , ( <str> , <str> , <str> ) ] , limit = 1 , order = <str> ) . id or False    def get_name_to_user_zone ( self ) :          for att in self :              name = datetime . strptime ( att . name , <str> ) att . name_to_user_zone = att . employee_id . get_time_to_user_tz ( name ) . strftime ( <str> )   def get_logs_domain ( self , vals ) :           from_date = vals . get ( <str> , False ) to_date = vals . get ( <str> , False ) employee_id = vals . get ( <str> , False ) domain = [ ( <str> , <str> , employee_id ) ] if from_date :               domain += [ ( <str> , <str> , from_date ) ]  if to_date :               domain += [ ( <str> , <str> , to_date ) ]  return domain  @ api . model def get_vals ( self , vals_type = <str> , check_val = { } , min_accuracity = 0 ) :          def day ( date ) :              try :                  day = datetime . strftime ( datetime . strptime ( date . split ( <str> ) [ 0 ] , <str> ) , <str> )  except :                  day = False  return day  def hour ( date ) :              try :                  hour = date . split ( <str> ) [ 1 ]  except :                  hour = False  return hour  name = self . name_to_user_zone if vals_type == <str> :              check_val = { <str> : self . id , <str> : self . action == <str> and self . action_desc . action_type or self . action or <str> , <str> : day ( name ) , <str> : hour ( name ) , <str> : name , <str> : self . worked_hours , <str> : ( self . accuracity <= min_accuracity ) , <str> : True , <str> : self . google_maps_url }  if vals_type == <str> :              check_val = { <str> : self . id , <str> : self . action == <str> and self . action_desc . action_type or self . action or <str> , <str> : day ( name ) , <str> : hour ( name ) , <str> : name , <str> : self . worked_hours , <str> : ( self . accuracity <= min_accuracity ) , <str> : True , <str> : self . google_maps_url }  if vals_type == <str> :              check_val . update ( same_day = day ( name ) < check_val [ <str> ] , gps_in = ( self . accuracity <= min_accuracity ) , log_in_hour = hour ( name ) , log_in = name )  return check_val  @ api . model def get_logs ( self , vals ) :          limit = vals . get ( <str> , 0 ) domain = self . get_logs_domain ( vals ) checks = self . env [ <str> ] . search ( domain , limit = limit , order = <str> ) employee = self . env [ <str> ] . browse ( vals . get ( <str> , False ) ) checks_vals = [ ] check_val = { } apk = employee . company_id . get_clock_apk ( ) for check in checks :              check_action = ( check . action == <str> and check . action_desc . action_type or check . action ) if check_action == <str> :                  check_val = check . get_vals ( vals_type = <str> , min_accuracity = apk . min_accuracity )  elif check_action == <str> and not check_val :                  checks_vals . append ( check . get_vals ( vals_type = <str> , min_accuracity = apk . min_accuracity ) ) check_val = { }  elif check_action == <str> and check_val :                  checks_vals . append ( check . get_vals ( vals_type = <str> , check_val = check_val , min_accuracity = apk . min_accuracity ) ) check_val = { }  if check_val and check_val [ <str> ] == <str> and False :                  domain = [ ( <str> , <str> , employee . id ) , ( <str> , <str> , check . name ) ] check = check . env [ <str> ] . search ( domain , limit = 1 , order = <str> ) checks_vals . append ( check . get_vals ( vals_type = <str> , check_val = check_val , min_accuracity = apk . min_accuracity ) ) check_val = { }   return checks_vals  @ api . multi def _get_url_gps ( self ) :          for att in self :              url = <str> if att . latitude and att . longitude :                  url = <str> . format ( att . latitude , att . longitude )  att . url_gps = url   latitude = fields . Float ( <str> ) longitude = fields . Float ( <str> ) accuracity = fields . Float ( <str> ) ip = fields . Char ( <str> ) url_gps = fields . Char ( <str> , compute = <str> ) name_to_user_zone = fields . Char ( compute = get_name_to_user_zone ) attendance_position_ids = fields . One2many ( comodel_name = <str> , inverse_name = <str> , string = <str> ) @ api . model def create ( self , vals ) :          gps_info = self . _context . get ( <str> , False ) if gps_info :              vals . update ( gps_info )  return super ( HrAttendance , self ) . create ( vals )   class HrAttendancePosition ( models . Model ) :      _name = <str> attendance_id = fields . Many2one ( comodel_name = <str> , string = <str> ) latitude = fields . Float ( <str> ) longitude = fields . Float ( <str> ) @ api . model def insert_position_apk ( self , vals ) :          employee_id = vals . get ( <str> , False ) latitude = vals . get ( <str> , False ) longitude = vals . get ( <str> , False ) domain = [ ( <str> , <str> , employee_id ) ] last_attendance = self . env [ <str> ] . search ( domain , limit = 1 , order = <str> ) if last_attendance . action == <str> :              values = { <str> : last_attendance . id , <str> : latitude , <str> : longitude , } attendance_position = self . env [ <str> ] . create ( values ) return attendance_position  return False     