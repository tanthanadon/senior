from openerp import models , fields , api from openerp . addons . decimal_precision import decimal_precision as dp class StockPicking ( models . Model ) :      _inherit = <str> early_payment_disc_untaxed = fields . Float ( <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True , compute = <str> ) early_payment_disc_tax = fields . Float ( <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True , compute = <str> ) early_payment_disc_total = fields . Float ( <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True , compute = <str> ) total_early_discount = fields . Float ( <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True , compute = <str> ) @ api . multi @ api . depends ( <str> , <str> ) def _amount_all ( self ) :          res = super ( StockPicking , self ) . _amount_all ( ) for picking in self :              if not picking . sale_id . early_payment_discount :                  picking . early_payment_disc_untaxed = picking . amount_untaxed picking . early_payment_disc_tax = picking . amount_tax picking . early_payment_disc_total = picking . amount_total  else :                  picking . early_payment_disc_untaxed = picking . amount_untaxed * ( 1.0 - ( float ( picking . sale_id . early_payment_discount or 0.0 ) ) / 100.0 ) picking . early_payment_disc_tax = picking . amount_tax * ( 1.0 - ( float ( picking . sale_id . early_payment_discount or 0.0 ) ) / 100.0 ) picking . early_payment_disc_total = picking . amount_total * ( 1.0 - ( float ( picking . sale_id . early_payment_discount or 0.0 ) ) / 100.0 ) picking . total_early_discount = picking . early_payment_disc_untaxed - picking . amount_untaxed   return res    