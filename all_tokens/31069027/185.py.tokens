from openerp import models , fields , api from datetime import datetime from dateutil . relativedelta import relativedelta class ResPartnerRappelRel ( models . Model ) :      _name = <str> _rec_name = <str> PERIODICITIES = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] PERIODICITIES_MONTHS = { <str> : 1 , <str> : 3 , <str> : 6 , <str> : 12 } partner_id = fields . Many2one ( <str> , <str> , required = True , domain = [ ( <str> , <str> , True ) , ( <str> , <str> , True ) ] ) rappel_id = fields . Many2one ( <str> , <str> , required = True ) date_start = fields . Date ( <str> , required = True , default = fields . Date . context_today ) date_end = fields . Date ( <str> ) periodicity = fields . Selection ( PERIODICITIES , <str> , default = <str> , required = True ) last_settlement_date = fields . Date ( <str> ) @ api . multi def _get_next_period ( self ) :          self . ensure_one ( ) if self . last_settlement_date and self . last_settlement_date > self . date_start :              date_start = datetime . strptime ( self . last_settlement_date , <str> ) . date ( )  else :              date_start = datetime . strptime ( self . date_start , <str> ) . date ( )  date_stop = date_start + relativedelta ( months = self . PERIODICITIES_MONTHS [ self . periodicity ] , days = - 1 ) if self . date_end :              date_end = datetime . strptime ( self . date_end , <str> ) . date ( ) if date_end < date_stop :                  date_stop = date_end   if date_start != date_stop :              period = [ date_start , date_stop ]  else :              period = False  return period  @ api . multi def _get_invoices ( self , period , products ) :          self . ensure_one ( ) invoices = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , period [ 0 ] ) , ( <str> , <str> , period [ 1 ] ) , ( <str> , <str> , [ <str> , <str> ] ) , ( <str> , <str> , self . partner_id . id ) ] ) refunds = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , period [ 0 ] ) , ( <str> , <str> , period [ 1 ] ) , ( <str> , <str> , [ <str> , <str> ] ) , ( <str> , <str> , self . partner_id . id ) ] ) refund_lines = self . env [ <str> ] . search ( [ ( <str> , <str> , [ x . id for x in refunds ] ) , ( <str> , <str> , products ) , ( <str> , <str> , False ) ] ) invoice_lines = self . env [ <str> ] . search ( [ ( <str> , <str> , [ x . id for x in invoices ] ) , ( <str> , <str> , products ) , ( <str> , <str> , False ) ] ) return invoice_lines , refund_lines  @ api . model def compute ( self , period , invoice_lines , refund_lines , tmp_model = False ) :          for rappel in self :              rappel_info = { <str> : rappel . rappel_id . id , <str> : rappel . partner_id . id , <str> : period [ 0 ] , <str> : 0.0 , <str> : period [ 1 ] } total_rappel = 0.0 if rappel . rappel_id . calc_mode == <str> :                  if rappel . rappel_id . calc_amount == <str> :                      total_rappel = rappel . rappel_id . fix_qty  else :                      total = sum ( [ x . price_subtotal for x in invoice_lines ] ) - sum ( [ x . price_subtotal for x in refund_lines ] ) if total :                          total_rappel = total * rappel . rappel_id . fix_qty / 100.0  rappel_info [ <str> ] = total  rappel_info [ <str> ] = total_rappel  else :                  field = <str> if rappel . rappel_id . qty_type == <str> :                      field = <str>  else :                      field = <str>  total = sum ( [ x [ field ] for x in invoice_lines ] ) - sum ( [ x [ field ] for x in refund_lines ] ) rappel_info [ <str> ] = total if total :                      section = self . env [ <str> ] . search ( [ ( <str> , <str> , rappel . rappel_id . id ) , ( <str> , <str> , total ) , ( <str> , <str> , total ) ] ) if not section :                          section = self . env [ <str> ] . search ( [ ( <str> , <str> , rappel . rappel_id . id ) , ( <str> , <str> , total ) , ( <str> , <str> , False ) ] , order = <str> , limit = 1 )  if not section :                          rappel_info [ <str> ] = 0.0  else :                          rappel_info [ <str> ] = section . id section = section [ 0 ] if rappel . rappel_id . calc_amount == <str> :                              total_rappel = section . percent  else :                              total_rappel = total * section . percent / 100.0 rappel_info [ <str> ] = total_rappel    else :                      rappel_info [ <str> ] = 0.0   if period [ 1 ] <= fields . Date . from_string ( fields . Date . today ( ) ) :                  if total_rappel :                      self . env [ <str> ] . create ( { <str> : rappel . partner_id . id , <str> : period [ 0 ] , <str> : period [ 1 ] , <str> : total_rappel , <str> : rappel . rappel_id . id } )  rappel . last_settlement_date = period [ 1 ]  else :                  if tmp_model and rappel_info :                      self . env [ <str> ] . create ( rappel_info )    return True    