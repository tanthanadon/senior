from openerp . osv import osv , fields import calendar import time class get_sales_forecast ( osv . osv_memory ) :      _name = <str> _description = <str> _columns = { <str> : fields . char ( <str> , size = 64 , required = True ) , <str> : fields . many2one ( <str> , <str> , required = True ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) } def get_sales_forecast ( self , cr , uid , ids , context = None ) :          if context is None :              context = { }  amount = 0.0 new_id = False products = { } value = { } invoice_ids = [ ] months = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] inv_obj = self . pool . get ( <str> ) forecast_obj = self . pool . get ( <str> ) forecast_line_obj = self . pool . get ( <str> ) user_obj = self . pool . get ( <str> ) product_obj = self . pool . get ( <str> ) company_id = user_obj . browse ( cr , uid , uid ) . company_id . id for form in self . browse ( cr , uid , ids ) :              new_id = forecast_obj . create ( cr , uid , { <str> : form . name , <str> : form . account_id . id , <str> : uid , <str> : time . strftime ( <str> ) , <str> : company_id , <str> : <str> } ) for month in range ( 0 , 11 ) :                  domain = [ ( <str> , <str> , str ( <str> + str ( month + 1 ) + <str> + str ( int ( time . strftime ( <str> ) [ 6 : ] ) - 1 ) ) ) , ( <str> , <str> , str ( ( calendar . monthrange ( ( int ( time . strftime ( <str> ) [ 6 : ] ) - 1 ) , ( month + 1 ) ) [ 1 ] ) ) + <str> + str ( month + 1 ) + <str> + str ( int ( time . strftime ( <str> ) [ 6 : ] ) - 1 ) ) , ( <str> , <str> , company_id ) ] invoice_ids = inv_obj . search ( cr , uid , domain ) if invoice_ids :                      for inv in inv_obj . browse ( cr , uid , invoice_ids ) :                          for line in inv . invoice_line :                              if line . account_analytic_id and line . account_analytic_id . id == form . account_id . id and line . product_id :                                  quantity = self . pool . get ( <str> ) . _compute_qty ( cr , uid , line . uos_id . id , line . quantity , line . product_id . uom_id . id ) if products . get ( line . product_id . id ) :                                      new_val = ( products [ line . product_id . id ] [ 0 ] [ 0 ] + quantity , products [ line . product_id . id ] [ 0 ] [ 1 ] + line . price_subtotal ) products [ line . product_id . id ] [ 0 ] = new_val  else :                                      products [ line . product_id . id ] = [ ] products [ line . product_id . id ] . append ( ( quantity , line . price_subtotal ) )     if products :                          for product in products :                              if form . percent_increase :                                  qty = products [ product ] [ 0 ] [ 0 ] + ( ( form . percent_increase / 100 ) * products [ product ] [ 0 ] [ 0 ] )  else :                                  qty = products [ product ] [ 0 ] [ 0 ]  cur_forecast = forecast_obj . browse ( cr , uid , new_id ) l_products = forecast_line_obj . search ( cr , uid , [ ( <str> , <str> , product ) , ( <str> , <str> , cur_forecast . id ) ] ) if l_products :                                  l = forecast_line_obj . browse ( cr , uid , l_products [ 0 ] ) if l . product_id . id == product :                                      forecast_line_obj . write ( cr , uid , l . id , { months [ month ] + <str> : ( qty + ( eval ( <str> + ( months [ month ] + <str> ) , { <str> : l } ) ) ) } )   else :                                  forecast_line_obj . create ( cr , uid , { <str> : new_id , <str> : product , months [ month ] + <str> : qty } )   products = { }     value = { <str> : str ( [ ( <str> , <str> , [ new_id ] ) ] ) , <str> : <str> , <str> : <str> , <str> : <str> , <str> : False , <str> : <str> , <str> : new_id } return value   get_sales_forecast ( )  