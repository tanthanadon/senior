from openerp import models , api , fields import openerp . addons . decimal_precision as dp class StockTransferDetails ( models . TransientModel ) :      _inherit = <str> @ api . model def default_get ( self , fields ) :          res = super ( StockTransferDetails , self ) . default_get ( fields ) t_uom = self . env [ <str> ] picking_ids = self . _context . get ( <str> , [ ] ) if len ( picking_ids ) != 1 :              return res  res [ <str> ] = [ ] picking = self . env [ <str> ] . browse ( picking_ids [ 0 ] ) if not picking . pack_operation_ids :              picking . do_prepare_partial ( )  items = [ ] packs = [ ] for op in picking . pack_operation_ids :              uos_id = uom_id = op . product_uom_id . id uos_qty = uom_qty = op . product_qty if op . linked_move_operation_ids :                  move = op . linked_move_operation_ids [ 0 ] . move_id uos_id = move . product_uos . id or uos_id uos_qty = t_uom . _compute_qty ( uom_id , uom_qty , uos_id )  item = { <str> : op . id , <str> : op . product_id . id , <str> : op . product_uom_id . id , <str> : op . product_qty , <str> : op . package_id . id , <str> : op . lot_id . id , <str> : op . location_id . id , <str> : op . location_dest_id . id , <str> : op . result_package_id . id , <str> : op . date , <str> : op . owner_id . id , <str> : uos_qty , <str> : uos_id , } if op . product_id :                  items . append ( item )  elif op . package_id :                  packs . append ( item )   res . update ( item_ids = items , pickop_ids = packs ) return res   class StockTransferDetailsItems ( models . TransientModel ) :      _inherit = <str> uos_qty = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) ) uos_id = fields . Many2one ( <str> , <str> , readonly = True ) @ api . onchange ( <str> ) def quantity_onchange ( self ) :          t_uom = self . env [ <str> ] if self . env . context . get ( <str> ) :              self . env . context = self . with_context ( skip_quantity_onchange = False ) . env . context  else :              if self . uos_id :                  self . env . context = self . with_context ( skip_uos_qty_onchange = True ) . env . context self . uos_qty = t_uom . _compute_qty ( self . product_uom_id . id , self . quantity , self . uos_id . id )    @ api . onchange ( <str> ) def uos_qty_onchange ( self ) :          t_uom = self . env [ <str> ] if self . env . context . get ( <str> ) :              self . env . context = self . with_context ( skip_uos_qty_onchange = False ) . env . context  else :              if self . product_uom_id :                  self . env . context = self . with_context ( skip_quantity_onchange = True ) . env . context self . quantity = t_uom . _compute_qty ( self . uos_id . id , self . uos_qty , self . product_uom_id . id )    @ api . multi def write ( self , vals ) :          res = super ( StockTransferDetailsItems , self ) . write ( vals ) if vals . get ( <str> ) :              self . quantity_onchange ( )  return res    