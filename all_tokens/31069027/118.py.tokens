from openerp import models , fields , api from openerp . tools . translate import _ from expense_type import COMPUTE_TYPES from expense_type import RATIO_COMPUTE_TYPES class ExpenseStructure ( models . Model ) :      _name = <str> name = fields . Char ( <str> , required = True ) element_ids = fields . One2many ( <str> , <str> , string = <str> , copy = True ) company_id = fields . Many2one ( <str> , <str> , required = True , default = lambda self : self . env [ <str> ] . _company_default_get ( <str> ) ) @ api . one def copy ( self , default = None ) :          default = dict ( default or { } ) default [ <str> ] = _ ( <str> ) % self . name res = super ( ExpenseStructure , self ) . copy ( default ) old_new_ids = dict ( zip ( [ x . id for x in self . element_ids ] , [ x . id for x in res . element_ids ] ) ) for element_id in res . element_ids . filtered ( lambda r : r . parent_id ) :              element_id . parent_id = old_new_ids . get ( element_id . parent_id . id , False )  return res   class ExpenseStructureElements ( models . Model ) :      _name = <str> _rec_name = <str> _order = <str> name = fields . Char ( <str> ) structure_id = fields . Many2one ( <str> , <str> , ondelete = <str> ) sequence = fields . Integer ( <str> , require = True ) expense_type_id = fields . Many2one ( <str> , <str> , required = True ) compute_type = fields . Selection ( COMPUTE_TYPES , <str> , readonly = True , related = <str> ) ratio = fields . Float ( <str> ) var_ratio = fields . Float ( <str> ) parent_id = fields . Many2one ( <str> , <str> ) ratio_compute_type = fields . Selection ( RATIO_COMPUTE_TYPES , <str> , readonly = True , related = <str> ) @ api . onchange ( <str> ) def onchange_expense_type_id ( self ) :          self . name = self . expense_type_id . name    