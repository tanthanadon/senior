from datetime import datetime , timedelta from openerp import fields from openerp . exceptions import ValidationError from openerp . tests . common import TransactionCase from openerp . tools . misc import mute_logger class TestHrAttendance ( TransactionCase ) :      def setUp ( self ) :          super ( TestHrAttendance , self ) . setUp ( ) self . employee_model = self . env [ <str> ] . with_context ( action_date = fields . Datetime . to_string ( datetime . now ( ) ) ) self . test_employee = self . employee_model . create ( { <str> : <str> , <str> : <str> , <str> : <str> , } ) self . rfid_card_code = <str>  def test_valid_employee ( self ) :          res = self . employee_model . register_attendance ( self . rfid_card_code ) self . assertTrue ( <str> in res and res [ <str> ] == <str> ) self . assertTrue ( <str> in res and res [ <str> ] ) self . assertTrue ( <str> in res and res [ <str> ] == self . rfid_card_code ) res = self . employee_model . with_context ( action_date = fields . Datetime . to_string ( datetime . now ( ) + timedelta ( hours = 8 ) ) , ) . register_attendance ( self . rfid_card_code ) self . assertTrue ( <str> in res and res [ <str> ] == <str> ) self . assertTrue ( <str> in res and res [ <str> ] )  @ mute_logger ( <str> ) def test_exception_code ( self ) :          self . env [ <str> ] . create ( { <str> : self . test_employee . id , <str> : <str> , } ) self . test_employee . update ( { <str> : <str> } ) try :              res = self . employee_model . register_attendance ( self . rfid_card_code )  except ValidationError :              self . assertNotEquals ( res [ <str> ] , <str> )   def test_invalid_code ( self ) :          invalid_code = <str> res = self . employee_model . register_attendance ( invalid_code ) self . assertTrue ( <str> in res and res [ <str> ] == <str> ) self . assertTrue ( <str> in res and not res [ <str> ] ) self . assertTrue ( <str> in res and res [ <str> ] == invalid_code )    