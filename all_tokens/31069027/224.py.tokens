from openerp import models , fields , SUPERUSER_ID from openerp . addons . decimal_precision import decimal_precision as dp class StockMove ( models . Model ) :      _inherit = <str> def get_price_from_cost_structure ( self , cr , uid , ids , context = None ) :          if context is None :              context = { }  for move in self . browse ( cr , uid , ids , context = context ) :              if move . production_id and move . product_id . cost_structure_id :                  c = context . copy ( ) c [ <str> ] = True c [ <str> ] = move . product_id . id pcl_pool = self . pool . get ( <str> ) cost = pcl_pool . get_product_costs ( cr , uid , move . product_id , c ) price = cost . get ( <str> , False ) if price :                      self . write ( cr , uid , [ move . id ] , { <str> : price } , context = context )     def update_product_price ( self , cr , uid , ids , context = None ) :          product_obj = self . pool . get ( <str> ) tmpl_dict = { } for move in self . browse ( cr , uid , ids , context = context ) :              if ( move . location_id . usage in ( <str> , <str> ) ) and ( move . product_id . cost_method == <str> ) :                  product = move . product_id prod_tmpl_id = move . product_id . product_tmpl_id . id qty_available = move . product_id . product_tmpl_id . qty_available qty_available -= move . product_uom_qty if qty_available <= 0 :                      qty_available = 0.0  if tmpl_dict . get ( prod_tmpl_id ) :                      product_avail = qty_available + tmpl_dict [ prod_tmpl_id ]  else :                      tmpl_dict [ prod_tmpl_id ] = 0 product_avail = qty_available  if product_avail <= 0 :                      new_std_price = move . price_unit  else :                      amount_unit = product . standard_price new_std_price = ( ( amount_unit * product_avail ) + ( move . price_unit * move . product_qty ) ) / ( product_avail + move . product_qty )  tmpl_dict [ prod_tmpl_id ] += move . product_qty ctx = dict ( context or { } , force_company = move . company_id . id ) product_obj . write ( cr , SUPERUSER_ID , [ product . id ] , { <str> : new_std_price } , context = ctx )     class StockQuant ( models . Model ) :      _inherit = <str> cost = fields . Float ( <str> , digits = dp . get_precision ( <str> ) )   