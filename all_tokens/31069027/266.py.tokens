from openerp . osv import orm , fields import time from openerp . tools import DEFAULT_SERVER_DATETIME_FORMAT STATES = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] class product_stock_unsafety ( orm . Model ) :      _name = <str> _description = <str> _columns = { <str> : fields . many2one ( <str> , <str> , required = True ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . float ( <str> , readonly = True ) , <str> : fields . float ( <str> , readonly = True ) , <str> : fields . float ( <str> , readonly = True ) , <str> : fields . float ( <str> , readonly = True ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . float ( <str> ) , <str> : fields . date ( <str> ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . selection ( STATES , <str> , readonly = True ) , <str> : fields . date ( <str> ) , <str> : fields . char ( <str> , size = 64 ) , <str> : fields . related ( <str> , <str> , type = <str> , string = <str> ) , <str> : fields . float ( <str> ) , <str> : fields . many2one ( <str> , <str> ) } _defaults = { <str> : fields . date . context_today } def cancel ( self , cr , uid , ids , context = None ) :          if context is None :              context = { }  self . write ( cr , uid , ids , { <str> : <str> } ) return True  def write_purchase_id ( self , cr , uid , ids , purchase_line_id = False , product_id = False , context = None ) :          if context is None :              context = { }  mins = [ ] undermin = self . pool . get ( <str> ) purl = self . pool . get ( <str> ) if product_id and purchase_line_id :              mins = undermin . search ( cr , uid , [ ( <str> , <str> , product_id ) , ( <str> , <str> , <str> ) , ( <str> , <str> , False ) ] ) if mins :                  purline = purl . browse ( cr , uid , purchase_line_id ) undermin . write ( cr , uid , mins [ 0 ] , { <str> : purchase_line_id , <str> : purline . product_qty } )   return { }  def create_or_write ( self , cr , uid , vals , context = None ) :          if context is None :              context = { }  ids = self . search ( cr , uid , [ ( <str> , <str> , vals [ <str> ] ) , ( <str> , <str> , vals [ <str> ] ) , ( <str> , <str> , vals [ <str> ] ) ] , context = context ) if vals [ <str> ] == <str> :              ids += self . search ( cr , uid , [ ( <str> , <str> , <str> ) , ( <str> , <str> , vals [ <str> ] ) , ( <str> , <str> , False ) ] , context = context )  if ids :              self . write ( cr , uid , ids , vals , context = context )  else :              self . create ( cr , uid , vals , context = context )     