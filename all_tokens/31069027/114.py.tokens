from openerp . tests . common import TransactionCase import time class TestExpenseStructure ( TransactionCase ) :      def setUp ( self ) :          super ( TestExpenseStructure , self ) . setUp ( ) self . rpm = self . env [ <str> ] self . eem = self . env [ <str> ] self . etm = self . env [ <str> ] self . aac = self . env [ <str> ] self . aaj = self . env [ <str> ] self . at = self . env [ <str> ] self . ac = self . env [ <str> ] self . aal = self . env [ <str> ] self . journal1 = self . env . ref ( <str> ) self . type1 = self . env . ref ( <str> ) self . type2 = self . env . ref ( <str> ) self . structure1 = self . env . ref ( <str> ) self . partner1 = self . env . ref ( <str> ) self . analytic_account1 = self . env . ref ( <str> ) self . journal1 = self . env . ref ( <str> ) self . account_type1 = self . env . ref ( <str> ) self . account1 = self . env . ref ( <str> ) self . analytic_line1 = self . env . ref ( <str> ) ctx = { <str> : self . partner1 . id , <str> : [ self . partner1 . id ] , <str> : <str> } self . wzd = self . env [ <str> ] . with_context ( ctx ) . create ( { } )  def test_onchange_sructure_id ( self ) :          element = self . structure1 . element_ids [ 0 ] self . assertEquals ( element . name , <str> ) element . onchange_expense_type_id ( ) self . assertEquals ( element . name , element . expense_type_id . name )  def test_default_get ( self ) :          year = str ( time . strftime ( <str> ) ) date_start = year + <str> + <str> + <str> + <str> date_end = year + <str> + <str> + <str> + <str> ctx = { <str> : self . partner1 . id , <str> : <str> } wzd = self . env [ <str> ] . with_context ( ctx ) . create ( { } ) self . assertEquals ( wzd . start_date , date_start ) self . assertEquals ( wzd . end_date , date_end ) self . assertEquals ( wzd . company_id . id , self . structure1 . company_id . id )  def test_action_show_print_expense ( self ) :          res = self . wzd . action_show_expense ( ) self . assertEquals ( res . get ( <str> , <str> ) , <str> ) res = self . wzd . action_print_expense ( ) self . assertEquals ( res . get ( <str> , <str> ) , <str> )  def test_get_expense_lines ( self ) :          year = str ( time . strftime ( <str> ) ) date_start = year + <str> + <str> + <str> + <str> date_end = year + <str> + <str> + <str> + <str> ctx = { <str> : date_start , <str> : date_end , <str> : 1 } self . env [ <str> ] . create ( { <str> : self . analytic_account1 . id , <str> : self . partner1 . id } ) t_el = self . env [ <str> ] . with_context ( ctx ) line_ids = t_el . get_expense_lines ( self . structure1 , self . partner1 ) num_line = 0 for line_id in line_ids :              num_line += 1 line_obj = t_el . browse ( line_id ) self . _check_expense_line_result ( line_obj , num_line )  self . assertTrue ( len ( line_ids ) > 0 )  def _check_expense_line_result ( self , l , num_line ) :          if num_line == 1 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 2 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 3 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 4 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 5 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 6 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 7 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 8 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> ) self . assertEquals ( l . sales , <str> ) self . assertEquals ( l . cost , <str> ) self . assertEquals ( l . margin , <str> ) self . assertEquals ( l . cost_per , <str> ) self . assertEquals ( l . margin_per , <str> )  elif num_line == 9 :              self . assertEquals ( l . name , <str> ) self . assertEquals ( l . compute_type , <str> )  return    