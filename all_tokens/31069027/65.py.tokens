from openerp import models , fields , api from openerp . addons . decimal_precision import decimal_precision as dp class stock_picking ( models . Model ) :      _inherit = <str> amount_untaxed = fields . Float ( compute = <str> , digits = dp . get_precision ( <str> ) , string = <str> , readonly = True , store = True ) amount_tax = fields . Float ( compute = <str> , digits = dp . get_precision ( <str> ) , string = <str> , readonly = True , store = True ) amount_total = fields . Float ( compute = <str> , digits = dp . get_precision ( <str> ) , string = <str> , readonly = True , store = True ) amount_gross = fields . Float ( compute = <str> , digits = dp . get_precision ( <str> ) , string = <str> , readonly = True , store = True ) amount_discounted = fields . Float ( compute = <str> , digits = dp . get_precision ( <str> ) , string = <str> , readonly = True , store = True ) external_note = fields . Text ( <str> ) valued_picking = fields . Boolean ( string = <str> , help = <str> <str> ) @ api . multi @ api . depends ( <str> , <str> ) def _amount_all ( self ) :          for picking in self :              taxes = amount_gross = amount_untaxed = 0.0 cur = picking . partner_id . property_product_pricelist and picking . partner_id . property_product_pricelist . currency_id or False for line in picking . move_lines :                  price_unit = 0.0 order_line = False if line . procurement_id . sale_line_id and line . state != <str> :                      order_line = line . procurement_id . sale_line_id taxes_obj = order_line . tax_id  elif line . purchase_line_id and line . state != <str> :                      order_line = line . purchase_line_id taxes_obj = order_line . taxes_id  else :                      continue  price_unit = order_line . price_unit * ( 1 - ( order_line . discount or 0.0 ) / 100.0 ) for c in taxes_obj . compute_all ( price_unit , line . product_uom_qty , line . product_id , order_line . order_id . partner_id ) [ <str> ] :                      taxes += c . get ( <str> , 0.0 )  amount_gross += ( order_line . price_unit * line . product_uom_qty ) amount_untaxed += price_unit * line . product_uom_qty  if cur :                  picking . amount_tax = cur . round ( taxes ) picking . amount_untaxed = cur . round ( amount_untaxed ) picking . amount_gross = cur . round ( amount_gross )  else :                  picking . amount_tax = round ( taxes , 2 ) picking . amount_untaxed = round ( amount_untaxed , 2 ) picking . amount_gross = round ( amount_gross , 2 )  picking . amount_total = picking . amount_untaxed + picking . amount_tax picking . amount_discounted = picking . amount_gross - picking . amount_untaxed    class stock_move ( models . Model ) :      _inherit = <str> price_subtotal = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True ) order_price_unit = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True ) cost_subtotal = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True ) margin = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True ) percent_margin = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True , store = True ) @ api . multi @ api . depends ( <str> , <str> , <str> ) def _get_subtotal ( self ) :          for move in self :              price_unit = 0.0 if move . procurement_id . sale_line_id :                  price_unit = ( move . procurement_id . sale_line_id . price_unit * ( 1 - ( move . procurement_id . sale_line_id . discount or 0.0 ) / 100.0 ) )  elif move . purchase_line_id :                  price_unit = ( move . purchase_line_id . price_unit * ( 1 - ( move . purchase_line_id . discount or 0.0 ) / 100.0 ) )  else :                  continue  cost_price = self . env [ <str> ] . get_history_price ( move . product_id . product_tmpl_id . id , move . company_id . id , date = move . date ) cost_price = cost_price or move . with_context ( force_company = move . company_id . id ) . product_id . standard_price move . price_subtotal = price_unit * move . product_uom_qty move . order_price_unit = price_unit move . cost_subtotal = cost_price * move . product_uom_qty move . margin = move . price_subtotal - move . cost_subtotal if move . price_subtotal > 0 :                  move . percent_margin = ( move . margin / move . price_subtotal ) * 100  else :                  move . percent_margin = 0     class StockPackOperation ( models . Model ) :      _inherit = <str> price_unit = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True ) price_subtotal = fields . Float ( compute = <str> , string = <str> , digits = dp . get_precision ( <str> ) , readonly = True ) @ api . multi def _get_subtotal ( self ) :          for operation in self :              subtotal = 0.0 for link in operation . linked_move_operation_ids :                  move_id = link . move_id subtotal += move_id . price_subtotal * link . qty / move_id . product_uom_qty  if operation . linked_move_operation_ids :                  operation . price_unit = subtotal / operation . product_qty operation . price_subtotal = subtotal      