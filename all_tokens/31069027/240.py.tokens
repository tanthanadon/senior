from openerp import models , fields , api , exceptions , _ from datetime import datetime , timedelta from dateutil . relativedelta import relativedelta class HrAttendanceReport ( models . AbstractModel ) :      _name = <str> @ api . multi def render_html ( self , data = None ) :          report_obj = self . env [ <str> ] report = report_obj . _get_report_from_name ( <str> ) docs = [ ] employee_attendance = { } totals = { } for employee in self . env [ report . model ] . browse ( data [ <str> ] ) :              employee_attendance [ employee . id ] = [ ] docs . append ( employee ) from_date_s = data . get ( <str> , { } ) . get ( <str> , <str> ) to_date_s = data . get ( <str> , { } ) . get ( <str> , <str> ) from_date = datetime . strptime ( from_date_s , <str> ) . date ( ) to_date = datetime . strptime ( to_date_s , <str> ) . date ( ) while from_date <= to_date :                  from_date_1 = datetime . strftime ( from_date , <str> ) from_date_datetime = datetime . strptime ( from_date_1 , <str> ) from_date_2 = datetime . strftime ( from_date , <str> ) attendances = self . env [ <str> ] . search ( [ ( <str> , <str> , employee . id ) , ( <str> , <str> , from_date_1 ) , ( <str> , <str> , from_date_2 ) ] , order = <str> ) day_attendances = { <str> : 0 , <str> : 0 , <str> : <str> , <str> : from_date_1 [ 8 : 10 ] } used_ids = [ ] while len ( attendances ) - len ( used_ids ) >= 2 :                      in_attr = attendances . filtered ( lambda r : r . id not in used_ids and r . action == <str> ) [ 0 ] out_attr = attendances . filtered ( lambda r : r . id not in used_ids and r . action == <str> ) [ 0 ] in_time = fields . Datetime . context_timestamp ( self , datetime . strptime ( in_attr . name , <str> ) ) out_time = fields . Datetime . context_timestamp ( self , datetime . strptime ( out_attr . name , <str> ) ) day_attendances [ <str> ] += out_attr . worked_hours fields . Datetime . context_timestamp ( self , datetime . strptime ( attendances [ 0 ] . name , <str> ) ) day_attendances [ <str> ] += <str> % ( in_time . hour , in_time . minute , out_time . hour , out_time . minute ) used_ids . append ( in_attr . id ) used_ids . append ( out_attr . id )  if employee . calendar_id :                      max_hours = employee . calendar_id . get_working_hours_of_date ( from_date_datetime , compute_leaves = True , resource_id = employee . resource_id . id ) [ 0 ] extra_hours = day_attendances [ <str> ] - max_hours if day_attendances [ <str> ] > max_hours :                          day_attendances [ <str> ] = max_hours  day_attendances [ <str> ] += extra_hours  if day_attendances [ <str> ] :                      day_attendances [ <str> ] = day_attendances [ <str> ] [ : - 3 ]  if day_attendances [ <str> ] or day_attendances [ <str> ] :                      employee_attendance [ employee . id ] . append ( day_attendances )  from_date += relativedelta ( days = 1 )  totals [ employee . id ] = { <str> : sum ( x [ <str> ] for x in employee_attendance [ employee . id ] ) , <str> : sum ( x [ <str> ] for x in employee_attendance [ employee . id ] ) , <str> : 0 , <str> : sum ( x [ <str> ] for x in employee_attendance [ employee . id ] ) , }  docargs = { <str> : data [ <str> ] , <str> : report . model , <str> : docs , <str> : employee_attendance , <str> : data , <str> : totals } return report_obj . render ( <str> , docargs )    