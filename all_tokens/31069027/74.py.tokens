from openerp import models , fields , api , exceptions , _ import openerp . addons . decimal_precision as dp class sale_order ( models . Model ) :      _inherit = <str> early_payment_discount = fields . Float ( <str> , digits = ( 16 , 2 ) , help = <str> ) early_payment_disc_total = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) , compute = <str> ) early_payment_disc_untaxed = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) , compute = <str> ) early_payment_disc_tax = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) , compute = <str> ) total_early_discount = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) , compute = <str> ) @ api . one @ api . depends ( <str> , <str> , <str> , <str> , <str> , <str> ) def _amount_all2 ( self ) :          if not self . early_payment_discount :              self . early_payment_disc_total = self . amount_total self . early_payment_disc_tax = self . amount_tax self . early_payment_disc_untaxed = self . amount_untaxed  else :              cur = self . pricelist_id . currency_id val = val1 = 0 for line in self . order_line :                  if line . product_id and line . product_id . without_early_payment :                      val1 += line . price_subtotal val += self . _amount_line_tax ( line )  else :                      val1 += line . price_subtotal * ( 1.0 - ( float ( self . early_payment_discount or 0.0 ) ) / 100.0 ) val += self . _amount_line_tax ( line ) * ( 1.0 - ( float ( self . early_payment_discount or 0.0 ) ) / 100.0 )   self . early_payment_disc_tax = cur . round ( val ) self . early_payment_disc_untaxed = cur . round ( val1 ) self . early_payment_disc_total = cur . round ( val + val1 ) self . total_early_discount = self . early_payment_disc_untaxed - self . amount_untaxed   def onchange_partner_id2 ( self , cr , uid , ids , part , early_payment_discount = False , payment_term = False , context = None ) :          res = self . onchange_partner_id ( cr , uid , ids , part , context ) if not part :              res [ <str> ] [ <str> ] = False return res  partner = self . pool . get ( <str> ) . browse ( cr , uid , part , context ) com_part_id = partner . commercial_partner_id . id early_discs = [ ] if not early_payment_discount and res . get ( <str> , False ) :              if not payment_term :                  early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , ( <str> , <str> , False ) ] , context = context ) if early_discs :                      res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount   if res [ <str> ] . get ( <str> , False ) :                  payment_term = res [ <str> ] [ <str> ]  if payment_term or not early_discs :                  early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , ( <str> , <str> , payment_term ) ] , context = context ) if early_discs :                      res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount  else :                      early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , False ) , ( <str> , <str> , payment_term ) ] , context = context ) if early_discs :                          res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount     return res  def onchange_payment_term ( self , cr , uid , ids , payment_term , part = False ) :          res = { } if not payment_term :              res [ <str> ] = False return { <str> : res }  partner = self . pool . get ( <str> ) . browse ( cr , uid , part ) com_part_id = partner . commercial_partner_id . id early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , ( <str> , <str> , payment_term ) ] ) if early_discs :              res [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] ) . early_payment_discount  else :              early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , False ) , ( <str> , <str> , payment_term ) ] ) if early_discs :                  res [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] ) . early_payment_discount   return { <str> : res }  @ api . multi def action_invoice_create ( self , grouped = False , states = [ <str> , <str> , <str> ] , date_invoice = False ) :          invoice_id = super ( sale_order , self ) . action_invoice_create ( grouped = grouped , states = states , date_invoice = date_invoice ) invoice = self . env [ <str> ] . browse ( invoice_id ) current_sale = self and self [ 0 ] or False if current_sale . early_payment_discount :              invoice . write ( { <str> : current_sale . early_payment_discount } )  return invoice_id    