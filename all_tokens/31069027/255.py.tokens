from openerp import fields , models , api , _ import logging _logger = logging . getLogger ( __name__ ) class account_move_book_renumber ( models . TransientModel ) :      _name = <str> _description = <str> company_id = fields . Many2one ( <str> , <str> , required = True , default = lambda self : self . env . user . company_id ) numbering_order = fields . Selection ( [ ( <str> , <str> ) , ( <str> , <str> ) , ] , <str> , required = True , default = <str> ) sequence_id = fields . Many2one ( <str> , <str> , domain = <str> <str> , context = { <str> : <str> } , help = <str> , required = True , ) journal_ids = fields . Many2many ( <str> , <str> , <str> , <str> , required = True , domain = <str> , help = <str> , string = <str> ) period_ids = fields . Many2many ( <str> , <str> , <str> , <str> , required = True , help = <str> , domain = <str> , string = <str> , ondelete = <str> ) number_next = fields . Integer ( related = <str> , readonly = True , ) state = fields . Selection ( [ ( <str> , <str> ) , ( <str> , <str> ) ] , readonly = True , default = <str> , ) @ api . onchange ( <str> ) def onchange_company ( self ) :          self . journal_ids = self . journal_ids . search ( [ ( <str> , <str> , self . company_id . id ) ] ) self . period_ids = self . period_ids . search ( [ ( <str> , <str> , self . company_id . id ) ] ) . filtered ( lambda x : x . state == <str> ) sequence = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , self . company_id . id ) , ] , limit = 1 ) if not sequence :              sequence = sequence . search ( [ ( <str> , <str> , <str> ) , ( <str> , <str> , False ) ] , limit = 1 )  self . sequence_id = sequence  @ api . multi def renumber ( self ) :          self . ensure_one ( ) _logger . debug ( <str> ) moves = self . env [ <str> ] . search ( [ ( <str> , <str> , self . journal_ids . ids ) , ( <str> , <str> , self . period_ids . ids ) , ( <str> , <str> , <str> ) ] , order = <str> ) if self . numbering_order == <str> :              moves . moves_renumber ( self . sequence_id )  else :              for period in self . period_ids :                  self . env [ <str> ] . search ( [ ( <str> , <str> , self . journal_ids . ids ) , ( <str> , <str> , period . id ) , ( <str> , <str> , <str> ) ] , order = <str> ) . moves_renumber ( self . sequence_id )   view_id = self . env [ <str> ] . xmlid_to_res_id ( <str> ) context = self . _context . copy ( ) context [ <str> ] = 1 res = { <str> : <str> , <str> : _ ( <str> ) , <str> : <str> , <str> : ( <str> % ( moves . ids ) ) , <str> : <str> , <str> : <str> , <str> : view_id , <str> : context , <str> : <str> , } return res    