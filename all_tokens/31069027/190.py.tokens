from openerp import models , fields , api , exceptions , _ class ComputeRappelInvoice ( models . TransientModel ) :      _name = <str> journal_id = fields . Many2one ( <str> , <str> , required = True , domain = [ ( <str> , <str> , <str> ) ] ) invoice_date = fields . Date ( <str> ) group_by_partner = fields . Boolean ( <str> ) @ api . multi def action_invoice ( self ) :          invoices = [ ] compute_rappel_obj = self . env [ <str> ] invoice_obj = self . env [ <str> ] invoice_line_obj = self . env [ <str> ] partner_group = { } for rappel in compute_rappel_obj . browse ( self . env . context [ <str> ] ) :              if rappel . quantity <= 0 :                  continue  if rappel . invoice_id :                  raise exceptions . Warning ( _ ( <str> <str> ) % ( rappel . rappel_id . name , rappel . partner_id . name , rappel . date_start , rappel . date_end ) )  else :                  if self [ 0 ] . group_by_partner and partner_group . get ( rappel . partner_id . id ) :                      invoice = partner_group [ rappel . partner_id . id ]  else :                      fpos = rappel . partner_id . property_account_position invoice_vals = { <str> : rappel . partner_id . id , <str> : self [ 0 ] . invoice_date or False , <str> : self [ 0 ] . journal_id . id , <str> : rappel . partner_id . property_account_receivable . id , <str> : <str> , <str> : fpos and fpos . id or False } invoice = invoice_obj . create ( invoice_vals ) invoices . append ( invoice . id ) if self [ 0 ] . group_by_partner :                          partner_group [ rappel . partner_id . id ] = invoice   rappel . invoice_id = invoice . id rappel_product = rappel . rappel_id . type_id . product_id account_id = rappel_product . property_account_income if not account_id :                      account_id = rappel_product . categ_id . property_account_income_categ  taxes_ids = rappel_product . taxes_id fpos = rappel . partner_id . property_account_position or False if fpos :                      account_id = fpos . map_account ( account_id ) taxes_ids = fpos . map_tax ( taxes_ids )  tax_ids = [ ( 6 , 0 , [ x . id for x in taxes_ids ] ) ] invoice_line_obj . create ( { <str> : rappel_product . id , <str> : <str> % ( rappel . rappel_id . name , rappel . date_start , rappel . date_end ) , <str> : invoice . id , <str> : account_id . id , <str> : tax_ids , <str> : rappel . quantity , <str> : 1 } )   if not invoices :              raise exceptions . Warning ( _ ( <str> ) )  action = self . env . ref ( <str> ) if action :              action = action . read ( [ ] ) [ 0 ] action [ <str> ] = str ( [ ( <str> , <str> , invoices ) ] ) return action  return True    