from openerp import models , fields , api , _ import openerp . addons . decimal_precision as dp class AccountInvoiceLine ( models . Model ) :      _inherit = <str> global_discount = fields . Boolean ( <str> )  class AccountInvoice ( models . Model ) :      _description = <str> _inherit = <str> gd_id = fields . Many2one ( <str> , <str> ) discount_rate = fields . Float ( <str> , related = <str> , readonly = True ) amount_subtotal = fields . Float ( string = <str> , compute = <str> , multi = <str> , store = True , digits_compute = dp . get_precision ( <str> ) ) amount_discount = fields . Float ( string = <str> , compute = <str> , multi = <str> , store = True , digits_compute = dp . get_precision ( <str> ) ) @ api . one @ api . depends ( <str> , <str> , <str> ) def _compute_amount_no_discount ( self ) :          discount_lines = self . invoice_line . filtered ( <str> ) self . amount_discount = abs ( sum ( discount_lines . mapped ( <str> ) ) ) self . amount_subtotal = self . amount_untaxed + self . amount_discount return  @ api . multi def write ( self , vals ) :          res = super ( AccountInvoice , self ) . write ( vals ) if <str> in vals or <str> in vals :              for invoice in self :                  if invoice . state == <str> :                      discount_lines = invoice . invoice_line . filtered ( <str> ) discount_lines . unlink ( ) self . _create_global_discount_lines ( invoice )    return res  @ api . model def create ( self , vals ) :          invoice = super ( AccountInvoice , self ) . create ( vals ) if <str> in vals or <str> in vals :              self . _create_global_discount_lines ( invoice ) invoice . button_reset_taxes ( )  return invoice  @ api . multi def _create_global_discount_lines ( self , invoice ) :          lines_by_tax = { } taxes_in_lines = invoice . invoice_line . mapped ( <str> ) dis = invoice . discount_rate if not dis :              return  for tax in taxes_in_lines :              if tax not in lines_by_tax :                  lines_by_tax [ tax ] = 0.0  lines = invoice . invoice_line . filtered ( lambda r : tax in r . invoice_line_tax_id ) lines_by_tax [ tax ] = sum ( [ l . price_subtotal for l in lines ] )  no_tax_lines = invoice . invoice_line . filtered ( lambda r : not r . invoice_line_tax_id ) if no_tax_lines :              lines_by_tax [ False ] = sum ( [ l . price_subtotal for l in no_tax_lines ] )  for tax in lines_by_tax :              price_discounted = lines_by_tax [ tax ] * ( dis / 100.0 ) vals = { <str> : invoice . id , <str> : _ ( <str> ) % tax . name if tax else _ ( <str> ) , <str> : 1 , <str> : - ( price_discounted ) , <str> : [ ( 6 , 0 , [ tax . id ] ) ] if tax else False , <str> : True , <str> : invoice . invoice_line [ 0 ] . account_id . id } self . env [ <str> ] . create ( vals )  return    