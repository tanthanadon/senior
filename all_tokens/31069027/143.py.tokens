from openerp import models , fields , api import openerp . addons . decimal_precision as dp class SaleOrder ( models . Model ) :      _inherit = <str> gd_id = fields . Many2one ( <str> , <str> ) discount_rate = fields . Float ( <str> , related = <str> , readonly = True ) amount_untaxed = fields . Float ( string = <str> , compute = <str> , multi = <str> , track_visibility = <str> , store = True , digits_compute = dp . get_precision ( <str> ) , help = <str> ) amount_tax = fields . Float ( string = <str> , compute = <str> , multi = <str> , track_visibility = <str> , store = True , digits_compute = dp . get_precision ( <str> ) , help = <str> ) amount_total = fields . Float ( string = <str> , compute = <str> , multi = <str> , track_visibility = <str> , store = True , digits_compute = dp . get_precision ( <str> ) , help = <str> ) amount_subtotal = fields . Float ( string = <str> , compute = <str> , multi = <str> , store = True , digits_compute = dp . get_precision ( <str> ) ) amount_discount = fields . Float ( string = <str> , compute = <str> , multi = <str> , store = True , digits_compute = dp . get_precision ( <str> ) ) @ api . depends ( <str> , <str> ) def _amount_all ( self ) :          for order in self :              cur = order . pricelist_id . currency_id amount_untaxed = amount_tax = 0.0 amount_subtotal = amount_discount = 0.0 for line in order . order_line :                  amount_subtotal += line . price_subtotal amount_tax += order . _amount_line_tax ( line )  if order . gd_id :                  amount_tax = amount_tax * ( 1 - order . discount_rate / 100 )  amount_untaxed = amount_subtotal - amount_discount if order . gd_id :                  amount_discount = amount_subtotal * order . discount_rate / 100  amount_untaxed = amount_subtotal - amount_discount amount_total = amount_untaxed + amount_tax order . update ( { <str> : cur . round ( amount_untaxed ) , <str> : cur . round ( amount_tax ) , <str> : cur . round ( amount_total ) , <str> : cur . round ( amount_subtotal ) , <str> : cur . round ( amount_discount ) , } )   @ api . model def _prepare_invoice ( self , order , lines ) :          res = super ( SaleOrder , self ) . _prepare_invoice ( order , lines ) if order . gd_id :              res [ <str> ] = order . gd_id . id  return res  @ api . multi def onchange_partner_id ( self , part ) :          res = super ( SaleOrder , self ) . onchange_partner_id ( part ) partner = self . env [ <str> ] . browse ( part ) if partner . gd_id :              res [ <str> ] [ <str> ] = partner . gd_id . id  return res    