from openerp import models , _ , api , exceptions , fields class MovesToPick ( models . TransientModel ) :      _name = <str> name = fields . Char ( <str> ) @ api . model def view_init ( self , fields_list ) :          res = super ( MovesToPick , self ) . view_init ( fields_list ) id_address = False id_warehouse = False move_ids = self . env . context . get ( <str> , [ ] ) if not move_ids or not self . env . context . get ( <str> ) == <str> :              return res  for m in self . env [ <str> ] . browse ( move_ids ) :              if not id_address :                  id_address = m . partner_id . id  if not id_warehouse :                  id_warehouse = m . warehouse_id . id  if m . partner_id . id != id_address :                  raise exceptions . Warning ( _ ( <str> ) )  if m . warehouse_id . id != id_warehouse :                  raise exceptions . Warning ( _ ( <str> ) )   return res  @ api . multi def to_pick ( self ) :          if self . env . context . get ( <str> , [ ] ) :              move_ids = self . env . context [ <str> ] moves = self . env [ <str> ] . browse ( move_ids ) origins = [ x . procurement_id . sale_line_id . order_id . name for x in moves ] origins = list ( set ( origins ) ) values = { <str> : moves [ 0 ] . partner_id . id , <str> : <str> , <str> : moves [ 0 ] . picking_type_id . id , <str> : <str> . join ( origins ) , <str> : [ ( 6 , 0 , [ x . id for x in moves ] ) ] } picking = self . env [ <str> ] . create ( values ) picking . action_confirm ( ) action = self . env . ref ( <str> ) result = action . read ( ) [ 0 ] view = self . env . ref ( <str> ) result [ <str> ] = [ ( view . id , <str> ) ] result [ <str> ] = picking . id return result     