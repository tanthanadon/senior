from openerp import api , fields , models from openerp . tools . translate import _ class AccountJournalEntriesReport ( models . TransientModel ) :      _name = <str> _description = <str> company_id = fields . Many2one ( <str> , default = lambda self : self . env . user . company_id , required = True , ) fiscalyear_id = fields . Many2one ( <str> , <str> , required = True , ondelete = <str> , domain = <str> , ) journal_ids = fields . Many2many ( <str> , <str> , <str> , <str> , <str> , required = True , ondelete = <str> , ) period_ids = fields . Many2many ( <str> , <str> , <str> , <str> , <str> ) sort_selection = fields . Selection ( [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , <str> , required = True , default = <str> , ) landscape = fields . Boolean ( <str> , default = True , ) @ api . onchange ( <str> ) def change_fiscalyear ( self ) :          self . period_ids = self . period_ids . search ( [ ( <str> , <str> , self . fiscalyear_id . id ) ] )  @ api . onchange ( <str> ) def change_company ( self ) :          domain = [ ( <str> , <str> , self . company_id . id ) ] self . fiscalyear_id = self . fiscalyear_id . with_context ( company_id = self . company_id . id ) . find ( ) self . journal_ids = self . journal_ids . search ( domain )  @ api . multi def _check_data ( self ) :          self . ensure_one ( ) if not self . period_ids and not self . journal_ids :              return False  for journal in self . journal_ids :              for period in self . period_ids :                  journal_periods = self . env [ <str> ] . search ( [ ( <str> , <str> , journal . id ) , ( <str> , <str> , period . id ) ] ) if journal_periods :                      return True    return False  @ api . multi def _check ( self ) :          self . ensure_one ( ) return <str> if self . landscape else <str>  @ api . multi def print_report ( self ) :          self . ensure_one ( ) data = self . read ( ) [ 0 ] datas = { <str> : self . _context . get ( <str> , [ ] ) , <str> : <str> , <str> : data , } if not self . _check_data ( ) :              raise Warning ( _ ( <str> <str> ) )  if self . _check ( ) == <str> :              report_name = <str>  else :              report_name = <str>  return { <str> : <str> , <str> : report_name , <str> : datas , <str> : self . _context , }    