from openerp . osv import orm , fields from openerp import _ , netsvc import openerp . addons . decimal_precision as dp class account_account ( orm . Model ) :      _inherit = <str> def __compute ( self , cr , uid , ids , field_names , arg = None , context = None , query = <str> , query_params = ( ) ) :          mapping = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } children_and_consolidated = self . _get_children_and_consol ( cr , uid , ids , context = context ) accounts = { } res = { } null_result = dict ( ( fn , 0.0 ) for fn in field_names ) if children_and_consolidated :              aml_query = self . pool . get ( <str> ) . _query_get ( cr , uid , context = context ) wheres = [ <str> ] if query . strip ( ) :                  wheres . append ( query . strip ( ) )  if aml_query . strip ( ) :                  wheres . append ( aml_query . strip ( ) )  filters = <str> . join ( wheres ) if context . get ( <str> , False ) :                  request = ( <str> + <str> . join ( mapping . values ( ) ) + <str> <str> <str> <str> <str> + filters + <str> ) business_line_ids = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , context [ <str> ] ) ] ) params = ( tuple ( children_and_consolidated ) , tuple ( business_line_ids ) , ) + query_params  else :                  request = ( <str> + <str> . join ( mapping . values ( ) ) + <str> <str> + filters + <str> ) params = ( tuple ( children_and_consolidated ) , ) + query_params  cr . execute ( request , params ) for row in cr . dictfetchall ( ) :                  accounts [ row [ <str> ] ] = row  children_and_consolidated . reverse ( ) brs = list ( self . browse ( cr , uid , children_and_consolidated , context = context ) ) sums = { } currency_obj = self . pool . get ( <str> ) while brs :                  current = brs . pop ( 0 ) for fn in field_names :                      sums . setdefault ( current . id , { } ) [ fn ] = accounts . get ( current . id , { } ) . get ( fn , 0.0 ) for child in current . child_id :                          if child . company_id . currency_id . id == current . company_id . currency_id . id :                              sums [ current . id ] [ fn ] += sums [ child . id ] [ fn ]  else :                              sums [ current . id ] [ fn ] += currency_obj . compute ( cr , uid , child . company_id . currency_id . id , current . company_id . currency_id . id , sums [ child . id ] [ fn ] , context = context )    if current . currency_id and current . exchange_rate and ( <str> in field_names or <str> in field_names ) :                      adj_bal = sums [ current . id ] . get ( <str> , 0.0 ) / current . exchange_rate sums [ current . id ] . update ( { <str> : adj_bal , <str> : adj_bal - sums [ current . id ] . get ( <str> , 0.0 ) } )   for id in ids :                  res [ id ] = sums . get ( id , null_result )   else :              for id in ids :                  res [ id ] = null_result   return res  def _set_credit_debit ( self , cr , uid , account_id , name , value , arg , context = None ) :          if context . get ( <str> , True ) :              return True  account = self . browse ( cr , uid , account_id , context = context ) diff = value - getattr ( account , name ) if not diff :              return True  journal_obj = self . pool . get ( <str> ) jids = journal_obj . search ( cr , uid , [ ( <str> , <str> , <str> ) , ( <str> , <str> , 1 ) , ( <str> , <str> , account . company_id . id ) ] , context = context ) if not jids :              raise orm . except_orm ( _ ( <str> ) , _ ( <str> ) )  period_obj = self . pool . get ( <str> ) pids = period_obj . search ( cr , uid , [ ( <str> , <str> , True ) , ( <str> , <str> , account . company_id . id ) ] , context = context ) if not pids :              raise orm . except_orm ( _ ( <str> ) , _ ( <str> ) )  move_obj = self . pool . get ( <str> ) move_id = move_obj . search ( cr , uid , [ ( <str> , <str> , jids [ 0 ] ) , ( <str> , <str> , pids [ 0 ] ) , ( <str> , <str> , account_id ) , ( name , <str> , 0.0 ) , ( <str> , <str> , _ ( <str> ) ) ] , context = context ) if move_id :              move = move_obj . browse ( cr , uid , move_id [ 0 ] , context = context ) move_obj . write ( cr , uid , move_id [ 0 ] , { name : diff + getattr ( move , name ) } , context = context )  else :              if diff < 0.0 :                  raise orm . except_orm ( _ ( <str> ) , _ ( <str> ) )  nameinv = ( name == <str> and <str> ) or <str> move_id = move_obj . create ( cr , uid , { <str> : _ ( <str> ) , <str> : account_id , <str> : jids [ 0 ] , <str> : pids [ 0 ] , name : diff , nameinv : 0.0 } , context = context )  return True  _columns = { <str> : fields . boolean ( <str> ) , <str> : fields . boolean ( <str> ) , <str> : fields . function ( __compute , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> ) , <str> : fields . function ( __compute , fnct_inv = _set_credit_debit , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> ) , <str> : fields . function ( __compute , fnct_inv = _set_credit_debit , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> ) , <str> : fields . function ( __compute , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> , help = <str> ) , <str> : fields . function ( __compute , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> , help = <str> ) , <str> : fields . function ( __compute , digits_compute = dp . get_precision ( <str> ) , string = <str> , multi = <str> , help = <str> ) , }  class account_move_line ( orm . Model ) :      _inherit = <str> _columns = { <str> : fields . many2one ( <str> , <str> ) } def _check_if_need_business_line ( self , cr , uid , ids , context = None ) :          for line in self . browse ( cr , uid , ids , context = context ) :              if line . account_id . require_business_line and not line . business_line_id :                  return False   return True  _constraints = [ ( _check_if_need_business_line , <str> , [ <str> ] ) , ]   