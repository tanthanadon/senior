from django . dispatch import receiver from django . db . models . signals import post_init , post_save from django . contrib . auth . models import Group , Permission from django . utils . translation import ugettext as _ from djPsych . exceptions import BackendConfigException from djexperiments . models import Experiment from djcollect . models import Participation from djreceive . models import Run from djpay . models import Payment from djsend . models import GenericGlobalSetting from importlib import import_module from django . contrib . contenttypes . models import ContentType @ receiver ( post_init , sender = Experiment ) def loadCustomModels ( sender , instance , ** kwargs ) :      if instance . pk is None :          return  try :          custom_models = import_module ( <str> + instance . label )  except ImportError :          setattr ( instance , <str> , Participation ) return  try :          custom_calculate = custom_models . PARTICIPATION_CALCULATE plot = custom_models . PLOTTING Participation . calculate_payment = custom_calculate Participation . learning_curve = plot  except :          pass  setattr ( instance , <str> , Participation ) if hasattr ( custom_models , <str> ) :          gen_set_mod = custom_models . GEN_SETTINGS_MODEL  else :          gen_set_mod = GenericGlobalSetting  setattr ( instance , <str> , gen_set_mod ) if hasattr ( custom_models , <str> ) :          run_mod = custom_models . RUN_MODEL  else :          run_mod = Run  setattr ( instance , <str> , run_mod ) if hasattr ( custom_models , <str> ) :          pay_mod = custom_models . PAYMENT_MODEL  else :          pay_mod = Payment  setattr ( instance , <str> , pay_mod )   