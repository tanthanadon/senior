from django . db import models from django . utils . translation import ugettext_lazy as l_ from django . contrib . contenttypes . fields import GenericForeignKey , GenericRelation from django . contrib . contenttypes . models import ContentType import json class LinkedStimulus ( models . Model ) :      setting_type = models . ForeignKey ( ContentType , related_name = <str> ) setting_id = models . PositiveIntegerField ( ) setting = GenericForeignKey ( <str> , <str> ) stim_type = models . ForeignKey ( ContentType , related_name = <str> ) stim_id = models . PositiveIntegerField ( ) stimulus = GenericForeignKey ( <str> , <str> ) index = models . PositiveSmallIntegerField ( blank = True , null = True , help_text = l_ ( <str> ) ) is_practice = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) def get_experiment ( self ) :          if hasattr ( self . setting , <str> ) :              return self . setting . experiment  else :              return self . setting . part_of . experiment    class BaseStimuli ( models . Model ) :      class Meta :          abstract = True  name = models . CharField ( max_length = 26 , help_text = l_ ( <str> ) ) stimulus = models . CharField ( max_length = 256 , help_text = l_ ( <str> ) ) def to_Dict ( self ) :          dct = { } dct [ <str> ] = self . name dct [ <str> ] = self . stimulus return json . dumps ( dct )   class GenericStimuliPair ( BaseStimuli ) :      second_stim = models . CharField ( max_length = 256 , help_text = l_ ( <str> ) ) def to_Dict ( self ) :          dct = { } dct [ <str> ] = self . name dct [ <str> ] = [ self . stimulus , self . second_stim ] return json . dumps ( dct )  pass  class GenericSingleStimuli ( BaseStimuli ) :      pass    