from . BasicBlock import BaseSettingBlock from django . utils . translation import ugettext_lazy as l_ from django . db import models from jsonfield import JSONCharField class CategorizationBlock ( BaseSettingBlock ) :      type = <str> correct_text = models . CharField ( max_length = 64 , help_text = l_ ( <str> ) ) incorrect_text = models . CharField ( max_length = 64 , help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 64 , help_text = l_ ( <str> ) ) timeout_message = models . CharField ( max_length = 64 , help_text = l_ ( <str> ) ) show_stim_with_feedback = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) show_feedback_on_timeout = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) timing_stim = models . IntegerField ( null = True , help_text = l_ ( <str> ) ) timing_feedback_duration = models . IntegerField ( null = True , help_text = l_ ( <str> ) ) timing_response = models . IntegerField ( null = True , help_text = l_ ( <str> ) ) timing_post_trial = models . IntegerField ( null = True , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( CategorizationBlock , self ) . toDict ( ) initial [ <str> ] = <str> . format ( self . correct_text ) initial [ <str> ] = <str> . format ( self . incorrect_text ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = <str> . format ( self . timeout_message ) return initial   class SimilarityBlock ( BaseSettingBlock ) :      type = <str> show_response_choices = ( ( <str> , l_ ( <str> ) ) , ( <str> , l_ ( <str> ) ) , ( <str> , l_ ( <str> ) ) , ) intervals = models . IntegerField ( help_text = l_ ( <str> ) ) show_ticks = models . BooleanField ( help_text = l_ ( <str> ) ) show_response = models . CharField ( max_length = 16 , choices = show_response_choices , help_text = l_ ( <str> ) ) timing_fixation_cross = models . IntegerField ( default = 1500 , help_text = l_ ( <str> ) ) timing_first_stim = models . IntegerField ( help_text = l_ ( <str> ) ) timing_second_stim = models . IntegerField ( help_text = l_ ( <str> ) ) timing_image_gap = models . IntegerField ( help_text = l_ ( <str> ) ) timing_post_trial = models . IntegerField ( help_text = l_ ( <str> ) ) is_audio = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_message = models . CharField ( max_length = 128 , blank = True , null = True , help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 32 , blank = True , help_text = l_ ( <str> ) ) labels = JSONCharField ( max_length = 64 , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( SimilarityBlock , self ) . toDict ( ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = <str> . format ( self . timeout_message ) return initial   class AudioSimilarityBlock ( BaseSettingBlock ) :      type = <str> intervals = models . IntegerField ( help_text = l_ ( <str> ) ) show_ticks = models . BooleanField ( help_text = l_ ( <str> ) ) timing_first_stim = models . IntegerField ( help_text = l_ ( <str> ) ) timing_second_stim = models . IntegerField ( help_text = l_ ( <str> ) ) timing_gap = models . IntegerField ( help_text = l_ ( <str> ) , blank = True , null = True ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_message = models . CharField ( max_length = 128 , blank = True , null = True , help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 32 , blank = True , help_text = l_ ( <str> ) ) labels = JSONCharField ( max_length = 64 , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( AudioSimilarityBlock , self ) . toDict ( ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = <str> . format ( self . timeout_message ) return initial   class HTMLBlock ( BaseSettingBlock ) :      type = <str> url = models . URLField ( )  class RatingBlock ( BaseSettingBlock ) :      type = <str> is_html = models . BooleanField ( help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) response = models . CharField ( max_length = 16 , default = <str> , choices = ( ( <str> , <str> ) , ( <str> , <str> ) ) , help_text = l_ ( <str> ) ) labels = models . CharField ( max_length = 1024 , blank = True , help_text = l_ ( <str> ) ) intervals = models . CharField ( max_length = 16 , blank = True , help_text = l_ ( <str> ) ) show_ticks = models . BooleanField ( blank = True , help_text = l_ ( <str> ) ) choices = models . CharField ( blank = True , max_length = 1024 , help_text = l_ ( <str> ) ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_message = models . CharField ( max_length = 128 , blank = True , help_text = l_ ( <str> ) ) timeout_message_timing = models . IntegerField ( help_text = l_ ( <str> ) , default = 1000 ) def toDict ( self ) :          initial = super ( RatingBlock , self ) . toDict ( ) initial [ <str> ] = self . labels . split ( <str> ) initial [ <str> ] = self . intervals . split ( <str> ) initial [ <str> ] = self . choices . split ( <str> ) initial [ <str> ] = self . prompt return initial   class ForcedChoiceBlock ( BaseSettingBlock ) :      type = <str> is_html = models . BooleanField ( help_text = l_ ( <str> ) ) timing_stim = models . IntegerField ( help_text = l_ ( <str> ) ) timing_fixation = models . IntegerField ( help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) keyboard = models . BooleanField ( help_text = l_ ( <str> ) ) key_choices = models . CharField ( blank = True , max_length = 1024 , help_text = l_ ( <str> ) ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_message = models . CharField ( max_length = 128 , blank = True , help_text = l_ ( <str> ) ) timeout_message_timing = models . IntegerField ( help_text = l_ ( <str> ) , default = 1000 ) def toDict ( self ) :          initial = super ( ForcedChoiceBlock , self ) . toDict ( ) initial [ <str> ] = self . key_choices . split ( <str> ) initial [ <str> ] = self . prompt return initial   class AudioCatBlock ( BaseSettingBlock ) :      type = <str> choices = models . CharField ( blank = True , max_length = 1024 , help_text = l_ ( <str> ) ) timing_response = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) timing_feedback = models . IntegerField ( help_text = l_ ( <str> ) ) correct_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) incorrect_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) timeout_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) show_icon = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) forced_listening = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( AudioCatBlock , self ) . toDict ( ) initial [ <str> ] = self . choices . split ( <str> ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = self . correct_feedback initial [ <str> ] = self . incorrect_feedback initial [ <str> ] = self . timeout_feedback return initial   class AudioABXBlock ( BaseSettingBlock ) :      type = <str> choices = choices = models . CharField ( blank = True , max_length = 1024 , help_text = l_ ( <str> ) ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) timing_feedback = models . IntegerField ( help_text = l_ ( <str> ) , default = 1000 , blank = True ) timing_gap = models . IntegerField ( help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) key_first = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) key_second = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( AudioABXBlock , self ) . toDict ( ) initial [ <str> ] = self . choices . split ( <str> ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = self . timeout_feedback return initial   class ABXBlock ( BaseSettingBlock ) :      type = <str> choices = choices = models . CharField ( blank = True , max_length = 1024 , help_text = l_ ( <str> ) ) timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) timing_fixation_cross = models . IntegerField ( help_text = l_ ( <str> ) ) timing_feedback = models . IntegerField ( help_text = l_ ( <str> ) ) timing_gap = models . IntegerField ( help_text = l_ ( <str> ) ) timing_stims = models . IntegerField ( help_text = l_ ( <str> ) ) prompt_position = models . IntegerField ( choices = ( ( 1 , <str> ) , ( 2 , <str> ) ) , help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) key_first = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) key_second = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( ABXBlock , self ) . toDict ( ) initial [ <str> ] = self . choices . split ( <str> ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = self . timeout_feedback return initial   class RelationCategorizationBlock ( BaseSettingBlock ) :      type = <str> timeout = models . IntegerField ( help_text = l_ ( <str> ) , default = - 1 ) timeout_feedback = models . CharField ( max_length = 64 , blank = True , help_text = l_ ( <str> ) ) timing_fixation_cross = models . IntegerField ( help_text = l_ ( <str> ) ) timing_feedback = models . IntegerField ( help_text = l_ ( <str> ) ) timing_stims = models . IntegerField ( help_text = l_ ( <str> ) ) timing_after = models . IntegerField ( help_text = l_ ( <str> ) ) prompt = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) same_key = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) different_key = models . CharField ( max_length = 3 , blank = True , help_text = l_ ( <str> ) ) is_there_feedback = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) correct = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) incorrect = models . CharField ( max_length = 256 , blank = True , help_text = l_ ( <str> ) ) response_wait = models . BooleanField ( default = False , help_text = l_ ( <str> ) ) def toDict ( self ) :          initial = super ( RelationCategorizationBlock , self ) . toDict ( ) initial [ <str> ] = <str> . format ( self . prompt ) initial [ <str> ] = self . timeout_feedback initial [ <str> ] = self . correct initial [ <str> ] = self . incorrect return initial    