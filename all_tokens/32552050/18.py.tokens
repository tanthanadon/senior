from django . shortcuts import render from django . http import Http404 from django . http . response import JsonResponse , HttpResponseBadRequest from django . utils . translation import ugettext as _ from djPsych . exceptions import InvalidData , PayoutException from djpay . models import Payment import json from djexperiments . models import Experiment from djcollect . models import DropOut from . utils import sort_trials import datetime from django . contrib . contenttypes . models import ContentType from django . core . exceptions import ObjectDoesNotExist from djreceive . models . BasicTrials import GenericTrial def save ( request , exp_label ) :      if not request . is_ajax ( ) :          raise HttpResponseBadRequest pass  if not request . user . is_authenticated ( ) :          return JsonResponse ( { <str> : _ ( <str> ) } )  if not <str> in request . session or not <str> in request . session :          return JsonResponse ( { <str> : _ ( <str> ) } )  try :          meta = json . loads ( request . POST [ <str> ] ) data = json . loads ( request . POST [ <str> ] ) subject_id = meta [ <str> ] finished = meta [ <str> ] setting_name = meta [ <str> ] browser_info = meta [ <str> ] code = meta [ <str> ] exp_name = meta [ <str> ]  except KeyError :          return JsonResponse ( { <str> : _ ( <str> ) } )  except ValueError :          return JsonResponse ( { <str> : _ ( <str> ) } )  try :          setting_id = request . session [ <str> ] setting_model_id = request . session [ <str> ]  except KeyError :          return JsonResponse ( { <str> : _ ( <str> ) } )  setting_model = ContentType . objects . get ( id = setting_model_id ) try :          setting = setting_model . get_object_for_this_type ( id = setting_id )  except ObjectDoesNotExist :          return JsonResponse ( { <str> : _ ( <str> ) } )  if request . session [ <str> ] != code or request . session [ <str> ] != exp_name :          return JsonResponse ( { <str> : _ ( <str> ) } )  if subject_id != request . user . subject . id :          return JsonResponse ( { <str> : _ ( <str> ) } )  if <str> in meta :          globalparams = meta [ <str> ]  else :          globalparams = { }  exp = Experiment . objects . get ( label = exp_label ) if not ( <str> in request . session ) :          participation = exp . create_participation ( subject = request . user . subject , started = request . session [ <str> ] , complete = finished , parameters = globalparams )  else :          previous = request . session . pop ( <str> ) participation = exp . participation_set . get ( pk = previous ) participation . parameters = globalparams if <str> in meta else participation . parameters  new_run = participation . create_run ( request . session [ <str> ] , datetime . datetime . now ( ) , browserdict = browser_info , setting = setting ) try :          mapping = json . loads ( request . session [ <str> ] )  except AttributeError :          return JsonResponse ( { <str> : _ ( <str> ) } )  sortings = sort_trials ( data ) for trial_type , trial_batch in sortings . items ( ) :          if trial_type == <str> or trial_type == <str> or trial_type == <str> :              continue  try :              trial_content_type = ContentType . objects . get ( pk = mapping [ trial_type ] ) trial_model = trial_content_type . model_class ( )  except :              trial_model = GenericTrial trial_content_type = ContentType . objects . get_for_model ( trial_model )  instances = [ ] for trial in trial_batch :              trial [ <str> ] = new_run trial = new_run . pre_process_data ( trial , request ) try :                  instance = trial_model . create_from_raw_data ( trial )  except Exception as e :                  raise e del trial [ <str> ] return JsonResponse ( { <str> : _ ( <str> ) + trial_type + _ ( <str> ) + json . dumps ( trial ) + <str> + str ( e ) } )  instances . append ( instance )  new_run . used_trials . add ( trial_content_type ) trial_model . objects . bulk_create ( instances )  message = <str> if exp . compensated and participation . complete and not request . user . groups . filter ( name = exp . research_group . name ) . exists ( ) :          try :              payment = participation . create_payment ( data ) message = _ ( <str> ) . format ( round ( payment . amount , 2 ) , payment . currency )  except PayoutException as e :              message = _ ( <str> ) + str ( e )   DropOut . objects . filter ( id = request . session . pop ( <str> ) ) . delete ( ) if finished :          participation . complete = finished participation . finished = datetime . datetime . now ( )  participation . save ( ) new_run . save ( ) request . session [ <str> ] = exp . label del request . session [ <str> ] del request . session [ <str> ] return JsonResponse ( { <str> : _ ( <str> ) + message } )   