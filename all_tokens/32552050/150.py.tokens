from django . db import models from django . conf import settings from djexperiments . models import Experiment from djuser . models import Subject from jsonfield import JSONField from django . contrib . auth . models import User from djPsych . exceptions import PayoutException from djreceive . models import Run from matplotlib import ticker , figure from matplotlib . backends . backend_agg import FigureCanvasAgg as FigureCanvas class Participation ( models . Model ) :      experiment = models . ForeignKey ( Experiment ) subject = models . ForeignKey ( Subject , on_delete = models . CASCADE ) complete = models . BooleanField ( ) started = models . DateTimeField ( ) finished = models . DateTimeField ( null = True , blank = True ) parameters = JSONField ( null = True , blank = True ) def create_run ( self , start , end , setting = None , browserdict = None ) :          run = Run ( participation = self , start_time = start , global_setting_obj = setting , end_time = end ) if browserdict is not None :              browser = browserdict [ <str> ] version = browserdict [ <str> ] run . browser = browser run . browser_version = version  run . save ( ) return run  def create_payment ( self , trials = None , receiver = None , curr = <str> , greedy = None ) :          if hasattr ( self , <str> ) :              raise PayoutException ( _ ( <str> ) )  if receiver is None :              receiver = self . subject . user . email  payment = self . experiment . payment_model ( participation = self , amount = self . calculate_payment ( trials ) , receiver = receiver ) payment . save ( ) return payment  def calculate_payment ( self , trials = None ) :          if trials is None :              trials = self . get_all_trials ( )  return 5.00  def get_all_trials ( self ) :          trial_list = [ ] for run in self . run_set . all ( ) . order_by ( <str> ) :              for trial in run . get_trials ( ) :                  trial_list . append ( trial )   return trial_list  def get_headers ( self ) :          header_set = set ( ) for trial in self . get_all_trials ( ) :              header_set = header_set . union ( trial . get_full_field_names ( ) )  return list ( header_set )  def get_data_as_dict_array ( self ) :          dict_array = [ ] for trial in self . get_all_trials ( ) :              dict_array . append ( trial . toDict ( ) )  return dict_array  def completion_status ( self ) :          runs = { } for run in self . run_set . all ( ) :              if run . global_setting_obj is not None :                  if hasattr ( runs , run . global_setting_obj . name ) :                      runs [ run . global_setting_obj . name ] += 1  else :                      runs [ run . global_setting_obj . name ] = 1   else :                  return False   return runs  def __str__ ( self ) :          return self . subject . user . username + <str> + self . experiment . label  def learning_curve ( self , granularity = 1 , range = 20 ) :          cat_trials = [ t . toDict ( ) for t in self . get_all_trials ( ) if ( t . trial_type == <str> or t . trial_type == <str> ) ] fig = figure . Figure ( ) if granularity > len ( cat_trials ) :              granularity = 1  ord = [ ] abs = [ ] cur = 0 while cur < len ( cat_trials ) :              lower = cur - range if ( cur - range ) > 0 else 0 subset = cat_trials [ lower : cur + 1 ] average = 0.0 for t in subset :                  if t [ <str> ] == True or t [ <str> ] == <str> :                      average = average + 1   average = average / len ( subset ) ord . append ( cur ) abs . append ( average ) cur = cur + granularity  axe = fig . add_subplot ( 111 ) loc = ticker . MultipleLocator ( granularity ) axe . xaxis . set_major_locator ( loc ) axe . plot ( ord , abs ) if self . parameters is not None and <str> in self . parameters :              diff = str ( self . parameters [ <str> ] )  else :              diff = <str>  axe . set_title ( <str> + str ( self . subject . id ) + <str> + diff ) axe . set_ylabel ( <str> ) axe . set_xlabel ( <str> ) vals = axe . get_yticks ( ) axe . set_yticklabels ( [ <str> . format ( x * 100 ) for x in vals ] ) canvas = FigureCanvas ( fig ) return canvas   class DropOut ( models . Model ) :      experiment = models . ForeignKey ( Experiment ) subject = models . ForeignKey ( Subject , on_delete = models . CASCADE ) started = models . DateTimeField ( ) finished = models . DateTimeField ( null = True , blank = True )  class Researcher ( models . Model ) :      user = models . OneToOneField ( User ) institution = models . CharField ( max_length = 32 , blank = True , null = True ) researchs = models . ManyToManyField ( Experiment , blank = True )    