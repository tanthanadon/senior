from django . shortcuts import render from djexperiments . models import Experiment from djsend . models import SimCatGlobalSetting from djPsych . utils import fetch_files_of_type import matplotlib matplotlib . use ( <str> ) from matplotlib import pyplot as plt from matplotlib import ticker from matplotlib . backends . backend_agg import FigureCanvasAgg as FigureCanvas import json class MyParticipation ( ) :      def calculate_payment ( self , trials = None ) :          cat_trials = [ ] n_correct = 0 for t in trials :              if t [ <str> ] == <str> :                  cat_trials . append ( t )   for last in cat_trials [ - 20 : ] :              if last [ <str> ] :                  n_correct = n_correct + 1   if n_correct >= 16 :              return 15.00  else :              return 10.00   def learning_curve ( self , granularity = 1 , range = 20 ) :          cat_trials = [ t . toDict ( ) for t in self . get_all_trials ( ) if ( t . trial_type == <str> or t . trial_type == <str> ) ] fig = matplotlib . figure . Figure ( ) if granularity > len ( cat_trials ) :              granularity = 1  ord = [ ] abs = [ ] cur = 0 while cur < len ( cat_trials ) :              lower = cur - range if ( cur - range ) > 0 else 0 subset = cat_trials [ lower : cur + 1 ] average = 0.0 for t in subset :                  if t [ <str> ] == True :                      average = average + 1   average = average / len ( subset ) ord . append ( cur ) abs . append ( average ) cur = cur + granularity  axe = fig . add_subplot ( 111 ) loc = ticker . MultipleLocator ( granularity ) axe . xaxis . set_major_locator ( loc ) axe . plot ( ord , abs ) if self . parameters is not None and <str> in self . parameters :              diff = str ( self . parameters [ <str> ] )  else :              diff = <str>  axe . set_title ( <str> + str ( self . subject . id ) + <str> + diff ) axe . set_ylabel ( <str> ) axe . set_xlabel ( <str> ) vals = axe . get_yticks ( ) axe . set_yticklabels ( [ <str> . format ( x * 100 ) for x in vals ] ) canvas = FigureCanvas ( fig ) return canvas   class MyExperiment ( Experiment ) :      class Meta :          proxy = True   def texture_generator ( request ) :      micro_components = fetch_files_of_type ( <str> , <str> ) return render ( request , <str> , { <str> : json . dumps ( micro_components ) } ) pass  EXPERIMENT_PROXY = MyExperiment PARTICIPATION_CALCULATE = MyParticipation . calculate_payment PLOTTING = MyParticipation . learning_curve GEN_SETTINGS_MODEL = SimCatGlobalSetting   