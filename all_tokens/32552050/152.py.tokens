from django . shortcuts import render from djexperiments . models import Experiment from django . contrib . auth . decorators import login_required from django . utils . translation import ugettext as _ from django . http import JsonResponse from django . http . response import HttpResponse , Http404 import io import zipfile import datetime from djcollect . utils import get_csv_iostring_from_participation from djcollect . models import Participation def create_download_error_resp ( error_message ) :      return HttpResponse ( error_message , content_type = <str> , charset = <str> )  @ login_required def collect_all ( request , exp_label ) :      exp = Experiment . objects . prefetch_related ( <str> , <str> , <str> , <str> ) . get ( label = exp_label ) if not request . user . groups . filter ( name = exp . research_group . name ) . exists ( ) :          return create_download_error_resp ( _ ( <str> ) )  the_zip = io . BytesIO ( ) main_zipfile = zipfile . ZipFile ( the_zip , mode = <str> , compression = zipfile . ZIP_DEFLATED ) main_zipfile . debug = 3 for participation in exp . participation_set . all ( ) :          name = <str> + str ( participation . subject . id ) + str ( participation . started ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) + <str> if participation . parameters is not None :              if hasattr ( participation . parameters , <str> ) :                  name = name + str ( participation . parameters [ <str> ] )   name += str ( participation . id ) data_as_string_io = get_csv_iostring_from_participation ( participation ) main_zipfile . writestr ( name + <str> , data_as_string_io . getvalue ( ) ) data_as_string_io . close ( )  main_zipfile . close ( ) response = HttpResponse ( the_zip . getvalue ( ) , content_type = <str> ) response [ <str> ] = <str> + exp_label + <str> + str ( datetime . date . today ( ) ) + <str> response [ <str> ] = the_zip . tell ( ) return response  @ login_required def learning_curve ( request , exp_label , participation ) :      exp = Experiment . objects . prefetch_related ( <str> ) . get ( label = exp_label ) part = exp . participation_set . get ( pk = participation ) response = HttpResponse ( content_type = <str> ) part . learning_curve ( granularity = 20 , range = 20 ) . print_png ( response ) return response   