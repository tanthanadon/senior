from django . db import models from django . conf import settings from django . utils . translation import ugettext as _ from djPsych . exceptions import PayoutException from djcollect . models import Participation import json import datetime import requests class Payment ( models . Model ) :      participation = models . OneToOneField ( Participation ) amount = models . FloatField ( ) currency = models . CharField ( max_length = 3 , default = <str> ) time_created = models . DateTimeField ( auto_now_add = True ) time_sent = models . DateTimeField ( blank = True , null = True ) sent = models . BooleanField ( default = False ) payout_item_id = models . CharField ( max_length = 16 , blank = True , null = True ) transaction_id = models . CharField ( max_length = 20 , blank = True , null = True ) payout_batch_id = models . CharField ( max_length = 16 , blank = True , null = True ) time_processed = models . DateTimeField ( blank = True , null = True ) receiver = models . EmailField ( null = True ) status = models . CharField ( max_length = 16 , blank = True ) @ classmethod def createPayment ( cls , participation , amount , receiver = None , curr = <str> , greedy = None ) :          if hasattr ( participation , <str> ) :              raise PayoutException ( _ ( <str> ) )  if receiver is None :              receiver = participation . subject . user . email  payment = cls ( participation = self , amount = amount , receiver = receiver ) payment . save ( ) return payment  def save ( self , * args , ** kwargs ) :          self . amount = round ( self . amount , 2 ) if self . pk is None :              if not self . participation . experiment . compensated :                  raise PayoutException ( _ ( <str> ) )  if self . amount > self . participation . experiment . funds_remaining :                  raise PayoutException ( _ ( <str> ) )  if Payment . objects . filter ( participation__experiment = self . participation . experiment , participation__subject = self . participation . subject ) . count ( ) >= self . participation . experiment . max_payouts :                  raise PayoutException ( _ ( <str> ) )  self . participation . experiment . deductFunds ( self . amount )  super ( Payment , self ) . save ( * args , ** kwargs )  def pay ( self , request , email = None ) :          exp = self . participation . experiment if not request . user . is_authenticated ( ) :              raise PayoutException ( _ ( <str> ) )  if not self . participation . subject . user == request . user :              raise PayoutException ( _ ( <str> ) )  if self . sent or self . time_sent is not None or self . time_processed is not None or self . payout_item_id is not None :              raise PayoutException ( _ ( <str> ) )  if self . receiver is None :              raise PayoutException ( _ ( <str> ) )  if email is None :              email = self . receiver  if settings . PAYPAL_MODE == <str> :              app_id = <str> uname = <str> password = <str> signature = <str> endpoint = <str> sender = <str>  elif settings . PAYPAL_MODE == <str> :              app_id = exp . PayPal_Live_ID uname = exp . PayPal_API_Username password = exp . PayPal_API_Password signature = exp . PayPal_API_Signature endpoint = <str> sender = exp . PayPal_sender_email  else :              raise PayoutException ( _ ( <str> ) )  if app_id is None or exp . PayPal_API_Signature is None :              raise PayoutException ( _ ( <str> ) )  headers = { <str> : uname , <str> : password , <str> : signature , <str> : app_id , <str> : <str> , <str> : <str> } payload = { <str> : <str> , <str> : self . currency , <str> : sender , <str> : { <str> : [ { <str> : str ( round ( self . amount , 2 ) ) , <str> : email } ] } , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> } } resp = requests . post ( endpoint , headers = headers , data = json . dumps ( payload ) ) payout = resp . json ( ) if resp . status_code == 200 :              if payout [ <str> ] [ <str> ] == <str> :                  raise PayoutException ( _ ( <str> ) + payout [ <str> ] [ 0 ] [ <str> ] ) pass  elif payout [ <str> ] [ <str> ] == <str> :                  funding_payload = { <str> : payout [ <str> ] , <str> : { <str> : <str> , <str> : <str> } } if settings . PAYPAL_MODE == <str> :                      funding_endpoint = <str>  elif settings . PAYPAL_MODE == <str> :                      funding_endpoint = <str>  funding = requests . post ( funding_endpoint , headers = headers , data = json . dumps ( funding_payload ) ) funding - funding . json ( ) self . sent = True self . participation . experiment . deductFunds ( float ( payout . batch_header . fees . value ) ) self . time_sent = datetime . datetime . now ( ) self . payout_batch_id = payout . batch_header . payout_batch_id self . status = payout . items [ 0 ] . transaction_status self . payout_item_id = payout . items [ 0 ] . payout_item_id self . transaction_id = payout . items [ 0 ] . transaction_id self . time_processed = payout . items [ 0 ] . time_processed self . save ( ) return payout   else :              raise PayoutException ( _ ( <str> ) )      