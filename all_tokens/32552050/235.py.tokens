from django . db import models from . BasicGeneral import BaseGlobalSetting from django . utils . translation import ugettext_lazy as l_ from django . conf import settings class SimCatGlobalSetting ( BaseGlobalSetting ) :      sample_table_height = models . IntegerField ( help_text = <str> ) sample_table_width = models . IntegerField ( help_text = <str> ) levels = models . IntegerField ( help_text = <str> ) density = models . IntegerField ( help_text = <str> ) size = models . PositiveIntegerField ( help_text = l_ ( <str> ) ) number_of_pauses = models . PositiveSmallIntegerField ( default = 0 , help_text = l_ ( <str> ) ) length = models . PositiveIntegerField ( help_text = l_ ( <str> ) , default = 40 ) practices = models . PositiveIntegerField ( help_text = l_ ( <str> ) , default = 5 ) difficulty = models . PositiveSmallIntegerField ( default = 0 , blank = True , help_text = l_ ( <str> ) ) microcomponent_pairs = models . ManyToManyField ( <str> , related_name = <str> ) practice_pairs = models . ManyToManyField ( <str> , related_name = <str> ) def toDict ( self ) :          super_dict = super ( SimCatGlobalSetting , self ) . toDict ( ) microcomponents = { } prefix = settings . MEDIA_URL + self . experiment . label + <str> for pair in self . microcomponent_pairs . all ( ) :              microcomponents [ pair . index ] = { <str> : prefix + pair . first , <str> : prefix + pair . second }  super_dict [ <str> ] = microcomponents practice = { } for pair in self . practice_pairs . all ( ) :              practice [ pair . index ] = { <str> : prefix + pair . first , <str> : prefix + pair . second }  super_dict [ <str> ] = practice categories = { } for cat in self . category_set . all ( ) :              categories [ cat . name ] = cat . keycode  super_dict [ <str> ] = categories return super_dict     