from django . db import models from . runs import Run from jsonfield import JSONField import copy from django . template . defaultfilters import first class BaseTrial ( models . Model ) :      class Meta :          abstract = True  internal_node_id = models . CharField ( max_length = 24 ) trial_index = models . IntegerField ( ) trial_type = models . CharField ( max_length = 32 ) time_elapsed = models . IntegerField ( ) timeout = models . BooleanField ( blank = True , default = False ) run = models . ForeignKey ( Run ) extra_data = JSONField ( null = True , blank = True ) @ classmethod def get_actual_fields ( cls ) :          real_fields = [ ] for field in cls . _meta . get_fields ( ) :              if field . concrete :                  real_fields . append ( field . name )   return real_fields  @ classmethod def tweak_input ( cls , data_dict ) :          return data_dict  @ classmethod def create_from_raw_data ( cls , data_dict ) :          data_dict = cls . tweak_input ( data_dict ) extra_fields = [ ] true_fields = cls . get_actual_fields ( ) extra_data = { } for key in data_dict :              if not key in true_fields :                  extra_fields . append ( key )   for rebel_field in extra_fields :              extra_data [ rebel_field ] = data_dict . pop ( rebel_field )  data_dict [ <str> ] = extra_data return cls ( ** data_dict )  def get_full_field_names ( self ) :          headers = [ <str> ] for field in self . _meta . get_fields ( ) :              if field . concrete and not field . auto_created and not field . is_relation and not field . name == <str> :                  headers . append ( field . name )   if self . extra_data is not None :              for key in self . extra_data :                  headers . append ( key )   return set ( headers )  def get_subject_id ( self ) :          return self . run . participation . subject . id  def toDict ( self ) :          dictionary = dict ( self . __dict__ ) if self . extra_data is not None :              my_copy = copy . copy ( self . extra_data ) del dictionary [ <str> ] for key , val in my_copy . items ( ) :                  dictionary [ key ] = val   del dictionary [ <str> ] del dictionary [ <str> ] del dictionary [ <str> ] return dictionary   class GenericTrial ( BaseTrial ) :      pass  class AnimationTrial ( BaseTrial ) :      handles = <str> animation_sequence = JSONField ( null = False , blank = True ) responses = JSONField ( null = False , blank = True )  class AudioCatTrial ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField stimulus = models . CharField ( max_length = 128 ) key_press = models . SmallIntegerField ( null = True ) correct = models . BooleanField ( default = False )  class AudioSimilarityTrial ( BaseTrial ) :      handles = <str> sim_score = models . PositiveIntegerField ( ) rt = models . PositiveIntegerField ( ) firstStim = models . CharField ( max_length = 1024 ) secondStim = models . CharField ( max_length = 1024 )  class ButtonResponseTrial ( BaseTrial ) :      handles = <str> button_pressed = models . PositiveIntegerField ( ) rt = models . PositiveIntegerField ( )  class CategorizationTrial ( BaseTrial ) :      handles = <str> key_press = models . PositiveSmallIntegerField ( ) rt = models . PositiveIntegerField ( ) correct = models . BooleanField ( ) category = models . CharField ( max_length = 24 , null = True )  class CategorizeAnimationTrial ( BaseTrial ) :      handles = <str> key_press = models . PositiveSmallIntegerField ( ) rt = models . PositiveIntegerField ( ) correct = models . BooleanField ( )  class ForcedChoice ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField ( ) chosen = models . IntegerField ( ) leftRating = models . IntegerField ( null = True ) rightRating = models . IntegerField ( null = True ) first = models . CharField ( max_length = 1024 , null = True ) last = models . CharField ( max_length = 1024 , null = True )  class FreeSortTrial ( BaseTrial ) :      handles = <str> init_locations = JSONField ( null = False , blank = True ) moves = JSONField ( null = False , blank = True ) final_locations = JSONField ( null = False , blank = True ) rt = models . PositiveIntegerField ( )  class MultiStimMultiResponseTrial ( BaseTrial ) :      handles = <str> stimulus = JSONField ( null = False , blank = True ) key_press = JSONField ( null = False , blank = True ) rt = JSONField ( null = False , blank = True )  class Rating ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField ( ) rating = models . IntegerField ( ) stimulus = models . CharField ( max_length = 128 )  class ReconstructionTrial ( BaseTrial ) :      handles = <str> start_value = models . FloatField ( ) final_value = models . FloatField ( ) rt = models . PositiveIntegerField ( )  class SameDifferentTrial ( BaseTrial ) :      handles = <str> stimulus = JSONField ( null = False , blank = True ) key_press = models . IntegerField ( ) rt = models . PositiveIntegerField ( ) correct = models . BooleanField ( ) answer = models . CharField ( max_length = 16 )  class SimilarityTrial ( BaseTrial ) :      handles = <str> sim_score = models . PositiveIntegerField ( ) rt = models . PositiveIntegerField ( ) firstStim = models . CharField ( max_length = 24 ) secondStim = models . CharField ( max_length = 24 ) @ classmethod def tweak_input ( cls , data_dict ) :          clean_dict = dict ( data_dict ) if <str> in data_dict :              clean_dict [ <str> ] = data_dict [ <str> ] [ 0 ] clean_dict [ <str> ] = data_dict [ <str> ] [ 1 ] del clean_dict [ <str> ]  return clean_dict   class SingleAudioTrial ( BaseTrial ) :      handles = <str> stimulus = models . CharField ( max_length = 128 ) key_press = models . IntegerField ( ) rt = models . IntegerField ( )  class SingleStimTrial ( BaseTrial ) :      handles = <str> stimulus = models . CharField ( max_length = 128 ) key_press = models . IntegerField ( ) rt = models . IntegerField ( )  class SurveyLikert ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField ( ) responses = JSONField ( null = False , blank = True )  class SurveyMultiChoice ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField responses = JSONField ( null = False , blank = True )  class SurveyTextTrial ( BaseTrial ) :      handles = <str> rt = models . PositiveIntegerField responses = JSONField ( null = False , blank = True )  class XABTrial ( BaseTrial ) :      handles = <str> key_press = models . IntegerField ( ) rt = models . IntegerField ( ) correct = models . BooleanField ( )   