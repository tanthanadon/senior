from django . contrib import admin from django . utils . translation import ugettext_lazy as l_ from django_markdown . models import MarkdownField from django_markdown . widgets import AdminMarkdownWidget from django . apps import apps from . models import * from . adminForms import GenericSettingBlockForm from django . contrib . contenttypes . models import ContentType import inspect from djmanager . utils import get_allowed_exp_for_user , get_subclass_ct_pk from djreceive . models . BasicTrials import BaseTrial , CategorizationTrial , Rating , AudioSimilarityTrial from django . contrib . contenttypes . admin import GenericTabularInline , GenericStackedInline from modeltranslation . admin import TranslationAdmin , TranslationGenericStackedInline from djstim . models import Category , MicroComponentPair from djreceive . models . CustomTrials import CogComSimilarityTrial from djstim . admin import LinkedStimulusInline from djsend . models . BasicBlock import SurveyMultiChoiceBlock , SurveyLikertBlock , SurveyTextBlock , AnimationBlock , ButtonResponseBlock , CategorizeAnimationBlock , FreeSortBlock , MultiStimMultiResponseBlock , ReconstructionBlock , SameDifferentBlock , SingleAudioBlock , SingleStimBlock , XABBlock from djsend . models . CustomBlock import ForcedChoiceBlock , RatingBlock , AudioCatBlock , AudioSimilarityBlock , AudioABXBlock , ABXBlock , RelationCategorizationBlock from djsend . models . BaseStimuli import Question class InstructionInline ( TranslationGenericStackedInline ) :      model = Instruction extra = 1 classes = ( <str> , )  @ admin . register ( GenericSettingBlock ) class GenericBlockAdmin ( TranslationAdmin ) :      class Media :          js = ( <str> , <str> , <str> , ) css = { <str> : ( <str> , ) , }  formfield_overrides = { MarkdownField : { <str> : AdminMarkdownWidget } } fieldsets = ( ( l_ ( <str> ) , { <str> : ( ( <str> , <str> ) , <str> , <str> ) } ) , ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> ) } ) , ( l_ ( <str> ) , { <str> : ( ( <str> , ) , ) } ) ) related_lookup_fields = { <str> : [ [ <str> , <str> ] ] } def get_exp ( self , obj ) :          return obj . part_of . experiment . verbose_name  list_display = ( <str> , <str> , <str> , <str> , <str> ) inlines = [ InstructionInline , ] def get_form ( self , request , obj = None , ** kwargs ) :          normal_form = super ( GenericBlockAdmin , self ) . get_form ( request , obj = obj , ** kwargs ) normal_form . base_fields [ <str> ] . queryset = ContentType . objects . filter ( pk__in = get_subclass_ct_pk ( BaseGlobalSetting ) ) normal_form . base_fields [ <str> ] . queryset = ContentType . objects . filter ( pk__in = get_subclass_ct_pk ( BaseTrial ) ) return normal_form  def get_queryset ( self , request ) :          qs = super ( GenericBlockAdmin , self ) . get_queryset ( request ) exps = get_allowed_exp_for_user ( request ) exps_ids = [ exp . pk for exp in exps ] allowed_ids = [ ] for block in qs :              if block . part_of and block . part_of . experiment . pk in exps_ids :                  allowed_ids . append ( block . pk )   return qs . filter ( pk__in = allowed_ids )   @ admin . register ( GenericGlobalSetting ) class GenericGlobalSettingAdmin ( admin . ModelAdmin ) :      fieldsets = ( ( l_ ( <str> ) , { <str> : ( ( <str> , <str> ) ) } ) , ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> ) } ) , ( l_ ( <str> ) , { <str> : ( <str> , ) } ) ) list_display = ( <str> , <str> ) def get_queryset ( self , request ) :          qs = super ( GenericGlobalSettingAdmin , self ) . get_queryset ( request ) return qs . filter ( experiment__in = get_allowed_exp_for_user ( request ) )  inlines = [ LinkedStimulusInline , ]  @ admin . register ( ABXBlock ) class ABXBlock ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( AnimationBlock ) class AnimationBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( AudioABXBlock ) class AudioABXBlock ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( AudioCatBlock ) class AudioCatAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( AudioSimilarityBlock ) class AudioSimilarityBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( ButtonResponseBlock ) class ButtonResponseBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( CategorizationBlock ) class CategorizationBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , ) related_lookup_fields = { <str> : [ [ <str> , <str> ] ] }  @ admin . register ( CategorizeAnimationBlock ) class CategorizeAnimationBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  class CategoryInline ( admin . StackedInline ) :      model = Category extra = 1  @ admin . register ( ForcedChoiceBlock ) class ForcedChoiceAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( FreeSortBlock ) class FreeSortBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  class MCPairInline ( admin . StackedInline ) :      model = MicroComponentPair extra = 1  @ admin . register ( MultiStimMultiResponseBlock ) class MultiStimMultiResponseBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  class QuestionAdminInline ( TranslationGenericStackedInline ) :      model = Question  @ admin . register ( RatingBlock ) class RatingAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( ReconstructionBlock ) class ReconstructionBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( RelationCategorizationBlock ) class RelationCategorizationBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( SameDifferentBlock ) class SameDifferentBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( SimCatGlobalSetting ) class SimCatSettingAdmin ( GenericGlobalSettingAdmin ) :      fieldsets = GenericGlobalSettingAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , ) filter_horizontal = [ <str> , <str> ] inlines = [ CategoryInline ]  @ admin . register ( SimilarityBlock ) class SimilarityBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( SingleAudioBlock ) class SingleAudioBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( SingleStimBlock ) class SingleStimBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )  @ admin . register ( SurveyLikertBlock ) class SurveyLikertAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , ) } ) , ) inlines = [ QuestionAdminInline ]  @ admin . register ( SurveyMultiChoiceBlock ) class SurveyMultiChoiceAdmin ( GenericBlockAdmin ) :      inlines = [ QuestionAdminInline ] fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> ) } ) , )  @ admin . register ( SurveyTextBlock ) class SurveyTextAdmin ( GenericBlockAdmin ) :      inlines = [ QuestionAdminInline ] fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , ) } ) , )  @ admin . register ( XABBlock ) class XABBlockAdmin ( GenericBlockAdmin ) :      fieldsets = GenericBlockAdmin . fieldsets + ( ( l_ ( <str> ) , { <str> : ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } ) , )   