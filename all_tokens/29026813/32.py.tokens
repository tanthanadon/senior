from log import debug def show_similar ( ) : 	 import xbmc , xbmcgui import vsdbg vsdbg . _bp ( ) imdb_id = xbmc . getInfoLabel ( <str> ) type = <str> from context import get_path_name path , name = get_path_name ( ) FileNameAndPath = path . decode ( <str> ) dbtype = xbmc . getInfoLabel ( <str> ) if dbtype == <str> or dbtype == <str> : 		 type = <str>  if <str> in path and not name : 		 import filesystem if filesystem . exists ( <str> ) : 			 import sys it = sys . listitem . getVideoInfoTag ( ) try : 				 import shikicore if shikicore . authorize_me ( ) : 					 oo = shikicore . animes_search ( it . getOriginalTitle ( ) ) if oo : 						 wid = xbmcgui . getCurrentWindowId ( ) uri = <str> . format ( oo [ 0 ] [ <str> ] ) if wid == 10025 : 							 xbmc . executebuiltin ( <str> % uri )  else : 							 xbmc . executebuiltin ( <str> % uri )     except ImportError : 				 pass    if not imdb_id and dbtype == <str> : 		 from nforeader import NFOReader nfo_path = FileNameAndPath . replace ( <str> , <str> ) debug ( nfo_path ) rd = NFOReader ( nfo_path , <str> ) tvs_rd = rd . tvs_reader ( ) imdb_id = tvs_rd . imdb_id ( ) type = <str>  if imdb_id : 		 from movieapi import TMDB_API res = TMDB_API . tmdb_by_imdb ( imdb_id , type ) debug ( res ) if res and len ( res ) > 0 : 			 tmdb_id = res [ 0 ] . tmdb_id ( ) from plugin import make_url url = make_url ( { <str> : <str> , <str> : tmdb_id , <str> : type } ) xbmc . executebuiltin ( <str> % url ) return True   return False  if __name__ == <str> : 	 show_similar ( )    