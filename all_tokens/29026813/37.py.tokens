import log from log import debug import requests , urllib from base import TorrentPlayer class YATPPlayer ( TorrentPlayer ) : 	 def close ( self ) : 		 pass  def AddTorrent ( self , path ) : 		 r = requests . post ( <str> , json = { <str> : <str> , <str> : { <str> : path } } ) debug ( r . json ( ) ) TorrentPlayer . AddTorrent ( self , path )  def CheckTorrentAdded ( self ) : 		 r = requests . post ( <str> , json = { <str> : <str> } ) debug ( r . json ( ) ) try : 			 if r . json ( ) [ <str> ] : 				 return True   except : 			 pass  return False  def GetLastTorrentData ( self ) : 		 files = [ ] r = requests . post ( <str> , json = { <str> : <str> } ) torr_data = r . json ( ) [ <str> ] debug ( torr_data ) self . __info_hash = torr_data [ <str> ] index = 0 for file in torr_data [ <str> ] : 			 if TorrentPlayer . is_playable ( file [ 0 ] ) : 				 files . append ( { <str> : index , <str> : file [ 0 ] , <str> : long ( file [ 1 ] ) } )  index = index + 1  return { <str> : self . __info_hash , <str> : files }  def StartBufferFile ( self , fileIndex ) : 		 r = requests . post ( <str> , json = { <str> : <str> , <str> : { <str> : fileIndex } } )  def CheckBufferComplete ( self ) : 		 r = requests . post ( <str> , json = { <str> : <str> } ) debug ( r . json ( ) ) debug ( <str> ) try : 			 if r . json ( ) [ <str> ] : 				 return True   except : 			 pass  return False  def GetBufferingProgress ( self ) : 		 result = - 1 r = requests . post ( <str> , json = { <str> : <str> } ) try : 			 result = r . json ( ) [ <str> ]  except : 			 pass  debug ( str ( result ) + <str> ) return result  def updateDialogInfo ( self , progress , progressBar ) : 		 r = requests . post ( <str> , json = { <str> : <str> , <str> : { <str> : self . __info_hash } } ) try : 			 torrent_info = r . json ( ) [ <str> ] progressBar . update ( progress , <str> . format ( torrent_info [ <str> ] , torrent_info [ <str> ] ) + <str> + <str> . format ( torrent_info [ <str> ] , torrent_info [ <str> ] ) , <str> . format ( torrent_info [ <str> ] , torrent_info [ <str> ] ) )  except : 			 progressBar . update ( progress )   def GetTorrentInfo ( self ) : 		 r = requests . post ( <str> , json = { <str> : <str> , <str> : { <str> : self . __info_hash } } ) try : 			 torrent_info = r . json ( ) [ <str> ] return { <str> : torrent_info [ <str> ] , <str> : torrent_info [ <str> ] , <str> : torrent_info [ <str> ] , <str> : torrent_info [ <str> ] , <str> : torrent_info [ <str> ] , <str> : torrent_info [ <str> ] }  except : 			 pass  return None  def GetStreamURL ( self , playable_item ) : 		 playable_url = <str> file_path = playable_item [ <str> ] . replace ( <str> , <str> ) . encode ( <str> ) playable_url += urllib . quote ( file_path ) return playable_url    