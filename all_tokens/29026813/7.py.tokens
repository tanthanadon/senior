import sys from plugin import get_params def dispatch ( ) : 	 from log import debug params = get_params ( ) debug ( params ) from player import load_settings import vsdbg vsdbg . _bp ( ) if <str> in params : 		 from player import play_torrent settings = load_settings ( ) skip_show_sources = False if settings . show_sources and <str> not in params : 			 import filesystem , urllib rel_path = urllib . unquote ( params [ <str> ] ) . decode ( <str> ) debug ( rel_path ) filename = urllib . unquote ( params [ <str> ] ) . decode ( <str> ) . replace ( <str> , <str> ) debug ( filename ) path = filesystem . join ( settings . base_path ( ) , rel_path , filename ) path = filesystem . normseps ( path ) debug ( path ) def run ( run_params ) : 				 play_torrent ( settings = settings , params = run_params )  if settings . skip_show_sources : 				 from base import STRMWriterBase links_with_ranks = STRMWriterBase . get_links_with_ranks ( path , settings ) from base import is_torrent_remembed for v in links_with_ranks : 					 if is_torrent_remembed ( v , settings ) : 						 play_torrent ( settings = settings , params = params ) return    import context res = context . main ( settings , path . encode ( <str> ) , filename . encode ( <str> ) , run ) if not res : 				 play_torrent ( settings = settings , params = params )   else : 			 play_torrent ( settings = settings , params = params )   elif params . get ( <str> ) == <str> : 		 from player import action_anidub_add_favorites action_anidub_add_favorites ( load_settings ( ) )  elif params . get ( <str> ) == <str> : 		 from player import dialog_action , dialog_action_case dialog_action ( dialog_action_case . settings , load_settings ( ) )  elif params . get ( <str> ) == <str> : 		 from player import dialog_action , dialog_action_case dialog_action ( dialog_action_case . search , load_settings ( ) , params )  elif params . get ( <str> ) == <str> : 		 from player import action_search_context action_search_context ( params )  elif params . get ( <str> ) == <str> : 		 from player import dialog_action , dialog_action_case dialog_action ( dialog_action_case . catalog , load_settings ( ) )  elif params . get ( <str> ) == <str> : 		 from player import action_show_category action_show_category ( params )  elif params . get ( <str> ) == <str> : 		 from player import action_show_library action_show_library ( params )  elif params . get ( <str> ) == <str> : 		 from player import action_show_similar action_show_similar ( params )  elif params . get ( <str> ) == <str> : 		 vsdbg . _bp ( ) from player import action_add_media action_add_media ( params , load_settings ( ) )  elif params . get ( <str> ) == <str> : 		 vsdbg . _bp ( ) from backgrounds import update_service update_service ( show_progress = params . get ( <str> ) )  elif params . get ( <str> ) == <str> : 		 from backgrounds import scrape_nnm scrape_nnm ( )  elif params . get ( <str> ) == <str> : 		 from backgrounds import clean_movies clean_movies ( )  elif params . get ( <str> ) == <str> : 		 from context import main vsdbg . _bp ( ) main ( )  elif params . get ( <str> ) == <str> : 		 from backgrounds import add_media_process title = params . get ( <str> ) import urllib title = urllib . unquote_plus ( title ) title = title . decode ( <str> ) add_media_process ( title , params . get ( <str> ) )  else : 		 from player import menu_actions , dialog_action , main_menu if params . get ( <str> ) in menu_actions : 			 dialog_action ( menu_actions . index ( params . get ( <str> ) ) , load_settings ( ) , params )  else : 			 main_menu ( menu_actions )     