def executeJSONRPC ( q ) : 	 import json , xbmc s = json . dumps ( q ) res = xbmc . executeJSONRPC ( s ) return json . loads ( res )  class JSONRPC_API ( object ) : 	 def __init__ ( self , name ) : 		 self . _name = name  def __getattribute__ ( self , name ) : 		 _name = object . __getattribute__ ( self , <str> ) def run ( limits = { } , sort = { } , filter = { } , ** params ) : 			 q = { <str> : <str> , <str> : _name + <str> + name , <str> : params , <str> : <str> } if limits : 				 q [ <str> ] = limits  if sort : 				 q [ <str> ] = sort  if filter : 				 q [ <str> ] = filter  try : 				 res = executeJSONRPC ( q ) return res [ <str> ]  except KeyError : 				 return { }   return run   VideoLibrary = JSONRPC_API ( <str> ) JSONRPC = JSONRPC_API ( <str> ) GUI = JSONRPC_API ( <str> ) def remove_movie_by_id ( id ) : 	 r = VideoLibrary . RemoveMovie ( movieid = id ) pass  def update_movie_by_id ( self , id , fields = { } ) : 	 params = fields . copy ( ) params [ <str> ] = id r = VideoLibrary . SetMovieDetails ( ** params )  def get_tvshow ( tvshow_id ) : 	 res = VideoLibrary . GetTVShowDetails ( tvshowid = int ( tvshow_id ) , properties = [ <str> , <str> , <str> , <str> , <str> ] ) if <str> in res : 		 return res [ <str> ]  return res  def get_episodes ( tvshow_id ) : 	 result = VideoLibrary . GetEpisodes ( tvshowid = int ( tvshow_id ) , properties = [ <str> , <str> , <str> ] ) try : 		 return result [ <str> ]  except KeyError : 		 return [ ]   def get_tvshows ( imdb_id ) : 	 result = VideoLibrary . GetTVShows ( properties = [ <str> ] ) for show in result [ <str> ] : 		 if show [ <str> ] == imdb_id : 			 yield show [ <str> ]    def update_episode ( e , api_data ) : 	 params = { <str> : e [ <str> ] } for key in [ <str> , <str> ] : 		 params [ key ] = api_data [ key ]  result = VideoLibrary . SetEpisodeDetails ( ** params ) pass  def remove_episode ( e ) : 	 result = VideoLibrary . RemoveEpisode ( episodeid = e [ <str> ] )   