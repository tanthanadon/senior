import urllib , sys import log def make_url ( params ) : 	 url = <str> + urllib . urlencode ( params ) return url  def get_params ( ) : 	 if len ( sys . argv ) < 3 : 		 return None  param = dict ( ) paramstring = sys . argv [ 2 ] if len ( paramstring ) >= 2 : 		 params = sys . argv [ 2 ] cleanedparams = params . replace ( <str> , <str> ) if ( params [ len ( params ) - 1 ] == <str> ) : 			 params = params [ 0 : len ( params ) - 2 ]  pairsofparams = cleanedparams . split ( <str> ) param = { } for i in range ( len ( pairsofparams ) ) : 			 splitparams = { } splitparams = pairsofparams [ i ] . split ( <str> ) if ( len ( splitparams ) ) == 2 : 				 param [ splitparams [ 0 ] ] = splitparams [ 1 ]    return param  def ScanMonitor ( ) : 	 import xbmc class _ScanMonitor ( xbmc . Monitor ) : 		 def __init__ ( self ) : 			 log . debug ( <str> ) xbmc . Monitor . __init__ ( self ) self . do_exit = False self . do_start = xbmc . getCondVisibility ( <str> )  def onScanStarted ( self , library ) : 			 log . debug ( <str> ) if library == <str> : 				 self . do_start = True   def onScanFinished ( self , library ) : 			 log . debug ( <str> ) if library == <str> : 				 self . do_exit = True    return _ScanMonitor ( )  def wait_for_update ( timeout = 1000 , monitor = None ) : 	 try : 		 import xbmc log . debug ( <str> ) count = timeout if not monitor : 			 monitor = ScanMonitor ( )  if not monitor . do_start : 			 log . debug ( <str> ) del monitor return  while not monitor . abortRequested ( ) and count : 			 for i in xrange ( 10 ) : 				 if monitor . waitForAbort ( 0.1 ) or monitor . do_exit : 					 log . debug ( <str> ) del monitor return   if count % 10 == 1 : 				 if not xbmc . getCondVisibility ( <str> ) : 					 log . debug ( <str> ) break   count -= 1 log . debug ( <str> . format ( timeout - count ) )  del monitor  except BaseException : 		 log . print_tb ( ) import time time . sleep ( 1 )   def UpdateVideoLibrary ( path = None , wait = False ) : 	 import xbmc , log if path : 		 if isinstance ( path , unicode ) : 			 path = path . encode ( <str> )  log . debug ( <str> . format ( path ) ) command = <str> . format ( path )  else : 		 command = <str>  if wait : 		 monitor = ScanMonitor ( ) while not monitor . abortRequested ( ) : 			 if not monitor . do_start or monitor . do_exit : 				 break  xbmc . sleep ( 100 )  monitor . do_start = False  xbmc . executebuiltin ( command , wait ) if wait : 		 log . debug ( <str> ) while not monitor . abortRequested ( ) : 			 if monitor . do_start : 				 break  xbmc . sleep ( 100 )  wait_for_update ( monitor = monitor )   def string_to_ver ( s ) : 	 import re m = re . search ( <str> , s ) if m : 		 return ( m . group ( 1 ) , m . group ( 2 ) )   def kodi_ver ( ) : 	 import xbmc bv = xbmc . getInfoLabel ( <str> ) BuildVersions = string_to_ver ( bv ) res = { } res [ <str> ] = int ( BuildVersions [ 0 ] ) res [ <str> ] = int ( BuildVersions [ 1 ] ) return res  def RunPlugin ( ** kwargs ) : 	 import xbmc url = make_url ( kwargs ) xbmc . executebuiltin ( <str> % url )  def RunPluginSync ( ** kwargs ) : 	 import xbmc url = make_url ( kwargs ) xbmc . executebuiltin ( <str> % url , wait = True )  if __name__ == <str> : 	 r = string_to_ver ( <str> )    