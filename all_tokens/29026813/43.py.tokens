 import os , filesystem class QulityType : 	 Q720 = <str> Q1080 = <str> Q2160 = <str>  class CodecType : 	 MPGSD = <str> MPGHD = <str> MPGUHD = <str>  class TorrentPlayer : 	 YATP = <str> TORR2HTTP = <str>  class FakeProgressDlg ( object ) : 	 def update ( self , * args ) : 		 pass   _addon_name = <str> class Settings ( object ) : 	 base_url = <str> current_settings = None def __init__ ( self , base_path , movies_path = <str> , animation_path = <str> , documentary_path = <str> , anime_path = <str> , hdclub_passkey = <str> , bluebird_passkey = None , bluebird_preload_torrents = False , bluebird_login = <str> , bluebird_password = <str> , bluebird_nouhd = True , anidub_login = <str> , anidub_password = <str> , anidub_rss = True , anidub_favorite = True , nnmclub_login = <str> , nnmclub_password = <str> , nnmclub_pages = 1 , nnmclub_hours = 168 , nnmclub_domain = <str> , nnmclub_use_ssl = False , rutor_domain = <str> , rutor_filter = <str> , soap4me_login = <str> , soap4me_password = <str> , soap4me_rss = <str> , preffered_bitrate = 10000 , preffered_type = QulityType . Q1080 , preffered_codec = CodecType . MPGHD , torrent_player = TorrentPlayer . YATP , storage_path = <str> , movies_save = True , animation_save = True , documentary_save = True , anime_save = True , tvshows_save = True , animation_tvshows_save = True , torrent_path = <str> , addon_data_path = <str> , kp_googlecache = False , kp_usezaborona = False , rutor_nosd = True ) : 		 Settings . current_settings = self self . movies_url = self . base_url + <str> + hdclub_passkey self . animation_url = self . base_url + <str> + hdclub_passkey self . documentary_url = self . base_url + <str> + hdclub_passkey self . hdclub_passkey = hdclub_passkey self . bluebird_passkey = bluebird_passkey self . bluebird_login = bluebird_login self . bluebird_password = bluebird_password self . bluebird_preload_torrents = bluebird_preload_torrents self . bluebird_nouhd = bluebird_nouhd self . __base_path = filesystem . abspath ( base_path ) self . __movies_path = movies_path self . __animation_path = animation_path self . __documentary_path = documentary_path self . anidub_url = <str> self . __anime_tvshow_path = anime_path self . anidub_login = anidub_login self . anidub_password = anidub_password self . anidub_rss = anidub_rss self . anidub_favorite = anidub_favorite self . nnmclub_domain = nnmclub_domain self . nnmclub_use_ssl = nnmclub_use_ssl self . nnmclub_login = nnmclub_login self . nnmclub_password = nnmclub_password self . nnmclub_pages = nnmclub_pages self . nnmclub_hours = nnmclub_hours self . use_kinopoisk = True self . use_worldart = True self . show_sources = False self . rutor_domain = rutor_domain self . rutor_filter = rutor_filter self . soap4me_login = soap4me_login self . soap4me_password = soap4me_password self . soap4me_rss = soap4me_rss self . preffered_bitrate = preffered_bitrate self . preffered_type = preffered_type self . preffered_codec = preffered_codec if preffered_codec else CodecType . MPGHD self . torrent_player = torrent_player self . storage_path = storage_path self . movies_save = movies_save self . animation_save = animation_save self . documentary_save = documentary_save self . anime_save = anime_save self . tvshows_save = tvshows_save self . animation_tvshows_save = animation_tvshows_save self . torrent_path = torrent_path self . addon_data_path = addon_data_path self . kp_googlecache = kp_googlecache self . kp_usezaborona = kp_usezaborona self . rutor_nosd = rutor_nosd self . progress_dialog = FakeProgressDlg ( ) self . update_paths = set ( ) self . kinohd_enable = False self . kinohd_4k = True self . kinohd_1080p = True self . kinohd_720p = True self . kinohd_3d = True self . kinohd_serial = True  def __repr__ ( self ) : 		 attrs = vars ( self ) result = <str> for key , value in attrs . items ( ) : 			 if <str> in key : 				 continue  if result != <str> : 				 result += <str>  key = key . replace ( <str> , <str> ) result += <str> % ( key , value )  return result  @ property def addon_name ( self ) : 		 return _addon_name  def base_path ( self ) : 		 return self . __base_path  def movies_path ( self ) : 		 return filesystem . join ( self . __base_path , self . __movies_path )  def animation_path ( self ) : 		 return filesystem . join ( self . __base_path , self . __animation_path )  def documentary_path ( self ) : 		 return filesystem . join ( self . __base_path , self . __documentary_path )  def anime_tvshow_path ( self ) : 		 return filesystem . join ( self . __base_path , self . __anime_tvshow_path )  def animation_tvshow_path ( self ) : 		 return filesystem . join ( self . __base_path , <str> )  def tvshow_path ( self ) : 		 return filesystem . join ( self . __base_path , <str> )  def torrents_path ( self ) : 		 return self . torrent_path if self . torrent_path else self . addon_data_path    