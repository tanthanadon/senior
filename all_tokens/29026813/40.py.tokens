import log from log import debug from base import * import os , urllib2 , sys , filesystem class STRMWriter ( STRMWriterBase ) : 	 def __init__ ( self , link ) : 		 self . link = link  def write ( self , filename , path , seasonNumber = None , episodeNumber = None , cutname = None , index = None , parser = None , settings = None ) : 		 if not hasattr ( settings , <str> ) : 			 debug ( <str> )  strmFilename = make_fullpath ( filename , <str> ) strmFilename = filesystem . join ( path , strmFilename ) link = <str> link += urllib2 . quote ( self . link . encode ( <str> ) ) if episodeNumber != None : 			 link += <str> + str ( episodeNumber - 1 )  if seasonNumber != None : 			 link += <str> + str ( seasonNumber )  if cutname != None : 			 link += <str> + urllib2 . quote ( cutname )  if index != None : 			 link += <str> + str ( index )  if parser is not None : 			 self . make_alternative ( strmFilename , link , parser ) link_with_min_rank = STRMWriterBase . get_link_with_min_rank ( strmFilename , settings ) if not link_with_min_rank is None : 				 link = link_with_min_rank   link += <str> + urllib2 . quote ( make_fullpath ( filename , <str> ) . encode ( <str> ) ) if settings != None : 			 path = filesystem . relpath ( path , settings . base_path ( ) ) debug ( path ) link += <str> + urllib2 . quote ( path . encode ( <str> ) )  if filesystem . exists ( strmFilename ) : 			 with filesystem . fopen ( strmFilename , <str> ) as f : 				 old_link = f . read ( ) if old_link . decode ( <str> ) == link : 					 return    try : 			 with filesystem . fopen ( strmFilename , <str> ) as f : 				 f . write ( link . encode ( <str> ) )   except IOError : 			 debug ( <str> + strmFilename . encode ( <str> ) ) return     