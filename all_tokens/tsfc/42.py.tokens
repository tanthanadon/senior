from abc import ABCMeta , abstractmethod from gem . node import Node as NodeBase class Node ( NodeBase ) :      __slots__ = ( )  class Terminal ( Node , metaclass = ABCMeta ) :      __slots__ = ( ) children = ( ) @ abstractmethod def loop_shape ( self , free_indices ) :          pass   class Evaluate ( Terminal ) :      __slots__ = ( <str> , ) __front__ = ( <str> , ) def __init__ ( self , expression ) :          self . expression = expression  def loop_shape ( self , free_indices ) :          return free_indices ( self . expression )   class Initialise ( Terminal ) :      __slots__ = ( <str> , ) __front__ = ( <str> , ) def __init__ ( self , indexsum ) :          self . indexsum = indexsum  def loop_shape ( self , free_indices ) :          return free_indices ( self . indexsum )   class Accumulate ( Terminal ) :      __slots__ = ( <str> , ) __front__ = ( <str> , ) def __init__ ( self , indexsum ) :          self . indexsum = indexsum  def loop_shape ( self , free_indices ) :          return free_indices ( self . indexsum . children [ 0 ] )   class Noop ( Terminal ) :      __slots__ = ( <str> , ) __front__ = ( <str> , ) def __init__ ( self , expression ) :          self . expression = expression  def loop_shape ( self , free_indices ) :          return free_indices ( self . expression )   class Return ( Terminal ) :      __slots__ = ( <str> , <str> ) __front__ = ( <str> , <str> ) def __init__ ( self , variable , expression ) :          assert set ( variable . free_indices ) >= set ( expression . free_indices ) self . variable = variable self . expression = expression  def loop_shape ( self , free_indices ) :          return free_indices ( self . variable )   class ReturnAccumulate ( Terminal ) :      __slots__ = ( <str> , <str> ) __front__ = ( <str> , <str> ) def __init__ ( self , variable , indexsum ) :          assert set ( variable . free_indices ) == set ( indexsum . free_indices ) self . variable = variable self . indexsum = indexsum  def loop_shape ( self , free_indices ) :          return free_indices ( self . indexsum . children [ 0 ] )   class Block ( Node ) :      __slots__ = ( <str> , ) def __init__ ( self , statements ) :          self . children = tuple ( statements )   class For ( Node ) :      __slots__ = ( <str> , <str> ) __front__ = ( <str> , ) def __new__ ( cls , index , statement ) :          assert isinstance ( statement , Block ) if not statement . children :              return Noop ( None )  else :              return super ( For , cls ) . __new__ ( cls )   def __init__ ( self , index , statement ) :          self . index = index self . children = ( statement , )    