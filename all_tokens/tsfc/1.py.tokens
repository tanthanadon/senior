from functools import reduce from gem import index_sum , Sum from gem . optimise import unroll_indexsum from gem . unconcatenate import unconcatenate def Integrals ( expressions , quadrature_multiindex , argument_multiindices , parameters ) :      max_extent = parameters [ <str> ] if max_extent :          def predicate ( index ) :              return index . extent <= max_extent  expressions = unroll_indexsum ( expressions , predicate = predicate )  return [ index_sum ( e , quadrature_multiindex ) for e in expressions ]  def flatten ( var_reps , index_cache ) :      return unconcatenate ( [ ( variable , reduce ( Sum , reps ) ) for variable , reps in var_reps ] , cache = index_cache )  finalise_options = dict ( remove_componenttensors = False )  