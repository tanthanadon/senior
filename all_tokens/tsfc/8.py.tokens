from ufl . classes import ( ReferenceValue , ReferenceGrad , NegativeRestricted , PositiveRestricted , Restricted , ConstantValue , Jacobian , SpatialCoordinate , Zero ) from ufl . checks import is_cellwise_constant class ModifiedTerminal ( object ) :      def __init__ ( self , expr , terminal , local_derivatives , restriction , reference_value ) :          self . expr = expr self . terminal = terminal self . reference_value = reference_value self . restriction = restriction self . local_derivatives = local_derivatives  def as_tuple ( self ) :          t = self . terminal rv = self . reference_value ld = self . local_derivatives r = self . restriction return ( t , rv , ld , r )  def __hash__ ( self ) :          return hash ( self . as_tuple ( ) )  def __eq__ ( self , other ) :          return isinstance ( other , ModifiedTerminal ) and self . as_tuple ( ) == other . as_tuple ( )  def __lt__ ( self , other ) :          return self . as_tuple ( ) < other . as_tuple ( )  def __str__ ( self ) :          s = [ ] s += [ <str> . format ( self . terminal ) ] s += [ <str> . format ( self . local_derivatives ) ] s += [ <str> . format ( self . restriction ) ] return <str> . join ( s )   def is_modified_terminal ( v ) :      <str> while not v . _ufl_is_terminal_ :          if v . _ufl_is_terminal_modifier_ :              v = v . ufl_operands [ 0 ]  else :              return False   return True  def strip_modified_terminal ( v ) :      <str> while not v . _ufl_is_terminal_ :          if v . _ufl_is_terminal_modifier_ :              v = v . ufl_operands [ 0 ]  else :              return None   return v  def analyse_modified_terminal ( expr ) :      local_derivatives = 0 reference_value = None restriction = None t = expr while not t . _ufl_is_terminal_ :          if isinstance ( t , ReferenceValue ) :              assert reference_value is None , <str> reference_value = True t , = t . ufl_operands  elif isinstance ( t , ReferenceGrad ) :              local_derivatives += 1 t , = t . ufl_operands  elif isinstance ( t , Restricted ) :              assert restriction is None , <str> restriction = t . _side t , = t . ufl_operands  elif t . _ufl_terminal_modifiers_ :              raise ValueError ( <str> % ( type ( t ) , repr ( t ) ) )  else :              raise ValueError ( <str> % ( type ( t ) , repr ( t ) ) )   if reference_value is None :          reference_value = False  if isinstance ( t , ( SpatialCoordinate , Jacobian ) ) :          pass  else :          if local_derivatives and not reference_value :              raise ValueError ( <str> )   return ModifiedTerminal ( expr , t , local_derivatives , restriction , reference_value )  def construct_modified_terminal ( mt , terminal ) :      expr = terminal if mt . reference_value :          expr = ReferenceValue ( expr )  dim = expr . ufl_domain ( ) . topological_dimension ( ) for n in range ( mt . local_derivatives ) :          if is_cellwise_constant ( expr ) :              expr = Zero ( expr . ufl_shape + ( dim , ) , expr . ufl_free_indices , expr . ufl_index_dimensions )  else :              expr = ReferenceGrad ( expr )   if not isinstance ( expr , ConstantValue ) :          if mt . restriction == <str> :              expr = PositiveRestricted ( expr )  elif mt . restriction == <str> :              expr = NegativeRestricted ( expr )   return expr   