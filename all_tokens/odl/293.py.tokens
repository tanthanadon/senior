import numpy as np import odl reco_space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 300 , 300 ] , dtype = <str> ) angle_partition = odl . uniform_partition ( 0 , np . pi , 1000 ) detector_partition = odl . uniform_partition ( - 30 , 30 , 500 ) geometry = odl . tomo . Parallel2dGeometry ( angle_partition , detector_partition ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry ) fourier = odl . trafos . FourierTransform ( ray_trafo . range , axes = [ 1 ] ) ramp_function = fourier . range . element ( lambda x : np . abs ( x [ 1 ] ) / ( 2 * np . pi ) ) ramp_filter = fourier . inverse * ramp_function * fourier fbp = ray_trafo . adjoint * ramp_filter phantom = odl . phantom . shepp_logan ( reco_space , modified = True ) proj_data = ray_trafo ( phantom ) fbp_reconstruction = fbp ( proj_data ) phantom . show ( title = <str> ) proj_data . show ( title = <str> ) fbp_reconstruction . show ( title = <str> ) ( phantom - fbp_reconstruction ) . show ( title = <str> , force_show = True )  