from __future__ import division import odl from odl . solvers import dca , prox_dca , doubleprox_dc from odl . solvers . nonsmooth . difference_convex import doubleprox_dc_simple import numpy as np import pytest HIGH_ACCURACY = 8 LOW_ACCURACY = 4 def test_dca ( ) :      a = 0.5 b = 0.5 space = odl . rn ( 1 ) f = a / 2 * odl . solvers . L2NormSquared ( space ) . translated ( b ) g = odl . solvers . L1Norm ( space ) niter = 50 x = space . element ( - 0.5 ) x_dca = x . copy ( ) x_prox_dca = x . copy ( ) x_doubleprox = x . copy ( ) x_simpl = x . copy ( ) phi = odl . solvers . ZeroFunctional ( space ) y = space . element ( 3 ) y_simpl = y . copy ( ) gamma = 1 mu = 1 K = odl . IdentityOperator ( space ) dca ( x_dca , f , g , niter ) prox_dca ( x_prox_dca , f , g , niter , gamma ) doubleprox_dc ( x_doubleprox , y , f , phi , g , K , niter , gamma , mu ) doubleprox_dc_simple ( x_simpl , y_simpl , f , phi , g , K , niter , gamma , mu ) expected = np . asarray ( [ b - 1 / a , 0 , b + 1 / a ] ) dist_dca = np . min ( np . abs ( expected - float ( x_dca ) ) ) dist_prox_dca = np . min ( np . abs ( expected - float ( x_prox_dca ) ) ) dist_prox_doubleprox = np . min ( np . abs ( expected - float ( x_doubleprox ) ) ) assert float ( x_simpl ) == pytest . approx ( float ( x_doubleprox ) ) assert float ( y_simpl ) == pytest . approx ( float ( y ) ) assert float ( dist_dca ) == pytest . approx ( 0 , abs = 1e-6 ) assert float ( dist_prox_dca ) == pytest . approx ( 0 , abs = 1e-6 ) assert float ( dist_prox_doubleprox ) == pytest . approx ( 0 , abs = 1e-6 )   