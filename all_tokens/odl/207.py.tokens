from __future__ import division import odl from odl . solvers . nonsmooth import adupdates from odl . solvers . nonsmooth . alternating_dual_updates import adupdates_simple from odl . util . testutils import all_almost_equal HIGH_ACCURACY = 8 LOW_ACCURACY = 4 def test_adupdates ( ) :      mat1 = [ [ 1 , 1 / 2 , 1 / 3 , 1 / 4 ] , [ 1 / 2 , 1 / 3 , 1 / 4 , 1 / 5 ] ] mat2 = [ [ 1 / 3 , 1 / 4 , 1 / 5 , 1 / 6 ] , [ 1 / 4 , 1 / 5 , 1 / 6 , 1 / 7 ] ] mat1op = odl . MatrixOperator ( mat1 ) mat2op = odl . MatrixOperator ( mat2 ) domain = mat1op . domain tv1 = odl . MatrixOperator ( [ [ 1.0 , - 1.0 , 0.0 , 0.0 ] ] ) tv2 = odl . MatrixOperator ( [ [ 0.0 , 0.0 , 1.0 , - 1.0 ] ] ) tv3 = odl . MatrixOperator ( [ [ 0.0 , 1.0 , - 1.0 , 0.0 ] ] ) nneg = odl . IdentityOperator ( domain ) ops = [ mat1op , mat2op , odl . BroadcastOperator ( tv1 , tv2 ) , tv3 , nneg ] mat1s = 1 / mat1op ( mat1op . adjoint ( mat1op . range . one ( ) ) ) mat2s = 1 / mat2op ( mat2op . adjoint ( mat2op . range . one ( ) ) ) tv1s = [ 0.5 , 0.5 ] tv2s = 0.5 nnegs = nneg . range . element ( [ 1.0 , 1.0 , 1.0 , 1.0 ] ) inner_stepsizes = [ mat1s , mat2s , tv1s , tv2s , nnegs ] expected_solution = domain . element ( [ 1 , 1 , 1 , 1 ] ) rhs1 = mat1op ( expected_solution ) rhs2 = mat2op ( expected_solution ) fid1 = odl . solvers . L2NormSquared ( mat1op . range ) . translated ( rhs1 ) fid2 = odl . solvers . L2NormSquared ( mat2op . range ) . translated ( rhs2 ) reg1 = odl . solvers . L1Norm ( tv1 . range ) reg2 = odl . solvers . L1Norm ( tv2 . range ) reg3 = odl . solvers . L1Norm ( tv3 . range ) ind = odl . solvers . IndicatorNonnegativity ( nneg . range ) funcs = [ fid1 , fid2 , odl . solvers . SeparableSum ( reg1 , reg2 ) , reg3 , ind ] x = tv1 . domain . zero ( ) x_simple = tv1 . domain . zero ( ) stepsize = 1.0 niter = 10 adupdates ( x , funcs , ops , stepsize , inner_stepsizes , niter ) adupdates_simple ( x_simple , funcs , ops , stepsize , inner_stepsizes , niter ) assert all_almost_equal ( x , x_simple ) assert domain . dist ( x , expected_solution ) < 3e-2  if __name__ == <str> :      odl . util . test_file ( __file__ )   