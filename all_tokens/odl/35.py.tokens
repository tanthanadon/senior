from __future__ import print_function , division , absolute_import __all__ = ( <str> , <str> , <str> ) def dca ( x , f , g , niter , callback = None ) :      <str> space = f . domain if g . domain != space :          raise ValueError ( <str> <str> . format ( space , g . domain ) )  f_convex_conj = f . convex_conj for _ in range ( niter ) :          f_convex_conj . gradient ( g . gradient ( x ) , out = x ) if callback is not None :              callback ( x )    def prox_dca ( x , f , g , niter , gamma , callback = None ) :      <str> space = f . domain if g . domain != space :          raise ValueError ( <str> <str> . format ( space , g . domain ) )  for _ in range ( niter ) :          f . proximal ( gamma ) ( x . lincomb ( 1 , x , gamma , g . gradient ( x ) ) , out = x ) if callback is not None :              callback ( x )    def doubleprox_dc ( x , y , f , phi , g , K , niter , gamma , mu , callback = None ) :      <str> primal_space = f . domain dual_space = g . domain if phi . domain != primal_space :          raise ValueError ( <str> <str> . format ( primal_space , phi . domain ) )  if K . domain != primal_space :          raise ValueError ( <str> <str> . format ( primal_space , K . domain ) )  if K . range != dual_space :          raise ValueError ( <str> <str> . format ( dual_space , K . range ) )  g_convex_conj = g . convex_conj for _ in range ( niter ) :          f . proximal ( gamma ) ( x . lincomb ( 1 , x , gamma , K . adjoint ( y ) - phi . gradient ( x ) ) , out = x ) g_convex_conj . proximal ( mu ) ( y . lincomb ( 1 , y , mu , K ( x ) ) , out = y ) if callback is not None :              callback ( x )    def doubleprox_dc_simple ( x , y , f , phi , g , K , niter , gamma , mu ) :      for _ in range ( niter ) :          f . proximal ( gamma ) ( x + gamma * K . adjoint ( y ) - gamma * phi . gradient ( x ) , out = x ) g . convex_conj . proximal ( mu ) ( y + mu * K ( x ) , out = y )    