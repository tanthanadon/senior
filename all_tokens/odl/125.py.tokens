import numpy as np import skimage . transform from odl . contrib . datasets . util import get_data __all__ = ( <str> , <str> , <str> , <str> , <str> ) DATA_SUBSET = <str> URL_CAM = <str> def convert ( image , shape , gray = False , dtype = <str> , normalize = <str> ) :      image = image . astype ( dtype ) if gray :          image [ ... , 0 ] *= 0.2126 image [ ... , 1 ] *= 0.7152 image [ ... , 2 ] *= 0.0722 image = np . sum ( image , axis = 2 )  if shape is not None :          image = skimage . transform . resize ( image , shape , mode = <str> ) image = image . astype ( dtype )  if normalize == <str> :          image /= image . max ( )  elif normalize == <str> :          image /= image . sum ( )  else :          assert False  return image  def brain_phantom ( shape = None ) :      name = <str> url = URL_CAM + name dct = get_data ( name , subset = DATA_SUBSET , url = url ) im = np . rot90 ( dct [ <str> ] , k = 3 ) return convert ( im , shape )  def resolution_phantom ( shape = None ) :      name = <str> url = URL_CAM + name dct = get_data ( name , subset = DATA_SUBSET , url = url ) im = np . rot90 ( dct [ <str> ] , k = 3 ) return convert ( im , shape )  def building ( shape = None , gray = False ) :      name = <str> url = URL_CAM + name dct = get_data ( name , subset = DATA_SUBSET , url = url ) im = np . rot90 ( dct [ <str> ] , k = 3 ) return convert ( im , shape , gray = gray )  def rings ( shape = None , gray = False ) :      name = <str> url = URL_CAM + name dct = get_data ( name , subset = DATA_SUBSET , url = url ) im = np . rot90 ( dct [ <str> ] , k = 2 ) return convert ( im , shape , gray = gray )  def blurring_kernel ( shape = None ) :      name = <str> url = URL_CAM + name dct = get_data ( name , subset = DATA_SUBSET , url = url ) return convert ( 255 - dct [ <str> ] , shape , normalize = <str> )  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   