import numpy as np import pytest import odl import odl . contrib . fom def test_estimate_noise_std_constant_1d ( ) :      img = np . zeros ( 10 ) result = odl . contrib . fom . estimate_noise_std ( img ) assert pytest . approx ( result ) == 0.0  def test_estimate_noise_std_normal_1d ( ) :      img = np . random . randn ( 1000 ) result = odl . contrib . fom . estimate_noise_std ( img ) expected = np . std ( img ) assert pytest . approx ( result , abs = 0.2 ) == expected  def test_estimate_noise_std_normal_2d ( ) :      img = np . random . randn ( 100 , 100 ) result = odl . contrib . fom . estimate_noise_std ( img ) expected = np . std ( img ) assert pytest . approx ( result , abs = 0.2 ) == expected  def test_estimate_noise_std_normal_4d ( ) :      img = np . random . randn ( 10 , 10 , 10 , 10 ) result = odl . contrib . fom . estimate_noise_std ( img ) expected = np . std ( img ) assert pytest . approx ( result , abs = 0.2 ) == expected  def test_estimate_noise_std_normal_large_1d ( ) :      img = np . random . randn ( 100000 ) result = odl . contrib . fom . estimate_noise_std ( img ) expected = np . std ( img ) assert pytest . approx ( result , abs = 0.01 ) == expected  def test_estimate_noise_std_normal_2d_pointwise ( ) :      img = np . random . randn ( 100 , 100 ) result = odl . contrib . fom . estimate_noise_std ( img , average = False ) result_mean = np . mean ( result ) expected = np . std ( img ) assert result . shape == img . shape assert result . dtype == result . dtype assert pytest . approx ( result_mean , abs = 0.25 ) == expected  if __name__ == <str> :      odl . util . test_file ( __file__ )   