from __future__ import print_function , division , absolute_import import tensorflow as tf import numpy as np import odl __all__ = ( <str> , ) class TensorflowOperator ( odl . Operator ) :      def __init__ ( self , input_tensor , output_tensor , domain = None , range = None , linear = False , sess = None ) :          self . input_tensor = input_tensor self . output_tensor = output_tensor if domain is None :              domain = odl . tensor_space ( input_tensor . shape . as_list ( ) , dtype = input_tensor . dtype . as_numpy_dtype )  if range is None :              range = odl . tensor_space ( output_tensor . shape . as_list ( ) , dtype = output_tensor . dtype . as_numpy_dtype )  self . adjoint_weight = domain . weighting . const / range . weighting . const self . dx = tf . placeholder ( input_tensor . dtype , shape = input_tensor . shape ) self . dy = tf . placeholder ( output_tensor . dtype , shape = output_tensor . shape ) adjoint_of_derivative_tensor = tf . gradients ( self . output_tensor , [ self . input_tensor ] , [ self . dy ] ) [ 0 ] self . adjoint_of_derivative_tensor = ( range . weighting . const * adjoint_of_derivative_tensor ) derivative_tensor = tf . gradients ( adjoint_of_derivative_tensor , [ self . dy ] , [ self . dx ] ) [ 0 ] self . derivative_tensor = ( range . weighting . const * derivative_tensor ) if sess is None :              self . sess = tf . get_default_session ( )  else :              self . sess = sess  super ( TensorflowOperator , self ) . __init__ ( domain , range , linear = linear )  def _call ( self , x ) :          result = self . sess . run ( self . output_tensor , feed_dict = { self . input_tensor : np . asarray ( x ) } ) return result  def derivative ( self , x ) :          op = self class TensorflowOperatorDerivative ( odl . Operator ) :              def _call ( self , dx ) :                  result = op . sess . run ( op . derivative_tensor , feed_dict = { op . input_tensor : np . asarray ( x ) , op . dx : np . asarray ( dx ) } ) return result  @ property def adjoint ( self ) :                  class TensorflowOperatorDerivativeAdjoint ( odl . Operator ) :                      def _call ( self , y ) :                          result = op . sess . run ( op . adjoint_of_derivative_tensor , feed_dict = { op . input_tensor : np . asarray ( x ) , op . dy : np . asarray ( y ) } ) result *= op . adjoint_weight return result   return TensorflowOperatorDerivativeAdjoint ( self . range , self . domain , linear = True )   return TensorflowOperatorDerivative ( self . domain , self . range , linear = True )   if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   