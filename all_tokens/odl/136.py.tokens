import tensorflow as tf import numpy as np import odl import odl . contrib . tensorflow sess = tf . InteractiveSession ( ) space = odl . uniform_discr ( [ - 64 , - 64 ] , [ 64 , 64 ] , [ 128 , 128 ] , dtype = <str> ) geometry = odl . tomo . parallel_beam_geometry ( space ) ray_transform = odl . tomo . RayTransform ( space , geometry ) grad = odl . Gradient ( space ) phantom = odl . phantom . shepp_logan ( space , True ) data = ray_transform ( phantom ) noisy_data = data + odl . phantom . white_noise ( data . space ) ray_transform_layer = odl . contrib . tensorflow . as_tensorflow_layer ( ray_transform , name = <str> ) grad_layer = odl . contrib . tensorflow . as_tensorflow_layer ( grad , name = <str> ) x = tf . Variable ( tf . zeros ( shape = space . shape ) , name = <str> ) y = tf . constant ( np . asarray ( noisy_data ) ) x_reshaped = x [ None , ... , None ] y_reshaped = y [ None , ... , None ] loss = ( tf . reduce_sum ( ( ray_transform_layer ( x_reshaped ) - y_reshaped ) ** 2 ) + 50 * tf . reduce_sum ( tf . abs ( grad_layer ( x_reshaped ) ) ) ) optimizer = tf . train . AdamOptimizer ( 1e-1 ) . minimize ( loss ) tf . global_variables_initializer ( ) . run ( ) callback = odl . solvers . CallbackShow ( ) for i in range ( 200 ) :      sess . run ( optimizer ) callback ( space . element ( x . eval ( ) ) )   