from __future__ import division import numpy as np import pytest import odl from odl . util . normalize import ( normalized_scalar_param_list , normalized_axes_tuple ) from odl . util . testutils import simple_fixture length = simple_fixture ( <str> , [ 1 , 2 ] ) single_conv_params = [ ( - 1.0 , float ) , ( 2 , float ) , ( <str> , float ) , ( np . array ( 2.3 , dtype = float ) , float ) , ( np . array ( 2 , dtype = int ) , float ) , ( - 1 , int ) , ( <str> , int ) , ( np . array ( 2 , dtype = int ) , int ) , ( 1 , bool ) , ( False , bool ) ] single_conv_ids = [ <str> . format ( p ) for p in single_conv_params ] @ pytest . fixture ( scope = <str> , ids = single_conv_ids , params = single_conv_params ) def single_conv ( request ) :      return request . param  lengts = [ 1 , 2 , 5 ] seq_conv_params = [ ( [ - 1.0 ] , float ) , ( ( 2 , ) , float ) , ( [ <str> ] , float ) , ( [ np . array ( 2.3 , dtype = float ) ] , float ) , ( [ np . array ( 2 , dtype = int ) ] , float ) , ( ( - 1 , ) , int ) , ( [ <str> ] , int ) , ( ( np . array ( 2 , dtype = int ) , ) , int ) , ( [ 1 ] , bool ) , ( ( False , ) , bool ) ] seq_conv_ids = [ <str> . format ( p ) for p in seq_conv_params ] @ pytest . fixture ( scope = <str> , ids = seq_conv_ids , params = seq_conv_params ) def seq_conv ( request ) :      return request . param  axes_conv_params = [ ( 0 , ( 0 , ) ) , ( - 1 , ( 2 , ) ) , ( ( 1 , ) , ( 1 , ) ) , ( [ - 1 ] , ( 2 , ) ) , ( ( 1 , 2 , 0 ) , ( 1 , 2 , 0 ) ) , ( ( 2 , 1 , - 3 ) , ( 2 , 1 , 0 ) ) , ( [ 0 , 1 ] , ( 0 , 1 ) ) , ( np . arange ( 2 ) , ( 0 , 1 ) ) ] axes_conv_ids = [ <str> . format ( axis ) for axis in axes_conv_params ] @ pytest . fixture ( scope = <str> , ids = axes_conv_ids , params = axes_conv_params ) def axes_conv ( request ) :      return request . param  def test_normalized_scalar_param_list_single_val ( length , single_conv ) :      value , conversion = single_conv expected_noconv = [ value ] * length norm_param_noconv = normalized_scalar_param_list ( value , length ) assert expected_noconv == norm_param_noconv expected_conv = [ conversion ( value ) ] * length norm_param_conv = normalized_scalar_param_list ( value , length , param_conv = conversion ) assert expected_conv == norm_param_conv  def test_normalized_scalar_param_list_sequence ( length , seq_conv ) :      value , conversion = seq_conv value = value * length expected_noconv = list ( value ) norm_param_noconv = normalized_scalar_param_list ( value , length ) assert expected_noconv == norm_param_noconv expected_conv = [ conversion ( v ) for v in value ] norm_param_conv = normalized_scalar_param_list ( value , length , param_conv = conversion ) assert expected_conv == norm_param_conv  def test_normalized_scalar_param_list_with_none ( ) :      param1 = [ 1 , None , 0 ] def conv_int_none ( x ) :          if x is None :              return 0  else :              return int ( x )   norm_param_noconv = normalized_scalar_param_list ( param1 , length = 3 ) assert norm_param_noconv == param1 norm_param_conv1 = normalized_scalar_param_list ( param1 , length = 3 , param_conv = conv_int_none , keep_none = True ) assert norm_param_conv1 == param1 norm_param_conv2 = normalized_scalar_param_list ( param1 , length = 3 , param_conv = conv_int_none , keep_none = False ) assert norm_param_conv2 == [ 1 , 0 , 0 ] norm_param_noconv = normalized_scalar_param_list ( None , length = 3 ) assert norm_param_noconv == [ None ] * 3 norm_param_conv1 = normalized_scalar_param_list ( None , length = 3 , param_conv = conv_int_none , keep_none = True ) assert norm_param_conv1 == [ None ] * 3 norm_param_conv2 = normalized_scalar_param_list ( None , length = 3 , param_conv = conv_int_none , keep_none = False ) assert norm_param_conv2 == [ 0 ] * 3  def test_normalized_scalar_param_list_error ( ) :      with pytest . raises ( ValueError ) :          normalized_scalar_param_list ( [ 1 , 2 ] , length = 3 )   def test_normalized_axes_tuple ( axes_conv ) :      axes , conversion = axes_conv assert normalized_axes_tuple ( axes , ndim = 3 ) == conversion  def test_normalized_axes_tuple_raise ( ) :      with pytest . raises ( TypeError ) :          normalized_axes_tuple ( 1.5 , ndim = 3 )  with pytest . raises ( TypeError ) :          normalized_axes_tuple ( None , ndim = 3 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( ( 0 , 1.5 ) , ndim = 3 )  with pytest . raises ( TypeError ) :          normalized_axes_tuple ( ( 0 , None ) , ndim = 3 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( ( 0 , 0 , 1 ) , ndim = 3 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( ( 0 , ) , ndim = 0 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( ( 0 , 1 ) , ndim = 1 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( - 3 , ndim = 2 )  with pytest . raises ( ValueError ) :          normalized_axes_tuple ( ( 0 , 2 ) , ndim = 2 )   if __name__ == <str> :      odl . util . test_file ( __file__ )   