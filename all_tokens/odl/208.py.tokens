from __future__ import division import numpy as np import scipy . special import odl from odl . solvers . nonsmooth . proximal_operators import ( combine_proximals , proximal_const_func , proximal_box_constraint , proximal_nonnegativity , proximal_convex_conj_l1 , proximal_convex_conj_l1_l2 , proximal_l2 , proximal_convex_conj_l2_squared , proximal_convex_conj_kl , proximal_convex_conj_kl_cross_entropy ) from odl . util . testutils import all_almost_equal HIGH_ACC = 8 LOW_ACC = 4 def test_proximal_const_func ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x = space . element ( np . arange ( - 5 , 5 ) ) prox_factory = proximal_const_func ( space ) prox = prox_factory ( None ) assert isinstance ( prox , odl . IdentityOperator ) x_opt = prox ( x ) assert x == x_opt  def test_proximal_box_constraint ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x = space . element ( np . arange ( - 5 , 5 ) ) for lower in [ None , - 2 , - 2.0 * space . one ( ) ] :          for upper in [ None , 2 , 2.0 * space . one ( ) ] :              prox_factory = proximal_box_constraint ( space , lower = lower , upper = upper ) prox = prox_factory ( 1.0 ) result = prox ( x ) . asarray ( ) lower_np = - np . inf if lower is None else lower upper_np = np . inf if upper is None else upper result_np = np . minimum ( np . maximum ( x , lower_np ) , upper_np ) . asarray ( ) assert all_almost_equal ( result_np , result )    def test_proximal_nonnegativity ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x = space . element ( np . arange ( - 5 , 5 ) ) prox_factory = proximal_nonnegativity ( space ) prox = prox_factory ( 1.0 ) result = prox ( x ) assert all ( result . asarray ( ) >= 0 )  def test_combine_proximal ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) prox_factory = proximal_const_func ( space ) combined_prox_factory = combine_proximals ( prox_factory , prox_factory ) prox = combined_prox_factory ( 1 ) assert isinstance ( prox , odl . Operator ) prox_verify = odl . ProductSpaceOperator ( [ [ odl . IdentityOperator ( space ) , None ] , [ None , odl . IdentityOperator ( space ) ] ] ) x = prox_verify . domain . element ( [ np . arange ( - 5 , 5 ) , np . arange ( - 5 , 5 ) ] ) out = prox_verify . range . element ( ) assert prox ( x ) == prox_verify ( x ) assert prox ( x , out ) == prox_verify ( x ) assert out == x  def test_proximal_l2_wo_data ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) lam = 2.0 prox_factory = proximal_l2 ( space , lam = lam ) sigma = 3.0 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x = space . element ( np . arange ( - 5 , 5 ) ) x_small = x * 0.5 * lam * sigma / x . norm ( ) x_big = x * 2.0 * lam * sigma / x . norm ( ) x_small_opt = x_small * 0 x_big_opt = ( 1 - lam * sigma / x_big . norm ( ) ) * x_big assert all_almost_equal ( prox ( x_small ) , x_small_opt , HIGH_ACC ) assert all_almost_equal ( prox ( x_big ) , x_big_opt , HIGH_ACC )  def test_proximal_l2_with_data ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) g = space . element ( np . arange ( - 5 , 5 ) ) lam = 2.0 prox_factory = proximal_l2 ( space , lam = lam , g = g ) sigma = 3.0 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x = space . element ( np . arange ( - 5 , 5 ) ) x_small = g + x * 0.5 * lam * sigma / x . norm ( ) x_big = g + x * 2.0 * lam * sigma / x . norm ( ) x_small_opt = g const = lam * sigma / ( x_big - g ) . norm ( ) x_big_opt = ( 1 - const ) * x_big + const * g assert all_almost_equal ( prox ( x_small ) , x_small_opt , HIGH_ACC ) assert all_almost_equal ( prox ( x_big ) , x_big_opt , HIGH_ACC )  def test_proximal_convconj_l2_sq_wo_data ( ) :      space = odl . uniform_discr ( 0 , 10 , 10 ) x_arr = np . arange ( - 5 , 5 ) x = space . element ( x_arr ) lam = 2 prox_factory = proximal_convex_conj_l2_squared ( space , lam = lam ) sigma = 0.25 * space . one ( ) sigmav = sigma * space . one ( ) prox = prox_factory ( sigma ) proxv = prox_factory ( sigmav ) assert isinstance ( prox , odl . Operator ) assert isinstance ( proxv , odl . Operator ) x_out = space . element ( ) x_outv = space . element ( ) prox ( x , x_out ) proxv ( x , x_outv ) x_verify = x / ( 1 + sigma / ( 2 * lam ) ) assert all_almost_equal ( x_out , x_verify , HIGH_ACC ) assert all_almost_equal ( x_outv , x_verify , HIGH_ACC )  def test_proximal_convconj_l2_sq_with_data ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x_arr = np . arange ( - 5 , 5 ) x = space . element ( x_arr ) g = space . element ( - 2 * x_arr ) lam = 2 prox_factory = proximal_convex_conj_l2_squared ( space , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x_out = space . element ( ) prox ( x , x_out ) x_verify = ( x - sigma * g ) / ( 1 + sigma / ( 2 * lam ) ) assert all_almost_equal ( x_out , x_verify , HIGH_ACC )  def test_proximal_convconj_l1_simple_space_without_data ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x_arr = np . arange ( - 5 , 5 ) x = space . element ( x_arr ) lam = 2 prox_factory = proximal_convex_conj_l1 ( space , lam = lam ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) denom = np . maximum ( lam , np . sqrt ( x_arr ** 2 ) ) x_exact = lam * x_arr / denom x_opt = space . element ( ) x_result = prox ( x , x_opt ) assert x_result is x_opt assert all_almost_equal ( x_opt , x_exact , HIGH_ACC ) x_result = prox ( x ) assert all_almost_equal ( x_result , x_exact , HIGH_ACC ) x_result = prox ( x , x ) assert all_almost_equal ( x_result , x_exact , HIGH_ACC )  def test_proximal_convconj_l1_simple_space_with_data ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x_arr = np . arange ( - 5 , 5 ) x = space . element ( x_arr ) g_arr = np . arange ( 10 , 0 , - 1 ) g = space . element ( g_arr ) lam = 2 prox_factory = proximal_convex_conj_l1 ( space , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x_opt = space . element ( ) prox ( x , x_opt ) denom = np . maximum ( lam , np . abs ( x_arr - sigma * g_arr ) ) x0_verify = lam * ( x_arr - sigma * g_arr ) / denom assert all_almost_equal ( x_opt , x0_verify , HIGH_ACC )  def test_proximal_convconj_l1_product_space ( ) :      op_domain = odl . ProductSpace ( odl . uniform_discr ( 0 , 1 , 10 ) , 2 ) x0_arr = np . arange ( - 5 , 5 ) x1_arr = np . arange ( 10 , 0 , - 1 ) x = op_domain . element ( [ x0_arr , x1_arr ] ) g0_arr = x1_arr . copy ( ) g1_arr = x0_arr . copy ( ) g = op_domain . element ( [ g0_arr , g1_arr ] ) lam = 2 prox_factory = proximal_convex_conj_l1_l2 ( op_domain , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x_opt = prox ( x ) denom = np . maximum ( lam , np . sqrt ( ( x0_arr - sigma * g0_arr ) ** 2 + ( x1_arr - sigma * g1_arr ) ** 2 ) ) x_verify = lam * ( x - sigma * g ) / denom assert all_almost_equal ( x_verify , x_opt )  def test_proximal_convconj_kl_simple_space ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) x = space . element ( np . arange ( - 5 , 5 ) ) g = space . element ( np . arange ( 10 , 0 , - 1 ) ) lam = 2 prox_factory = proximal_convex_conj_kl ( space , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x_opt = space . element ( ) prox ( x , x_opt ) x_verify = ( lam + x - np . sqrt ( ( x - lam ) ** 2 + 4 * lam * sigma * g ) ) / 2 assert all_almost_equal ( x_opt , x_verify , HIGH_ACC )  def test_proximal_convconj_kl_product_space ( ) :      op_domain = odl . ProductSpace ( odl . uniform_discr ( 0 , 1 , 10 ) , 2 ) x0_arr = np . arange ( - 5 , 5 ) x1_arr = np . arange ( 10 , 0 , - 1 ) x = op_domain . element ( [ x0_arr , x1_arr ] ) g0_arr = x1_arr . copy ( ) g1_arr = x0_arr . copy ( ) g = op_domain . element ( [ g0_arr , g1_arr ] ) lam = 2 prox_factory = proximal_convex_conj_kl ( op_domain , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x_opt = op_domain . element ( ) prox ( x , x_opt ) x_verify = ( lam + x - np . sqrt ( ( x - lam ) ** 2 + 4 * lam * sigma * g ) ) / 2 assert all_almost_equal ( x_verify , x_opt )  def test_proximal_convconj_kl_cross_entropy ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) g = space . element ( np . arange ( 10 , 0 , - 1 ) ) lam = 2 prox_factory = proximal_convex_conj_kl_cross_entropy ( space , lam = lam , g = g ) sigma = 0.25 prox = prox_factory ( sigma ) assert isinstance ( prox , odl . Operator ) x = space . element ( np . arange ( - 5 , 5 ) ) prox_val = prox ( x ) x_verify = x - lam * scipy . special . lambertw ( sigma / lam * g * np . exp ( x / lam ) ) . real assert all_almost_equal ( prox_val , x_verify , HIGH_ACC ) x_inplace = space . element ( ) prox ( x , out = x_inplace ) assert all_almost_equal ( x_inplace , x_verify , HIGH_ACC )  def test_proximal_arg_scaling ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) func = odl . solvers . L2NormSquared ( space ) prox_factory = odl . solvers . proximal_l2_squared ( space ) x = space . one ( ) for alpha in [ 2 , odl . phantom . noise . uniform_noise ( space , 1 , 10 ) ] :          prox_scaled = odl . solvers . proximal_arg_scaling ( prox_factory , alpha ) for sigma in [ 2 , odl . phantom . noise . uniform_noise ( space , 1 , 10 ) ] :              p = prox_scaled ( sigma ) ( x ) lhs = ( x - p ) / sigma rhs = alpha * func . gradient ( alpha * p ) assert all_almost_equal ( lhs , rhs )    if __name__ == <str> :      odl . util . test_file ( __file__ )   