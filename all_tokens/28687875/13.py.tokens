def process ( tr , parameters , tableBuilder ) :    level = parameters . get ( <str> ) tr . setUserId ( parameters . get ( <str> ) ) if level == <str> :      projectDetailsID = parameters . get ( <str> ) expDesignID = parameters . get ( <str> ) secondaryName = parameters . get ( <str> ) biologicalEntityID = parameters . get ( <str> ) projDetails = tr . createNewExperiment ( projectDetailsID , <str> ) projDetails . setPropertyValue ( <str> , secondaryName ) expDesign = tr . createNewExperiment ( expDesignID , <str> ) expDesign . setPropertyValue ( <str> , secondaryName ) expDesign . setPropertyValue ( <str> , <str> ) biologicalEntity = tr . createNewSample ( biologicalEntityID , <str> ) biologicalEntity . setExperiment ( expDesign ) biologicalEntity . setPropertyValue ( <str> , <str> ) biologicalEntity . setPropertyValue ( <str> , secondaryName )  elif level == <str> :      sampleExtractions = parameters . get ( <str> ) biologicalSamples = parameters . get ( <str> ) secondaryName = parameters . get ( <str> ) parent = parameters . get ( <str> ) primaryTissues = parameters . get ( <str> ) detailedTissues = parameters . get ( <str> ) for i in range ( 0 , len ( sampleExtractions ) ) :        sampleExtraction = tr . createNewExperiment ( sampleExtractions [ i ] , <str> ) sampleExtraction . setPropertyValue ( <str> , <str> ) biologicalSample = tr . createNewSample ( biologicalSamples [ i ] , <str> ) biologicalSample . setPropertyValue ( <str> , primaryTissues [ i ] ) biologicalSample . setPropertyValue ( <str> , detailedTissues [ i ] ) biologicalSample . setParentSampleIdentifiers ( [ parent ] ) biologicalSample . setPropertyValue ( <str> , secondaryName ) biologicalSample . setExperiment ( sampleExtraction )   elif level == <str> :        parent = parameters . get ( <str> ) samplePreparations = parameters . get ( <str> ) testSamples = parameters . get ( <str> ) testTypes = parameters . get ( <str> ) for i in range ( 0 , len ( samplePreparations ) ) :          samplePreparation = tr . createNewExperiment ( samplePreparations [ i ] , <str> ) samplePreparation . setPropertyValue ( <str> , <str> ) testSample = tr . createNewSample ( testSamples [ i ] , <str> ) testSample . setPropertyValue ( <str> , testTypes [ i ] ) testSample . setParentSampleIdentifiers ( [ parent ] ) testSample . setExperiment ( samplePreparation )   elif level == <str> :        parents = parameters . get ( <str> ) ngsMeasurements = parameters . get ( <str> ) ngsRuns = parameters . get ( <str> ) types = parameters . get ( <str> ) additionalInfo = parameters . get ( <str> ) devices = parameters . get ( <str> ) for i in range ( 0 , len ( ngsMeasurements ) ) :          ngsMeasurement = tr . createNewExperiment ( ngsMeasurements [ i ] , <str> ) ngsMeasurement . setPropertyValue ( <str> , <str> ) ngsMeasurement . setPropertyValue ( <str> , types [ i ] ) ngsMeasurement . setPropertyValue ( <str> , str ( additionalInfo [ i ] ) ) ngsMeasurement . setPropertyValue ( <str> , devices [ i ] ) ngsRun = tr . createNewSample ( ngsRuns [ i ] , <str> ) ngsRun . setParentSampleIdentifiers ( [ parents [ i ] ] ) ngsRun . setExperiment ( ngsMeasurement )   elif level == <str> :        experimentIDs = parameters . get ( <str> ) sampleIDs = parameters . get ( <str> ) typings = parameters . get ( <str> ) hlaClasses = parameters . get ( <str> ) typingMethods = parameters . get ( <str> ) parent = parameters . get ( <str> ) for i in range ( 0 , len ( experimentIDs ) ) :          hlaTyping = tr . createNewExperiment ( experimentIDs [ i ] , <str> ) hlaTyping . setPropertyValue ( <str> , <str> ) hlaTyping . setPropertyValue ( <str> , hlaClasses [ i ] ) hlaTyping . setPropertyValue ( <str> , typingMethods [ i ] ) hlaTypingSample = tr . createNewSample ( sampleIDs [ i ] , <str> ) hlaTypingSample . setPropertyValue ( <str> , hlaClasses [ i ] ) hlaTypingSample . setPropertyValue ( <str> , typings [ i ] ) hlaTypingSample . setExperiment ( hlaTyping ) hlaTypingSample . setParentSampleIdentifiers ( [ parent ] )     