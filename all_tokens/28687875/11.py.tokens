import sys sys . path . append ( <str> ) from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchCriteria class SampleAlreadyExistsError ( Exception ) :      def __init__ ( self , value ) :          self . value = value  def __str__ ( self ) :          return self . value   def process ( tr , params , tableBuilder ) :    ignore_existing = <str> in params if <str> in params :      print params tr . setUserId ( params . get ( <str> ) ) params . remove ( <str> )  if <str> in params :      print <str> print params . get ( <str> ) params . remove ( <str> )  for sample in params . keySet ( ) :      parameters = params . get ( sample ) sampleCode = parameters . get ( <str> ) search_service = tr . getSearchService ( ) sc = SearchCriteria ( ) sc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . CODE , sampleCode ) ) foundSamples = search_service . searchForSamples ( sc ) if ( foundSamples . size ( ) < 1 ) :        proj = parameters . get ( <str> ) space = parameters . get ( <str> ) sampleType = parameters . get ( <str> ) species = parameters . get ( <str> ) sampleId = <str> + space + <str> + sampleCode sample = tr . createNewSample ( sampleId , sampleType ) exp = <str> + space + <str> + proj + <str> + parameters . get ( <str> ) exp = tr . getExperiment ( exp ) sample . setExperiment ( exp ) if parameters . get ( <str> ) :          sample . setPropertyValue ( <str> , parameters . get ( <str> ) )  if parameters . get ( <str> ) :          sample . setParentSampleIdentifiers ( parameters . get ( <str> ) )  if parameters . get ( <str> ) :          properties = parameters . get ( <str> ) for prop in properties . keySet ( ) :            try :              val = properties . get ( prop ) val = str ( val )  except :              val = unicode ( val , <str> ) val = val . encode ( <str> )  sample . setPropertyValue ( prop , val )    else :        if not ignore_existing :          raise SampleAlreadyExistsError ( <str> + sampleCode + <str> )      