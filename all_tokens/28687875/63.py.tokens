from __future__ import print_function import os import sys import csv import cxxpy as cx import pyxb . utils . domutils import xml . dom . minidom from pyxb . namespace import XMLSchema_instance as xsi from pyxb . namespace import XMLNamespaces as xmlns def loadGeneVariantPanelFile ( filename ) :      tmpVariantPanel = { } with open ( filename , <str> ) as panelfile :          panelreader = csv . reader ( panelfile ) for variant in panelreader :              if ( len ( variant ) == 2 ) :                  genename = variant [ 0 ] . strip ( ) varname = variant [ 1 ] . strip ( ) if not tmpVariantPanel . has_key ( genename ) :                      tmpVariantPanel [ genename ] = [ ]  tmpVariantPanel [ genename ] . append ( varname )    return ( tmpVariantPanel )  def loadVariantsWhitelistFile ( filename ) :      tmpVariantPanel = { } with open ( filename , <str> ) as panelfile :          panelreader = csv . reader ( panelfile , delimiter = <str> ) for variant in panelreader :              genename = variant [ 0 ] . strip ( ) tmpVarField = variant [ 2 ] . strip ( ) varname = <str> if tmpVarField != <str> :                  varname = tmpVarField . split ( <str> ) [ 1 ]  if not tmpVariantPanel . has_key ( genename ) :                  tmpVariantPanel [ genename ] = [ ]  tmpVariantPanel [ genename ] . append ( varname )   return ( tmpVariantPanel )  def createCustomCatalogEntry ( code , value_en , value_de ) :      customCatalogEntry = cx . CustomCatalogEntryType ( ) customCatalogEntry . Code = code tmpMultiLingua_en = cx . MultilingualEntryType ( Lang = <str> , Value = value_en ) tmpMultiLingua_de = cx . MultilingualEntryType ( Lang = <str> , Value = value_de ) customCatalogEntry . NameMultilingualEntries = [ tmpMultiLingua_de , tmpMultiLingua_en ] return customCatalogEntry  def writeGenePanelControlledVocabularies ( geneVariantPanel ) :      pyxb . utils . domutils . BindingDOMSupport . DeclareNamespace ( cx . Namespace , <str> ) docRoot = cx . CentraXXDataExchange ( ) docRoot . Source = <str> qbicPrefix = <str> catData = cx . CatalogueDataType ( ) for gene , variants in geneVariantPanel . iteritems ( ) :          customCatalogObject = cx . CustomCatalogType ( ) customCatalogObject . Code = qbicPrefix + gene tmpMultiLingua_en = cx . MultilingualEntryType ( Lang = <str> , Value = gene ) tmpMultiLingua_de = cx . MultilingualEntryType ( Lang = <str> , Value = gene ) customCatalogObject . NameMultilingualEntries = [ tmpMultiLingua_en , tmpMultiLingua_de ] customCatalogObject . CatalogUsage = <str> customCatalogObject . Version = 1 customCatalogObject . EntityStatus = <str> customCatalogObject . CustomCatalogEntry = [ ] customCatalogEntryObject = createCustomCatalogEntry ( <str> , <str> , <str> ) customCatalogObject . CustomCatalogEntry . append ( customCatalogEntryObject ) customCatalogEntryObject = createCustomCatalogEntry ( <str> , <str> , <str> ) customCatalogObject . CustomCatalogEntry . append ( customCatalogEntryObject ) for v in variants :              if v == <str> :                  continue  customCatalogEntryObject = createCustomCatalogEntry ( v , v , v ) customCatalogObject . CustomCatalogEntry . append ( customCatalogEntryObject )  catData . append ( customCatalogObject )  docRoot . CatalogueData = catData docRootDOM = docRoot . toDOM ( ) docRootDOM . documentElement . setAttributeNS ( xsi . uri ( ) , <str> , <str> ) docRootDOM . documentElement . setAttributeNS ( xmlns . uri ( ) , <str> , xsi . uri ( ) ) return ( docRootDOM . toprettyxml ( encoding = <str> ) )  def writeMeasurementParameterDefs ( geneVariantPanel ) :      pyxb . utils . domutils . BindingDOMSupport . DeclareNamespace ( cx . Namespace , <str> ) docRoot = cx . CentraXXDataExchange ( ) docRoot . Source = <str> qbicPrefix = <str> catData = cx . CatalogueDataType ( ) flexValues = cx . FlexibleValuesType ( ) flexValues . FlexibleCatalogValue = [ ] for gene , variants in geneVariantPanel . iteritems ( ) :          flexCatalogValue = cx . FlexibleCatalogType ( ) flexCatalogValue . Code = qbicPrefix + gene tmpMultiLingua_en = cx . MultilingualEntryType ( Lang = <str> , Value = gene + <str> ) tmpMultiLingua_de = cx . MultilingualEntryType ( Lang = <str> , Value = gene + <str> ) flexCatalogValue . NameMultilingualEntries = [ tmpMultiLingua_en , tmpMultiLingua_de ] flexCatalogValue . ChoiseType = <str> flexCatalogValue . UserDefinedCatalogRef = cx . UserDefinedCatalogRefType ( Code = <str> + gene , Version = <str> ) flexValues . append ( flexCatalogValue )  catData . append ( flexValues ) docRoot . CatalogueData = catData try :          docRootDOM = docRoot . toDOM ( )  except pyxb . ValidationError as e :          print ( e . details ( ) )  docRootDOM . documentElement . setAttributeNS ( xsi . uri ( ) , <str> , <str> ) docRootDOM . documentElement . setAttributeNS ( xmlns . uri ( ) , <str> , xsi . uri ( ) ) return ( docRootDOM . toprettyxml ( encoding = <str> ) )  def writeMeasurementProfileDef ( geneVariantPanel ) :      pyxb . utils . domutils . BindingDOMSupport . DeclareNamespace ( cx . Namespace , <str> ) docRoot = cx . CentraXXDataExchange ( ) docRoot . Source = <str> qbicPrefix = <str> catData = cx . CatalogueDataType ( ) geneProfile = cx . FlexibleDataSetType ( ) geneProfile . Code = <str> tmpMultiLingua_en = cx . MultilingualEntryType ( Lang = <str> , Value = <str> ) tmpMultiLingua_de = cx . MultilingualEntryType ( Lang = <str> , Value = <str> ) geneProfile . NameMultilingualEntries = [ tmpMultiLingua_en , tmpMultiLingua_de ] geneProfile . FlexibleValueComplexRefs = [ ] for gene , variants in geneVariantPanel . iteritems ( ) :          flexValRef = cx . FlexibleValueRefType ( qbicPrefix + gene , False ) geneProfile . FlexibleValueComplexRefs . append ( flexValRef )  geneProfile . FlexibleDataSetType = <str> geneProfile . Systemwide = True geneProfile . Category = <str> crfTemplateObject = cx . CrfTemplateType ( ) crfTemplateObject . Name = <str> crfTemplateSection = cx . CrfTemplateSectionType ( ) crfTemplateSection . Name = <str> crfTemplateSection . CrfTemplateField = [ ] rowNumber = 0 for gene , variants in geneVariantPanel . iteritems ( ) :          crfTemplateField = cx . CrfTemplateFieldType ( ) crfTemplateField . LaborValue = qbicPrefix + gene crfTemplateField . LowerRow = str ( rowNumber ) crfTemplateField . UpperRow = str ( rowNumber ) crfTemplateField . LowerColumn = <str> crfTemplateField . UpperColumn = <str> crfTemplateField . Mandatory = False crfTemplateField . VisibleCaption = True crfTemplateField . FieldType = <str> crfTemplateField . CustomCatalogEntryDefaultValueRef = [ <str> , <str> ] for v in variants :              if v == <str> :                  continue  crfTemplateField . CustomCatalogEntryDefaultValueRef . append ( v )  crfTemplateSection . CrfTemplateField . append ( crfTemplateField ) rowNumber += 1  crfTemplateObject . CrfTemplateSection = [ crfTemplateSection ] crfTemplateObject . FlexibleDataSetRef = <str> crfTemplateObject . TemplateType = <str> crfTemplateObject . Version = <str> crfTemplateObject . EntityStatus = <str> crfTemplateObject . Global = False crfTemplateObject . MultipleUse = False crfTemplateObject . Active = False try :          catData . append ( geneProfile )  except pyxb . ValidationError as e :          print ( e . details ( ) )  catData . append ( crfTemplateObject ) docRoot . CatalogueData = catData try :          docRootDOM = docRoot . toDOM ( )  except pyxb . ValidationError as e :          print ( e . details ( ) )  docRootDOM . documentElement . setAttributeNS ( xsi . uri ( ) , <str> , <str> ) docRootDOM . documentElement . setAttributeNS ( xmlns . uri ( ) , <str> , xsi . uri ( ) ) return ( docRootDOM . toprettyxml ( encoding = <str> ) )  geneVariantPanel = loadVariantsWhitelistFile ( <str> ) output = writeGenePanelControlledVocabularies ( geneVariantPanel ) output2 = writeMeasurementParameterDefs ( geneVariantPanel ) output3 = writeMeasurementProfileDef ( geneVariantPanel ) xmloutfile = open ( <str> , <str> ) xmloutfile . write ( output2 ) xmloutfile . close ( ) xmloutfile = open ( <str> , <str> ) xmloutfile . write ( output ) xmloutfile . close ( ) xmloutfile = open ( <str> , <str> ) xmloutfile . write ( output3 ) xmloutfile . close ( )  