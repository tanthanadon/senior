from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchCriteria def process ( tr , parameters , tableBuilder ) :    ids = parameters . get ( <str> ) search_service = tr . getSearchService ( ) expCodes = [ ] if <str> in parameters :      print <str> for exp in search_service . listExperiments ( parameters . get ( <str> ) ) :        expCodes . append ( exp . getExperimentIdentifier ( ) . split ( <str> ) [ - 1 ] )   else :      print <str>  print <str> types = parameters . get ( <str> ) print types for id in ids :      print <str> + id entity = None if <str> in parameters and id in expCodes :        entity = tr . getExperimentForUpdate ( parameters . get ( <str> ) + <str> + id )  else :        sc = SearchCriteria ( ) sc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . CODE , id ) ) found = search_service . searchForSamples ( sc ) if len ( found ) > 0 :          print <str> entity = tr . getSampleForUpdate ( found [ 0 ] . getSampleIdentifier ( ) )  else :          print <str>   if entity :        for prop_type in types :          print <str> + prop_type typeMap = parameters . get ( prop_type ) try :            value = typeMap . get ( id ) print <str> + value entity . setPropertyValue ( prop_type , value )  except :            print <str> pass        