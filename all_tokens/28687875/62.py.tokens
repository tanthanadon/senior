import sys import csv from collections import defaultdict def extractXLSdata ( xlsFilename ) :      xlsFile = open ( xlsFilename , <str> ) csvreader = csv . DictReader ( xlsFile , delimiter = <str> ) resultsDict = defaultdict ( list ) for row in csvreader :          chrom = row [ <str> ] position = row [ <str> ] refBase = row [ <str> ] varBase = row [ <str> ] varType = row [ <str> ] alleleCall = row [ <str> ] alleleFreq = float ( row [ <str> ] ) if varType == <str> and alleleCall == <str> and ( ( alleleFreq > 5.0 and alleleFreq < 35.0 ) or ( alleleFreq > 65.0 and alleleFreq < 85.0 ) ) :              dictKey = chrom + <str> + position resultsDict [ dictKey ] . append ( ( refBase , varBase , alleleCall , alleleFreq ) )   return resultsDict  class DummyVCFRecord :      def __init__ ( self , CHROM , POS , REF , ALT , INFO ) :          self . CHROM = CHROM self . POS = POS self . REF = REF self . ALT = ALT . split ( <str> ) self . INFO = { } infoSplit = INFO . split ( <str> ) annString = [ s for s in infoSplit if <str> in s ] if len ( annString ) == 0 :              self . INFO [ <str> ] = [ ]  else :              annStringSplit = annString [ 0 ] . strip ( ) . split ( <str> ) self . INFO [ <str> ] = annStringSplit    def extractVCFdata ( vcfFilename ) :      vcfDict = { } vcfFile = open ( vcfFilename , <str> ) vcflines = vcfFile . readlines ( ) for row in vcflines :          if row . startswith ( <str> ) :              continue  rowsplit = row . strip ( ) . split ( <str> ) chrom = rowsplit [ 0 ] position = rowsplit [ 1 ] refBase = rowsplit [ 3 ] altBase = rowsplit [ 4 ] info = rowsplit [ 7 ] record = DummyVCFRecord ( chrom , position , refBase , altBase , info ) dictKey = str ( chrom ) + <str> + str ( position ) vcfDict [ dictKey ] = record  return vcfDict  def extractVCFGenes ( vcfFilename ) :      vcfFile = open ( vcfFilename , <str> ) vcflines = vcfFile . readlines ( ) geneDict = defaultdict ( int ) for row in vcflines :          if row . startswith ( <str> ) :              continue  rowsplit = row . strip ( ) . split ( <str> ) chrom = rowsplit [ 0 ] position = rowsplit [ 1 ] refBase = rowsplit [ 3 ] altBase = rowsplit [ 4 ] info = rowsplit [ 7 ] record = DummyVCFRecord ( chrom , position , refBase , altBase , info ) firstAnn = record . INFO [ <str> ] if len ( firstAnn ) > 0 :              annDict = mangleSnpEffAnnotationString ( firstAnn [ 0 ] ) geneDict [ annDict [ <str> ] ] += 1   return geneDict  def mangleSnpEffAnnotationString ( annstring ) :      annsplit = annstring . strip ( ) . split ( <str> ) annotateMap = defaultdict ( str ) annotateMap [ <str> ] = annsplit [ 0 ] annotateMap [ <str> ] = annsplit [ 1 ] annotateMap [ <str> ] = annsplit [ 2 ] annotateMap [ <str> ] = annsplit [ 3 ] annotateMap [ <str> ] = annsplit [ 4 ] annotateMap [ <str> ] = annsplit [ 5 ] annotateMap [ <str> ] = annsplit [ 6 ] annotateMap [ <str> ] = annsplit [ 7 ] annotateMap [ <str> ] = annsplit [ 8 ] annotateMap [ <str> ] = annsplit [ 9 ] annotateMap [ <str> ] = annsplit [ 10 ] annotateMap [ <str> ] = annsplit [ 11 ] annotateMap [ <str> ] = annsplit [ 12 ] annotateMap [ <str> ] = annsplit [ 13 ] annotateMap [ <str> ] = annsplit [ 14 ] annotateMap [ <str> ] = annsplit [ 15 ] return annotateMap  def extractPGMdata ( vcfFilename , xlsFilename ) :      xlsVarDict = extractXLSdata ( xlsFilename ) vcfVarDict = extractVCFdata ( vcfFilename ) extractedVariants = [ ] for xlsRow , xlsCoords in xlsVarDict . iteritems ( ) :          for coord in xlsCoords :              xlsRefBase = coord [ 0 ] xlsAltBase = coord [ 1 ] xlsVarCall = coord [ 2 ] xlsVarFreq = coord [ 3 ] vcfRecord = vcfVarDict [ xlsRow ] refBase = vcfRecord . REF altBase = vcfRecord . ALT annField = vcfRecord . INFO [ <str> ] if xlsRefBase != refBase or xlsAltBase not in altBase :                  continue  blackList = [ ] for ann in annField :                  annDict = mangleSnpEffAnnotationString ( ann ) annAllele = annDict [ <str> ] if annAllele == xlsAltBase :                      genename = annDict [ <str> ] . strip ( ) dnaChange = annDict [ <str> ] . strip ( ) aaChange = annDict [ <str> ] . strip ( ) combinedChange = <str> . join ( [ genename , dnaChange , aaChange ] ) if dnaChange != <str> and aaChange != <str> and combinedChange not in blackList :                          extractedVariants . append ( ( genename , dnaChange , aaChange , xlsVarFreq ) ) blackList . append ( combinedChange )      return ( extractedVariants )   