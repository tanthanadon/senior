import sys sys . path . append ( <str> ) sys . path . append ( <str> ) import re import os import checksum import time import datetime import shutil import subprocess import simplejson as json import string import ch . systemsx . cisd . etlserver . registrator . api . v2 from java . io import File from org . apache . commons . io import FileUtils from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchCriteria from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchSubCriteria from shutil import copyfile pattern = re . compile ( <str> ) typesDict = { <str> : <str> , <str> : <str> , <str> : <str> } def parse_metadata_file ( filePath ) :      jsonFile = open ( filePath , <str> ) data = json . load ( jsonFile ) jsonFile . close ( ) return data  def isExpected ( identifier ) :      id = identifier [ 0 : 9 ] return checksum . checksum ( id ) == identifier [ 9 ]  def getNextFreeBarcode ( projectcode , numberOfBarcodes ) :      letters = string . ascii_uppercase numberOfBarcodes += 1 currentLetter = letters [ numberOfBarcodes / 999 ] currentNumber = numberOfBarcodes % 999 code = projectcode + str ( currentNumber ) . zfill ( 3 ) + currentLetter return code + checksum . checksum ( code )  numberOfExperiments = 0 newTestSamples = { } oldTestSamples = { } newNGSSamples = { } def get_space_from_project ( transaction , project ) :      search_service = transaction . getSearchService ( ) sc = SearchCriteria ( ) pc = SearchCriteria ( ) pc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . PROJECT , project ) ) ; sc . addSubCriteria ( SearchSubCriteria . createExperimentCriteria ( pc ) ) foundSamples = search_service . searchForSamples ( sc ) space = foundSamples [ 0 ] . getSpace ( ) return space  def find_and_register_vcf ( transaction , jsonContent , varcode ) :      qbicBarcodes = [ ] geneticIDS = [ ] sampleSource = [ ] varcodekey = <str> for key in jsonContent . keys ( ) :          if key == <str> or key == <str> :              pass  else :              geneticIDS . append ( jsonContent [ key ] [ <str> ] ) qbicBarcodes . append ( jsonContent [ key ] [ <str> ] ) sampleSource . append ( jsonContent [ key ] [ <str> ] ) if jsonContent [ key ] [ <str> ] == varcode :                  varcodekey = key    if <str> not in varcode :          geneticIDS = [ varcode ]  expType = jsonContent [ <str> ] project = qbicBarcodes [ 0 ] [ : 5 ] search_service = transaction . getSearchService ( ) sc = SearchCriteria ( ) pc = SearchCriteria ( ) pc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . PROJECT , project ) ) ; sc . addSubCriteria ( SearchSubCriteria . createExperimentCriteria ( pc ) ) foundSamples = search_service . searchForSamples ( sc ) space = get_space_from_project ( transaction , project ) datasetSample = None sampleFound = False parentIdentifiers = [ ] testParentIdentifiers = [ ] global numberOfExperiments additionalInfo = <str> secName = <str> if len ( geneticIDS ) >= 2 :          somaticIdent = <str> % ( geneticIDS [ 0 ] , geneticIDS [ 1 ] ) secName = somaticIdent if somaticIdent == varcode :              for i , parentBarcode in enumerate ( qbicBarcodes ) :                  additionalInfo += <str> % ( qbicBarcodes [ i ] , geneticIDS [ i ] , sampleSource [ i ] )  for barcode , geneticID in zip ( qbicBarcodes , geneticIDS ) :                  genShortID = geneticID . split ( <str> ) [ 0 ] if geneticID in newNGSSamples :                      parentIdentifiers . append ( newNGSSamples [ geneticID ] ) testParentIdentifiers . append ( oldTestSamples [ geneticID ] )  else :                      for samp in foundSamples :                          code = samp . getCode ( ) sType = samp . getSampleType ( ) qbicBarcodeID = <str> + space + <str> + barcode parentIDs = samp . getParentSampleIdentifiers ( ) analyte = samp . getPropertyValue ( <str> ) curSecName = samp . getPropertyValue ( <str> ) extID = samp . getPropertyValue ( <str> ) if ( ( barcode == code ) and ( sType == <str> ) ) or ( ( qbicBarcodeID in parentIDs ) and ( analyte == typesDict [ expType ] ) and ( ( ( curSecName != None ) and ( genShortID in curSecName ) ) or ( ( extID != None ) and ( genShortID in extID ) ) ) ) :                              testParentID = samp . getSampleIdentifier ( ) print ( testParentID ) for s in foundSamples :                                  new_code = s . getCode ( ) sampleType = s . getSampleType ( ) curSecName = s . getPropertyValue ( <str> ) extDB = s . getPropertyValue ( <str> ) if ( testParentID in s . getParentSampleIdentifiers ( ) ) and ( sampleType == <str> ) and ( ( ( curSecName != None ) and ( geneticID in curSecName ) ) or ( ( extDB != None ) and ( geneticID in extDB ) ) ) :                                      sampleIdent = s . getSampleIdentifier ( ) parentIdentifiers . append ( sampleIdent ) testParentIdentifiers . append ( testParentID ) print ( <str> ) print ( sampleIdent ) print ( testParentID ) print ( testParentIdentifiers )         else :          geneticID = varcode genShortID = geneticID . split ( <str> ) [ 0 ] barcode = jsonContent [ varcodekey ] [ <str> ] additionalInfo = <str> % ( barcode , geneticID , jsonContent [ varcodekey ] [ <str> ] ) secName += <str> % geneticID if geneticID in newNGSSamples :              parentIdentifiers . append ( newNGSSamples [ geneticID ] ) if geneticID in oldTestSamples :                  testParentIdentifiers . append ( oldTestSamples [ geneticID ] )  elif geneticID in newTestSamples :                  testParentIdentifiers . append ( newTestSamples [ geneticID ] )   else :              print ( <str> ) for barcode in qbicBarcodes :                  print ( barcode + <str> + str ( qbicBarcodes ) ) for samp in foundSamples :                      code = samp . getCode ( ) sType = samp . getSampleType ( ) qbicBarcodeID = <str> + space + <str> + barcode parentIDs = samp . getParentSampleIdentifiers ( ) analyte = samp . getPropertyValue ( <str> ) curSecName = samp . getPropertyValue ( <str> ) extID = samp . getPropertyValue ( <str> ) if ( ( barcode == code ) and ( sType == <str> ) ) or ( ( qbicBarcodeID in parentIDs ) and ( analyte == typesDict [ expType ] ) and ( ( ( curSecName != None ) and ( genShortID in curSecName ) ) or ( ( extID != None ) and ( genShortID in extID ) ) ) ) :                          testParentID = samp . getSampleIdentifier ( ) for s in foundSamples :                              new_code = s . getCode ( ) sampleType = s . getSampleType ( ) curSecName = s . getPropertyValue ( <str> ) extDB = s . getPropertyValue ( <str> ) if ( testParentID in s . getParentSampleIdentifiers ( ) ) and ( sampleType == <str> ) and ( ( ( curSecName != None ) and ( geneticID in curSecName ) ) or ( ( extDB != None ) and ( geneticID in extDB ) ) ) :                                  sampleIdent = s . getSampleIdentifier ( ) parentIdentifiers . append ( sampleIdent ) testParentIdentifiers . append ( testParentID ) print ( <str> ) print ( sampleIdent ) print ( testParentID ) print ( testParentIdentifiers )        numberOfExperiments += 1 existingExperimentIDs = [ ] existingExperiments = search_service . listExperiments ( <str> + space + <str> + project ) for eexp in existingExperiments :          existingExperimentIDs . append ( eexp . getExperimentIdentifier ( ) )  newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments ) while newExpID in existingExperimentIDs :          numberOfExperiments += 1 newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments )  newVCExp = transaction . createNewExperiment ( newExpID , <str> ) identString = varcode identString2 = <str> print ( testParentIdentifiers ) identString2 = <str> . join ( [ tpi . split ( <str> ) [ - 1 ] for tpi in testParentIdentifiers ] ) print ( <str> + identString2 ) existingSampleIDs = [ ] for s in foundSamples :          existingSampleIDs . append ( s . getSampleIdentifier ( ) )  found = False freeID = <str> newVCFID = <str> + space + <str> + <str> + freeID + identString2 while newVCFID in existingSampleIDs or found :          existingSampleIDs . append ( newVCFID ) freeID = str ( int ( freeID ) + 1 ) . zfill ( len ( freeID ) ) print ( <str> + newVCFID ) newVCFID = <str> + space + <str> + <str> + freeID + identString2 found = transaction . getSampleForUpdate ( newVCFID )  newVCSample = transaction . createNewSample ( newVCFID , <str> ) newVCSample . setParentSampleIdentifiers ( parentIdentifiers ) newVCSample . setExperiment ( newVCExp ) secName = secName . strip ( ) newVCSample . setPropertyValue ( <str> , additionalInfo ) newVCSample . setPropertyValue ( <str> , secName ) datasetSample = newVCSample return datasetSample  def createNewBarcode ( project , tr ) :      search_service = tr . getSearchService ( ) sc = SearchCriteria ( ) pc = SearchCriteria ( ) pc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . PROJECT , project ) ) ; sc . addSubCriteria ( SearchSubCriteria . createExperimentCriteria ( pc ) ) foundSamples = search_service . searchForSamples ( sc ) space = foundSamples [ 0 ] . getSpace ( ) foundSamplesFilter = [ s for s in foundSamples if <str> not in s . getCode ( ) ] offset = 0 exists = True while exists :          newBarcode = getNextFreeBarcode ( project , len ( foundSamplesFilter ) + len ( newTestSamples ) + offset ) sampleIdentifier = <str> + space + <str> + newBarcode if not tr . getSampleForUpdate ( sampleIdentifier ) :              exists = False  else :              offset += 1   return newBarcode  def find_and_register_ngs ( transaction , jsonContent ) :      if <str> in jsonContent [ <str> ] :          qcValues = jsonContent [ <str> ] [ <str> ]  else :          qcValues = [ ]  genome = jsonContent [ <str> ] [ <str> ] idGenetics = jsonContent [ <str> ] [ <str> ] qbicBarcode = jsonContent [ <str> ] [ <str> ] system = jsonContent [ <str> ] [ <str> ] tumor = jsonContent [ <str> ] [ <str> ] expType = jsonContent [ <str> ] project = qbicBarcode [ : 5 ] search_service = transaction . getSearchService ( ) sc = SearchCriteria ( ) pc = SearchCriteria ( ) pc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . PROJECT , project ) ) sc . addSubCriteria ( SearchSubCriteria . createExperimentCriteria ( pc ) ) foundSamples = search_service . searchForSamples ( sc ) datasetSample = None sampleFound = False sampleIdent = None space = foundSamples [ 0 ] . getSpace ( ) testSampleCode = None knownCodes = [ ] for samp in foundSamples :          qbicBarcodeID = <str> + samp . getSpace ( ) + <str> + qbicBarcode knownCodes . append ( samp . getCode ( ) ) sampleType = samp . getSampleType ( ) code = samp . getCode ( ) sType = samp . getSampleType ( ) parentIDs = samp . getParentSampleIdentifiers ( ) analyte = samp . getPropertyValue ( <str> ) curSecName = samp . getPropertyValue ( <str> ) extID = samp . getPropertyValue ( <str> ) genShortID = idGenetics . split ( <str> ) [ 0 ] isTestSampleWithBarcode = ( qbicBarcode == code ) and ( sType != None ) and ( sType == <str> ) correctParent = qbicBarcodeID in parentIDs correctAnalyte = ( analyte != None ) and ( analyte == typesDict [ expType ] ) hasGeneticsID = ( curSecName != None and genShortID in curSecName ) or ( extID != None and genShortID in extID ) if isTestSampleWithBarcode or ( correctParent and correctAnalyte and hasGeneticsID ) :              sampleIdent = samp . getSampleIdentifier ( ) testSampleCode = samp . getCode ( ) oldTestSamples [ idGenetics ] = sampleIdent   if not sampleIdent :          if not idGenetics in newTestSamples :              for samp in foundSamples :                  if qbicBarcode == samp . getCode ( ) :                      testSampleCode = createNewBarcode ( project , transaction ) sampleIdent = <str> + space + <str> + testSampleCode testSample = transaction . createNewSample ( sampleIdent , <str> ) testSample . setParentSampleIdentifiers ( [ samp . getSampleIdentifier ( ) ] ) testSample . setPropertyValue ( <str> , idGenetics . split ( <str> ) [ 0 ] ) testSample . setPropertyValue ( <str> , typesDict [ expType ] ) global numberOfExperiments numberOfExperiments += 1 existingExperimentIDs = [ ] existingExperiments = search_service . listExperiments ( <str> + space + <str> + project ) for eexp in existingExperiments :                          existingExperimentIDs . append ( eexp . getExperimentIdentifier ( ) )  newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments ) while newExpID in existingExperimentIDs :                          numberOfExperiments += 1 newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments )  newTestSampleExperiment = transaction . createNewExperiment ( newExpID , <str> ) testSample . setExperiment ( newTestSampleExperiment ) newTestSamples [ idGenetics ] = sampleIdent     for s in foundSamples :          if ( ( s . getSampleType ( ) == <str> ) and ( sampleIdent in s . getParentSampleIdentifiers ( ) ) and ( s . getPropertyValue ( <str> ) == idGenetics ) ) :              sa = transaction . getSampleForUpdate ( s . getSampleIdentifier ( ) ) sa . setPropertyValue ( <str> , idGenetics ) datasetSample = sa sampleFound = False   if not sampleFound :          numberOfExperiments += 1 existingExperimentIDs = [ ] existingExperiments = search_service . listExperiments ( <str> + space + <str> + project ) for eexp in existingExperiments :              existingExperimentIDs . append ( eexp . getExperimentIdentifier ( ) )  newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments ) while newExpID in existingExperimentIDs :              numberOfExperiments += 1 newExpID = <str> + space + <str> + project + <str> + project + <str> + str ( numberOfExperiments )  newNGSMeasurementExp = transaction . createNewExperiment ( newExpID , <str> ) newNGSMeasurementExp . setPropertyValue ( <str> , <str> ) newNGSMeasurementExp . setPropertyValue ( <str> , <str> ) newNGSMeasurementExp . setPropertyValue ( <str> , <str> ) newNGSMeasurementExp . setPropertyValue ( <str> , system ) newNGSMeasurementExp . setPropertyValue ( <str> , typesDict [ expType ] ) newNGSID = <str> + space + <str> + <str> + idGenetics . split ( <str> ) [ - 1 ] + testSampleCode freeID = <str> existingSampleIDs = [ ] for s in foundSamples :              existingSampleIDs . append ( s . getSampleIdentifier ( ) )  found = False while newNGSID in existingSampleIDs or found :              existingSampleIDs . append ( newNGSID ) freeID = str ( int ( freeID ) + 1 ) . zfill ( len ( freeID ) ) newNGSID = <str> + space + <str> + <str> + freeID + testSampleCode found = transaction . getSampleForUpdate ( newNGSID )  existingSampleIDs . append ( newNGSID ) newNGSrunSample = transaction . createNewSample ( newNGSID , <str> ) newNGSrunSample . setParentSampleIdentifiers ( [ sampleIdent ] ) newNGSrunSample . setExperiment ( newNGSMeasurementExp ) newNGSSamples [ idGenetics ] = newNGSID additionalInfo = <str> % ( <str> , genome ) for qc in qcValues :              line = str ( qc ) additionalInfo += <str> % line . replace ( <str> , <str> ) . replace ( <str> , <str> )  newNGSrunSample . setPropertyValue ( <str> , additionalInfo ) newNGSrunSample . setPropertyValue ( <str> , idGenetics ) datasetSample = newNGSrunSample  return datasetSample  def find_and_register_ngs_without_metadata ( transaction ) :      context = transaction . getRegistrationContext ( ) . getPersistentMap ( ) incomingPath = transaction . getIncoming ( ) . getAbsolutePath ( ) key = context . get ( <str> ) if ( key == None ) :              key = 1  name = transaction . getIncoming ( ) . getName ( ) identifier = pattern . findall ( name ) [ 0 ] if isExpected ( identifier ) :              project = identifier [ : 5 ]  else :          print <str> + identifier + <str>  search_service = transaction . getSearchService ( ) sc = SearchCriteria ( ) sc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . CODE , identifier ) ) foundSamples = search_service . searchForSamples ( sc ) sampleIdentifier = foundSamples [ 0 ] . getSampleIdentifier ( ) space = foundSamples [ 0 ] . getSpace ( ) sa = transaction . getSampleForUpdate ( sampleIdentifier ) sampleType = <str> if sa . getSampleType ( ) != sampleType :          sampleIdentifier = <str> + space + <str> + <str> + identifier if transaction . getSampleForUpdate ( sampleIdentifier ) :              sa = transaction . getSampleForUpdate ( sampleIdentifier )  else :              expType = <str> ngsExperiment = None experiments = search_service . listExperiments ( <str> + space + <str> + project ) experimentIDs = [ ] for exp in experiments :                  experimentIDs . append ( exp . getExperimentIdentifier ( ) )  expID = experimentIDs [ 0 ] i = 0 while expID in experimentIDs :                  i += 1 expNum = len ( experiments ) + i expID = <str> + space + <str> + project + <str> + project + <str> + str ( expNum )  ngsExperiment = transaction . createNewExperiment ( expID , expType ) ngsExperiment . setPropertyValue ( <str> , <str> ) newID = <str> + identifier ngsSample = transaction . createNewSample ( <str> + space + <str> + newID , sampleType ) ngsSample . setParentSampleIdentifiers ( [ sa . getSampleIdentifier ( ) ] ) ngsSample . setExperiment ( ngsExperiment ) sa = ngsSample   dataSet = transaction . createNewDataSet ( <str> ) dataSet . setMeasuredData ( False ) dataSet . setSample ( sa ) datafolder = os . path . join ( incomingPath , name ) for f in os . listdir ( incomingPath ) :          fPath = os . path . join ( incomingPath , f ) if <str> in f :              os . remove ( os . path . realpath ( fPath ) )  if <str> in f :              nameFile = open ( fPath ) origName = nameFile . readline ( ) . strip ( ) nameFile . close ( ) os . remove ( os . path . realpath ( fPath ) )  if <str> in f :              os . rename ( fPath , os . path . join ( datafolder , f ) )   transaction . moveFile ( datafolder , dataSet )  def process ( transaction ) :      context = transaction . getRegistrationContext ( ) . getPersistentMap ( ) incomingPath = transaction . getIncoming ( ) . getAbsolutePath ( ) key = context . get ( <str> ) if ( key == None ) :          key = 1  name = transaction . getIncoming ( ) . getName ( ) identifier = pattern . findall ( name ) [ 0 ] if isExpected ( identifier ) :          pass  else :           print <str> + identifier + <str>  project = identifier [ : 5 ] search_service = transaction . getSearchService ( ) space = get_space_from_project ( transaction , project ) global numberOfExperiments numberOfExperiments = len ( search_service . listExperiments ( <str> + space + <str> + project ) ) src = os . path . realpath ( os . path . join ( incomingPath , <str> ) ) if os . path . isfile ( src ) :          os . remove ( src )  print <str> metadataFound = False for f in os . listdir ( os . path . join ( incomingPath , name ) ) :          if f . endswith ( <str> ) :              metadataFound = True metadataPath = os . path . realpath ( os . path . join ( os . path . join ( incomingPath , name ) , f ) ) jsonContent = parse_metadata_file ( metadataPath ) rawFiles = jsonContent [ <str> ] vcfs = [ ] fastqs = [ ] gsvars = [ ] tsvs = [ ] print <str> for rawFile in rawFiles :                  print rawFile if rawFile . endswith ( <str> ) or rawFile . endswith ( <str> ) :                      vcfs . append ( rawFile )  if rawFile . endswith ( <str> ) or rawFile . endswith ( <str> ) :                      fastqs . append ( rawFile )  if rawFile . endswith ( <str> ) or rawFile . endswith ( <str> ) :                      gsvars . append ( rawFile )  if rawFile . endswith ( <str> ) or rawFile . endswith ( <str> ) :                      tsvs . append ( rawFile )    else :              pass   folder = os . path . join ( incomingPath , name ) if ( metadataFound ) :          if len ( fastqs ) > 0 :              fastqSample = find_and_register_ngs ( transaction , jsonContent ) fastqDataSet = transaction . createNewDataSet ( <str> ) fastqDataSet . setSample ( fastqSample ) fastqFolder = os . path . join ( folder , name + <str> ) os . mkdir ( fastqFolder ) for f in fastqs :                  os . rename ( os . path . join ( folder , f ) , os . path . join ( fastqFolder , f ) )  for t in tsvs :                  os . rename ( os . path . join ( folder , t ) , os . path . join ( fastqFolder , t ) )  metadatafilename = metadataPath . split ( <str> ) [ - 1 ] copyfile ( metadataPath , os . path . join ( fastqFolder , metadatafilename ) ) transaction . moveFile ( fastqFolder , fastqDataSet )  for vc in vcfs :              ident = vc . split ( <str> ) [ 0 ] . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) print ident vcfSample = find_and_register_vcf ( transaction , jsonContent , ident ) vcfDataSet = transaction . createNewDataSet ( <str> ) vcfDataSet . setSample ( vcfSample ) vcfFolder = os . path . join ( folder , name + <str> ) os . mkdir ( vcfFolder ) os . rename ( os . path . join ( folder , vc ) , os . path . join ( vcfFolder , vc ) ) for g in gsvars :                  gs_file_ident = g . split ( <str> ) [ 0 ] . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) if ( ident == gs_file_ident ) :                      os . rename ( os . path . join ( folder , g ) , os . path . join ( vcfFolder , g ) )   for t in tsvs :                  os . rename ( os . path . join ( folder , t ) , os . path . join ( vcfFolder , t ) )  metadatafilename = metadataPath . split ( <str> ) [ - 1 ] copyfile ( metadataPath , os . path . join ( vcfFolder , metadatafilename ) ) transaction . moveFile ( vcfFolder , vcfDataSet )   else :              find_and_register_ngs_without_metadata ( transaction )    