from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto . SearchCriteria import MatchClause from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto . SearchCriteria import MatchClauseAttribute from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchCriteria CODE = <str> SECONDARY_NAME = <str> SOURCE = <str> EXTERNAL_ID = <str> XML = <str> SAMPLE_TYPE = <str> TIER = <str> def getParents ( samples , sampleMap ) : 	 res = [ ] for sample in samples : 		 ids = sample . getParentSampleIdentifiers ( ) for id in ids : 			 res . append ( sampleMap [ id ] )   return res  def fetchSource ( id , sampleMap , terms ) : 	 sample = sampleMap [ id ] top = [ sample ] cycle = True while cycle : 		 roots = getParents ( top , sampleMap ) if len ( roots ) > 0 : 			 top = roots  else : 			 cycle = False   sources = [ ] top = set ( top ) for sample in top : 		 try : 			 id = sample . getCode ( ) . split ( <str> ) [ 1 ]  except : 			 id = sample . getCode ( )  organism = sample . getPropertyValue ( <str> ) if organism : 			 for term in terms : 				 if organism == term . getCode ( ) : 					 desc = term . getDescription ( ) if desc == None or len ( desc ) < 1 : 						 desc = term . getLabel ( )    if desc == <str> : 				 desc == <str>  sources . append ( desc + <str> + id )  else : 			 sources . append ( <str> )   return <str> . join ( sources )  def process ( tr , parameters , tableBuilder ) : 	 ids = sorted ( parameters . get ( <str> ) ) types = parameters . get ( <str> ) tableBuilder . addHeader ( CODE ) tableBuilder . addHeader ( SECONDARY_NAME ) tableBuilder . addHeader ( SOURCE ) tableBuilder . addHeader ( EXTERNAL_ID ) tableBuilder . addHeader ( SAMPLE_TYPE ) tableBuilder . addHeader ( XML ) tableBuilder . addHeader ( TIER ) sampleMap = { } voc = searchService . getVocabulary ( <str> ) for id in ids : 		 sc = SearchCriteria ( ) sc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . CODE , id . split ( <str> ) [ - 1 ] ) ) sample = searchService . searchForSamples ( sc ) [ 0 ] sampleMap [ id ] = sample  for id in ids : 		 sample = sampleMap [ id ] if sample . getSampleType ( ) in types : 			 code = sample . getCode ( ) row = tableBuilder . addRow ( ) row . setCell ( CODE , code ) row . setCell ( SECONDARY_NAME , sample . getPropertyValue ( <str> ) ) row . setCell ( SOURCE , fetchSource ( id , sampleMap , voc . getTerms ( ) ) ) row . setCell ( EXTERNAL_ID , sample . getPropertyValue ( <str> ) ) extrType = sample . getPropertyValue ( <str> ) if not extrType : 				 extrType = sample . getPropertyValue ( <str> )  if not extrType : 				 extrType = <str>  if extrType == <str> : 				 extrType = sample . getPropertyValue ( <str> )  row . setCell ( SAMPLE_TYPE , extrType ) row . setCell ( XML , sample . getPropertyValue ( <str> ) ) row . setCell ( TIER , sample . getSampleType ( ) )     