import datetime import sys def isDate ( value ) :    if not isinstance ( value , str if sys . version_info [ 0 ] >= 3 else basestring ) :      return False  try :      datetime . datetime . strptime ( value , <str> ) return True  except ValueError :      return False   def setProperties ( tr , exp , props ) :    for prop in props . keySet ( ) :      if prop == <str> :        m = 0 matType = <str> matCode = project + <str> while tr . getMaterial ( matCode , matType ) :          m += 1 matCode = project + <str> + str ( m )  material = tr . createNewMaterial ( matCode , matType ) enzymes = props . get ( <str> ) i = 0 for e in enzymes :          i += 1 material . setPropertyValue ( <str> + str ( i ) , e )  exp . setPropertyValue ( <str> , matCode )  else :        if isDate ( props . get ( prop ) ) :          time = props . get ( prop ) date = datetime . datetime . strptime ( time , <str> ) . strftime ( <str> ) exp . setPropertyValue ( prop , date )  else :          if props . get ( prop ) :            try :              val = props . get ( prop ) val = str ( val )  except :              val = unicode ( val , <str> ) val = val . encode ( <str> )  exp . setPropertyValue ( prop , val )      def process ( tr , parameters , tableBuilder ) :    user = parameters . get ( <str> ) if user :      tr . setUserId ( user )  codes = parameters . get ( <str> ) types = parameters . get ( <str> ) props = parameters . get ( <str> ) if not codes :      props = [ props ] codes = [ parameters . get ( <str> ) ] types = [ parameters . get ( <str> ) ]  project = parameters . get ( <str> ) space = parameters . get ( <str> ) existing = [ ] for data in zip ( codes , types , props ) :      if not data [ 0 ] in existing :        existing . append ( data [ 0 ] ) expId = <str> + space + <str> + project + <str> + data [ 0 ] exp = tr . createNewExperiment ( expId , data [ 1 ] ) if not data [ 2 ] == None :          setProperties ( tr , exp , data [ 2 ] )       