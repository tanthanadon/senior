from __future__ import print_function import sys sys . path . append ( <str> ) import checksum import os import re import string import sys import time import ConfigParser import logging import tarfile import ch . systemsx . cisd . etlserver . registrator . api . v2 from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchCriteria from ch . systemsx . cisd . openbis . generic . shared . api . v1 . dto import SearchSubCriteria from ch . ethz . sis . openbis . generic . asapi . v3 . dto . common . search import SearchResult import ch . ethz . sis . openbis . generic . asapi . v3 . dto . sample . Sample from ch . ethz . sis . openbis . generic . asapi . v3 . dto . sample . fetchoptions import SampleFetchOptions from ch . ethz . sis . openbis . generic . asapi . v3 import IApplicationServerApi from ch . systemsx . cisd . common . spring import HttpInvokerUtils from ch . ethz . sis . openbis . generic . asapi . v3 . dto . sample . search import SampleSearchCriteria import mtbutils from mtbutils import Counter sys . path . append ( <str> ) CENTRAXX_XML_NAME = <str> QCODE_REG = re . compile ( <str> ) RNASEQ_REG = re . compile ( <str> ) PROPERTIES = <str> NGS_SAMPLE_TYPE = <str> NGS_EXP_TYPE = <str> NGS_RAW_DATA = <str> MTB_SAMPLE_TYPE = <str> MTB_EXP_TYPE = <str> MTB_RAW_DATA = <str> NGS_VARIANT_CALL = <str> EXPERIMENT_ID = 0 cmd_status = mtbutils . mtbconverter ( [ <str> ] ) if cmd_status != 0 :      raise mtbutils . MTBdropboxerror ( <str> + cmd_status )  print ( mtbutils . log_stardate ( <str> ) ) config = ConfigParser . ConfigParser ( ) config . read ( PROPERTIES ) api = HttpInvokerUtils . createServiceStub ( IApplicationServerApi , config . get ( <str> , <str> ) + IApplicationServerApi . SERVICE_URL , 5000 ) sessionToken = api . login ( config . get ( <str> , <str> ) , config . get ( <str> , <str> ) ) if sessionToken :      mtbutils . log_stardate ( <str> )  else :      raise mtbutils . MTBdropboxerror ( <str> )  COUNTER = Counter ( ) def process ( transaction ) :      incoming_path = transaction . getIncoming ( ) . getAbsolutePath ( ) file_name = transaction . getIncoming ( ) . getName ( ) print ( mtbutils . log_stardate ( <str> . format ( file_name ) ) ) file_list = getfiles ( incoming_path ) tar_balls = [ ] for f in file_list :          if f . endswith ( <str> ) : tar_balls . append ( f )  for ball in tar_balls :          print ( mtbutils . log_stardate ( <str> . format ( ball ) ) ) tar = tarfile . open ( ball ) tar . extractall ( path = incoming_path ) print ( mtbutils . log_stardate ( <str> ) ) tar . close ( )  file_list = getfiles ( incoming_path ) unknown_file_types = [ ] fastqs_tumor = [ ] fastqs_normal = [ ] rna_seq_files = [ ] vcf_files = [ ] for in_file in file_list :          if in_file . endswith ( <str> ) or in_file . endswith ( <str> ) or <str> in in_file :              continue  if RNASEQ_REG . findall ( in_file ) :              rna_seq_files . append ( in_file )  elif <str> in in_file :              if <str> in in_file :                  fastqs_normal . append ( find_pbmc ( in_file , transaction ) )  elif <str> in in_file :                  fastqs_tumor . append ( in_file )  else :                  unknown_file_types . append ( in_file )   elif in_file . endswith ( <str> ) or in_file . endswith ( <str> ) :              vcf_files . append ( in_file )  elif in_file . endswith ( <str> ) :              proc_mtb ( in_file , transaction )  else :              unknown_file_types . append ( in_file )   if vcf_files :          execute_vcf_registration ( vcf_files , transaction )  if fastqs_normal or fastqs_tumor :          execute_fastq_registration ( fastqs_normal , fastqs_tumor , transaction )  if rna_seq_files :          execute_rnaseq_registration ( rna_seq_files , transaction )  if unknown_file_types :          for file_name in unknown_file_types :              print ( mtbutils . log_stardate ( <str> . format ( file_name ) ) ) if file_name . endswith ( <str> ) or file_name . endswith ( <str> ) :                  raise mtbutils . MTBdropboxerror ( <str> + file_name )    print ( mtbutils . log_stardate ( <str> ) )  def execute_vcf_registration ( vcf_files , transaction ) :      for vcf in vcf_files :          register_vcf ( vcf , transaction )   def execute_fastq_registration ( fastqs_normal , fastqs_tumor , transaction ) :     if len ( fastqs_tumor ) != 2 or len ( fastqs_normal ) != 2 :          raise mtbutils . MTBdropboxerror ( <str> )  else :          proc_fastq ( fastqs_tumor , transaction ) proc_fastq ( fastqs_normal , transaction )   def execute_rnaseq_registration ( rna_seq_files , transaction ) :      register_rnaseq ( rna_seq_files , transaction )  def get_last_exp_id ( experiments ) :      exp_ids = [ int ( re . search ( <str> , oid . getExperimentIdentifier ( ) ) . group ( 1 ) ) for oid in experiments if re . search ( <str> , oid . getExperimentIdentifier ( ) ) ] exp_ids . sort ( ) return exp_ids [ - 1 ]  def getNextFreeBarcode ( projectcode , numberOfBarcodes ) :      letters = string . ascii_uppercase numberOfBarcodes += 1 currentLetter = letters [ numberOfBarcodes / 999 ] currentNumber = numberOfBarcodes % 999 code = projectcode + str ( currentNumber ) . zfill ( 3 ) + currentLetter return code + checksum . checksum ( code )  def register_rnaseq ( rna_seq_files , transaction ) :      print ( mtbutils . log_stardate ( <str> . format ( rna_seq_files ) ) ) assert len ( rna_seq_files ) == 2 file1 = os . path . basename ( rna_seq_files [ 0 ] ) file2 = os . path . basename ( rna_seq_files [ 1 ] ) assert len ( set ( QCODE_REG . findall ( file1 ) ) ) == 1 assert len ( set ( QCODE_REG . findall ( file2 ) ) ) == 1 assert QCODE_REG . findall ( file1 ) [ 0 ] == QCODE_REG . findall ( file2 ) [ 0 ] dna_barcode = QCODE_REG . findall ( file1 ) [ 0 ] space , project = space_and_project ( dna_barcode ) search_service = transaction . getSearchService ( ) sc = SearchCriteria ( ) pc = SearchCriteria ( ) pc . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . PROJECT , project ) ) ; sc . addSubCriteria ( SearchSubCriteria . createExperimentCriteria ( pc ) ) result = search_service . searchForSamples ( sc ) print ( <str> . format ( len ( result ) , project , space ) ) new_rna_sample_barcode = getNextFreeBarcode ( project , numberOfBarcodes = len ( result ) ) tumor_dna_sample = getsample ( dna_barcode , transaction ) parent_ids = tumor_dna_sample . getParentSampleIdentifiers ( ) assert len ( parent_ids ) == 1 print ( parent_ids ) tumor_tissue_sample = getsample ( parent_ids [ 0 ] , transaction ) new_rna_sample = transaction . createNewSample ( <str> . format ( space = space , barcode = new_rna_sample_barcode ) , <str> ) new_rna_sample . setExperiment ( transaction . getSearchService ( ) . getExperiment ( <str> . format ( space = space , project = project , number = 3 ) ) ) parent_sample_id = tumor_tissue_sample . getSampleIdentifier ( ) new_rna_sample . setParentSampleIdentifiers ( [ parent_sample_id ] ) new_rna_sample . setPropertyValue ( <str> , <str> ) experiments = transaction . getSearchService ( ) . listExperiments ( <str> . format ( space , project ) ) last_exp_id = get_last_exp_id ( experiments ) new_exp_id = <str> . format ( space = space , project = project , number = last_exp_id + COUNTER . newId ( ) ) new_sample_id = <str> . format ( space = space , project = project , barcode = new_rna_sample_barcode ) new_ngs_experiment = transaction . createNewExperiment ( new_exp_id , <str> ) new_ngs_experiment . setPropertyValue ( <str> , <str> ) new_ngs_sample = transaction . createNewSample ( new_sample_id , <str> ) new_ngs_sample . setParentSampleIdentifiers ( [ <str> . format ( space = space , barcode = new_rna_sample_barcode ) ] ) new_ngs_sample . setExperiment ( new_ngs_experiment ) data_set = transaction . createNewDataSet ( <str> ) data_set . setMeasuredData ( False ) data_set . setSample ( new_ngs_sample ) base_path = os . path . dirname ( transaction . getIncoming ( ) . getAbsolutePath ( ) ) registration_dir = os . path . join ( base_path , <str> . format ( new_rna_sample_barcode ) ) os . mkdir ( registration_dir ) for raw_data in rna_seq_files :          old_base = os . path . basename ( raw_data ) new_base = old_base . replace ( dna_barcode , new_rna_sample_barcode ) os . rename ( raw_data , os . path . join ( registration_dir , os . path . basename ( new_base ) ) )  transaction . moveFile ( registration_dir , data_set )  def register_vcf ( in_file , transaction ) :      print ( mtbutils . log_stardate ( <str> . format ( in_file ) ) ) basename = os . path . basename ( in_file ) parent_dir = os . path . dirname ( in_file ) barcode = QCODE_REG . findall ( basename ) if not barcode :          barcode = QCODE_REG . findall ( parent_dir )  if not barcode :          raise mtbutils . MTBdropboxerror ( <str> . format ( basename ) )  if len ( set ( barcode ) ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( basename ) )  space , project = space_and_project ( barcode [ 0 ] ) search_service = transaction . getSearchService ( ) experiments = transaction . getSearchService ( ) . listExperiments ( <str> . format ( space , project ) ) last_exp_id = get_last_exp_id ( experiments ) new_exp_id = <str> . format ( space = space , project = project , number = last_exp_id + COUNTER . newId ( ) ) new_sample_id = <str> . format ( space = space , project = project , barcode = barcode [ 0 ] ) print ( mtbutils . log_stardate ( <str> . format ( sample = new_sample_id , experiment = new_exp_id ) ) ) new_ngs_experiment = transaction . createNewExperiment ( new_exp_id , NGS_VARIANT_CALL ) new_ngs_experiment . setPropertyValue ( <str> , <str> ) new_ngs_sample = transaction . createNewSample ( new_sample_id , NGS_VARIANT_CALL ) new_ngs_sample . setParentSampleIdentifiers ( [ barcode [ 0 ] ] ) new_ngs_sample . setExperiment ( new_ngs_experiment ) if not barcode [ 0 ] in basename :          parent_dir_path = os . path . dirname ( in_file ) print ( parent_dir_path ) new_path = os . path . join ( parent_dir_path , <str> . format ( barcode [ 0 ] , basename ) ) print ( new_path ) os . rename ( in_file , new_path ) in_file = new_path  data_set = transaction . createNewDataSet ( <str> ) data_set . setMeasuredData ( False ) data_set . setSample ( new_ngs_sample ) transaction . moveFile ( in_file , data_set )  def find_pbmc ( in_file , transaction ) :      basename = os . path . basename ( in_file ) parent_dir = os . path . dirname ( in_file ) barcode = QCODE_REG . findall ( basename ) if not barcode :          raise mtbutils . MTBdropboxerror ( <str> . format ( in_file ) )  if len ( set ( barcode ) ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( in_file ) )  _ , _ , pbmc = getentityandpbmc ( barcode [ 0 ] , transaction ) new_name = basename . replace ( barcode [ 0 ] , pbmc ) new_path = os . path . join ( parent_dir , new_name ) os . rename ( in_file , new_path ) return new_path  def proc_fastq ( fastq_file , transaction ) :      if len ( fastq_file ) != 2 :          raise mtbutils . MTBdropboxerror ( <str> . format ( len ( fastq_file ) ) )  qbiccode_f1 = QCODE_REG . findall ( os . path . basename ( fastq_file [ 0 ] ) ) qbiccode_f2 = QCODE_REG . findall ( os . path . basename ( fastq_file [ 1 ] ) ) if not qbiccode_f1 or not qbiccode_f2 :          raise mtbutils . MTBdropboxerror ( <str> . format ( fastq_file ) )  if len ( qbiccode_f1 ) > 1 or len ( qbiccode_f2 ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( fastq_file ) )  if qbiccode_f1 [ 0 ] != qbiccode_f2 [ 0 ] :          raise mtbutils . MTBdropboxerror ( <str> . format ( qbiccode_f1 [ 0 ] , qbiccode_f2 [ 0 ] ) )  space , project = space_and_project ( qbiccode_f1 [ 0 ] ) experiments = transaction . getSearchService ( ) . listExperiments ( <str> . format ( space , project ) ) last_exp_id = get_last_exp_id ( experiments ) new_exp_id = <str> . format ( space = space , project = project , number = last_exp_id + COUNTER . newId ( ) ) new_sample_id = <str> . format ( space = space , barcode = qbiccode_f1 [ 0 ] , timestamp = int ( time . time ( ) ) ) print ( mtbutils . log_stardate ( <str> . format ( sample = new_sample_id , experiment = new_exp_id ) ) ) new_ngs_experiment = transaction . createNewExperiment ( new_exp_id , NGS_EXP_TYPE ) new_ngs_experiment . setPropertyValue ( <str> , <str> ) new_ngs_sample = transaction . createNewSample ( new_sample_id , NGS_SAMPLE_TYPE ) new_ngs_sample . setParentSampleIdentifiers ( [ qbiccode_f1 [ 0 ] ] ) new_ngs_sample . setExperiment ( new_ngs_experiment ) data_set = transaction . createNewDataSet ( NGS_RAW_DATA ) data_set . setMeasuredData ( False ) data_set . setSample ( new_ngs_sample ) base_path = os . path . dirname ( transaction . getIncoming ( ) . getAbsolutePath ( ) ) registration_dir = os . path . join ( base_path , <str> . format ( qbiccode_f1 [ 0 ] ) ) os . mkdir ( registration_dir ) for raw_data in fastq_file :          os . rename ( raw_data , os . path . join ( registration_dir , os . path . basename ( raw_data ) ) )  transaction . moveFile ( registration_dir , data_set )  def space_and_project ( qbiccode ) :      sample = getsamplev3 ( qbiccode ) space = sample . getSpace ( ) . getCode ( ) project = qbiccode [ : 5 ] return space , project  def proc_mtb ( zip_archive , transaction ) :      submit ( zip_archive , transaction ) registermtb ( zip_archive , transaction )  def registermtb ( archive , transaction ) :      qbiccode_found = QCODE_REG . findall ( os . path . basename ( archive ) ) if not qbiccode_found :          raise mtbutils . MTBdropboxerror ( <str> . format ( archive ) )  if len ( qbiccode_found ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( archive ) )  qcode = qbiccode_found [ 0 ] space , project = space_and_project ( qcode ) search_service = transaction . getSearchService ( ) experiments = transaction . getSearchService ( ) . listExperiments ( <str> . format ( space , project ) ) last_exp_id = get_last_exp_id ( experiments ) new_exp_id = <str> . format ( space = space , project = project , number = last_exp_id + COUNTER . newId ( ) ) new_sample_id = <str> . format ( space = space , project = project , barcode = qcode ) print ( mtbutils . log_stardate ( <str> . format ( sample = new_sample_id , experiment = new_exp_id ) ) ) new_ngs_experiment = transaction . createNewExperiment ( new_exp_id , MTB_EXP_TYPE ) new_ngs_sample = transaction . createNewSample ( new_sample_id , MTB_SAMPLE_TYPE ) new_ngs_sample . setParentSampleIdentifiers ( [ qcode ] ) new_ngs_sample . setExperiment ( new_ngs_experiment ) data_set = transaction . createNewDataSet ( MTB_RAW_DATA ) data_set . setMeasuredData ( False ) data_set . setSample ( new_ngs_sample ) transaction . moveFile ( archive , data_set )  def submit ( archive , transaction ) :      print ( mtbutils . log_stardate ( <str> . format ( os . path . basename ( archive ) ) ) ) qbiccode_found = QCODE_REG . findall ( os . path . basename ( archive ) ) if not qbiccode_found :          raise mtbutils . MTBdropboxerror ( <str> . format ( archive ) )  if len ( qbiccode_found ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( archive ) )  qcode = qbiccode_found [ 0 ] patient = getentity ( qcode , transaction ) args = [ <str> , archive , patient ] exit_code = mtbutils . mtbconverter ( args ) if exit_code > 0 :          raise mtbutils . MTBdropboxerror ( <str> <str> . format ( exit_code ) )  export_fname = CENTRAXX_XML_NAME . format ( patient_id = patient , sample_id = qcode ) export_path = os . path . join ( os . getcwd ( ) , export_fname ) args = [ <str> , <str> , export_path ] exit_status = mtbutils . mtbconverter ( args ) if exit_status > 0 :          raise mtbutils . MTBdropboxerror ( <str> <str> . format ( exit_status ) )  print ( mtbutils . log_stardate ( <str> . format ( os . path . basename ( archive ) ) ) )  def getfiles ( path ) :      if not os . path . isdir ( path ) :          raise mtbutils . MTBdropboxerror ( <str> )  file_list = [ ] for path , subdirs , files in os . walk ( path ) :          for name in files :              file_list . append ( os . path . join ( path , name ) )   return file_list  def getentityandpbmc ( path , transcation ) :      qcode_findings = QCODE_REG . findall ( path ) if not qcode_findings :          raise mtbutils . MTBdropboxerror ( <str> . format ( path ) )  if len ( qcode_findings ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( path ) )  qcode = qcode_findings [ 0 ] entity_id = getentity ( qcode , transcation ) pbmc_id = getpbmc ( entity_id , transcation ) print ( mtbutils . log_stardate ( <str> . format ( entity_id ) ) ) print ( mtbutils . log_stardate ( <str> . format ( pbmc_id ) ) ) return ( path , entity_id , pbmc_id )  def getentity ( qcode , transaction ) :      tumor_sample = getsample ( qcode , transaction ) parent_ids = tumor_sample . getParentSampleIdentifiers ( ) grandparents_found = [ ] for parent in parent_ids :          grandparents_found . append ( getsample ( parent , transaction ) . getParentSampleIdentifiers ( ) )  if not grandparents_found :          raise mtbutils . MTBdropboxerror ( <str> )  if len ( grandparents_found ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> <str> . format ( grandparents_found ) )  grandparent = grandparents_found [ 0 ] [ 0 ] return ( grandparent . split ( <str> ) [ - 1 ] )  def getpbmc ( qcode_entity , transaction ) :      pbmc_samples = [ ] descendand_samples = getallchildren ( qcode_entity ) for sample in descendand_samples :          if sample . getProperty ( <str> ) == <str> :              pbmc_samples . append ( sample )   if not pbmc_samples :          raise mtbutils . MTBdropboxerror ( <str> )  if len ( pbmc_samples ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( qcode_entity ) )  pbmc_id = <str> try :          children = pbmc_samples [ 0 ] . getChildren ( ) pbmc_id = children [ 0 ] . getCode ( )  except Exception as exc :          mtbutils . MTBdropboxerror ( <str> . format ( qcode_entity ) )  return pbmc_id  def getallchildren ( qcode ) :      fetch_opt = SampleFetchOptions ( ) fetch_opt . withChildrenUsing ( fetch_opt ) fetch_opt . withProperties ( ) scrit = SampleSearchCriteria ( ) scrit . withCode ( ) . thatEquals ( qcode ) children_samples = [ ] result = api . searchSamples ( sessionToken , scrit , fetch_opt ) for sample in result . getObjects ( ) :          for kid in sample . getChildren ( ) :              children_samples . append ( kid ) for grandkid in kid . getChildren ( ) :                  children_samples . append ( grandkid )    return children_samples  def getsample ( qcode , transaction ) :      sserv = transaction . getSearchService ( ) scrit = SearchCriteria ( ) scrit . addMatchClause ( SearchCriteria . MatchClause . createAttributeMatch ( SearchCriteria . MatchClauseAttribute . CODE , qcode ) ) result = sserv . searchForSamples ( scrit ) if not result :          raise mtbutils . MTBdropboxerror ( <str> . format ( qcode ) )  if len ( result ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( qcode ) )  return result [ 0 ]  def getsamplev3 ( qcode ) :      scrit = SampleSearchCriteria ( ) scrit . withCode ( ) . thatEquals ( qcode ) fetch_opt = SampleFetchOptions ( ) fetch_opt . withProperties ( ) fetch_opt . withSpace ( ) result = api . searchSamples ( sessionToken , scrit , fetch_opt ) samples = [ ] for sample in result . getObjects ( ) :          samples . append ( sample )  if len ( samples ) > 1 :          raise mtbutils . MTBdropboxerror ( <str> . format ( qcode ) )  return samples [ 0 ]   