def install ( job ) :      cuisine = job . service . executor . cuisine bin_location = cuisine . core . command_location ( <str> ) if bin_location is None or bin_location == <str> :          cuisine . core . dir_ensure ( <str> ) cuisine . core . file_download ( <str> , <str> ) cuisine . core . file_attribs ( <str> , <str> )   def start ( job ) :      cuisine = job . service . executor . cuisine service = job . service actor = service . aysrepo . actorGet ( name = service . model . dbobj . actorName ) cuisine . core . dir_ensure ( <str> ) for flist in actor . model . dbobj . flists :          args = { } args [ <str> ] = cuisine . core . args_replace ( <str> % flist . name ) cuisine . core . file_write ( args [ <str> ] , flist . content ) args [ <str> ] = flist . mountpoint args [ <str> ] = flist . mode . __str__ ( ) . upper ( ) args [ <str> ] = flist . namespace args [ <str> ] = flist . storeUrl cmd = <str> % args [ <str> ] cuisine . core . run ( cmd , die = False ) cuisine . core . dir_ensure ( args [ <str> ] ) config = . format ( ** args ) config_path = cuisine . core . args_replace ( <str> % flist . name ) cuisine . core . file_write ( config_path , config ) pm = cuisine . processmanager . get ( <str> ) bin_location = cuisine . core . command_location ( <str> ) cmd = <str> % ( bin_location , config_path ) pm . ensure ( <str> % flist . name , cmd = cmd , env = { } , path = <str> , descr = <str> )   def stop ( job ) :      cuisine = job . service . executor . cuisine service = job . service actor = service . aysrepo . actorGet ( name = service . model . dbobj . actorName ) for flist in actor . model . dbobj . flists :          config_path = cuisine . core . args_replace ( <str> % flist . name ) flist_config = cuisine . core . file_read ( config_path ) flist_config = j . data . serializer . toml . loads ( flist_config ) pm = cuisine . processmanager . get ( <str> ) pm . stop ( <str> % flist . name ) for mount in flist_config [ <str> ] :              cmd = <str> % mount [ <str> ] cuisine . core . run ( cmd )    def processChange ( job ) :      service = job . service category = job . model . args . get ( <str> , None ) if category == <str> :          service . runAction ( <str> ) service . runAction ( <str> )   def start_flist ( job ) :      args = job . model . args cuisine = job . service . executor . cuisine cuisine . core . dir_ensure ( <str> ) flist_content = j . sal . fs . fileGetContents ( args [ <str> ] ) flist_name = j . sal . fs . getBaseName ( args [ <str> ] ) args [ <str> ] = cuisine . core . args_replace ( <str> % flist_name ) cuisine . core . file_write ( args [ <str> ] , flist_content ) cmd = <str> % args [ <str> ] cuisine . core . run ( cmd , die = False ) cuisine . core . dir_ensure ( args [ <str> ] ) config = . format ( ** args ) config_path = cuisine . core . args_replace ( <str> % flist_name ) cuisine . core . file_write ( config_path , config ) pm = cuisine . processmanager . get ( <str> ) bin_location = cuisine . core . command_location ( <str> ) cmd = <str> % ( bin_location , config_path ) pm . ensure ( <str> % flist_name , cmd = cmd , env = { } , path = <str> , descr = <str> )  def stop_flist ( job ) :      cuisine = job . service . executor . cuisine args = job . model . args flist_name = j . sal . fs . getBaseName ( args [ <str> ] ) config_path = cuisine . core . args_replace ( <str> % flist_name ) flist_config = cuisine . core . file_read ( config_path ) flist_config = j . data . serializer . toml . loads ( flist_config ) pm = cuisine . processmanager . get ( <str> ) pm . stop ( <str> % flist_name ) for mount in flist_config [ <str> ] :          cmd = <str> % mount [ <str> ] cuisine . core . run ( cmd )    