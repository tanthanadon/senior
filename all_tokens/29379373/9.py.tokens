def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test_create_cloudspace_with_specs ( job ) :      import requests , sys service = job . service try :          g8client = service . producers [ <str> ] [ 0 ] url = <str> + g8client . model . data . url username = g8client . model . data . login password = g8client . model . data . password login_url = url + <str> credential = { <str> : username , <str> : password } session = requests . Session ( ) session . post ( url = login_url , data = credential ) vdc = service . producers [ <str> ] [ 0 ] vdcId = vdc . model . data . cloudspaceID maxMemoryCapacity = vdc . model . data . maxMemoryCapacity maxCPUCapacity = vdc . model . data . maxCPUCapacity maxDiskCapacity = vdc . model . data . maxDiskCapacity maxNumPublicIP = vdc . model . data . maxNumPublicIP API_URL = url + <str> API_BODY = { <str> : vdcId } response = session . post ( url = API_URL , data = API_BODY ) limits = response . json ( ) [ <str> ] actual = [ limits [ <str> ] , limits [ <str> ] , limits [ <str> ] , limits [ <str> ] ] expected = [ maxMemoryCapacity , maxDiskCapacity , maxNumPublicIP , maxCPUCapacity ] if response . status_code == 200 and actual == expected :              service . model . data . result = <str> % <str>  else :              response_data = { <str> : response . status_code , <str> : response . content } service . model . data . result = <str> % ( <str> , str ( response_data ) )   except :          service . model . data . result = <str> % ( <str> , str ( sys . exc_info ( ) [ : 2 ] ) )  service . save ( )   