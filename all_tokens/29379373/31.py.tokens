def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test ( job ) :      import sys RESULT_OK = <str> RESULT_FAILED = <str> RESULT_ERROR = <str> % job . service . name model = job . service . model model . data . result = RESULT_OK % job . service . name failures = [ ] repos = [ ] repo1_path = j . sal . fs . joinPaths ( j . dirs . codeDir , <str> ) repo2_path = j . sal . fs . joinPaths ( j . dirs . codeDir , <str> ) try :          repo1_expected_steps = [ ( <str> , <str> , <str> , <str> ) , ( <str> , <str> ) ] j . atyourservice . reposDiscover ( ) repo1 = j . atyourservice . repoGet ( repo1_path ) repos . append ( repo1 ) for bp in repo1 . blueprints :              repo1 . blueprintExecute ( path = bp . path )  run = repo1 . runCreate ( profile = False , debug = False ) for index , step in enumerate ( run . steps ) :              expected_step_jobs = repo1_expected_steps [ index ] for job in step . jobs :                  job_name = <str> % ( job . model . dbobj . actorName , job . model . dbobj . serviceName , job . model . dbobj . actionName ) if job_name not in expected_step_jobs :                      failures . append ( <str> % ( job_name , index + 1 ) )    expected_job_statuses = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } expected_step_statuses = [ <str> , <str> , <str> ] expected_run_status = <str> repo2 = j . atyourservice . repoGet ( repo2_path ) repos . append ( repo2 ) for bp in repo2 . blueprints :              repo2 . blueprintExecute ( path = bp . path )  run = repo2 . runCreate ( profile = False , debug = False ) try :              run . execute ( )  except :              for index , step in enumerate ( run . steps ) :                  for job in step . jobs :                      job_name = <str> % ( job . model . dbobj . actorName , job . model . dbobj . serviceName , job . model . dbobj . actionName ) if job_name not in expected_job_statuses :                          failures . append ( <str> % ( job_name , index + 1 ) )  elif expected_job_statuses [ job_name ] != job . model . dbobj . state :                          failures . append ( <str> % ( job_name , job . model . dbobj . state , expected_job_statuses [ job_name ] ) )   if step . state != expected_step_statuses [ index ] :                      failures . append ( <str> % ( index + 1 , step . state , expected_step_statuses [ index ] ) )   if str ( run . state ) != expected_run_status :                  failures . append ( <str> % ( str ( run . state ) , expected_run_status ) )   else :              failures . append ( <str> % repo2 )  if failures :              model . data . result = RESULT_FAILED % <str> . join ( failures )   except :          model . data . result = RESULT_ERROR % str ( sys . exc_info ( ) [ : 2 ] )  finally :          job . service . save ( ) for repo in repos :              repo . destroy ( )     