def init ( job ) :      service = job . service repo = service . aysrepo disksizes = list ( service . model . data . datadisks ) disks = [ ] for idx , size in enumerate ( disksizes ) :          disk_name = <str> % idx repo . actorGet ( <str> ) . serviceCreate ( disk_name , { <str> : size } ) disks . append ( disk_name )  vm = { <str> : <str> , <str> : 10 , <str> : service . parent . name , <str> : 4 , <str> : [ <str> , <str> , <str> , <str> , <str> ] , <str> : disks } nodevm = repo . actorGet ( <str> ) . serviceCreate ( service . name , vm ) service . consume ( nodevm ) repo . actorGet ( <str> ) . serviceCreate ( service . name , { <str> : service . name } ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : service . name } ) fuse_cfg = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : True , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 24 , <str> : <str> } repo . actorGet ( <str> ) . serviceCreate ( <str> , fuse_cfg ) fuse = { <str> : service . name , <str> : [ <str> ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , fuse ) btrfs = { <str> : service . name , <str> : <str> } repo . actorGet ( <str> ) . serviceCreate ( <str> , btrfs ) tidb = { <str> : <str> , <str> : service . model . data . fqdn , <str> : [ <str> ] , <str> : service . name , <str> : [ <str> , <str> ] , <str> : [ <str> , ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , tidb ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> } ) owncloud = { <str> : <str> , <str> : service . model . data . fqdn , <str> : [ <str> , <str> ] , <str> : service . name , <str> : [ <str> , <str> ] , <str> : [ <str> , <str> , ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , owncloud ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> } ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> , <str> : <str> } ) owncloudconf = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : service . model . data . fqdn , <str> : <str> , <str> : <str> } repo . actorGet ( <str> ) . serviceCreate ( <str> , owncloudconf ) caddy = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : service . name , <str> : [ <str> , <str> ] , <str> : [ <str> , ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , caddy ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> } ) proxy = { <str> : <str> , <str> : [ <str> ] , <str> : True , } repo . actorGet ( <str> ) . serviceCreate ( <str> , proxy ) caddy_service = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : True , } repo . actorGet ( <str> ) . serviceCreate ( <str> , caddy_service )  def install ( job ) :      service = job . service repo = service . aysrepo nodevm = repo . serviceGet ( role = <str> , instance = service . name ) machineip = nodevm . model . data . ipPublic machineuniquenumber = j . sal . nettools . ip_to_num ( machineip ) fqdn = <str> . format ( appname = service . model . data . hostprefix , num = machineuniquenumber ) httpdomain = <str> . format ( appname = service . model . data . hostprefix , num = machineuniquenumber ) httpdomain = <str> . format ( appname = service . model . data . hostprefix , num = machineuniquenumber ) if service . model . data . enablehttps is False :          httpdomain = httpdomain . replace ( <str> , <str> )  else :          httpdomain = httpdomain . replace ( <str> , <str> )  service . model . data . fqdn = fqdn service . saveAll ( ) owncloudconf = repo . serviceGet ( role = <str> , instance = <str> ) owncloudconf . model . data . sitename = fqdn owncloudconf . saveAll ( ) caddyconf = repo . serviceGet ( role = <str> , instance = <str> ) caddyconf . model . data . hostname = httpdomain caddyconf . saveAll ( )   