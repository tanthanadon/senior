def install ( job ) :      cuisine = job . service . executor . cuisine cuisine . package . mdupdate ( ) cuisine . package . install ( <str> ) bin_location = <str> cuisine . core . dir_ensure ( <str> ) cuisine . core . file_download ( <str> , bin_location ) cuisine . core . file_attribs ( <str> , <str> ) service = job . service cuisine = service . executor . cuisine final_config = { <str> : [ ] , <str> : { } , <str> : { } , } targets = [ ] for config in service . producers [ <str> ] :          flist_path = cuisine . core . args_replace ( <str> % j . sal . fs . getBaseName ( config . model . data . mountFlist ) ) cuisine . core . file_download ( config . model . data . mountFlist , flist_path , overwrite = True ) targets . append ( config . model . data . mountMountpoint ) mount = { <str> : config . model . data . mountMountpoint , <str> : flist_path , <str> : config . name , <str> : config . model . data . mountMode , <str> : config . model . data . mountTrimbase , <str> : config . model . data . mountTrim , } cuisine . core . dir_ensure ( config . model . data . backendPath ) backend = { <str> : config . model . data . backendPath , <str> : config . name , <str> : config . model . data . backendNamespace , <str> : config . model . data . backendUpload , <str> : config . model . data . backendEncrypted , <str> : config . model . data . backendUserRsa , <str> : config . model . data . backendStoreRsa , <str> : config . model . data . backendPush , <str> : config . model . data . backendCleanupCron , <str> : config . model . data . backendCleanupOld , } store = { <str> : config . model . data . storeUrl , <str> : config . model . data . storeLogin , <str> : config . model . data . storePassword , } final_config [ <str> ] . append ( mount ) final_config [ <str> ] [ config . name ] = backend final_config [ <str> ] [ config . name ] = store  for mount in final_config [ <str> ] :          cmd = <str> % mount [ <str> ] cuisine . core . run ( cmd , die = False )  tocreate = { m [ <str> ] for m in final_config [ <str> ] } todelete = set ( ) for path in tocreate :          if j . sal . fs . getParent ( path ) in tocreate :              todelete . add ( path )   for path in tocreate . difference ( todelete ) :          cuisine . core . dir_ensure ( path )  config_path = cuisine . core . args_replace ( <str> % service . name ) cuisine . core . file_write ( config_path , j . data . serializer . toml . dumps ( final_config ) ) pm = cuisine . processmanager . get ( <str> ) bin_location = cuisine . core . command_location ( <str> ) cmd = <str> % ( bin_location , config_path ) pm . ensure ( <str> % service . name , cmd = cmd , env = { } , path = <str> , descr = <str> , autostart = True , wait = <str> ) import time for target in targets :          trials = 12 while trials > 0 :              code , _ , _ = cuisine . core . run ( <str> . format ( target ) , die = False ) if code != 0 :                  time . sleep ( 5 )  else :                  break  trials -= 1    def start ( job ) :      service = job . service job = service . getJob ( <str> ) job . executeInProcess ( )  def stop ( job ) :      service = job . service cuisine = service . executor . cuisine pm = cuisine . processmanager . get ( <str> ) pm . stop ( <str> % service . name )   