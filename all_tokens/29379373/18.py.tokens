def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test ( job ) :      import sys import time try :          service = job . service repo = service . aysrepo log = j . logger . get ( <str> ) log . addHandler ( j . logger . _LoggerFactory__fileRotateHandler ( <str> ) ) log . info ( <str> ) log . info ( <str> ) influxos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = influxos . executor . cuisine cuisine . apps . influxdb . start ( ) check = cuisine . core . run ( <str> ) if int ( check [ 1 ] ) < 1 :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) mongoos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = mongoos . executor . cuisine cuisine . apps . mongodb . start ( ) time . sleep ( 4 ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) redisos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = redisos . executor . cuisine cuisine . apps . redis . start ( ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) grafanaos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = grafanaos . executor . cuisine cuisine . apps . grafana . start ( ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) shellinaboxos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = shellinaboxos . executor . cuisine check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) pythonos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = pythonos . executor . cuisine check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) jumpscaleos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = jumpscaleos . executor . cuisine check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) portalos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = portalos . executor . cuisine cuisine . apps . portal . start ( ) check = cuisine . core . run ( <str> ) if int ( check [ 1 ] ) < 1 :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) cockpitos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = cockpitos . executor . cuisine cuisine . solutions . cockpit . start ( ) check = cuisine . core . run ( <str> ) if int ( check [ 1 ] ) < 1 :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) golangos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = golangos . executor . cuisine check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) fsos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = fsos . executor . cuisine cuisine . systemservices . g8osfs . start ( ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) geodnsos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = geodnsos . executor . cuisine cuisine . apps . geodns . start ( ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) scalityos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = owncloudos . executor . cuisine cuisine . apps . s3server . start ( ) check = cuisine . core . run ( <str> ) if int ( check [ 1 ] ) < 1 :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) owncloudos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] cuisine = owncloudos . executor . cuisine cuisine . apps . owncloud . start ( sitename = <str> ) check = cuisine . core . run ( <str> ) if check [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  check = cuisine . core . run ( <str> ) if check [ 1 ] < 1 :              service . model . data . result = <str> . format ( <str> , <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  service . model . data . result = <str> . format ( <str> )  except :          service . model . data . result = <str> . format ( <str> , str ( sys . exc_info ( ) [ : 2 ] ) )  log . info ( <str> ) service . save ( )   