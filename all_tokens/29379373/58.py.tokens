def install ( job ) :      service = job . service if <str> not in service . producers :          raise j . exceptions . AYSNotFound ( <str> )  sshkey = service . producers [ <str> ] [ 0 ] service . logger . info ( <str> ) node = service . parent ssh_port = <str> for parent in service . parents :          if parent . model . role != <str> :              continue  for port in parent . model . data . ports :              src , _ , dst = port . partition ( <str> ) if ssh_port == dst :                  ssh_port = src break    service . model . data . sshPort = int ( ssh_port ) sshkey = service . producers [ <str> ] [ 0 ] key_path = sshkey . model . data . keyPath if not j . sal . fs . exists ( key_path ) :          raise j . exceptions . RuntimeError ( <str> % key_path )  password = node . model . data . sshPassword if node . model . data . sshPassword != <str> else None passphrase = sshkey . model . data . keyPassphrase if sshkey . model . data . keyPassphrase != <str> else None executor = j . tools . executor . getSSHBased ( addr = node . model . data . ipPublic , port = service . model . data . sshPort , login = node . model . data . sshLogin , passwd = password , allow_agent = True , look_for_keys = True , timeout = 5 , usecache = False , passphrase = passphrase , key_filename = key_path ) executor . cuisine . ssh . authorize ( <str> , sshkey . model . data . keyPub ) service . saveAll ( )  def getExecutor ( job ) :      service = job . service if <str> not in service . producers :          raise j . exceptions . AYSNotFound ( <str> )  sshkey = service . producers [ <str> ] [ 0 ] node = service . parent key_path = sshkey . model . data . keyPath passphrase = sshkey . model . data . keyPassphrase if sshkey . model . data . keyPassphrase != <str> else None ssh_port = <str> for parent in service . parents :          if parent . model . role != <str> :              continue  for port in parent . model . data . ports :              src , _ , dst = port . partition ( <str> ) if ssh_port == dst :                  ssh_port = src break    executor = j . tools . executor . getSSHBased ( addr = node . model . data . ipPublic , port = ssh_port , login = <str> , passwd = None , allow_agent = True , look_for_keys = True , timeout = 5 , usecache = False , passphrase = passphrase , key_filename = key_path ) return executor   