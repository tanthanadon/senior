def install ( job ) :      cuisine = job . service . executor . cuisine data = job . service . model . data name = job . service . name image = job . service . producers [ <str> ] [ 0 ] image_name = image . model . data . url . split ( <str> ) [ - 1 ] nics = [ ] for network in job . service . producers [ <str> ] :          nics . append ( network . model . data . name )  vm = cuisine . systemservices . kvm . machines . create ( name = name , os = image_name , disks = list ( data . disks ) , nics = nics , memory = data . memory , cpucount = data . cpu , cloud_init = True , username = data . sshLogin , passwd = data . sshPassword , sshkey = None , start = True , resetPassword = False , ) job . service . model . actions [ <str> ] . state = <str> job . service . saveAll ( ) job . service . executeAction ( <str> , inprocess = True )  def start ( job ) :      cuisine = job . service . executor . cuisine data = job . service . model . data name = job . service . name vm = cuisine . systemservices . kvm . machines . get_by_name ( name ) vm . start ( ) ip = vm . ip if ip is None :          raise j . exceptions . RuntimeError ( <str> . format ( name ) )  data . ipPrivate = ip data . ipPublic = cuisine . _executor . addr job . service . model . actions [ <str> ] . state = <str> job . service . saveAll ( )  def stop ( job ) :      cuisine = job . service . executor . cuisine data = job . service . model . data name = job . service . name vm = cuisine . systemservices . kvm . machines . get_by_name ( name ) vm . stop ( ) data . ipPrivate = <str> data . ipPublic = <str> job . service . model . actions [ <str> ] . state = <str> job . service . saveAll ( )  def uninstall ( job ) :      cuisine = job . service . executor . cuisine name = job . service . name vm = cuisine . systemservices . kvm . machines . get_by_name ( name ) if vm . is_started :          vm . stop ( )  vm . delete ( ) job . service . model . data . ipPrivate = <str> job . service . model . data . ipPublic = <str> job . service . model . actions [ <str> ] . state = <str> job . service . saveAll ( )   