def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test ( job ) :      import time import sys try :          service = job . service repo = service . aysrepo log = j . logger . get ( <str> ) log . addHandler ( j . logger . _LoggerFactory__fileRotateHandler ( <str> ) ) log . info ( <str> ) bocs = service . producers [ <str> ] [ 0 ] fqdn = bocs . model . data . fqdn log . info ( <str> ) tidbos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] out = tidbos . executor . cuisine . core . run ( <str> ) if out [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  log . info ( <str> ) ocos = repo . servicesFind ( actor = <str> , name = <str> ) [ 0 ] ocos . executor . cuisine . core . run ( <str> % fqdn ) out = ocos . executor . cuisine . core . run ( <str> % fqdn ) if out [ 1 ] != <str> :              service . model . data . result = <str> . format ( <str> , str ( sys . exc_info ( ) [ : 2 ] ) ) service . save ( ) return  service . model . data . result = <str> . format ( <str> )  except :          service . model . data . result = <str> . format ( <str> , str ( sys . exc_info ( ) [ : 2 ] ) )  log . info ( <str> ) service . save ( )   