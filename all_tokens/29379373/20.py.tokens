def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test ( job ) :      import sys RESULT_OK = <str> RESULT_FAILED = <str> RESULT_ERROR = <str> % job . service . name model = job . service . model model . data . result = RESULT_OK % job . service . name failures = [ ] expected_actors = [ <str> , <str> , <str> ] expected_files_per_actor = [ <str> , <str> , <str> ] actor_missing_msg = <str> actor_file_missing_msg = <str> service_file_missing_msg = <str> expected_services = { <str> : { <str> : { <str> : [ <str> , <str> , <str> ] } , <str> : [ <str> , <str> , <str> ] } , <str> : { <str> : [ <str> , <str> , <str> ] } , <str> : { <str> : { <str> : [ <str> , <str> , <str> ] } , <str> : [ <str> , <str> , <str> ] } , <str> : { <str> : [ <str> , <str> , <str> ] } } def check_service_dir ( base_path , service ) :              for service_name , service_info in service . items ( ) :                  if service_name != <str> :                      path = j . sal . fs . joinPaths ( base_path , service_name ) check_service_dir ( path , service_info )  else :                      for service_file in service [ <str> ] :                          if not j . sal . fs . exists ( j . sal . fs . joinPaths ( base_path , service_file ) ) :                              failures . append ( service_file_missing_msg % j . sal . fs . joinPaths ( base_path , service_file ) )      try :          j . atyourservice . reposDiscover ( ) repo = j . atyourservice . repoGet ( j . sal . fs . joinPaths ( j . dirs . codeDir , <str> ) ) repo . blueprintExecute ( role = <str> , instance = <str> , path = <str> ) for actor in expected_actors :              if not j . sal . fs . exists ( j . sal . fs . joinPaths ( repo . path , <str> , actor ) ) :                  failures . append ( actor_missing_msg % actor )  else :                  for actor_file in expected_files_per_actor :                      if not j . sal . fs . exists ( j . sal . fs . joinPaths ( repo . path , <str> , actor , actor_file ) ) :                          failures . append ( actor_file_missing_msg % ( actor_file , actor ) )     for service_name , service_info in expected_services . items ( ) :              path = j . sal . fs . joinPaths ( repo . path , <str> , service_name ) check_service_dir ( path , service_info )  if failures :              model . data . result = RESULT_FAILED % <str> . join ( failures )   except :          model . data . result = RESULT_ERROR % str ( sys . exc_info ( ) [ : 2 ] )  finally :          job . service . save ( ) if repo :              repo . destroy ( )     