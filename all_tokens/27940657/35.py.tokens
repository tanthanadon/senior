import sys , os sys . path . append ( os . path . abspath ( <str> ) ) import seq import seq . dtw import utils . paths . files def make_dtw_feat ( in_path , out_path , k = 0 , dataset_format = <str> , select_type = <str> ) :      train , test = seq . seq_dataset ( in_path , dataset_format = dataset_format ) all_seqs = seq . unify_dataset ( test , train ) print ( all_seqs . keys ( ) ) seq_xy = get_pairs ( all_seqs ) train_xy = get_pairs ( train ) def dtw_vector ( x_i ) :          feat_vect = [ seq . dtw . dtw_metric ( x_i , x_j ) for x_j , y_j in train_xy ] print ( feat_vect ) print ( len ( feat_vect ) ) return feat_vect  dtw_feats = [ dtw_vector ( x_i ) for x_i , y_i in seq_xy ] def extr_data ( i ) :          y_i = str ( all_seqs [ <str> ] [ i ] ) person_i = str ( all_seqs [ <str> ] [ i ] ) return <str> + y_i + <str> + person_i  feat_text = utils . paths . files . seq_to_string ( dtw_feats , extr_data ) utils . paths . files . save_string ( out_path , feat_text )  def get_pairs ( all_seqs ) :      return zip ( all_seqs [ <str> ] , all_seqs [ <str> ] )  if __name__ == <str> :      in_path = <str> out_path = <str> make_dtw_feat ( in_path , out_path )    