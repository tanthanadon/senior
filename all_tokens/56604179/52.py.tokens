from inspect import * from inspect import ( _sentinel , _static_getmro , _check_instance , _check_class , _is_type , _shadowed_dict , ) def get_attr_value ( obj , name , * default ) :      from xotl . tools . params import check_default , Undefined default = check_default ( ) ( * default ) is_type = isinstance ( obj , type ) res = getattr_static ( obj , name , Undefined ) if isdatadescriptor ( res ) :          try :              owner = type if is_type else type ( obj ) res = res . __get__ ( obj , owner )  except Exception :              res = Undefined   if res is Undefined and not is_type :          cls = type ( obj ) res = getattr_static ( cls , name , Undefined ) if isdatadescriptor ( res ) :              try :                  res = res . __get__ ( obj , cls )  except Exception :                  try :                      res = res . __get__ ( cls , type )  except Exception :                      res = Undefined     if res is not Undefined :          return res  elif default is not Undefined :          return default  else :          msg = <str> raise AttributeError ( msg % ( type ( obj ) . __name__ , name ) )   def safe_name ( obj , affirm = False ) :      from types import FunctionType , MethodType from types import BuiltinFunctionType , BuiltinMethodType named_types = ( FunctionType , MethodType , BuiltinFunctionType , BuiltinMethodType , type , ) if isinstance ( obj , ( staticmethod , classmethod ) ) :          fn = get_attr_value ( obj , <str> , None ) if fn :              obj = fn   if isinstance ( obj , named_types ) :          try :              res = getattr_static ( obj , <str> , None ) if res :                  if isdatadescriptor ( res ) :                      res = res . __get__ ( obj , type )    except Exception :              res = None  if res is None :              try :                  res = obj . __name__  except AttributeError :                  res = None    else :          res = None  if res is None :          res = getattr_static ( obj , <str> , None ) if res and isdatadescriptor ( res ) :              res = res . __get__ ( obj , type ( obj ) )   if isinstance ( res , str ) :          return res  elif affirm :          if isinstance ( obj , ( tuple , list , set ) ) :              if isinstance ( obj , tuple ) :                  head , tail = <str>  elif isinstance ( obj , list ) :                  head , tail = <str>  else :                  head , tail = <str>  items = <str> . join ( safe_name ( t , affirm ) for t in obj ) return str ( <str> % ( head , items , tail ) )  else :              return safe_name ( type ( obj ) )   else :          return None   def _static_issubclass ( C , B ) :      mro = _static_getmro ( C ) if isinstance ( B , tuple ) :          return any ( b in mro for b in B )  else :          return B in mro    