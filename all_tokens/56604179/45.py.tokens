def predicative ( function , * args , ** kwds ) :      from xotl . tools . symbols import boolean from xotl . tools . fp . option import Maybe , Just , Wrong from xotl . tools . params import single is_single = single ( * args , ** kwds ) try :          res = function ( * args , ** kwds ) if isinstance ( res , ( boolean , Maybe ) ) :              if isinstance ( res , Just ) and res . inner :                  return res . inner  elif isinstance ( res , boolean ) and is_single and args [ 0 ] :                  return args  else :                  return res   elif res :              return res  else :              return Just ( res )   except Exception as error :          if isinstance ( error , ValueError ) and is_single :              return Wrong ( args [ 0 ] )  else :              return Wrong ( error )    def vouch ( function , * args , ** kwds ) :      from xotl . tools . symbols import boolean , Invalid from xotl . tools . clipping import small from xotl . tools . fp . option import Just , Wrong from xotl . tools . params import single res = function ( * args , ** kwds ) if isinstance ( res , boolean ) :          if res :              aux = single ( * args , ** kwds ) if aux is not Invalid :                  res = aux   else :              msg = <str> . format ( small ( function ) ) raise TypeError ( msg )   elif isinstance ( res , Wrong ) :          inner = res . inner if isinstance ( inner , BaseException ) :              raise inner  else :              msg = <str> . format ( small ( function ) ) if inner is not None or not isinstance ( inner , boolean ) :                  v , t = small ( inner ) , type ( inner ) . __name__ msg += <str> . format ( v , t )  raise TypeError ( msg )   elif isinstance ( res , Just ) :          res = res . inner  return res  def enfold ( checker ) :      def wrapper ( func ) :          def inner ( * args , ** kwds ) :              return checker ( func , * args , ** kwds )  try :              inner . __name__ = func . __name__ inner . __doc__ = func . __doc__  except Exception :              from xotl . tools . clipping import small inner . __name__ = str ( small ( func ) )  return inner  return wrapper   