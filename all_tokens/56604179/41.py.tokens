class Maybe :      __slots__ = <str> _singletons = [ None , None , None ] def __new__ ( cls , * args ) :          default = cls is Just if len ( args ) == 0 :              arg = default  elif len ( args ) == 1 :              arg = args [ 0 ]  else :              msg = <str> raise TypeError ( msg . format ( cls . __name__ , len ( args ) ) )  if arg is default or arg is None and cls is Wrong :              idx = 2 if arg is None else arg if cls . _singletons [ idx ] is None :                  self = super ( ) . __new__ ( cls ) self . inner = arg cls . _singletons [ idx ] = self  return cls . _singletons [ idx ]  elif cls is Maybe :              return ( Just if arg else Wrong ) ( arg )  elif isinstance ( arg , cls ) :              return arg  elif not isinstance ( arg , Maybe ) :              self = super ( ) . __new__ ( cls ) self . inner = arg return self  else :              msg = <str> raise ValueError ( msg . format ( cls . __name__ , arg ) )   def __init__ ( self , * args ) :          pass  def __nonzero__ ( self ) :          return isinstance ( self , Just )  __bool__ = __nonzero__ def __str__ ( self ) :          return <str> . format ( type ( self ) . __name__ , self . inner )  __repr__ = __str__ def __eq__ ( self , other ) :          return ( isinstance ( other , type ( self ) ) and self . inner == other . inner or self . inner is other )  def __ne__ ( self , other ) :          return not ( self == other )  @ classmethod def compel ( cls , value ) :          if cls is not Maybe :              test = cls is Just dual = Wrong if test else Just if bool ( value ) is test :                  return value  elif not isinstance ( value , dual ) :                  return cls ( value )  else :                  msg = vname = type ( value ) . __name__ raise TypeError ( msg . format ( vname , cls . __name__ ) )   else :              raise TypeError ( )   @ classmethod def choose ( cls , * types ) :          pass   class Just ( Maybe ) :      __slots__ = ( )  class Wrong ( Maybe ) :      __slots__ = ( )  def take ( value ) :      return value . inner if isinstance ( value , Maybe ) else value  false = Wrong ( ) true = Just ( ) none = Wrong ( None )  