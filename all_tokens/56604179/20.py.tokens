MIN_WIDTH = 8 DEFAULT_MAX_WIDTH = 64 ELLIPSIS_ASCII = <str> ELLIPSIS_UNICODE = <str> ELLIPSIS = ELLIPSIS_UNICODE OPERATOR_NAME = <str> _LAMBDA_NAME = ( lambda : 0 ) . __name__ def _check_max_width ( max_width , caller = None ) :      if max_width is None :          max_width = DEFAULT_MAX_WIDTH  elif max_width < MIN_WIDTH :          msg = <str> . format ( caller ) if caller else <str> msg += ( <str> <str> ) . format ( MIN_WIDTH , max_width ) raise ValueError ( msg )  return max_width  def crop ( obj , max_width = None , canonical = False ) :      from functools import partial max_width = _check_max_width ( max_width , caller = <str> ) if isinstance ( obj , str ) :          res = obj  else :          oper = getattr ( obj , OPERATOR_NAME , partial ( _crop , obj ) ) if isinstance ( oper , str ) :              res = oper  elif callable ( oper ) :              if getattr ( oper , <str> , <str> ) is not None :                  try :                      res = oper ( max_width = max_width , canonical = canonical )  except TypeError :                      res = oper ( )   else :                  res = NotImplemented   else :              msg = <str> raise TypeError ( msg . format ( OPERATOR_NAME , type ( oper ) . __name__ ) )   return res  def _crop ( obj , max_width = None , canonical = False ) :      from collections import Set , Mapping res = repr ( obj ) if canonical else str ( obj ) if ( res . startswith ( <str> ) and res . endswith ( <str> ) ) or len ( res ) > max_width :          try :              res = obj . __name__ if res == _LAMBDA_NAME and not canonical :                  res = res . replace ( _LAMBDA_NAME , <str> )   except AttributeError :              if isinstance ( obj , ( tuple , list , Set , Mapping ) ) :                  res = crop_iterator ( obj , max_width , canonical )  else :                  res = <str> . format ( type ( obj ) . __name__ , ELLIPSIS )    return res  def crop_iterator ( obj , max_width = None , canonical = False ) :      from collections import Set , Mapping max_width = _check_max_width ( max_width , caller = <str> ) classes = ( tuple , list , Mapping , Set ) cls = next ( ( c for c in classes if isinstance ( obj , c ) ) , None ) if cls :          res = <str> if cls is Set and not obj :              borders = ( <str> . format ( type ( obj ) . __name__ ) , <str> )  else :              borders = ( <str> , <str> , <str> , <str> ) [ classes . index ( cls ) ] UNDEF = object ( ) sep = <str> if cls is Mapping :                  iteritems = lambda d : iter ( d . items ( ) ) def itemrepr ( item ) :                      key , value = item return <str> . format ( repr ( key ) , repr ( value ) )   else :                  iteritems = iter itemrepr = repr  items = iteritems ( obj ) ok = True while ok :                  item = next ( items , UNDEF ) if item is not UNDEF :                      if res :                          res += sep  aux = itemrepr ( item ) if len ( res ) + len ( borders ) + len ( aux ) <= max_width :                          res += aux  else :                          res += ELLIPSIS ok = False   else :                      ok = False    return <str> . format ( borders [ 0 ] , res , borders [ 1 ] )  else :          raise TypeError ( <str> <str> . format ( type ( obj ) . __name__ ) )   short = small = crop  