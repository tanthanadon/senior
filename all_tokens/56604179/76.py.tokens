from hypothesis import given from hypothesis . strategies import text , binary @ given ( s = binary ( ) ) def test_safe_decode_dont_fail_uppon_invalid_encoding ( s ) :      from xoutil . future . codecs import safe_decode assert safe_decode ( s , <str> ) == safe_decode ( s )  @ given ( s = text ( ) ) def test_safe_encode_dont_fail_uppon_invalid_encoding ( s ) :      from xoutil . future . codecs import safe_encode assert safe_encode ( s , <str> ) == safe_encode ( s )  @ given ( text ( ) ) def test_safe_encode_yields_bytes ( s ) :      from xoutil . future . codecs import safe_encode assert isinstance ( safe_encode ( s ) , bytes )  @ given ( binary ( ) ) def test_safe_decode_yields_unicode ( s ) :      try :          Text = unicode  except NameError :          Text = str  from xoutil . future . codecs import safe_decode assert isinstance ( safe_decode ( s ) , Text )   