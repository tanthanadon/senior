__all__ = ( <str> , <str> , <str> , <str> , <str> , <str> , ) PASS_PHRASE_LEVEL_BASIC = 0 PASS_PHRASE_LEVEL_MAPPED = 1 PASS_PHRASE_LEVEL_MAPPED_MIXED = 2 PASS_PHRASE_LEVEL_MAPPED_DATED = 3 PASS_PHRASE_LEVEL_STRICT = 4 DEFAULT_PASS_PHRASE_LEVEL = PASS_PHRASE_LEVEL_MAPPED_DATED PASS_LEVEL_NAME_MAPPING = { <str> : PASS_PHRASE_LEVEL_BASIC , <str> : PASS_PHRASE_LEVEL_MAPPED , <str> : PASS_PHRASE_LEVEL_MAPPED_MIXED , <str> : PASS_PHRASE_LEVEL_MAPPED_DATED , <str> : PASS_PHRASE_LEVEL_STRICT , } BASIC_PASSWORD_SIZE = 4 MAX_PASSWORD_SIZE = 512 SAMPLE = <str> def _normalize_level ( level ) :      if isinstance ( level , str ) :          return PASS_LEVEL_NAME_MAPPING [ level ]  else :          return level   def generate_password ( pass_phrase , level = DEFAULT_PASS_PHRASE_LEVEL ) :      from random import sample , randint from xotl . tools . string import slugify level = _normalize_level ( level ) size = MAX_PASSWORD_SIZE + 1 required = min ( max ( level , 1 ) * BASIC_PASSWORD_SIZE , MAX_PASSWORD_SIZE ) if pass_phrase :          res = slugify ( pass_phrase , <str> , invalid_chars = <str> ) if level >= PASS_PHRASE_LEVEL_MAPPED :              for ( old , new ) in ( <str> , <str> , <str> , <str> ) :                  res = res . replace ( old , new )   if level >= PASS_PHRASE_LEVEL_MAPPED_MIXED :              for new in <str> :                  old = new . lower ( ) res = res . replace ( old , new )   if level >= PASS_PHRASE_LEVEL_MAPPED_DATED :              from datetime import datetime today = datetime . today ( ) res += today . strftime ( <str> )  if level >= PASS_PHRASE_LEVEL_STRICT :              size = required   else :          size = required count = randint ( BASIC_PASSWORD_SIZE , 2 * BASIC_PASSWORD_SIZE ) res = <str> . join ( sample ( SAMPLE , count ) )  if size <= MAX_PASSWORD_SIZE :          if len ( res ) < size :              needed = ( size - len ( res ) ) // BASIC_PASSWORD_SIZE + 1 res += generate_password ( None , needed )  res = <str> . join ( sample ( res , size ) )  return res [ : size ]   