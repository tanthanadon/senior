import abc import datetime from numbers import Number from functools import total_ordering class InfinityComparable ( metaclass = abc . ABCMeta ) :      @ classmethod def __subclasshook__ ( self , cls ) :          if isinstance ( cls , type ) and issubclass ( cls , Number ) :              return True  else :              return NotImplemented    InfinityComparable . register ( datetime . date ) InfinityComparable . register ( datetime . datetime ) InfinityComparable . register ( datetime . timedelta ) @ total_ordering class InfinityType :      _positive = None _negative = None def __getnewargs__ ( self ) :          return ( self . sign , )  def __new__ ( cls , sign ) :          if sign < 0 :              res = cls . _negative if not res :                  cls . _negative = res = object . __new__ ( cls )   else :              res = cls . _positive if not res :                  cls . _positive = res = object . __new__ ( cls )   return res  def __init__ ( self , sign ) :          self . sign = - 1 if sign < 0 else 1  def __lt__ ( self , other ) :          if isinstance ( other , InfinityComparable ) :              return self . sign < 0  elif isinstance ( other , InfinityType ) :              return self . sign < other . sign  else :              raise TypeError ( <str> % ( type ( self ) , type ( other ) ) )   def __eq__ ( self , other ) :          if isinstance ( other , InfinityType ) :              return self . sign == other . sign  else :              return NotImplemented   def __neg__ ( self ) :          return type ( self ) ( - self . sign )  def __str__ ( self ) :          return <str> if self . sign > 0 else <str>  def __repr__ ( self ) :          return <str> if self . sign > 0 else <str>  def __hash__ ( self ) :          return id ( self )   Infinity = InfinityType ( + 1 )  