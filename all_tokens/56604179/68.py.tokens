from . meta import Dimension , UNIT def kilo ( v ) :      return 1000 * v  def centi ( v ) :      return v / 100  def milli ( v ) :      return v / 1000  def micro ( v ) :      return v / 1000000  def nano ( v ) :      return v / ( 10 ** 9 )  @ Dimension . new ( ) class Length :      metre = UNIT kilometer = km = kilo ( metre ) centimeter = cm = centi ( metre ) millimeter = mm = milli ( metre ) nanometer = nm = nano ( metre )  metre = m = Length . m = Length . metre L = Length @ Dimension . new class Time :      second = UNIT millisecond = ms = milli ( second ) nanosecond = ns = nano ( second ) minute = second * 60 hour = minute * 60  second = s = Time . s = Time . second T = Time @ Dimension . new ( unit_aliases = ( <str> , ) ) class Mass :      kilogram = UNIT gram = kilogram / 1000  kilogram = kg = Mass . kg M = Mass @ Dimension . new ( unit_aliases = <str> ) class ElectricCurrent :      ampere = UNIT milliampere = milli ( ampere )  A = ampere = ElectricCurrent . A I = ElectricCurrent @ Dimension . new ( unit_aliases = <str> ) class Temperature :      kelvin = UNIT @ classmethod def from_celcius ( cls , val ) :          <str> return ( val + 273.15 ) * cls . kelvin  @ classmethod def from_fahrenheit ( cls , val ) :          <str> return ( val + 459.67 ) * ( 5 / 9 ) * cls . kelvin   K = kelvin = Temperature . K O = Temperature @ Dimension . new ( unit_alias = <str> ) class Substance :      mole = UNIT  mole = mol = Substance . mol N = Substance @ Dimension . new class Luminosity :      candela = UNIT  J = Luminosity Area = L ** 2 Volume = L ** 3 Volume . metre_cubic = Volume . _unit_ Volume . _unitname_ = <str> Frequency = T ** - 1 Frequency . Hz = Frequency . _unit_ Force = L * M / T ** 2 assert hasattr ( Force , <str> ) assert Force == L * M * T ** - 2 Force . Newton = Force . N = Force . _unit_ Presure = M / L / T ** 2 assert hasattr ( Presure , <str> ) assert Presure == L ** - 1 * M * T ** - 2 , <str> Presure . Pascal = Presure . Pa = Presure . _unit_ Velocity = L / T Acceleration = L / T ** 2  