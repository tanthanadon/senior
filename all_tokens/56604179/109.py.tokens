import sys import importlib from importlib . abc import MetaPathFinder XOUTIL_NAMESPACE = <str> XOTL_TOOLS_NS = <str> class Hook ( MetaPathFinder ) :      def find_module ( self , full_name , path = None ) :          name = self . _from_xoutil_to_xotl ( full_name ) if name :              return self   def _from_xoutil_to_xotl ( self , full_name ) :          if full_name . startswith ( XOUTIL_NAMESPACE ) :              path = full_name [ len ( XOUTIL_NAMESPACE ) : ] return XOTL_TOOLS_NS + path  else :              return None   def load_module ( self , full_name ) :          result = sys . modules . get ( full_name , None ) if result :              return result  modname = self . _from_xoutil_to_xotl ( full_name ) result = None if modname :              result = sys . modules . get ( modname , None )  if not result and modname :              result = importlib . import_module ( modname )  if result :              import warnings warnings . warn ( ( <str> <str> ) . format ( full_name , modname ) ) sys . modules [ modname ] = sys . modules [ full_name ] = result return result  else :              raise ImportError ( modname )    sys . meta_path . insert ( 0 , Hook ( ) )  