import unittest from xoutil . symbols import boolean class BooleanTests ( unittest . TestCase ) :      def test_singletons ( self ) :          from sys import intern from xoutil . symbols import Unset foo = <str> bar = <str> a = boolean ( <str> ) b = boolean ( foo + <str> ) c = boolean ( <str> + bar ) self . assertIs ( intern ( foo + bar ) , intern ( repr ( Unset ) ) ) self . assertIs ( repr ( a ) , repr ( b ) ) self . assertIs ( a , Unset ) self . assertIs ( b , Unset ) self . assertIs ( c , Unset )  def test_equality ( self ) :          a = boolean ( <str> ) b = boolean ( <str> , True ) self . assertEqual ( a , False ) self . assertEqual ( b , True ) self . assertEqual ( not b , False )  def test_parse ( self ) :          a = boolean ( <str> ) b = boolean ( <str> , True ) c = boolean . parse ( repr ( a ) ) self . assertIs ( boolean . parse ( <str> ) , a ) self . assertIs ( boolean . parse ( <str> ) , b ) self . assertIs ( a , c )  def test_int_compatibility ( self ) :          a = boolean ( <str> ) b = boolean ( <str> , True ) self . assertEqual ( a + 1 , 1 ) self . assertEqual ( b + 1 , 2 )  def test_comments ( self ) :          a = boolean ( <str> ) value = <str> % a b = boolean . parse ( value ) self . assertIs ( a , b )  def test_symbols_are_pickable ( self ) :          import pickle from xotl . tools . symbols import Unset , Undefined for protocol in range ( pickle . DEFAULT_PROTOCOL , pickle . HIGHEST_PROTOCOL + 1 ) :              self . assertIs ( Unset , pickle . loads ( pickle . dumps ( Unset , protocol ) ) ) self . assertIs ( Undefined , pickle . loads ( pickle . dumps ( Undefined , protocol ) ) )    def test_symbols_is_importable ( ) :      import sys modules = { mod : sys . modules [ mod ] for mod in sys . modules if mod . startswith ( <str> ) } for mod in modules :          sys . modules . pop ( mod )  try :          import xoutil . symbols  finally :          for modname , mod in modules . items ( ) :              sys . modules [ modname ] = mod     