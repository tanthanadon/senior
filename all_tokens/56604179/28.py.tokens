from xotl . tools . modules import moduleproperty @ moduleproperty def context_lock ( self ) :      from xotl . tools . objects import classproperty class ContextLock :          def __new__ ( cls , * args , ** kwargs ) :              msg = <str> . format ( cls . __name__ ) raise RuntimeError ( msg )  @ classmethod def enter ( cls , ** kwargs ) :              from xotl . tools . context import context return context ( cls , ** kwargs )  @ classproperty def locked ( cls ) :              from xotl . tools . context import context return context [ cls ]   return ContextLock  del moduleproperty  