import os import unittest import tempfile import shutil class TestFs ( unittest . TestCase ) :      def setUp ( self ) :          pjoin = os . path . join self . previous_dir = os . getcwd ( ) self . base = base = tempfile . mkdtemp ( prefix = <str> ) os . makedirs ( pjoin ( base , <str> , <str> , <str> ) ) os . makedirs ( pjoin ( base , <str> , <str> , <str> ) ) os . makedirs ( pjoin ( base , <str> , <str> ) ) self . files = files = [ ] wexpected = self . walk_up_expected = pjoin ( self . base , <str> ) sentinel = tempfile . mkstemp ( prefix = <str> , dir = wexpected ) self . sentinel = os . path . basename ( sentinel [ - 1 ] ) files . append ( sentinel ) files . append ( tempfile . mkstemp ( prefix = <str> , dir = pjoin ( self . base , <str> , <str> ) ) ) files . append ( tempfile . mkstemp ( prefix = <str> , dir = pjoin ( self . base , <str> , <str> ) ) ) wstart = self . walk_up_start = pjoin ( self . base , <str> , <str> , <str> ) files . append ( tempfile . mkstemp ( prefix = <str> , dir = wstart ) ) files . append ( tempfile . mkstemp ( suffix = <str> , dir = pjoin ( self . base , <str> , <str> ) ) ) files . append ( tempfile . mkstemp ( prefix = <str> , dir = pjoin ( self . base , <str> , <str> ) ) )  def test_iter_files_with_regex_pattern ( self ) :          from xoutil . fs import iter_files res = list ( iter_files ( self . base , <str> ) ) self . assertEqual ( 2 , len ( res ) ) self . assertIn ( self . files [ - 3 ] [ - 1 ] , res ) self . assertIn ( self . files [ - 1 ] [ - 1 ] , res )  def test_iter_files_with_maxdepth ( self ) :          from xoutil . fs import iter_files res = list ( iter_files ( self . base , <str> , maxdepth = 3 ) ) self . assertEqual ( 1 , len ( res ) ) self . assertIn ( self . files [ - 1 ] [ - 1 ] , res ) res = list ( iter_files ( self . base , <str> , maxdepth = 2 ) ) self . assertEqual ( 0 , len ( res ) )  def test_walk_up ( self ) :          from xoutil . fs import walk_up expected , start = self . walk_up_expected , self . walk_up_start sentinel = self . sentinel self . assertEqual ( expected , walk_up ( start , sentinel ) )  def test_ensure_filename ( self ) :          from xoutil . fs import ensure_filename filename = os . path . join ( self . base , <str> , <str> , <str> ) ensure_filename ( filename ) self . assertTrue ( os . path . isfile ( filename ) )  def tearDown ( self ) :          shutil . rmtree ( self . base ) os . chdir ( self . previous_dir )   if __name__ == <str> :      unittest . main ( )   