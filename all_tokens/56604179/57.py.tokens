from json import * import json as _stdlib from json import __all__ __all__ = list ( __all__ ) + [ <str> , <str> ] from json import encoder , decoder class JSONEncoder ( _stdlib . JSONEncoder ) :      __doc__ = ( _stdlib . JSONEncoder . __doc__ + ) DATE_FORMAT = str ( <str> ) TIME_FORMAT = str ( <str> ) DT_FORMAT = str ( <str> ) % ( DATE_FORMAT , TIME_FORMAT ) def default ( self , obj ) :          from datetime import datetime , date , time from decimal import Decimal from collections import Iterable if isinstance ( obj , datetime ) :              return obj . strftime ( self . DT_FORMAT )  elif isinstance ( obj , date ) :              return obj . strftime ( self . DATE_FORMAT )  elif isinstance ( obj , time ) :              return obj . strftime ( self . TIME_FORMAT )  elif isinstance ( obj , Decimal ) :              return str ( obj )  elif isinstance ( obj , Iterable ) :              return list ( iter ( obj ) )  return super ( ) . default ( obj )   try :      JSONDecodeError  except NameError :      JSONDecodeError = ValueError  def file_load ( filename ) :      with file ( filename , <str> ) as f :          return load ( f )   from json . encoder import encode_basestring try :      from _json import encode_basestring_ascii  except ImportError :      from json . encoder import ( py_encode_basestring_ascii as encode_basestring_ascii , )  def encode_string ( string , ensure_ascii = True ) :      encode = encode_basestring_ascii if ensure_ascii else encode_basestring return encode ( string )   