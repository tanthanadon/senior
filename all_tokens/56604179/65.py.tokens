import sys from os . path import abspath , expanduser , dirname , sep , normpath , join as _orig_join from xotl . tools . future . functools import power as pow_ __all__ = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ) def rtrim ( path , n = 1 ) :      return pow_ ( dirname , n ) ( normalize_path ( path ) )  def fix_encoding ( name , encoding = None ) :      if not isinstance ( name , str ) :          if not encoding :              from xotl . tools . future . codecs import force_encoding encoding = force_encoding ( sys . getfilesystemencoding ( ) )  fixer = name . decode if isinstance ( name , bytes ) else name . encode return fixer ( encoding )  else :          return name   def join ( base , * extras ) :      try :          path = _orig_join ( base , * extras )  except Exception :          base = fix_encoding ( base ) extras = [ fix_encoding ( extra ) for extra in extras ] path = _orig_join ( base , * extras )  return normpath ( path )  def normalize_path ( base , * extras ) :      try :          path = _orig_join ( base , * extras )  except Exception :          path = join ( base , * extras )  return abspath ( expanduser ( path ) )  def shorten_module_filename ( filename ) :      path = sys . path [ : ] path . sort ( lambda x , y : len ( y ) - len ( x ) ) for item in path :          if item and filename . startswith ( item ) :              filename = filename [ len ( item ) : ] if filename . startswith ( sep ) :                  filename = filename [ len ( sep ) : ]    for item in ( <str> , <str> ) :          if filename . endswith ( item ) :              filename = filename [ : - len ( item ) ] if filename . endswith ( sep ) :                  filename = filename [ : - len ( sep ) ]    return shorten_user ( filename )  def shorten_user ( filename ) :      home = expanduser ( <str> ) if filename . startswith ( home ) :          filename = _orig_join ( <str> , filename [ len ( home ) : ] )  return filename   