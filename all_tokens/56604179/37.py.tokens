from xotl . tools . decorator . meta import decorator @ decorator def unstable ( target , msg = None ) :      import warnings from xotl . tools . names import nameof if msg is None :          msg = ( <str> <str> )  try :          from zope . interface import Interface  except ImportError :          from xotl . tools . symbols import Ignored as Interface  if isinstance ( target , type ( Interface ) ) :          objtype = <str>  elif isinstance ( target , type ) :          objtype = <str>  else :          objtype = <str>  message = msg . format ( objtype , nameof ( target , inner = True , full = True ) ) if isinstance ( target , type ) or issubclass ( type ( target ) , type ( Interface ) ) :          class meta ( type ( target ) ) :              pass  def new ( * args , ** kwargs ) :              warnings . warn ( message , stacklevel = 2 ) return target . __new__ ( * args , ** kwargs )  klass = meta ( target . __name__ , ( target , ) , { <str> : new } ) return klass  else :          def _unstable ( * args , ** kwargs ) :              message = msg . format ( objtype , nameof ( target , inner = True , full = True ) ) warnings . warn ( message , stacklevel = 2 ) return target ( * args , ** kwargs )  return _unstable   del decorator  