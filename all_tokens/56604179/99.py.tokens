import pytest from xoutil . versions import python_version from xoutil . future . collections import OrderedSmartDict PYPY = python_version . pypy def test_nameof ( ) :      from xoutil . names import nameof , simple_name from collections import OrderedDict as sorted_dict assert nameof ( sorted_dict ) == <str> assert nameof ( sorted_dict , inner = True ) == <str> sd = sorted_dict ( x = 1 , y = 2 ) assert nameof ( sd ) == <str> assert nameof ( sd , typed = True ) == <str> assert nameof ( sd , inner = True , typed = True ) == <str> s = <str> assert nameof ( s , inner = True ) == <str> passed = nameof ( <str> ) == <str> assert passed i = 1 assert nameof ( i ) == <str> assert nameof ( i , inner = True ) == <str> assert nameof ( i , typed = True ) == <str> assert hex ( id ( sd ) ) in nameof ( sd , inner = True ) values = ( None , True , False , BaseException , int , dict , object ) names = [ simple_name ( v ) for v in values ] names . sort ( ) assert names == [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ]  def test_nameof_methods ( ) :      from xoutil . names import nameof , simple_name class Foobar :          def __init__ ( self ) :              self . attr = <str>  def first ( self ) :              pass  @ staticmethod def second ( ) :              pass  @ classmethod def third ( cls ) :              pass   obj = Foobar ( ) attrs = ( getattr ( obj , n ) for n in dir ( obj ) if not n . startswith ( <str> ) ) attrs = ( v for v in attrs if callable ( v ) ) names = nameof ( * attrs ) names . sort ( ) assert names == [ <str> , <str> , <str> ] attrs = ( getattr ( obj , n ) for n in dir ( obj ) if not n . startswith ( <str> ) ) attrs = ( v for v in attrs if callable ( v ) ) names = [ simple_name ( v , join = False ) for v in attrs ] names . sort ( ) assert names == [ <str> , <str> , <str> ]  @ pytest . mark . skipif ( PYPY , reason = <str> ) def test_fullnameof ( ) :      from xoutil . names import nameof , simple_name _name = <str> from collections import OrderedDict as sorted_dict assert nameof ( sorted_dict , full = True ) == <str> assert nameof ( sorted_dict , inner = True , full = True ) == _name sd = sorted_dict ( x = 1 , y = 2 ) assert nameof ( sd , full = True ) == <str> assert nameof ( sd , typed = True , full = True ) == <str> assert nameof ( sd , inner = True , typed = True , full = True ) == _name assert simple_name ( simple_name ) == <str> assert simple_name ( sd ) == <str>  @ pytest . mark . skipif ( PYPY , reason = <str> ) def test_fullnameof_no_rename ( ) :      from xoutil . names import nameof from collections import OrderedDict _full_name = <str> _name = <str> assert nameof ( OrderedDict , full = True ) == _full_name assert nameof ( OrderedDict , inner = True , full = True ) == _name  def test_module_level_name ( ) :      from xoutil . names import nameof assert nameof ( OrderedSmartDict ) == <str> assert nameof ( OrderedSmartDict , typed = True ) == <str>  def test_module_level_name_isolated ( ) :      from xoutil . names import nameof , simple_name full_name_1 = <str> full_name_2 = <str> assert nameof ( OrderedSmartDict , full = True ) == full_name_1 assert simple_name ( OrderedSmartDict ) == full_name_2   