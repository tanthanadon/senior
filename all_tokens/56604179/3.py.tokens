def nameof ( obj ) :      try :          return obj . __name__  except AttributeError :          if isinstance ( obj , ( staticmethod , classmethod ) ) :              return obj . __func__ . __name__  else :              import re res = str ( obj ) identifier_regex = <str> if res == repr ( obj ) and re . match ( identifier_regex , res ) :                  return res  else :                  return type ( obj ) . __name__     def args_repr ( args , ** options ) :      count = options . get ( <str> , 3 ) cast = options . get ( <str> , lambda arg : type ( arg ) . __name__ ) item_format = options . get ( <str> , <str> ) tail_format = options . get ( <str> , <str> ) joiner = options . get ( <str> , <str> ) if isinstance ( joiner , str ) :          joiner = str ( joiner ) . join  parts = [ ] i = 0 while i < min ( count , len ( args ) ) :          parts . append ( item_format . format ( cast ( args [ i ] ) ) ) i += 1  rem = len ( args ) - i if rem > 0 :          parts . append ( tail_format . format ( rem ) )  return joiner ( parts )  def kwargs_repr ( kwargs , ** options ) :      count = options . get ( <str> , 3 ) cast = options . get ( <str> , lambda arg : type ( arg ) . __name__ ) item_format = options . get ( <str> , <str> ) tail_format = options . get ( <str> , <str> ) joiner = options . get ( <str> , <str> ) if isinstance ( joiner , str ) :          joiner = str ( joiner ) . join  parts = [ ] keys = list ( kwargs ) keys . sort ( ) i = 0 while i < min ( count , len ( keys ) ) :          key = keys [ i ] value = kwargs [ key ] parts . append ( item_format . format ( key , cast ( value ) ) ) i += 1  rem = len ( keys ) - i if rem > 0 :          parts . append ( tail_format . format ( rem ) )  return joiner ( parts )  def both_args_repr ( args , kwargs , ** options ) :      joiner = options . get ( <str> , <str> ) if isinstance ( joiner , str ) :          joiner = str ( joiner ) . join  items = ( args , args_repr ) , ( kwargs , kwargs_repr ) parts = [ res for res in ( fn ( aux , ** options ) for aux , fn in items ) if res ] return joiner ( parts )   