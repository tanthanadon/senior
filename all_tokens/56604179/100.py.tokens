import pytest from hypothesis import strategies as s , given def test_first_n_no_filling ( ) :      from xoutil . future . itertools import first_n with pytest . raises ( StopIteration ) :          next ( first_n ( ( ) , 1 ) )   def test_first_n_filling_by_cycling ( ) :      from xoutil . future . itertools import first_n assert list ( first_n ( ( ) , 10 , range ( 5 ) ) ) == [ 0 , 1 , 2 , 3 , 4 ] * 2  def test_first_n_repeat_filling_by_repeating ( ) :      from xoutil . future . itertools import first_n from itertools import repeat assert list ( first_n ( ( ) , 10 , <str> ) ) == list ( repeat ( <str> , 10 ) )  def test_first_n_simple ( ) :      from xoutil . future . itertools import first_n assert list ( first_n ( range ( 100 ) , 10 , 0 ) ) == [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]  def test_slides ( ) :      from xoutil . future . itertools import slides assert list ( slides ( range ( 1 , 11 ) ) ) == [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 7 , 8 ) , ( 9 , 10 ) ]  def test_slides_filling ( ) :      from xoutil . future . itertools import slides assert list ( slides ( range ( 1 , 5 ) , 3 ) ) == [ ( 1 , 2 , 3 ) , ( 4 , None , None ) ]  def test_slides_with_repeating_filling ( ) :      from xoutil . future . itertools import slides aux = [ ( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) , ( 7 , 8 , 9 ) , ( 10 , None , None ) ] assert list ( slides ( range ( 1 , 11 ) , width = 3 , fill = None ) ) == aux  def test_slides_with_cycling_filling ( ) :      from xoutil . future . itertools import slides aux = [ ( 1 , 2 , 3 , 4 , 5 ) , ( 6 , 7 , 8 , 9 , 10 ) , ( 11 , 1 , 2 , 1 , 2 ) ] assert list ( slides ( range ( 1 , 12 ) , width = 5 , fill = ( 1 , 2 ) ) ) == aux  def test_continuously_slides ( ) :      from xoutil . future . itertools import continuously_slides aux = continuously_slides ( <str> , 3 , <str> ) trigrams = list ( <str> . join ( x ) for x in aux ) assert <str> in trigrams assert <str> in trigrams assert <str> in trigrams assert <str> in trigrams assert <str> in trigrams assert <str> in trigrams assert <str> in trigrams assert len ( trigrams ) == 7  @ s . composite def keys ( draw ) :      return <str> % draw ( s . integers ( min_value = 0 , max_value = 100 ) )  @ given ( s . dictionaries ( keys ( ) , s . integers ( ) ) , s . dictionaries ( keys ( ) , s . integers ( ) ) ) def test_dict_update_new ( d1 , d2 ) :      from xoutil . future . itertools import dict_update_new d = dict ( d1 ) dict_update_new ( d1 , d2 ) assert all ( key in d1 for key in d2 ) assert all ( d1 [ key ] == d2 [ key ] for key in d2 if key not in d )  @ given ( s . lists ( s . integers ( ) , max_size = 30 ) ) def test_delete_duplicates ( l ) :      from xoutil . future . itertools import delete_duplicates from xoutil . future . collections import Counter res = delete_duplicates ( l ) assert type ( l ) is type ( res ) assert len ( res ) <= len ( l ) assert all ( Counter ( res ) [ item ] == 1 for item in l )  @ given ( s . lists ( s . integers ( ) , max_size = 30 ) ) def test_delete_duplicates_with_key ( l ) :      from xoutil . future . itertools import delete_duplicates res = delete_duplicates ( l , key = lambda x : x % 3 ) assert len ( res ) <= 3 , <str>  def test_iter_delete_duplicates ( ) :      from xoutil . future . itertools import iter_delete_duplicates assert list ( iter_delete_duplicates ( <str> ) ) == [ <str> , <str> , <str> , <str> ] assert list ( iter_delete_duplicates ( <str> , key = lambda x : x . lower ( ) ) ) == [ <str> , <str> , <str> ]  @ given ( s . lists ( s . integers ( ) , max_size = 30 ) , s . lists ( s . integers ( ) , max_size = 30 ) , s . lists ( s . integers ( ) , max_size = 30 ) ) def test_merge ( l1 , l2 , l3 ) :      from xoutil . future . itertools import merge l1 = sorted ( l1 ) l2 = sorted ( l2 ) l3 = sorted ( l3 ) iter_ = merge ( l1 , l2 , l3 ) expected = sorted ( l1 + l2 + l3 ) result = [ ] for _ in range ( len ( expected ) ) :          result . append ( next ( iter_ ) )  with pytest . raises ( StopIteration ) :          last = next ( iter_ )  assert result == expected  @ given ( s . lists ( s . integers ( ) , max_size = 30 ) , s . lists ( s . integers ( ) , max_size = 30 ) ) def test_merge_by_key ( l1 , l2 ) :      from xoutil . future . itertools import merge l1 = [ ( <str> , i ) for i in sorted ( l1 ) ] l2 = [ ( <str> , i ) for i in sorted ( l2 ) ] iter_ = merge ( l1 , l2 , key = lambda x : x [ 1 ] ) expected = sorted ( l1 + l2 , key = lambda x : x [ 1 ] ) result = [ ] for _ in range ( len ( expected ) ) :          result . append ( next ( iter_ ) )  with pytest . raises ( StopIteration ) :          last = next ( iter_ )  assert result == expected  @ given ( s . lists ( s . integers ( ) , max_size = 30 ) , s . lists ( s . integers ( ) , max_size = 30 ) ) def test_merge_by_key_incomparable ( l1 , l2 ) :      class item :          def __init__ ( self , x ) :              self . item = x   from xoutil . future . itertools import merge l1 = [ item ( i ) for i in sorted ( l1 ) ] l2 = [ item ( i ) for i in sorted ( l2 ) ] iter_ = merge ( l1 , l2 , key = lambda x : x . item ) expected = sorted ( l1 + l2 , key = lambda x : x . item ) result = [ ] for _ in range ( len ( expected ) ) :          result . append ( next ( iter_ ) )  with pytest . raises ( StopIteration ) :          last = next ( iter_ )  assert result == expected   