import errno import os import re import subprocess import sys def get_keywords ( ) :      git_refnames = <str> git_full = <str> git_date = <str> keywords = { <str> : git_refnames , <str> : git_full , <str> : git_date } return keywords  class VersioneerConfig :       def get_config ( ) :      cfg = VersioneerConfig ( ) cfg . VCS = <str> cfg . style = <str> cfg . tag_prefix = <str> cfg . parentdir_prefix = <str> cfg . versionfile_source = <str> cfg . verbose = False return cfg  class NotThisMethod ( Exception ) :       LONG_VERSION_PY = { } HANDLERS = { } def register_vcs_handler ( vcs , method ) :      def decorate ( f ) :          if vcs not in HANDLERS :              HANDLERS [ vcs ] = { }  HANDLERS [ vcs ] [ method ] = f return f  return decorate  def run_command ( commands , args , cwd = None , verbose = False , hide_stderr = False , env = None ) :      assert isinstance ( commands , list ) p = None for c in commands :          try :              dispcmd = str ( [ c ] + args ) p = subprocess . Popen ( [ c ] + args , cwd = cwd , env = env , stdout = subprocess . PIPE , stderr = ( subprocess . PIPE if hide_stderr else None ) , ) break  except EnvironmentError :              e = sys . exc_info ( ) [ 1 ] if e . errno == errno . ENOENT :                  continue  if verbose :                  print ( <str> % dispcmd ) print ( e )  return None , None   else :          if verbose :              print ( <str> % ( commands , ) )  return None , None  stdout = p . communicate ( ) [ 0 ] . strip ( ) if sys . version_info [ 0 ] >= 3 :          stdout = stdout . decode ( )  if p . returncode != 0 :          if verbose :              print ( <str> % dispcmd ) print ( <str> % stdout )  return None , p . returncode  return stdout , p . returncode  def versions_from_parentdir ( parentdir_prefix , root , verbose ) :      rootdirs = [ ] for i in range ( 3 ) :          dirname = os . path . basename ( root ) if dirname . startswith ( parentdir_prefix ) :              return { <str> : dirname [ len ( parentdir_prefix ) : ] , <str> : None , <str> : False , <str> : None , <str> : None , }  else :              rootdirs . append ( root ) root = os . path . dirname ( root )   if verbose :          print ( <str> % ( str ( rootdirs ) , parentdir_prefix ) )  raise NotThisMethod ( <str> )  @ register_vcs_handler ( <str> , <str> ) def git_get_keywords ( versionfile_abs ) :      keywords = { } try :          f = open ( versionfile_abs , <str> ) for line in f . readlines ( ) :              if line . strip ( ) . startswith ( <str> ) :                  mo = re . search ( <str> , line ) if mo :                      keywords [ <str> ] = mo . group ( 1 )   if line . strip ( ) . startswith ( <str> ) :                  mo = re . search ( <str> , line ) if mo :                      keywords [ <str> ] = mo . group ( 1 )   if line . strip ( ) . startswith ( <str> ) :                  mo = re . search ( <str> , line ) if mo :                      keywords [ <str> ] = mo . group ( 1 )    f . close ( )  except EnvironmentError :          pass  return keywords  @ register_vcs_handler ( <str> , <str> ) def git_versions_from_keywords ( keywords , tag_prefix , verbose ) :      if not keywords :          raise NotThisMethod ( <str> )  date = keywords . get ( <str> ) if date is not None :          date = date . strip ( ) . replace ( <str> , <str> , 1 ) . replace ( <str> , <str> , 1 )  refnames = keywords [ <str> ] . strip ( ) if refnames . startswith ( <str> ) :          if verbose :              print ( <str> )  raise NotThisMethod ( <str> )  refs = set ( [ r . strip ( ) for r in refnames . strip ( <str> ) . split ( <str> ) ] ) TAG = <str> tags = set ( [ r [ len ( TAG ) : ] for r in refs if r . startswith ( TAG ) ] ) if not tags :          tags = set ( [ r for r in refs if re . search ( <str> , r ) ] ) if verbose :              print ( <str> % <str> . join ( refs - tags ) )   if verbose :          print ( <str> % <str> . join ( sorted ( tags ) ) )  for ref in sorted ( tags ) :          if ref . startswith ( tag_prefix ) :              r = ref [ len ( tag_prefix ) : ] if verbose :                  print ( <str> % r )  return { <str> : r , <str> : keywords [ <str> ] . strip ( ) , <str> : False , <str> : None , <str> : date , }   if verbose :          print ( <str> )  return { <str> : <str> , <str> : keywords [ <str> ] . strip ( ) , <str> : False , <str> : <str> , <str> : None , }  @ register_vcs_handler ( <str> , <str> ) def git_pieces_from_vcs ( tag_prefix , root , verbose , run_command = run_command ) :      GITS = [ <str> ] if sys . platform == <str> :          GITS = [ <str> , <str> ]  out , rc = run_command ( GITS , [ <str> , <str> ] , cwd = root , hide_stderr = True ) if rc != 0 :          if verbose :              print ( <str> % root )  raise NotThisMethod ( <str> )  describe_out , rc = run_command ( GITS , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> % tag_prefix , ] , cwd = root , ) if describe_out is None :          raise NotThisMethod ( <str> )  describe_out = describe_out . strip ( ) full_out , rc = run_command ( GITS , [ <str> , <str> ] , cwd = root ) if full_out is None :          raise NotThisMethod ( <str> )  full_out = full_out . strip ( ) pieces = { } pieces [ <str> ] = full_out pieces [ <str> ] = full_out [ : 7 ] pieces [ <str> ] = None git_describe = describe_out dirty = git_describe . endswith ( <str> ) pieces [ <str> ] = dirty if dirty :          git_describe = git_describe [ : git_describe . rindex ( <str> ) ]  if <str> in git_describe :          mo = re . search ( <str> , git_describe ) if not mo :              pieces [ <str> ] = <str> % describe_out return pieces  full_tag = mo . group ( 1 ) if not full_tag . startswith ( tag_prefix ) :              if verbose :                  fmt = <str> print ( fmt % ( full_tag , tag_prefix ) )  pieces [ <str> ] = <str> % ( full_tag , tag_prefix , ) return pieces  pieces [ <str> ] = full_tag [ len ( tag_prefix ) : ] pieces [ <str> ] = int ( mo . group ( 2 ) ) pieces [ <str> ] = mo . group ( 3 )  else :          pieces [ <str> ] = None count_out , rc = run_command ( GITS , [ <str> , <str> , <str> ] , cwd = root ) pieces [ <str> ] = int ( count_out )  date = run_command ( GITS , [ <str> , <str> , <str> , <str> ] , cwd = root ) [ 0 ] . strip ( ) pieces [ <str> ] = date . strip ( ) . replace ( <str> , <str> , 1 ) . replace ( <str> , <str> , 1 ) return pieces  def plus_or_dot ( pieces ) :      if <str> in pieces . get ( <str> , <str> ) :          return <str>  return <str>  def render_pep440 ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] if pieces [ <str> ] or pieces [ <str> ] :              rendered += plus_or_dot ( pieces ) rendered += <str> % ( pieces [ <str> ] , pieces [ <str> ] ) if pieces [ <str> ] :                  rendered += <str>    else :          rendered = <str> % ( pieces [ <str> ] , pieces [ <str> ] ) if pieces [ <str> ] :              rendered += <str>   return rendered  def render_pep440_pre ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] if pieces [ <str> ] :              rendered += <str> % pieces [ <str> ]   else :          rendered = <str> % pieces [ <str> ]  return rendered  def render_pep440_post ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] if pieces [ <str> ] or pieces [ <str> ] :              rendered += <str> % pieces [ <str> ] if pieces [ <str> ] :                  rendered += <str>  rendered += plus_or_dot ( pieces ) rendered += <str> % pieces [ <str> ]   else :          rendered = <str> % pieces [ <str> ] if pieces [ <str> ] :              rendered += <str>  rendered += <str> % pieces [ <str> ]  return rendered  def render_pep440_old ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] if pieces [ <str> ] or pieces [ <str> ] :              rendered += <str> % pieces [ <str> ] if pieces [ <str> ] :                  rendered += <str>    else :          rendered = <str> % pieces [ <str> ] if pieces [ <str> ] :              rendered += <str>   return rendered  def render_git_describe ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] if pieces [ <str> ] :              rendered += <str> % ( pieces [ <str> ] , pieces [ <str> ] )   else :          rendered = pieces [ <str> ]  if pieces [ <str> ] :          rendered += <str>  return rendered  def render_git_describe_long ( pieces ) :      if pieces [ <str> ] :          rendered = pieces [ <str> ] rendered += <str> % ( pieces [ <str> ] , pieces [ <str> ] )  else :          rendered = pieces [ <str> ]  if pieces [ <str> ] :          rendered += <str>  return rendered  def render ( pieces , style ) :      if pieces [ <str> ] :          return { <str> : <str> , <str> : pieces . get ( <str> ) , <str> : None , <str> : pieces [ <str> ] , <str> : None , }  if not style or style == <str> :          style = <str>  if style == <str> :          rendered = render_pep440 ( pieces )  elif style == <str> :          rendered = render_pep440_pre ( pieces )  elif style == <str> :          rendered = render_pep440_post ( pieces )  elif style == <str> :          rendered = render_pep440_old ( pieces )  elif style == <str> :          rendered = render_git_describe ( pieces )  elif style == <str> :          rendered = render_git_describe_long ( pieces )  else :          raise ValueError ( <str> % style )  return { <str> : rendered , <str> : pieces [ <str> ] , <str> : pieces [ <str> ] , <str> : None , <str> : pieces . get ( <str> ) , }  def get_versions ( ) :      cfg = get_config ( ) verbose = cfg . verbose try :          return git_versions_from_keywords ( get_keywords ( ) , cfg . tag_prefix , verbose )  except NotThisMethod :          pass  try :          root = os . path . realpath ( __file__ ) for i in cfg . versionfile_source . split ( <str> ) :              root = os . path . dirname ( root )   except NameError :          return { <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : None , }  try :          pieces = git_pieces_from_vcs ( cfg . tag_prefix , root , verbose ) return render ( pieces , cfg . style )  except NotThisMethod :          pass  try :          if cfg . parentdir_prefix :              return versions_from_parentdir ( cfg . parentdir_prefix , root , verbose )   except NotThisMethod :          pass  return { <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : None , }   