from hypothesis import strategies @ strategies . composite def timespans ( draw , dates = None , unbounds = <str> , always_valid = True ) :      from xotl . tools . future . datetime import TimeSpan if dates is None :          dates = strategies . dates ( )  maybe = strategies . none ( ) | dates if unbounds in ( <str> , <str> , <str> , <str> ) :          if unbounds in ( <str> , <str> ) :              date1 = draw ( maybe )  else :              date1 = draw ( dates )  if unbounds in ( <str> , <str> ) :              date2 = draw ( maybe )  else :              date2 = draw ( dates )   else :          raise ValueError ( <str> )  if date1 and date2 and always_valid :          start1 = min ( date1 , date2 ) end1 = max ( date1 , date2 )  else :          start1 = date1 end1 = date2  return TimeSpan ( start_date = start1 , end_date = end1 )  @ strategies . composite def datetimespans ( draw , dates = None , unbounds = <str> , always_valid = True ) :      from xotl . tools . future . datetime import DateTimeSpan if dates is None :          dates = strategies . datetimes ( )  maybe = strategies . none ( ) | dates if unbounds in ( <str> , <str> , <str> , <str> ) :          if unbounds in ( <str> , <str> ) :              date1 = draw ( maybe )  else :              date1 = draw ( dates )  if unbounds in ( <str> , <str> ) :              date2 = draw ( maybe )  else :              date2 = draw ( dates )   else :          raise ValueError ( <str> )  if date1 and date2 and always_valid :          start1 = min ( date1 , date2 ) end1 = max ( date1 , date2 )  else :          start1 = date1 end1 = date2  return DateTimeSpan ( start_datetime = start1 , end_datetime = end1 )   