from types import * import types as _stdlib from xotl . tools . deprecation import deprecated from xotl . tools . symbols import Unset as _unset from collections import Mapping try :      from types import __all__ __all__ = list ( __all__ )  except ImportError :      __all__ = [ name for name in dir ( _stdlib ) if not name . startswith ( <str> ) ]  try :      NoneType = _stdlib . NoneType  except AttributeError :      try :          from builtins import NoneType  except ImportError :          NoneType = type ( None )  __all__ . append ( <str> )  try :      EllipsisType  except NameError :      EllipsisType = type ( Ellipsis ) __all__ . append ( <str> )  if MemberDescriptorType is GetSetDescriptorType :      class _foo :          __slots__ = <str>  MemberDescriptorType = type ( _foo . bar ) del _foo  FuncTypes = tuple ( { FunctionType , MethodType , LambdaType , BuiltinFunctionType , BuiltinMethodType , } ) func_types = FuncTypes from types import _calculate_meta import re RegexPattern = type ( re . compile ( <str> ) ) del re def _get_mro_attr ( target , name , * default ) :      from xotl . tools . future . inspect import _static_getmro from xotl . tools . params import check_default , Undefined target = target if isinstance ( target , type ) else type ( target ) target_mro = _static_getmro ( target ) cls = next ( ( c for c in target_mro if name in c . __dict__ ) , _unset ) if cls is not _unset :          return cls . __dict__ [ name ]  elif check_default ( ) ( * default ) is not Undefined :          return default [ 0 ]  else :          msg = <str> raise AttributeError ( msg . format ( target , name ) )   @ deprecated ( _get_mro_attr ) class mro_dict ( Mapping ) :      __slots__ = ( <str> , <str> ) def __init__ ( self , target ) :          from xotl . tools . future . inspect import _static_getmro type_ = target if isinstance ( target , type ) else type ( target ) target_mro = _static_getmro ( type_ ) self . _probes = tuple ( c . __dict__ for c in target_mro ) self . _keys = set ( )  def __getitem__ ( self , name ) :          from xotl . tools . objects import get_first_of result = get_first_of ( self . _probes , name , default = _unset ) if result is not _unset :              return result  else :              raise KeyError ( name )   def __iter__ ( self ) :          if not self . _keys :              self . _settle_keys ( )  return iter ( self . _keys )  def __len__ ( self ) :          if not self . _keys :              self . _settle_keys ( )  return len ( self . _keys )  def _settle_keys ( self ) :          for probe in self . _probes :              for key in probe :                  if key not in self . _keys :                      self . _keys . add ( key )      @ deprecated ( <str> , <str> ) def mro_get_value_list ( cls , name ) :      return list ( mro_get_full_mapping ( cls , name ) . values ( ) )  @ deprecated ( <str> , <str> ) def mro_get_full_mapping ( cls , name ) :      from xotl . tools . future . inspect import _static_getmro cls = cls if isinstance ( cls , type ) else type ( cls ) mro = _static_getmro ( cls ) return { t : t . __dict__ [ name ] for t in mro if name in t . __dict__ }  @ deprecated ( <str> ) def is_iterable ( maybe ) :      try :          iter ( maybe )  except TypeError :          return False  else :          return True   _is_collection_replacement = @ deprecated ( _is_collection_replacement ) def is_collection ( maybe ) :      from xotl . tools . values . simple import logic_collection_coerce , nil return logic_collection_coerce ( maybe ) is not nil  @ deprecated ( <str> ) def is_mapping ( maybe ) :      return isinstance ( maybe , Mapping )  @ deprecated ( <str> ) def is_string_like ( maybe ) :      try :          maybe + <str>  except TypeError :          return False  else :          return True   @ deprecated ( <str> , <str> ) def is_scalar ( maybe ) :      from collections import Iterable return isinstance ( maybe , str ) or not isinstance ( maybe , Iterable )  def is_staticmethod ( cls , name ) :      desc = _get_mro_attr ( cls , name ) return isinstance ( desc , staticmethod )  def is_classmethod ( cls , name ) :      desc = _get_mro_attr ( cls , name ) return isinstance ( desc , classmethod )  def is_instancemethod ( cls , name ) :      desc = _get_mro_attr ( cls , name ) return isinstance ( desc , FunctionType )  @ deprecated ( <str> ) def is_module ( maybe ) :      return isinstance ( maybe , ModuleType )  @ deprecated ( <str> ) def are_instances ( * args ) :      from xotl . tools . params import check_count check_count ( args , 1 , caller = <str> ) * subjects , types = args if not subjects :          isinstance ( None , types )  return all ( isinstance ( subject , types ) for subject in subjects )  @ deprecated ( <str> ) def no_instances ( * args ) :      from xotl . tools . params import check_count check_count ( args , 1 , caller = <str> ) * subjects , types = args if not subjects :          isinstance ( None , types )  return all ( not isinstance ( subject , types ) for subject in subjects )   