import sys from xoutil . values import file_coerce , positive_int_coerce as positive_int from xoutil . params import ParamSchemeRow as row , ParamScheme as scheme sample_scheme = scheme ( row ( <str> , 0 , - 1 , <str> , default = sys . stdout , coerce = file_coerce ) , row ( <str> , 0 , 1 , default = 1 , coerce = positive_int ) , row ( <str> , 0 , 1 , 2 , <str> , default = 79 , coerce = positive_int ) , row ( <str> , default = <str> , coerce = ( str , ) ) , ) del file_coerce , positive_int def test_basic_params ( ) :      def get_values ( * args , ** kwargs ) :          return sample_scheme ( args , kwargs , strict = False )  def foobar ( ** kwargs ) :          res = sample_scheme . defaults res . update ( kwargs ) return res  one , two = get_values ( 4 , 80 ) , foobar ( indent = 4 , width = 80 ) assert one == two , <str> . format ( one , two ) one , two = get_values ( 2 ) , foobar ( indent = 2 ) assert one == two , <str> . format ( one , two ) one = get_values ( 80 , indent = 4 , extra = <str> ) two = foobar ( width = 80 , indent = 4 , extra = <str> ) assert one == two , <str> . format ( one , two ) one , two = get_values ( width = 80 ) , foobar ( width = 80 ) assert one == two , <str> . format ( one , two ) one = get_values ( sys . stderr , 4 , 80 ) two = foobar ( indent = 4 , width = 80 , stream = sys . stderr ) assert one == two , <str> . format ( one , two ) one = get_values ( 4 , sys . stderr , newline = <str> ) two = foobar ( indent = 4 , stream = sys . stderr , newline = <str> ) assert one == two , <str> . format ( one , two ) one = get_values ( 4 , output = sys . stderr ) two = foobar ( indent = 4 , stream = sys . stderr ) assert one == two , <str> . format ( one , two ) one , two = get_values ( 4 , max_width = 80 ) , foobar ( indent = 4 , width = 80 ) assert one == two , <str> . format ( one , two )  def test_param_errors ( ) :      def get_values ( * args , ** kwargs ) :          return sample_scheme ( args , kwargs )  def error_repr ( error ) :          return <str> . format ( type ( error ) . __name__ , error )  msg = <str> try :          get_values ( sys . stderr , 4 , output = sys . stderr ) assert False , <str>  except TypeError :          pass  except BaseException as error :          assert False , msg . format ( TypeError . __name__ , error_repr ( error ) )  try :          get_values ( 4 , - 79 ) assert False , <str>  except TypeError :          pass  except BaseException as error :          assert False , msg . format ( TypeError . __name__ , error_repr ( error ) )  try :          get_values ( 80 , indent = 4 , extra = <str> ) assert False , <str>  except TypeError :          pass  except BaseException as error :          assert False , msg . format ( TypeError . __name__ , error_repr ( error ) )   def test_pop_keyword_values ( ) :      from xoutil . symbols import Unset from xoutil . params import pop_keyword_values as popkw , Undefined kwds = dict ( default = None , values = [ 1 , 2 , 3 ] , collector = sum ) names = ( ( <str> , <str> ) , <str> ) assert popkw ( dict ( kwds ) , <str> , * names ) == [ [ 1 , 2 , 3 ] , sum , None ] try :          assert popkw ( dict ( kwds ) , * names ) == <str>  except TypeError :          assert True  try :          assert popkw ( dict ( kwds ) , * names , ignore_error = True ) == [ sum , None ]  except TypeError :          assert False  test = [ Undefined , [ 1 , 2 , 3 ] , sum , None ] assert popkw ( dict ( kwds ) , <str> , <str> , * names ) == test test = [ None , [ 1 , 2 , 3 ] , sum , None ] assert popkw ( dict ( kwds ) , <str> , <str> , * names , default = None ) == test test = [ Unset , [ 1 , 2 , 3 ] , sum , None ] defaults = dict ( x = Unset ) assert popkw ( dict ( kwds ) , <str> , <str> , * names , defaults = defaults ) == test   