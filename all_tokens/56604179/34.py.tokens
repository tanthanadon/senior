from multiprocessing import Pool , cpu_count from itertools import count , islice , repeat try :      from itertools import izip as zip  except ImportError :      pass  def gcd ( a , b ) :      while a % b != 0 :          a , b = b , a % b  return b  def job ( args ) :      which , show = args try :          result = gcd ( which , which + 2 ** 37 - 73 ) if show and result != 1 :              print ( which , result )   except KeyboardInterrupt :          pass   if __name__ == <str> :      from datetime import datetime import argparse cpus = max ( cpu_count ( ) - 1 , 1 ) parser = argparse . ArgumentParser ( <str> <str> <str> ) parser . add_argument ( <str> , help = <str> , action = <str> , dest = <str> , default = False , ) parser . add_argument ( <str> , help = <str> % cpus , type = int , action = <str> , dest = <str> , default = cpus , ) parser . add_argument ( <str> , help = <str> <str> <str> , type = int , action = <str> , dest = <str> , default = 6 , ) args = parser . parse_args ( ) pool = Pool ( processes = args . workers ) start = datetime . now ( ) try :          print ( <str> ) pool . imap ( job , zip ( islice ( count ( 2 ** 1028 + 1 ) , 10 ** args . magnitude ) , repeat ( args . show ) ) , chunksize = 1024 , ) pool . close ( ) pool . join ( )  except KeyboardInterrupt :          pool . terminate ( ) pool . join ( )  end = datetime . now ( ) total_seconds = ( end - start ) . total_seconds ( ) print ( <str> % ( args . workers , total_seconds ) )   