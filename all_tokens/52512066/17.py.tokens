import _init_paths from fast_rcnn . train_toby import get_training_roidb , train_net from fast_rcnn . config import cfg , cfg_from_file , cfg_from_list , get_output_dir from datasets . factory_toby import get_imdb import datasets . imdb import caffe import argparse import pprint import numpy as np import sys def parse_args ( ) :      parser = argparse . ArgumentParser ( description = <str> ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = 0 , type = int ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = None , type = str ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = 40000 , type = int ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = None , type = str ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = None , type = str ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = <str> , type = str ) parser . add_argument ( <str> , dest = <str> , help = <str> , action = <str> ) parser . add_argument ( <str> , dest = <str> , help = <str> , default = None , nargs = argparse . REMAINDER ) if len ( sys . argv ) == 1 :          parser . print_help ( ) sys . exit ( 1 )  args = parser . parse_args ( ) return args  def combined_roidb ( imdb_names ) :      def get_roidb ( imdb_name ) :          imdb = get_imdb ( imdb_name ) print <str> . format ( imdb . name ) imdb . set_proposal_method ( cfg . TRAIN . PROPOSAL_METHOD ) print <str> . format ( cfg . TRAIN . PROPOSAL_METHOD ) roidb = get_training_roidb ( imdb ) return roidb  roidbs = [ get_roidb ( s ) for s in imdb_names . split ( <str> ) ] roidb = roidbs [ 0 ] if len ( roidbs ) > 1 :          for r in roidbs [ 1 : ] :              roidb . extend ( r )  imdb = datasets . imdb . imdb ( imdb_names )  else :          imdb = get_imdb ( imdb_names )  return imdb , roidb  if __name__ == <str> :      args = parse_args ( ) print ( <str> ) print ( args ) if args . cfg_file is not None :          cfg_from_file ( args . cfg_file )  if args . set_cfgs is not None :          cfg_from_list ( args . set_cfgs )  cfg . GPU_ID = args . gpu_id print ( <str> ) pprint . pprint ( cfg ) if not args . randomize :          np . random . seed ( cfg . RNG_SEED ) caffe . set_random_seed ( cfg . RNG_SEED )  caffe . set_mode_gpu ( ) caffe . set_device ( args . gpu_id ) print args . imdb_name imdb , roidb = combined_roidb ( args . imdb_name ) print <str> . format ( len ( roidb ) ) roidb = roidb [ 0 ] output_dir = get_output_dir ( imdb ) print <str> . format ( output_dir ) train_net ( args . solver , roidb , output_dir , pretrained_model = args . pretrained_model , max_iters = args . max_iters )   