import logging import odoo from odoo . addons . connector . connector import Binder from . . backend import carepoint _logger = logging . getLogger ( __name__ ) class CarepointBinder ( Binder ) :       @ carepoint class CarepointModelBinder ( CarepointBinder ) :      _model_name = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] def to_odoo ( self , external_id , unwrap = True , browse = False ) :          bindings = self . model . with_context ( active_test = False ) . search ( [ ( <str> , <str> , str ( external_id ) ) , ( <str> , <str> , self . backend_record . id ) ] ) if not bindings :              return self . model . browse ( ) if browse else None  assert len ( bindings ) == 1 , odoo . _ ( <str> ) % ( bindings ) if unwrap :              return bindings . odoo_id if browse else bindings . odoo_id . id  else :              return bindings if browse else bindings . id   def to_backend ( self , record_id , wrap = True ) :          record = self . model . browse ( ) if isinstance ( record_id , odoo . models . BaseModel ) :              record_id . ensure_one ( ) record = record_id record_id = record_id . id  if wrap :              binding = self . model . with_context ( active_test = False ) . search ( [ ( <str> , <str> , record_id ) , ( <str> , <str> , self . backend_record . id ) , ] ) if binding :                  binding . ensure_one ( ) return binding . carepoint_id  else :                  return None   if not record :              record = self . model . browse ( record_id )  assert record return record . id  def bind ( self , external_id , binding_id ) :          assert ( external_id or external_id is 0 ) and binding_id , ( <str> <str> % ( external_id , binding_id ) ) now_fmt = odoo . fields . Datetime . now ( ) if not isinstance ( binding_id , odoo . models . BaseModel ) :              binding_id = self . model . browse ( binding_id )  binding_id . with_context ( connector_no_export = True ) . write ( { <str> : str ( external_id ) , <str> : now_fmt , } )  def unwrap_binding ( self , binding_id , browse = False ) :          if isinstance ( binding_id , odoo . models . BaseModel ) :              binding = binding_id  else :              binding = self . model . browse ( binding_id )  odoo_record = binding . odoo_id if browse :              return odoo_record  return odoo_record . id  def unwrap_model ( self ) :          try :              column = self . model . _fields [ <str> ]  except KeyError :              raise ValueError ( <str> <str> % self . model . _name )  return column . comodel_name  def create_bind ( self , record ) :          _logger . debug ( <str> , self . model , record ) binding_record = self . model . search ( [ ( <str> , <str> , record . id ) , ( <str> , <str> , self . backend_record . id ) , ] ) if binding_record :              binding_record . assert_one ( ) return binding_record  vals = { <str> : record . id , <str> : self . backend_record . id , } _logger . debug ( <str> , vals ) return self . model . create ( vals )    