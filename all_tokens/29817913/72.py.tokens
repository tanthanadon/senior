import mock from odoo . addons . connector_carepoint . models import stock_warehouse from . . common import SetUpCarepointBase class EndTestException ( Exception ) :      pass  class StockWarehouseTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( StockWarehouseTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : 123 , <str> : <str> , }   class TestStockWarehouseImportMapper ( StockWarehouseTestBase ) :      def setUp ( self ) :          super ( TestStockWarehouseImportMapper , self ) . setUp ( ) self . Unit = stock_warehouse . StockWarehouseImportMapper self . unit = self . Unit ( self . mock_env )  def test_code ( self ) :          expect = { <str> : self . record [ <str> ] . strip ( ) } res = self . unit . code ( self . record ) self . assertDictEqual ( expect , res )  def test_is_pharmacy ( self ) :          expect = { <str> : True } res = self . unit . is_pharmacy ( self . record ) self . assertDictEqual ( expect , res )  def test_carepoint_id ( self ) :          expect = { <str> : self . record [ <str> ] } res = self . unit . carepoint_id ( self . record ) self . assertDictEqual ( expect , res )  def test_partner_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_partner_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , browse = True , )   def test_partner_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . partner_id ( self . record ) expect = self . unit . binder_for ( ) . to_odoo ( ) expect = { <str> : expect . partner_id . id , } self . assertDictEqual ( expect , res )   def test_route_ids ( self ) :          expect = [ <str> , <str> , <str> ] res = self . unit . route_ids ( self . record ) for key in res . keys ( ) :              self . assertIn ( key , expect )     