import mock from odoo . addons . connector_carepoint . models import medical_patient from . . common import SetUpCarepointBase class EndTestException ( Exception ) :      pass  class MedicalPatientTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( MedicalPatientTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : True , <str> : 1 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , }   class TestMedicalPatientImportMapper ( MedicalPatientTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientImportMapper , self ) . setUp ( ) self . Unit = medical_patient . MedicalPatientImportMapper self . unit = self . Unit ( self . mock_env )  def _create_patient ( self ) :          return self . env [ <str> ] . create ( { <str> : <str> % ( self . record [ <str> ] , self . record [ <str> ] ) , <str> : self . record [ <str> ] , } )  def test_safety_caps_yn ( self ) :          self . assertDictEqual ( { <str> : False } , self . unit . safety_cap_yn ( self . record ) , )  def test_gender_exist ( self ) :          self . assertDictEqual ( { <str> : self . record [ <str> ] . lower ( ) } , self . unit . gender ( self . record ) )  def test_gender_none ( self ) :          self . record [ <str> ] = False self . assertDictEqual ( { <str> : None } , self . unit . gender ( self . record ) )  def test_carepoint_id ( self ) :          self . assertDictEqual ( { <str> : self . record [ <str> ] } , self . unit . carepoint_id ( self . record ) )  def test_odoo_id ( self ) :          expect = self . _create_patient ( ) res = self . unit . odoo_id ( self . record ) expect = { <str> : expect . id } self . assertDictEqual ( expect , res )   class TestMedicalPatientImporter ( MedicalPatientTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientImporter , self ) . setUp ( ) self . Unit = medical_patient . MedicalPatientImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_after_import_get_unit ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) :              self . unit . _after_import ( expect ) self . unit . unit_for . assert_has_calls ( [ mock . call ( medical_patient . CarepointAddressPatientUnit , model = <str> , ) , mock . call ( ) . _import_addresses ( self . unit . carepoint_id , expect , ) , mock . call ( medical_patient . CarepointPhonePatientUnit , model = <str> , ) , mock . call ( ) . _import_phones ( self . unit . carepoint_id , expect , ) , mock . call ( medical_patient . CarepointAccountUnit , model = <str> , ) , mock . call ( ) . _import_accounts ( self . unit . carepoint_id , ) , mock . call ( medical_patient . MedicalPatientDiseaseUnit , model = <str> , ) , mock . call ( ) . _import_by_patient ( self . unit . carepoint_id , ) , ] )    class TestMedicalPatientExportMapper ( MedicalPatientTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientExportMapper , self ) . setUp ( ) self . Unit = medical_patient . MedicalPatientExportMapper self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( )  def test_gender_cd ( self ) :          self . assertDictEqual ( { <str> : self . record . gender . upper ( ) } , self . unit . gender_cd ( self . record ) , )  def test_static_defaults ( self ) :          self . assertIsInstance ( self . unit . static_defaults ( self . record ) , dict , )  def test_no_safety_caps_yn ( self ) :          self . assertFalse ( self . unit . no_safety_caps_yn ( self . record ) [ <str> ] , )   class TestMedicalPatientExporter ( MedicalPatientTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientExporter , self ) . setUp ( ) self . Unit = medical_patient . MedicalPatientExporter self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( ) self . unit . binding_record = self . record  def test_after_export_get_by_partner ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . _after_export ( ) get = env [ <str> ] . _get_by_partner call = mock . call ( self . record . commercial_partner_id , edit = True , recurse = True , ) get . assert_has_calls ( [ call , call ] )   def test_after_export_account_get_by_patient ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . _after_export ( ) get = env [ <str> ] . _get_by_patient get . assert_called_once_with ( self . record . odoo_id , create = True , recurse = True , )     