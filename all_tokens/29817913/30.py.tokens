import mock import psycopg2 from contextlib import contextmanager from odoo import _ from odoo . addons . connector_carepoint . unit import export_synchronizer from . common import SetUpCarepointBase model = <str> @ contextmanager def mock_base_exporter ( obj , patches = None , add = True ) :      _patches = [ <str> , <str> , <str> , <str> , ] if patches :          if add :              patches = _patches + patches   else :          patches = _patches  patches = { p : mock . DEFAULT for p in patches } with mock . patch . multiple ( obj , ** patches ) as mk :          yield mk   @ contextmanager def mock_retryable_job_error ( ) :      with mock . patch ( <str> % model ) as mk :          yield mk   class EndTestException ( Exception ) :      pass  class UniqueViolationException ( psycopg2 . IntegrityError , EndTestException ) :      def __init__ ( self , pgcode = psycopg2 . errorcodes . UNIQUE_VIOLATION ) :          self . pgcode = pgcode   class TestCarepointExporter ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( TestCarepointExporter , self ) . setUp ( ) self . model = <str> self . carepoint_id = <str> self . binding_id = 1234 self . Exporter = export_synchronizer . CarepointExporter  def _new_exporter ( self , carepoint_id = None , binding_record = None , binding_id = None , ) :          self . mock_env = self . get_carepoint_helper ( self . model ) exporter = self . Exporter ( self . mock_env ) exporter . carepoint_id = carepoint_id exporter . binding_record = binding_record exporter . binding_id = binding_id return exporter  def _new_record ( self ) :          return self . env [ self . model ] . create ( { <str> : <str> , <str> : self . env . ref ( <str> ) . id , } )  def test_lock_sql ( self ) :          exporter = self . _new_exporter ( binding_id = self . binding_id ) with mock_base_exporter ( exporter ) :              exporter . session . cr . execute . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _lock ( )  exporter . session . cr . execute . assert_called_once_with ( <str> % ( self . model . replace ( <str> , <str> ) , ) , ( self . binding_id , ) , log_exceptions = False , )   def test_has_to_skip ( self ) :          exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              res = exporter . _has_to_skip ( ) self . assertFalse ( res )   def test_export_dependency_no_relation ( self ) :          exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              res = exporter . _export_dependency ( None , None ) self . assertEqual ( None , res )   def test_export_dependency_gets_binder ( self ) :          expect = self . _new_record ( ) exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              exporter . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _export_dependency ( expect , self . model )  exporter . binder_for . assert_called_once_with ( self . model )   def test_export_dependency_wrap_search ( self ) :          rec_id = self . _new_record ( ) expect = rec_id . odoo_id exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              with mock . patch . object ( exporter . session , <str> ) :                  search = exporter . env [ self . model ] . search search . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                      exporter . _export_dependency ( expect , self . model )  search . assert_called_once_with ( [ ( <str> , <str> , expect . id ) , ( <str> , <str> , exporter . backend_record . id ) , ] )    def test_export_dependency_wrap_multiple_results ( self ) :          expect = self . _new_record ( ) . odoo_id exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              with mock . patch . object ( exporter . session , <str> ) :                  search = exporter . env [ self . model ] . search search . return_value = [ 1 , 2 ] with self . assertRaises ( AssertionError ) :                      exporter . _export_dependency ( expect , self . model )     def test_export_dependency_unwrapped ( self ) :          expect = self . _new_record ( ) exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              to_backend = exporter . binder_for ( ) . to_backend to_backend . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _export_dependency ( expect , self . model )  to_backend . assert_called_once_with ( expect , wrap = False )   def test_export_dependency_run_no_force ( self ) :          expect = self . _new_record ( ) exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              to_backend = exporter . binder_for ( ) . to_backend to_backend . return_value = True exporter . _export_dependency ( expect , self . model , force = False ) exporter . unit_for ( ) . run . assert_not_called ( )   def test_export_dependency_run_force ( self ) :          expect = self . _new_record ( ) exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              to_backend = exporter . binder_for ( ) . to_backend to_backend . return_value = True exporter . _export_dependency ( expect , self . model , force = True ) exporter . unit_for ( ) . run . assert_called_once_with ( expect . id )   def test_export_dependency_run_no_exist ( self ) :          expect = self . _new_record ( ) exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              to_backend = exporter . binder_for ( ) . to_backend to_backend . return_value = False exporter . _export_dependency ( expect , self . model , force = False ) exporter . unit_for ( ) . run . assert_called_once_with ( expect . id )   def test_export_dependencies ( self ) :          res = self . _new_exporter ( ) . _export_dependencies ( ) self . assertEqual ( None , res )  def test_map_data_call ( self ) :          exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              exporter . _map_data ( ) exporter . mapper . map_record . assert_called_once_with ( exporter . binding_record )   def test_map_data_return ( self ) :          exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter ) :              res = exporter . _map_data ( ) self . assertEqual ( exporter . mapper . map_record ( ) , res )   def test_validate_create_data ( self ) :          res = self . _new_exporter ( ) . _validate_create_data ( True ) self . assertEqual ( None , res )  def test_validate_update_data ( self ) :          res = self . _new_exporter ( ) . _validate_update_data ( True ) self . assertEqual ( None , res )  def test_create_data_call ( self ) :          map_record = mock . MagicMock ( ) expect = { <str> : 123 , <str> : 456 } fields = expect . keys ( ) self . _new_exporter ( self . carepoint_id ) . _create_data ( map_record , fields , ** expect ) map_record . values . assert_called_once_with ( for_create = True , fields = fields , ** expect )  def test_create_data_return ( self ) :          map_record = mock . MagicMock ( ) res = self . _new_exporter ( self . carepoint_id ) . _create_data ( map_record ) self . assertEqual ( map_record . values ( ) , res )  def test_create_validates_data ( self ) :          expect = <str> exporter = self . _new_exporter ( ) with mock_base_exporter ( exporter , [ <str> ] ) :              exporter . _validate_create_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _create ( expect )  exporter . _validate_create_data . assert_called_once_with ( expect )   def test_create_does_create ( self ) :          expect = <str> exporter = self . _new_exporter ( ) with self . mock_adapter ( exporter ) as mk :              mk . create . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _create ( expect )  mk . create . assert_called_once_with ( expect )   def test_create_returns_binding ( self ) :          exporter = self . _new_exporter ( ) with self . mock_adapter ( exporter ) as mk :              res = exporter . _create ( None ) self . assertEqual ( mk . create ( ) , res )   def test_update_data_call ( self ) :          map_record = mock . MagicMock ( ) expect = { <str> : 123 , <str> : 456 } fields = expect . keys ( ) self . _new_exporter ( self . carepoint_id ) . _update_data ( map_record , fields , ** expect ) map_record . values . assert_called_once_with ( fields = fields , ** expect )  def test_update_data_return ( self ) :          map_record = mock . MagicMock ( ) res = self . _new_exporter ( self . carepoint_id ) . _update_data ( map_record ) self . assertEqual ( map_record . values ( ) , res )  def test_update_does_write ( self ) :          expect = <str> mk = mock . MagicMock ( ) exporter = self . _new_exporter ( carepoint_id = self . carepoint_id ) with self . mock_adapter ( exporter ) as mk :              mk . write . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _update ( expect )  mk . write . assert_called_once_with ( self . carepoint_id , expect )   def test_run_assert_binding_id ( self ) :          exporter = self . _new_exporter ( binding_record = True ) with self . assertRaises ( AssertionError ) :              exporter . _run ( )   def test_run_assert_binding_id ( self ) :          exporter = self . _new_exporter ( binding_id = True ) with self . assertRaises ( AssertionError ) :              exporter . _run ( )   def test_run_has_to_skip ( self ) :          exporter = self . _new_exporter ( binding_id = True , binding_record = True ) with mock_base_exporter ( exporter , [ <str> ] ) :              exporter . _has_to_skip . return_value = True res = exporter . _run ( ) self . assertEqual ( None , res )   def test_run_export_dependencies ( self ) :          exporter = self . _new_exporter ( binding_id = True , binding_record = True ) with mock_base_exporter ( exporter , [ <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _export_dependencies . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )    def test_run_lock ( self ) :          exporter = self . _new_exporter ( binding_id = True , binding_record = True ) with mock_base_exporter ( exporter , [ <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _lock . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )    def test_run_map_data ( self ) :          exporter = self . _new_exporter ( binding_id = True , binding_record = True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _map_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )    def test_run_map_data ( self ) :          exporter = self . _new_exporter ( binding_id = True , binding_record = True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _map_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )    def test_run_update_data ( self ) :          exporter = self . _new_exporter ( self . carepoint_id , True , True ) expect = [ <str> , <str> ] with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _update_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( expect )  exporter . _update_data . assert_called_once_with ( exporter . _map_data ( ) , fields = expect )   def test_run_update_no_record ( self ) :          exporter = self . _new_exporter ( self . carepoint_id , True , True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _update_data . return_value = False res = exporter . _run ( ) self . assertEqual ( _ ( <str> ) , res , )   def test_run_update_no_record ( self ) :          exporter = self . _new_exporter ( self . carepoint_id , True , True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _update . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )  exporter . _update . assert_called_once_with ( exporter . _update_data ( ) )   def test_run_create_data ( self ) :          exporter = self . _new_exporter ( False , True , True ) expect = [ <str> , <str> ] with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _create_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( expect )  exporter . _create_data . assert_called_once_with ( exporter . _map_data ( ) , fields = None )   def test_run_create_no_record ( self ) :          exporter = self . _new_exporter ( False , True , True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _create_data . return_value = False res = exporter . _run ( ) self . assertEqual ( _ ( <str> ) , res , )   def test_run_create_no_record ( self ) :          exporter = self . _new_exporter ( False , True , True ) with mock_base_exporter ( exporter , [ <str> , <str> , <str> , <str> , <str> , ] ) :              exporter . _has_to_skip . return_value = False exporter . _create . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  exporter . _run ( )  exporter . _create . assert_called_once_with ( exporter . _create_data ( ) )     