import mock from odoo . addons . connector_carepoint . models import carepoint_store from . . common import SetUpCarepointBase class EndTestException ( Exception ) :      pass  class CarepointStoreTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( CarepointStoreTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : <str> , <str> : 123 , }   class TestCarepointStoreImportMapper ( CarepointStoreTestBase ) :      def setUp ( self ) :          super ( TestCarepointStoreImportMapper , self ) . setUp ( ) self . Unit = carepoint_store . CarepointStoreImportMapper self . unit = self . Unit ( self . mock_env )  def test_odoo_id_store ( self ) :          expect = self . env [ <str> ] . create ( { <str> : self . record [ <str> ] , } ) res = self . unit . odoo_id ( self . record ) expect = { <str> : expect . id } self . assertDictEqual ( expect , res )  def test_odoo_id_pharmacy ( self ) :          expect = self . env [ <str> ] . create ( { <str> : self . record [ <str> ] , } ) rec = self . unit . odoo_id ( self . record ) store = self . env [ <str> ] . browse ( rec [ <str> ] ) self . assertEqual ( expect . id , store . pharmacy_id . id )  def test_parent_id ( self ) :          res = self . unit . parent_id ( self . record ) expect = { <str> : self . unit . backend_record . company_id . partner_id . id , } self . assertDictEqual ( expect , res )  def test_warehouse_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . warehouse_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_warehouse_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . warehouse_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , )   def test_warehouse_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . warehouse_id ( self . record ) expect = self . unit . binder_for ( ) . to_odoo ( ) self . assertDictEqual ( { <str> : expect } , res )   def test_carepoint_id ( self ) :          expect = 6789 self . record [ <str> ] = expect res = self . unit . carepoint_id ( self . record ) expect = { <str> : expect } self . assertDictEqual ( expect , res )   class TestCarepointStoreImporter ( CarepointStoreTestBase ) :      def setUp ( self ) :          super ( TestCarepointStoreImporter , self ) . setUp ( ) self . Unit = carepoint_store . CarepointStoreImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_after_import_warehouse ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) as mk :              mk . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _after_import ( expect )  mk . assert_has_calls ( [ mock . call ( expect . carepoint_id , <str> , ) , ] )   def test_after_import_get_binder ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _after_import ( expect )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_after_import_to_odoo ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _after_import ( expect )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( expect . carepoint_id , )   def test_after_import_write ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) :              self . unit . _after_import ( expect ) expect . write . assert_called_once_with ( { <str> : self . unit . binder_for ( ) . to_odoo ( ) , } )     