import mock from odoo . addons . connector_carepoint . models import medical_patient_disease from . . common import SetUpCarepointBase class EndTestException ( Exception ) :      pass  class MedicalPatientDiseaseTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( MedicalPatientDiseaseTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : 1 , <str> : 2 , <str> : 3 , <str> : <str> , }   class TestMedicalPatientDiseaseImportMapper ( MedicalPatientDiseaseTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientDiseaseImportMapper , self ) . setUp ( ) self . Unit = medical_patient_disease . MedicalPatientDiseaseImportMapper self . unit = self . Unit ( self . mock_env )  def test_pathology_id ( self ) :          code_type_id = self . env . ref ( <str> ) expect = self . env [ <str> ] . create ( { <str> : <str> , <str> : code_type_id . id , <str> : self . record [ <str> ] . strip ( ) , } ) res = self . unit . pathology_id ( self . record ) self . assertDictEqual ( { <str> : expect . id } , res , )  def test_patient_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . patient_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_patient_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . patient_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , )   def test_patient_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . patient_id ( self . record ) expect = self . unit . binder_for ( ) . to_odoo ( ) self . assertDictEqual ( { <str> : expect } , res )   def test_physician_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . physician_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_physician_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . physician_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , )   def test_physician_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . physician_id ( self . record ) expect = self . unit . binder_for ( ) . to_odoo ( ) self . assertDictEqual ( { <str> : expect } , res )   def test_carepoint_id ( self ) :          res = self . unit . carepoint_id ( self . record ) expect = { <str> : self . record [ <str> ] , } self . assertDictEqual ( expect , res )   class TestMedicalPatientDiseaseUnit ( MedicalPatientDiseaseTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientDiseaseUnit , self ) . setUp ( ) self . Unit = medical_patient_disease . MedicalPatientDiseaseUnit self . unit = self . Unit ( self . mock_env )  def test_import_by_patient_unit_for_adapter ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _import_by_patient ( True ) mk . assert_has_calls ( [ mock . call ( medical_patient_disease . MedicalPatientDiseaseAdapter , ) , mock . call ( medical_patient_disease . MedicalPatientDiseaseImporter , ) , ] )   def test_import_by_patient_search ( self ) :          expect = <str> with mock . patch . object ( self . unit , <str> ) as mk :              mk ( ) . search . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _import_by_patient ( expect )  mk ( ) . search . assert_called_once_with ( pat_id = expect , )   def test_import_by_patient_imports ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              expect = mock . MagicMock ( ) adapter = mock . MagicMock ( ) adapter . search . return_value = [ True ] mk . side_effect = [ adapter , expect ] self . unit . _import_by_patient ( True ) expect . run . assert_called_once_with ( adapter . search ( ) [ 0 ] )    class TestMedicalPatientDiseaseImporter ( MedicalPatientDiseaseTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientDiseaseImporter , self ) . setUp ( ) self . Unit = medical_patient_disease . MedicalPatientDiseaseImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_after_import_dependencies ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              with mock . patch . object ( self . unit , <str> ) :                  self . unit . _import_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record [ <str> ] , <str> , ) , mock . call ( self . record [ <str> ] , <str> , ) , ] )    def test_after_import_dependencies_pathology_unit ( self ) :          with mock . patch . object ( self . unit , <str> ) :              with mock . patch . object ( self . unit , <str> ) :                  self . unit . _import_dependencies ( ) self . unit . unit_for . assert_has_calls ( [ mock . call ( medical_patient_disease . MedicalPathologyUnit , <str> , ) , mock . call ( ) . _import_by_code ( self . record [ <str> ] . strip ( ) , ) ] )     class TestMedicalPatientDiseaseExporter ( MedicalPatientDiseaseTestBase ) :      def setUp ( self ) :          super ( TestMedicalPatientDiseaseExporter , self ) . setUp ( ) self . Unit = medical_patient_disease . MedicalPatientDiseaseExporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_after_export_dependencies ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              with mock . patch . object ( self . unit , <str> ) :                  self . unit . _export_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record [ <str> ] , <str> , ) , mock . call ( self . record [ <str> ] , <str> , ) , ] )      