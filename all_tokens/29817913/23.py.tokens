import mock from contextlib import contextmanager from odoo import _ from odoo . addons . connector_carepoint import related_action from . common import SetUpCarepointBase mk_file = <str> @ contextmanager def mock_connector_env ( ) :      with mock . patch ( <str> % mk_file ) as env :          yield env   class StopTestException ( Exception ) :      pass  class TestRelatedAction ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( TestRelatedAction , self ) . setUp ( ) self . model = <str> self . binding_id = self . _new_record ( ) self . job = mock . MagicMock ( ) self . job . args = [ self . model , self . binding_id . id ]  def _new_record ( self ) :          return self . env [ self . model ] . create ( { <str> : <str> , <str> : 1234567 , <str> : self . backend . id , <str> : self . env . ref ( <str> ) . id , } )  def test_unwrap_binding_no_binding ( self ) :          self . binding_id . unlink ( ) res = related_action . unwrap_binding ( self . session , self . job ) self . assertEqual ( None , res )  def test_unwrap_binding_gets_correct_env ( self ) :          with mock_connector_env ( ) as env :              env . side_effect = StopTestException with self . assertRaises ( StopTestException ) :                  related_action . unwrap_binding ( self . session , self . job )  env . assert_called_once_with ( self . binding_id . backend_id , self . session , self . model , )   def test_unwrap_binding_gets_connector_unit ( self ) :          expect = <str> with mock_connector_env ( ) as env :              env ( ) . get_connector_unit . side_effect = StopTestException with self . assertRaises ( StopTestException ) :                  related_action . unwrap_binding ( self . session , self . job , binder_class = expect )  env ( ) . get_connector_unit . assert_called_once_with ( expect )   def test_unwrap_binding_unwraps_model ( self ) :          with mock_connector_env ( ) as env :              binder = env ( ) . get_connector_unit ( ) binder . unwrap_model . side_effect = StopTestException with self . assertRaises ( StopTestException ) :                  related_action . unwrap_binding ( self . session , self . job )    def test_unwrap_binding_unwraps_binding ( self ) :          with mock_connector_env ( ) as env :              binder = env ( ) . get_connector_unit ( ) binder . unwrap_binding . side_effect = StopTestException with self . assertRaises ( StopTestException ) :                  related_action . unwrap_binding ( self . session , self . job )  binder . unwrap_binding . assert_called_once_with ( self . binding_id . id )   def test_unwrap_binding_guards_value_error ( self ) :          with mock_connector_env ( ) as env :              binder = env ( ) . get_connector_unit ( ) binder . unwrap_model . side_effect = ValueError res = related_action . unwrap_binding ( self . session , self . job ) self . assertEqual ( self . model , res [ <str> ] ) self . assertEqual ( self . binding_id . id , res [ <str> ] )   def test_unwrap_binding_return ( self ) :          with mock_connector_env ( ) as env :              binder = env ( ) . get_connector_unit ( ) res = related_action . unwrap_binding ( self . session , self . job ) expect = { <str> : _ ( <str> ) , <str> : <str> , <str> : <str> , <str> : <str> , <str> : binder . unwrap_model ( ) , <str> : binder . unwrap_binding ( ) , } self . assertDictEqual ( expect , res )     