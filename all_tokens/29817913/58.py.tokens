import mock from odoo . addons . connector_carepoint . models import ( sale_order ) from . . common import SetUpCarepointBase model = <str> % ( <str> ) class EndTestException ( Exception ) :      pass  class SaleOrderTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( SaleOrderTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model )  @ property def record ( self ) :          return { <str> : 1 , <str> : <str> , <str> : <str> , <str> : 2 , <str> : 3 , <str> : 4 , <str> : 5 , }   class TestSaleOrderImportMapper ( SaleOrderTestBase ) :      def setUp ( self ) :          super ( TestSaleOrderImportMapper , self ) . setUp ( ) self . Unit = sale_order . SaleOrderImportMapper self . unit = self . Unit ( self . mock_env )  def test_carepoint_id ( self ) :          expect = { <str> : self . record [ <str> ] } res = self . unit . carepoint_id ( self . record ) self . assertDictEqual ( expect , res )  def test_name ( self ) :          expect = <str> . format ( prefix = self . unit . backend_record . sale_prefix , name = self . record [ <str> ] , ) expect = { <str> : expect } res = self . unit . name ( self . record ) self . assertDictEqual ( expect , res )  def test_date_order_submit ( self ) :          expect = { <str> : self . record [ <str> ] } res = self . unit . date_order ( self . record ) self . assertDictEqual ( expect , res )  def test_date_order_add ( self ) :          record = self . record record [ <str> ] = False expect = { <str> : record [ <str> ] } res = self . unit . date_order ( record ) self . assertDictEqual ( expect , res )  def test_pharmacy_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . pharmacy_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_pharmacy_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . pharmacy_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , )   def test_pharmacy_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              store_id = self . unit . binder_for ( ) . to_odoo ( ) expect = { <str> : store_id } res = self . unit . pharmacy_id ( self . record ) self . assertDictEqual ( expect , res )   def test_partner_data_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_data ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_partner_data_acct_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_data ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , browse = True , )   def test_partner_data_acct_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . partner_data ( self . record ) partner_id = self . unit . binder_for ( ) . to_odoo ( ) . patient_id . commercial_partner_id expect = { <str> : partner_id . id , <str> : partner_id . property_payment_term_id . id , } self . assertDictEqual ( expect , res )   def test_partner_data_null_ref ( self ) :          with mock . patch . object ( self . unit , <str> ) :              with mock . patch . object ( self . unit . session , <str> ) as env :                  env . ref . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                      self . unit . partner_data ( { <str> : False } )  env . ref . assert_called_once_with ( <str> )    def test_partner_data_null_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              with mock . patch . object ( self . unit . session , <str> ) as env :                  res = self . unit . partner_data ( { <str> : False } ) partner_id = env . ref ( ) . commercial_partner_id expect = { <str> : partner_id . id , <str> : partner_id . property_payment_term_id . id , } self . assertDictEqual ( expect , res )    def test_state_call ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              env . ref . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . state ( self . record )  env . ref . assert_called_once_with ( <str> % self . record [ <str> ] )   def test_state_return ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              res = self . unit . state ( self . record ) expect = { <str> : env . ref ( ) . order_state } self . assertDictEqual ( expect , res )    class TestSaleOrderImporter ( SaleOrderTestBase ) :      def setUp ( self ) :          super ( TestSaleOrderImporter , self ) . setUp ( ) self . Unit = sale_order . SaleOrderImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_import_dependencies ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _import_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record [ <str> ] , <str> , ) , ] )   def test_after_import ( self ) :          res = self . unit . _after_import ( True ) self . assertEqual ( None , res )    