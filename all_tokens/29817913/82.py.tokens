from odoo . addons . connector . unit . backend_adapter import CRUDAdapter try :      from sqlalchemy . exc import InvalidRequestError from sqlalchemy . exc import TimeoutError  except ImportError :      pass  try :      from carepoint import Carepoint  except ImportError :      pass  class CarepointCRUDAdapter ( CRUDAdapter ) :      RECONNECT_EXCEPTIONS = [ InvalidRequestError , TimeoutError , ] def __init__ ( self , connector_env ) :          super ( CarepointCRUDAdapter , self ) . __init__ ( connector_env ) backend = self . backend_record self . carepoint = Carepoint ( server = backend . server , user = backend . username , passwd = backend . password , db_args = { <str> : backend . db_driver } , )  def __to_camel_case ( self , snake_case ) :          parts = snake_case . split ( <str> ) return <str> . join ( x . title ( ) for x in parts )  def __get_cp_model ( self , retry = True ) :          name = self . connector_env . model . _cp_lib camel_name = self . __to_camel_case ( name ) try :              return self . carepoint [ camel_name ]  except tuple ( self . RECONNECT_EXCEPTIONS ) :              if retry :                  self . carepoint . _init_env ( True ) return self . __get_cp_model ( False )  raise   def search ( self , ** filters ) :          model_obj = self . __get_cp_model ( ) pk = self . carepoint . get_pks ( model_obj ) [ 0 ] res = self . carepoint . search ( model_obj , filters , [ pk ] ) return [ getattr ( row , pk ) for row in res ]  def read ( self , _id , attributes = None , return_all = False ) :          model_obj = self . __get_cp_model ( ) pks = self . carepoint . get_pks ( model_obj ) domain = { } try :              for idx , id_part in enumerate ( _id . split ( <str> ) ) :                  domain [ pks [ idx ] ] = id_part   except AttributeError :              domain [ pks [ 0 ] ] = _id  res = self . carepoint . search ( model_obj , domain , attributes ) return res if return_all else res [ 0 ]  def read_image ( self , path ) :          return self . carepoint . get_file ( path ) . read ( ) . encode ( <str> )  def write_image ( self , path , file_obj ) :          return self . carepoint . send_file ( path , file_obj )  def search_read ( self , attributes = None , ** filters ) :          model_obj = self . __get_cp_model ( ) return self . carepoint . search ( model_obj , filters , attributes )  def create ( self , data ) :          model_obj = self . __get_cp_model ( ) pks = self . carepoint . get_pks ( model_obj ) out_pks = [ ] for pk in pks :              if not data . get ( pk ) :                  data [ pk ] = self . carepoint . get_next_sequence ( pk )  out_pks . append ( str ( data [ pk ] ) )  self . carepoint . create ( model_obj , data ) return <str> . join ( out_pks )  def write ( self , _id , data ) :          record = self . read ( _id , return_all = True ) record . update ( data ) record . session . commit ( ) return record  def delete ( self , _id ) :          model_obj = self . __get_cp_model ( ) return self . carepoint . delete ( model_obj , _id )    