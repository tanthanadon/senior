import mock from odoo . addons . connector_carepoint . models import phone_organization from ... unit . backend_adapter import CarepointCRUDAdapter from . . common import SetUpCarepointBase _file = <str> class EndTestException ( Exception ) :      pass  class PhoneOrganizationTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( PhoneOrganizationTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : 1 , <str> : 2 , }   class TestPhoneOrganizationImportMapper ( PhoneOrganizationTestBase ) :      def setUp ( self ) :          super ( TestPhoneOrganizationImportMapper , self ) . setUp ( ) self . Unit = phone_organization . CarepointPhoneOrganizationImportMapper self . unit = self . Unit ( self . mock_env )  def test_partner_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_partner_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . partner_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , browse = True , )   def test_carepoint_id ( self ) :          res = self . unit . carepoint_id ( self . record ) expect = { <str> : <str> % ( self . record [ <str> ] , self . record [ <str> ] , ) , } self . assertDictEqual ( expect , res )   class TestPhoneOrganizationImporter ( PhoneOrganizationTestBase ) :      def setUp ( self ) :          super ( TestPhoneOrganizationImporter , self ) . setUp ( ) self . Unit = phone_organization . CarepointPhoneOrganizationImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_import_dependencies_import ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _import_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record [ <str> ] , <str> , ) , ] )    class TestCarepointPhoneOrganizationUnit ( PhoneOrganizationTestBase ) :      def setUp ( self ) :          super ( TestCarepointPhoneOrganizationUnit , self ) . setUp ( ) self . Unit = phone_organization . CarepointPhoneOrganizationUnit self . unit = self . Unit ( self . mock_env )  def test_import_phones_unit ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              mk . side_effect = [ None , EndTestException ] with self . assertRaises ( EndTestException ) :                  self . unit . _import_phones ( None , None )  mk . assert_has_calls ( [ mock . call ( CarepointCRUDAdapter ) , mock . call ( phone_organization . CarepointPhoneOrganizationImporter , ) , ] )   def test_import_phones_search ( self ) :          organization = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _import_phones ( organization , None ) mk ( ) . search . assert_called_once_with ( org_id = organization , )   def test_import_phones_import ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit , <str> ) as mk :              mk ( ) . search . return_value = [ expect ] self . unit . _import_phones ( 1 , None ) mk ( ) . run . assert_called_once_with ( expect )    class TestPhoneOrganizationExportMapper ( PhoneOrganizationTestBase ) :      def setUp ( self ) :          super ( TestPhoneOrganizationExportMapper , self ) . setUp ( ) self . Unit = phone_organization . CarepointPhoneOrganizationExportMapper self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( )  def test_org_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . org_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_org_id_to_backend ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_backend . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . org_id ( self . record )  self . unit . binder_for ( ) . to_backend . assert_called_once_with ( self . record . res_id , )   def test_org_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . org_id ( self . record ) expect = self . unit . binder_for ( ) . to_backend ( ) self . assertDictEqual ( { <str> : expect } , res )     