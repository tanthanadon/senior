import logging from odoo import models , fields , api , _ from odoo . addons . connector . unit . mapper import ( mapping , only_create , ExportMapper , ) from . . unit . mapper import CarepointImportMapper from . . backend import carepoint from . . unit . import_synchronizer import CarepointImporter from . . unit . export_synchronizer import CarepointExporter from . phone import CarepointPhone from . . connector import add_checkpoint _logger = logging . getLogger ( __name__ ) try :      from carepoint . models . phone_mixin import EnumPhoneType  except ImportError :      _logger . warning ( <str> )  class CarepointPhoneAbstract ( models . AbstractModel ) :      _inherits = { <str> : <str> } _name = <str> _description = <str> phone_id = fields . Many2one ( string = <str> , comodel_name = <str> , required = True , ondelete = <str> , ) partner_id = fields . Many2one ( string = <str> , comodel_name = <str> , required = True , store = True , compute = <str> , inverse = <str> , ) res_model = fields . Char ( string = <str> , default = lambda s : s . _default_res_model ( ) , ) res_id = fields . Integer ( string = <str> , compute = <str> , store = True , ) @ property @ api . multi def medical_entity_id ( self ) :          self . ensure_one ( ) return self . env [ self . res_model ] . browse ( self . res_id )  @ api . model def _default_res_model ( self ) :          raise NotImplementedError ( _ ( <str> ) )  @ api . multi def _compute_partner_id ( self ) :          for rec_id in self :              rec_id . partner_id = rec_id . phone_id . partner_id . id   @ api . multi @ api . depends ( <str> , * [ <str> % a for a in CarepointPhone . PARTNER_ATTRS ] ) def _set_partner_id ( self ) :          for rec_id in self :              rec_id . phone_id . write ( { <str> : rec_id . partner_id . id , <str> : rec_id . partner_id [ rec_id . partner_field_name ] } )   @ api . multi @ api . depends ( <str> , <str> ) def _compute_res_id ( self ) :          for rec_id in self :              if not all ( [ rec_id . res_model , rec_id . partner_id ] ) :                  continue  medical_entity = self . env [ rec_id . res_model ] . search ( [ ( <str> , <str> , rec_id . partner_id . id ) , ] , limit = 1 , ) rec_id . res_id = medical_entity . id   @ api . model def _get_by_partner ( self , partner , edit = True , recurse = False ) :          phones = self . search ( [ ( <str> , <str> , partner . id ) ] ) partner_vals = self . phone_id . _get_partner_sync_vals ( partner ) _logger . debug ( <str> , phones , partner , partner_vals , ) if not edit :              return phones  for phone in phones :              phone . write ( { <str> : partner_vals [ phone . partner_field_name ] , } ) del partner_vals [ phone . partner_field_name ]  for name , val in partner_vals . iteritems ( ) :              phones += self . create ( { <str> : partner . id , <str> : name , <str> : val , } )  if recurse :              for child in partner . child_ids :                  self . _get_by_partner ( child , edit , recurse )   return phones   @ carepoint class CarepointPhoneAbstractImportMapper ( CarepointImportMapper ) :      PHONE_MAP = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } def partner_id ( self , record , medical_entity ) :          partner = medical_entity . partner_id return { <str> : partner . id }  def res_model_and_id ( self , record , medical_entity ) :          return { <str> : medical_entity . id , <str> : medical_entity . _name , }  @ mapping def partner_field_name ( self , record ) :          phone_type = EnumPhoneType ( record [ <str> ] ) try :              return { <str> : self . PHONE_MAP [ phone_type . name ] }  except KeyError :              _logger . warning ( _ ( <str> ) , phone_type . name , ) return   @ mapping @ only_create def phone_id ( self , record ) :          binder = self . binder_for ( <str> ) phone_id = binder . to_odoo ( record [ <str> ] ) return { <str> : phone_id }   @ carepoint class CarepointPhoneAbstractImporter ( CarepointImporter ) :      _model_name = <str> def _import_dependencies ( self ) :          self . _import_dependency ( self . carepoint_record [ <str> ] , <str> )  def _create ( self , data ) :          binding = super ( CarepointPhoneAbstractImporter , self ) . _create ( data ) add_checkpoint ( self . session , binding . _name , binding . id , binding . backend_id . id ) return binding   @ carepoint class CarepointPhoneAbstractExportMapper ( ExportMapper ) :      PHONE_MAP = { <str> : <str> , <str> : <str> , <str> : <str> , } @ mapping def phone_id ( self , binding ) :          binder = self . binder_for ( <str> ) rec_id = binder . to_backend ( binding . phone_id . id ) return { <str> : rec_id }  def _get_phone_type ( self , field_name ) :          try :              return EnumPhoneType [ self . PHONE_MAP . get ( field_name , <str> ) ]  except KeyError :              _logger . warning ( _ ( <str> ) , field_name , ) return   @ mapping def phone_type_cn ( self , binding ) :          phone_type = self . _get_phone_type ( binding . partner_field_name , ) if phone_type :              return { <str> : phone_type . value , }   @ mapping def static_defaults ( self , binding ) :          return { <str> : 1 , <str> : 0 , }   @ carepoint class CarepointPhoneAbstractExporter ( CarepointExporter ) :      _model_name = <str> def _export_dependencies ( self ) :          self . _export_dependency ( self . binding_record . phone_id , <str> )    