from collections import OrderedDict import re from odoo import models , fields , api class FdbPemMogc ( models . Model ) :      _name = <str> _description = <str> gcn_id = fields . Many2one ( string = <str> , comodel_name = <str> , ondelete = <str> , required = True , index = True , ) pemono = fields . Integer ( index = True , required = True , ) moe_ids = fields . One2many ( string = <str> , comodel_name = <str> , inverse_name = <str> , ) monograph = fields . Text ( compute = <str> , ) update_yn = fields . Boolean ( ) @ api . multi @ api . depends ( <str> ) def _compute_monograph ( self ) :          for rec_id in self :              rec_id . monograph = self . _get_sections ( )   @ api . multi def _get_sections ( self , sections = None , remove_headers = True ) :          monograph = [ ] for val in self . _get_sections_dict ( sections ) . values ( ) :              monograph . extend ( [ val , <str> ] )  return <str> . join ( monograph )  @ api . multi def _get_sections_dict ( self , sections = None , remove_headers = True ) :          self . ensure_one ( ) monograph = OrderedDict ( ) moe_ids = self . moe_ids header_re = re . compile ( <str> ) if sections is not None :              moe_ids = moe_ids . filtered ( lambda r : r . pemtxtei in sections )  for moe_id in moe_ids :              if moe_id . pemtxtei != <str> :                  text = moe_id . pemtxte . strip ( ) if remove_headers :                      text = header_re . sub ( <str> , text , 1 )  try :                      monograph [ moe_id . pemtxtei ] . append ( text )  except KeyError :                      monograph [ moe_id . pemtxtei ] = [ text ]    for key , val in monograph . iteritems ( ) :              monograph [ key ] = <str> . join ( val )  return monograph    