from odoo . addons . connector . connector import Binder from . unit . export_synchronizer import export_record from . connector import get_environment from odoo . addons . connector . event import ( on_record_write , on_record_create , ) import logging _logger = logging . getLogger ( __name__ ) def delay_export ( session , model_name , record_id , vals ) :      if session . context . get ( <str> ) :          return  fields = vals . keys ( ) export_record . delay ( session , model_name , record_id , fields = fields )  @ on_record_write ( model_names = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) def delay_export_all_bindings ( session , model_name , record_id , vals ) :      if session . context . get ( <str> ) :          return  record = session . env [ model_name ] . browse ( record_id ) fields = vals . keys ( ) for binding in record . carepoint_bind_ids :          export_record . delay ( session , binding . _name , binding . id , fields = fields )   @ on_record_create ( model_names = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) def delay_create ( session , model_name , record_id , vals ) :      if session . context . get ( <str> ) :          return  bind_model_name = session . env [ model_name ] . carepoint_bind_ids . _name record = session . env [ model_name ] . browse ( record_id ) env = get_environment ( session , bind_model_name ) binder = env . get_connector_unit ( Binder ) bind_record = binder . create_bind ( record ) delay_export ( session , bind_model_name , bind_record . id , vals )  @ on_record_write ( model_names = [ <str> ] ) def sync_phone_to_partner ( session , model_name , record_id , vals ) :      session . env [ model_name ] . browse ( record_id ) . _sync_partner ( )   