from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import pytest from PIL import Image import escpos . printer as printer from escpos . exceptions import ImageWidthError def test_bit_image_black ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> ) instance = printer . Dummy ( ) im = Image . new ( <str> , ( 1 , 1 ) , ( 0 , 0 , 0 ) ) instance . image ( im , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_white ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_both ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_transparent ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_colfmt_black ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_colfmt_white ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_colfmt_both ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_bit_image_colfmt_transparent ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_graphics_black ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_graphics_white ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_graphics_both ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_graphics_transparent ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> ) assert ( instance . output == <str> )  def test_large_graphics ( ) :      instance = printer . Dummy ( ) instance . image ( <str> , impl = <str> , fragment_height = 1 ) assert ( instance . output == <str> )  @ pytest . fixture def dummy_with_width ( ) :      instance = printer . Dummy ( ) instance . profile . profile_data = { <str> : { <str> : { <str> : 384 } } } return instance  def test_width_too_large ( dummy_with_width ) :      instance = dummy_with_width with pytest . raises ( ImageWidthError ) :          instance . image ( Image . new ( <str> , ( 385 , 200 ) ) )  instance . image ( Image . new ( <str> , ( 384 , 200 ) ) )  def test_center_image ( dummy_with_width ) :      instance = dummy_with_width with pytest . raises ( ImageWidthError ) :          instance . image ( Image . new ( <str> , ( 385 , 200 ) ) , center = True )  instance . image ( Image . new ( <str> , ( 384 , 200 ) ) , center = True )   