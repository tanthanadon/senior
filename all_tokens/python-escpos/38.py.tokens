from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import os import appdirs import yaml from . import printer from . import exceptions class Config ( object ) :      _app_name = <str> _config_file = <str> def __init__ ( self ) :          self . _has_loaded = False self . _printer = None self . _printer_name = None self . _printer_config = None  def _reset_config ( self ) :          self . _has_loaded = False self . _printer = None self . _printer_name = None self . _printer_config = None  def load ( self , config_path = None ) :          self . _reset_config ( ) if not config_path :              config_path = os . path . join ( appdirs . user_config_dir ( self . _app_name ) , self . _config_file )  try :              if hasattr ( config_path , <str> ) :                  config = yaml . safe_load ( config_path )  else :                  with open ( config_path , <str> ) as config_file :                      config = yaml . safe_load ( config_file )    except EnvironmentError :              raise exceptions . ConfigNotFoundError ( <str> . format ( config_path = str ( config_path ) , ) )  except yaml . YAMLError :              raise exceptions . ConfigSyntaxError ( <str> )  if <str> in config :              self . _printer_config = config [ <str> ] self . _printer_name = self . _printer_config . pop ( <str> ) . title ( ) if not self . _printer_name or not hasattr ( printer , self . _printer_name ) :                  raise exceptions . ConfigSyntaxError ( <str> . format ( printer_name = self . _printer_name , ) )   self . _has_loaded = True  def printer ( self ) :          if not self . _has_loaded :              self . load ( )  if not self . _printer_name :              raise exceptions . ConfigSectionMissingError ( <str> )  if not self . _printer :              self . _printer = getattr ( printer , self . _printer_name ) ( ** self . _printer_config )  return self . _printer    