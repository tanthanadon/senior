from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals class Error ( Exception ) :      def __init__ ( self , msg , status = None ) :          Exception . __init__ ( self ) self . msg = msg self . resultcode = 1 if status is not None :              self . resultcode = status   def __str__ ( self ) :          return self . msg   class BarcodeTypeError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 10  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class BarcodeSizeError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 20  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class BarcodeCodeError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 30  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class ImageSizeError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 40  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class ImageWidthError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 41  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class TextError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 50  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class CashDrawerError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 60  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class TabPosError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 70  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class CharCodeError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 80  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class USBNotFoundError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 90  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class SetVariableError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 100  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class ConfigNotFoundError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 200  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class ConfigSyntaxError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 210  def __str__ ( self ) :          return <str> . format ( msg = self . msg )   class ConfigSectionMissingError ( Error ) :      def __init__ ( self , msg = <str> ) :          Error . __init__ ( self , msg ) self . msg = msg self . resultcode = 220  def __str__ ( self ) :          return <str> . format ( msg = self . msg )    