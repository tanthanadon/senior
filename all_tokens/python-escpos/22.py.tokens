from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import six import escpos . printer as printer from escpos . constants import TXT_NORMAL , TXT_STYLE , SET_FONT from escpos . constants import TXT_SIZE def test_default_values ( ) :      instance = printer . Dummy ( ) instance . set ( ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_size_2h ( ) :      instance = printer . Dummy ( ) instance . set ( double_height = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_size_2w ( ) :      instance = printer . Dummy ( ) instance . set ( double_width = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_size_2x ( ) :      instance = printer . Dummy ( ) instance . set ( double_height = True , double_width = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_size_custom ( ) :      instance = printer . Dummy ( ) instance . set ( custom_size = True , width = 8 , height = 7 ) expected_sequence = ( TXT_SIZE , six . int2byte ( TXT_STYLE [ <str> ] [ 8 ] + TXT_STYLE [ <str> ] [ 7 ] ) , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_flip ( ) :      instance = printer . Dummy ( ) instance . set ( flip = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ True ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_smooth ( ) :      instance = printer . Dummy ( ) instance . set ( smooth = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ True ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_bold ( ) :      instance = printer . Dummy ( ) instance . set ( bold = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ True ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_underline ( ) :      instance = printer . Dummy ( ) instance . set ( underline = 1 ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 1 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_set_underline2 ( ) :      instance = printer . Dummy ( ) instance . set ( underline = 2 ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 2 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_align_center ( ) :      instance = printer . Dummy ( ) instance . set ( align = <str> ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_align_right ( ) :      instance = printer . Dummy ( ) instance . set ( align = <str> ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )  def test_densities ( ) :      for density in range ( 8 ) :          instance = printer . Dummy ( ) instance . set ( density = density ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ density ] , TXT_STYLE [ <str> ] [ False ] ) assert ( instance . output == <str> . join ( expected_sequence ) )   def test_invert ( ) :      instance = printer . Dummy ( ) instance . set ( invert = True ) expected_sequence = ( TXT_NORMAL , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ False ] , TXT_STYLE [ <str> ] [ 0 ] , SET_FONT ( <str> ) , TXT_STYLE [ <str> ] [ <str> ] , TXT_STYLE [ <str> ] [ True ] ) assert ( instance . output == <str> . join ( expected_sequence ) )    