from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import pytest from nose . tools import raises , assert_raises from hypothesis import given , example import hypothesis . strategies as st from escpos . magicencode import MagicEncode , Encoder from escpos . katakana import encode_katakana from escpos . exceptions import CharCodeError , Error class TestEncoder :      def test_can_encode ( self ) :          assert not Encoder ( { <str> : 1 } ) . can_encode ( <str> , <str> ) assert Encoder ( { <str> : 1 } ) . can_encode ( <str> , <str> ) assert not Encoder ( { <str> : 1 } ) . can_encode ( <str> , <str> )  def test_find_suitable_encoding ( self ) :          assert not Encoder ( { <str> : 1 } ) . find_suitable_encoding ( <str> ) assert Encoder ( { <str> : 1 } ) . find_suitable_encoding ( <str> ) == <str>  @ raises ( ValueError ) def test_get_encoding ( self ) :          Encoder ( { } ) . get_encoding_name ( <str> )   class TestMagicEncode :      class TestInit :          def test_disabled_requires_encoding ( self , driver ) :              with pytest . raises ( Error ) :                  MagicEncode ( driver , disabled = True )    class TestWriteWithEncoding :          def test_init_from_none ( self , driver ) :              encode = MagicEncode ( driver , encoding = None ) encode . write_with_encoding ( <str> , <str> ) assert driver . output == <str>  def test_change_from_another ( self , driver ) :              encode = MagicEncode ( driver , encoding = <str> ) encode . write_with_encoding ( <str> , <str> ) assert driver . output == <str>  def test_no_change ( self , driver ) :              encode = MagicEncode ( driver , encoding = <str> ) encode . write_with_encoding ( <str> , <str> ) assert driver . output == <str>   class TestWrite :          def test_write ( self , driver ) :              encode = MagicEncode ( driver ) encode . write ( <str> ) assert driver . output == <str>  def test_write_disabled ( self , driver ) :              encode = MagicEncode ( driver , encoding = <str> , disabled = True ) encode . write ( <str> ) assert driver . output == <str>  def test_write_no_codepage ( self , driver ) :              encode = MagicEncode ( driver , defaultsymbol = <str> , encoder = Encoder ( { <str> : 1 } ) , encoding = <str> ) encode . write ( <str> ) assert driver . output == <str>   class TestForceEncoding :          def test ( self , driver ) :              encode = MagicEncode ( driver ) encode . force_encoding ( <str> ) assert driver . output == <str> encode . write ( <str> ) assert driver . output == <str>    try :      import jaconv  except ImportError :      jaconv = None  @ pytest . mark . skipif ( not jaconv , reason = <str> ) class TestKatakana :      @ given ( st . text ( ) ) @ example ( <str> ) @ example ( <str> ) @ example ( <str> ) def test_accept ( self , text ) :          encode_katakana ( text )  def test_result ( self ) :          assert encode_katakana ( <str> ) == <str> assert encode_katakana ( <str> ) == <str>    