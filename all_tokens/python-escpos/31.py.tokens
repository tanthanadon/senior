from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import six NUL = <str> EOT = <str> ENQ = <str> DLE = <str> DC4 = <str> CAN = <str> ESC = <str> FS = <str> GS = <str> CTL_LF = <str> CTL_FF = <str> CTL_CR = <str> CTL_HT = <str> CTL_SET_HT = ESC + <str> CTL_VT = <str> HW_INIT = ESC + <str> HW_SELECT = ESC + <str> HW_RESET = ESC + <str> _CASH_DRAWER = lambda m , t1 = <str> , t2 = <str> : ESC + <str> + m + six . int2byte ( t1 ) + six . int2byte ( t2 ) CD_KICK_DEC_SEQUENCE = lambda esc , p , m , t1 = 50 , t2 = 50 : six . int2byte ( esc ) + six . int2byte ( p ) + six . int2byte ( m ) + six . int2byte ( t1 ) + six . int2byte ( t2 ) CD_KICK_2 = _CASH_DRAWER ( <str> , 50 , 50 ) CD_KICK_5 = _CASH_DRAWER ( <str> , 50 , 50 ) _CUT_PAPER = lambda m : GS + <str> + m PAPER_FULL_CUT = _CUT_PAPER ( <str> ) PAPER_PART_CUT = _CUT_PAPER ( <str> ) BEEP = <str> _PANEL_BUTTON = lambda n : ESC + <str> + six . int2byte ( n ) PANEL_BUTTON_ON = _PANEL_BUTTON ( 0 ) PANEL_BUTTON_OFF = _PANEL_BUTTON ( 1 ) LINE_DISPLAY_OPEN = ESC + <str> LINE_DISPLAY_CLEAR = ESC + <str> LINE_DISPLAY_CLOSE = ESC + <str> SHEET_SLIP_MODE = ESC + <str> SHEET_ROLL_MODE = ESC + <str> TXT_SIZE = GS + <str> TXT_NORMAL = ESC + <str> TXT_STYLE = { <str> : { False : ESC + <str> , True : ESC + <str> } , <str> : { 0 : ESC + <str> , 1 : ESC + <str> , 2 : ESC + <str> } , <str> : { <str> : TXT_NORMAL + ESC + <str> , <str> : TXT_NORMAL + ESC + <str> , <str> : TXT_NORMAL + ESC + <str> , <str> : TXT_NORMAL + ESC + <str> } , <str> : { <str> : ESC + <str> , <str> : ESC + <str> } , <str> : { <str> : ESC + <str> , <str> : ESC + <str> , <str> : ESC + <str> } , <str> : { True : GS + <str> , False : GS + <str> } , <str> : { <str> : ESC + <str> , <str> : ESC + <str> } , <str> : { True : ESC + <str> , False : ESC + <str> } , <str> : { 0 : GS + <str> , 1 : GS + <str> , 2 : GS + <str> , 3 : GS + <str> , 4 : GS + <str> , 5 : GS + <str> , 6 : GS + <str> , 7 : GS + <str> , 8 : GS + <str> } , <str> : { True : GS + <str> , False : GS + <str> } , <str> : { 1 : 0x00 , 2 : 0x01 , 3 : 0x02 , 4 : 0x03 , 5 : 0x04 , 6 : 0x05 , 7 : 0x06 , 8 : 0x07 } , <str> : { 1 : 0x00 , 2 : 0x10 , 3 : 0x20 , 4 : 0x30 , 5 : 0x40 , 6 : 0x50 , 7 : 0x60 , 8 : 0x70 } } SET_FONT = lambda n : ESC + <str> + n TXT_FONT_A = SET_FONT ( <str> ) TXT_FONT_B = SET_FONT ( <str> ) LINESPACING_RESET = ESC + <str> LINESPACING_FUNCS = { 60 : ESC + <str> , 360 : ESC + <str> , 180 : ESC + <str> , } CODEPAGE_CHANGE = ESC + <str> _SET_BARCODE_TXT_POS = lambda n : GS + <str> + n BARCODE_TXT_OFF = _SET_BARCODE_TXT_POS ( <str> ) BARCODE_TXT_ABV = _SET_BARCODE_TXT_POS ( <str> ) BARCODE_TXT_BLW = _SET_BARCODE_TXT_POS ( <str> ) BARCODE_TXT_BTH = _SET_BARCODE_TXT_POS ( <str> ) _SET_HRI_FONT = lambda n : GS + <str> + n BARCODE_FONT_A = _SET_HRI_FONT ( <str> ) BARCODE_FONT_B = _SET_HRI_FONT ( <str> ) BARCODE_HEIGHT = GS + <str> BARCODE_WIDTH = GS + <str> _SET_BARCODE_TYPE = lambda m : GS + <str> + six . int2byte ( m ) BARCODE_TYPE_A = { <str> : _SET_BARCODE_TYPE ( 0 ) , <str> : _SET_BARCODE_TYPE ( 1 ) , <str> : _SET_BARCODE_TYPE ( 2 ) , <str> : _SET_BARCODE_TYPE ( 3 ) , <str> : _SET_BARCODE_TYPE ( 4 ) , <str> : _SET_BARCODE_TYPE ( 5 ) , <str> : _SET_BARCODE_TYPE ( 6 ) , <str> : _SET_BARCODE_TYPE ( 6 ) , } BARCODE_TYPE_B = { <str> : _SET_BARCODE_TYPE ( 65 ) , <str> : _SET_BARCODE_TYPE ( 66 ) , <str> : _SET_BARCODE_TYPE ( 67 ) , <str> : _SET_BARCODE_TYPE ( 68 ) , <str> : _SET_BARCODE_TYPE ( 69 ) , <str> : _SET_BARCODE_TYPE ( 70 ) , <str> : _SET_BARCODE_TYPE ( 71 ) , <str> : _SET_BARCODE_TYPE ( 71 ) , <str> : _SET_BARCODE_TYPE ( 72 ) , <str> : _SET_BARCODE_TYPE ( 73 ) , <str> : _SET_BARCODE_TYPE ( 74 ) , <str> : _SET_BARCODE_TYPE ( 75 ) , <str> : _SET_BARCODE_TYPE ( 76 ) , <str> : _SET_BARCODE_TYPE ( 77 ) , <str> : _SET_BARCODE_TYPE ( 78 ) , } BARCODE_FORMATS = { <str> : ( [ ( 11 , 12 ) ] , <str> ) , <str> : ( [ ( 7 , 8 ) , ( 11 , 12 ) ] , <str> ) , <str> : ( [ ( 12 , 13 ) ] , <str> ) , <str> : ( [ ( 7 , 8 ) ] , <str> ) , <str> : ( [ ( 1 , 255 ) ] , <str> ) , <str> : ( [ ( 2 , 255 ) ] , <str> ) , <str> : ( [ ( 1 , 255 ) ] , <str> ) , <str> : ( [ ( 1 , 255 ) ] , <str> ) , <str> : ( [ ( 1 , 255 ) ] , <str> ) , <str> : ( [ ( 2 , 255 ) ] , <str> ) , <str> : ( [ ( 2 , 255 ) ] , <str> ) , <str> : ( [ ( 13 , 13 ) ] , <str> ) , <str> : ( [ ( 13 , 13 ) ] , <str> ) , <str> : ( [ ( 13 , 13 ) ] , <str> ) , <str> : ( [ ( 2 , 255 ) ] , <str> ) , } BARCODE_TYPES = { <str> : BARCODE_TYPE_A , <str> : BARCODE_TYPE_B , } QR_ECLEVEL_L = 0 QR_ECLEVEL_M = 1 QR_ECLEVEL_Q = 2 QR_ECLEVEL_H = 3 QR_MODEL_1 = 1 QR_MODEL_2 = 2 QR_MICRO = 3 _PRINT_RASTER_IMG = lambda data : GS + <str> + data S_RASTER_N = _PRINT_RASTER_IMG ( <str> ) S_RASTER_2W = _PRINT_RASTER_IMG ( <str> ) S_RASTER_2H = _PRINT_RASTER_IMG ( <str> ) S_RASTER_Q = _PRINT_RASTER_IMG ( <str> ) RT_STATUS = DLE + EOT RT_STATUS_ONLINE = RT_STATUS + <str> RT_STATUS_PAPER = RT_STATUS + <str> RT_MASK_ONLINE = 8 RT_MASK_PAPER = 18 RT_MASK_LOWPAPER = 30 RT_MASK_NOPAPER = 114   