from django . contrib import admin from django . contrib . auth . models import Group , Permission from . models import Experiment from djmanager . utils import get_subclass_ct_pk , get_allowed_exp_for_user from djsend . models import BaseGlobalSetting , BaseSettingBlock from django . contrib . contenttypes . models import ContentType from modeltranslation . admin import TranslationAdmin , TranslationGenericStackedInline , TranslationTabularInline , TranslationStackedInline from djexperiments . models import Debrief , Lobby from django_markdown . models import MarkdownField from django_markdown . widgets import AdminMarkdownWidget import os from django . conf import settings class DebriefTabularInline ( TranslationStackedInline ) :      model = Debrief fields = [ <str> , <str> ] def get_queryset ( self , request ) :          qs = super ( DebriefTabularInline , self ) . get_queryset ( request ) exps = get_allowed_exp_for_user ( request ) return qs . filter ( experiment__in = exps )  def get_form ( self , request , obj = None , ** kwargs ) :          form = super ( DebriefTabularInline , self ) . get_form ( request , obj = obj , ** kwargs ) form . base_fields [ <str> ] . queryset = get_allowed_exp_for_user ( request )   class LobbyTabularInline ( TranslationStackedInline ) :      model = Lobby fields = [ <str> , <str> ] def get_queryset ( self , request ) :          qs = super ( LobbyTabularInline , self ) . get_queryset ( request ) exps = get_allowed_exp_for_user ( request ) return qs . filter ( experiment__in = exps )  def get_form ( self , request , obj = None , ** kwargs ) :          form = super ( LobbyTabularInline , self ) . get_form ( request , obj = obj , ** kwargs ) form . base_fields [ <str> ] . queryset = get_allowed_exp_for_user ( request )   @ admin . register ( Experiment ) class ExperimentAdmin ( TranslationAdmin ) :      def get_queryset ( self , request ) :          qs = super ( ExperimentAdmin , self ) . get_queryset ( request ) if request . user . is_superuser :              return qs  exp_groups = request . user . groups . filter ( name__endswith = <str> ) return qs . filter ( research_group__in = exp_groups )  def get_form ( self , request , obj = None , ** kwargs ) :          form = super ( ExperimentAdmin , self ) . get_form ( request , obj = obj , ** kwargs ) glob_settings_pks = get_subclass_ct_pk ( BaseGlobalSetting ) block_settings_pks = get_subclass_ct_pk ( BaseSettingBlock ) form . base_fields [ <str> ] . queryset = ContentType . objects . filter ( pk__in = glob_settings_pks ) form . base_fields [ <str> ] . queryset = ContentType . objects . filter ( pk__in = block_settings_pks ) return form  def save_model ( self , request , obj , form , change ) :          if obj . pk is None :              new_group = Group ( name = obj . label + <str> ) new_group . save ( ) obj . research_group = new_group exp_content_type = ContentType . objects . get_for_model ( Experiment ) exp_perm = Permission . objects . get ( content_type = exp_content_type , codename = <str> ) new_group . permissions . add ( exp_perm ) request . user . groups . add ( new_group ) dir_path = os . path . join ( settings . MEDIA_ROOT , obj . label ) if not os . path . exists ( dir_path ) :                  os . makedirs ( dir_path )  template_path = os . path . join ( settings . BASE_DIR , <str> , <str> , <str> , <str> , <str> ) with open ( template_path , <str> ) as content_file :                  content = content_file . read ( ) with open ( os . path . join ( dir_path + os . path . sep , <str> ) , <str> ) as temp_file :                      temp_file . write ( content )    obj . save ( )  filter_horizontal = [ <str> ] list_display = ( <str> , <str> , <str> , <str> , <str> ) inlines = [ DebriefTabularInline , LobbyTabularInline ]  @ admin . register ( Debrief ) class DebriefAdmin ( TranslationAdmin ) :      fields = [ <str> , <str> ] def get_queryset ( self , request ) :          qs = super ( DebriefAdmin , self ) . get_queryset ( request ) exps = get_allowed_exp_for_user ( request ) return qs . filter ( experiment__in = exps )  def get_form ( self , request , obj = None , ** kwargs ) :          form = super ( DebriefAdmin , self ) . get_form ( request , obj = obj , ** kwargs ) form . base_fields [ <str> ] . queryset = get_allowed_exp_for_user ( request )    