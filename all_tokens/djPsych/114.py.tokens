from django . contrib import admin from django . contrib . contenttypes . admin import GenericStackedInline from django . contrib . contenttypes . models import ContentType from . models import * from gfklookupwidget . widgets import GfkLookupWidget from djmanager . utils import get_subclass_ct_pk , get_allowed_exp_for_user @ admin . register ( Category ) class CategoryAdmin ( admin . ModelAdmin ) :      pass  @ admin . register ( LinkedStimulus ) class LinkedStimulusAdmin ( admin . ModelAdmin ) :      def get_queryset ( self , request ) :          qs = super ( LinkedStimulusAdmin , self ) . get_queryset ( request ) candidates = [ link . pk for link in qs if link . get_experiment ( ) in get_allowed_exp_for_user ( request ) ] return qs . filter ( pk__in = candidates )   @ admin . register ( MicroComponentPair ) class MCPairAdmin ( admin . ModelAdmin ) :      pass  class LinkedStimulusInline ( GenericStackedInline ) :      model = LinkedStimulus ct_field = <str> ct_fk_field = <str> extra = 1 related_lookup_fields = { <str> : [ [ <str> , <str> ] ] } def formfield_for_foreignkey ( self , db_field , request = None , ** kwargs ) :          if db_field . name == <str> :              possibilities = get_subclass_ct_pk ( BaseStimuli ) if self . parent_model == SimCatGlobalSetting :                  pair_ct = ContentType . objects . get_for_model ( MicroComponentPair ) possibilities = [ pair_ct . pk ] kwargs [ <str> ] = pair_ct  kwargs [ <str> ] = ContentType . objects . filter ( pk__in = possibilities )  return GenericStackedInline . formfield_for_foreignkey ( self , db_field , request = request , ** kwargs )    