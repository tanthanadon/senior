from django . db import models from djPsych . exceptions import SettingException from djexperiments . models import Experiment from jsonfield import JSONField from . BasicBlock import BaseSettingBlock from django . contrib . contenttypes . fields import GenericRelation from django . contrib . contenttypes . models import ContentType from django . utils . translation import ugettext_lazy as l_ from pip . _vendor . pyparsing import dictOf import json class BaseGlobalSetting ( models . Model ) :      class Meta :          abstract = True  experiment = models . ForeignKey ( Experiment ) name = models . CharField ( max_length = 64 , help_text = <str> ) max_consecutive_timeouts = models . IntegerField ( blank = True , null = True , help_text = <str> ) max_total_timeouts = models . IntegerField ( blank = True , null = True , help_text = <str> ) fixation_cross = models . CharField ( blank = True , null = True , max_length = 32 , help_text = <str> ) extra_parameters = JSONField ( null = True , blank = True ) def toDict ( self ) :          dictionary = dict ( self . __dict__ ) del dictionary [ <str> ] del dictionary [ <str> ] del dictionary [ <str> ] if self . extra_parameters is not None :              for key , value in self . extra_parameters . items ( ) :                  dictionary [ key ] = value   return dictionary  def __str__ ( self ) :          return l_ ( <str> ) % self . name  def get_all_blocks ( self ) :          blocks = [ ] for block_type in self . experiment . block_models . all ( ) :              model = block_type . model_class ( ) ct = ContentType . objects . get_for_model ( self ) instances = model . objects . filter ( global_settings_id = self . pk , global_settings_type = ct ) for inst in instances :                  blocks . append ( inst )   return blocks  def build_timeline ( self , blocks = None , request = None ) :          blocks . sort ( key = lambda x : x . position_in_timeline ) timeline = [ ] for block in blocks :              timeline . append ( block . toDict ( ) )  self . timeline = timeline  def number_of_blocks ( self ) :          return len ( self . get_all_blocks ( ) )   class GenericGlobalSetting ( BaseGlobalSetting ) :      pass   