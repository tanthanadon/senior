from django . contrib . auth . decorators import login_required from django . http import HttpResponseBadRequest , JsonResponse from django . utils . translation import ugettext as _ from djexperiments . models import Experiment from djPsych . exceptions import ParticipationRefused from djcollect . models import DropOut import random import string import datetime import json from django . shortcuts import render from django . contrib . contenttypes . models import ContentType from djreceive . models . CustomTrials import CogComHTMLTrial def sendSettings ( request , exp_label ) :      if not request . is_ajax ( ) :          pass  if not request . user . is_authenticated ( ) :          return JsonResponse ( { <str> : _ ( <str> ) } )  try :          exp_version = request . GET [ <str> ]  except :          return JsonResponse ( { <str> : _ ( <str> ) } )  try :          exp = Experiment . objects . get ( label = exp_label )  except Experiment . DoesNotExist :          return JsonResponse ( { <str> : _ ( <str> + exp_label ) } )  participations = exp . participation_set . filter ( subject__user = request . user , experiment = exp ) len ( participations ) previous = participations . filter ( complete = True ) on_the_ice = participations . filter ( complete = False ) try :          if not <str> in request . session :              to_be_continued = None if on_the_ice . count ( ) > 0 and exp . enforce_finish :                  raise ParticipationRefused ( _ ( <str> ) )  if exp . max_pending is not None and on_the_ice . count ( ) >= exp . max_pending :                  raise ParticipationRefused ( _ ( <str> ) )   else :              to_be_continued = on_the_ice . get ( pk = request . session . get ( <str> ) ) if exp . max_pending is not None and on_the_ice . count ( ) > exp . max_pending :                  raise ParticipationRefused ( _ ( <str> ) )   if exp . max_repeats is not None and previous . count ( ) >= exp . max_repeats :              raise ParticipationRefused ( _ ( <str> ) )  if previous . count ( ) > 0 and not exp . allow_repeats :              raise ParticipationRefused ( _ ( <str> ) )   except ParticipationRefused as e :          return JsonResponse ( { <str> : str ( e ) } )  try :          global_settings_obj = exp . get_global_settings ( exp_version , waiting = on_the_ice , requested = to_be_continued )  except Exception as e :          return JsonResponse ( { <str> : str ( e ) } )  request . session [ <str> ] = global_settings_obj . id request . session [ <str> ] = ContentType . objects . get_for_model ( global_settings_obj ) . id global_settings_obj . build_timeline ( global_settings_obj . get_all_blocks ( ) , request ) final_settings = global_settings_obj . toDict ( ) final_settings [ <str> ] = request . user . subject . id if to_be_continued :          request . session . pop ( <str> ) request . session [ <str> ] = to_be_continued . id final_settings [ <str> ] = to_be_continued . parameters  request . session [ <str> ] = final_settings [ <str> ] = <str> . join ( random . SystemRandom ( ) . choice ( string . ascii_uppercase + string . digits ) for _ in range ( 16 ) ) request . session [ <str> ] = final_settings [ <str> ] = exp_label request . session [ <str> ] = str ( datetime . datetime . now ( ) ) save_dict = { } for block in final_settings [ <str> ] :          if <str> in block :              save_dict [ block [ <str> ] ] = block [ <str> ]   save_dict [ <str> ] = ContentType . objects . get_for_model ( CogComHTMLTrial ) . pk request . session [ <str> ] = json . dumps ( save_dict ) final_settings [ <str> ] = exp . list_static_urls ( ) dropout = DropOut ( experiment = exp , subject = request . user . subject , started = datetime . datetime . now ( ) ) dropout . save ( ) request . session [ <str> ] = dropout . pk return JsonResponse ( final_settings )  def serve_snippet ( request , exp_label , template ) :      prefix = <str> + exp_label + <str> response = render ( request , prefix + template ) response [ <str> ] = <str> return response   