from openprocurement . tender . core . traversal import Root , get_item def qualifications_factory ( request ) :      request . validated [ <str> ] = { } root = Root ( request ) if not request . matchdict or not request . matchdict . get ( <str> ) :          return root  request . validated [ <str> ] = request . matchdict [ <str> ] tender = request . tender tender . __parent__ = root request . validated [ <str> ] = request . validated [ <str> ] = tender request . validated [ <str> ] = tender . status if request . method != <str> :          request . validated [ <str> ] = tender . serialize ( <str> )  if request . matchdict . get ( <str> ) :          qualification = get_item ( tender , <str> , request ) if request . matchdict . get ( <str> ) :              complaint = get_item ( qualification , <str> , request ) if request . matchdict . get ( <str> ) :                  return get_item ( complaint , <str> , request )  else :                  return complaint   elif request . matchdict . get ( <str> ) :              return get_item ( qualification , <str> , request )  else :              return qualification   request . validated [ <str> ] = request . matchdict [ <str> ] return tender  def get_document ( parent , key , request ) :      request . validated [ <str> ] = request . matchdict [ <str> ] attr = key . split ( <str> ) attr = attr [ 0 ] + attr [ 1 ] . capitalize ( ) + <str> items = [ i for i in getattr ( parent , attr , [ ] ) if i . id == request . matchdict [ <str> ] ] if not items :          from openprocurement . api . utils import error_handler request . errors . add ( <str> , <str> , <str> ) request . errors . status = 404 raise error_handler ( request . errors )  else :          if <str> in key :              request . validated [ <str> ] = items  item = items [ - 1 ] request . validated [ <str> ] = item request . validated [ <str> ] = request . matchdict [ <str> ] item . __parent__ = parent return item   def handle_root ( request ) :      request . validated [ <str> ] = { } root = Root ( request ) if not request . matchdict or not request . matchdict . get ( <str> ) :          return root  request . validated [ <str> ] = request . matchdict [ <str> ] tender = request . tender tender . __parent__ = root request . validated [ <str> ] = request . validated [ <str> ] = tender request . validated [ <str> ] = tender . status if request . method != <str> :          request . validated [ <str> ] = tender . serialize ( <str> )   def bid_financial_documents_factory ( request ) :      response = handle_root ( request ) if response :          return response  tender = request . validated [ <str> ] if request . matchdict . get ( <str> ) :          bid = get_item ( tender , <str> , request ) if request . matchdict . get ( <str> ) :              return get_document ( bid , <str> , request )  else :              return bid    def bid_eligibility_documents_factory ( request ) :      response = handle_root ( request ) if response :          return response  tender = request . validated [ <str> ] if request . matchdict . get ( <str> ) :          bid = get_item ( tender , <str> , request ) if request . matchdict . get ( <str> ) :              return get_document ( bid , <str> , request )  else :              return bid    def bid_qualification_documents_factory ( request ) :      response = handle_root ( request ) if response :          return response  tender = request . validated [ <str> ] if request . matchdict . get ( <str> ) :          bid = get_item ( tender , <str> , request ) if request . matchdict . get ( <str> ) :              return get_document ( bid , <str> , request )  else :              return bid     