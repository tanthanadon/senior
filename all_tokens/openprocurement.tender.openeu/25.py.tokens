import unittest from openprocurement . api . tests . base import snitch from openprocurement . tender . belowthreshold . tests . complaint import TenderComplaintResourceTestMixin from openprocurement . tender . belowthreshold . tests . complaint_blanks import ( not_found , create_tender_complaint_document , ) from openprocurement . tender . openua . tests . complaint import TenderUAComplaintResourceTestMixin from openprocurement . tender . openua . tests . complaint_blanks import ( patch_tender_complaint_document , create_tender_lot_complaint , ) from openprocurement . tender . openeu . tests . complaint_blanks import ( put_tender_complaint_document , ) from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_bids , test_lots , ) class TenderComplaintResourceTest ( BaseTenderContentWebTest , TenderComplaintResourceTestMixin , TenderUAComplaintResourceTestMixin ) :      initial_auth = ( <str> , ( <str> , <str> ) ) test_author = test_bids [ 0 ] [ <str> ] [ 0 ]  class TenderLotAwardComplaintResourceTest ( BaseTenderContentWebTest ) :      initial_lots = test_lots test_author = test_bids [ 0 ] [ <str> ] [ 0 ] initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_complaint = snitch ( create_tender_lot_complaint )  class TenderComplaintDocumentResourceTest ( BaseTenderContentWebTest ) :      test_author = test_bids [ 0 ] [ <str> ] [ 0 ] initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderComplaintDocumentResourceTest , self ) . setUp ( ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_bids [ 0 ] [ <str> ] [ 0 ] } } ) complaint = response . json [ <str> ] self . complaint_id = complaint [ <str> ] self . complaint_owner_token = response . json [ <str> ] [ <str> ]  test_not_found = snitch ( not_found ) test_create_tender_complaint_document = snitch ( create_tender_complaint_document ) test_put_tender_complaint_document = snitch ( put_tender_complaint_document ) test_patch_tender_complaint_document = snitch ( patch_tender_complaint_document )  def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( TenderComplaintDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderComplaintResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   