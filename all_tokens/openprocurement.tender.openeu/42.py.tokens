from openprocurement . api . utils import raise_operation_error from openprocurement . tender . core . utils import ( optendersresource ) from openprocurement . tender . belowthreshold . views . cancellation import ( TenderCancellationResource as BaseResource ) from openprocurement . tender . openua . utils import add_next_award @ optendersresource ( name = <str> , collection_path = <str> , path = <str> , procurementMethodType = <str> , description = <str> ) class TenderCancellationResource ( BaseResource ) :      def cancel_tender ( self ) :          tender = self . request . validated [ <str> ] if tender . status in [ <str> ] :              tender . bids = [ ]  if tender . status in [ <str> , <str> , <str> ] :              [ setattr ( i , <str> , <str> ) for i in tender . bids if i . status in [ <str> , <str> ] ]  tender . status = <str>  def cancel_lot ( self , cancellation = None ) :          if not cancellation :              cancellation = self . context  tender = self . request . validated [ <str> ] [ setattr ( i , <str> , <str> ) for i in tender . lots if i . id == cancellation . relatedLot ] cancelled_lots = [ i . id for i in tender . lots if i . status == <str> ] cancelled_items = [ i . id for i in tender . items if i . relatedLot in cancelled_lots ] cancelled_features = [ i . code for i in ( tender . features or [ ] ) if i . featureOf == <str> and i . relatedItem in cancelled_lots or i . featureOf == <str> and i . relatedItem in cancelled_items ] if tender . status in [ <str> , <str> , <str> , <str> ] :              for bid in tender . bids :                  if tender . status == <str> :                      bid . documents = [ i for i in bid . documents if i . documentOf != <str> or i . relatedItem not in cancelled_lots ]  bid . financialDocuments = [ i for i in bid . financialDocuments if i . documentOf != <str> or i . relatedItem not in cancelled_lots ] bid . eligibilityDocuments = [ i for i in bid . eligibilityDocuments if i . documentOf != <str> or i . relatedItem not in cancelled_lots ] bid . qualificationDocuments = [ i for i in bid . qualificationDocuments if i . documentOf != <str> or i . relatedItem not in cancelled_lots ] bid . parameters = [ i for i in bid . parameters if i . code not in cancelled_features ] bid . lotValues = [ i for i in bid . lotValues if i . relatedLot not in cancelled_lots ] if not bid . lotValues and bid . status in [ <str> , <str> ] :                      bid . status = <str> if tender . status == <str> else <str>    for qualification in tender . qualifications :              if qualification . lotID in cancelled_lots :                  qualification . status = <str>   statuses = set ( [ lot . status for lot in tender . lots ] ) if statuses == set ( [ <str> ] ) :              self . cancel_tender ( )  elif not statuses . difference ( set ( [ <str> , <str> ] ) ) :              tender . status = <str>  elif not statuses . difference ( set ( [ <str> , <str> , <str> ] ) ) :              tender . status = <str>  if tender . status == <str> and all ( [ i . auctionPeriod and i . auctionPeriod . endDate for i in self . request . validated [ <str> ] . lots if i . status == <str> ] ) :              configurator = self . request . content_configurator add_next_award ( self . request , reverse = configurator . reverse_awarding_criteria , awarding_criteria_key = configurator . awarding_criteria_key )   def validate_cancellation ( self , operation ) :          if not super ( TenderCancellationResource , self ) . validate_cancellation ( operation ) :              return  tender = self . request . validated [ <str> ] cancellation = self . request . validated [ <str> ] if not cancellation . relatedLot and tender . lots :              active_lots = [ i . id for i in tender . lots if i . status == <str> ] statuses = [ set ( [ i . status for i in tender . awards or tender . qualifications if i . lotID == lot_id ] ) for lot_id in active_lots ] block_cancellation = any ( [ not i . difference ( set ( [ <str> , <str> ] ) ) if i else False for i in statuses ] )  elif cancellation . relatedLot and tender . lots or not cancellation . relatedLot and not tender . lots :              statuses = set ( [ i . status for i in tender . awards or tender . qualifications if i . lotID == cancellation . relatedLot ] ) block_cancellation = not statuses . difference ( set ( [ <str> , <str> ] ) ) if statuses else False  if block_cancellation :              raise_operation_error ( self . request , <str> . format ( operation , <str> if tender . awards else <str> ) )  return True    