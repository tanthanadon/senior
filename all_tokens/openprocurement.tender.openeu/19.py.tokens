import unittest from copy import deepcopy from openprocurement . api . tests . base import snitch from openprocurement . tender . belowthreshold . tests . base import test_organization from openprocurement . tender . belowthreshold . tests . contract import ( TenderContractResourceTestMixin , TenderContractDocumentResourceTestMixin ) from openprocurement . tender . openua . tests . contract_blanks import ( create_tender_contract , patch_tender_contract_datesigned , ) from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_tender_data , test_bids ) from openprocurement . tender . openeu . tests . contract_blanks import ( contract_termination , patch_tender_contract , ) class TenderContractResourceTest ( BaseTenderContentWebTest , TenderContractResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderContractResourceTest , self ) . setUp ( ) self . supplier_info = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ self . supplier_info ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : { <str> : 500 , <str> : <str> , <str> : True } , <str> : test_tender_data [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } )  test_contract_termination = snitch ( contract_termination ) test_create_tender_contract = snitch ( create_tender_contract ) test_patch_tender_contract_datesigned = snitch ( patch_tender_contract_datesigned ) test_patch_tender_contract = snitch ( patch_tender_contract )  class TenderContractDocumentResourceTest ( BaseTenderContentWebTest , TenderContractDocumentResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderContractDocumentResourceTest , self ) . setUp ( ) supplier_info = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ supplier_info ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . award_id } } ) contract = response . json [ <str> ] self . contract_id = contract [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) )   def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( TenderContractResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderContractDocumentResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   