from openprocurement . api . utils import get_now , raise_operation_error from openprocurement . api . validation import validate_data , OPERATIONS from openprocurement . tender . openeu . models import Qualification def validate_patch_qualification_data ( request ) :      return validate_data ( request , Qualification , True )  def validate_view_bids_in_active_tendering ( request ) :      if request . validated [ <str> ] == <str> :          raise_operation_error ( request , <str> . format ( <str> if request . matchdict . get ( <str> ) else <str> , request . validated [ <str> ] ) )   def validate_add_bid_document_not_in_allowed_status ( request ) :      if request . context . status in [ <str> , <str> , <str> ] :          raise_operation_error ( request , <str> . format ( request . context . status ) )   def validate_update_bid_document_confidentiality ( request ) :      if request . validated [ <str> ] != <str> and <str> in request . validated . get ( <str> , { } ) :          if request . context . confidentiality != request . validated [ <str> ] [ <str> ] :              raise_operation_error ( request , <str> . format ( request . validated [ <str> ] ) )    def validate_update_bid_document_not_in_allowed_status ( request ) :      bid = getattr ( request . context , <str> ) if bid and bid . status in [ <str> , <str> , <str> ] :          raise_operation_error ( request , <str> . format ( <str> if request . method == <str> else <str> , bid . status ) )   def validate_qualification_document_operation_not_in_allowed_status ( request ) :      if request . validated [ <str> ] != <str> :          raise_operation_error ( request , <str> . format ( OPERATIONS . get ( request . method ) , request . validated [ <str> ] ) )   def validate_qualification_document_operation_not_in_pending ( request ) :      qualification = request . validated [ <str> ] if qualification . status != <str> :          raise_operation_error ( request , <str> . format ( OPERATIONS . get ( request . method ) ) )   def validate_qualification_update_not_in_pre_qualification ( request ) :      tender = request . validated [ <str> ] if tender . status not in [ <str> ] :          raise_operation_error ( request , <str> . format ( tender . status ) )   def validate_cancelled_qualification_update ( request ) :      if request . context . status == <str> :          raise_operation_error ( request , <str> )   def validate_add_complaint_not_in_pre_qualification ( request ) :      tender = request . validated [ <str> ] if tender . status not in [ <str> ] :          raise_operation_error ( request , <str> . format ( tender . status ) )   def validate_update_complaint_not_in_pre_qualification ( request ) :      tender = request . validated [ <str> ] if tender . status not in [ <str> , <str> ] :          raise_operation_error ( request , <str> . format ( tender . status ) )   def validate_update_qualification_complaint_only_for_active_lots ( request ) :      tender = request . validated [ <str> ] if any ( [ i . status != <str> for i in tender . lots if i . id == request . validated [ <str> ] . lotID ] ) :          raise_operation_error ( request , <str> )   def validate_add_complaint_not_in_qualification_period ( request ) :      tender = request . validated [ <str> ] if tender . qualificationPeriod and ( tender . qualificationPeriod . startDate and tender . qualificationPeriod . startDate > get_now ( ) or tender . qualificationPeriod . endDate and tender . qualificationPeriod . endDate < get_now ( ) ) :          raise_operation_error ( request , <str> )    