from openprocurement . api . utils import ( json_view , context_unpack , APIResource , raise_operation_error ) from openprocurement . tender . core . utils import ( save_tender , apply_patch ) from openprocurement . tender . openeu . validation import ( validate_patch_qualification_data , validate_cancelled_qualification_update , validate_qualification_update_not_in_pre_qualification ) from openprocurement . tender . openeu . utils import ( qualifications_resource , prepare_qualifications ) @ qualifications_resource ( name = <str> , collection_path = <str> , path = <str> , procurementMethodType = <str> , description = <str> ) class TenderQualificationResource ( APIResource ) :      @ json_view ( permission = <str> ) def collection_get ( self ) :          return { <str> : [ i . serialize ( <str> ) for i in self . request . validated [ <str> ] . qualifications ] }  @ json_view ( permission = <str> ) def get ( self ) :          return { <str> : self . request . validated [ <str> ] . serialize ( <str> ) }  @ json_view ( content_type = <str> , validators = ( validate_patch_qualification_data , validate_qualification_update_not_in_pre_qualification , validate_cancelled_qualification_update ) , permission = <str> ) def patch ( self ) :          def set_bid_status ( tender , bid_id , status , lotId = None ) :              if lotId :                  for bid in tender . bids :                      if bid . id == bid_id :                          for lotValue in bid . lotValues :                              if lotValue . relatedLot == lotId :                                  lotValue . status = status if status in [ <str> , <str> ] :                                      bid . status = status  return bid      for bid in tender . bids :                  if bid . id == bid_id :                      bid . status = status return bid    tender = self . request . validated [ <str> ] prev_status = self . request . context . status apply_patch ( self . request , save = False , src = self . request . context . serialize ( ) ) if prev_status != <str> and self . request . context . status != <str> :              raise_operation_error ( self . request , <str> . format ( tender . status ) )  if self . request . context . status == <str> :              set_bid_status ( tender , self . request . context . bidID , <str> , self . request . context . lotID )  elif self . request . context . status == <str> :              set_bid_status ( tender , self . request . context . bidID , <str> , self . request . context . lotID )  elif self . request . context . status == <str> :              bid = set_bid_status ( tender , self . request . context . bidID , <str> , self . request . context . lotID ) ids = prepare_qualifications ( self . request , bids = [ bid ] , lotId = self . request . context . lotID ) self . request . response . headers [ <str> ] = self . request . route_url ( <str> . format ( tender . procurementMethodType ) , tender_id = tender . id , qualification_id = ids [ 0 ] )  if save_tender ( self . request ) :              self . LOGGER . info ( <str> . format ( self . request . context . id ) , extra = context_unpack ( self . request , { <str> : <str> } ) ) return { <str> : self . request . context . serialize ( <str> ) }     