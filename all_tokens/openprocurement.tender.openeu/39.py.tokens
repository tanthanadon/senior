def post_tender_qualifications ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { } } , status = 405 ) self . assertEqual ( response . status , <str> ) data = { <str> : <str> , <str> : <str> } response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 405 ) self . assertEqual ( response . status , <str> ) data = { <str> : <str> * 8 , <str> : <str> , <str> : <str> } response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 405 ) self . assertEqual ( response . status , <str> ) data = { <str> : <str> * 8 , <str> : <str> , <str> : <str> } response = self . app . post_json ( <str> . format ( self . tender_id , data [ <str> ] ) , { <str> : data } , status = 404 ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualifications = response . json [ <str> ] data = { <str> : <str> * 8 , <str> : <str> , <str> : qualifications [ 0 ] [ <str> ] } response = self . app . post_json ( <str> . format ( self . tender_id , qualifications [ 0 ] [ <str> ] ) , { <str> : data } , status = 405 ) self . assertEqual ( response . status , <str> )  def get_tender_qualifications_collection ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 2 ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualification_bid_ids = [ q [ <str> ] for q in qualifications ] for bid in response . json [ <str> ] :          self . assertIn ( bid [ <str> ] , qualification_bid_ids ) qualification_bid_ids . remove ( bid [ <str> ] )   def patch_tender_qualifications ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 2 ) q1_id = qualifications [ 0 ] [ <str> ] q2_id = qualifications [ 1 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , q1_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , True ) self . assertEqual ( response . json [ <str> ] [ <str> ] , True ) self . assertEqual ( response . json [ <str> ] [ <str> ] , qualifications [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , q1_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] , qualifications [ 0 ] [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for status in [ <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , q1_id , self . tender_token ) , { <str> : { <str> : status } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , q1_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for status in [ <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , q1_id , self . tender_token ) , { <str> : { <str> : status } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , q2_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for status in [ <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , q2_id , self . tender_token ) , { <str> : { <str> : status , <str> : True , <str> : True } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , q2_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 4 ) q1 = qualifications [ 0 ] q3 = qualifications [ 2 ] self . assertEqual ( q1 [ <str> ] , q3 [ <str> ] ) q2 = qualifications [ 1 ] q4 = qualifications [ 3 ] self . assertEqual ( q2 [ <str> ] , q4 [ <str> ] ) self . assertEqual ( q3 [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , q3 [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 5 ) self . assertEqual ( q3 [ <str> ] , qualifications [ 4 ] [ <str> ] ) for q_id in ( qualifications [ 3 ] [ <str> ] , qualifications [ 4 ] [ <str> ] ) :          response = self . app . patch_json ( <str> . format ( self . tender_id , q_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   def get_tender_qualifications ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          response = self . app . get ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) ) self . assertEqual ( response . status , <str> )   def patch_tender_qualifications_after_status_change ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def lot_patch_tender_qualifications ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 2 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 1 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 0 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def lot_get_tender_qualifications_collection ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 4 ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualification_lots_ids = [ q [ <str> ] for q in qualifications ] for bid in response . json [ <str> ] :          response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] , self . initial_bids_tokens [ bid [ <str> ] ] ) ) for lotV in response . json [ <str> ] [ <str> ] :              lot_id = lotV [ <str> ] self . assertIn ( lot_id , qualification_lots_ids ) qualification_lots_ids . remove ( lot_id )    def tender_qualification_cancelled ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] qualification_id = qualifications [ 0 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) new_qualifications = response . json [ <str> ] self . assertEqual ( len ( new_qualifications ) , 5 )  def not_found ( self ) :      response = self . app . post ( <str> , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def create_qualification_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 7 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] )  def put_qualification_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def patch_qualification_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> * 32 } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) for qualification in self . qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def create_qualification_document_after_status_change ( self ) :      response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 1 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 1 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 1 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 1 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) self . assertEqual ( response . status , <str> ) self . qualifications = response . json [ <str> ] self . assertEqual ( len ( self . qualifications ) , 3 ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 2 ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 2 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def put_qualification_document_after_status_change ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) doc_id = response . json [ <str> ] [ <str> ] for qualification in self . qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def create_qualification_document_bot ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) if self . docservice :          self . assertIn ( <str> , response . json [ <str> ] [ <str> ] ) self . assertIn ( <str> , response . json [ <str> ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] tender = self . db . get ( self . tender_id ) self . assertIn ( key , tender [ <str> ] [ - 1 ] [ <str> ] [ - 1 ] [ <str> ] ) self . assertIn ( <str> , tender [ <str> ] [ - 1 ] [ <str> ] [ - 1 ] [ <str> ] ) self . assertIn ( <str> , tender [ <str> ] [ - 1 ] [ <str> ] [ - 1 ] [ <str> ] ) self . assertNotIn ( <str> , tender [ <str> ] [ - 1 ] [ <str> ] [ - 1 ] [ <str> ] )   def patch_document_not_author ( self ) :      authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . app . authorization = authorization response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualifications [ 0 ] [ <str> ] , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_qualification_complaint_invalid ( self ) :      response = self . app . post_json ( <str> , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) request_path = <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) response = self . app . post ( request_path , <str> , status = 415 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( request_path , <str> , content_type = <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : { <str> : <str> } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : 0 } } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] , <str> : { <str> : [ <str> ] } , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : { <str> : <str> } } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] , <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] )  def create_tender_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . assertEqual ( complaint [ <str> ] [ <str> ] , self . initial_bids [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertIn ( <str> , complaint ) self . assertIn ( complaint [ <str> ] , response . headers [ <str> ] ) self . set_status ( <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . set_status ( <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def review_tender_qualification_complaint ( self ) :      for status in [ <str> , <str> , <str> , <str> ] :          self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> . format ( status ) , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( status ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) if status in [ <str> , <str> ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> . format ( status ) } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( status ) )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : status } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , status )   def review_tender_qualification_stopping_complaint ( self ) :      for status in [ <str> , <str> , <str> , <str> , <str> ] :          self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] url_patch_complaint = <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) response = self . app . patch_json ( <str> . format ( url_patch_complaint , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( url_patch_complaint , { <str> : { <str> : <str> , <str> : status , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , status ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   def review_tender_award_claim ( self ) :      for status in [ <str> , <str> , <str> ] :          self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] complaint_token = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : status , <str> : <str> . format ( status ) } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , status ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , complaint_token ) , { <str> : { <str> : <str> in status , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> in status )   def get_tender_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , complaint ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def get_tender_qualification_complaints ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] , complaint ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) tender = self . db . get ( self . tender_id ) tender [ <str> ] [ <str> ] = tender [ <str> ] [ <str> ] self . db . save ( tender ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def change_status_to_standstill_with_complaint ( self ) :      auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> . format ( <str> ) } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> . format ( <str> ) } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def create_tender_lot_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . assertEqual ( complaint [ <str> ] [ <str> ] , self . initial_bids [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertIn ( <str> , complaint ) self . assertIn ( complaint [ <str> ] , response . headers [ <str> ] ) self . set_status ( <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_lot_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . set_status ( <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def get_tender_lot_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , complaint ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def get_tender_lot_qualification_complaints ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] , complaint ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) tender = self . db . get ( self . tender_id ) tender [ <str> ] [ <str> ] = tender [ <str> ] [ <str> ] self . db . save ( tender ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_2lot_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . assertEqual ( complaint [ <str> ] [ <str> ] , self . initial_bids [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertIn ( <str> , complaint ) self . assertIn ( complaint [ <str> ] , response . headers [ <str> ] ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_2lot_qualification_complaint ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def change_status_to_standstill_with_complaint_cancel_lot ( self ) :      auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) self . set_status ( <str> , { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , self . after_qualification_switch_to )  def create_tender_qualification_claim ( self ) :          response = self . app . post_json ( <str> . format ( self . tender_id , self . unsuccessful_qualification_id , self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( <str> . format ( self . tender_id , self . unsuccessful_qualification_id , self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . unsuccessful_qualification_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def complaint_not_found ( self ) :      response = self . app . post ( <str> , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def create_tender_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 7 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . set_status ( <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def put_tender_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) self . set_status ( <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) self . set_status ( <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_2lot_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 7 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def put_tender_2lot_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_2lot_qualification_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . qualification_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def switch_bid_status_unsuccessul_to_active ( self ) :      bid_id , bid_token = self . initial_bids_tokens . items ( ) [ 0 ] response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 4 ) qualification_id = <str> for qualification in qualifications :          status = <str> if qualification [ <str> ] == bid_id :              status = <str> qualification_id = qualification [ <str> ]  response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : status , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , status )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) complaint = response . json [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) new_qualification_id = response . headers [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . patch_json ( <str> . format ( self . tender_id , new_qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) for b in response . json [ <str> ] :          self . assertEqual ( b [ <str> ] , <str> )    