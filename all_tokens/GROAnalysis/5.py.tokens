__author__ = <str> import matplotlib . pyplot as plt import matplotlib . colors as mcolors import numpy as np import os def make_colormap ( seq ) :      seq = [ ( None , ) * 3 , 0.0 ] + list ( seq ) + [ 1.0 , ( None , ) * 3 ] cdict = { <str> : [ ] , <str> : [ ] , <str> : [ ] } for i , item in enumerate ( seq ) :          if isinstance ( item , float ) :              r1 , g1 , b1 = seq [ i - 1 ] r2 , g2 , b2 = seq [ i + 1 ] cdict [ <str> ] . append ( [ item , r1 , r2 ] ) cdict [ <str> ] . append ( [ item , g1 , g2 ] ) cdict [ <str> ] . append ( [ item , b1 , b2 ] )   return mcolors . LinearSegmentedColormap ( <str> , cdict )  def run ( file1 , protein_sequences , TF1 , TF2 , figuredir ) :      d = dict ( ) d2 = dict ( ) sequences = dict ( ) with open ( protein_sequences ) as F :          for line in F :              line = line . strip ( ) . split ( ) protein = line [ 1 ] . split ( <str> ) [ 0 ] sequence = line [ - 2 ] if protein in sequences :                  print <str>  sequences [ protein ] = sequence   with open ( file1 ) as F :          F . readline ( ) F . readline ( ) for line in F :              line = line . strip ( ) . split ( ) key = line [ - 4 ] for TF in TF1 :                  if TF == key . split ( <str> ) [ 0 ] :                      print TF , line [ 3 ] + line [ 14 ] , line [ 1 ]   for TF in TF2 :                  if TF == key . split ( <str> ) [ 0 ] :                      print TF , line [ 3 ] + line [ 14 ] , line [ 1 ]     c = mcolors . ColorConverter ( ) . to_rgb rvb = make_colormap ( [ c ( <str> ) , c ( <str> ) , 0.5 , c ( <str> ) , c ( <str> ) , 1.0 , c ( <str> ) ] ) val = [ 1 for i in range ( len ( d ) + len ( d2 ) ) ] gap = 4 offset = 1.5 positions = [ i * gap for i in range ( - len ( d2 ) , len ( d ) + 1 ) ] positions . remove ( 0 ) x = list ( ) y = list ( ) colors = list ( ) F = plt . figure ( ) ax = F . add_subplot ( 111 ) ax . barh ( positions , val , align = <str> , height = 1 , color = <str> , fc = ( 1 , 1 , 1 , 0 ) ) labels = list ( ) i = len ( d ) fontsize = 8 for TF in TF1 :          if TF in d :              labels . append ( TF ) ax . text ( 0 , i * gap - offset , <str> , fontsize = 10 ) ax . text ( 1 , i * gap - offset , str ( len ( d [ TF ] [ 0 ] [ 2 ] ) ) , fontsize = 10 ) for val , p , seq , a in d [ TF ] :                  for pos in p :                      pos = int ( pos ) pos = float ( pos ) length = float ( len ( seq ) ) x . append ( pos / length ) y . append ( i * gap ) colors . append ( val ) if 0.75 > val or val > 1.25 :                          if TF == <str> :                              print a + str ( int ( pos ) ) if a + str ( int ( pos ) ) == <str> :                                  ax . text ( pos / length - 0.01 , i * gap + 1.7 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  elif a + str ( int ( pos ) ) == <str> :                                  ax . text ( pos / length - 0.01 , i * gap + 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  else :                                  ax . text ( pos / length - 0.01 , i * gap + 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )   elif TF == <str> :                              if a + str ( int ( pos ) ) == <str> :                                  ax . text ( pos / length - 0.01 , i * gap + 1.7 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  elif a + str ( int ( pos ) ) == <str> :                                  ax . text ( pos / length - 0.01 , i * gap + 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  else :                                  ax . text ( pos / length - 0.01 , i * gap + 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )   else :                              ax . text ( pos / length - 0.01 , i * gap + 1 , a + str ( int ( pos ) ) , fontsize = fontsize )     i = i - 1   i = - 1 for TF in TF2 :          if TF in d2 :              labels . append ( TF ) ax . text ( 0 , i * gap - offset , <str> , fontsize = 10 ) ax . text ( 1 , i * gap - offset , str ( len ( d2 [ TF ] [ 0 ] [ 2 ] ) ) , fontsize = 10 ) boolean = True for val , p , seq , a in d2 [ TF ] :                  for pos in p :                      pos = int ( pos ) pos = float ( pos ) length = float ( len ( seq ) ) x . append ( pos / length ) y . append ( i * gap ) colors . append ( val ) if 0.75 > val or val > 1.25 :                          if TF == <str> :                              if seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) == <str> :                                  if boolean :                                      ax . text ( pos / length - 0.03 , i * gap + 1.5 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  boolean = False  elif seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) == <str> :                                  ax . text ( pos / length - 0.03 , i * gap - 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )  else :                                  ax . text ( pos / length - 0.03 , i * gap + 1 , seq [ int ( pos ) - 1 ] + str ( int ( pos ) ) , fontsize = fontsize )   else :                              ax . text ( pos / length - 0.01 , i * gap + 1 , a + str ( int ( pos ) ) , fontsize = fontsize )     i = i - 1   plt . scatter ( x , y , zorder = 1 , s = 60 , edgecolor = <str> , c = colors , cmap = rvb , vmin = 0.5 , vmax = 1.5 , alpha = 0.7 ) ax . set_title ( <str> ) ax . set_xlabel ( <str> ) plt . yticks ( positions , list ( reversed ( labels ) ) ) ax . set_xticks ( [ ] ) ax . set_xlim ( [ - 0.1 , 1.1 ] ) ax . set_ylim ( [ min ( positions ) - gap , max ( positions ) + gap ] ) plt . colorbar ( )  def find_connectors ( folder , file2 ) :      outfile = open ( folder + <str> , <str> ) d = dict ( ) for file1 in os . listdir ( folder ) :          if <str> in file1 and ( <str> in file1 or <str> in file1 ) :              key = file1 . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] d [ key ] = list ( ) with open ( folder + file1 ) as F :                  for line in F :                      line = line . strip ( ) . split ( ) if key in line [ 0 ] :                          d [ key ] . append ( line [ 1 ] )  elif key in line [ 1 ] :                          d [ key ] . append ( line [ 0 ] )      print d [ <str> ] print d [ <str> ] d2 = dict ( ) with open ( file2 ) as F :          F . readline ( ) F . readline ( ) for line in F :              line = line . strip ( ) . split ( ) phosphopeptide = line [ - 4 ] . split ( <str> ) [ 0 ] for TF in d :                  for protein in d [ TF ] :                      if phosphopeptide == protein and float ( line [ 1 ] ) < 1 :                          if <str> not in d2 :                              d2 [ <str> ] = list ( )  if protein not in d2 :                              d2 [ protein ] = list ( )  if protein in d2 [ <str> ] :                              index = d2 [ <str> ] . index ( protein ) + 1 if float ( d2 [ <str> ] [ index ] ) > float ( line [ 1 ] ) :                                  d2 [ <str> ] [ index ] = line [ 1 ]   else :                              d2 [ <str> ] . append ( protein ) d2 [ <str> ] . append ( line [ 1 ] )  d2 [ protein ] . append ( TF )      for source in d2 :          if source == <str> :              for i in range ( 0 , len ( d2 [ source ] ) , 2 ) :                  outfile . write ( source + <str> + d2 [ source ] [ i ] + <str> + d2 [ source ] [ i + 1 ] + <str> )   elif len ( d2 [ source ] ) > 0 :              d2 [ source ] = list ( set ( d2 [ source ] ) ) for target in d2 [ source ] :                  outfile . write ( source + <str> + target + <str> + <str> + <str> )     if __name__ == <str> :      file1 = <str> protein_sequences = <str> TF1 = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] TF2 = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] figuredir = <str> run ( file1 , protein_sequences , TF1 , TF2 , figuredir )   