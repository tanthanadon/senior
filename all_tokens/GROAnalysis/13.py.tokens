__author__ = <str> import matplotlib . pyplot as plt import matplotlib . patches as mpatches import numpy as np import math def setBoxColors ( bp ) :      for box in bp [ <str> ] :          box . set ( color = <str> , linewidth = 2 ) box . set ( facecolor = <str> )  for whisker in bp [ <str> ] :          whisker . set ( color = <str> , linewidth = 2 )  for cap in bp [ <str> ] :          cap . set ( color = <str> , linewidth = 2 )  for median in bp [ <str> ] :          median . set ( color = <str> , linewidth = 2 )  for flier in bp [ <str> ] :          flier . set ( marker = <str> , color = <str> , alpha = 0.5 )   def run ( countsfile , savedir , genes ) :      with open ( countsfile ) as F :          samples = F . readline ( ) . strip ( <str> ) . split ( <str> ) [ 6 : ] factornorm = [ 0 ] * len ( samples ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) [ 6 : ] for i in range ( len ( line ) ) :                  factornorm [ i ] += float ( line [ i ] )    print factornorm factornorm = [ factornorm [ 0 ] / factornorm [ i ] for i in range ( len ( factornorm ) ) ] print factornorm with open ( countsfile ) as F :          F . readline ( ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) gene = line [ 3 ] . split ( <str> ) [ 1 ] if gene in genes :                  print gene vals = [ a * b for a , b in zip ( [ float ( i ) for i in line [ 6 : ] ] , factornorm ) ] fc = [ i / ( ( vals [ 2 ] + vals [ 3 ] ) / 2 ) for i in vals ] print fc ind = np . arange ( len ( fc ) ) F = plt . figure ( ) ax = F . add_subplot ( 111 ) ax . bar ( ind , fc , 0.3 ) plt . savefig ( savedir + gene + <str> )     def make_boxplots ( countsfile , savedir , genelist ) :      with open ( countsfile ) as F :          samples = F . readline ( ) . strip ( <str> ) . split ( <str> ) [ 6 : ] factornorm = [ 0 ] * len ( samples ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) [ 6 : ] for i in range ( len ( line ) ) :                  factornorm [ i ] += float ( line [ i ] )    factornorm = [ factornorm [ 0 ] / factornorm [ i ] for i in range ( len ( factornorm ) ) ] peptide = list ( ) water = list ( ) with open ( countsfile ) as F :          F . readline ( ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) gene = line [ 3 ] . split ( <str> ) [ 1 ] if gene in genelist :                  try :                      vals = [ a * b for a , b in zip ( [ float ( i ) for i in line [ 6 : ] ] , factornorm ) ] fc = [ math . log ( i / ( ( vals [ 2 ] + vals [ 3 ] ) / 2 ) , 2 ) for i in vals ] water . append ( fc [ - 1 ] ) water . append ( fc [ - 2 ] ) peptide . append ( fc [ - 3 ] ) peptide . append ( fc [ - 4 ] )  except :                      pass     F = plt . figure ( ) ax = F . add_subplot ( 111 ) ax . set_title ( <str> ) ax . set_ylabel ( <str> ) ax . get_xaxis ( ) . tick_bottom ( ) ax . get_yaxis ( ) . tick_left ( ) ax . axhline ( 0 , color = <str> , alpha = 0.5 ) ax . set_axisbelow ( True ) bp = ax . boxplot ( water , positions = [ 1 ] , patch_artist = True ) setBoxColors ( bp ) bp2 = ax . boxplot ( peptide , positions = [ 3 ] , patch_artist = True ) setBoxColors ( bp2 ) ax . set_xlim ( [ 0 , 4 ] ) plt . xticks ( [ 1 , 3 ] , [ <str> , <str> ] ) F . savefig ( savedir + <str> , dpi = 1200 ) F . savefig ( savedir + <str> )  def make_MA_plot ( countsfile , savedir , name_order , condition1 , condition2 ) :      with open ( countsfile ) as F :          samples = F . readline ( ) . strip ( <str> ) . split ( <str> ) [ 6 : ] factornorm = [ 0 ] * len ( samples ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) [ 6 : ] for i in range ( len ( line ) ) :                  factornorm [ i ] += float ( line [ i ] )    factornorm = [ factornorm [ 0 ] / factornorm [ i ] for i in range ( len ( factornorm ) ) ] x = list ( ) y = list ( ) index1 = name_order . index ( condition1 ) index2 = name_order . index ( condition2 ) with open ( countsfile ) as F :          F . readline ( ) for line in F :              line = line . strip ( <str> ) . split ( <str> ) gene = line [ 3 ] . split ( <str> ) [ 1 ] vals = [ a * b for a , b in zip ( [ float ( i ) for i in line [ 6 : ] ] , factornorm ) ] val1 = vals [ index1 ] val2 = vals [ index2 ] try :                  x . append ( math . log ( ( val1 + val2 ) / 2 , 10 ) )  except :                  x . append ( 0 )  try :                  y . append ( math . log ( val1 / val2 , 2 ) )  except :                  y . append ( 0 )    F = plt . figure ( ) ax = F . add_subplot ( 111 ) plt . scatter ( x , y , edgecolor = <str> , s = 14 , alpha = 0.5 ) ax . set_title ( <str> + condition1 + <str> + condition2 ) ax . set_ylabel ( <str> + condition1 + <str> + condition2 + <str> ) ax . set_xlabel ( <str> ) ax . get_xaxis ( ) . tick_bottom ( ) ax . get_yaxis ( ) . tick_left ( ) plt . savefig ( savedir + <str> + condition1 + <str> + condition2 + <str> , dpi = 1200 )  if __name__ == <str> :      countsfile = <str> savedir = <str> genelistrep1 = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] name_order = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] condition1 = <str> condition2 = <str> genelistrep1and2 = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] print len ( genelistrep1and2 ) normalized_countsfile = <str> allen2014genelist = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] print len ( allen2014genelist )   