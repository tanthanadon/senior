from Tkinter import * from ttk import Entry , Button , OptionMenu from PIL import Image , ImageTk from time import sleep import random import tkFileDialog import os class Tiles ( ) :      def __init__ ( self , grid ) :          self . tiles = [ ] self . grid = grid self . gap = None self . moves = 0  def add ( self , tile ) :          self . tiles . append ( tile )  def getTile ( self , * pos ) :          print <str> for tile in self . tiles :              if tile . pos == pos :                  return tile    def getTileAroundGap ( self ) :          print <str> gRow , gCol = self . gap . pos return self . getTile ( gRow , gCol - 1 ) , self . getTile ( gRow - 1 , gCol ) , self . getTile ( gRow , gCol + 1 ) , self . getTile ( gRow + 1 , gCol )  def changeGap ( self , tile ) :          print <str> try :              gPos = self . gap . pos self . gap . pos = tile . pos tile . pos = gPos self . moves += 1  except :              pass   def slide ( self , key ) :          print <str> left , top , right , down = self . getTileAroundGap ( ) if key == <str> :              self . changeGap ( down )  if key == <str> :              self . changeGap ( top )  if key == <str> :              self . changeGap ( right )  if key == <str> :              self . changeGap ( left )  self . show ( )  def shuffle ( self ) :          print <str> i = 0 for row in range ( self . grid ) :              for col in range ( self . grid ) :                  self . tiles [ i ] . pos = ( row , col ) i += 1    def show ( self ) :          print <str> for tile in self . tiles :              if self . gap != tile :                  tile . show ( )    def setGap ( self , index ) :          print <str> self . gap = self . tiles [ index ]  def isCorrect ( self ) :          print <str> for tile in self . tiles :              if not tile . isCorrectPos ( ) :                  return False   return True   class Tile ( Label ) :      def __init__ ( self , parent , image , pos ) :          Label . __init__ ( self , parent , image = image ) self . image = image self . pos = pos self . curPos = pos  def show ( self ) :          self . grid ( row = self . pos [ 0 ] , column = self . pos [ 1 ] )  def isCorrectPos ( self ) :          return self . pos == self . curPos   class Board ( Frame ) :      MAX_BOARD_SIZE = 500 def __init__ ( self , parent , image , grid , win , * args , ** kwargs ) :          Frame . __init__ ( self , parent , * args , ** kwargs ) self . parent = parent self . grid = grid self . win = win self . image = self . openImage ( image ) self . tileSize = self . image . size [ 0 ] / self . grid self . tiles = self . createTiles ( ) self . tiles . shuffle ( ) self . tiles . show ( ) self . bindKeys ( )  def openImage ( self , image ) :          print <str> image = Image . open ( image ) imageSize = min ( image . size ) if imageSize > self . MAX_BOARD_SIZE :              image = image . resize ( ( self . MAX_BOARD_SIZE , self . MAX_BOARD_SIZE ) , Image . ANTIALIAS )  if image . size [ 0 ] != image . size [ 1 ] :              image = image . crop ( ( 0 , 0 , image . size [ 0 ] , image . size [ 0 ] ) )  return image  def bindKeys ( self ) :          print <str> self . bind_all ( <str> , self . slide ) self . bind_all ( <str> , self . slide ) self . bind_all ( <str> , self . slide ) self . bind_all ( <str> , self . slide )  def slide ( self , event ) :          print <str> self . tiles . slide ( event . keysym ) if self . tiles . isCorrect ( ) :              self . win ( self . tiles . moves )   def createTiles ( self ) :          print <str> tiles = Tiles ( self . grid ) for row in range ( self . grid ) :              for col in range ( self . grid ) :                  x0 = col * self . tileSize y0 = row * self . tileSize x1 = x0 + self . tileSize y1 = y0 + self . tileSize tileImage = ImageTk . PhotoImage ( self . image . crop ( ( x0 , y0 , x1 , y1 ) ) ) tile = Tile ( self , tileImage , ( row , col ) ) tiles . add ( tile )   tiles . setGap ( - 1 ) return tiles   class Main ( ) :      def __init__ ( self , parent ) :          self . parent = parent self . image = StringVar ( ) self . winText = StringVar ( ) self . grid = IntVar ( ) self . createWidgets ( )  def createWidgets ( self ) :          print <str> self . mainFrame = Frame ( self . parent ) Label ( self . mainFrame , text = <str> , font = ( <str> , 50 ) ) . pack ( padx = 10 , pady = 10 ) frame = Frame ( self . mainFrame ) Label ( frame , text = <str> ) . grid ( sticky = W ) Entry ( frame , textvariable = self . image , width = 50 ) . grid ( row = 0 , column = 1 , padx = 10 , pady = 10 ) Button ( frame , text = <str> , command = self . browse ) . grid ( row = 0 , column = 2 , pady = 10 , padx = 10 ) Label ( frame , text = <str> ) . grid ( sticky = W ) OptionMenu ( frame , self . grid , * [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) . grid ( row = 1 , column = 1 , padx = 10 , pady = 10 , sticky = W ) frame . pack ( padx = 10 , pady = 10 ) Button ( self . mainFrame , text = <str> , command = self . start ) . pack ( padx = 10 , pady = 10 ) self . mainFrame . pack ( ) self . board = Frame ( self . parent ) self . winframe = Frame ( self . parent ) Label ( self . winframe , textvariable = self . winText , font = ( <str> , 50 ) ) . pack ( padx = 10 , pady = 10 ) Button ( self . winframe , text = <str> , command = self . playAgain ) . pack ( padx = 10 , pady = 10 )  def start ( self ) :          print <str> image = self . image . get ( ) grid = self . grid . get ( ) if os . path . exists ( image ) :              self . board = Board ( self . parent , image , grid , self . win ) self . mainFrame . pack_forget ( ) self . board . pack ( )   def browse ( self ) :          print <str> self . image . set ( tkFileDialog . askopenfilename ( title = <str> , filetypes = ( ( <str> , <str> ) , ( <str> , <str> ) ) ) )  def win ( self , moves ) :          print <str> self . board . pack_forget ( ) self . winText . set ( <str> . format ( moves ) ) self . winframe . pack ( )  def playAgain ( self ) :          print <str> self . winframe . pack_forget ( ) self . mainFrame . pack ( )   if __name__ == <str> :      root = Tk ( ) Main ( root ) root . mainloop ( )   