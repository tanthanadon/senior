from evdev import InputDevice , ecodes , UInput , list_devices , AbsInfo from pymouse import PyMouse import datetime class TrackedEvent ( object ) : 	 def __init__ ( self ) : 		 self . position = { <str> : None , <str> : None } self . slots = [ ] self . fingers = 0 self . total_event_fingers = 0 self . discard = 0 self . moved = 0 self . track_start = None self . click_delay = 1.1  def add_finger ( self , slot ) : 		 if slot not in self . slots : 			 self . fingers += 1 self . slots . append ( slot )  if self . total_event_fingers < self . fingers : 			 self . total_event_fingers = self . fingers   def remove_fingers ( self ) : 		 if self . total_event_fingers == self . fingers : 			 if self . total_event_fingers == 0 : 				 self . total_event_fingers = 1  print ( <str> , self . total_event_fingers )  self . fingers -= 1 if ( self . fingers == 0 and self . total_event_fingers == 2 and self . moved == 0 ) : 			 self . _initiate_right_click ( )  elif ( ( self . fingers == 0 or self . fingers == - 1 ) and self . total_event_fingers == 1 and self . moved == 0 ) : 			 self . _internal_timing ( )  if self . fingers == 0 or self . fingers == - 1 : 			 self . discard = 1   def position_event ( self , event_code , value ) : 		 if self . position [ event_code ] is None : 			 self . position [ event_code ] = value  else : 			 old = self . position [ event_code ] new = value diff = old - new if abs ( diff ) > 50 : 				 self . _moved_event ( ) print ( <str> )    def trackit ( self ) : 		 self . track_start = datetime . datetime . now ( )  def _moved_event ( self ) : 		 self . moved = 1  def _internal_timing ( self ) : 		 if self . track_start is not None : 			 elapsed = datetime . datetime . now ( ) - self . track_start if elapsed . total_seconds ( ) >= self . click_delay : 				 self . _initiate_right_click ( )    def _initiate_right_click ( self ) : 		 m = PyMouse ( ) x , y = m . position ( ) m . click ( x , y , 2 ) print ( <str> , x , y , <str> )   def initiate_gesture_find ( ) : 	 for device in list_devices ( ) : 		 dev = InputDevice ( device ) if ( dev . name == <str> ) or ( dev . name == <str> ) : 			 break   codes = dev . capabilities ( ) Abs_events = { } for code in codes : 		 if code == 3 : 			 for type_code in codes [ code ] : 				 Abs_events [ type_code [ 0 ] ] = ecodes . ABS [ type_code [ 0 ] ]    MT_event = None for event in dev . read_loop ( ) : 		 if MT_event : 			 if MT_event . discard == 1 : 				 MT_event = None   if event . type == ecodes . EV_ABS : 			 if MT_event is None : 				 MT_event = TrackedEvent ( )  event_code = Abs_events [ event . code ] if event_code == <str> : 				 MT_event . add_finger ( event . value )  elif event_code == <str> or event_code == <str> : 				 MT_event . position_event ( event_code , event . value )  elif event_code == <str> : 				 if event . value == - 1 : 					 MT_event . remove_fingers ( )  else : 					 MT_event . trackit ( )      if __name__ == <str> : 	 initiate_gesture_find ( )   