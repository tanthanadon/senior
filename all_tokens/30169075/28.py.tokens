from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals import math from PIL import Image , ImageOps class EscposImage ( object ) :      def __init__ ( self , img_source ) :          if isinstance ( img_source , Image . Image ) :              img_original = img_source  else :              img_original = Image . open ( img_source )  self . img_original = img_original img_original = img_original . convert ( <str> ) im = Image . new ( <str> , img_original . size , ( 255 , 255 , 255 ) ) im . paste ( img_original , mask = img_original . split ( ) [ 3 ] ) im = im . convert ( <str> ) im = ImageOps . invert ( im ) self . _im = im . convert ( <str> )  @ property def width ( self ) :          width_pixels , _ = self . _im . size return width_pixels  @ property def width_bytes ( self ) :          return ( self . width + 7 ) >> 3  @ property def height ( self ) :          _ , height_pixels = self . _im . size return height_pixels  def to_column_format ( self , high_density_vertical = True ) :          im = self . _im . transpose ( Image . ROTATE_270 ) . transpose ( Image . FLIP_LEFT_RIGHT ) line_height = 24 if high_density_vertical else 8 width_pixels , height_pixels = im . size top = 0 left = 0 while left < width_pixels :              box = ( left , top , left + line_height , top + height_pixels ) im_slice = im . transform ( ( line_height , height_pixels ) , Image . EXTENT , box ) im_bytes = im_slice . tobytes ( ) yield ( im_bytes ) left += line_height   def to_raster_format ( self ) :          return self . _im . tobytes ( )  def split ( self , fragment_height ) :          passes = int ( math . ceil ( self . height / fragment_height ) ) fragments = [ ] for n in range ( 0 , passes ) :              left = 0 right = self . width upper = n * fragment_height lower = min ( ( n + 1 ) * fragment_height , self . height ) box = ( left , upper , right , lower ) fragments . append ( self . img_original . crop ( box ) )  return fragments  def center ( self , max_width ) :          old_width , height = self . _im . size new_size = ( max_width , height ) new_im = Image . new ( <str> , new_size ) paste_x = int ( ( max_width - old_width ) / 2 ) new_im . paste ( self . _im , ( paste_x , 0 ) ) self . _im = new_im    