from __future__ import absolute_import , division , print_function , unicode_literals import serial import socket import usb . core import usb . util from . escpos import Escpos from . exceptions import USBNotFoundError class Usb ( Escpos ) :      def __init__ ( self , idVendor , idProduct , usb_args = None , timeout = 0 , in_ep = 0x82 , out_ep = 0x01 , * args , ** kwargs ) :          Escpos . __init__ ( self , * args , ** kwargs ) self . timeout = timeout self . in_ep = in_ep self . out_ep = out_ep usb_args = usb_args or { } if idVendor :              usb_args [ <str> ] = idVendor  if idProduct :              usb_args [ <str> ] = idProduct  self . open ( usb_args )  def open ( self , usb_args ) :          self . device = usb . core . find ( ** usb_args ) if self . device is None :              raise USBNotFoundError ( <str> )  self . idVendor = self . device . idVendor self . idProduct = self . device . idProduct if self . device . backend . __module__ . endswith ( <str> ) :              check_driver = None try :                  check_driver = self . device . is_kernel_driver_active ( 0 )  except NotImplementedError :                  pass  if check_driver is None or check_driver :                  try :                      self . device . detach_kernel_driver ( 0 )  except NotImplementedError :                      pass  except usb . core . USBError as e :                      if check_driver is not None :                          print ( <str> . format ( str ( e ) ) )     try :              self . device . set_configuration ( ) self . device . reset ( )  except usb . core . USBError as e :              print ( <str> . format ( str ( e ) ) )   def _raw ( self , msg ) :          self . device . write ( self . out_ep , msg , self . timeout )  def _read ( self ) :          return self . device . read ( self . in_ep , 16 )  def close ( self ) :          if self . device :              usb . util . dispose_resources ( self . device )  self . device = None   class Serial ( Escpos ) :      def __init__ ( self , devfile = <str> , baudrate = 9600 , bytesize = 8 , timeout = 1 , parity = serial . PARITY_NONE , stopbits = serial . STOPBITS_ONE , xonxoff = False , dsrdtr = True , * args , ** kwargs ) :          Escpos . __init__ ( self , * args , ** kwargs ) self . devfile = devfile self . baudrate = baudrate self . bytesize = bytesize self . timeout = timeout self . parity = parity self . stopbits = stopbits self . xonxoff = xonxoff self . dsrdtr = dsrdtr self . open ( )  def open ( self ) :          if self . device is not None and self . device . is_open :              self . close ( )  self . device = serial . Serial ( port = self . devfile , baudrate = self . baudrate , bytesize = self . bytesize , parity = self . parity , stopbits = self . stopbits , timeout = self . timeout , xonxoff = self . xonxoff , dsrdtr = self . dsrdtr ) if self . device is not None :              print ( <str> )  else :              print ( <str> . format ( str ( self . devfile ) ) )   def _raw ( self , msg ) :          self . device . write ( msg )  def _read ( self ) :          return self . device . read ( 16 )  def close ( self ) :          if self . device is not None and self . device . is_open :              self . device . flush ( ) self . device . close ( )    class Network ( Escpos ) :      def __init__ ( self , host , port = 9100 , timeout = 60 , * args , ** kwargs ) :          Escpos . __init__ ( self , * args , ** kwargs ) self . host = host self . port = port self . timeout = timeout self . open ( )  def open ( self ) :          self . device = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . device . settimeout ( self . timeout ) self . device . connect ( ( self . host , self . port ) ) if self . device is None :              print ( <str> . format ( self . host ) )   def _raw ( self , msg ) :          self . device . sendall ( msg )  def _read ( self ) :          return self . device . recv ( 16 )  def close ( self ) :          if self . device is not None :              self . device . shutdown ( socket . SHUT_RDWR ) self . device . close ( )    class File ( Escpos ) :      def __init__ ( self , devfile = <str> , auto_flush = True , * args , ** kwargs ) :          Escpos . __init__ ( self , * args , ** kwargs ) self . devfile = devfile self . auto_flush = auto_flush self . open ( )  def open ( self ) :          self . device = open ( self . devfile , <str> ) if self . device is None :              print ( <str> . format ( self . devfile ) )   def flush ( self ) :          self . device . flush ( )  def _raw ( self , msg ) :          self . device . write ( msg ) if self . auto_flush :              self . flush ( )   def close ( self ) :          if self . device is not None :              self . device . flush ( ) self . device . close ( )    class Dummy ( Escpos ) :      def __init__ ( self , * args , ** kwargs ) :          Escpos . __init__ ( self , * args , ** kwargs ) self . _output_list = [ ]  def _raw ( self , msg ) :          self . _output_list . append ( msg )  @ property def output ( self ) :          return <str> . join ( self . _output_list )  def clear ( self ) :          del self . _output_list [ : ]  def close ( self ) :          pass   _WIN32PRINT = False try :      import win32print _WIN32PRINT = True  except ImportError :      pass  if _WIN32PRINT :      class Win32Raw ( Escpos ) :          def __init__ ( self , printer_name = None , * args , ** kwargs ) :              Escpos . __init__ ( self , * args , ** kwargs ) if printer_name is not None :                  self . printer_name = printer_name  else :                  self . printer_name = win32print . GetDefaultPrinter ( )  self . hPrinter = None  def open ( self , job_name = <str> ) :              if self . printer_name is None :                  raise Exception ( <str> )  self . hPrinter = win32print . OpenPrinter ( self . printer_name ) self . current_job = win32print . StartDocPrinter ( self . hPrinter , 1 , ( job_name , None , <str> ) ) win32print . StartPagePrinter ( self . hPrinter )  def close ( self ) :              if not self . hPrinter :                  return  win32print . EndPagePrinter ( self . hPrinter ) win32print . EndDocPrinter ( self . hPrinter ) win32print . ClosePrinter ( self . hPrinter ) self . hPrinter = None  def _raw ( self , msg ) :              if self . printer_name is None :                  raise Exception ( <str> )  if self . hPrinter is None :                  raise Exception ( <str> )  win32print . WritePrinter ( self . hPrinter , msg )     