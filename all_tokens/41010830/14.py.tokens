import unittest from oandapyV20 . endpoints . decorators import extendargs , abstractclass from abc import ABCMeta , abstractmethod import six class TestDecorators ( unittest . TestCase ) :      def test__extendargs ( self ) :          class Something ( object ) :              def __init__ ( self , x = 10 ) :                  self . x = x   @ extendargs ( <str> ) class SomethingExtra ( Something ) :              def add ( self ) :                  return self . x + self . y   tst = SomethingExtra ( x = 10 , y = 20 ) self . assertEqual ( tst . add ( ) , 30 )  def test__abstractclass ( self ) :          @ six . add_metaclass ( ABCMeta ) class Something ( object ) :              @ abstractmethod def __init__ ( self , x = 10 ) :                  self . x = x   @ abstractclass class SomethingElse ( Something ) :              def __init__ ( self , x = 10 , y = 20 ) :                  super ( SomethingElse , self ) . __init__ ( x ) self . y = y   class ABCDerived ( SomethingElse ) :              pass  with self . assertRaises ( TypeError ) :              Something ( x = 20 )  with self . assertRaises ( TypeError ) :              SomethingElse ( x = 20 , y = 30 )  x = 20 y = 30 abcDerived = ABCDerived ( x , y ) self . assertEqual ( abcDerived . x + abcDerived . y , x + y )   if __name__ == <str> :      unittest . main ( )   