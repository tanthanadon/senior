from datetime import datetime import calendar import logging import oandapyV20 . endpoints . instruments as instruments from oandapyV20 . contrib . generic import granularity_to_time , secs2time logger = logging . getLogger ( __name__ ) MAX_BATCH = 5000 DEFAULT_BATCH = 500 def InstrumentsCandlesFactory ( instrument , params = None ) :      RFC3339 = <str> gs = granularity_to_time ( params . get ( <str> , <str> ) ) _from = None _epoch_from = None if <str> in params :          _from = datetime . strptime ( params . get ( <str> ) , RFC3339 ) _epoch_from = int ( calendar . timegm ( _from . timetuple ( ) ) )  _to = datetime . utcnow ( ) if <str> in params :          _tmp = datetime . strptime ( params . get ( <str> ) , RFC3339 ) if _tmp > _to :              logger . info ( <str> , params . get ( <str> ) )  else :              _to = _tmp   _epoch_to = int ( calendar . timegm ( _to . timetuple ( ) ) ) _count = params . get ( <str> , DEFAULT_BATCH ) if <str> in params and <str> not in params :          raise ValueError ( <str> )  if not params or <str> not in params :          yield instruments . InstrumentsCandles ( instrument = instrument , params = params )  else :          delta = _epoch_to - _epoch_from nbars = delta / gs cpparams = params . copy ( ) for k in [ <str> , <str> , <str> ] :              if k in cpparams :                  del cpparams [ k ]   cpparams . update ( { <str> : True } ) for _ in range ( _count , int ( ( ( nbars // _count ) + 1 ) ) * _count + 1 , _count ) :              to = _epoch_from + _count * gs if to > _epoch_to :                  to = _epoch_to  yparams = cpparams . copy ( ) yparams . update ( { <str> : secs2time ( _epoch_from ) . strftime ( RFC3339 ) } ) yparams . update ( { <str> : secs2time ( to ) . strftime ( RFC3339 ) } ) yield instruments . InstrumentsCandles ( instrument = instrument , params = yparams ) _epoch_from = to     