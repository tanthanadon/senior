from . apirequest import APIRequest from . decorators import dyndoc_insert , endpoint from . responses . accounts import responses from abc import abstractmethod class Accounts ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self , accountID = None ) :          endpoint = self . ENDPOINT . format ( accountID = accountID ) super ( Accounts , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class AccountList ( Accounts ) :      @ dyndoc_insert ( responses ) def __init__ ( self ) :          super ( AccountList , self ) . __init__ ( )   @ endpoint ( <str> ) class AccountDetails ( Accounts ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID ) :          super ( AccountDetails , self ) . __init__ ( accountID )   @ endpoint ( <str> ) class AccountSummary ( Accounts ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID ) :          super ( AccountSummary , self ) . __init__ ( accountID )   @ endpoint ( <str> ) class AccountInstruments ( Accounts ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( AccountInstruments , self ) . __init__ ( accountID ) self . params = params   @ endpoint ( <str> , <str> ) class AccountConfiguration ( Accounts ) :      HEADERS = { <str> : <str> } @ dyndoc_insert ( responses ) def __init__ ( self , accountID , data ) :          super ( AccountConfiguration , self ) . __init__ ( accountID ) self . data = data   @ endpoint ( <str> ) class AccountChanges ( Accounts ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( AccountChanges , self ) . __init__ ( accountID ) self . params = params    