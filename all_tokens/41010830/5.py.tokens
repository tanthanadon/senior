import sys import unittest import json from . import unittestsetup from . unittestsetup import environment as environment from . unittestsetup import fetchTestData import requests_mock from oandapyV20 import API import oandapyV20 . endpoints . trades as trades from oandapyV20 . endpoints . trades import responses access_token = None accountID = None account_cur = None api = None class TestTrades ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token ) api . api_url = <str>  except Exception as e :              print ( <str> % e ) exit ( 0 )   @ requests_mock . Mocker ( ) def test__trades_list ( self , mock_get ) :          tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = trades . TradesList ( accountID , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__open_trades ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = trades . OpenTrades ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__trade_details ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = trades . TradeDetails ( accountID , tradeID = 2315 ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__trade_close ( self , mock_put ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = trades . TradeClose ( accountID , tradeID = 2315 ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__trade_cltext ( self , mock_put ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = trades . TradeClientExtensions ( accountID , tradeID = 2315 , data = data ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__trade_crcdo ( self , mock_put ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = trades . TradeCRCDO ( accountID , tradeID = 2323 , data = data ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__trades_list_byids ( self , mock_get ) :          uri = <str> . format ( accountID ) resp = responses [ <str> ] [ <str> ] text = json . dumps ( resp ) mock_get . register_uri ( <str> , uri , text = text ) params = { <str> : <str> } r = trades . TradesList ( accountID , params = params ) result = api . request ( r ) self . assertTrue ( len ( result [ <str> ] ) == 2 and result [ <str> ] [ 0 ] [ <str> ] == <str> )   if __name__ == <str> :      unittest . main ( )   