import math import unittest try :      from nose_parameterized import parameterized  except ImportError :      print ( <str> ) exit ( 0 )  import oandapyV20 . contrib . factories as req class TestContribFactories ( unittest . TestCase ) :      @ parameterized . expand ( [ ( req . InstrumentsCandlesFactory , <str> , { } , { <str> : 1 } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : int ( math . ceil ( 24 * 60.0 / 500 ) ) } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> } , { } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> } , { } , ValueError , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : 17 } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : 3 } , ) , ( req . InstrumentsCandlesFactory , <str> , { <str> : <str> , <str> : <str> , <str> : 5000 , <str> : <str> } , { <str> : 1 } , ) , ] ) def test__candlehistory ( self , factory , instrument , inpar , refpar , exc = None ) :          if not exc :              i = 0 for r in factory ( instrument , params = inpar ) :                  if i == 0 and inpar :                      self . assertTrue ( r . params [ <str> ] == inpar [ <str> ] ) self . assertTrue ( <str> in r . params )  if <str> in refpar and i == refpar [ <str> ] :                      self . assertTrue ( <str> not in r . params )  i += 1     if __name__ == <str> :      unittest . main ( )   