import sys import unittest import json from . import unittestsetup from . unittestsetup import environment as environment from . unittestsetup import fetchTestData import requests_mock from oandapyV20 import API import oandapyV20 . endpoints . positions as positions from oandapyV20 . endpoints . positions import responses access_token = None accountID = None account_cur = None api = None class TestPositions ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token ) api . api_url = <str>  except Exception as e :              print ( <str> % e ) exit ( 0 )   @ requests_mock . Mocker ( ) def test__positions_list ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = positions . PositionList ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( resp == result )  @ requests_mock . Mocker ( ) def test__openpositions_list ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = positions . OpenPositions ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( resp == result )  @ requests_mock . Mocker ( ) def test__positiondetails ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = positions . PositionDetails ( accountID , instrument = <str> ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( resp == result )  @ requests_mock . Mocker ( ) def test__positionclose ( self , mock_put ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = positions . PositionClose ( accountID , instrument = <str> , data = data ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( resp == result )   if __name__ == <str> :      unittest . main ( )   