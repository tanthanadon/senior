import six from abc import ABCMeta , abstractmethod from . baserequest import BaseRequest from oandapyV20 . types import PriceValue import oandapyV20 . definitions . orders as OD @ six . add_metaclass ( ABCMeta ) class OnFill ( BaseRequest ) :      @ abstractmethod def __init__ ( self , timeInForce = OD . TimeInForce . GTC , gtdTime = None , clientExtensions = None ) :          super ( OnFill , self ) . __init__ ( ) if timeInForce not in [ OD . TimeInForce . GTC , OD . TimeInForce . GTD , OD . TimeInForce . GFD ] :              raise ValueError ( <str> . format ( timeInForce ) )  self . _data . update ( { <str> : timeInForce } ) if timeInForce == OD . TimeInForce . GTD and not gtdTime :              raise ValueError ( <str> )  self . _data . update ( { <str> : gtdTime } ) self . _data . update ( { <str> : clientExtensions } )   class TakeProfitDetails ( OnFill ) :      def __init__ ( self , price , timeInForce = OD . TimeInForce . GTC , gtdTime = None , clientExtensions = None ) :          super ( TakeProfitDetails , self ) . __init__ ( timeInForce = timeInForce , gtdTime = gtdTime , clientExtensions = clientExtensions ) self . _data . update ( { <str> : PriceValue ( price ) . value } )   class StopLossDetails ( OnFill ) :      def __init__ ( self , price , timeInForce = OD . TimeInForce . GTC , gtdTime = None , clientExtensions = None ) :          super ( StopLossDetails , self ) . __init__ ( timeInForce = timeInForce , gtdTime = gtdTime , clientExtensions = clientExtensions ) self . _data . update ( { <str> : PriceValue ( price ) . value } )   class TrailingStopLossDetails ( OnFill ) :      def __init__ ( self , distance , timeInForce = OD . TimeInForce . GTC , gtdTime = None , clientExtensions = None ) :          super ( TrailingStopLossDetails , self ) . __init__ ( timeInForce = timeInForce , gtdTime = gtdTime , clientExtensions = clientExtensions ) self . _data . update ( { <str> : PriceValue ( distance ) . value } )    