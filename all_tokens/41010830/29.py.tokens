from . apirequest import APIRequest from . . exceptions import StreamTerminated from . decorators import dyndoc_insert , endpoint from . responses . transactions import responses from types import GeneratorType from abc import abstractmethod class Transactions ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self , accountID , transactionID = None ) :          endpoint = self . ENDPOINT . format ( accountID = accountID , transactionID = transactionID ) super ( Transactions , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class TransactionList ( Transactions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( TransactionList , self ) . __init__ ( accountID ) self . params = params   @ endpoint ( <str> ) class TransactionDetails ( Transactions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , transactionID ) :          super ( TransactionDetails , self ) . __init__ ( accountID , transactionID )   @ endpoint ( <str> ) class TransactionIDRange ( Transactions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( TransactionIDRange , self ) . __init__ ( accountID ) self . params = params   @ endpoint ( <str> ) class TransactionsSinceID ( Transactions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( TransactionsSinceID , self ) . __init__ ( accountID ) self . params = params   @ endpoint ( <str> ) class TransactionsStream ( Transactions ) :      STREAM = True @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( TransactionsStream , self ) . __init__ ( accountID ) self . params = params  def terminate ( self , message = <str> ) :          if not isinstance ( self . response , GeneratorType ) :              raise ValueError ( <str> )  self . response . throw ( StreamTerminated ( message ) )    