import sys import unittest import json from . import unittestsetup from . unittestsetup import environment as environment from . unittestsetup import fetchTestData import requests_mock from oandapyV20 import API from oandapyV20 . endpoints . instruments import responses import oandapyV20 . endpoints . instruments as instruments access_token = None accountID = None account_cur = None api = None class TestInstruments ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } ) api . api_url = <str>  except Exception as e :              print ( <str> % e ) exit ( 0 )   @ requests_mock . Mocker ( ) def test__instruments_candles ( self , mock_get ) :          instrument = <str> tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = instruments . InstrumentsCandles ( instrument = instrument , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__instruments_orderbook ( self , mock_get ) :          instrument = <str> tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = instruments . InstrumentsOrderBook ( instrument = instrument , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__instruments_positionbook ( self , mock_get ) :          instrument = <str> tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = instruments . InstrumentsPositionBook ( instrument = instrument , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( result == resp )   if __name__ == <str> :      unittest . main ( )   