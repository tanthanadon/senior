import sys import unittest import json from . import unittestsetup from . unittestsetup import environment as environment from . unittestsetup import fetchTestData import requests_mock from oandapyV20 import API import oandapyV20 . endpoints . orders as orders from oandapyV20 . endpoints . orders import responses access_token = None accountID = None account_cur = None api = None class TestOrders ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } ) api . api_url = <str>  except Exception as e :              print ( <str> % e ) exit ( 0 )   def test__orders_base_exception ( self ) :          with self . assertRaises ( TypeError ) as bcErr :              orders . Orders ( accountID )  bcErr = bcErr . exception self . assertTrue ( <str> <str> in <str> . format ( bcErr ) )  @ requests_mock . Mocker ( ) def test__order_create ( self , mock_post ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderCreate ( accountID , data = data ) mock_post . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) , status_code = r . expected_status ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__order_clientextensions ( self , mock_put ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderClientExtensions ( accountID , orderID = <str> , data = data ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) , status_code = r . expected_status ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__orders_pending ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrdersPending ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) , status_code = r . expected_status ) result = api . request ( r ) self . assertTrue ( result == resp )  @ requests_mock . Mocker ( ) def test__orders_list ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderList ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) self . assertTrue ( len ( result [ <str> ] ) == len ( resp [ <str> ] ) and result [ <str> ] [ 0 ] [ <str> ] == resp [ <str> ] [ 0 ] [ <str> ] )  @ requests_mock . Mocker ( ) def test__order_details ( self , mock_get ) :          orderID = <str> tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderDetails ( accountID , orderID = orderID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) result = result [ <str> ] self . assertTrue ( result [ <str> ] == orderID and result [ <str> ] == resp [ <str> ] [ <str> ] )  @ requests_mock . Mocker ( ) def test__order_cancel ( self , mock_get ) :          orderID = <str> tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderCancel ( accountID , orderID = orderID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) result = api . request ( r ) result = result [ <str> ] self . assertTrue ( result [ <str> ] == orderID and result [ <str> ] == <str> and result [ <str> ] == <str> )  @ requests_mock . Mocker ( ) def test__order_replace ( self , mock_put ) :          orderID = <str> tid = <str> resp , data = fetchTestData ( responses , tid ) r = orders . OrderReplace ( accountID , orderID , data = data ) mock_put . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) , status_code = r . expected_status ) result = api . request ( r ) self . assertTrue ( <str> in result and <str> in result and result [ <str> ] [ <str> ] == orderID and result [ <str> ] [ <str> ] == orderID and result [ <str> ] [ <str> ] == data [ <str> ] [ <str> ] and result [ <str> ] [ <str> ] == data [ <str> ] [ <str> ] )  @ requests_mock . Mocker ( ) def test__order_replace_wrong_status_exception ( self , mock_get ) :          orderID = <str> tmp = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } } uri = <str> . format ( accountID , orderID ) resp = responses [ <str> ] [ <str> ] text = json . dumps ( resp ) r = orders . OrderReplace ( accountID , orderID , data = tmp ) mock_get . register_uri ( <str> , uri , text = text , status_code = 200 ) with self . assertRaises ( ValueError ) as err :              api . request ( r )  self . assertTrue ( <str> in <str> . format ( err . exception ) and r . status_code is None )   if __name__ == <str> :      unittest . main ( )   