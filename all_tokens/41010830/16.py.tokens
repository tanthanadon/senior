import unittest try :      from nose_parameterized import parameterized  except ImportError :      print ( <str> ) exit ( 0 )  import oandapyV20 . contrib . generic as gen class TestContribGeneric ( unittest . TestCase ) :      def test__secs2time ( self ) :          d = gen . secs2time ( 1497499200 ) self . assertTrue ( d . strftime ( <str> ) == <str> )  @ parameterized . expand ( [ ( gen . granularity_to_time , <str> , 1 * 60 ) , ( gen . granularity_to_time , <str> , 2 * 60 ) , ( gen . granularity_to_time , <str> , 5 * 60 ) , ( gen . granularity_to_time , <str> , 15 * 60 ) , ( gen . granularity_to_time , <str> , 3600 ) , ( gen . granularity_to_time , <str> , 4 * 3600 ) , ( gen . granularity_to_time , <str> , 86400 ) , ( gen . granularity_to_time , <str> , 86400 ) , ( gen . granularity_to_time , <str> , 604800 ) , ( gen . granularity_to_time , <str> , 604800 ) , ( gen . granularity_to_time , <str> , 86400 , ValueError ) , ] ) def test__granularity_to_time ( self , meth , granularity , refval , exc = None ) :          if not exc :              r = meth ( granularity ) self . assertTrue ( r == refval )  else :              with self . assertRaises ( exc ) :                  r = meth ( granularity )     if __name__ == <str> :      unittest . main ( )   