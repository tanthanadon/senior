import sys from importlib import import_module import six dyndoc = _doc = def make_definition_classes ( mod ) :      rootpath = <str> PTH = <str> . format ( rootpath , mod ) M = import_module ( PTH ) __ALL__ = [ ] for cls , cldef in M . definitions . items ( ) :          orig , fiV = next ( six . iteritems ( cldef ) ) fiK = orig . replace ( <str> , <str> ) clsdoc = dyndoc . format ( cls = cls , PTH = PTH , mod = mod , firstItem = fiK , orig = orig , firstItemVal = fiV ) for K , V in cldef . items ( ) :              attrName = K if <str> in K :                  attrName = K . replace ( <str> , <str> ) adoc = _doc . format ( K , attrName , K ) clsdoc += adoc   dyncls = type ( cls , ( object , ) , { <str> : clsdoc } ) definitions = dict ( ) for K , V in cldef . items ( ) :              attrName = K if <str> in K :                  attrName = K . replace ( <str> , <str> )  setattr ( dyncls , attrName , K ) definitions . update ( { K : V } )  def mkgi ( ) :              def __getitem__ ( self , definitionID ) :                  return self . _definitions [ definitionID ]  return __getitem__  def mkinit ( definitions ) :              def __init__ ( self ) :                  self . _definitions = definitions  return __init__  def mkPropDefinitions ( ) :              def definitions ( self ) :                  return self . _definitions  return property ( definitions )  setattr ( dyncls , <str> , mkgi ( ) ) setattr ( dyncls , <str> , mkinit ( definitions ) ) setattr ( dyncls , <str> , mkPropDefinitions ( ) ) setattr ( sys . modules [ <str> . format ( rootpath , mod ) ] , cls , dyncls ) __ALL__ . append ( cls )  setattr ( sys . modules [ <str> . format ( rootpath , mod ) ] , <str> , tuple ( __ALL__ ) )  definitionModules = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for M in definitionModules :      make_definition_classes ( M )   