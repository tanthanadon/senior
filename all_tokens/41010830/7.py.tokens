import sys import unittest from . import unittestsetup from . unittestsetup import environment as environment from oandapyV20 import API access_token = None accountID = None account_cur = None api = None class TestOandapyV20 ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } )  except Exception as e :              print ( <str> % e ) exit ( 0 )   def test__oandapyv20_environment ( self ) :          with self . assertRaises ( KeyError ) as envErr :              API ( environment = <str> , access_token = access_token , headers = { <str> : <str> } )  self . assertTrue ( <str> in <str> . format ( envErr . exception ) )  def test__requests_params ( self ) :          request_params = { <str> : 10 } api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } , request_params = request_params ) self . assertTrue ( api . request_params == request_params )  def test__requests_exception ( self ) :          from requests . exceptions import RequestException import oandapyV20 . endpoints . accounts as accounts setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } ) text = <str> <str> r = accounts . AccountList ( ) with self . assertRaises ( RequestException ) as oErr :              api . request ( r )  self . assertEqual ( <str> . format ( oErr . exception ) , text )   if __name__ == <str> :      unittest . main ( )   