from . apirequest import APIRequest from . decorators import dyndoc_insert , endpoint from . responses . trades import responses from abc import abstractmethod class Trades ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self , accountID , tradeID = None ) :          endpoint = self . ENDPOINT . format ( accountID = accountID , tradeID = tradeID ) super ( Trades , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class TradesList ( Trades ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , params = None ) :          super ( TradesList , self ) . __init__ ( accountID ) self . params = params   @ endpoint ( <str> ) class OpenTrades ( Trades ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID ) :          super ( OpenTrades , self ) . __init__ ( accountID )   @ endpoint ( <str> ) class TradeDetails ( Trades ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , tradeID ) :          super ( TradeDetails , self ) . __init__ ( accountID , tradeID )   @ endpoint ( <str> , <str> ) class TradeClose ( Trades ) :      HEADERS = { <str> : <str> } @ dyndoc_insert ( responses ) def __init__ ( self , accountID , tradeID , data = None ) :          super ( TradeClose , self ) . __init__ ( accountID , tradeID ) self . data = data   @ endpoint ( <str> , <str> ) class TradeClientExtensions ( Trades ) :      HEADERS = { <str> : <str> } @ dyndoc_insert ( responses ) def __init__ ( self , accountID , tradeID , data = None ) :          super ( TradeClientExtensions , self ) . __init__ ( accountID , tradeID ) self . data = data   @ endpoint ( <str> , <str> ) class TradeCRCDO ( Trades ) :      HEADERS = { <str> : <str> } @ dyndoc_insert ( responses ) def __init__ ( self , accountID , tradeID , data ) :          super ( TradeCRCDO , self ) . __init__ ( accountID , tradeID ) self . data = data    