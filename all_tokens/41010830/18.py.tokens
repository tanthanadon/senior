import json import requests import logging from . exceptions import V20Error ITER_LINES_CHUNKSIZE = 60 TRADING_ENVIRONMENTS = { <str> : { <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> } } DEFAULT_HEADERS = { <str> : <str> } logger = logging . getLogger ( __name__ ) class API ( object ) :      <str> def __init__ ( self , access_token , environment = <str> , headers = None , request_params = None ) :          logger . info ( <str> , environment ) try :              TRADING_ENVIRONMENTS [ environment ]  except :              logger . error ( <str> , environment ) raise KeyError ( <str> . format ( environment ) )  else :              self . environment = environment  self . access_token = access_token self . client = requests . Session ( ) self . client . stream = False self . _request_params = request_params if request_params else { } if self . access_token :              self . client . headers [ <str> ] = <str> + self . access_token  self . client . headers . update ( DEFAULT_HEADERS ) if headers :              self . client . headers . update ( headers ) logger . info ( <str> , <str> . join ( headers . keys ( ) ) )   @ property def request_params ( self ) :          return self . _request_params  def __request ( self , method , url , request_args , headers = None , stream = False ) :          func = getattr ( self . client , method ) headers = headers if headers else { } response = None try :              logger . info ( <str> , url ) response = func ( url , stream = stream , headers = headers , ** request_args )  except requests . RequestException as err :              logger . error ( <str> , url , err ) raise err  if response . status_code >= 400 :              logger . error ( <str> , url , response . status_code , response . content . decode ( <str> ) ) raise V20Error ( response . status_code , response . content . decode ( <str> ) )  return response  def __stream_request ( self , method , url , request_args , headers = None ) :          headers = headers if headers else { } response = self . __request ( method , url , request_args , headers = headers , stream = True ) lines = response . iter_lines ( ITER_LINES_CHUNKSIZE ) for line in lines :              if line :                  data = json . loads ( line . decode ( <str> ) ) yield data    def request ( self , endpoint ) :          method = endpoint . method method = method . lower ( ) params = None try :              params = getattr ( endpoint , <str> )  except AttributeError :              params = { }  headers = { } if hasattr ( endpoint , <str> ) :              headers = getattr ( endpoint , <str> )  request_args = { } if method == <str> :              request_args [ <str> ] = params  elif hasattr ( endpoint , <str> ) and endpoint . data :              request_args [ <str> ] = endpoint . data  request_args . update ( self . _request_params ) if not ( hasattr ( endpoint , <str> ) and getattr ( endpoint , <str> ) is True ) :              url = <str> . format ( TRADING_ENVIRONMENTS [ self . environment ] [ <str> ] , endpoint ) response = self . __request ( method , url , request_args , headers = headers ) content = response . content . decode ( <str> ) content = json . loads ( content ) endpoint . response = content endpoint . status_code = response . status_code return content  else :              url = <str> . format ( TRADING_ENVIRONMENTS [ self . environment ] [ <str> ] , endpoint ) endpoint . response = self . __stream_request ( method , url , request_args , headers = headers ) return endpoint . response     