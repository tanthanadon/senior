from . baserequest import BaseRequest from oandapyV20 . types import Units , PriceValue from oandapyV20 . definitions . orders import ( OrderType , TimeInForce , OrderPositionFill ) class MarketOrderRequest ( BaseRequest ) :      def __init__ ( self , instrument , units , priceBound = None , positionFill = OrderPositionFill . DEFAULT , clientExtensions = None , takeProfitOnFill = None , timeInForce = TimeInForce . FOK , stopLossOnFill = None , trailingStopLossOnFill = None , tradeClientExtensions = None ) :          super ( MarketOrderRequest , self ) . __init__ ( ) if timeInForce not in [ TimeInForce . FOK , TimeInForce . IOC ] :              raise ValueError ( <str> . format ( timeInForce ) )  self . _data . update ( { <str> : OrderType . MARKET } ) self . _data . update ( { <str> : timeInForce } ) self . _data . update ( { <str> : instrument } ) self . _data . update ( { <str> : Units ( units ) . value } ) if priceBound :              self . _data . update ( { <str> : PriceValue ( priceBound ) . value } )  if not hasattr ( OrderPositionFill , positionFill ) :              raise ValueError ( <str> . format ( positionFill ) )  self . _data . update ( { <str> : positionFill } ) self . _data . update ( { <str> : clientExtensions } ) self . _data . update ( { <str> : takeProfitOnFill } ) self . _data . update ( { <str> : stopLossOnFill } ) self . _data . update ( { <str> : trailingStopLossOnFill } ) self . _data . update ( { <str> : tradeClientExtensions } )  @ property def data ( self ) :          return dict ( { <str> : super ( MarketOrderRequest , self ) . data } )    