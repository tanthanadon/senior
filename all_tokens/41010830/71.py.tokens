import os import sys sys . path . insert ( 0 , os . path . abspath ( <str> ) ) import oandapyV20 extensions = [ <str> , <str> , ] templates_path = [ <str> ] source_suffix = <str> master_doc = <str> project = getattr ( sys . modules [ <str> ] , <str> ) copyright = getattr ( sys . modules [ <str> ] , <str> ) author = getattr ( sys . modules [ <str> ] , <str> ) version = getattr ( sys . modules [ <str> ] , <str> ) release = getattr ( sys . modules [ <str> ] , <str> ) language = None exclude_patterns = [ <str> , <str> , <str> ] pygments_style = <str> todo_include_todos = False html_theme = <str> html_static_path = [ <str> ] htmlhelp_basename = <str> latex_elements = { } latex_documents = [ ( master_doc , <str> , <str> , <str> , <str> ) , ] man_pages = [ ( master_doc , <str> , <str> , [ author ] , 1 ) ] texinfo_documents = [ ( master_doc , <str> , <str> , author , <str> , <str> , <str> ) , ] napoleon_google_docstring = True napoleon_numpy_docstring = True napoleon_use_admonition_for_examples = False napoleon_use_admonition_for_notes = False napoleon_use_admonition_for_references = False napoleon_use_ivar = False napoleon_use_param = True napoleon_use_rtype = True on_rtd = os . environ . get ( <str> , None ) == <str> from os . path import basename try :      from StringIO import StringIO  except ImportError :      from io import StringIO  from docutils import nodes , statemachine from docutils . parsers . rst import Directive class ExecDirective ( Directive ) :      has_content = True def run ( self ) :          oldStdout , sys . stdout = sys . stdout , StringIO ( ) tab_width = self . options . get ( <str> , self . state . document . settings . tab_width ) source = self . state_machine . input_lines . source ( self . lineno - self . state_machine . input_offset - 1 ) try :              exec ( <str> . join ( self . content ) ) text = sys . stdout . getvalue ( ) lines = statemachine . string2lines ( text , tab_width , convert_whitespace = True ) self . state_machine . insert_input ( lines , source ) return [ ]  except Exception :              return [ nodes . error ( None , nodes . paragraph ( text = <str> % ( basename ( source ) , self . lineno ) ) , nodes . paragraph ( text = str ( sys . exc_info ( ) [ 1 ] ) ) ) ]  finally :              sys . stdout = oldStdout    def setup ( app ) :      app . add_directive ( <str> , ExecDirective )  if not on_rtd :      import sphinx_rtd_theme html_theme = <str> html_theme_path = [ sphinx_rtd_theme . get_html_theme_path ( ) ]   