import unittest from copy import deepcopy from openprocurement . api . tests . base import snitch from openprocurement . tender . belowthreshold . tests . base import ( test_organization , test_lots ) from openprocurement . tender . belowthreshold . tests . auction import ( TenderAuctionResourceTestMixin , TenderLotAuctionResourceTestMixin , TenderMultipleLotAuctionResourceTestMixin ) from openprocurement . tender . belowthreshold . tests . auction_blanks import ( post_tender_auction_reversed , post_tender_auction_not_changed , get_tender_auction_feature , post_tender_auction_feature , get_tender_lot_auction_features , post_tender_lot_auction_features , get_tender_lots_auction_features , post_tender_lots_auction_features ) from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_features_tender_data , test_bids ) from openprocurement . tender . openeu . tests . auction_blanks import ( patch_tender_2lot_auction , ) class TenderAuctionResourceTest ( BaseTenderContentWebTest , TenderAuctionResourceTestMixin ) :      initial_auth = ( <str> , ( <str> , <str> ) ) initial_bids = test_bids def setUp ( self ) :          super ( TenderAuctionResourceTest , self ) . setUp ( ) self . time_shift ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) for qualific in response . json [ <str> ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualific [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )   class TenderSameValueAuctionResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> tenderer_info = deepcopy ( test_organization ) initial_bids = [ { <str> : [ tenderer_info ] , <str> : { <str> : 469 , <str> : <str> , <str> : True } , <str> : True , <str> : True } for i in range ( 3 ) ] def setUp ( self ) :          super ( TenderSameValueAuctionResourceTest , self ) . setUp ( ) auth = self . app . authorization self . set_status ( <str> , { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) for qualific in response . json [ <str> ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualific [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth  test_post_tender_auction_not_changed = snitch ( post_tender_auction_not_changed ) test_post_tender_auction_reversed = snitch ( post_tender_auction_reversed )  class TenderLotAuctionResourceTest ( TenderLotAuctionResourceTestMixin , TenderAuctionResourceTest ) :      initial_lots = test_lots  class TenderMultipleLotAuctionResourceTest ( TenderMultipleLotAuctionResourceTestMixin , TenderAuctionResourceTest ) :      initial_lots = 2 * test_lots test_patch_tender_auction = snitch ( patch_tender_2lot_auction )  class TenderFeaturesAuctionResourceTest ( TenderAuctionResourceTest ) :      initial_data = test_features_tender_data tenderer_info = deepcopy ( test_organization ) initial_bids = [ { <str> : [ { <str> : i [ <str> ] , <str> : 0.1 , } for i in test_features_tender_data [ <str> ] ] , <str> : [ tenderer_info ] , <str> : { <str> : 469 , <str> : <str> , <str> : True } , <str> : True , <str> : True } , { <str> : [ { <str> : i [ <str> ] , <str> : 0.15 , } for i in test_features_tender_data [ <str> ] ] , <str> : [ tenderer_info ] , <str> : { <str> : 479 , <str> : <str> , <str> : True } , <str> : True , <str> : True } ] test_get_tender_auction = snitch ( get_tender_auction_feature ) test_post_tender_auction = snitch ( post_tender_auction_feature )  class TenderFeaturesLotAuctionResourceTest ( TenderLotAuctionResourceTestMixin , TenderFeaturesAuctionResourceTest ) :      initial_lots = test_lots test_get_tender_auction = snitch ( get_tender_lot_auction_features ) test_post_tender_auction = snitch ( post_tender_lot_auction_features )  class TenderFeaturesMultilotAuctionResourceTest ( TenderMultipleLotAuctionResourceTestMixin , TenderFeaturesAuctionResourceTest ) :      initial_lots = test_lots * 2 test_get_tender_auction = snitch ( get_tender_lots_auction_features ) test_post_tender_auction = snitch ( post_tender_lots_auction_features ) test_patch_tender_auction = snitch ( patch_tender_2lot_auction )  def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( TenderAuctionResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderSameValueAuctionResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderFeaturesAuctionResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   