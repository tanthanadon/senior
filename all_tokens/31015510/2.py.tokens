import json import os from datetime import timedelta import openprocurement . tender . openeu . tests . base as base_test from openprocurement . api . models import get_now from openprocurement . api . tests . base import PrefixedRequestClass from openprocurement . tender . openeu . tests . tender import BaseTenderWebTest from webtest import TestApp test_tender_data = { <str> : { <str> : <str> } , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : 35 } , <str> : <str> , <str> : { <str> : <str> , <str> : 500 } , <str> : { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> , <str> : <str> } , <str> : [ { <str> : { <str> : <str> , <str> : <str> } , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> } ] , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : ( get_now ( ) + timedelta ( days = 20 ) ) . isoformat ( ) , <str> : ( get_now ( ) + timedelta ( days = 50 ) ) . isoformat ( ) } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 } , { <str> : { <str> : <str> , <str> : <str> } , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> } ] , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : { <str> : ( get_now ( ) + timedelta ( days = 20 ) ) . isoformat ( ) , <str> : ( get_now ( ) + timedelta ( days = 50 ) ) . isoformat ( ) } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } ] } test_tender_data [ <str> ] = { <str> : ( get_now ( ) + timedelta ( days = 31 ) ) . isoformat ( ) } bid = { <str> : { <str> : [ { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> } ] , <str> : { <str> : 500 } , <str> : <str> , <str> : <str> , <str> : True , <str> : True , } } bid2 = { <str> : { <str> : [ { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> } ] , <str> : { <str> : 499 } , <str> : True , <str> : True , } } bid3 = { <str> : { <str> : [ { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> } ] , <str> : { <str> : 5 } , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> + <str> * 32 , <str> : <str> , } , { <str> : <str> , <str> : <str> , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : <str> , } ] , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> + <str> * 32 , <str> : <str> , } ] , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> + <str> * 32 , <str> : <str> , } ] , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> + <str> * 32 , <str> : <str> , } ] , <str> : True , <str> : True , } } question = { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> } , <str> : <str> , <str> : <str> } } answer = { <str> : { <str> : <str> } } cancellation = { <str> : { <str> : <str> } } complaint = { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : <str> } , <str> : <str> , <str> : <str> } } test_lots = [ { <str> : <str> , <str> : <str> , <str> : test_tender_data [ <str> ] , <str> : test_tender_data [ <str> ] , } , { <str> : <str> , <str> : <str> , <str> : test_tender_data [ <str> ] , <str> : test_tender_data [ <str> ] , } ] class DumpsTestAppwebtest ( TestApp ) :      def do_request ( self , req , status = None , expect_errors = None ) :          req . headers . environ [ <str> ] = <str> if hasattr ( self , <str> ) and not self . file_obj . closed :              self . file_obj . write ( req . as_bytes ( True ) ) self . file_obj . write ( <str> ) if req . body :                  try :                      self . file_obj . write ( <str> + json . dumps ( json . loads ( req . body ) , indent = 2 , ensure_ascii = False ) . encode ( <str> ) ) self . file_obj . write ( <str> )  except :                      pass   self . file_obj . write ( <str> )  resp = super ( DumpsTestAppwebtest , self ) . do_request ( req , status = status , expect_errors = expect_errors ) if hasattr ( self , <str> ) and not self . file_obj . closed :              headers = [ ( n . title ( ) , v ) for n , v in resp . headerlist if n . lower ( ) != <str> ] headers . sort ( ) self . file_obj . write ( str ( <str> ) % ( resp . status , str ( <str> ) . join ( [ str ( <str> ) % ( n , v ) for n , v in headers ] ) , ) ) if resp . testbody :                  try :                      self . file_obj . write ( json . dumps ( json . loads ( resp . testbody ) , indent = 2 , ensure_ascii = False ) . encode ( <str> ) )  except :                      pass   self . file_obj . write ( <str> )  return resp   class TenderResourceTest ( BaseTenderWebTest ) :      initial_data = test_tender_data docservice = True def setUp ( self ) :          self . app = DumpsTestAppwebtest ( <str> , relative_to = os . path . dirname ( base_test . __file__ ) ) self . app . RequestClass = PrefixedRequestClass self . app . authorization = ( <str> , ( <str> , <str> ) ) self . couchdb_server = self . app . app . registry . couchdb_server self . db = self . app . app . registry . db if self . docservice :              self . setUpDS ( ) self . app . app . registry . docservice_url = <str>   def generate_docservice_url ( self ) :          return super ( TenderResourceTest , self ) . generate_docservice_url ( ) . replace ( <str> , <str> )  def test_docs ( self ) :          request_path = <str> with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . app . file_obj . write ( <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( request_path , <str> , status = 415 ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post ( request_path , <str> , content_type = <str> , status = 422 ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> , { <str> : test_tender_data } ) self . assertEqual ( response . status , <str> )  tender = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( tender [ <str> ] ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) tenderPeriod_endDate = get_now ( ) + timedelta ( days = 30 , seconds = 10 ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : tenderPeriod_endDate . isoformat ( ) } } } )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) self . tender_id = tender [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , owner_token ) , { <str> : { <str> : { <str> : 8 , <str> : <str> } } } ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  doc_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , doc_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  doc_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . put ( <str> . format ( self . tender_id , doc_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , question , status = 201 ) question_id = response . json [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , question_id , owner_token ) , answer , status = 200 ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , question_id ) ) self . assertEqual ( response . status , <str> )  self . time_shift ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( tender [ <str> ] , owner_token ) ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : 501.0 } } } , status = 403 ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , question , status = 403 ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              tenderPeriod_endDate = get_now ( ) + timedelta ( days = 8 ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : 501 , <str> : <str> } , <str> : { <str> : tenderPeriod_endDate . isoformat ( ) } } } ) self . assertEqual ( response . status , <str> )  bids_access = { } with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , bid ) bid1_id = response . json [ <str> ] [ <str> ] bids_access [ bid1_id ] = response . json [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) priv_doc_id = response . json [ <str> ] [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , bid1_id , priv_doc_id , bids_access [ bid1_id ] ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) financial_doc_id = response . json [ <str> ] [ <str> ]  response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) financial_doc_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) eligibility_doc_id = response . json [ <str> ] [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : 501.0 } } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  response = self . app . post_json ( <str> . format ( self . tender_id ) , bid2 ) bid2_id = response . json [ <str> ] [ <str> ] bids_access [ bid2_id ] = response . json [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  for document in bid3 [ <str> ] [ <str> ] :                  document [ <str> ] = self . generate_docservice_url ( )  response = self . app . post_json ( <str> . format ( self . tender_id ) , bid3 ) bid3_id = response . json [ <str> ] [ <str> ] bids_access [ bid3_id ] = response . json [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] [ <str> ] self . assertEqual ( len ( qualifications ) , 3 ) self . assertEqual ( qualifications [ 0 ] [ <str> ] , bid1_id ) self . assertEqual ( qualifications [ 1 ] [ <str> ] , bid2_id ) self . assertEqual ( qualifications [ 2 ] [ <str> ] , bid3_id )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 0 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 1 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 2 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid3_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  self . set_status ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) patch_data = { <str> : <str> . format ( self . tender_id ) , <str> : [ { <str> : bid1_id , <str> : <str> . format ( self . tender_id , bid1_id ) } , { <str> : bid2_id , <str> : <str> . format ( self . tender_id , bid2_id ) } , { <str> : bid3_id } ] } response = self . app . patch_json ( <str> . format ( self . tender_id , owner_token ) , { <str> : patch_data } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid1_id , bids_access [ bid1_id ] ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , bid2_id , bids_access [ bid2_id ] ) ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] with open ( <str> , <str> ) as self . app . file_obj :              self . app . patch_json ( <str> . format ( self . tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . contract_id = response . json [ <str> ] [ 0 ] [ <str> ] tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :              i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , self . contract_id , owner_token ) , { <str> : { <str> : <str> , <str> : { <str> : 238 } } } )  self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 238 ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , self . contract_id , owner_token ) , { <str> : { <str> : get_now ( ) . isoformat ( ) } } ) self . assertEqual ( response . status , <str> )  period_dates = { <str> : { <str> : ( get_now ( ) ) . isoformat ( ) , <str> : ( get_now ( ) + timedelta ( days = 365 ) ) . isoformat ( ) } } with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , self . contract_id , owner_token ) , { <str> : { <str> : period_dates [ <str> ] } } )  self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , self . contract_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , self . contract_id ) )  self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , self . contract_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . document_id = response . json [ <str> ] [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , self . contract_id , self . document_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , self . contract_id ) )  self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , self . contract_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , owner_token ) , cancellation ) self . assertEqual ( response . status , <str> )  cancellation_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , cancellation_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , cancellation_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) cancellation_doc_id = response . json [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , cancellation_id , cancellation_doc_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . put ( <str> . format ( self . tender_id , cancellation_id , cancellation_doc_id , owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , cancellation_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )   def test_complaints ( self ) :          response = self . app . post_json ( <str> , { <str> : test_tender_data } ) self . assertEqual ( response . status , <str> ) tender = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . tender_id = tender [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , complaint ) self . assertEqual ( response . status , <str> )  complaint1_token = response . json [ <str> ] [ <str> ] complaint1_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , complaint1_id , complaint1_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint1_id , complaint1_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  claim = { <str> : complaint [ <str> ] . copy ( ) } claim [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , claim ) self . assertEqual ( response . status , <str> )  complaint2_token = response . json [ <str> ] [ <str> ] complaint2_id = response . json [ <str> ] [ <str> ] complaint_data = { <str> : complaint [ <str> ] . copy ( ) } complaint_data [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id ) , complaint_data ) self . assertEqual ( response . status , <str> )  complaint3_id = response . json [ <str> ] [ <str> ] complaint3_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , claim ) self . assertEqual ( response . status , <str> ) complaint4_id = response . json [ <str> ] [ <str> ] complaint4_token = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint1_id , complaint1_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint2_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , complaint4_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint2_id , complaint2_token ) , { <str> : { <str> : True , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint4_id , complaint4_token ) , { <str> : { <str> : False , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint5_id = response . json [ <str> ] [ <str> ] complaint5_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint6_id = response . json [ <str> ] [ <str> ] complaint6_token = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint4_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , complaint5_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , complaint6_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , complaint1_id ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint5_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint1_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint6_id , complaint6_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint6_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , complaint ) self . assertEqual ( response . status , <str> ) complaint7_id = response . json [ <str> ] [ <str> ] complaint7_token = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , complaint7_id , complaint7_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( <str> . format ( self . tender_id , complaint1_id ) ) self . assertEqual ( response . status , <str> )   def test_qualification_complaints ( self ) :          response = self . app . post_json ( <str> , { <str> : test_tender_data } ) self . assertEqual ( response . status , <str> ) tender = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . tender_id = tender [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , bid ) bid_id = response . json [ <str> ] [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , bid_id , bid_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , bid2 ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) qualification_id = qualifications [ 0 ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> )  complaint1_token = response . json [ <str> ] [ <str> ] complaint1_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , qualification_id , complaint1_id , complaint1_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint1_id , complaint1_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  complaint_data = { <str> : complaint [ <str> ] . copy ( ) } complaint_data [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> )  complaint2_token = response . json [ <str> ] [ <str> ] complaint2_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint3_token = response . json [ <str> ] [ <str> ] complaint3_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint4_token = response . json [ <str> ] [ <str> ] complaint4_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint5_token = response . json [ <str> ] [ <str> ] complaint5_id = response . json [ <str> ] [ <str> ] claim = { <str> : complaint [ <str> ] . copy ( ) } claim [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , claim ) self . assertEqual ( response . status , <str> )  complaint6_token = response . json [ <str> ] [ <str> ] complaint6_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint6_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint6_id , complaint6_token ) , { <str> : { <str> : True , } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , claim ) self . assertEqual ( response . status , <str> ) complaint7_token = response . json [ <str> ] [ <str> ] complaint7_id = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint7_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint7_id , complaint7_token ) , { <str> : { <str> : False , } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id , qualification_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint2_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint4_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint5_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , qualification_id , complaint1_id ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint5_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint1_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint4_id , complaint4_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , complaint4_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = None with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , qualification_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , qualification_id , complaint1_id ) ) self . assertEqual ( response . status , <str> )   def test_award_complaints ( self ) :          response = self . app . post_json ( <str> , { <str> : test_tender_data } ) self . assertEqual ( response . status , <str> ) tender = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . tender_id = tender [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , bid ) bid_id = response . json [ <str> ] [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , bid_id , bid_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , bid2 ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> )  complaint1_token = response . json [ <str> ] [ <str> ] complaint1_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , award_id , complaint1_id , complaint1_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint1_id , complaint1_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  complaint_data = { <str> : complaint [ <str> ] . copy ( ) } complaint_data [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> )  complaint2_token = response . json [ <str> ] [ <str> ] complaint2_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint3_token = response . json [ <str> ] [ <str> ] complaint3_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint4_token = response . json [ <str> ] [ <str> ] complaint4_id = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint_data ) self . assertEqual ( response . status , <str> ) complaint5_token = response . json [ <str> ] [ <str> ] complaint5_id = response . json [ <str> ] [ <str> ] claim = { <str> : complaint [ <str> ] . copy ( ) } claim [ <str> ] [ <str> ] = <str> with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , claim ) self . assertEqual ( response . status , <str> )  complaint6_token = response . json [ <str> ] [ <str> ] complaint6_id = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint6_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint6_id , complaint6_token ) , { <str> : { <str> : True , } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , claim ) self . assertEqual ( response . status , <str> ) complaint7_token = response . json [ <str> ] [ <str> ] complaint7_id = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint7_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint7_id , complaint7_token ) , { <str> : { <str> : False , } } ) self . assertEqual ( response . status , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint2_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint4_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint5_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post ( <str> . format ( self . tender_id , award_id , complaint1_id ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint1_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint3_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint5_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( <str> . format ( self . tender_id , award_id ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( <str> . format ( self . tender_id , award_id , complaint1_id ) ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint1_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint4_id , complaint4_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , complaint4_id ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) new_award_id = response . headers [ <str> ] [ - 32 : ]  award_id = new_award_id self . app . patch_json ( <str> . format ( self . tender_id , award_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( self . tender_id , award_id , bid_token ) , complaint ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> )   def test_multiple_lots ( self ) :          request_path = <str> with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . app . file_obj . write ( <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> , { <str> : test_tender_data } ) self . assertEqual ( response . status , <str> )  tender = response . json [ <str> ] tender_id = self . tender_id = tender [ <str> ] owner_token = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : test_lots [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id1 = response . json [ <str> ] [ <str> ]  response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : test_lots [ 1 ] } ) self . assertEqual ( response . status , <str> ) lot_id2 = response . json [ <str> ] [ <str> ] with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id1 } , { <str> : lot_id2 } ] } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              self . app . authorization = None response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( tender [ <str> ] ) ) self . assertEqual ( response . status , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : bid [ <str> ] [ <str> ] , <str> : [ { <str> : <str> , <str> : { <str> : 500 } , <str> : lot_id1 } ] } } ) self . assertEqual ( response . status , <str> ) bid1_token = response . json [ <str> ] [ <str> ] bid1_id = response . json [ <str> ] [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : bid2 [ <str> ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : lot_id1 } , { <str> : <str> , <str> : { <str> : 500 } , <str> : lot_id2 } ] } } ) self . assertEqual ( response . status , <str> ) bid2_id = response . json [ <str> ] [ <str> ] bid2_token = response . json [ <str> ] [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender_id , lot_id2 , owner_token ) , { <str> : { <str> : { <str> : 400 } } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( tender_id , bid1_id , bid1_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender_id , bid1_id , bid1_token ) , { <str> : { <str> : [ { <str> : <str> , <str> : { <str> : 500 } , <str> : lot_id1 } ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender_id , bid2_id , bid2_token ) , { <str> : { <str> : [ { <str> : { <str> : 500 } , <str> : lot_id1 } ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> )  self . time_shift ( <str> ) self . check_chronograph ( ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( response . status , <str> )  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ]  with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 0 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 1 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) with open ( <str> , <str> ) as self . app . file_obj :              response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )     