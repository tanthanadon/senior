from datetime import timedelta from openprocurement . api . utils import get_now def question_blocking ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] , <str> : self . test_author } } ) question = response . json [ <str> ] self . assertEqual ( question [ <str> ] , <str> ) self . assertEqual ( question [ <str> ] , self . initial_lots [ 0 ] [ <str> ] ) self . set_status ( self . question_claim_block_status , extra = { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , self . question_claim_block_status )  def claim_blocking ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . test_author , <str> : self . initial_lots [ 0 ] [ <str> ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . assertEqual ( complaint [ <str> ] , self . initial_lots [ 0 ] [ <str> ] ) self . set_status ( self . question_claim_block_status , extra = { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , self . question_claim_block_status )  def next_check_value_with_unanswered_question ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] , <str> : self . test_author } } ) question = response . json [ <str> ] self . assertEqual ( question [ <str> ] , <str> ) self . assertEqual ( question [ <str> ] , self . initial_lots [ 0 ] [ <str> ] ) self . set_status ( self . question_claim_block_status , extra = { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) response = self . app . get ( <str> . format ( self . tender_id , ) ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , self . question_claim_block_status )  def next_check_value_with_unanswered_claim ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . test_author , <str> : self . initial_lots [ 0 ] [ <str> ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . assertEqual ( complaint [ <str> ] , self . initial_lots [ 0 ] [ <str> ] ) self . set_status ( self . question_claim_block_status , extra = { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) response = self . app . get ( <str> . format ( self . tender_id , ) ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , self . question_claim_block_status )  def create_tender_bidder_invalid ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : <str> * 32 } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 5000000 } , <str> : self . initial_lots [ 0 ] [ <str> ] } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 , <str> : False } , <str> : self . initial_lots [ 0 ] [ <str> ] } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 , <str> : <str> } , <str> : self . initial_lots [ 0 ] [ <str> ] } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } , ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 } , <str> : [ { <str> : { <str> : 500 } , <str> : self . initial_lots [ 0 ] [ <str> ] } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] )  def patch_tender_bidder ( self ) :      lot_id = self . initial_lots [ 0 ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bidder = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] lot = bidder [ <str> ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , bidder [ <str> ] , bid_token ) , { <str> : { <str> : [ { <str> : <str> } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , lot [ <str> ] ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , bidder [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bidder [ <str> ] , bid_token ) , { <str> : { <str> : [ { <str> : { <str> : 500 } , <str> : lot_id } ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , lot [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , bidder [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bidder [ <str> ] , bid_token ) , { <str> : { <str> : [ { <str> : { <str> : 400 } , <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] [ <str> ] , 400 ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , lot [ <str> ] ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , bidder [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bidder [ <str> ] , bid_token ) , { <str> : { <str> : [ { <str> : { <str> : 500 } , <str> : lot_id } ] , <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_feature_bidder_invalid ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : <str> * 32 } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 5000000 } , <str> : self . lot_id } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 , <str> : False } , <str> : self . lot_id } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 , <str> : <str> } , <str> : self . lot_id } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } , ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] , <str> : [ { <str> : <str> , <str> : 0.01 } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] , <str> : [ { <str> : <str> , <str> : 0.01 } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] , <str> : [ { <str> : <str> , <str> : 0.01 } , { <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : 0.01 } , ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  def create_tender_feature_bidder ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] , <str> : [ { <str> : <str> , <str> : 0.01 } , { <str> : <str> , <str> : 0.01 } , { <str> : <str> , <str> : 0.01 } , ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bidder = response . json [ <str> ] self . assertEqual ( bidder [ <str> ] [ 0 ] [ <str> ] , self . initial_data [ <str> ] [ <str> ] ) self . assertIn ( <str> , bidder ) self . assertIn ( bidder [ <str> ] , response . headers [ <str> ] ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : { <str> : 500 } , <str> : self . lot_id } ] , <str> : [ { <str> : <str> , <str> : 0.01 } , { <str> : <str> , <str> : 0.01 } , { <str> : <str> , <str> : 0.01 } , ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def one_lot_1bid ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } ] } } ) self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def one_lot_2bid_1unqualified ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } ] } } ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 0 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , qualifications [ 1 ] [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def one_lot_2bid ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id = response . json [ <str> ] [ <str> ] self . initial_lots = [ response . json [ <str> ] ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } ] } } ) bid_id = response . json [ <str> ] [ <str> ] bid_token = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } ] } } ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( response . status , <str> ) for bid in response . json [ <str> ] [ <str> ] :          self . assertEqual ( bid [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . status , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : [ { <str> : i [ <str> ] , <str> : <str> } for i in response . json [ <str> ] [ <str> ] ] , <str> : [ { <str> : i [ <str> ] , <str> : [ { <str> : j [ <str> ] , <str> : <str> . format ( i [ <str> ] ) } for j in i [ <str> ] ] , } for i in auction_bids_data ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> . format ( bid_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def two_lot_2bid_1lot_del ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in 2 * self . test_lots_data :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  self . initial_lots = lots response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] for i in lots ] } } ) response = self . set_status ( <str> , { <str> : [ { <str> : { <str> : ( get_now ( ) + timedelta ( days = self . days_till_auction_starts ) ) . isoformat ( ) } } for i in lots ] } ) bids = [ ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) bids . append ( response . json ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) bids . append ( response . json ) response = self . app . delete ( <str> . format ( self . tender_id , lots [ 0 ] , owner_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  def one_lot_3bid_1del ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id = response . json [ <str> ] [ <str> ] self . initial_lots = [ response . json [ <str> ] ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) bids = [ ] for i in range ( 3 ) :          response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } ] } } ) bids . append ( { response . json [ <str> ] [ <str> ] : response . json [ <str> ] [ <str> ] } )  response = self . app . delete ( <str> . format ( tender_id , bids [ 2 ] . keys ( ) [ 0 ] , bids [ 2 ] . values ( ) [ 0 ] ) ) self . assertEqual ( response . status , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] data = { <str> : { <str> : [ { <str> : i [ <str> ] , <str> : <str> } for i in response . json [ <str> ] [ <str> ] ] , <str> : list ( auction_bids_data ) } } for bid_index , bid in enumerate ( auction_bids_data ) :          if bid . get ( <str> , <str> ) == <str> :              for lot_index , lot_bid in enumerate ( bid [ <str> ] ) :                  if lot_bid [ <str> ] == lot_id and lot_bid . get ( <str> , <str> ) == <str> :                      data [ <str> ] [ <str> ] [ bid_index ] [ <str> ] [ lot_index ] [ <str> ] = <str> . format ( bid [ <str> ] ) break     response = self . app . patch_json ( <str> . format ( tender_id , lot_id ) , data ) self . app . authorization = ( <str> , ( <str> , <str> ) ) bid_id = bids [ 0 ] . keys ( ) [ 0 ] bid_token = bids [ 0 ] . values ( ) [ 0 ] response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> . format ( bid_id ) ) bid_id = bids [ 2 ] . keys ( ) [ 0 ] bid_token = bids [ 2 ] . values ( ) [ 0 ] response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def one_lot_3bid_1un ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lot_id = response . json [ <str> ] [ <str> ] self . initial_lots = [ response . json [ <str> ] ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : lot_id } ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) bids = [ ] for i in range ( 3 ) :          response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } ] } } ) bids . append ( { response . json [ <str> ] [ <str> ] : response . json [ <str> ] [ <str> ] } )  self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          if qualification [ <str> ] == bids [ 2 ] . keys ( ) [ 0 ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  else :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] data = { <str> : { <str> : [ { <str> : i [ <str> ] , <str> : <str> } for i in response . json [ <str> ] [ <str> ] ] , <str> : list ( auction_bids_data ) } } for bid_index , bid in enumerate ( auction_bids_data ) :          if bid . get ( <str> , <str> ) == <str> :              for lot_index , lot_bid in enumerate ( bid [ <str> ] ) :                  if lot_bid [ <str> ] == lot_id and lot_bid . get ( <str> , <str> ) == <str> :                      data [ <str> ] [ <str> ] [ bid_index ] [ <str> ] [ lot_index ] [ <str> ] = <str> . format ( bid [ <str> ] ) break     response = self . app . patch_json ( <str> . format ( tender_id , lot_id ) , data ) self . app . authorization = ( <str> , ( <str> , <str> ) ) bid_id = bids [ 0 ] . keys ( ) [ 0 ] bid_token = bids [ 0 ] . values ( ) [ 0 ] response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> . format ( bid_id ) ) bid_id = bids [ 2 ] . keys ( ) [ 0 ] bid_token = bids [ 2 ] . values ( ) [ 0 ] response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def two_lot_1can ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in 2 * self . test_lots_data :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] for i in lots ] } } ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : i } for i in lots ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : lots [ 0 ] } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertFalse ( all ( [ i [ <str> ] == <str> for i in response . json [ <str> ] [ <str> ] ] ) ) self . assertTrue ( any ( [ i [ <str> ] == <str> for i in response . json [ <str> ] [ <str> ] ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( len ( response . json [ <str> ] ) , 1 ) cancellation = response . json [ <str> ] [ 0 ] self . assertEqual ( cancellation [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , cancellation [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : lots [ 0 ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertFalse ( all ( [ i [ <str> ] == <str> for i in response . json [ <str> ] [ <str> ] ] ) ) self . assertTrue ( any ( [ i [ <str> ] == <str> for i in response . json [ <str> ] [ <str> ] ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def two_lot_2bid_0com_1can ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in 2 * self . test_lots_data :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] for i in lots ] } } ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : i } for i in lots ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : lots [ 0 ] } } ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( response . status , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 2 ) for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  def two_lot_2bid_2com_2win ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in 2 * self . test_lots_data :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  self . initial_lots = lots response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] for i in lots ] } } ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : i } for i in lots ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 4 ) for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] for lot_id in lots :          response = self . app . patch_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : [ { <str> : i [ <str> ] , <str> : <str> } for i in response . json [ <str> ] [ <str> ] ] , <str> : [ { <str> : i [ <str> ] , <str> : [ { <str> : j [ <str> ] , <str> : <str> . format ( i [ <str> ] ) } for j in i [ <str> ] ] , } for i in auction_bids_data ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : auction_bids_data } } )  lot_id = lots [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . set_status ( <str> , { <str> : <str> } ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) lot_id = lots [ 1 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . set_status ( <str> , { <str> : <str> } ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertTrue ( all ( [ i [ <str> ] == <str> for i in response . json [ <str> ] [ <str> ] ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def two_lot_3bid_1win_bug ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in 2 * self . test_lots_data :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : self . test_lots_data [ 0 ] } ) self . assertEqual ( response . status , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  self . initial_lots = lots response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] for i in lots ] } } ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : i } for i in lots ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : [ { <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : lot_id } for lot_id in lots ] } } ) bid_id = response . json [ <str> ] [ <str> ] self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , owner_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 6 ) for qualification in qualifications :          if lots [ 1 ] == qualification [ <str> ] and bid_id == qualification [ <str> ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } )  else :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } )  self . assertEqual ( response . status , <str> ) if lots [ 1 ] == qualification [ <str> ] and bid_id == qualification [ <str> ] :              self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  else :              self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] for lot_id in lots :          response = self . app . patch_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : [ { <str> : i [ <str> ] , <str> : <str> } for i in response . json [ <str> ] [ <str> ] ] , <str> : [ { <str> : i [ <str> ] , <str> : [ { <str> : j [ <str> ] , <str> : <str> . format ( i [ <str> ] ) } for j in i [ <str> ] ] , } for i in auction_bids_data ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id , lot_id ) , { <str> : { <str> : auction_bids_data } } )  lot_id = lots [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . set_status ( <str> , { <str> : <str> } ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) lot_id = lots [ 1 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) self . assertEqual ( [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == lot_id ] , [ ] ) self . set_status ( <str> , { <str> : <str> } ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . check_chronograph ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( set ( [ i [ <str> ] for i in response . json [ <str> ] [ <str> ] ] ) , set ( [ <str> , <str> ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   