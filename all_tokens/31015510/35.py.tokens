from openprocurement . tender . belowthreshold . tests . base import test_organization def create_tender_award_invalid ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) request_path = <str> . format ( self . tender_id ) response = self . app . post ( request_path , <str> , status = 415 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( request_path , <str> , content_type = <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ { <str> : <str> } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ { <str> : { <str> : 0 } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] , <str> : { <str> : [ <str> ] } , <str> : [ <str> ] , <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } , { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ { <str> : <str> , <str> : { <str> : <str> } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] , <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } , { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : <str> * 32 } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( <str> , { <str> : { <str> : [ test_organization ] , <str> : self . initial_bids [ 0 ] [ <str> ] } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) self . set_status ( <str> ) bid = self . initial_bids [ 0 ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : bid [ <str> ] [ 0 ] [ <str> ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_award ( self ) :      response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertIn ( <str> , response . headers )  def patch_tender_award ( self ) :      response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( response . json [ <str> ] [ 1 ] [ <str> ] , new_award_location ) new_award = response . json [ <str> ] [ - 1 ] response = self . app . patch_json ( <str> . format ( self . tender_id , new_award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) response = self . app . patch_json ( <str> . format ( self . tender_id , new_award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . set_status ( <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , self . expected_award_amount ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_award_active ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) response = self . app . post_json ( new_award_location [ - 81 : ] + <str> . format ( self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( new_award_location [ - 81 : ] , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 4 )  def patch_tender_award_unsuccessful ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) response = self . app . post_json ( <str> . format ( self . tender_id , self . award_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , response . json [ <str> ] [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( new_award_location [ - 81 : ] , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 4 )  def get_tender_award ( self ) :      response = self . app . get ( <str> . format ( self . tender_id , self . award_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) award_data = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def patch_tender_award_Administrator_change ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) award = response . json [ <str> ] complaintPeriod = award [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , award [ <str> ] ) , { <str> : { <str> : { <str> : award [ <str> ] [ <str> ] } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , complaintPeriod )  def create_tender_lot_award ( self ) :          self . app . authorization = ( <str> , ( <str> , <str> ) ) request_path = <str> . format ( self . tender_id ) response = self . app . post_json ( request_path , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : [ <str> ] } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) award = response . json [ <str> ] self . assertEqual ( award [ <str> ] [ 0 ] [ <str> ] , test_organization [ <str> ] ) self . assertEqual ( award [ <str> ] , self . initial_lots [ 0 ] [ <str> ] ) self . assertIn ( <str> , award ) self . assertIn ( award [ <str> ] , response . headers [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ - 1 ] , award ) response = self . app . patch_json ( <str> . format ( self . tender_id , award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertIn ( <str> , response . headers )  def patch_tender_lot_award ( self ) :          response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( response . json [ <str> ] [ - 1 ] [ <str> ] , new_award_location ) new_award = response . json [ <str> ] [ - 1 ] response = self . app . patch_json ( <str> . format ( self . tender_id , new_award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) response = self . app . patch_json ( <str> . format ( self . tender_id , new_award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . set_status ( <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , self . expected_award_amount ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_lot_award_unsuccessful ( self ) :          request_path = <str> . format ( self . tender_id ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) response = self . app . post_json ( <str> . format ( self . tender_id , self . award_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , response . json [ <str> ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , response . json [ <str> ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( new_award_location [ - 81 : ] , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . headers ) new_award_location = response . headers [ <str> ] response = self . app . patch_json ( new_award_location [ - 81 : ] + <str> . format ( self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . headers ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 4 )  def create_tender_2lot_award ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( request_path , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : self . initial_lots [ 0 ] [ <str> ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( request_path , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] , <str> : self . initial_lots [ 1 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) award = response . json [ <str> ] self . assertEqual ( award [ <str> ] [ 0 ] [ <str> ] , test_organization [ <str> ] ) self . assertEqual ( award [ <str> ] , self . initial_lots [ 1 ] [ <str> ] ) self . assertIn ( <str> , award ) self . assertIn ( award [ <str> ] , response . headers [ <str> ] ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ - 1 ] , award ) response = self . app . patch_json ( <str> . format ( self . tender_id , award [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , award [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertIn ( <str> , response . headers )  def patch_tender_2lot_award ( self ) :      request_path = <str> . format ( self . tender_id ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . get ( request_path ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) new_award = response . json [ <str> ] [ - 1 ] response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 1 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , new_award [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_award_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) self . set_status ( <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def create_tender_2lot_award_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 7 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def put_tender_2lot_award_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , key ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_2lot_award_complaint_document ( self ) :      response = self . app . post ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , self . complaint_owner_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . complaint_id , doc_id , self . complaint_owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   