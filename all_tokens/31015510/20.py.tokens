import unittest from openprocurement . api . tests . base import snitch from openprocurement . tender . belowthreshold . tests . cancellation import ( TenderCancellationResourceTestMixin , TenderCancellationDocumentResourceTestMixin ) from openprocurement . tender . belowthreshold . tests . cancellation_blanks import ( create_tender_lots_cancellation , patch_tender_lots_cancellation , create_tender_lot_cancellation , patch_tender_lot_cancellation , ) from openprocurement . tender . openua . tests . cancellation_blanks import ( create_tender_cancellation , patch_tender_cancellation , ) from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_bids , test_lots ) from openprocurement . tender . openeu . tests . cancellation_blanks import ( cancellation_active_tendering_j708 , cancellation_active_qualification_j1427 , cancellation_active_qualification , cancellation_unsuccessful_qualification , cancellation_active_award , cancellation_unsuccessful_award , bids_on_tender_cancellation_in_tendering , bids_on_tender_cancellation_in_pre_qualification , bids_on_tender_cancellation_in_pre_qualification_stand_still , bids_on_tender_cancellation_in_auction , bids_on_tender_cancellation_in_qualification , bids_on_tender_cancellation_in_awarded , ) class TenderCancellationBidsAvailabilityUtils ( object ) :      def _mark_one_bid_deleted ( self ) :          bid_id , bid_token = self . initial_bids_tokens . items ( ) [ 0 ] response = self . app . delete ( <str> . format ( self . tender_id , bid_id , bid_token ) ) self . assertEqual ( response . status , <str> ) self . valid_bids . remove ( bid_id ) return bid_id  def _prepare_bids_docs ( self ) :          doc_id_by_type = { } for bid_id , bid_token in self . initial_bids_tokens . items ( ) :              for doc_resource in [ <str> , <str> , <str> , <str> ] :                  response = self . app . post ( <str> . format ( self . tender_id , bid_id , doc_resource , bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ bid_id + doc_resource ] = { <str> : doc_id , <str> : key }   self . doc_id_by_type = doc_id_by_type  def _cancel_tender ( self ) :          orig_authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) tender = response . json [ <str> ] self . assertIn ( <str> , tender ) self . assertEqual ( tender [ <str> ] , <str> ) self . app . authorization = orig_authorization return tender  def _qualify_bids_and_switch_to_pre_qualification_stand_still ( self , qualify_all = True ) :          orig_authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 3 ) offset = 0 if qualify_all else 1 for qualification in qualifications [ offset : ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  if offset :              qualification = qualifications [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . valid_bids . remove ( qualification [ <str> ] )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = orig_authorization  def _all_documents_are_not_accessible ( self , bid_id ) :          for doc_resource in [ <str> , <str> , <str> , <str> ] :              response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource , self . doc_id_by_type [ bid_id + doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] )   def _check_visible_fields_for_invalidated_bids ( self ) :          orig_authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid_id , bid_token in self . initial_bids_tokens . items ( ) :              response = self . app . get ( <str> . format ( self . tender_id , bid_id ) ) bid_data = response . json [ <str> ] if bid_id in self . valid_bids :                  self . assertEqual ( set ( bid_data . keys ( ) ) , set ( self . bid_visible_fields ) ) for doc_resource in [ <str> , <str> ] :                      response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource ) ) docs = response . json [ <str> ] self . assertEqual ( len ( docs ) , 1 ) self . assertEqual ( docs [ 0 ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertIn ( <str> , docs [ 0 ] )  for doc_resource in [ <str> , <str> ] :                      response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource , self . doc_id_by_type [ bid_id + doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   else :                  self . assertEqual ( set ( bid_data . keys ( ) ) , set ( [ <str> , <str> ] ) ) self . _all_documents_are_not_accessible ( bid_id )   self . app . authorization = orig_authorization  def _set_auction_results ( self ) :          orig_authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : [ { <str> : i [ <str> ] , <str> : <str> . format ( i [ <str> ] ) } for i in auction_bids_data ] } } ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = orig_authorization  def _bid_document_is_accessible ( self , bid_id , doc_resource ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource ) ) docs = response . json [ <str> ] self . assertEqual ( len ( docs ) , 1 ) self . assertEqual ( docs [ 0 ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertIn ( <str> , docs [ 0 ] ) response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource , self . doc_id_by_type [ bid_id + doc_resource ] [ <str> ] ) ) doc = response . json [ <str> ] self . assertEqual ( doc [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) )   class TenderCancellationResourceTest ( BaseTenderContentWebTest , TenderCancellationResourceTestMixin ) :      initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_cancellation = snitch ( create_tender_cancellation ) test_patch_tender_cancellation = snitch ( patch_tender_cancellation )  class TenderCancellationBidsAvailabilityTest ( BaseTenderContentWebTest , TenderCancellationBidsAvailabilityUtils ) :      initial_auth = ( <str> , ( <str> , <str> ) ) initial_bids = test_bids * 2 bid_visible_fields = [ <str> , <str> , <str> , <str> , <str> ] doc_id_by_type = { } valid_bids = [ ] def setUp ( self ) :          super ( TenderCancellationBidsAvailabilityTest , self ) . setUp ( ) self . valid_bids = self . initial_bids_tokens . keys ( ) self . _prepare_bids_docs ( )  test_bids_on_tender_cancellation_in_tendering = snitch ( bids_on_tender_cancellation_in_tendering ) test_bids_on_tender_cancellation_in_pre_qualification = snitch ( bids_on_tender_cancellation_in_pre_qualification ) test_bids_on_tender_cancellation_in_pre_qualification_stand_still = snitch ( bids_on_tender_cancellation_in_pre_qualification_stand_still ) test_bids_on_tender_cancellation_in_auction = snitch ( bids_on_tender_cancellation_in_auction ) test_bids_on_tender_cancellation_in_qualification = snitch ( bids_on_tender_cancellation_in_qualification ) test_bids_on_tender_cancellation_in_awarded = snitch ( bids_on_tender_cancellation_in_awarded )  class TenderLotCancellationResourceTest ( BaseTenderContentWebTest ) :      initial_lots = test_lots initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_cancellation = snitch ( create_tender_lot_cancellation ) test_patch_tender_cancellation = snitch ( patch_tender_lot_cancellation )  class TenderLotsCancellationResourceTest ( BaseTenderContentWebTest ) :      initial_lots = 2 * test_lots initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_cancellation = snitch ( create_tender_lots_cancellation ) test_patch_tender_cancellation = snitch ( patch_tender_lots_cancellation )  class TenderAwardsCancellationResourceTest ( BaseTenderContentWebTest ) :      initial_lots = 2 * test_lots initial_status = <str> initial_bids = test_bids test_cancellation_active_tendering_j708 = snitch ( cancellation_active_tendering_j708 ) test_cancellation_active_qualification_j1427 = snitch ( cancellation_active_qualification_j1427 ) test_cancellation_active_qualification = snitch ( cancellation_active_qualification ) test_cancellation_unsuccessful_qualification = snitch ( cancellation_unsuccessful_qualification ) test_cancellation_active_award = snitch ( cancellation_active_award ) test_cancellation_unsuccessful_award = snitch ( cancellation_unsuccessful_award )  class TenderCancellationDocumentResourceTest ( BaseTenderContentWebTest , TenderCancellationDocumentResourceTestMixin ) :      initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderCancellationDocumentResourceTest , self ) . setUp ( ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) cancellation = response . json [ <str> ] self . cancellation_id = cancellation [ <str> ]   def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( TenderCancellationDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderCancellationResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   