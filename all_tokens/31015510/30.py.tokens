import os from datetime import datetime , timedelta from openprocurement . api . constants import SANDBOX_MODE from openprocurement . tender . openua . tests . base import ( BaseTenderUAWebTest as BaseBaseTenderWebTest ) from openprocurement . api . utils import apply_data_patch , get_now from openprocurement . tender . openeu . constants import ( TENDERING_DAYS , TENDERING_DURATION , QUESTIONS_STAND_STILL , COMPLAINT_STAND_STILL ) test_bids = [ { <str> : [ { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ] , <str> : { <str> : 469 , <str> : <str> , <str> : True } , <str> : True , <str> : True } , { <str> : [ { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , } ] , <str> : { <str> : 479 , <str> : <str> , <str> : True } , <str> : True , <str> : True } ] now = datetime . now ( ) test_tender_data = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , } , <str> : { <str> : 500 , <str> : <str> } , <str> : { <str> : 35 , <str> : <str> } , <str> : [ { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> } ] , <str> : { <str> : <str> , <str> : <str> } , <str> : 5 , <str> : { <str> : ( now + timedelta ( days = 2 ) ) . isoformat ( ) , <str> : ( now + timedelta ( days = 5 ) ) . isoformat ( ) } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } ] , <str> : { <str> : ( now + timedelta ( days = TENDERING_DAYS + 1 ) ) . isoformat ( ) } , <str> : <str> , } if SANDBOX_MODE :      test_tender_data [ <str> ] = <str>  test_features_tender_data = test_tender_data . copy ( ) test_features_item = test_features_tender_data [ <str> ] [ 0 ] . copy ( ) test_features_item [ <str> ] = <str> test_features_tender_data [ <str> ] = [ test_features_item ] test_features_tender_data [ <str> ] = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ { <str> : 0.1 , <str> : <str> } , { <str> : 0.15 , <str> : <str> } ] } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ { <str> : 0.05 , <str> : <str> } , { <str> : 0.1 , <str> : <str> } , { <str> : 0.15 , <str> : <str> } ] } ] test_lots = [ { <str> : <str> , <str> : <str> , <str> : test_tender_data [ <str> ] , <str> : test_tender_data [ <str> ] , } ] class BaseTenderWebTest ( BaseBaseTenderWebTest ) :      initial_data = test_tender_data initial_status = None initial_bids = None initial_lots = None initial_auth = None relative_to = os . path . dirname ( __file__ ) forbidden_question_modification_actions_status = <str> question_claim_block_status = <str> forbidden_auction_actions_status = <str> forbidden_auction_document_create_actions_status = <str> def go_to_enquiryPeriod_end ( self ) :          now = get_now ( ) self . set_status ( <str> , { <str> : { <str> : ( now - timedelta ( days = 28 ) ) . isoformat ( ) , <str> : ( now - ( timedelta ( minutes = 1 ) if SANDBOX_MODE else timedelta ( days = 1 ) ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 28 ) ) . isoformat ( ) , <str> : ( now + ( timedelta ( minutes = 2 ) if SANDBOX_MODE else timedelta ( days = 2 ) ) ) . isoformat ( ) } } )  def setUp ( self ) :          super ( BaseBaseTenderWebTest , self ) . setUp ( ) if self . initial_auth :              self . app . authorization = self . initial_auth  else :              self . app . authorization = ( <str> , ( <str> , <str> ) )  self . couchdb_server = self . app . app . registry . couchdb_server self . db = self . app . app . registry . db if self . docservice :              self . setUpDS ( )   def tearDown ( self ) :          if self . docservice :              self . tearDownDS ( )  del self . couchdb_server [ self . db . name ]  def check_chronograph ( self ) :          authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = authorization self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  def time_shift ( self , status , extra = None ) :          now = get_now ( ) tender = self . db . get ( self . tender_id ) data = { } if status == <str> :              data . update ( { <str> : { <str> : ( now - timedelta ( days = 28 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 28 ) ) . isoformat ( ) , <str> : ( now + timedelta ( days = 2 ) ) . isoformat ( ) } , } )  if status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) , } } )  elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) , } , <str> : { <str> : ( now ) . isoformat ( ) , } , } ) if <str> in tender and tender [ <str> ] :                  data [ <str> ] = [ ] for index , lot in enumerate ( tender [ <str> ] ) :                      lot_data = { <str> : lot [ <str> ] } if lot [ <str> ] is <str> :                          lot_data [ <str> ] = { <str> : ( now + COMPLAINT_STAND_STILL ) . isoformat ( ) }  data [ <str> ] . append ( lot_data )   else :                  data . update ( { <str> : { <str> : ( now + COMPLAINT_STAND_STILL ) . isoformat ( ) } } )   elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - TENDERING_DURATION + QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - COMPLAINT_STAND_STILL ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } } ) if <str> in tender and tender [ <str> ] :                  data [ <str> ] = [ ] for index , lot in enumerate ( tender [ <str> ] ) :                      lot_data = { <str> : lot [ <str> ] } if lot [ <str> ] == <str> :                          lot_data [ <str> ] = { <str> : ( now ) . isoformat ( ) }  data [ <str> ] . append ( lot_data )   else :                  data . update ( { <str> : { <str> : now . isoformat ( ) } } )   elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } } ) if self . initial_lots :                  data . update ( { <str> : [ { <str> : { <str> : ( now - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) } } for i in self . initial_lots ] } )   if extra :              data . update ( extra )  tender . update ( apply_data_patch ( tender , data ) ) self . db . save ( tender )  def set_status ( self , status , extra = None ) :          tender = self . db . get ( self . tender_id ) def activate_bids ( ) :              if tender . get ( <str> , <str> ) :                  bids = tender [ <str> ] for bid in bids :                      if bid [ <str> ] == <str> :                          bid . update ( { <str> : <str> } )   data . update ( { <str> : bids } )   data = { <str> : status } if status == <str> :              data . update ( { <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now + TENDERING_DURATION - QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now + TENDERING_DURATION ) . isoformat ( ) } } )  elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) , } , <str> : { <str> : ( now ) . isoformat ( ) , } } )  elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) , } , <str> : { <str> : ( now ) . isoformat ( ) , } , <str> : { <str> : ( now + COMPLAINT_STAND_STILL ) . isoformat ( ) } } ) activate_bids ( )  elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - TENDERING_DURATION + QUESTIONS_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL ) . isoformat ( ) } , <str> : { <str> : ( now - COMPLAINT_STAND_STILL ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } , <str> : { <str> : ( now ) . isoformat ( ) } } ) if self . initial_lots :                  data . update ( { <str> : [ { <str> : { <str> : ( now ) . isoformat ( ) } } for i in self . initial_lots ] } )  activate_bids ( )  elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 2 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL - COMPLAINT_STAND_STILL - timedelta ( days = 1 ) ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 2 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - timedelta ( days = 1 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } , <str> : { <str> : ( now ) . isoformat ( ) } } ) activate_bids ( ) if self . initial_lots :                  data . update ( { <str> : [ { <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } } for i in self . initial_lots ] } )   elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL - COMPLAINT_STAND_STILL - timedelta ( days = 2 ) ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - timedelta ( days = 2 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } } ) activate_bids ( ) if self . initial_lots :                  data . update ( { <str> : [ { <str> : { <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) } } for i in self . initial_lots ] } )   elif status == <str> :              data . update ( { <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 4 ) ) . isoformat ( ) , <str> : ( now - QUESTIONS_STAND_STILL - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) } , <str> : { <str> : ( now - TENDERING_DURATION - COMPLAINT_STAND_STILL - timedelta ( days = 4 ) ) . isoformat ( ) , <str> : ( now - COMPLAINT_STAND_STILL - timedelta ( days = 3 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) } , <str> : { <str> : ( now - timedelta ( days = 1 ) ) . isoformat ( ) , <str> : ( now ) . isoformat ( ) } } ) if self . initial_lots :                  data . update ( { <str> : [ { <str> : { <str> : ( now - timedelta ( days = 3 ) ) . isoformat ( ) , <str> : ( now - timedelta ( days = 2 ) ) . isoformat ( ) } } for i in self . initial_lots ] } )   if extra :              data . update ( extra )  tender . update ( apply_data_patch ( tender , data ) ) self . db . save ( tender ) authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = authorization self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) return response  def prepare_award ( self ) :          self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] for lot_id in self . initial_lots :              response = self . app . post_json ( <str> . format ( self . tender_id , lot_id [ <str> ] ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   class BaseTenderContentWebTest ( BaseTenderWebTest ) :      initial_data = test_tender_data initial_status = None initial_bids = None initial_lots = None relative_to = os . path . dirname ( __file__ ) def setUp ( self ) :          super ( BaseTenderContentWebTest , self ) . setUp ( ) self . create_tender ( )    