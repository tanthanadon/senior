import unittest from openprocurement . api . tests . base import snitch from openprocurement . tender . belowthreshold . tests . base import test_organization from openprocurement . tender . belowthreshold . tests . award import ( TenderAwardComplaintResourceTestMixin , TenderAwardDocumentResourceTestMixin , TenderAwardComplaintDocumentResourceTestMixin , Tender2LotAwardDocumentResourceTestMixin ) from openprocurement . tender . belowthreshold . tests . award_blanks import ( get_tender_lot_award_complaint , get_tender_lot_award_complaints , ) from openprocurement . tender . openua . tests . award import TenderUaAwardComplaintResourceTestMixin from openprocurement . tender . openua . tests . award_blanks import ( create_tender_lots_award_complaint , patch_tender_lots_award_complaint , create_tender_lot_award_complaint , patch_tender_lot_award_complaint , ) from openprocurement . tender . openeu . tests . award_blanks import ( patch_tender_award_complaint_document , create_tender_2lot_award_complaint_document , put_tender_2lot_award_complaint_document , patch_tender_2lot_award_complaint_document , create_tender_2lot_award , patch_tender_2lot_award , create_tender_lot_award , patch_tender_lot_award , patch_tender_lot_award_unsuccessful , create_tender_award_invalid , create_tender_award , get_tender_award , patch_tender_award , patch_tender_award_active , patch_tender_award_unsuccessful , patch_tender_award_Administrator_change , ) from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_bids , test_lots ) class TenderAwardResourceTestMixin ( object ) :      test_create_tender_award_invalid = snitch ( create_tender_award_invalid ) test_create_tender_award = snitch ( create_tender_award ) test_patch_tender_award = snitch ( patch_tender_award ) test_patch_tender_award_active = snitch ( patch_tender_award_active ) test_patch_tender_award_unsuccessful = snitch ( patch_tender_award_unsuccessful ) test_get_tender_award = snitch ( get_tender_award ) test_patch_tender_award_Administrator_change = snitch ( patch_tender_award_Administrator_change )  class TenderAwardResourceTest ( BaseTenderContentWebTest , TenderAwardResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_lots = test_lots initial_auth = ( <str> , ( <str> , <str> ) ) expected_award_amount = test_bids [ 0 ] [ <str> ] [ <str> ] def setUp ( self ) :          super ( TenderAwardResourceTest , self ) . setUp ( ) self . prepare_award ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . award_id = response . json [ <str> ] [ 0 ] [ <str> ] self . bid_token = self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ] self . app . authorization = ( <str> , ( <str> , <str> ) )   class TenderLotAwardResourceTestMixin ( object ) :      test_create_tender_award = snitch ( create_tender_lot_award ) test_patch_tender_award = snitch ( patch_tender_lot_award ) test_patch_tender_award_unsuccessful = snitch ( patch_tender_lot_award_unsuccessful )  class TenderLotAwardResourceTest ( BaseTenderContentWebTest , TenderLotAwardResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_lots = test_lots initial_auth = ( <str> , ( <str> , <str> ) ) expected_award_amount = test_bids [ 0 ] [ <str> ] [ <str> ] def setUp ( self ) :          super ( TenderLotAwardResourceTest , self ) . setUp ( ) self . prepare_award ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . award_id = response . json [ <str> ] [ 0 ] [ <str> ] self . bid_token = self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ] self . app . authorization = ( <str> , ( <str> , <str> ) )   class Tender2LotAwardResourceTestMixin ( object ) :      test_create_tender_award = snitch ( create_tender_2lot_award ) test_patch_tender_award = snitch ( patch_tender_2lot_award )  class Tender2LotAwardResourceTest ( BaseTenderContentWebTest , Tender2LotAwardResourceTestMixin ) :      initial_status = <str> initial_lots = 2 * test_lots initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( Tender2LotAwardResourceTest , self ) . setUp ( ) self . prepare_award ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . award_id = response . json [ <str> ] [ 0 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) )   class TenderAwardComplaintResourceTest ( BaseTenderContentWebTest , TenderAwardComplaintResourceTestMixin , TenderUaAwardComplaintResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_lots = 2 * test_lots initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderAwardComplaintResourceTest , self ) . setUp ( ) self . prepare_award ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . award_id = response . json [ <str> ] [ 0 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . bid_token = self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ]   class TenderLotAwardComplaintResourceTestMixin ( object ) :      test_create_tender_award_complaint = snitch ( create_tender_lot_award_complaint ) test_patch_tender_award_complaint = snitch ( patch_tender_lot_award_complaint ) test_get_tender_award_complaint = snitch ( get_tender_lot_award_complaint ) test_get_tender_award_complaints = snitch ( get_tender_lot_award_complaints )  class TenderLotAwardComplaintResourceTest ( BaseTenderContentWebTest , TenderLotAwardComplaintResourceTestMixin ) :      initial_status = <str> initial_lots = test_lots initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderLotAwardComplaintResourceTest , self ) . setUp ( ) self . prepare_award ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) bid = self . initial_bids [ 0 ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : bid [ <str> ] , <str> : bid [ <str> ] [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . bid_token = self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ]   class Tender2LotAwardComplaintResourceTestMixin ( object ) :      test_create_tender_award_complaint = snitch ( create_tender_lots_award_complaint ) test_patch_tender_award_complaint = snitch ( patch_tender_lots_award_complaint )  class Tender2LotAwardComplaintResourceTest ( TenderLotAwardComplaintResourceTest , Tender2LotAwardComplaintResourceTestMixin ) :      initial_lots = 2 * test_lots  class TenderAwardComplaintDocumentResourceTest ( BaseTenderContentWebTest , TenderAwardComplaintDocumentResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids def setUp ( self ) :          super ( TenderAwardComplaintDocumentResourceTest , self ) . setUp ( ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ] self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . award_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization } } ) complaint = response . json [ <str> ] self . complaint_id = complaint [ <str> ] self . complaint_owner_token = response . json [ <str> ] [ <str> ]  test_patch_tender_award_complaint_document = snitch ( patch_tender_award_complaint_document )  class Tender2LotAwardComplaintDocumentResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> initial_bids = test_bids initial_lots = 2 * test_lots def setUp ( self ) :          super ( Tender2LotAwardComplaintDocumentResourceTest , self ) . setUp ( ) bid = self . initial_bids [ 0 ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : bid [ <str> ] , <str> : bid [ <str> ] [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ] self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . award_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : test_organization } } ) complaint = response . json [ <str> ] self . complaint_id = complaint [ <str> ] self . complaint_owner_token = response . json [ <str> ] [ <str> ]  test_create_tender_award_complaint_document = snitch ( create_tender_2lot_award_complaint_document ) test_put_tender_award_complaint_document = snitch ( put_tender_2lot_award_complaint_document ) test_patch_tender_award_complaint_document = snitch ( patch_tender_2lot_award_complaint_document )  class TenderAwardDocumentResourceTest ( BaseTenderContentWebTest , TenderAwardDocumentResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids def setUp ( self ) :          super ( TenderAwardDocumentResourceTest , self ) . setUp ( ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ]   class Tender2LotAwardDocumentResourceTest ( BaseTenderContentWebTest , Tender2LotAwardDocumentResourceTestMixin ) :      initial_status = <str> initial_bids = test_bids initial_lots = 2 * test_lots def setUp ( self ) :          super ( Tender2LotAwardDocumentResourceTest , self ) . setUp ( ) bid = self . initial_bids [ 0 ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ test_organization ] , <str> : <str> , <str> : bid [ <str> ] , <str> : bid [ <str> ] [ 0 ] [ <str> ] } } ) award = response . json [ <str> ] self . award_id = award [ <str> ]   def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( Tender2LotAwardComplaintDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( Tender2LotAwardComplaintResourceTest ) ) suite . addTest ( unittest . makeSuite ( Tender2LotAwardDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( Tender2LotAwardResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderAwardComplaintDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderAwardComplaintResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderAwardDocumentResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderAwardResourceTest ) ) suite . addTest ( unittest . makeSuite ( TenderLotAwardResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   