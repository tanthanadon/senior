import os import shutil import sys import tempfile from optparse import OptionParser __version__ = <str> tmpeggs = tempfile . mkdtemp ( prefix = <str> ) usage = parser = OptionParser ( usage = usage ) parser . add_option ( <str> , action = <str> , default = False , help = ( <str> ) ) parser . add_option ( <str> , <str> , dest = <str> , action = <str> , default = False , help = ( <str> <str> <str> <str> <str> <str> ) ) parser . add_option ( <str> , <str> , help = ( <str> <str> ) ) parser . add_option ( <str> , <str> , help = ( <str> ) ) parser . add_option ( <str> , action = <str> , default = False , help = ( <str> ) ) parser . add_option ( <str> , help = <str> ) parser . add_option ( <str> , help = <str> ) parser . add_option ( <str> , help = ( <str> <str> ) ) options , args = parser . parse_args ( ) if options . version :      print ( <str> % __version__ ) sys . exit ( 0 )  try :      from urllib . request import urlopen  except ImportError :      from urllib2 import urlopen  ez = { } if os . path . exists ( <str> ) :      exec ( open ( <str> ) . read ( ) , ez )  else :      exec ( urlopen ( <str> ) . read ( ) , ez )  if not options . allow_site_packages :      import site if hasattr ( site , <str> ) :          for sitepackage_path in site . getsitepackages ( ) :              if sitepackage_path != sys . prefix :                  sys . path [ : ] = [ x for x in sys . path if sitepackage_path not in x ]     setup_args = dict ( to_dir = tmpeggs , download_delay = 0 ) if options . setuptools_version is not None :      setup_args [ <str> ] = options . setuptools_version  else :      setup_args [ <str> ] = <str>  if options . setuptools_to_dir is not None :      setup_args [ <str> ] = options . setuptools_to_dir  ez [ <str> ] ( ** setup_args ) import setuptools import pkg_resources for path in sys . path :      if path not in pkg_resources . working_set . entries :          pkg_resources . working_set . add_entry ( path )   ws = pkg_resources . working_set setuptools_path = ws . find ( pkg_resources . Requirement . parse ( <str> ) ) . location cmd = [ sys . executable , <str> , <str> % setuptools_path + <str> , <str> , tmpeggs ] find_links = os . environ . get ( <str> , options . find_links or ( <str> if options . accept_buildout_test_releases else None ) ) if find_links :      cmd . extend ( [ <str> , find_links ] )  requirement = <str> version = options . buildout_version or <str> if version is None and not options . accept_buildout_test_releases :      import setuptools . package_index _final_parts = <str> , <str> def _final_version ( parsed_version ) :          try :              return not parsed_version . is_prerelease  except AttributeError :              for part in parsed_version :                  if ( part [ : 1 ] == <str> ) and ( part not in _final_parts ) :                      return False   return True   index = setuptools . package_index . PackageIndex ( search_path = [ setuptools_path ] ) if find_links :          index . add_find_links ( ( find_links , ) )  req = pkg_resources . Requirement . parse ( requirement ) if index . obtain ( req ) is not None :          best = [ ] bestv = None for dist in index [ req . project_name ] :              distv = dist . parsed_version if _final_version ( distv ) :                  if bestv is None or distv > bestv :                      best = [ dist ] bestv = distv  elif distv == bestv :                      best . append ( dist )    if best :              best . sort ( ) version = best [ - 1 ] . version    if version :      requirement = <str> . join ( ( requirement , version ) )  cmd . append ( requirement ) import subprocess if subprocess . call ( cmd ) != 0 :      raise Exception ( <str> % repr ( cmd ) [ 1 : - 1 ] )  ws . add_entry ( tmpeggs ) ws . require ( requirement ) import zc . buildout . buildout if not [ a for a in args if <str> not in a ] :      args . append ( <str> )  if options . config_file is not None :      args [ 0 : 0 ] = [ <str> , options . config_file ]  zc . buildout . buildout . main ( args ) shutil . rmtree ( tmpeggs )  