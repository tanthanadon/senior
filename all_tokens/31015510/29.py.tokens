import unittest from openprocurement . api . tests . base import snitch from openprocurement . tender . openeu . tests . base import ( BaseTenderContentWebTest , test_bids , test_lots , ) from openprocurement . tender . openeu . tests . qualification_blanks import ( create_tender_2lot_qualification_complaint_document , put_tender_2lot_qualification_complaint_document , patch_tender_2lot_qualification_complaint_document , complaint_not_found , create_tender_qualification_complaint_document , put_tender_qualification_complaint_document , patch_tender_qualification_complaint_document , create_tender_qualification_claim , create_tender_2lot_qualification_complaint , patch_tender_2lot_qualification_complaint , change_status_to_standstill_with_complaint_cancel_lot , create_tender_lot_qualification_complaint , patch_tender_lot_qualification_complaint , get_tender_lot_qualification_complaint , get_tender_lot_qualification_complaints , create_tender_qualification_complaint_invalid , create_tender_qualification_complaint , patch_tender_qualification_complaint , review_tender_qualification_complaint , review_tender_qualification_stopping_complaint , review_tender_award_claim , get_tender_qualification_complaint , get_tender_qualification_complaints , change_status_to_standstill_with_complaint , not_found , create_qualification_document , put_qualification_document , patch_qualification_document , create_qualification_document_after_status_change , put_qualification_document_after_status_change , create_qualification_document_bot , patch_document_not_author , lot_patch_tender_qualifications , lot_get_tender_qualifications_collection , tender_qualification_cancelled , post_tender_qualifications , get_tender_qualifications_collection , patch_tender_qualifications , get_tender_qualifications , patch_tender_qualifications_after_status_change , switch_bid_status_unsuccessul_to_active ) class TenderQualificationResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderQualificationResourceTest , self ) . setUp ( ) self . set_status ( <str> , extra = { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth  test_post_tender_qualifications = snitch ( post_tender_qualifications ) test_get_tender_qualifications_collection = snitch ( get_tender_qualifications_collection ) test_patch_tender_qualifications = snitch ( patch_tender_qualifications ) test_get_tender_qualifications = snitch ( get_tender_qualifications ) test_patch_tender_qualifications_after_status_change = snitch ( patch_tender_qualifications_after_status_change )  class Tender2LotQualificationResourceTest ( TenderQualificationResourceTest ) :      initial_status = <str> initial_lots = 2 * test_lots initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderQualificationResourceTest , self ) . setUp ( ) self . set_status ( <str> , extra = { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ]  test_patch_tender_qualifications = snitch ( lot_patch_tender_qualifications ) test_get_tender_qualifications_collection = snitch ( lot_get_tender_qualifications_collection ) test_tender_qualification_cancelled = snitch ( tender_qualification_cancelled )  class TenderQualificationDocumentResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderQualificationDocumentResourceTest , self ) . setUp ( ) self . time_shift ( <str> ) self . check_chronograph ( ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) self . assertEqual ( response . status , <str> ) self . qualifications = response . json [ <str> ] self . assertEqual ( len ( self . qualifications ) , 2 )  test_not_found = snitch ( not_found ) test_create_qualification_document = snitch ( create_qualification_document ) test_put_qualification_document = snitch ( put_qualification_document ) test_patch_qualification_document = snitch ( patch_qualification_document ) test_create_qualification_document_after_status_change = snitch ( create_qualification_document_after_status_change ) test_put_qualification_document_after_status_change = snitch ( put_qualification_document_after_status_change ) test_create_qualification_document_bot = snitch ( create_qualification_document_bot ) test_patch_document_not_author = snitch ( patch_document_not_author )  class TenderQualificationComplaintResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderQualificationComplaintResourceTest , self ) . setUp ( ) self . set_status ( <str> , extra = { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . qualification_id = qualifications [ 0 ] [ <str> ] for qualification in qualifications :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  test_create_tender_qualification_complaint_invalid = snitch ( create_tender_qualification_complaint_invalid ) test_create_tender_qualification_complaint = snitch ( create_tender_qualification_complaint ) test_patch_tender_qualification_complaint = snitch ( patch_tender_qualification_complaint ) test_review_tender_qualification_complaint = snitch ( review_tender_qualification_complaint ) test_review_tender_qualification_stopping_complaint = snitch ( review_tender_qualification_stopping_complaint ) test_review_tender_award_claim = snitch ( review_tender_award_claim ) test_get_tender_qualification_complaint = snitch ( get_tender_qualification_complaint ) test_get_tender_qualification_complaints = snitch ( get_tender_qualification_complaints ) test_change_status_to_standstill_with_complaint = snitch ( change_status_to_standstill_with_complaint )  class TenderLotQualificationComplaintResourceTest ( TenderQualificationComplaintResourceTest ) :      initial_lots = test_lots initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_qualification_complaint = snitch ( create_tender_lot_qualification_complaint ) test_patch_tender_qualification_complaint = snitch ( patch_tender_lot_qualification_complaint ) test_get_tender_qualification_complaint = snitch ( get_tender_lot_qualification_complaint ) test_get_tender_qualification_complaints = snitch ( get_tender_lot_qualification_complaints )  class Tender2LotQualificationComplaintResourceTest ( TenderLotQualificationComplaintResourceTest ) :      initial_lots = 2 * test_lots initial_auth = ( <str> , ( <str> , <str> ) ) after_qualification_switch_to = <str> test_create_tender_qualification_complaint = snitch ( create_tender_2lot_qualification_complaint ) test_patch_tender_qualification_complaint = snitch ( patch_tender_2lot_qualification_complaint ) test_change_status_to_standstill_with_complaint_cancel_lot = snitch ( change_status_to_standstill_with_complaint_cancel_lot )  class Tender2LotQualificationClaimResourceTest ( Tender2LotQualificationComplaintResourceTest ) :      after_qualification_switch_to = <str> def setUp ( self ) :          super ( TenderQualificationComplaintResourceTest , self ) . setUp ( ) self . set_status ( <str> , extra = { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . qualification_id = qualifications [ 0 ] [ <str> ] for qualification in qualifications :              if qualification [ <str> ] == self . initial_bids [ 0 ] [ <str> ] :                  response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  else :                  response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . unsuccessful_qualification_id = qualification [ <str> ]   response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  test_create_tender_qualification_claim = snitch ( create_tender_qualification_claim )  class TenderQualificationComplaintDocumentResourceTest ( BaseTenderContentWebTest ) :      initial_status = <str> initial_bids = test_bids initial_auth = ( <str> , ( <str> , <str> ) ) def setUp ( self ) :          super ( TenderQualificationComplaintDocumentResourceTest , self ) . setUp ( ) self . set_status ( <str> , extra = { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = auth response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] self . qualification_id = qualifications [ 0 ] [ <str> ] for qualification in qualifications :              response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . qualification_id , self . initial_bids_tokens . values ( ) [ 0 ] ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . initial_bids [ 0 ] [ <str> ] [ 0 ] } } ) complaint = response . json [ <str> ] self . complaint_id = complaint [ <str> ] self . complaint_owner_token = response . json [ <str> ] [ <str> ]  test_not_found = snitch ( complaint_not_found ) test_create_tender_qualification_complaint_document = snitch ( create_tender_qualification_complaint_document ) test_put_tender_qualification_complaint_document = snitch ( put_tender_qualification_complaint_document ) test_patch_tender_qualification_complaint_document = snitch ( patch_tender_qualification_complaint_document )  class Tender2LotQualificationComplaintDocumentResourceTest ( TenderQualificationComplaintDocumentResourceTest ) :      initial_lots = 2 * test_lots initial_auth = ( <str> , ( <str> , <str> ) ) test_create_tender_qualification_complaint_document = snitch ( create_tender_2lot_qualification_complaint_document ) test_put_tender_qualification_complaint_document = snitch ( put_tender_2lot_qualification_complaint_document ) test_patch_tender_qualification_complaint_document = snitch ( patch_tender_2lot_qualification_complaint_document )  class TenderIssueCBD1713Test ( Tender2LotQualificationResourceTest ) :      test_switch_bid_status_unsuccessul_to_active = snitch ( switch_bid_status_unsuccessul_to_active )  def suite ( ) :      suite = unittest . TestSuite ( ) suite . addTest ( unittest . makeSuite ( TenderQualificationResourceTest ) ) return suite  if __name__ == <str> :      unittest . main ( defaultTest = <str> )   