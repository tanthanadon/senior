from datetime import timedelta from copy import deepcopy from openprocurement . api . constants import CPV_ITEMS_CLASS_FROM from openprocurement . api . utils import get_now from openprocurement . tender . core . constants import ( NOT_REQUIRED_ADDITIONAL_CLASSIFICATION_FROM ) from openprocurement . tender . belowthreshold . tests . base import test_organization from openprocurement . tender . openeu . models import Tender def simple_add_tender ( self ) :      u = Tender ( self . initial_data ) u . tenderID = <str> assert u . id is None assert u . rev is None u . store ( self . db ) assert u . id is not None assert u . rev is not None fromdb = self . db . get ( u . id ) assert u . tenderID == fromdb [ <str> ] assert u . doc_type == <str> assert u . procurementMethodType == <str> assert fromdb [ <str> ] == <str> u . delete_instance ( self . db )  def create_tender_invalid ( self ) :      request_path = <str> response = self . app . post ( request_path , <str> , status = 415 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( request_path , <str> , content_type = <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : [ ] } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> } } , status = 415 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) self . assertIn ( { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , response . json [ <str> ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : { <str> : <str> } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> , <str> : { <str> : <str> } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] self . initial_data [ <str> ] = { <str> : <str> , <str> : <str> } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] = data self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) self . initial_data [ <str> ] [ <str> ] = ( get_now ( ) - timedelta ( minutes = 30 ) ) . isoformat ( ) response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) del self . initial_data [ <str> ] [ <str> ] self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) now = get_now ( ) self . initial_data [ <str> ] = { <str> : now . isoformat ( ) , <str> : now . isoformat ( ) } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) del self . initial_data [ <str> ] self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) self . initial_data [ <str> ] = { <str> : ( now + timedelta ( days = 35 ) ) . isoformat ( ) , <str> : ( now + timedelta ( days = 35 ) ) . isoformat ( ) } self . initial_data [ <str> ] = { <str> : ( now + timedelta ( days = 34 ) ) . isoformat ( ) , <str> : ( now + timedelta ( days = 34 ) ) . isoformat ( ) } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) del self . initial_data [ <str> ] del self . initial_data [ <str> ] self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] self . initial_data [ <str> ] = { <str> : <str> } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] = data self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] self . initial_data [ <str> ] = { <str> : <str> , <str> : False } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] = data self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] self . initial_data [ <str> ] = { <str> : <str> , <str> : <str> } response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] = data self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] [ 0 ] . pop ( <str> ) if get_now ( ) > CPV_ITEMS_CLASS_FROM :          cpv_code = self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] = <str>  status = 422 if get_now ( ) < NOT_REQUIRED_ADDITIONAL_CLASSIFICATION_FROM else 201 response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = status ) self . initial_data [ <str> ] [ 0 ] [ <str> ] = data if get_now ( ) > CPV_ITEMS_CLASS_FROM :          self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] = cpv_code  if status == 201 :          self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  else :          self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  data = self . initial_data [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] self . initial_data [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] = <str> if get_now ( ) > CPV_ITEMS_CLASS_FROM :          cpv_code = self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] = <str>  response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] = data if get_now ( ) > CPV_ITEMS_CLASS_FROM :          self . initial_data [ <str> ] [ 0 ] [ <str> ] [ <str> ] = cpv_code  self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) if get_now ( ) > CPV_ITEMS_CLASS_FROM :          self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  else :          self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  data = self . initial_data [ <str> ] [ <str> ] [ <str> ] del self . initial_data [ <str> ] [ <str> ] [ <str> ] response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] [ <str> ] [ <str> ] = data self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : { <str> : [ <str> ] } } , <str> : <str> , <str> : <str> } ] ) data = self . initial_data [ <str> ] [ 0 ] . copy ( ) classification = data [ <str> ] . copy ( ) classification [ <str> ] = <str> data [ <str> ] = classification self . initial_data [ <str> ] = [ self . initial_data [ <str> ] [ 0 ] , data ] response = self . app . post_json ( request_path , { <str> : self . initial_data } , status = 422 ) self . initial_data [ <str> ] = self . initial_data [ <str> ] [ : 1 ] self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = deepcopy ( self . initial_data ) del data [ <str> ] [ 0 ] [ <str> ] response = self . app . post_json ( request_path , { <str> : data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  def create_tender_generated ( self ) :      data = self . initial_data . copy ( ) data . update ( { <str> : <str> , <str> : <str> , <str> : <str> } ) response = self . app . post_json ( <str> , { <str> : data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) tender = response . json [ <str> ] if <str> in tender :          tender . pop ( <str> )  self . assertEqual ( set ( tender ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) self . assertNotEqual ( data [ <str> ] , tender [ <str> ] ) self . assertNotEqual ( data [ <str> ] , tender [ <str> ] ) self . assertNotEqual ( data [ <str> ] , tender [ <str> ] )  def patch_tender ( self ) :      response = self . app . get ( <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 0 ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) self . assertEqual ( response . status , <str> ) tender = response . json [ <str> ] self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] dateModified = tender . pop ( <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : tender [ <str> ] [ <str> ] } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : [ <str> ] } ] ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ <str> ] ) new_tender = response . json [ <str> ] new_enquiryPeriod = new_tender . pop ( <str> ) new_dateModified = new_tender . pop ( <str> ) tender . pop ( <str> ) tender [ <str> ] = <str> self . assertEqual ( tender , new_tender ) self . assertNotEqual ( dateModified , new_dateModified ) revisions = self . db . get ( tender [ <str> ] ) . get ( <str> ) self . assertTrue ( any ( [ i for i in revisions [ - 1 ] [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == <str> ] ) ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : new_dateModified } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) new_tender2 = response . json [ <str> ] new_enquiryPeriod2 = new_tender2 . pop ( <str> ) new_dateModified2 = new_tender2 . pop ( <str> ) self . assertEqual ( new_tender , new_tender2 ) self . assertNotEqual ( new_enquiryPeriod , new_enquiryPeriod2 ) self . assertNotEqual ( new_dateModified , new_dateModified2 ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : <str> } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ self . initial_data [ <str> ] [ 0 ] ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ { } , self . initial_data [ <str> ] [ 0 ] ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) item0 = response . json [ <str> ] [ <str> ] [ 0 ] item1 = response . json [ <str> ] [ <str> ] [ 1 ] self . assertNotEqual ( item0 . pop ( <str> ) , item1 . pop ( <str> ) ) self . assertEqual ( item0 , item1 ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ { } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] [ <str> ] ) , 1 ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ { <str> : [ tender [ <str> ] [ 0 ] [ <str> ] [ 0 ] for i in range ( 3 ) ] } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : [ { <str> : tender [ <str> ] [ 0 ] [ <str> ] } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : new_dateModified2 } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : True } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] , { <str> : { <str> : <str> } , <str> : <str> , <str> : <str> } ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : 12 } } } ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 12 ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : { <str> : <str> } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> ) response = self . app . patch_json ( <str> . format ( tender [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def invalid_bid_tender_features ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> ) self . assertEqual ( response . json [ <str> ] , [ ] ) data = deepcopy ( self . initial_data ) data [ <str> ] = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ { <str> : 0.05 , <str> : <str> } , { <str> : 0.1 , <str> : <str> } ] } ] response = self . app . post_json ( <str> , { <str> : data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) tender = response . json [ <str> ] tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ { <str> : <str> , <str> : 0.1 } ] , <str> : [ test_organization ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid_id = response . json [ <str> ] [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : <str> } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( tender_id , bid_id , bid_token ) , { <str> : { <str> : [ { <str> : <str> } ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ { <str> : [ { <str> : 0.2 } ] } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( 0.2 , response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( tender_id , bid_id , bid_token ) , { <str> : { <str> : [ { <str> : 0.2 } ] , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : [ ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . set_status ( <str> , { <str> : { <str> : None } , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] , tender [ <str> ] )  def invalid_bid_tender_lot ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> ) self . assertEqual ( response . json [ <str> ] , [ ] ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) tender = response . json [ <str> ] tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] lots = [ ] for lot in self . test_lots_data * 2 :          response = self . app . post_json ( <str> . format ( tender_id , owner_token ) , { <str> : lot } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) lots . append ( response . json [ <str> ] [ <str> ] )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : <str> , <str> : [ { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : i } for i in lots ] , <str> : [ test_organization ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . delete ( <str> . format ( tender_id , lots [ 0 ] , owner_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . set_status ( <str> , { <str> : { <str> : None } , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] , tender [ <str> ] )  def one_bid_tender ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> ) self . assertEqual ( response . json [ <str> ] , [ ] ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] bidder_data = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def unsuccessful_after_prequalification_tender ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> ) self . assertEqual ( response . json [ <str> ] , [ ] ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] bidder_data = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 3 ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( tender_id , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for bid in response . json [ <str> ] [ <str> ] :          self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , ] ) )   def one_qualificated_bid_tender ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> ) self . assertEqual ( response . json [ <str> ] , [ ] ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] tender_owner_token = response . json [ <str> ] [ <str> ] bidder_data = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 1 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 2 ) self . app . authorization = None response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] , <str> * 32 ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 1 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( tender_id , qualifications [ 1 ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) response = self . app . patch_json ( <str> . format ( tender_id , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def multiple_bidders_tender ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] tender_owner_token = response . json [ <str> ] [ <str> ] bidder_data = deepcopy ( test_organization ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) bid_id = response . json [ <str> ] [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ bidder_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] self . assertEqual ( len ( qualifications ) , 3 ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 0 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 1 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 1 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . headers ) new_qualification_location = response . headers [ <str> ] qualification_id = new_qualification_location [ - 32 : ] response = self . app . patch_json ( <str> . format ( tender_id , qualification_id , tender_owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualifications [ 2 ] [ <str> ] , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( tender_id , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : <str> , <str> : [ { <str> : i [ <str> ] , <str> : <str> . format ( i [ <str> ] ) } for i in auction_bids_data ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , bid_id , bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( bid_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , tender_owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] response = self . app . patch_json ( <str> . format ( tender_id , award_id , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , tender_owner_token ) ) award2_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . assertNotEqual ( award_id , award2_id ) self . app . patch_json ( <str> . format ( tender_id , award2_id , tender_owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . set_status ( <str> , { <str> : <str> } ) tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , tender_owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def lost_contract_for_active_award ( self ) :      response = self . app . post_json ( <str> , { <str> : self . initial_data } ) tender_id = self . tender_id = response . json [ <str> ] [ <str> ] owner_token = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ test_organization ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ test_organization ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . status , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id , qualification [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  self . set_status ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id , owner_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( tender_id , award_id , owner_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) tender = self . db . get ( tender_id ) tender [ <str> ] = None self . db . save ( tender ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . assertIn ( <str> , response . json [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( tender_id ) , { <str> : { <str> : tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] tender = self . db . get ( tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( tender_id , contract_id , owner_token ) , { <str> : { <str> : <str> } } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   