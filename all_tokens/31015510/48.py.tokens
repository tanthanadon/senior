from openprocurement . api . utils import ( json_view , context_unpack , get_now , ) from openprocurement . tender . core . utils import ( optendersresource , apply_patch , save_tender ) from openprocurement . tender . core . validation import ( validate_patch_bid_data , validate_update_deleted_bid , validate_bid_operation_period , validate_bid_operation_not_in_tendering , validate_bid_status_update_not_to_pending ) from openprocurement . tender . openua . views . bid import ( TenderUABidResource as BaseResource ) from openprocurement . tender . openeu . validation import validate_view_bids_in_active_tendering @ optendersresource ( name = <str> , collection_path = <str> , path = <str> , procurementMethodType = <str> , description = <str> ) class TenderBidResource ( BaseResource ) :      allowed_bid_status_on_create = [ <str> , <str> ] @ json_view ( permission = <str> , validators = ( validate_view_bids_in_active_tendering ) ) def collection_get ( self ) :          tender = self . request . validated [ <str> ] return { <str> : [ i . serialize ( self . request . validated [ <str> ] ) for i in tender . bids ] }  @ json_view ( permission = <str> ) def get ( self ) :          if self . request . authenticated_role == <str> :              return { <str> : self . request . context . serialize ( <str> ) }  validate_view_bids_in_active_tendering ( self . request ) return { <str> : self . request . context . serialize ( self . request . validated [ <str> ] ) }  @ json_view ( content_type = <str> , permission = <str> , validators = ( validate_patch_bid_data , validate_bid_operation_not_in_tendering , validate_bid_operation_period , validate_update_deleted_bid , validate_bid_status_update_not_to_pending ) ) def patch ( self ) :          value = self . request . validated [ <str> ] . get ( <str> ) and self . request . validated [ <str> ] [ <str> ] . get ( <str> ) if value and value != self . request . context . get ( <str> , { } ) . get ( <str> ) :              self . request . validated [ <str> ] [ <str> ] = get_now ( ) . isoformat ( )  if self . request . context . lotValues :              lotValues = dict ( [ ( i . relatedLot , i . value . amount ) for i in self . request . context . lotValues ] ) for lotvalue in self . request . validated [ <str> ] . get ( <str> , [ ] ) :                  if lotvalue [ <str> ] in lotValues and lotvalue . get ( <str> , { } ) . get ( <str> ) != lotValues [ lotvalue [ <str> ] ] :                      lotvalue [ <str> ] = get_now ( ) . isoformat ( )    self . request . validated [ <str> ] . modified = False if apply_patch ( self . request , src = self . request . context . serialize ( ) ) :              self . LOGGER . info ( <str> . format ( self . request . context . id ) , extra = context_unpack ( self . request , { <str> : <str> } ) ) return { <str> : self . request . context . serialize ( <str> ) }   @ json_view ( permission = <str> , validators = ( validate_bid_operation_not_in_tendering , validate_bid_operation_period ) ) def delete ( self ) :          bid = self . request . context tender = self . request . validated [ <str> ] bid . status = <str> if tender . lots :              bid . lotValues = [ ]  self . request . validated [ <str> ] . modified = False if save_tender ( self . request ) :              res = bid . serialize ( <str> ) self . LOGGER . info ( <str> . format ( self . request . context . id ) , extra = context_unpack ( self . request , { <str> : <str> } ) ) return { <str> : res }     