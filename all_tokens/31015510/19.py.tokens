from copy import deepcopy from openprocurement . tender . belowthreshold . tests . bid_blanks import ( create_tender_bid_with_documents , create_tender_bid_with_document_invalid , create_tender_bid_with_document , ) def create_tender_biddder_invalid ( self ) :      response = self . app . post_json ( <str> , { <str> : { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 } } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) request_path = <str> . format ( self . tender_id ) response = self . app . post ( request_path , <str> , status = 415 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( request_path , <str> , content_type = <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , <str> , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ { <str> : <str> } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : [ <str> ] } , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : [ { <str> : { } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : [ { <str> : [ <str> ] , <str> : { <str> : [ <str> ] , <str> : [ <str> ] } , <str> : [ <str> ] , <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : False , <str> : [ { <str> : <str> , <str> : { <str> : <str> } } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : [ { <str> : [ <str> ] , <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 , <str> : False } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( request_path , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 , <str> : <str> } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , ] )  def create_tender_bidder ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] self . assertEqual ( bid [ <str> ] [ 0 ] [ <str> ] , self . test_bids_data [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertIn ( <str> , bid ) self . assertIn ( bid [ <str> ] , response . headers [ <str> ] ) for status in ( <str> , <str> , <str> , <str> ) :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 500 } , <str> : status } } , status = 403 ) self . assertEqual ( response . status , <str> )  self . set_status ( <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 500 } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_bidder ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : { <str> : 600 } } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : [ { <str> : <str> } ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , bid [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : { <str> : 500 } , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , bid [ <str> ] [ 0 ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : { <str> : 400 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 400 ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid_token ) , { <str> : { <str> : { <str> : 400 } } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : { <str> : 400 } } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) for status in ( <str> , <str> , <str> , <str> , <str> ) :          response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : status } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> . format ( status ) )  self . set_status ( <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 400 ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : { <str> : 400 } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def get_tender_bidder ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , bid ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) for b in response . json [ <str> ] :          self . assertEqual ( set ( b . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) )  response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) )  def delete_tender_bidder ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . delete ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertFalse ( <str> in response . json [ <str> ] ) self . assertFalse ( <str> in response . json [ <str> ] ) self . assertFalse ( <str> in response . json [ <str> ] ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , bid [ <str> ] , doc_resource , bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  revisions = self . db . get ( self . tender_id ) . get ( <str> ) self . assertTrue ( any ( [ i for i in revisions [ - 2 ] [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == <str> ] ) ) self . assertTrue ( any ( [ i for i in revisions [ - 1 ] [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == <str> ] ) ) response = self . app . delete ( <str> . format ( self . tender_id ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . delete ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) bid = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : { <str> : 300.0 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 300 ) response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . delete ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 100 } } } ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : { <str> : 101 } } } ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] [ <str> ] ) , 4 ) bid_data = response . json [ <str> ] [ <str> ] [ 1 ] self . assertEqual ( bid_data [ <str> ] , bid [ <str> ] ) self . assertEqual ( bid_data [ <str> ] , <str> ) self . assertFalse ( <str> in bid_data ) self . assertFalse ( <str> in bid_data ) self . assertFalse ( <str> in bid_data )  def deleted_bid_is_not_restorable ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] bid_token = response . json [ <str> ] [ <str> ] response = self . app . delete ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bid [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) , { <str> : { <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid [ <str> ] , bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def deleted_bid_do_not_locks_tender_in_state ( self ) :      bids = [ ] bids_tokens = [ ] for bid_amount in ( 400 , 405 ) :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : bid_amount } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bids . append ( response . json [ <str> ] ) bids_tokens . append ( response . json [ <str> ] [ <str> ] )  response = self . app . delete ( <str> . format ( self . tender_id , bids [ 0 ] [ <str> ] , bids_tokens [ 0 ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , bids [ 0 ] [ <str> ] ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 101 } } } ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] [ <str> ] ) , 3 ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 1 ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 2 ] [ <str> ] , <str> )  def get_tender_tenderers ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] response = self . app . get ( <str> . format ( self . tender_id ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : self . test_bids_data [ 0 ] [ <str> ] } } ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid_data = response . json [ <str> ] [ 0 ] self . assertEqual ( bid_data [ <str> ] , bid [ <str> ] ) self . assertEqual ( bid_data [ <str> ] , <str> ) self . assertTrue ( <str> in bid_data ) self . assertTrue ( <str> in bid_data ) self . assertTrue ( <str> in bid_data ) response = self . app . get ( <str> , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )  def bid_Administrator_change ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : [ self . author_data ] , <str> : { <str> : 500 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid [ <str> ] ) , { <str> : { <str> : True , <str> : True , <str> : [ { <str> : { <str> : <str> } } ] , <str> : { <str> : 400 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertNotEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 400 ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 0 ] [ <str> ] [ <str> ] , <str> )  def bids_invalidation_on_tender_change ( self ) :      bids_access = { } for data in self . test_bids_data :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bids_access [ response . json [ <str> ] [ <str> ] ] = response . json [ <str> ] [ <str> ]  for bid_id , token in bids_access . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : { <str> : 300.0 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 300 ) for bid_id , token in bids_access . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , bid_id , doc_resource , token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : self . test_bids_data [ 0 ] } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data = self . test_bids_data [ 0 ] data [ <str> ] [ <str> ] = 299 response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } ) self . assertEqual ( response . status , <str> ) valid_bid_id = response . json [ <str> ] [ <str> ] valid_bid_token = response . json [ <str> ] [ <str> ] valid_bid_date = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : True , <str> : True , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : { <str> : 101 } } } ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . get ( <str> . format ( self . tender_id , valid_bid_id , valid_bid_token ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( len ( response . json [ <str> ] [ <str> ] ) , 4 ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ 2 ] [ <str> ] , valid_bid_date ) for bid in response . json [ <str> ] [ <str> ] :          if bid [ <str> ] == <str> :              self . assertTrue ( <str> in bid ) self . assertFalse ( <str> in bid ) self . assertFalse ( <str> in bid ) self . assertFalse ( <str> in bid )   for bid_id , token in bids_access . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertFalse ( <str> in response . json [ <str> ] ) self . assertFalse ( <str> in response . json [ <str> ] ) self . assertFalse ( <str> in response . json [ <str> ] )  response = self . app . get ( <str> . format ( self . tender_id , valid_bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertTrue ( <str> in response . json [ <str> ] ) self . assertTrue ( <str> in response . json [ <str> ] ) self . assertTrue ( <str> in response . json [ <str> ] ) self . set_status ( <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] [ <str> ] ) , 4 ) for bid in response . json [ <str> ] [ <str> ] :          if bid [ <str> ] in bids_access :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertFalse ( <str> in bid ) self . assertFalse ( <str> in bid ) self . assertFalse ( <str> in bid )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertTrue ( <str> in bid ) self . assertTrue ( <str> in bid ) self . assertTrue ( <str> in bid )    def bids_activation_on_tender_documents ( self ) :      bids_access = { } for data in deepcopy ( self . test_bids_data ) :          data [ <str> ] = [ self . author_data ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bids_access [ response . json [ <str> ] [ <str> ] ] = response . json [ <str> ] [ <str> ]  for bid_id , token in bids_access . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  response = self . app . post ( <str> . format ( self . tender_id , self . tender_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) for bid_id , token in bids_access . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  for bid_id , token in bids_access . items ( ) :          response = self . app . patch_json ( <str> . format ( self . tender_id , bid_id , token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )   def features_bidder ( self ) :      test_features_bids = [ { <str> : [ { <str> : i [ <str> ] , <str> : 0.1 , } for i in self . initial_data [ <str> ] ] , <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 469 , <str> : <str> , <str> : True } , <str> : True , <str> : True } , { <str> : <str> , <str> : [ { <str> : i [ <str> ] , <str> : 0.15 , } for i in self . initial_data [ <str> ] ] , <str> : self . test_bids_data [ 1 ] [ <str> ] , <str> : { <str> : 479 , <str> : <str> , <str> : True } , <str> : True , <str> : True } , ] for i in test_features_bids :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : i } ) i [ <str> ] = <str> self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bid = response . json [ <str> ] bid . pop ( <str> ) bid . pop ( <str> ) self . assertEqual ( bid , i )   def features_bidder_invalid ( self ) :          data = { <str> : self . test_bids_data [ 0 ] [ <str> ] , <str> : { <str> : 469 , <str> : <str> , <str> : True } , <str> : True , <str> : True } response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data [ <str> ] = [ { <str> : <str> , <str> : 0.1 , } ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data [ <str> ] . append ( { <str> : <str> , <str> : 0.1 , } ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) data [ <str> ] [ 1 ] [ <str> ] = <str> data [ <str> ] [ 1 ] [ <str> ] = 0.2 response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] )  def not_found ( self ) :      auth = self . app . authorization for doc_resource in [ <str> , <str> , <str> ] :          self . app . authorization = auth response = self . app . post ( <str> . format ( doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id , doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( doc_resource , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , doc_resource , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( doc_resource , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , doc_resource , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] )   def get_tender_bidder_document ( self ) :      doc_id_by_type = { } def document_is_unaccessible_for_others ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource ) , status = 403 ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = orig_auth  def document_is_unaccessible_for_tender_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , self . tender_token ) , status = 403 ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . tender_token ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = orig_auth  def all_documents_are_accessible_for_bid_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) for resource in [ <str> , <str> , <str> , <str> ] :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) doc1 = response . json [ <str> ] [ 0 ] doc2 = response . json [ <str> ] [ 1 ] self . assertEqual ( doc1 [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( doc2 [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( doc1 [ <str> ] , <str> ) self . assertEqual ( doc2 [ <str> ] , <str> ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc2 ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) doc = response . json [ <str> ] del doc [ <str> ] self . assertEqual ( doc , doc1 ) doc_id = doc_id_by_type [ resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) doc = response . json [ <str> ] del doc [ <str> ] self . assertEqual ( doc , doc2 )  self . app . authorization = orig_auth  def documents_are_accessible_for_tender_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) token = self . tender_token response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , token ) ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) self . app . authorization = orig_auth  def public_documents_are_accessible_for_others ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] [ 1 ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id_by_type [ resource ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id_by_type [ resource + <str> ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . app . authorization = orig_auth  def all_public_documents_are_accessible_for_others ( ) :          for doc_resource in [ <str> , <str> , <str> , <str> ] :              public_documents_are_accessible_for_others ( doc_resource )   for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource + <str> ] = { <str> : doc_id , <str> : key } response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) for doc_resource in [ <str> , <str> ] :          response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] ) self . assertIn ( doc_id_by_type [ doc_resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] [ 1 ] )  for doc_resource in [ <str> , <str> ] :          doc_id = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) doc_id = doc_id_by_type [ doc_resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ <str> ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) doc_id = doc_id_by_type [ <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ <str> ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) doc_id = doc_id_by_type [ <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( ) tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( )  def create_tender_bidder_document ( self ) :      doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key }  for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id_by_type [ doc_resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id_by_type [ doc_resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ 0 ] [ <str> ] ) doc_id = doc_id_by_type [ doc_resource ] [ <str> ] key = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , key ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) if self . docservice :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , key , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , key , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 7 ) self . assertEqual ( response . body , <str> )  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] )  self . set_status ( <str> , { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) self . assertEqual ( response . status , <str> ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   def put_tender_bidder_document ( self ) :      doc_id_by_type = { } doc_id_by_type2 = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] } response = self . app . post ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , self . bid2_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id_by_type2 [ doc_resource ] = { <str> : response . json [ <str> ] [ <str> ] , <str> : response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] } response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , status = 404 , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , key , self . bid_token ) ) if self . docservice :              self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :              self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> )  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , <str> , content_type = <str> ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , key , self . bid_token ) ) if self . docservice :              self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :              self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . content_length , 8 ) self . assertEqual ( response . body , <str> )   self . set_status ( <str> , { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , doc_id_by_type2 [ doc_resource ] [ <str> ] ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   def patch_tender_bidder_document ( self ) :      doc_id_by_type = { } doc_id_by_type2 = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } response = self . app . post ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , self . bid2_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id_by_type2 [ doc_resource ] = { <str> : response . json [ <str> ] [ <str> ] , <str> : response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] } response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource + <str> ] = { <str> : doc_id , <str> : key } response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) response = self . app . post ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , self . bid2_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type2 [ doc_resource + <str> ] = { <str> : doc_id , <str> : key } response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , doc_id , self . bid2_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> )  for doc_resource in [ <str> , <str> , <str> , <str> ] :          doc_id = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } , ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> * 32 } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) doc_id = doc_id_by_type [ doc_resource + <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> )  self . set_status ( <str> , { <str> : <str> } ) auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . app . authorization = auth for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource + <str> ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource + <str> ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) doc_id = doc_id_by_type [ doc_resource + <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , doc_id_by_type2 [ doc_resource ] [ <str> ] , self . bid2_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid2_id , doc_resource , doc_id_by_type2 [ doc_resource + <str> ] [ <str> ] , self . bid2_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource + <str> ] [ <str> ] , self . bid_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   def patch_tender_bidder_document_private ( self ) :      doc_id_by_type = { } private_doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( doc_id , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] )   def patch_and_put_document_into_invalid_bid ( self ) :      doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key }  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : { <str> : 300.0 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 300 ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          doc_id = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , <str> , content_type = <str> , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   def download_tender_bidder_document ( self ) :      doc_id_by_type = { } private_doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] private_doc_id_by_type [ doc_resource ] = { <str> : response . json [ <str> ] [ <str> ] , <str> : response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] } response = self . app . patch_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) response = self . app . post ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , upload_files = [ ( <str> , <str> . format ( doc_resource [ : - 1 ] ) , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : response . json [ <str> ] [ <str> ] , <str> : response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] } for container in private_doc_id_by_type , doc_id_by_type :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . bid_token , container [ doc_resource ] [ <str> ] ) ) if self . docservice :                  self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                  self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> ) self . assertEqual ( response . headers [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . headers [ <str> ] , <str> )  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . tender_token , container [ doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , container [ doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   self . time_shift ( <str> ) self . check_chronograph ( ) def test_bids_documents_after_tendering_resource ( self , doc_id_by_type , private_doc_id_by_type , status ) :          for doc_resource in [ <str> , <str> , <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . bid_token , container [ doc_resource ] [ <str> ] ) ) if self . docservice :                      self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                      self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> ) self . assertEqual ( response . headers [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . headers [ <str> ] , <str> )    for doc_resource in [ <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . tender_token , container [ doc_resource ] [ <str> ] ) ) if self . docservice :                      self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                      self . assertEqual ( response . status , <str> )    for doc_resource in [ <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . tender_token , container [ doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> . format ( status ) )   for doc_resource in [ <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , container [ doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> . format ( status ) )    test_bids_documents_after_tendering_resource ( self , doc_id_by_type , private_doc_id_by_type , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) test_bids_documents_after_tendering_resource ( self , doc_id_by_type , private_doc_id_by_type , <str> ) self . time_shift ( <str> ) self . check_chronograph ( ) test_bids_documents_after_tendering_resource ( self , doc_id_by_type , private_doc_id_by_type , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : [ { <str> : <str> . format ( i [ <str> ] ) , <str> : i [ <str> ] } for i in auction_bids_data ] } } ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) def test_bids_documents_after_auction_resource ( self , doc_id_by_type , private_doc_id_by_type , status ) :          for doc_resource in [ <str> , <str> , <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . bid_token , container [ doc_resource ] [ <str> ] ) ) if self . docservice :                      self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                      self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> ) self . assertEqual ( response . headers [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . headers [ <str> ] , <str> )    for doc_resource in [ <str> , <str> , <str> , <str> ] :              for container in private_doc_id_by_type , doc_id_by_type :                  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , container [ doc_resource ] [ <str> ] , self . tender_token , container [ doc_resource ] [ <str> ] ) ) if self . docservice :                      self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                      self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> ) self . assertEqual ( response . headers [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . headers [ <str> ] , <str> )    for doc_resource in [ <str> , <str> , <str> , <str> ] :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id_by_type [ doc_resource ] [ <str> ] , doc_id_by_type [ doc_resource ] [ <str> ] ) ) if self . docservice :                  self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location ) self . assertIn ( <str> , response . location )  else :                  self . assertEqual ( response . status , <str> ) self . assertEqual ( response . body , <str> ) self . assertEqual ( response . headers [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . headers [ <str> ] , <str> )  response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , private_doc_id_by_type [ doc_resource ] [ <str> ] , private_doc_id_by_type [ doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> )   test_bids_documents_after_auction_resource ( self , doc_id_by_type , private_doc_id_by_type , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) test_bids_documents_after_auction_resource ( self , doc_id_by_type , private_doc_id_by_type , <str> )  def create_tender_bidder_document_nopending ( self ) :      response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : self . test_bids_data [ 0 ] } ) bid = response . json [ <str> ] token = response . json [ <str> ] [ <str> ] bid_id = bid [ <str> ] response = self . app . post ( <str> . format ( self . tender_id , bid_id , token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , bid_id , doc_id , token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . put ( <str> . format ( self . tender_id , bid_id , doc_id , token ) , <str> , content_type = <str> , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post ( <str> . format ( self . tender_id , bid_id , token ) , upload_files = [ ( <str> , <str> , <str> ) ] , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_bidder_document_private_json ( self ) :      doc_id_by_type = { } private_doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , upload_files = [ ( <str> , <str> , <str> ) ] ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] )   def put_tender_bidder_document_private_json ( self ) :      doc_id_by_type = { } private_doc_id_by_type = { } for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) response = self . app . put_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : None , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( <str> , response . json [ <str> ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          doc_id = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . put_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )   def get_tender_bidder_document_ds ( self ) :      doc_id_by_type = { } def document_is_unaccessible_for_others ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource ) , status = 403 ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = orig_auth  def document_is_unaccessible_for_tender_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , self . tender_token ) , status = 403 ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . tender_token ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . app . authorization = orig_auth  def all_documents_are_accessible_for_bid_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) for resource in [ <str> , <str> , <str> , <str> ] :              response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) doc1 = response . json [ <str> ] [ 0 ] doc2 = response . json [ <str> ] [ 1 ] self . assertEqual ( doc1 [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( doc2 [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( doc1 [ <str> ] , <str> ) self . assertEqual ( doc2 [ <str> ] , <str> ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc2 ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) doc = response . json [ <str> ] del doc [ <str> ] self . assertEqual ( doc , doc1 ) doc_id = doc_id_by_type [ resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) doc = response . json [ <str> ] del doc [ <str> ] self . assertEqual ( doc , doc2 )  self . app . authorization = orig_auth  def documents_are_accessible_for_tender_owner ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) token = self . tender_token response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) doc_id = doc_id_by_type [ resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , token ) ) self . assertIn ( <str> , response . json [ <str> ] ) self . assertEqual ( response . status , <str> ) doc_id = doc_id_by_type [ resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id , token ) ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] ) self . app . authorization = orig_auth  def public_documents_are_accessible_for_others ( resource ) :          orig_auth = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] [ 1 ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id_by_type [ resource ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , resource , doc_id_by_type [ resource + <str> ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertNotIn ( <str> , response . json [ <str> ] ) self . app . authorization = orig_auth  def all_public_documents_are_accessible_for_others ( ) :          for doc_resource in [ <str> , <str> , <str> , <str> ] :              public_documents_are_accessible_for_others ( doc_resource )   for doc_resource in [ <str> , <str> , <str> , <str> ] :          response = self . app . post_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) doc_id = response . json [ <str> ] [ <str> ] self . assertIn ( doc_id , response . headers [ <str> ] ) self . assertEqual ( <str> . format ( doc_resource [ : - 1 ] ) , response . json [ <str> ] [ <str> ] ) key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource ] = { <str> : doc_id , <str> : key } response = self . app . post_json ( <str> . format ( self . tender_id , self . bid_id , doc_resource , self . bid_token ) , { <str> : { <str> : <str> . format ( doc_resource [ : - 1 ] ) , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> , <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) doc_id = response . json [ <str> ] [ <str> ] key = response . json [ <str> ] [ <str> ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] doc_id_by_type [ doc_resource + <str> ] = { <str> : doc_id , <str> : key } doc_id_by_type [ doc_resource + <str> ] = { <str> : doc_id , <str> : key } document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) for doc_resource in [ <str> , <str> ] :          response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] ) self . assertIn ( doc_id_by_type [ doc_resource ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) self . assertNotIn ( <str> , response . json [ <str> ] [ 1 ] )  for doc_resource in [ <str> , <str> ] :          doc_id = doc_id_by_type [ doc_resource ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) doc_id = doc_id_by_type [ doc_resource + <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_resource , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> . format ( doc_resource [ : - 1 ] ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ <str> ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) doc_id = doc_id_by_type [ <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertIn ( doc_id_by_type [ <str> ] [ <str> ] , response . json [ <str> ] [ 0 ] [ <str> ] ) doc_id = doc_id_by_type [ <str> ] [ <str> ] response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , doc_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) for doc_resource in [ <str> , <str> ] :          document_is_unaccessible_for_others ( doc_resource ) document_is_unaccessible_for_tender_owner ( doc_resource )  for doc_resource in [ <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource ) public_documents_are_accessible_for_others ( doc_resource )  all_documents_are_accessible_for_bid_owner ( doc_resource ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( ) tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . get ( <str> . format ( self . tender_id ) ) contract_id = response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] self . app . authorization = ( <str> , ( <str> , <str> ) ) self . app . patch_json ( <str> . format ( self . tender_id , contract_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 2 ) self . assertEqual ( set ( response . json [ <str> ] [ 0 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) self . assertEqual ( set ( response . json [ <str> ] [ 1 ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( set ( response . json [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) ) all_documents_are_accessible_for_bid_owner ( doc_resource ) for doc_resource in [ <str> , <str> , <str> , <str> ] :          documents_are_accessible_for_tender_owner ( doc_resource )  all_public_documents_are_accessible_for_others ( )  def create_tender_bid_with_all_documents ( self ) :      docs = [ { <str> : <str> , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> } , { <str> : <str> , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> } , { <str> : <str> , <str> : self . generate_docservice_url ( ) , <str> : <str> + <str> * 32 , <str> : <str> } ] bid_data = deepcopy ( self . bid_data_wo_docs ) bid_data [ <str> ] = docs bid_data [ <str> ] = deepcopy ( docs ) bid_data [ <str> ] = deepcopy ( docs ) bid_data [ <str> ] = deepcopy ( docs ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : bid_data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) bidder = response . json [ <str> ] self . assertEqual ( bidder [ <str> ] [ 0 ] [ <str> ] , self . bid_data_wo_docs [ <str> ] [ 0 ] [ <str> ] ) self . assertIn ( <str> , bidder ) self . bid_id = bidder [ <str> ] self . bid_token = response . json [ <str> ] [ <str> ] self . assertIn ( bidder [ <str> ] , response . headers [ <str> ] ) documents = bidder [ <str> ] ids = [ doc [ <str> ] for doc in documents ] self . assertEqual ( [ <str> , <str> , <str> ] , [ document [ <str> ] for document in documents ] ) eligibility_documents = bidder [ <str> ] eligibility_ids = [ doc [ <str> ] for doc in eligibility_documents ] self . assertEqual ( [ <str> , <str> , <str> ] , [ document [ <str> ] for document in eligibility_documents ] ) qualification_documents = bidder [ <str> ] qualification_ids = [ doc [ <str> ] for doc in qualification_documents ] self . assertEqual ( [ <str> , <str> , <str> ] , [ document [ <str> ] for document in qualification_documents ] ) financial_documents = bidder [ <str> ] financial_ids = [ doc [ <str> ] for doc in financial_documents ] self . assertEqual ( [ <str> , <str> , <str> ] , [ document [ <str> ] for document in financial_documents ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . assertEqual ( ids , [ doc [ <str> ] for doc in response . json [ <str> ] ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . assertEqual ( eligibility_ids , [ doc [ <str> ] for doc in response . json [ <str> ] ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . assertEqual ( qualification_ids , [ doc [ <str> ] for doc in response . json [ <str> ] ] ) response = self . app . get ( <str> . format ( self . tender_id , self . bid_id , self . bid_token ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( len ( response . json [ <str> ] ) , 3 ) self . assertEqual ( financial_ids , [ doc [ <str> ] for doc in response . json [ <str> ] ] )  def create_tender_bid_with_eligibility_document_invalid ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document_invalid ( self )  def create_tender_bid_with_financial_document_invalid ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document_invalid ( self )  def create_tender_bid_with_qualification_document_invalid ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document_invalid ( self )  def create_tender_bid_with_eligibility_document ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document ( self )  def create_tender_bid_with_qualification_document ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document ( self )  def create_tender_bid_with_financial_document ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_document ( self )  def create_tender_bid_with_financial_documents ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_documents ( self )  def create_tender_bid_with_eligibility_documents ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_documents ( self )  def create_tender_bid_with_qualification_documents ( self ) :      self . docs_container = <str> self . docs_container_url = <str> create_tender_bid_with_documents ( self )   