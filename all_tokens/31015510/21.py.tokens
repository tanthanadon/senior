from datetime import timedelta from openprocurement . api . utils import get_now def contract_termination ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) contract = response . json [ <str> ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> )  def patch_tender_contract ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) contract = response . json [ <str> ] [ 0 ] fake_contractID = <str> fake_items_data = [ { <str> : <str> } ] fake_suppliers_data = [ { <str> : <str> } ] response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : fake_contractID , <str> : fake_items_data , <str> : fake_suppliers_data } } ) response = self . app . get ( <str> . format ( self . tender_id , contract [ <str> ] ) ) self . assertNotEqual ( fake_contractID , response . json [ <str> ] [ <str> ] ) self . assertNotEqual ( fake_items_data , response . json [ <str> ] [ <str> ] ) self . assertNotEqual ( fake_suppliers_data , response . json [ <str> ] [ <str> ] ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : { <str> : <str> } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : { <str> : False } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : { <str> : 501 } } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : { <str> : 238 } } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 238 ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) self . set_status ( <str> , { <str> : <str> } ) token = self . initial_bids_tokens [ self . initial_bids [ 0 ] [ <str> ] ] response = self . app . post_json ( <str> . format ( self . tender_id , self . award_id , token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : self . supplier_info } } ) self . assertEqual ( response . status , <str> ) complaint = response . json [ <str> ] owner_token = response . json [ <str> ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) tender = self . db . get ( self . tender_id ) for i in tender . get ( <str> , [ ] ) :          i [ <str> ] [ <str> ] = i [ <str> ] [ <str> ]  self . db . save ( tender ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : i [ <str> ] [ <str> ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> . format ( i [ <str> ] [ <str> ] ) ] , <str> : <str> , <str> : <str> } ] ) one_hour_in_furure = ( get_now ( ) + timedelta ( hours = 1 ) ) . isoformat ( ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : one_hour_in_furure } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) custom_signature_date = get_now ( ) . isoformat ( ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : custom_signature_date } } ) self . assertEqual ( response . status , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , complaint [ <str> ] , owner_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) authorization = self . app . authorization self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . award_id , complaint [ <str> ] ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = authorization response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : { <str> : 232 } , <str> : <str> , <str> : <str> , <str> : [ { <str> : <str> } ] , <str> : [ { <str> : <str> } ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , contract [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . patch_json ( <str> , { <str> : { <str> : <str> } } , status = 404 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : <str> , <str> : <str> , <str> : <str> } ] ) response = self . app . get ( <str> . format ( self . tender_id , contract [ <str> ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ <str> ] , 238 )   