from openprocurement . api . utils import ( get_file , upload_file , update_file_content_type , json_view , context_unpack , APIResource , ) from openprocurement . tender . core . utils import ( save_tender , apply_patch ) from openprocurement . api . validation import ( validate_file_update , validate_file_upload , validate_patch_document_data , ) from openprocurement . tender . core . validation import validate_tender_document_update_not_by_author_or_tender_owner from openprocurement . tender . openeu . utils import qualifications_resource from openprocurement . tender . openeu . validation import ( validate_qualification_document_operation_not_in_pending , validate_qualification_document_operation_not_in_allowed_status ) @ qualifications_resource ( name = <str> , collection_path = <str> , path = <str> , procurementMethodType = <str> , description = <str> ) class TenderQualificationDocumentResource ( APIResource ) :      def validate_award_document ( self , operation ) :          if self . request . validated [ <str> ] != <str> :              self . request . errors . add ( <str> , <str> , <str> . format ( operation , self . request . validated [ <str> ] ) ) self . request . errors . status = 403 return  if operation == <str> and self . request . authenticated_role != ( self . context . author or <str> ) :              self . request . errors . add ( <str> , <str> , <str> . format ( operation ) ) self . request . errors . status = 403 return  return True  @ json_view ( permission = <str> ) def collection_get ( self ) :          if self . request . params . get ( <str> , <str> ) :              collection_data = [ i . serialize ( <str> ) for i in self . context . documents ]  else :              collection_data = sorted ( dict ( [ ( i . id , i . serialize ( <str> ) ) for i in self . context . documents ] ) . values ( ) , key = lambda i : i [ <str> ] )  return { <str> : collection_data }  @ json_view ( permission = <str> , validators = ( validate_file_upload , validate_qualification_document_operation_not_in_allowed_status , validate_qualification_document_operation_not_in_pending ) ) def collection_post ( self ) :          document = upload_file ( self . request ) document . author = self . request . authenticated_role self . context . documents . append ( document ) if save_tender ( self . request ) :              self . LOGGER . info ( <str> . format ( document . id ) , extra = context_unpack ( self . request , { <str> : <str> } , { <str> : document . id } ) ) self . request . response . status = 201 document_route = self . request . matched_route . name . replace ( <str> , <str> ) self . request . response . headers [ <str> ] = self . request . current_route_url ( _route_name = document_route , document_id = document . id , _query = { } ) return { <str> : document . serialize ( <str> ) }   @ json_view ( permission = <str> ) def get ( self ) :          if self . request . params . get ( <str> ) :              return get_file ( self . request )  document = self . request . validated [ <str> ] document_data = document . serialize ( <str> ) document_data [ <str> ] = [ i . serialize ( <str> ) for i in self . request . validated [ <str> ] if i . url != document . url ] return { <str> : document_data }  @ json_view ( validators = ( validate_file_update , validate_qualification_document_operation_not_in_allowed_status , validate_qualification_document_operation_not_in_pending , validate_tender_document_update_not_by_author_or_tender_owner ) , permission = <str> ) def put ( self ) :          document = upload_file ( self . request ) self . request . validated [ <str> ] . documents . append ( document ) if save_tender ( self . request ) :              self . LOGGER . info ( <str> . format ( self . request . context . id ) , extra = context_unpack ( self . request , { <str> : <str> } ) ) return { <str> : document . serialize ( <str> ) }   @ json_view ( content_type = <str> , validators = ( validate_patch_document_data , validate_qualification_document_operation_not_in_allowed_status , validate_qualification_document_operation_not_in_pending , validate_tender_document_update_not_by_author_or_tender_owner ) , permission = <str> ) def patch ( self ) :          if apply_patch ( self . request , src = self . request . context . serialize ( ) ) :              update_file_content_type ( self . request ) self . LOGGER . info ( <str> . format ( self . request . context . id ) , extra = context_unpack ( self . request , { <str> : <str> } ) ) return { <str> : self . request . context . serialize ( <str> ) }     