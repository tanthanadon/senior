def patch_tender_2lot_auction ( self ) :      self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) self . set_status ( <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : [ { <str> : <str> } ] } } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : { <str> : <str> } , <str> : <str> , <str> : <str> } ] ) patch_data = { <str> : <str> . format ( self . tender_id ) , <str> : [ { <str> : self . initial_bids [ 1 ] [ <str> ] , <str> : <str> . format ( self . tender_id , self . initial_bids [ 1 ] [ <str> ] ) } ] } response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ { <str> : [ <str> ] } ] , <str> : <str> , <str> : <str> } ] ) del patch_data [ <str> ] [ 0 ] [ <str> ] patch_data [ <str> ] [ 0 ] [ <str> ] = [ { <str> : <str> . format ( self . tender_id , self . initial_bids [ 0 ] [ <str> ] ) } ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] , [ { <str> : [ <str> ] , <str> : <str> , <str> : <str> } ] ) auctionUrl = patch_data . pop ( <str> ) patch_data [ <str> ] = [ { <str> : auctionUrl } , { <str> : auctionUrl } ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) patch_data [ <str> ] . append ( { <str> : [ { <str> : <str> . format ( self . tender_id , self . initial_bids [ 0 ] [ <str> ] ) } ] } ) patch_data [ <str> ] [ 1 ] [ <str> ] = <str> response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , { <str> : [ <str> ] } ) patch_data [ <str> ] [ 1 ] [ <str> ] = <str> response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) patch_data [ <str> ] [ 1 ] [ <str> ] = self . initial_bids [ 0 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , [ { <str> : [ <str> ] } ] ) patch_data [ <str> ] = [ patch_data [ <str> ] [ 0 ] . copy ( ) for i in self . initial_lots ] patch_data [ <str> ] [ 1 ] [ <str> ] = <str> response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , [ { <str> : [ <str> ] } , { <str> : [ <str> ] } ] ) patch_data [ <str> ] [ 1 ] [ <str> ] = self . initial_lots [ 1 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , [ { <str> : [ <str> ] } ] ) for bid in patch_data [ <str> ] :          bid [ <str> ] = [ bid [ <str> ] [ 0 ] . copy ( ) for i in self . initial_lots ]  patch_data [ <str> ] [ 0 ] [ <str> ] [ 1 ] [ <str> ] = self . initial_bids [ 0 ] [ <str> ] [ 0 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } , status = 422 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , [ { <str> : [ <str> ] } ] ) patch_data [ <str> ] [ 0 ] [ <str> ] [ 1 ] [ <str> ] = self . initial_bids [ 0 ] [ <str> ] [ 1 ] [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : patch_data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertIsNone ( response . json ) for lot in self . initial_lots :          response = self . app . patch_json ( <str> . format ( self . tender_id , lot [ <str> ] ) , { <str> : patch_data } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) tender = response . json [ <str> ]  self . assertEqual ( tender [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] , patch_data [ <str> ] [ 1 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( tender [ <str> ] [ 1 ] [ <str> ] [ 0 ] [ <str> ] , patch_data [ <str> ] [ 0 ] [ <str> ] [ 0 ] [ <str> ] ) self . assertEqual ( tender [ <str> ] [ 0 ] [ <str> ] , patch_data [ <str> ] [ 0 ] [ <str> ] ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid in patch_data [ <str> ] :          bid [ <str> ] = [ bid [ <str> ] [ 1 ] ]  response = self . app . patch_json ( <str> . format ( self . tender_id , self . initial_lots [ 0 ] [ <str> ] ) , { <str> : patch_data } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ - 1 ] [ <str> ] , <str> )   