from copy import deepcopy def active_tendering_to_pre_qual ( self ) :      response = self . set_status ( <str> , { <str> : <str> } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def pre_qual_switch_to_auction ( self ) :      response = self . set_status ( <str> , { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def pre_qual_switch_to_stand_still ( self ) :      response = self . set_status ( <str> , { <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def switch_to_auction ( self ) :      response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) self . assertEqual ( response . content_type , <str> ) qualifications = response . json [ <str> ] for qualification in qualifications :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> } } )  response = self . set_status ( <str> , { <str> : <str> } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def switch_to_complaint ( self ) :      user_data = deepcopy ( self . author_data ) for status in [ <str> , <str> , <str> ] :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : <str> , <str> : <str> , <str> : user_data , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) complaint = response . json [ <str> ] response = self . app . patch_json ( <str> . format ( self . tender_id , complaint [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : status * 4 , <str> : status } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , status )  response = self . set_status ( <str> , { <str> : self . initial_status } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] [ - 1 ] [ <str> ] , status )   