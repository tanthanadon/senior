from copy import deepcopy def bids_on_tender_cancellation_in_tendering ( self ) :      response = self . app . get ( <str> . format ( self . tender_id ) ) tender = response . json [ <str> ] self . assertNotIn ( <str> , tender ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( response . status , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) tender = response . json [ <str> ] self . assertNotIn ( <str> , tender ) self . assertEqual ( tender [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def bids_on_tender_cancellation_in_pre_qualification ( self ) :      self . _mark_one_bid_deleted ( ) response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) for bid_id in self . valid_bids :          response = self . app . get ( <str> . format ( self . tender_id , bid_id , self . initial_bids_tokens [ bid_id ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  invalid_bid_id = self . valid_bids . pop ( ) self . assertEqual ( len ( self . valid_bids ) , 2 ) for bid_id in self . valid_bids :          response = self . app . patch_json ( <str> . format ( self . tender_id , bid_id , self . initial_bids_tokens [ bid_id ] ) , { <str> : { <str> : <str> , } } )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) tender = self . _cancel_tender ( ) for bid in tender [ <str> ] :          if bid [ <str> ] in self . valid_bids :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( self . bid_visible_fields ) )  elif bid [ <str> ] == invalid_bid_id :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) )   self . _check_visible_fields_for_invalidated_bids ( )  def bids_on_tender_cancellation_in_pre_qualification_stand_still ( self ) :      self . _mark_one_bid_deleted ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _qualify_bids_and_switch_to_pre_qualification_stand_still ( ) tender = self . _cancel_tender ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid in tender [ <str> ] :          if bid [ <str> ] in self . valid_bids :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( self . bid_visible_fields ) )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) )   self . _check_visible_fields_for_invalidated_bids ( )  def bids_on_tender_cancellation_in_auction ( self ) :      self . _mark_one_bid_deleted ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _qualify_bids_and_switch_to_pre_qualification_stand_still ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) tender = self . _cancel_tender ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid in tender [ <str> ] :          if bid [ <str> ] in self . valid_bids :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( self . bid_visible_fields ) )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) ) self . _all_documents_are_not_accessible ( bid [ <str> ] )   self . _check_visible_fields_for_invalidated_bids ( )  def bids_on_tender_cancellation_in_qualification ( self ) :      self . bid_visible_fields = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] deleted_bid_id = self . _mark_one_bid_deleted ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _qualify_bids_and_switch_to_pre_qualification_stand_still ( qualify_all = False ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _set_auction_results ( ) tender = self . _cancel_tender ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid in tender [ <str> ] :          if bid [ <str> ] in self . valid_bids :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( self . bid_visible_fields ) )  elif bid [ <str> ] == deleted_bid_id :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) )   for bid_id , bid_token in self . initial_bids_tokens . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id ) ) bid_data = response . json [ <str> ] if bid_id in self . valid_bids :              self . assertEqual ( set ( bid_data . keys ( ) ) , set ( self . bid_visible_fields ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :                  self . _bid_document_is_accessible ( bid_id , doc_resource )   elif bid_id == deleted_bid_id :              self . _all_documents_are_not_accessible ( bid_id )  else :              for doc_resource in [ <str> , <str> ] :                  response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] ) response = self . app . get ( <str> . format ( self . tender_id , bid_id , doc_resource , self . doc_id_by_type [ bid_id + doc_resource ] [ <str> ] ) , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertIn ( <str> , response . json [ <str> ] [ 0 ] [ <str> ] )  for doc_resource in [ <str> , <str> ] :                  self . _bid_document_is_accessible ( bid_id , doc_resource )     def bids_on_tender_cancellation_in_awarded ( self ) :      self . bid_visible_fields = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . _mark_one_bid_deleted ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _qualify_bids_and_switch_to_pre_qualification_stand_still ( ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . _set_auction_results ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id , self . tender_token ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> ] [ 0 ] self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) tender = self . _cancel_tender ( ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for bid in tender [ <str> ] :          if bid [ <str> ] in self . valid_bids :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( self . bid_visible_fields ) )  else :              self . assertEqual ( bid [ <str> ] , <str> ) self . assertEqual ( set ( bid . keys ( ) ) , set ( [ <str> , <str> ] ) )   for bid_id , bid_token in self . initial_bids_tokens . items ( ) :          response = self . app . get ( <str> . format ( self . tender_id , bid_id ) ) bid_data = response . json [ <str> ] if bid_id in self . valid_bids :              self . assertEqual ( set ( bid_data . keys ( ) ) , set ( self . bid_visible_fields ) ) for doc_resource in [ <str> , <str> , <str> , <str> ] :                  self . _bid_document_is_accessible ( bid_id , doc_resource )     def cancellation_active_tendering_j708 ( self ) :      bid = deepcopy ( self . initial_bids [ 0 ] ) bid [ <str> ] = bid [ <str> ] [ : 1 ] response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : bid } ) self . assertEqual ( response . status , <str> ) self . initial_bids_tokens [ response . json [ <str> ] [ <str> ] ] = response . json [ <str> ] [ <str> ] self . initial_bids . append ( response . json [ <str> ] ) response = self . app . delete ( <str> . format ( self . tender_id , response . json [ <str> ] [ <str> ] , response . json [ <str> ] [ <str> ] ) ) self . assertEqual ( response . status , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . patch_json ( <str> . format ( self . tender_id , response . json [ <str> ] [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : bid } ) self . assertEqual ( response . status , <str> ) self . initial_bids_tokens [ response . json [ <str> ] [ <str> ] ] = response . json [ <str> ] [ <str> ] self . initial_bids . append ( response . json [ <str> ] ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def cancellation_active_qualification_j1427 ( self ) :      bid = deepcopy ( self . initial_bids [ 0 ] ) bid [ <str> ] = bid [ <str> ] [ : 1 ] bid_ids = [ ] for i in range ( 3 ) :          response = self . app . post_json ( <str> . format ( self . tender_id ) , { <str> : bid } ) self . assertEqual ( response . status , <str> ) self . initial_bids_tokens [ response . json [ <str> ] [ <str> ] ] = response . json [ <str> ] [ <str> ] self . initial_bids . append ( response . json [ <str> ] ) bid_ids . append ( response . json [ <str> ] [ <str> ] )  self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualification_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == bid_ids [ 0 ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualification_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == bid_ids [ 1 ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid_ids [ 0 ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid_ids [ 1 ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id , bid_ids [ 2 ] ) ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> )  def cancellation_active_qualification ( self ) :          self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualification_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] )  def cancellation_unsuccessful_qualification ( self ) :      self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualification_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) qualification_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , qualification_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 1 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] )  def cancellation_active_award ( self ) :      self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] for lot_id in self . initial_lots :          response = self . app . post_json ( <str> . format ( self . tender_id , lot_id [ <str> ] ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] )  def cancellation_unsuccessful_award ( self ) :      self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) response = self . app . get ( <str> . format ( self . tender_id ) ) self . app . authorization = ( <str> , ( <str> , <str> ) ) for qualification in response . json [ <str> ] :          response = self . app . patch_json ( <str> . format ( self . tender_id , qualification [ <str> ] , self . tender_token ) , { <str> : { <str> : <str> , <str> : True , <str> : True } } ) self . assertEqual ( response . status , <str> )  response = self . app . patch_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . set_status ( <str> , { <str> : self . tender_id , <str> : <str> } ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . patch_json ( <str> . format ( self . tender_id ) , { <str> : { <str> : self . tender_id } } ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) auction_bids_data = response . json [ <str> ] [ <str> ] for lot_id in self . initial_lots :          response = self . app . post_json ( <str> . format ( self . tender_id , lot_id [ <str> ] ) , { <str> : { <str> : auction_bids_data } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> )  response = self . app . get ( <str> . format ( self . tender_id ) ) self . assertEqual ( response . json [ <str> ] [ <str> ] , <str> ) self . app . authorization = ( <str> , ( <str> , <str> ) ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . get ( <str> . format ( self . tender_id ) ) award_id = [ i [ <str> ] for i in response . json [ <str> ] if i [ <str> ] == <str> and i [ <str> ] == self . initial_lots [ 0 ] [ <str> ] ] [ 0 ] response = self . app . patch_json ( <str> . format ( self . tender_id , award_id , self . tender_token ) , { <str> : { <str> : <str> } } ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 0 ] [ <str> ] } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , } } , status = 403 ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) self . assertEqual ( response . json [ <str> ] [ 0 ] [ <str> ] , <str> ) response = self . app . post_json ( <str> . format ( self . tender_id , self . tender_token ) , { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : self . initial_lots [ 1 ] [ <str> ] } } ) self . assertEqual ( response . status , <str> ) self . assertEqual ( response . content_type , <str> ) cancellation = response . json [ <str> ] self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertEqual ( cancellation [ <str> ] , <str> ) self . assertIn ( <str> , cancellation ) self . assertIn ( cancellation [ <str> ] , response . headers [ <str> ] )   