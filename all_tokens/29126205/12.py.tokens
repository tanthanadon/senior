import numpy as np import matplotlib from cycler import cycler matplotlib . rcParams [ <str> ] = cycler ( color = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) matplotlib . use ( <str> ) matplotlib . rc ( <str> , family = <str> , serif = <str> ) matplotlib . rc ( <str> , usetex = True ) fontProperties = { <str> : <str> , <str> : <str> , <str> : 20 } import matplotlib . pyplot as plt import pyfits import healpy as hp import subprocess import os from autocorr_parameter_wrapper import * from mask_apod_automate import * bash = <str> autocorr_script = <str> FITS_end = <str> TXT_end = <str> PDF_end = <str> DAT_end = <str> N_side = 2048 Npix = 12 * N_side ** 2 Coords = <str> mask_dir = <str> mask_name = <str> FWHM_apod_Arcmin = 15. mask_file = mask_dir + mask_name + FITS_end mask_apod_name = mask_name + <str> + str ( int ( FWHM_apod_Arcmin ) ) + <str> mask_apod_file = mask_dir + mask_apod_name + FITS_end fsky_name = mask_name + <str> fsky_file = fsky_name + TXT_end sim_dir = <str> sim_name = <str> Nsim = 15 sim_theory = <str> EEDust = ( np . loadtxt ( sim_dir + sim_theory + TXT_end ) ) [ : , 0 ] BBDust = ( np . loadtxt ( sim_dir + sim_theory + TXT_end ) ) [ : , 1 ] params = PolParams ( apodsigma = 7.65 , apodtype = 0 , thetamax = 14.0 , nlmax = 1000 , ellmin = 40.0 , ellmax = 1000.0 , nbins = 6 , mapname = <str> , CLAA = <str> , AAOUT = <str> , beamA = 0. , maskdir = mask_dir , maskname = mask_name , fskyname = fsky_name , Nside = N_side , coords = Coords , FWHM_apod_arcmin = FWHM_apod_Arcmin , CLAAbinned = <str> , kernelfile = <str> , kernelbool = 1 ) ell = np . arange ( int ( params . ellmax ) + 1 ) EEDust = EEDust [ 0 : 2 * int ( params . ellmax ) + 1 ] BBDust = BBDust [ 0 : 2 * int ( params . ellmax ) + 1 ] binbounds = np . logspace ( np . log10 ( float ( params . ellmin ) ) , np . log10 ( float ( params . ellmax ) ) , num = params . nbins + 1 , endpoint = True ) binbounds = [ np . int ( b ) for b in binbounds ] Deltaell = np . zeros ( params . nbins ) for i in xrange ( 1 , params . nbins + 1 ) :      Deltaell [ i - 1 ] = binbounds [ i ] - binbounds [ i - 1 ]  def bin_cl ( cl , bb ) :      ell = np . arange ( len ( cl ) ) cltemp = cl * ( ell * ( ell + 1.0 ) ) / ( 2.0 * np . pi ) bb = [ np . int ( b ) for b in bb ] ellsubarrs = np . split ( ell , bb ) clsubarrs = np . split ( cltemp , bb ) ellbinned = np . zeros ( len ( bb ) + 1 ) clbinned = np . zeros ( len ( bb ) + 1 ) for i in xrange ( len ( bb ) + 1 ) :          ellbinned [ i ] = np . mean ( ellsubarrs [ i ] ) clbinned [ i ] = np . mean ( clsubarrs [ i ] )  return [ ellbinned [ 1 : len ( ellbinned ) - 1 ] , clbinned [ 1 : len ( ellbinned ) - 1 ] ]  apodize_mask ( params . maskdir , params . maskname , params . Nside , params . coords , params . FWHM_apod_arcmin , False ) params . maskname = mask_apod_name theta_max_MIN = 7.0 theta_max_MAX = 21.0 num_theta_max = 15 theta_max_arr = np . linspace ( theta_max_MIN , theta_max_MAX , num = num_theta_max , endpoint = True ) num_apod_sigma = 11 apod_sigma_MIN = theta_max_MIN - 5.0 if ( apod_sigma_MIN <= 0. ) :      <str> quit ( )  chi2_arr = np . zeros ( ( num_theta_max , num_apod_sigma ) ) sumsqdist_arr = np . zeros ( ( num_theta_max , num_apod_sigma ) ) chi_arr = np . zeros ( ( num_theta_max , num_apod_sigma ) ) sumdist_arr = np . zeros ( ( num_theta_max , num_apod_sigma ) ) apod_sigma_arr = np . zeros ( ( num_theta_max , num_apod_sigma ) ) for i in xrange ( num_theta_max ) :      apod_sigma_MAX = theta_max_arr [ i ] - 0.5 apod_sigma_arr_loc = np . linspace ( apod_sigma_MIN , apod_sigma_MAX , num = num_apod_sigma , endpoint = True ) for j in xrange ( num_apod_sigma ) :          apod_sigma_arr [ i ] [ j ] = apod_sigma_arr_loc [ j ] params . apodsigma = apod_sigma_arr_loc [ j ] params . thetamax = theta_max_arr [ i ] outfile_sim = sim_dir + sim_theory + <str> + mask_apod_name + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end if not os . path . exists ( outfile_sim ) :              DlEE_arr = np . zeros ( ( Nsim , params . nbins ) ) DlBB_arr = np . zeros ( ( Nsim , params . nbins ) ) for k in xrange ( Nsim ) :                  params . mapname = sim_dir + sim_name + str ( k ) params . CLAA = sim_dir + sim_name + str ( k ) + <str> + mask_apod_name + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmax ) + TXT_end params . AAOUT = sim_dir + sim_name + str ( k ) + <str> + mask_apod_name + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmax ) + TXT_end params . CLAAbinned = sim_dir + sim_name + str ( k ) + <str> + mask_apod_name + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end params . kernelfile = mask_dir + mask_apod_name + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmax ) + FITS_end if ( k == 0 ) :                      params . kernelbool = 1  else :                      params . kernelbool = 0  subprocess . call ( [ bash , autocorr_script , params . mapname + FITS_end , str ( params . apodsigma ) , str ( params . apodtype ) , str ( params . thetamax ) , str ( params . nlmax ) , params . maskdir + params . maskname + FITS_end , params . CLAA , params . AAOUT , str ( params . beamA ) , params . maskdir + params . fskyname + TXT_end , params . CLAAbinned , params . kernelfile , str ( params . ellmin ) , str ( params . ellmax ) , str ( params . nbins ) , str ( params . kernelbool ) ] ) ell_binned = ( np . loadtxt ( params . CLAAbinned ) ) [ : , 0 ] DlEE_arr [ k ] = ( np . loadtxt ( params . CLAAbinned ) ) [ : , 1 ] DlBB_arr [ k ] = ( np . loadtxt ( params . CLAAbinned ) ) [ : , 2 ]  DlEE_mean = np . zeros ( params . nbins ) DlBB_mean = np . zeros ( params . nbins ) DlEE_std = np . zeros ( params . nbins ) DlBB_std = np . zeros ( params . nbins ) for b in xrange ( params . nbins ) :                  DlEE_mean [ b ] = np . mean ( DlEE_arr [ : , b ] ) DlBB_mean [ b ] = np . mean ( DlBB_arr [ : , b ] ) DlEE_std [ b ] = np . std ( DlEE_arr [ : , b ] ) DlBB_std [ b ] = np . std ( DlBB_arr [ : , b ] )  np . savetxt ( outfile_sim , np . transpose ( np . array ( [ ell_binned , DlEE_mean , DlEE_std , DlBB_mean , DlBB_std ] ) ) )  else :              ell_binned = ( np . loadtxt ( outfile_sim ) ) [ : , 0 ] DlEE_mean = ( np . loadtxt ( outfile_sim ) ) [ : , 1 ] DlEE_std = ( np . loadtxt ( outfile_sim ) ) [ : , 2 ] DlBB_mean = ( np . loadtxt ( outfile_sim ) ) [ : , 3 ] DlBB_std = ( np . loadtxt ( outfile_sim ) ) [ : , 4 ]  outfile_theory = sim_dir + sim_theory + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end if not os . path . exists ( outfile_theory ) :              hdulist = pyfits . open ( params . kernelfile ) EEkernel = ( hdulist [ 0 ] . data ) [ 2 ] BBkernel = EEkernel hdulist . close ( ) ClEE_theory = np . zeros ( int ( params . ellmax ) + 1 ) ClBB_theory = np . zeros ( int ( params . ellmax ) + 1 ) for l in xrange ( int ( params . ellmax ) + 1 ) :                  ClEE_theory [ l ] = np . sum ( EEkernel [ : , l ] * EEDust ) ClBB_theory [ l ] = np . sum ( BBkernel [ : , l ] * BBDust )  np . savetxt ( sim_dir + sim_theory + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmax ) + TXT_end , np . transpose ( np . array ( [ ell , ClEE_theory , ClBB_theory ] ) ) ) [ ell_binned , DlEE_theory_binned ] = bin_cl ( ClEE_theory , binbounds ) [ ell_binned , DlBB_theory_binned ] = bin_cl ( ClBB_theory , binbounds ) np . savetxt ( outfile_theory , np . transpose ( np . array ( [ ell_binned , DlEE_theory_binned , DlBB_theory_binned ] ) ) )  else :              DlEE_theory_binned = ( np . loadtxt ( outfile_theory ) ) [ : , 1 ] DlBB_theory_binned = ( np . loadtxt ( outfile_theory ) ) [ : , 2 ]  chi2_arr [ i ] [ j ] = np . sum ( ( DlEE_mean - DlEE_theory_binned ) ** 2.0 / DlEE_std ** 2.0 + ( DlBB_mean - DlBB_theory_binned ) ** 2.0 / DlBB_std ** 2.0 ) sumsqdist_arr [ i ] [ j ] = np . sum ( ( DlEE_mean - DlEE_theory_binned ) ** 2.0 / DlEE_theory_binned ** 2.0 + ( DlBB_mean - DlBB_theory_binned ) ** 2.0 / DlBB_theory_binned ** 2.0 ) chi_arr [ i ] [ j ] = np . sum ( ( DlEE_mean - DlEE_theory_binned ) / DlEE_std + ( DlBB_mean - DlBB_theory_binned ) / DlBB_std ) sumdist_arr [ i ] [ j ] = np . sum ( ( DlEE_mean - DlEE_theory_binned ) / DlEE_theory_binned + ( DlBB_mean - DlBB_theory_binned ) / DlBB_theory_binned ) plt . clf ( ) plt . title ( <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) , fontsize = 16 ) plt . semilogx ( ell , EEDust [ 0 : int ( params . ellmax ) + 1 ] * ell * ( ell + 1. ) / 2. / np . pi , <str> , lw = 1.5 , alpha = 0.7 , label = <str> ) plt . semilogx ( ell , BBDust [ 0 : int ( params . ellmax ) + 1 ] * ell * ( ell + 1. ) / 2. / np . pi , <str> , lw = 1.5 , alpha = 0.7 , ls = <str> , label = <str> ) plt . semilogx ( ell_binned , DlEE_theory_binned , <str> , label = <str> ) plt . semilogx ( ell_binned * 1.1 , DlBB_theory_binned , <str> , label = <str> ) plt . errorbar ( ell_binned , DlEE_mean , yerr = [ DlEE_std , DlEE_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . errorbar ( ell_binned * 1.1 , DlBB_mean , yerr = [ DlBB_std , DlBB_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . xlim ( int ( params . ellmin ) , int ( params . ellmax ) ) plt . ylim ( 0. , 1.4 * np . amax ( DlEE_mean ) ) plt . xlabel ( <str> , fontsize = 16 ) plt . ylabel ( <str> , fontsize = 16 ) plt . grid ( ) plt . legend ( loc = <str> , ncol = 2 , fontsize = 9 ) plt . savefig ( sim_dir + sim_theory + <str> + str ( theta_max_arr [ i ] ) + <str> + str ( apod_sigma_arr_loc [ j ] ) + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + PDF_end )   chi2_opt = np . amin ( chi2_arr ) chi2_opt_inds = np . unravel_index ( np . argmin ( chi2_arr ) , chi2_arr . shape ) print <str> print <str> , theta_max_arr [ chi2_opt_inds [ 0 ] ] print <str> , apod_sigma_arr [ chi2_opt_inds [ 0 ] ] [ chi2_opt_inds [ 1 ] ] print <str> , chi2_opt np . savetxt ( mask_dir + mask_name + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end , chi2_arr ) sumsqdist_opt = np . amin ( sumsqdist_arr ) sumsqdist_opt_inds = np . unravel_index ( np . argmin ( sumsqdist_arr ) , sumsqdist_arr . shape ) print <str> print <str> , theta_max_arr [ sumsqdist_opt_inds [ 0 ] ] print <str> , apod_sigma_arr [ sumsqdist_opt_inds [ 0 ] ] [ sumsqdist_opt_inds [ 1 ] ] print <str> , sumsqdist_opt np . savetxt ( mask_dir + mask_name + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end , sumsqdist_arr ) chi_opt = np . amin ( np . absolute ( chi_arr ) ) chi_opt_inds = np . unravel_index ( np . argmin ( np . absolute ( chi_arr ) ) , chi_arr . shape ) print <str> print <str> , theta_max_arr [ chi_opt_inds [ 0 ] ] print <str> , apod_sigma_arr [ chi_opt_inds [ 0 ] ] [ chi_opt_inds [ 1 ] ] print <str> , chi_opt np . savetxt ( mask_dir + mask_name + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end , chi_arr ) sumdist_opt = np . amin ( np . absolute ( sumdist_arr ) ) sumdist_opt_inds = np . unravel_index ( np . argmin ( np . absolute ( sumdist_arr ) ) , sumdist_arr . shape ) print <str> print <str> , theta_max_arr [ sumdist_opt_inds [ 0 ] ] print <str> , apod_sigma_arr [ sumdist_opt_inds [ 0 ] ] [ sumdist_opt_inds [ 1 ] ] print <str> , sumdist_opt np . savetxt ( mask_dir + mask_name + <str> + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + TXT_end , sumdist_arr ) np . savetxt ( mask_dir + mask_name + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + <str> + TXT_end , theta_max_arr ) np . savetxt ( mask_dir + mask_name + <str> + str ( params . ellmin ) + <str> + str ( params . ellmax ) + <str> + str ( params . nbins ) + <str> + TXT_end , apod_sigma_arr )  