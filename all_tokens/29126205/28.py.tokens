import numpy as np import sys import matplotlib . pyplot as plt import healpy as hp out_root = <str> fileAB = np . loadtxt ( sys . argv [ 1 ] ) fileAA = np . loadtxt ( sys . argv [ 2 ] ) fileBB = np . loadtxt ( sys . argv [ 3 ] ) fskyfile = np . loadtxt ( sys . argv [ 4 ] ) outfile = sys . argv [ 5 ] ellmin = 40.0 ellmax = 1000.0 Nellbins = 6 binbounds = np . logspace ( np . log10 ( ellmin ) , np . log10 ( ellmax ) , num = Nellbins + 1 , endpoint = True ) Deltaell = np . zeros ( Nellbins ) for i in xrange ( 1 , Nellbins + 1 ) :      Deltaell [ i - 1 ] = binbounds [ i ] - binbounds [ i - 1 ]  fskymask = fskyfile [ 0 ] fsky2mask = fskyfile [ 1 ] clAB = np . transpose ( fileAB [ : , 1 : 7 ] ) clAA = np . transpose ( fileAA [ : , 1 : 7 ] ) clBB = np . transpose ( fileBB [ : , 1 : 7 ] ) def bin_cl ( cl , bb ) :      ell = np . arange ( len ( cl ) ) cl *= ( ell * ( ell + 1.0 ) ) / ( 2.0 * np . pi ) print ( ell ) print ( bb ) bb = [ np . int ( b ) for b in bb ] ellsubarrs = np . split ( ell , bb ) clsubarrs = np . split ( cl , bb ) ellbinned = np . zeros ( len ( bb ) + 1 ) clbinned = np . zeros ( len ( bb ) + 1 ) for i in xrange ( len ( bb ) + 1 ) :          ellbinned [ i ] = np . mean ( ellsubarrs [ i ] ) clbinned [ i ] = np . mean ( clsubarrs [ i ] )  return [ ellbinned [ 1 : len ( ellbinned ) - 1 ] , clbinned [ 1 : len ( ellbinned ) - 1 ] ]  clAB_binned = np . zeros ( ( 6 , Nellbins ) ) clAA_binned = np . zeros ( ( 6 , Nellbins ) ) clBB_binned = np . zeros ( ( 6 , Nellbins ) ) for i in xrange ( 6 ) :      print ( clAB [ i ] ) print ( binbounds ) [ ell_binned , clAB_binned [ i ] ] = bin_cl ( clAB [ i ] , binbounds ) [ ell_binned , clAA_binned [ i ] ] = bin_cl ( clAA [ i ] , binbounds ) [ ell_binned , clBB_binned [ i ] ] = bin_cl ( clBB [ i ] , binbounds )  Delta_cl_AB = np . zeros ( ( 6 , Nellbins ) ) for i in xrange ( 3 ) :      Delta_cl_AB [ i ] = np . sqrt ( ( clAA_binned [ i ] * clBB_binned [ i ] ) / fskymask / ( 2.0 * ell_binned + 1.0 ) / Deltaell )  Delta_cl_AB [ 3 ] = 0.5 * np . sqrt ( 1.0 / ( ( 2.0 * ell_binned + 1.0 ) * Deltaell * fskymask ) * ( clAA_binned [ 0 ] * clBB_binned [ 1 ] + clAA_binned [ 1 ] * clBB_binned [ 0 ] ) ) Delta_cl_AB [ 4 ] = 0.5 * np . sqrt ( 1.0 / ( ( 2.0 * ell_binned + 1.0 ) * Deltaell * fskymask ) * ( clAA_binned [ 0 ] * clBB_binned [ 2 ] + clAA_binned [ 2 ] * clBB_binned [ 0 ] ) ) Delta_cl_AB [ 5 ] = 0.5 * np . sqrt ( 1.0 / ( ( 2.0 * ell_binned + 1.0 ) * Deltaell * fskymask ) * ( clAA_binned [ 1 ] * clBB_binned [ 2 ] + clAA_binned [ 2 ] * clBB_binned [ 1 ] ) ) chi2 = np . zeros ( 6 ) for i in xrange ( 6 ) :      chi2 [ i ] = np . sum ( clAB_binned [ i ] ** 2.0 / Delta_cl_AB [ i ] ** 2.0 ) print ( np . sqrt ( chi2 [ i ] ) )  np . savetxt ( out_root + outfile + <str> , np . transpose ( [ ell_binned , clAB_binned [ 1 ] , Delta_cl_AB [ 1 ] , clAB_binned [ 2 ] , Delta_cl_AB [ 2 ] ] ) ) plt . clf ( ) plt . axhline ( y = 0.0 , color = <str> , lw = 1.0 ) EE , = plt . semilogx ( ell_binned , clAB_binned [ 1 ] , <str> ) BB , = plt . semilogx ( ell_binned , clAB_binned [ 2 ] , <str> ) plt . errorbar ( ell_binned , clAB_binned [ 1 ] , yerr = [ Delta_cl_AB [ 1 ] , Delta_cl_AB [ 1 ] ] , fmt = <str> , ecolor = <str> , elinewidth = 2.5 , capsize = 5 , capthick = 2 ) plt . errorbar ( ell_binned , clAB_binned [ 2 ] , yerr = [ Delta_cl_AB [ 2 ] , Delta_cl_AB [ 2 ] ] , fmt = <str> , ecolor = <str> , elinewidth = 2.5 , capsize = 5 , capthick = 2 ) plt . xlabel ( <str> , fontsize = 18 ) plt . ylabel ( <str> , fontsize = 18 ) plt . xlim ( left = ellmin , right = ellmax ) plt . figlegend ( ( EE , BB ) , ( <str> , <str> ) , loc = <str> ) plt . grid ( ) plt . savefig ( out_root + outfile + <str> )  