from __future__ import division import numpy as np import healpy as hp import h5py import pymaster as nmt import glob import os import xcorr_namaster as xm def get_map ( testname ) :      bayesroot = <str> mapfn = bayesroot + <str> . format ( testname ) mapI , mapQ , mapU = hp . fitsfunc . read_map ( mapfn , field = ( 0 , 1 , 2 ) ) return mapI , mapQ , mapU  def get_planck_flatprior_map ( testname = <str> ) :      bayesroot = <str> mapfn = bayesroot + <str> . format ( testname ) mapI , mapQ , mapU = hp . fitsfunc . read_map ( mapfn , field = ( 0 , 1 , 2 ) ) return mapI , mapQ , mapU  if __name__ == <str> :      nside = 2048 GALFA_cut = True b_cut = 30 mask = xm . make_mask ( nside , GALFA_cut = GALFA_cut , b_cut = b_cut , save_mask = False ) apod_arcmin = 60 apod_type = <str> mask_apod = xm . apodize_mask ( mask , apod_arcmin = apod_arcmin , apod_type = apod_type ) print ( <str> . format ( mask_apod . shape ) ) bins , ell_binned = xm . make_bins ( nside = nside , binwidth = 20 , ellmax = 3001 ) dict_kwargs = { <str> : GALFA_cut , <str> : b_cut , <str> : apod_arcmin , <str> : apod_type } mapI , mapQ , mapU = get_planck_flatprior_map ( <str> ) I217 , Q217 , U217 = xm . get_planck_data ( nu = 217 , local = False , QU = False , IQU = True ) xm . xcorr_TEB ( mapI , mapQ , mapU , I217 , Q217 , U217 , apod_mask = mask_apod , bins = bins , nside = nside , savedata = True , EBpure = True , dataname = [ <str> , <str> ] , savestr = <str> , verbose = 1 , data_root = <str> , ** dict_kwargs )   