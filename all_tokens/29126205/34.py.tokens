import numpy as np import glob , pickle import matplotlib . pyplot as plt import pyfits import copy from scipy import ndimage import healpy as hp from subprocess import call , PIPE from astropy . io import fits import rht_to_planck import rotate_map_alm def smooth_overnans ( map , sig = 15 ) :      mask = np . ones ( map . shape , np . float_ ) mask [ np . isnan ( map ) ] = 0 map_zeroed = copy . copy ( map ) map_zeroed [ mask == 0 ] = 0 blurred_map = ndimage . gaussian_filter ( map_zeroed , sigma = sig ) blurred_mask = ndimage . gaussian_filter ( mask , sigma = sig ) map = blurred_map / blurred_mask return map  Nside = 2048 Npix = 12 * Nside ** 2 out_root = <str> QURHT_root = <str> Qdata_fn = QURHT_root + <str> Udata_fn = QURHT_root + <str> projectGal = True if projectGal :      QURHT_root = <str> print ( <str> ) Qdata_fn = QURHT_root + <str> Udata_fn = QURHT_root + <str> Qdata = fits . getdata ( Qdata_fn ) Udata = fits . getdata ( Udata_fn ) hdulist = fits . open ( Qdata_fn ) hdu = hdulist [ 0 ] Qdata_Equ , out_hdr = rht_to_planck . interpolate_data_to_hp_galactic ( Qdata , hdu . header , local = True , Equ = True ) Udata_Equ , out_hdr = rht_to_planck . interpolate_data_to_hp_galactic ( Udata , hdu . header , local = True , Equ = True )  else :      Qdata_Equ = fits . getdata ( Qdata_fn ) Udata_Equ = fits . getdata ( Udata_fn )  TQUmap = np . zeros ( ( 3 , Npix ) ) TQUmap [ 0 ] [ np . where ( Qdata_Equ != - 999 ) ] = 1 TQUmap [ 1 ] = - Qdata_Equ TQUmap [ 2 ] = Udata_Equ TQUmap [ 1 , np . where ( Qdata_Equ == - 999 ) ] = None TQUmap [ 2 , np . where ( Udata_Equ == - 999 ) ] = None for _tqu in range ( 3 ) :      TQUmap [ _tqu , : ] = hp . reorder ( TQUmap [ _tqu , : ] , n2r = True )  print ( <str> ) hp . fitsfunc . write_map ( <str> , TQUmap , coord = <str> ) hp . fitsfunc . write_map ( out_root + <str> , TQUmap , coord = <str> ) call ( <str> , shell = True , stdout = PIPE ) call ( <str> , shell = True , stdout = PIPE ) call ( <str> , shell = True , stdout = PIPE ) TQUmapGal = np . zeros ( ( 3 , Npix ) ) TQUmapGal [ 0 ] , TQUmapGal [ 1 ] , TQUmapGal [ 2 ] = hp . fitsfunc . read_map ( out_root + <str> , field = ( 0 , 1 , 2 ) ) hp . fitsfunc . write_map ( out_root + <str> , TQUmapGal , coord = <str> ) call ( <str> , shell = True , stdout = PIPE ) call ( <str> , shell = True , stdout = PIPE )  