import numpy as np import matplotlib from cycler import cycler matplotlib . rcParams [ <str> ] = cycler ( color = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) matplotlib . use ( <str> ) matplotlib . rc ( <str> , family = <str> , serif = <str> ) matplotlib . rc ( <str> , usetex = True ) fontProperties = { <str> : <str> , <str> : <str> , <str> : 20 } import matplotlib . pyplot as plt import healpy as hp import subprocess import os try :      import pymaster as nmt  except ImportError :      import pymaster as nmt  FITS_end = <str> TXT_end = <str> PDF_end = <str> DAT_end = <str> N_side = 2048 Npix = 12 * N_side ** 2 Coords = <str> mask_dir = <str> mask_name = <str> mask_field = 3 apod_Arcmin = 60. apod_Deg = apod_Arcmin / 60. mask_file = mask_dir + mask_name + FITS_end mask = hp . read_map ( mask_file , verbose = False , field = mask_field ) apod_Type = <str> mask_apod = nmt . mask_apodization ( mask , apod_Deg , apotype = apod_Type ) data_dir = <str> data_name = <str> data_name2 = <str> ellmax = 1001 ell = np . arange ( int ( ellmax ) + 1 ) FWHM_217 = 5.02 FWHM_353 = 4.94 bl_217 = ( hp . gauss_beam ( fwhm = FWHM_217 * ( np . pi / 180.0 / 60.0 ) , lmax = ellmax , pol = True ) ) [ : , 1 ] bl_353 = ( hp . gauss_beam ( fwhm = FWHM_353 * ( np . pi / 180.0 / 60.0 ) , lmax = ellmax , pol = True ) ) [ : , 1 ] binwidth = 20 bins = nmt . NmtBin ( N_side , nlb = binwidth , lmax = int ( ellmax ) ) ell_binned = bins . get_effective_ells ( ) nbins = len ( ell_binned ) Q_353 , U_353 = hp . read_map ( data_dir + data_name + FITS_end , field = [ 1 , 2 ] , verbose = True ) Q_217 , U_217 = hp . read_map ( data_dir + data_name2 + FITS_end , field = [ 1 , 2 ] , verbose = True ) EB_npure_353 = nmt . NmtField ( mask_apod , [ Q_353 , U_353 ] ) EB_npure_217 = nmt . NmtField ( mask_apod , [ Q_217 , U_217 ] ) w_npure = nmt . NmtWorkspace ( ) w_npure . compute_coupling_matrix ( EB_npure_353 , EB_npure_217 , bins ) Cl_2x2 = nmt . compute_full_master ( EB_npure_353 , EB_npure_217 , bins ) Cl_EE = Cl_2x2 [ 0 ] Cl_BB = Cl_2x2 [ 3 ] EB_pure_353 = nmt . NmtField ( mask_apod , [ Q_353 , U_353 ] , purify_e = True , purify_b = True ) EB_pure_217 = nmt . NmtField ( mask_apod , [ Q_217 , U_217 ] , purify_e = True , purify_b = True ) w_pure = nmt . NmtWorkspace ( ) w_pure . compute_coupling_matrix ( EB_pure_353 , EB_pure_217 , bins ) Cl_2x2_pure = nmt . compute_full_master ( EB_pure_353 , EB_pure_217 , bins ) Cl_EE_pure = Cl_2x2_pure [ 0 ] Cl_BB_pure = Cl_2x2_pure [ 3 ] Cl_2x2 = w_npure . decouple_cell ( nmt . compute_coupled_cell ( EB_npure_353 , EB_npure_217 ) ) ClEE = Cl_2x2 [ 0 ] ClBB = Cl_2x2 [ 3 ] Cl_2x2_pure = w_pure . decouple_cell ( nmt . compute_coupled_cell ( EB_pure_353 , EB_pure_217 ) ) ClEE_pure = Cl_2x2_pure [ 0 ] ClBB_pure = Cl_2x2_pure [ 3 ] plt . clf ( ) plt . title ( <str> ) plt . semilogy ( ell_binned , ClEE , <str> , label = <str> ) plt . semilogy ( ell_binned , Cl_EE , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , ClBB , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , Cl_BB , <str> , label = <str> ) plt . xlim ( 2 , int ( ellmax ) ) plt . xlabel ( <str> , fontsize = 16 ) plt . ylabel ( <str> , fontsize = 16 ) plt . grid ( ) plt . legend ( loc = <str> , ncol = 1 , fontsize = 9 ) plt . savefig ( data_dir + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + str ( ellmax ) + <str> + str ( binwidth ) + PDF_end ) np . savetxt ( data_dir + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + str ( ellmax ) + <str> + str ( binwidth ) + TXT_end , np . transpose ( np . array ( [ ell_binned , ClEE , Cl_EE , ClBB , Cl_BB ] ) ) ) plt . clf ( ) plt . title ( <str> ) plt . semilogy ( ell_binned , ClEE_pure , <str> , label = <str> ) plt . semilogy ( ell_binned , Cl_EE_pure , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , ClBB_pure , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , Cl_BB_pure , <str> , label = <str> ) plt . xlim ( 2 , int ( ellmax ) ) plt . xlabel ( <str> , fontsize = 16 ) plt . ylabel ( <str> , fontsize = 16 ) plt . grid ( ) plt . legend ( loc = <str> , ncol = 1 , fontsize = 9 ) plt . savefig ( data_dir + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + str ( ellmax ) + <str> + str ( binwidth ) + PDF_end ) np . savetxt ( data_dir + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + str ( ellmax ) + <str> + str ( binwidth ) + TXT_end , np . transpose ( np . array ( [ ell_binned , ClEE_pure , Cl_EE_pure , ClBB_pure , Cl_BB_pure ] ) ) )  