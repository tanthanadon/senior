import numpy as np import matplotlib from cycler import cycler matplotlib . rcParams [ <str> ] = cycler ( color = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) matplotlib . use ( <str> ) matplotlib . rc ( <str> , family = <str> , serif = <str> ) matplotlib . rc ( <str> , usetex = True ) fontProperties = { <str> : <str> , <str> : <str> , <str> : 20 } import matplotlib . pyplot as plt import healpy as hp import subprocess import os try :      import pymaster as nmt  except ImportError :      import pymaster as nmt  FITS_end = <str> TXT_end = <str> PDF_end = <str> DAT_end = <str> N_side = 2048 Npix = 12 * N_side ** 2 Coords = <str> mask_dir = <str> mask_name = <str> apod_Arcmin = 60. apod_Deg = apod_Arcmin / 60. mask_file = mask_dir + mask_name + FITS_end mask = hp . read_map ( mask_file , verbose = False ) apod_Type = <str> mask_apod = nmt . mask_apodization ( mask , apod_Deg , apotype = apod_Type ) sim_dir = <str> sim_name = <str> Nsim = 10 sim_theory = <str> EEDust = ( np . loadtxt ( sim_dir + sim_theory + TXT_end ) ) [ : , 0 ] BBDust = ( np . loadtxt ( sim_dir + sim_theory + TXT_end ) ) [ : , 1 ] ellmax = 1001 ell = np . arange ( int ( ellmax ) + 1 ) EEDust = EEDust [ 0 : int ( ellmax ) + 1 ] BBDust = BBDust [ 0 : int ( ellmax ) + 1 ] EBDust = np . zeros ( ellmax + 1 ) BEDust = np . zeros ( ellmax + 1 ) binwidth = 20 bins = nmt . NmtBin ( N_side , nlb = binwidth , lmax = int ( ellmax ) ) ell_binned = bins . get_effective_ells ( ) nbins = len ( ell_binned ) Q , U = hp . read_map ( sim_dir + sim_name + str ( 0 ) + FITS_end , field = [ 1 , 2 ] , verbose = False ) EB_npure = nmt . NmtField ( mask_apod , [ Q , U ] ) w_npure = nmt . NmtWorkspace ( ) w_npure . compute_coupling_matrix ( EB_npure , EB_npure , bins ) EB_pure = nmt . NmtField ( mask_apod , [ Q , U ] , purify_e = True , purify_b = True ) w_pure = nmt . NmtWorkspace ( ) w_pure . compute_coupling_matrix ( EB_pure , EB_pure , bins ) ClDust_binned_npure = w_npure . decouple_cell ( w_npure . couple_cell ( np . array ( [ EEDust , EBDust , BEDust , BBDust ] ) ) ) ClDust_binned_pure = w_pure . decouple_cell ( w_pure . couple_cell ( np . array ( [ EEDust , EBDust , BEDust , BBDust ] ) ) ) ClEE_arr = np . zeros ( ( Nsim , nbins ) ) ClBB_arr = np . zeros ( ( Nsim , nbins ) ) ClEE_pure_arr = np . zeros ( ( Nsim , nbins ) ) ClBB_pure_arr = np . zeros ( ( Nsim , nbins ) ) print <str> Cl_2x2 = w_npure . decouple_cell ( nmt . compute_coupled_cell ( EB_npure , EB_npure ) ) ClEE_arr [ 0 ] = Cl_2x2 [ 0 ] ClBB_arr [ 0 ] = Cl_2x2 [ 3 ] Cl_2x2_pure = w_pure . decouple_cell ( nmt . compute_coupled_cell ( EB_pure , EB_pure ) ) ClEE_pure_arr [ 0 ] = Cl_2x2_pure [ 0 ] ClBB_pure_arr [ 0 ] = Cl_2x2_pure [ 3 ] for i in xrange ( 1 , Nsim ) :      print i Q , U = hp . read_map ( sim_dir + sim_name + str ( i ) + FITS_end , field = [ 1 , 2 ] , verbose = False ) EB_npure = nmt . NmtField ( mask_apod , [ Q , U ] ) EB_pure = nmt . NmtField ( mask_apod , [ Q , U ] , purify_e = True , purify_b = True ) Cl_2x2 = w_npure . decouple_cell ( nmt . compute_coupled_cell ( EB_npure , EB_npure ) ) ClEE_arr [ i ] = Cl_2x2 [ 0 ] ClBB_arr [ i ] = Cl_2x2 [ 3 ] Cl_2x2_pure = w_pure . decouple_cell ( nmt . compute_coupled_cell ( EB_pure , EB_pure ) ) ClEE_pure_arr [ i ] = Cl_2x2_pure [ 0 ] ClBB_pure_arr [ i ] = Cl_2x2_pure [ 3 ]  ClEE_mean = np . zeros ( nbins ) ClBB_mean = np . zeros ( nbins ) ClEE_std = np . zeros ( nbins ) ClBB_std = np . zeros ( nbins ) ClEE_pure_mean = np . zeros ( nbins ) ClBB_pure_mean = np . zeros ( nbins ) ClEE_pure_std = np . zeros ( nbins ) ClBB_pure_std = np . zeros ( nbins ) for b in xrange ( nbins ) :      ClEE_mean [ b ] = np . mean ( ClEE_arr [ : , b ] ) ClBB_mean [ b ] = np . mean ( ClBB_arr [ : , b ] ) ClEE_std [ b ] = np . std ( ClEE_arr [ : , b ] ) ClBB_std [ b ] = np . std ( ClBB_arr [ : , b ] ) ClEE_pure_mean [ b ] = np . mean ( ClEE_pure_arr [ : , b ] ) ClBB_pure_mean [ b ] = np . mean ( ClBB_pure_arr [ : , b ] ) ClEE_pure_std [ b ] = np . std ( ClEE_pure_arr [ : , b ] ) ClBB_pure_std [ b ] = np . std ( ClBB_pure_arr [ : , b ] )  plt . clf ( ) plt . semilogy ( ell , EEDust [ 0 : int ( ellmax ) + 1 ] , <str> , lw = 1.5 , alpha = 0.7 , label = <str> ) plt . semilogy ( ell , BBDust [ 0 : int ( ellmax ) + 1 ] , <str> , lw = 1.5 , alpha = 0.7 , ls = <str> , label = <str> ) plt . semilogy ( ell_binned , ClDust_binned_npure [ 0 ] , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , ClDust_binned_npure [ 3 ] , <str> , label = <str> ) plt . errorbar ( ell_binned , ClEE_mean , yerr = [ ClEE_std , ClEE_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . errorbar ( ell_binned * 1.1 , ClBB_mean , yerr = [ ClBB_std , ClBB_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . xlim ( 2 , int ( ellmax ) ) plt . ylim ( 1.e-5 , 10. ) plt . xlabel ( <str> , fontsize = 16 ) plt . ylabel ( <str> , fontsize = 16 ) plt . grid ( ) plt . legend ( loc = <str> , ncol = 1 , fontsize = 9 ) plt . savefig ( sim_dir + sim_theory + <str> + str ( Nsim ) + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + <str> + str ( ellmax ) + <str> + str ( binwidth ) + PDF_end ) plt . clf ( ) plt . semilogy ( ell , EEDust [ 0 : int ( ellmax ) + 1 ] , <str> , lw = 1.5 , alpha = 0.7 , label = <str> ) plt . semilogy ( ell , BBDust [ 0 : int ( ellmax ) + 1 ] , <str> , lw = 1.5 , alpha = 0.7 , ls = <str> , label = <str> ) plt . semilogy ( ell_binned , ClDust_binned_pure [ 0 ] , <str> , label = <str> ) plt . semilogy ( ell_binned * 1.1 , ClDust_binned_pure [ 3 ] , <str> , label = <str> ) plt . errorbar ( ell_binned , ClEE_pure_mean , yerr = [ ClEE_pure_std , ClEE_pure_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . errorbar ( ell_binned * 1.1 , ClBB_pure_mean , yerr = [ ClBB_pure_std , ClBB_pure_std ] , fmt = <str> , ecolor = <str> , elinewidth = 1.5 , capsize = 3 , capthick = 1 , marker = <str> , label = <str> ) plt . xlim ( 2 , int ( ellmax ) ) plt . ylim ( 1.e-5 , 10. ) plt . xlabel ( <str> , fontsize = 16 ) plt . ylabel ( <str> , fontsize = 16 ) plt . grid ( ) plt . legend ( loc = <str> , ncol = 1 , fontsize = 9 ) plt . savefig ( sim_dir + sim_theory + <str> + str ( Nsim ) + <str> + apod_Type + <str> + str ( apod_Arcmin ) + <str> + <str> + str ( ellmax ) + <str> + str ( binwidth ) + PDF_end )  