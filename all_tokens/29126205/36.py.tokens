import numpy as np import matplotlib matplotlib . use ( <str> ) matplotlib . rc ( <str> , family = <str> , serif = <str> ) matplotlib . rc ( <str> , usetex = True ) fontProperties = { <str> : <str> , <str> : <str> , <str> : 20 } import matplotlib . pyplot as plt import pyfits import healpy as hp import subprocess import os process_mask_routine = <str> def taper_func ( dist_rad , sigma_apod ) :      return 1. - np . exp ( - dist_rad ** 2. / ( 2. * sigma_apod ** 2. ) )  FITS_end = <str> TXT_end = <str> PDF_end = <str> hole_min_size = <str> hole_min_surf_arcmin2 = <str> filled_file = <str> def apodize_mask ( mask_dir , mask_name , Nside , coords , FWHM_apod_arcmin , PLOT_OPT = False ) :      Npix = 12 * Nside ** 2 mask_file = mask_dir + mask_name + FITS_end distance_file = mask_dir + mask_name + <str> + FITS_end FWHM_apod = FWHM_apod_arcmin * 1. / 60. * np . pi / 180. sigma_apod = FWHM_apod / ( 2. * np . sqrt ( 2. * np . log ( 2. ) ) ) DIST_FILE_EXISTS = False if os . path . exists ( distance_file ) :          DIST_FILE_EXISTS = True  if ( DIST_FILE_EXISTS == False ) :          f = open ( <str> , <str> ) f . write ( <str> + mask_file + <str> ) f . write ( <str> + hole_min_size + <str> ) f . write ( <str> + hole_min_surf_arcmin2 + <str> ) f . write ( <str> + filled_file + <str> ) f . write ( <str> + distance_file + <str> ) f . close ( ) subprocess . call ( [ process_mask_routine , <str> ] ) subprocess . call ( [ <str> , <str> , <str> ] )  mask = hp . read_map ( mask_file , verbose = False ) mask_dist = hp . read_map ( distance_file , verbose = False ) taper_map = taper_func ( mask_dist , sigma_apod ) mask_apod = mask . astype ( np . float ) * taper_map if ( PLOT_OPT == True ) :          plt . clf ( ) hp . mollview ( mask_apod , coord = coords , min = 0. , max = 1. , title = <str> ) plt . savefig ( mask_dir + mask_name + PDF_end )  fsky_apod = np . sum ( mask_apod ) / float ( Npix ) fsky_apod2 = np . sum ( mask_apod ** 2. ) / float ( Npix ) np . savetxt ( mask_dir + mask_name + <str> + TXT_end , np . transpose ( np . array ( [ fsky_apod , fsky_apod2 ] ) ) ) hp . write_map ( mask_dir + mask_name + <str> + str ( int ( FWHM_apod_arcmin ) ) + <str> + FITS_end , mask_apod , coord = coords , overwrite = True )   