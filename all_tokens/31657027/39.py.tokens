from collections import OrderedDict , defaultdict , namedtuple from functools import partial , reduce from itertools import chain , zip_longest from gem . gem import Delta , Indexed , Sum , index_sum , one from gem . node import Memoizer from gem . optimise import delta_elimination as _delta_elimination from gem . optimise import remove_componenttensors , replace_division , unroll_indexsum from gem . refactorise import ATOMIC , COMPOUND , OTHER , MonomialSum , collect_monomials from gem . unconcatenate import unconcatenate from gem . coffee import optimise_monomial_sum from gem . utils import groupby Integral = namedtuple ( <str> , [ <str> , <str> , <str> ] ) def Integrals ( expressions , quadrature_multiindex , argument_multiindices , parameters ) :      expressions = replace_division ( expressions ) max_extent = parameters [ <str> ] if max_extent :          def predicate ( index ) :              return index . extent <= max_extent  expressions = unroll_indexsum ( expressions , predicate = predicate )  expressions = [ index_sum ( e , quadrature_multiindex ) for e in expressions ] argument_indices = tuple ( chain ( * argument_multiindices ) ) return [ Integral ( e , quadrature_multiindex , argument_indices ) for e in expressions ]  def _delta_inside ( node , self ) :      return any ( isinstance ( child , Delta ) or self ( child ) for child in node . children )  def flatten ( var_reps , index_cache ) :      quadrature_indices = OrderedDict ( ) pairs = [ ] for variable , reps in var_reps :          argument_indices , = set ( r . argument_indices for r in reps ) assert set ( variable . free_indices ) == set ( argument_indices ) expressions = [ r . expression for r in reps ] assert all ( set ( e . free_indices ) <= set ( argument_indices ) for e in expressions ) pairs . append ( ( variable , reduce ( Sum , expressions ) ) ) for r in reps :              quadrature_indices . update ( zip_longest ( r . quadrature_multiindex , ( ) ) )   pairs = unconcatenate ( pairs , cache = index_cache ) def group_key ( pair ) :          variable , expression = pair return frozenset ( variable . free_indices )  delta_inside = Memoizer ( _delta_inside ) narrow_variables = OrderedDict ( ) delta_simplified = defaultdict ( MonomialSum ) for free_indices , pair_group in groupby ( pairs , group_key ) :          variables , expressions = zip ( * pair_group ) classifier = partial ( classify , set ( free_indices ) , delta_inside = delta_inside ) monomial_sums = collect_monomials ( expressions , classifier ) for variable , monomial_sum in zip ( variables , monomial_sums ) :              for monomial in monomial_sum :                  var , s , a , r = delta_elimination ( variable , * monomial ) narrow_variables . setdefault ( var ) delta_simplified [ var ] . add ( s , a , r )    for variable in narrow_variables :          monomial_sum = delta_simplified [ variable ] sum_indices = set ( ) . union ( * [ m . sum_indices for m in monomial_sum ] ) sum_indices = [ i for i in quadrature_indices if i in sum_indices ] sum_indices = sorted ( sum_indices , key = lambda index : index . extent ) expression = sum_factorise ( variable , sum_indices , monomial_sum ) yield ( variable , expression )   finalise_options = dict ( replace_delta = False ) def classify ( argument_indices , expression , delta_inside ) :      n = len ( argument_indices . intersection ( expression . free_indices ) ) if n == 0 :          return OTHER  elif n == 1 :          if isinstance ( expression , ( Delta , Indexed ) ) and not delta_inside ( expression ) :              return ATOMIC  else :              return COMPOUND   else :          return COMPOUND   def delta_elimination ( variable , sum_indices , args , rest ) :      factors = list ( args ) + [ variable , rest ] def prune ( factors ) :          result = remove_componenttensors ( factors [ : - 1 ] ) result . append ( factors [ - 1 ] ) return result  sum_indices , factors = _delta_elimination ( sum_indices , factors ) factors = prune ( factors ) var_indices , factors = _delta_elimination ( variable . free_indices , factors ) factors = prune ( factors ) rest = factors . pop ( ) variable = factors . pop ( ) args = [ f for f in factors if f != one ] assert set ( var_indices ) == set ( variable . free_indices ) return variable , sum_indices , args , rest  def sum_factorise ( variable , tail_ordering , monomial_sum ) :      if tail_ordering :          key_ordering = OrderedDict ( ) sub_monosums = defaultdict ( MonomialSum ) for sum_indices , atomics , rest in monomial_sum :              tail_indices = tuple ( i for i in sum_indices if i in tail_ordering ) tail_atomics = tuple ( a for a in atomics if set ( tail_indices ) & set ( a . free_indices ) ) head_indices = tuple ( i for i in sum_indices if i not in tail_ordering ) head_atomics = tuple ( a for a in atomics if a not in tail_atomics ) key = ( head_indices , head_atomics ) key_ordering . setdefault ( key ) sub_monosums [ key ] . add ( tail_indices , tail_atomics , rest )  sub_monosums = [ ( k , sub_monosums [ k ] ) for k in key_ordering ] monomial_sum = MonomialSum ( ) for ( sum_indices , atomics ) , monosum in sub_monosums :              new_rest = sum_factorise ( variable , tail_ordering [ 1 : ] , monosum ) monomial_sum . add ( sum_indices , atomics , new_rest )   return optimise_monomial_sum ( monomial_sum , variable . index_ordering ( ) )   