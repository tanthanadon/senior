from functools import singledispatch , partial import weakref import FIAT from FIAT . tensor_product import FlattenedDimensions import ufl __all__ = ( <str> , <str> , <str> ) supported_elements = { <str> : FIAT . Bernstein , <str> : FIAT . BrezziDouglasMarini , <str> : FIAT . BrezziDouglasFortinMarini , <str> : FIAT . Bubble , <str> : FIAT . FacetBubble , <str> : FIAT . CrouzeixRaviart , <str> : FIAT . DiscontinuousLagrange , <str> : FIAT . DiscontinuousTaylor , <str> : FIAT . DiscontinuousRaviartThomas , <str> : FIAT . GaussLobattoLegendre , <str> : FIAT . GaussLegendre , <str> : FIAT . Lagrange , <str> : FIAT . Nedelec , <str> : FIAT . NedelecSecondKind , <str> : FIAT . RaviartThomas , <str> : FIAT . HDivTrace , <str> : FIAT . Regge , <str> : FIAT . HellanHerrmannJohnson , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : FIAT . DPC , <str> : FIAT . Serendipity , <str> : FIAT . DPC , <str> : FIAT . DiscontinuousLagrange , <str> : FIAT . GaussLegendre , <str> : None , } def as_fiat_cell ( cell ) :      if not isinstance ( cell , ufl . AbstractCell ) :          raise ValueError ( <str> )  return FIAT . ufc_cell ( cell )  @ singledispatch def convert ( element , vector_is_mixed ) :      if element . family ( ) in supported_elements :          raise ValueError ( <str> % element )  raise ValueError ( <str> % type ( element ) )  @ convert . register ( ufl . FiniteElement ) def convert_finiteelement ( element , vector_is_mixed ) :      if element . family ( ) == <str> :          cell = element . cell ( ) return create_element ( ufl . FiniteElement ( <str> , cell , 0 ) , vector_is_mixed )  cell = as_fiat_cell ( element . cell ( ) ) if element . family ( ) == <str> :          degree = element . degree ( ) scheme = element . quadrature_scheme ( ) if degree is None or scheme is None :              raise ValueError ( <str> )  quad_rule = FIAT . create_quadrature ( cell , degree , scheme ) return FIAT . QuadratureElement ( cell , quad_rule . get_points ( ) )  lmbda = supported_elements [ element . family ( ) ] if lmbda is None :          if element . cell ( ) . cellname ( ) == <str> :              element = element . reconstruct ( cell = quadrilateral_tpc )  elif element . cell ( ) . cellname ( ) == <str> :              element = element . reconstruct ( cell = hexahedron_tpc )  else :              raise ValueError ( <str> % element . family ( ) )  return FlattenedDimensions ( create_element ( element , vector_is_mixed ) )  kind = element . variant ( ) if kind is None :          kind = <str> if element . cell ( ) . cellname ( ) == <str> else <str>  if element . family ( ) == <str> :          if kind == <str> :              lmbda = FIAT . Lagrange  elif kind == <str> and element . cell ( ) . cellname ( ) == <str> :              lmbda = FIAT . GaussLobattoLegendre  else :              raise ValueError ( <str> % ( kind , element . cell ( ) ) )   elif element . family ( ) in [ <str> , <str> ] :          if kind == <str> :              lmbda = FIAT . DiscontinuousLagrange  elif kind == <str> and element . cell ( ) . cellname ( ) == <str> :              lmbda = FIAT . GaussLegendre  else :              raise ValueError ( <str> % ( kind , element . cell ( ) ) )   return lmbda ( cell , element . degree ( ) )  @ convert . register ( ufl . RestrictedElement ) def convert_restrictedelement ( element , vector_is_mixed ) :      return FIAT . RestrictedElement ( create_element ( element . sub_element ( ) , vector_is_mixed ) , restriction_domain = element . restriction_domain ( ) )  @ convert . register ( ufl . EnrichedElement ) def convert_enrichedelement ( element , vector_is_mixed ) :      return FIAT . EnrichedElement ( * ( create_element ( e , vector_is_mixed ) for e in element . _elements ) )  @ convert . register ( ufl . NodalEnrichedElement ) def convert_nodalenrichedelement ( element , vector_is_mixed ) :      return FIAT . NodalEnrichedElement ( * ( create_element ( e , vector_is_mixed ) for e in element . _elements ) )  @ convert . register ( ufl . BrokenElement ) def convert_brokenelement ( element , vector_is_mixed ) :      return FIAT . DiscontinuousElement ( create_element ( element . _element , vector_is_mixed ) )  @ convert . register ( ufl . TensorProductElement ) def convert_tensorproductelement ( element , vector_is_mixed ) :      cell = element . cell ( ) if type ( cell ) is not ufl . TensorProductCell :          raise ValueError ( <str> )  A , B = element . sub_elements ( ) return FIAT . TensorProductElement ( create_element ( A , vector_is_mixed ) , create_element ( B , vector_is_mixed ) )  @ convert . register ( ufl . HDivElement ) def convert_hdivelement ( element , vector_is_mixed ) :      return FIAT . Hdiv ( create_element ( element . _element , vector_is_mixed ) )  @ convert . register ( ufl . HCurlElement ) def convert_hcurlelement ( element , vector_is_mixed ) :      return FIAT . Hcurl ( create_element ( element . _element , vector_is_mixed ) )  @ convert . register ( ufl . MixedElement ) def convert_mixedelement ( element , vector_is_mixed ) :      if not vector_is_mixed :          assert isinstance ( element , ( ufl . VectorElement , ufl . TensorElement ) ) return create_element ( element . sub_elements ( ) [ 0 ] , vector_is_mixed )  elements = [ ] def rec ( eles ) :          for ele in eles :              if isinstance ( ele , ufl . MixedElement ) :                  rec ( ele . sub_elements ( ) )  else :                  elements . append ( ele )    rec ( element . sub_elements ( ) ) fiat_elements = map ( partial ( create_element , vector_is_mixed = vector_is_mixed ) , elements ) return FIAT . MixedElement ( fiat_elements )  hexahedron_tpc = ufl . TensorProductCell ( ufl . quadrilateral , ufl . interval ) quadrilateral_tpc = ufl . TensorProductCell ( ufl . interval , ufl . interval ) _cache = weakref . WeakKeyDictionary ( ) def create_element ( element , vector_is_mixed = True ) :      try :          cache = _cache [ element ]  except KeyError :          _cache [ element ] = { } cache = _cache [ element ]  try :          return cache [ vector_is_mixed ]  except KeyError :          pass  if element . cell ( ) is None :          raise ValueError ( <str> )  fiat_element = convert ( element , vector_is_mixed ) cache [ vector_is_mixed ] = fiat_element return fiat_element   