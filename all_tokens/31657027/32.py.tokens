import pytest import FIAT from FIAT . discontinuous_lagrange import HigherOrderDiscontinuousLagrange as FIAT_DiscontinuousLagrange import ufl from tsfc . fiatinterface import create_element , supported_elements @ pytest . fixture ( params = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) def triangle_names ( request ) :      return request . param  @ pytest . fixture def ufl_element ( triangle_names ) :      return ufl . FiniteElement ( triangle_names , ufl . triangle , 2 )  def test_triangle_basic ( ufl_element ) :      element = create_element ( ufl_element ) assert isinstance ( element , supported_elements [ ufl_element . family ( ) ] )  @ pytest . fixture ( params = [ <str> , <str> , <str> ] , scope = <str> ) def tensor_name ( request ) :      return request . param  @ pytest . fixture ( params = [ ufl . interval , ufl . triangle , ufl . quadrilateral ] , ids = lambda x : x . cellname ( ) , scope = <str> ) def ufl_A ( request , tensor_name ) :      return ufl . FiniteElement ( tensor_name , request . param , 1 )  @ pytest . fixture def ufl_B ( tensor_name ) :      return ufl . FiniteElement ( tensor_name , ufl . interval , 1 )  def test_tensor_prod_simple ( ufl_A , ufl_B ) :      tensor_ufl = ufl . TensorProductElement ( ufl_A , ufl_B ) tensor = create_element ( tensor_ufl ) A = create_element ( ufl_A ) B = create_element ( ufl_B ) assert isinstance ( tensor , FIAT . TensorProductElement ) assert tensor . A is A assert tensor . B is B  @ pytest . mark . parametrize ( ( <str> , <str> ) , [ ( <str> , FIAT . GaussLobattoLegendre ) , ( <str> , FIAT . GaussLegendre ) , ( <str> , FIAT . GaussLegendre ) ] ) def test_interval_variant_default ( family , expected_cls ) :      ufl_element = ufl . FiniteElement ( family , ufl . interval , 3 ) assert isinstance ( create_element ( ufl_element ) , expected_cls )  @ pytest . mark . parametrize ( ( <str> , <str> , <str> ) , [ ( <str> , <str> , FIAT . Lagrange ) , ( <str> , <str> , FIAT . GaussLobattoLegendre ) , ( <str> , <str> , FIAT_DiscontinuousLagrange ) , ( <str> , <str> , FIAT . GaussLegendre ) , ( <str> , <str> , FIAT_DiscontinuousLagrange ) , ( <str> , <str> , FIAT . GaussLegendre ) ] ) def test_interval_variant ( family , variant , expected_cls ) :      ufl_element = ufl . FiniteElement ( family , ufl . interval , 3 , variant = variant ) assert isinstance ( create_element ( ufl_element ) , expected_cls )  def test_triangle_variant_spectral_fail ( ) :      ufl_element = ufl . FiniteElement ( <str> , ufl . triangle , 2 , variant = <str> ) with pytest . raises ( ValueError ) :          create_element ( ufl_element )   def test_triangle_variant_spectral_fail_l2 ( ) :      ufl_element = ufl . FiniteElement ( <str> , ufl . triangle , 2 , variant = <str> ) with pytest . raises ( ValueError ) :          create_element ( ufl_element )   def test_quadrilateral_variant_spectral_q ( ) :      element = create_element ( ufl . FiniteElement ( <str> , ufl . quadrilateral , 3 , variant = <str> ) ) assert isinstance ( element . element . A , FIAT . GaussLobattoLegendre ) assert isinstance ( element . element . B , FIAT . GaussLobattoLegendre )  def test_quadrilateral_variant_spectral_dq ( ) :      element = create_element ( ufl . FiniteElement ( <str> , ufl . quadrilateral , 1 , variant = <str> ) ) assert isinstance ( element . element . A , FIAT . GaussLegendre ) assert isinstance ( element . element . B , FIAT . GaussLegendre )  def test_quadrilateral_variant_spectral_dq_l2 ( ) :      element = create_element ( ufl . FiniteElement ( <str> , ufl . quadrilateral , 1 , variant = <str> ) ) assert isinstance ( element . element . A , FIAT . GaussLegendre ) assert isinstance ( element . element . B , FIAT . GaussLegendre )  def test_quadrilateral_variant_spectral_rtcf ( ) :      element = create_element ( ufl . FiniteElement ( <str> , ufl . quadrilateral , 2 , variant = <str> ) ) assert isinstance ( element . element . _elements [ 0 ] . A , FIAT . GaussLobattoLegendre ) assert isinstance ( element . element . _elements [ 0 ] . B , FIAT . GaussLegendre ) assert isinstance ( element . element . _elements [ 1 ] . A , FIAT . GaussLegendre ) assert isinstance ( element . element . _elements [ 1 ] . B , FIAT . GaussLobattoLegendre )  def test_cache_hit ( ufl_element ) :      A = create_element ( ufl_element ) B = create_element ( ufl_element ) assert A is B  if __name__ == <str> :      import os import sys pytest . main ( args = [ os . path . abspath ( __file__ ) ] + sys . argv [ 1 : ] )   