import collections class cached_property ( object ) :      def __init__ ( self , fget , doc = None ) :          self . fget = fget self . __doc__ = doc or fget . __doc__ self . __name__ = fget . __name__ self . __module__ = fget . __module__  def __get__ ( self , obj , cls ) :          if obj is None :              return self  obj . __dict__ [ self . __name__ ] = result = self . fget ( obj ) return result   def groupby ( iterable , key = None ) :      if key is None :          key = lambda x : x  groups = collections . OrderedDict ( ) for elem in iterable :          groups . setdefault ( key ( elem ) , [ ] ) . append ( elem )  return groups . items ( )  def make_proxy_class ( name , cls ) :      def __init__ ( self , wrapee ) :          self . _wrapee = wrapee  def make_proxy_property ( name ) :          def getter ( self ) :              return getattr ( self . _wrapee , name )  return property ( getter )  dct = { <str> : __init__ } for attr in dir ( cls ) :          if not attr . startswith ( <str> ) :              dct [ attr ] = make_proxy_property ( attr )   return type ( name , ( ) , dct )  class UnsetVariableError ( LookupError ) :      pass  _unset = object ( ) class DynamicallyScoped ( object ) :      def __init__ ( self , default_value = _unset ) :          if default_value is _unset :              self . _head = None  else :              self . _head = ( default_value , None )   def let ( self , value ) :          return _LetBlock ( self , value )  @ property def value ( self ) :          if self . _head is None :              raise UnsetVariableError ( <str> )  result , tail = self . _head return result   class _LetBlock ( object ) :      def __init__ ( self , variable , value ) :          self . variable = variable self . value = value self . state = None  def __enter__ ( self ) :          assert self . state is None value = self . value tail = self . variable . _head scope = ( value , tail ) self . variable . _head = scope self . state = scope  def __exit__ ( self , exc_type , exc_value , traceback ) :          variable = self . variable assert self . state is variable . _head value , variable . _head = variable . _head self . state = None    