import numpy import coffee . base as coffee import gem from gem . utils import cached_property from tsfc . kernel_interface import KernelInterface class KernelBuilderBase ( KernelInterface ) :      def __init__ ( self , scalar_type , interior_facet = False ) :          assert isinstance ( interior_facet , bool ) self . scalar_type = scalar_type self . interior_facet = interior_facet self . prepare = [ ] self . finalise = [ ] self . domain_coordinate = { } self . coefficient_map = { }  @ cached_property def unsummed_coefficient_indices ( self ) :          return frozenset ( )  def coordinate ( self , domain ) :          return self . domain_coordinate [ domain ]  def coefficient ( self , ufl_coefficient , restriction ) :          kernel_arg = self . coefficient_map [ ufl_coefficient ] if ufl_coefficient . ufl_element ( ) . family ( ) == <str> :              return kernel_arg  elif not self . interior_facet :              return kernel_arg  else :              return kernel_arg [ { <str> : 0 , <str> : 1 } [ restriction ] ]   def cell_orientation ( self , restriction ) :          f = { None : 0 , <str> : 0 , <str> : 1 } [ restriction ] co_int = self . _cell_orientations [ f ] return gem . Conditional ( gem . Comparison ( <str> , co_int , gem . Literal ( 1 ) ) , gem . Literal ( - 1 ) , gem . Conditional ( gem . Comparison ( <str> , co_int , gem . Zero ( ) ) , gem . Literal ( 1 ) , gem . Literal ( numpy . nan ) ) )  def cell_size ( self , restriction ) :          if not hasattr ( self , <str> ) :              raise RuntimeError ( <str> )  f = { None : ( ) , <str> : ( 0 , ) , <str> : ( 1 , ) } [ restriction ] return gem . partial_indexed ( self . _cell_sizes , f )  def entity_number ( self , restriction ) :          return self . _entity_number [ restriction ]  def apply_glue ( self , prepare = None , finalise = None ) :          if prepare is not None :              self . prepare . extend ( prepare )  if finalise is not None :              self . finalise . extend ( finalise )   def construct_kernel ( self , name , args , body ) :          assert isinstance ( body , coffee . Block ) body_ = coffee . Block ( self . prepare + body . children + self . finalise ) return coffee . FunDecl ( <str> , name , args , body_ , pred = [ <str> , <str> ] )  def register_requirements ( self , ir ) :          pass    