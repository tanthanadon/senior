import pytest import electrumx . lib . tx_dash as lib_tx_dash bfh = bytes . fromhex V2_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> ) CB_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> ) CB_TX_V2 = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) PRO_REG_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) PRO_UP_SERV_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) PRO_UP_REG_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) PRO_UP_REV_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) SUB_TX_REGISTER = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) SUB_TX_TOPUP = ( <str> <str> <str> <str> <str> <str> <str> ) SUB_TX_RESET_KEY = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) SUB_TX_CLOSE_ACCOUNT = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) UNKNOWN_SPEC_TX = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) WRONG_SPEC_TX = ( <str> <str> <str> <str> <str> <str> ) def test_dash_v2_tx ( ) :      test = bfh ( V2_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 2 assert tx . tx_type == 0 assert tx . extra_payload == <str> ser = tx . serialize ( ) assert ser == test  def test_dash_tx_cb_tx ( ) :      test = bfh ( CB_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 5 extra = tx . extra_payload assert extra . version == 1 assert extra . height == 264132 assert len ( extra . merkleRootMNList ) == 32 assert extra . merkleRootMNList == bfh ( <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_cb_tx_v2 ( ) :      test = bfh ( CB_TX_V2 ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 5 extra = tx . extra_payload assert extra . version == 2 assert extra . height == 264132 assert len ( extra . merkleRootMNList ) == 32 assert extra . merkleRootMNList == bfh ( <str> ) assert len ( extra . merkleRootQuorums ) == 32 assert extra . merkleRootQuorums == bfh ( <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_pro_reg_tx ( ) :      test = bfh ( PRO_REG_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 1 extra = tx . extra_payload assert extra . version == 1 assert extra . type == 0 assert extra . mode == 0 assert len ( extra . collateralOutpoint . hash ) == 32 assert extra . collateralOutpoint . hash == bfh ( <str> ) assert extra . collateralOutpoint . index == 1 assert len ( extra . ipAddress ) == 16 assert extra . ipAddress == bfh ( <str> ) assert extra . port == 29999 assert len ( extra . KeyIdOwner ) == 20 assert extra . KeyIdOwner == bfh ( <str> ) assert len ( extra . PubKeyOperator ) == 48 assert extra . PubKeyOperator == bfh ( <str> <str> ) assert len ( extra . KeyIdVoting ) == 20 assert extra . KeyIdVoting == bfh ( <str> ) assert extra . operatorReward == 0 assert extra . scriptPayout == bfh ( <str> ) assert len ( extra . inputsHash ) == 32 assert extra . inputsHash == bfh ( <str> ) assert extra . payloadSig == bfh ( <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_pro_up_serv_tx ( ) :      test = bfh ( PRO_UP_SERV_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 2 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . proTxHash ) == 32 assert extra . proTxHash == bfh ( <str> ) assert len ( extra . ipAddress ) == 16 assert extra . ipAddress == bfh ( <str> ) assert extra . port == 10001 assert extra . scriptOperatorPayout == bfh ( <str> ) assert len ( extra . inputsHash ) == 32 assert extra . inputsHash == bfh ( <str> <str> ) assert len ( extra . payloadSig ) == 96 assert extra . payloadSig == bfh ( <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_pro_up_reg_tx ( ) :      test = bfh ( PRO_UP_REG_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 3 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . proTxHash ) == 32 assert extra . proTxHash == bfh ( <str> ) assert extra . mode == 0 assert len ( extra . PubKeyOperator ) == 48 assert extra . PubKeyOperator == bfh ( <str> <str> ) assert len ( extra . KeyIdVoting ) == 20 assert extra . KeyIdVoting == bfh ( <str> ) assert extra . scriptPayout == bfh ( <str> ) assert len ( extra . inputsHash ) == 32 assert extra . inputsHash == bfh ( <str> ) assert extra . payloadSig == bfh ( <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_pro_up_rev_tx ( ) :      test = bfh ( PRO_UP_REV_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 4 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . proTxHash ) == 32 assert extra . proTxHash == bfh ( <str> ) assert extra . reason == 0 assert len ( extra . inputsHash ) == 32 assert extra . inputsHash == bfh ( <str> ) assert len ( extra . payloadSig ) == 96 assert extra . payloadSig == bfh ( <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_sub_tx_register_tx ( ) :      test = bfh ( SUB_TX_REGISTER ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 8 extra = tx . extra_payload assert extra . version == 1 assert extra . userName == <str> assert len ( extra . pubKey ) == 48 assert extra . pubKey == bfh ( <str> <str> ) assert len ( extra . payloadSig ) == 96 assert extra . payloadSig == bfh ( <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_sub_tx_topup_tx ( ) :      test = bfh ( SUB_TX_TOPUP ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 9 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . regTxHash ) == 32 assert extra . regTxHash == bfh ( <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_sub_tx_reset_key_tx ( ) :      test = bfh ( SUB_TX_RESET_KEY ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 10 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . regTxHash ) == 32 assert extra . regTxHash == bfh ( <str> ) assert len ( extra . hashPrevSubTx ) == 32 assert extra . hashPrevSubTx == bfh ( <str> ) assert extra . creditFee == 1000 assert len ( extra . newPubKey ) == 48 assert extra . newPubKey == bfh ( <str> <str> ) assert len ( extra . payloadSig ) == 96 assert extra . payloadSig == bfh ( <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_sub_tx_close_account_tx ( ) :      test = bfh ( SUB_TX_CLOSE_ACCOUNT ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 11 extra = tx . extra_payload assert extra . version == 1 assert len ( extra . regTxHash ) == 32 assert extra . regTxHash == bfh ( <str> ) assert len ( extra . hashPrevSubTx ) == 32 assert extra . hashPrevSubTx == bfh ( <str> ) assert extra . creditFee == 1000 assert len ( extra . payloadSig ) == 96 assert extra . payloadSig == bfh ( <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_unknown_spec_tx ( ) :      test = bfh ( UNKNOWN_SPEC_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 3 assert tx . tx_type == 187 extra = tx . extra_payload assert extra == bfh ( <str> <str> <str> <str> <str> <str> ) ser = tx . serialize ( ) assert ser == test  def test_dash_tx_wrong_spec_tx ( ) :      test = bfh ( WRONG_SPEC_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . version == 12255234 assert tx . tx_type == 0 extra = tx . extra_payload assert extra == <str> ser = tx . serialize ( ) assert ser == test  def test_dash_tx_serialize_wrong_tx_type ( ) :      test = bfh ( CB_TX ) deser = lib_tx_dash . DeserializerDash ( test ) tx = deser . read_tx ( ) assert tx . tx_type == 5 tx = tx . _replace ( tx_type = 4 ) assert tx . tx_type == 4 with pytest . raises ( ValueError ) as excinfo :          ser = tx . serialize ( )  assert ( <str> <str> in str ( excinfo . value ) )   