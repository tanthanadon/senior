import os from functools import partial import electrumx . lib . util as util def db_class ( name ) :      for db_class in util . subclasses ( Storage ) :          if db_class . __name__ . lower ( ) == name . lower ( ) :              db_class . import_module ( ) return db_class   raise RuntimeError ( <str> . format ( name ) )  class Storage ( object ) :      def __init__ ( self , name , for_sync ) :          self . is_new = not os . path . exists ( name ) self . for_sync = for_sync or self . is_new self . open ( name , create = self . is_new )  @ classmethod def import_module ( cls ) :          raise NotImplementedError  def open ( self , name , create ) :          raise NotImplementedError  def close ( self ) :          raise NotImplementedError  def get ( self , key ) :          raise NotImplementedError  def put ( self , key , value ) :          raise NotImplementedError  def write_batch ( self ) :          raise NotImplementedError  def iterator ( self , prefix = <str> , reverse = False ) :          raise NotImplementedError   class LevelDB ( Storage ) :      @ classmethod def import_module ( cls ) :          import plyvel cls . module = plyvel  def open ( self , name , create ) :          mof = 512 if self . for_sync else 128 self . db = self . module . DB ( name , create_if_missing = create , max_open_files = mof ) self . close = self . db . close self . get = self . db . get self . put = self . db . put self . iterator = self . db . iterator self . write_batch = partial ( self . db . write_batch , transaction = True , sync = True )   class RocksDB ( Storage ) :      @ classmethod def import_module ( cls ) :          import rocksdb cls . module = rocksdb  def open ( self , name , create ) :          mof = 512 if self . for_sync else 128 options = self . module . Options ( create_if_missing = create , use_fsync = True , target_file_size_base = 33554432 , max_open_files = mof ) self . db = self . module . DB ( name , options ) self . get = self . db . get self . put = self . db . put  def close ( self ) :          self . db = self . get = self . put = None import gc gc . collect ( )  def write_batch ( self ) :          return RocksDBWriteBatch ( self . db )  def iterator ( self , prefix = <str> , reverse = False ) :          return RocksDBIterator ( self . db , prefix , reverse )   class RocksDBWriteBatch ( object ) :      def __init__ ( self , db ) :          self . batch = RocksDB . module . WriteBatch ( ) self . db = db  def __enter__ ( self ) :          return self . batch  def __exit__ ( self , exc_type , exc_val , exc_tb ) :          if not exc_val :              self . db . write ( self . batch )    class RocksDBIterator ( object ) :      def __init__ ( self , db , prefix , reverse ) :          self . prefix = prefix if reverse :              self . iterator = reversed ( db . iteritems ( ) ) nxt_prefix = util . increment_byte_string ( prefix ) if nxt_prefix :                  self . iterator . seek ( nxt_prefix ) try :                      next ( self . iterator )  except StopIteration :                      self . iterator . seek ( nxt_prefix )   else :                  self . iterator . seek_to_last ( )   else :              self . iterator = db . iteritems ( ) self . iterator . seek ( prefix )   def __iter__ ( self ) :          return self  def __next__ ( self ) :          k , v = next ( self . iterator ) if not k . startswith ( self . prefix ) :              raise StopIteration  return k , v    