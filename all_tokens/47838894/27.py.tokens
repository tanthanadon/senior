import json import os from binascii import unhexlify import pytest from electrumx . lib . coins import Coin , Namecoin from electrumx . lib . hash import hash_to_hex_str from electrumx . lib . script import OpCodes , Script TRANSACTION_DIR = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ ) ) , <str> ) transactions = [ ] for name in os . listdir ( TRANSACTION_DIR ) :      try :          name_parts = name . split ( <str> ) coinFound = Coin . lookup_coin_class ( name_parts [ 0 ] , name_parts [ 1 ] ) with open ( os . path . join ( TRANSACTION_DIR , name ) ) as f :              transactions . append ( ( coinFound , json . load ( f ) ) )   except Exception as e :          transactions . append ( pytest . fail ( name ) )   @ pytest . fixture ( params = transactions ) def transaction_details ( request ) :      return request . param  def test_transaction ( transaction_details ) :      coin , tx_info = transaction_details raw_tx = unhexlify ( tx_info [ <str> ] ) tx , tx_hash = coin . DESERIALIZER ( raw_tx , 0 ) . read_tx_and_hash ( ) assert tx_info [ <str> ] == hash_to_hex_str ( tx_hash ) vin = tx_info [ <str> ] for i in range ( len ( vin ) ) :          assert vin [ i ] [ <str> ] == hash_to_hex_str ( tx . inputs [ i ] . prev_hash ) assert vin [ i ] [ <str> ] == tx . inputs [ i ] . prev_idx  vout = tx_info [ <str> ] for i in range ( len ( vout ) ) :          assert vout [ i ] [ <str> ] == tx . outputs [ i ] . value spk = vout [ i ] [ <str> ] tx_pks = tx . outputs [ i ] . pk_script assert spk [ <str> ] == tx_pks . hex ( ) if <str> in spk :              assert len ( spk [ <str> ] ) == 1 address = spk [ <str> ] [ 0 ]  else :              address = spk [ <str> ]  assert coin . address_to_hashX ( address ) == coin . hashX_from_script ( tx_pks ) if issubclass ( coin , Namecoin ) :              if <str> not in spk or <str> not in spk [ <str> ] :                  assert coin . name_hashX_from_script ( tx_pks ) is None  else :                  OP_NAME_UPDATE = OpCodes . OP_3 normalized_name_op_script = bytearray ( ) normalized_name_op_script . append ( OP_NAME_UPDATE ) normalized_name_op_script . extend ( Script . push_data ( spk [ <str> ] [ <str> ] . encode ( <str> ) ) ) normalized_name_op_script . extend ( Script . push_data ( bytes ( [ ] ) ) ) normalized_name_op_script . append ( OpCodes . OP_2DROP ) normalized_name_op_script . append ( OpCodes . OP_DROP ) normalized_name_op_script . append ( OpCodes . OP_RETURN ) assert coin . name_hashX_from_script ( tx_pks ) == Coin . hashX_from_script ( normalized_name_op_script )      