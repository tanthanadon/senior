from os import environ from electrumx . lib . util import class_logger class EnvBase ( object ) :      class Error ( Exception ) :          pass  def __init__ ( self ) :          self . logger = class_logger ( __name__ , self . __class__ . __name__ ) self . allow_root = self . boolean ( <str> , False ) self . loop_policy = self . event_loop_policy ( )  @ classmethod def default ( cls , envvar , default ) :          return environ . get ( envvar , default )  @ classmethod def boolean ( cls , envvar , default ) :          default = <str> if default else <str> return bool ( cls . default ( envvar , default ) . strip ( ) )  @ classmethod def required ( cls , envvar ) :          value = environ . get ( envvar ) if value is None :              raise cls . Error ( <str> . format ( envvar ) )  return value  @ classmethod def integer ( cls , envvar , default ) :          value = environ . get ( envvar ) if value is None :              return default  try :              return int ( value )  except Exception :              raise cls . Error ( <str> . format ( envvar , value ) )   @ classmethod def custom ( cls , envvar , default , parse ) :          value = environ . get ( envvar ) if value is None :              return default  try :              return parse ( value )  except Exception as e :              raise cls . Error ( <str> . format ( envvar , value ) ) from e   @ classmethod def obsolete ( cls , envvars ) :          bad = [ envvar for envvar in envvars if environ . get ( envvar ) ] if bad :              raise cls . Error ( <str> . format ( bad ) )   def event_loop_policy ( self ) :          policy = self . default ( <str> , None ) if policy is None :              return None  if policy == <str> :              import uvloop return uvloop . EventLoopPolicy ( )  raise self . Error ( <str> . format ( policy ) )    