from collections import namedtuple from electrumx . lib . tx import Deserializer from electrumx . lib . util import ( pack_le_uint16 , pack_le_int32 , pack_le_uint32 , pack_le_int64 , pack_varint , pack_varbytes , pack_be_uint16 ) class DashTx ( namedtuple ( <str> , <str> <str> ) ) :      def serialize ( self ) :          nLocktime = pack_le_uint32 ( self . locktime ) txins = ( pack_varint ( len ( self . inputs ) ) + <str> . join ( tx_in . serialize ( ) for tx_in in self . inputs ) ) txouts = ( pack_varint ( len ( self . outputs ) ) + <str> . join ( tx_out . serialize ( ) for tx_out in self . outputs ) ) if self . tx_type :              uVersion = pack_le_uint16 ( self . version ) uTxType = pack_le_uint16 ( self . tx_type ) vExtra = self . _serialize_extra_payload ( ) return uVersion + uTxType + txins + txouts + nLocktime + vExtra  else :              nVersion = pack_le_int32 ( self . version ) return nVersion + txins + txouts + nLocktime   def _serialize_extra_payload ( self ) :          extra = self . extra_payload spec_tx_class = DeserializerDash . SPEC_TX_HANDLERS . get ( self . tx_type ) if not spec_tx_class :              assert isinstance ( extra , ( bytes , bytearray ) ) return pack_varbytes ( extra )  if not isinstance ( extra , spec_tx_class ) :              raise ValueError ( <str> <str> % ( self . tx_type , extra ) )  return pack_varbytes ( extra . serialize ( ) )   class DashProRegTx ( namedtuple ( <str> , <str> <str> <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . ipAddress ) == 16 and len ( self . KeyIdOwner ) == 20 and len ( self . PubKeyOperator ) == 48 and len ( self . KeyIdVoting ) == 20 and len ( self . inputsHash ) == 32 ) return ( pack_le_uint16 ( self . version ) + pack_le_uint16 ( self . type ) + pack_le_uint16 ( self . mode ) + self . collateralOutpoint . serialize ( ) + self . ipAddress + pack_be_uint16 ( self . port ) + self . KeyIdOwner + self . PubKeyOperator + self . KeyIdVoting + pack_le_uint16 ( self . operatorReward ) + pack_varbytes ( self . scriptPayout ) + self . inputsHash + pack_varbytes ( self . payloadSig ) )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashProRegTx ( deser . _read_le_uint16 ( ) , deser . _read_le_uint16 ( ) , deser . _read_le_uint16 ( ) , deser . _read_outpoint ( ) , deser . _read_nbytes ( 16 ) , deser . _read_be_uint16 ( ) , deser . _read_nbytes ( 20 ) , deser . _read_nbytes ( 48 ) , deser . _read_nbytes ( 20 ) , deser . _read_le_uint16 ( ) , deser . _read_varbytes ( ) , deser . _read_nbytes ( 32 ) , deser . _read_varbytes ( ) )   class DashProUpServTx ( namedtuple ( <str> , <str> <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . proTxHash ) == 32 and len ( self . ipAddress ) == 16 and len ( self . inputsHash ) == 32 and len ( self . payloadSig ) == 96 ) return ( pack_le_uint16 ( self . version ) + self . proTxHash + self . ipAddress + pack_be_uint16 ( self . port ) + pack_varbytes ( self . scriptOperatorPayout ) + self . inputsHash + self . payloadSig )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashProUpServTx ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_nbytes ( 16 ) , deser . _read_be_uint16 ( ) , deser . _read_varbytes ( ) , deser . _read_nbytes ( 32 ) , deser . _read_nbytes ( 96 ) )   class DashProUpRegTx ( namedtuple ( <str> , <str> <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . proTxHash ) == 32 and len ( self . PubKeyOperator ) == 48 and len ( self . KeyIdVoting ) == 20 and len ( self . inputsHash ) == 32 ) return ( pack_le_uint16 ( self . version ) + self . proTxHash + pack_le_uint16 ( self . mode ) + self . PubKeyOperator + self . KeyIdVoting + pack_varbytes ( self . scriptPayout ) + self . inputsHash + pack_varbytes ( self . payloadSig ) )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashProUpRegTx ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 48 ) , deser . _read_nbytes ( 20 ) , deser . _read_varbytes ( ) , deser . _read_nbytes ( 32 ) , deser . _read_varbytes ( ) )   class DashProUpRevTx ( namedtuple ( <str> , <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . proTxHash ) == 32 and len ( self . inputsHash ) == 32 and len ( self . payloadSig ) == 96 ) return ( pack_le_uint16 ( self . version ) + self . proTxHash + pack_le_uint16 ( self . reason ) + self . inputsHash + self . payloadSig )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashProUpRevTx ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_nbytes ( 96 ) )   class DashCbTx ( namedtuple ( <str> , <str> <str> ) ) :      def serialize ( self ) :          assert len ( self . merkleRootMNList ) == 32 res = ( pack_le_uint16 ( self . version ) + pack_le_uint32 ( self . height ) + self . merkleRootMNList ) if self . version > 1 :              assert len ( self . merkleRootQuorums ) == 32 res += self . merkleRootQuorums  return res  @ classmethod def read_tx_extra ( cls , deser ) :          version = deser . _read_le_uint16 ( ) height = deser . _read_le_uint32 ( ) merkleRootMNList = deser . _read_nbytes ( 32 ) merkleRootQuorums = <str> if version > 1 :              merkleRootQuorums = deser . _read_nbytes ( 32 )  return DashCbTx ( version , height , merkleRootMNList , merkleRootQuorums )   class DashSubTxRegister ( namedtuple ( <str> , <str> ) ) :      def serialize ( self ) :          assert ( len ( self . pubKey ) == 48 and len ( self . payloadSig ) == 96 ) return ( pack_le_uint16 ( self . version ) + pack_varbytes ( self . userName ) + self . pubKey + self . payloadSig )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashSubTxRegister ( deser . _read_le_uint16 ( ) , deser . _read_varbytes ( ) , deser . _read_nbytes ( 48 ) , deser . _read_nbytes ( 96 ) )   class DashSubTxTopup ( namedtuple ( <str> , <str> ) ) :      def serialize ( self ) :          assert len ( self . regTxHash ) == 32 return ( pack_le_uint16 ( self . version ) + self . regTxHash )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashSubTxTopup ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) )   class DashSubTxResetKey ( namedtuple ( <str> , <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . regTxHash ) == 32 and len ( self . hashPrevSubTx ) == 32 and len ( self . newPubKey ) == 48 and len ( self . payloadSig ) == 96 ) return ( pack_le_uint16 ( self . version ) + self . regTxHash + self . hashPrevSubTx + pack_le_int64 ( self . creditFee ) + self . newPubKey + self . payloadSig )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashSubTxResetKey ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_nbytes ( 32 ) , deser . _read_le_int64 ( ) , deser . _read_nbytes ( 48 ) , deser . _read_nbytes ( 96 ) )   class DashSubTxCloseAccount ( namedtuple ( <str> , <str> <str> ) ) :      def serialize ( self ) :          assert ( len ( self . regTxHash ) == 32 and len ( self . hashPrevSubTx ) == 32 and len ( self . payloadSig ) == 96 ) return ( pack_le_uint16 ( self . version ) + self . regTxHash + self . hashPrevSubTx + pack_le_int64 ( self . creditFee ) + self . payloadSig )  @ classmethod def read_tx_extra ( cls , deser ) :          return DashSubTxCloseAccount ( deser . _read_le_uint16 ( ) , deser . _read_nbytes ( 32 ) , deser . _read_nbytes ( 32 ) , deser . _read_le_int64 ( ) , deser . _read_nbytes ( 96 ) )   class TxOutPoint ( namedtuple ( <str> , <str> ) ) :      def serialize ( self ) :          assert len ( self . hash ) == 32 return ( self . hash + pack_le_uint32 ( self . index ) )  @ classmethod def read_outpoint ( cls , deser ) :          return TxOutPoint ( deser . _read_nbytes ( 32 ) , deser . _read_le_uint32 ( ) )   class DeserializerDash ( Deserializer ) :      PRO_REG_TX = 1 PRO_UP_SERV_TX = 2 PRO_UP_REG_TX = 3 PRO_UP_REV_TX = 4 CB_TX = 5 SUB_TX_REGISTER = 8 SUB_TX_TOPUP = 9 SUB_TX_RESET_KEY = 10 SUB_TX_CLOSE_ACCOUNT = 11 SPEC_TX_HANDLERS = { PRO_REG_TX : DashProRegTx , PRO_UP_SERV_TX : DashProUpServTx , PRO_UP_REG_TX : DashProUpRegTx , PRO_UP_REV_TX : DashProUpRevTx , CB_TX : DashCbTx , SUB_TX_REGISTER : DashSubTxRegister , SUB_TX_TOPUP : DashSubTxTopup , SUB_TX_RESET_KEY : DashSubTxResetKey , SUB_TX_CLOSE_ACCOUNT : DashSubTxCloseAccount , } def _read_outpoint ( self ) :          return TxOutPoint . read_outpoint ( self )  def read_tx ( self ) :          header = self . _read_le_uint32 ( ) tx_type = header >> 16 if tx_type :              version = header & 0x0000ffff  else :              version = header  if tx_type and version < 3 :              version = header tx_type = 0  inputs = self . _read_inputs ( ) outputs = self . _read_outputs ( ) locktime = self . _read_le_uint32 ( ) if tx_type :              extra_payload_size = self . _read_varint ( ) end = self . cursor + extra_payload_size spec_tx_class = DeserializerDash . SPEC_TX_HANDLERS . get ( tx_type ) if spec_tx_class :                  read_method = getattr ( spec_tx_class , <str> , None ) extra_payload = read_method ( self ) assert isinstance ( extra_payload , spec_tx_class )  else :                  extra_payload = self . _read_nbytes ( extra_payload_size )  assert self . cursor == end  else :              extra_payload = <str>  tx = DashTx ( version , inputs , outputs , locktime , tx_type , extra_payload ) return tx    