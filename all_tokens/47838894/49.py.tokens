import argparse import asyncio import sys from electrumx import Env from electrumx . server . db import DB from electrumx . lib . hash import hash_to_hex_str , Base58Error async def print_stats ( hist_db , utxo_db ) :      count = 0 for key in utxo_db . iterator ( prefix = <str> , include_value = False ) :          count += 1  print ( <str> ) count = 0 for key in utxo_db . iterator ( prefix = <str> , include_value = False ) :          count += 1  print ( <str> ) hist = 0 hist_len = 0 for key , value in hist_db . iterator ( prefix = <str> ) :          hist += 1 hist_len += len ( value ) // 4  print ( <str> )  def arg_to_hashX ( coin , arg ) :      try :          script = bytes . fromhex ( arg ) print ( <str> ) return coin . hashX_from_script ( script )  except ValueError :          pass  try :          hashX = coin . address_to_hashX ( arg ) print ( <str> ) return hashX  except Base58Error :          print ( <str> ) return None   async def query ( args ) :      env = Env ( ) db = DB ( env ) coin = env . coin await db . open_for_serving ( ) if not args . scripts :          await print_stats ( db . hist_db , db . utxo_db ) return  limit = args . limit for arg in args . scripts :          hashX = arg_to_hashX ( coin , arg ) if not hashX :              continue  n = None history = await db . limited_history ( hashX , limit = limit ) for n , ( tx_hash , height ) in enumerate ( history , start = 1 ) :              print ( <str> <str> )  if n is None :              print ( <str> )  n = None utxos = await db . all_utxos ( hashX ) for n , utxo in enumerate ( utxos , start = 1 ) :              print ( <str> <str> <str> ) if n == limit :                  break   if n is None :              print ( <str> )  balance = sum ( utxo . value for utxo in utxos ) print ( <str> )   def main ( ) :      default_limit = 10 parser = argparse . ArgumentParser ( <str> , description = <str> <str> ) parser . add_argument ( <str> , <str> , metavar = <str> , type = int , default = 10 , help = <str> <str> ) parser . add_argument ( <str> , nargs = <str> , default = [ ] , type = str , help = <str> ) args = parser . parse_args ( ) loop = asyncio . get_event_loop ( ) loop . run_until_complete ( query ( args ) )  if __name__ == <str> :      main ( )   