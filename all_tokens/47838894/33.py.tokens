import asyncio import pytest from electrumx . server . controller import Notifications @ pytest . mark . asyncio async def test_simple_mempool ( ) :      n = Notifications ( ) notified = [ ] async def notify ( height , touched ) :          notified . append ( ( height , touched ) )  await n . start ( 5 , notify ) mtouched = { <str> , <str> } btouched = { <str> , <str> } await n . on_mempool ( mtouched , 6 ) assert notified == [ ( 5 , set ( ) ) ] await n . on_block ( btouched , 6 ) assert notified == [ ( 5 , set ( ) ) , ( 6 , set . union ( mtouched , btouched ) ) ]  @ pytest . mark . asyncio async def test_enter_mempool_quick_blocks_2 ( ) :      n = Notifications ( ) notified = [ ] async def notify ( height , touched ) :          notified . append ( ( height , touched ) )  await n . start ( 5 , notify ) await n . on_mempool ( { <str> } , 5 ) assert notified == [ ( 5 , set ( ) ) , ( 5 , { <str> } ) ] await n . on_mempool ( { <str> } , 6 ) assert notified == [ ( 5 , set ( ) ) , ( 5 , { <str> } ) ] await n . on_block ( { <str> , <str> } , 7 ) assert notified == [ ( 5 , set ( ) ) , ( 5 , { <str> } ) ] await n . on_block ( { <str> } , 8 ) assert notified == [ ( 5 , set ( ) ) , ( 5 , { <str> } ) ] await n . on_mempool ( set ( ) , 8 ) assert notified == [ ( 5 , set ( ) ) , ( 5 , { <str> } ) , ( 8 , { <str> , <str> , <str> } ) ]   