import os import pytest from electrumx . lib import util , tx def test_cachedproperty ( ) :      class Target :          CALL_COUNT = 0 def __init__ ( self ) :              self . call_count = 0  @ util . cachedproperty def prop ( self ) :              self . call_count += 1 return self . call_count  @ util . cachedproperty def cls_prop ( cls ) :              cls . CALL_COUNT += 1 return cls . CALL_COUNT   t = Target ( ) assert t . prop == t . prop == 1 assert Target . cls_prop == Target . cls_prop == 1  def test_formatted_time ( ) :      assert util . formatted_time ( 0 ) == <str> assert util . formatted_time ( 59 ) == <str> assert util . formatted_time ( 60 ) == <str> assert util . formatted_time ( 3599 ) == <str> assert util . formatted_time ( 3600 ) == <str> assert util . formatted_time ( 3600 * 24 ) == <str> assert util . formatted_time ( 3600 * 24 * 367 ) == <str> assert util . formatted_time ( 3600 * 24 , <str> ) == <str>  def test_deep_getsizeof ( ) :      int_t = util . deep_getsizeof ( 1 ) assert util . deep_getsizeof ( <str> ) == util . deep_getsizeof ( <str> ) + 3 assert util . deep_getsizeof ( [ 1 , 1 ] ) > 2 * int_t assert util . deep_getsizeof ( { 1 : 1 } ) > 2 * int_t assert util . deep_getsizeof ( { 1 : { 1 : 1 } } ) > 3 * int_t  class Base :      pass  class A ( Base ) :      pass  class B ( Base ) :      pass  def test_subclasses ( ) :      assert util . subclasses ( Base ) == [ A , B ] assert util . subclasses ( Base , strict = False ) == [ A , B , Base ]  def test_chunks ( ) :      assert list ( util . chunks ( [ 1 , 2 , 3 , 4 , 5 ] , 2 ) ) == [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 ] ]  def test_increment_byte_string ( ) :      assert util . increment_byte_string ( <str> ) == <str> assert util . increment_byte_string ( <str> ) == <str> assert util . increment_byte_string ( <str> ) is None  def test_bytes_to_int ( ) :      assert util . bytes_to_int ( <str> ) == 123456789  def test_int_to_bytes ( ) :      assert util . int_to_bytes ( 456789 ) == <str>  def test_LogicalFile ( tmpdir ) :      prefix = os . path . join ( tmpdir , <str> ) L = util . LogicalFile ( prefix , 2 , 6 ) with pytest . raises ( FileNotFoundError ) :          L . open_file ( 0 , create = False )  with L . open_file ( 8 , create = True ) as f :          pass  with util . open_file ( prefix + <str> ) as f :          pass  L . write ( 0 , <str> ) assert L . read ( 0 , - 1 ) == <str> assert L . read ( 0 , 4 ) == <str> assert L . read ( 1 , 1 ) == <str> L . write ( 0 , <str> ) assert L . read ( 0 , - 1 ) == <str> assert L . read ( 5 , - 1 ) == <str> with util . open_file ( prefix + <str> ) as f :          assert f . read ( - 1 ) == <str>  L . write ( 0 , <str> * 6 ) assert L . read ( 0 , - 1 ) == <str> * 6  def test_open_fns ( tmpdir ) :      tmpfile = os . path . join ( tmpdir , <str> ) with pytest . raises ( FileNotFoundError ) :          util . open_file ( tmpfile )  with util . open_file ( tmpfile , create = True ) as f :          f . write ( <str> )  with util . open_file ( tmpfile ) as f :          assert f . read ( 3 ) == <str>  with util . open_truncate ( tmpfile ) as f :          assert f . read ( 3 ) == <str>  tmpfile = os . path . join ( tmpdir , <str> ) with util . open_truncate ( tmpfile ) as f :          assert f . read ( 3 ) == <str>   def test_address_string ( ) :      assert util . address_string ( ( <str> , 84 ) ) == <str> assert util . address_string ( ( <str> , 84 ) ) == <str> assert util . address_string ( ( <str> , 84 ) ) == <str>  def test_protocol_tuple ( ) :      assert util . protocol_tuple ( None ) == ( 0 , ) assert util . protocol_tuple ( <str> ) == ( 0 , ) assert util . protocol_tuple ( 1 ) == ( 0 , ) assert util . protocol_tuple ( <str> ) == ( 1 , ) assert util . protocol_tuple ( <str> ) == ( 0 , 1 ) assert util . protocol_tuple ( <str> ) == ( 0 , 10 ) assert util . protocol_tuple ( <str> ) == ( 2 , 5 , 3 )  def test_version_string ( ) :      assert util . version_string ( ( ) ) == <str> assert util . version_string ( ( 1 , ) ) == <str> assert util . version_string ( ( 1 , 2 ) ) == <str> assert util . version_string ( ( 1 , 3 , 2 ) ) == <str>  def test_protocol_version ( ) :      assert util . protocol_version ( None , ( 1 , 0 ) , ( 1 , 0 ) ) == ( ( 1 , 0 ) , ( 1 , 0 ) ) assert util . protocol_version ( <str> , ( 0 , 1 ) , ( 1 , 1 ) ) == ( ( 0 , 10 ) , ( 0 , 10 ) ) assert util . protocol_version ( <str> , ( 1 , 0 ) , ( 1 , 0 ) ) == ( ( 1 , 0 ) , ( 1 , 0 ) ) assert util . protocol_version ( <str> , ( 1 , 0 ) , ( 1 , 1 ) ) == ( ( 1 , 0 ) , ( 1 , 0 ) ) assert util . protocol_version ( <str> , ( 1 , 0 ) , ( 1 , 1 ) ) == ( ( 1 , 1 ) , ( 1 , 1 ) ) assert util . protocol_version ( <str> , ( 1 , 0 ) , ( 1 , 1 ) ) == ( None , ( 1 , 2 ) ) assert util . protocol_version ( <str> , ( 1 , 0 ) , ( 1 , 1 ) ) == ( None , ( 0 , 9 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( ( 1 , 0 ) , ( 0 , 9 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( ( 1 , 1 ) , ( 0 , 9 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( None , ( 1 , 1 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( None , ( 0 , 8 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( ( 1 , 1 ) , ( 1 , 1 ) ) assert util . protocol_version ( [ <str> , <str> ] , ( 1 , 0 ) , ( 1 , 1 ) ) == ( None , ( 1 , 2 ) )  def test_unpackers ( ) :      b = bytes ( range ( 256 ) ) assert util . unpack_le_int32_from ( b , 0 ) == ( 50462976 , ) assert util . unpack_le_int32_from ( b , 42 ) == ( 757869354 , ) assert util . unpack_le_int64_from ( b , 0 ) == ( 506097522914230528 , ) assert util . unpack_le_int64_from ( b , 42 ) == ( 3544384782113450794 , ) assert util . unpack_le_uint16_from ( b , 0 ) == ( 256 , ) assert util . unpack_le_uint16_from ( b , 42 ) == ( 11050 , ) assert util . unpack_le_uint32_from ( b , 0 ) == ( 50462976 , ) assert util . unpack_le_uint32_from ( b , 42 ) == ( 757869354 , ) assert util . unpack_le_uint64_from ( b , 0 ) == ( 506097522914230528 , ) assert util . unpack_le_uint64_from ( b , 42 ) == ( 3544384782113450794 , )  def test_hex_transforms ( ) :      h = <str> assert util . hex_to_bytes ( h ) == <str>  def test_pack_varint ( ) :      tests = list ( range ( 0 , 258 ) ) tests . extend ( [ 1024 , 65535 , 65536 , 4294967295 , 4294967296 , 8294967296 ] ) for n in tests :          data = util . pack_varint ( n ) deser = tx . Deserializer ( data ) assert deser . _read_varint ( ) == n  import struct with pytest . raises ( struct . error ) :          util . pack_varint ( - 1 )  assert util . pack_varint ( 0 ) == <str> assert util . pack_varint ( 5 ) == <str> assert util . pack_varint ( 252 ) == <str> assert util . pack_varint ( 253 ) == <str> assert util . pack_varint ( 65535 ) == <str> assert util . pack_varint ( 65536 ) == <str> assert util . pack_varint ( 2 ** 32 - 1 ) == <str> assert util . pack_varint ( 2 ** 32 ) == <str> assert util . pack_varint ( 2 ** 64 - 1 ) == <str>  def test_pack_varbytes ( ) :      tests = [ <str> , <str> , <str> * 253 , <str> * 254 , <str> * 256 , <str> * 65536 ] for test in tests :          data = util . pack_varbytes ( test ) deser = tx . Deserializer ( data ) assert deser . _read_varbytes ( ) == test    