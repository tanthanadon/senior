import json import requests from requests . exceptions import HTTPError from . _2to3 import url_quote , url_quote_plus from . _common_util import response_to_json_dict from . error import CloudantDocumentException class Document ( dict ) :      def __init__ ( self , database , document_id = None , ** kwargs ) :          super ( Document , self ) . __init__ ( ) self . _client = database . client self . _database = database self . _database_host = self . _client . server_url self . _database_name = database . database_name if document_id :              self [ <str> ] = document_id  self . encoder = kwargs . get ( <str> ) or self . _client . encoder self . decoder = kwargs . get ( <str> ) or json . JSONDecoder  @ property def r_session ( self ) :          return self . _client . r_session  @ property def document_url ( self ) :          if <str> not in self or self [ <str> ] is None :              return None  if self [ <str> ] . startswith ( <str> ) :              return <str> . join ( ( self . _database_host , url_quote_plus ( self . _database_name ) , <str> , url_quote ( self [ <str> ] [ 8 : ] , safe = <str> ) ) )  return <str> . join ( ( self . _database_host , url_quote_plus ( self . _database_name ) , url_quote ( self [ <str> ] , safe = <str> ) ) )  def exists ( self ) :          if <str> not in self or self [ <str> ] is None :              return False  resp = self . r_session . head ( self . document_url ) if resp . status_code not in [ 200 , 404 ] :              resp . raise_for_status ( )  return resp . status_code == 200  def json ( self ) :          return json . dumps ( dict ( self ) , cls = self . encoder )  def create ( self ) :          doc = dict ( self ) if doc . get ( <str> ) is not None :              doc . __delitem__ ( <str> )  headers = { <str> : <str> } resp = self . r_session . post ( self . _database . database_url , headers = headers , data = json . dumps ( doc , cls = self . encoder ) ) resp . raise_for_status ( ) data = response_to_json_dict ( resp ) super ( Document , self ) . __setitem__ ( <str> , data [ <str> ] ) super ( Document , self ) . __setitem__ ( <str> , data [ <str> ] )  def fetch ( self ) :          if self . document_url is None :              raise CloudantDocumentException ( 101 )  resp = self . r_session . get ( self . document_url ) resp . raise_for_status ( ) self . clear ( ) self . update ( response_to_json_dict ( resp , cls = self . decoder ) )  def save ( self ) :          headers = { } headers . setdefault ( <str> , <str> ) if not self . exists ( ) :              self . create ( ) return  put_resp = self . r_session . put ( self . document_url , data = self . json ( ) , headers = headers ) put_resp . raise_for_status ( ) data = response_to_json_dict ( put_resp ) super ( Document , self ) . __setitem__ ( <str> , data [ <str> ] ) return  @ staticmethod def list_field_append ( doc , field , value ) :          if doc . get ( field ) is None :              doc [ field ] = [ ]  if not isinstance ( doc [ field ] , list ) :              raise CloudantDocumentException ( 102 , field )  if value is not None :              doc [ field ] . append ( value )   @ staticmethod def list_field_remove ( doc , field , value ) :          if not isinstance ( doc [ field ] , list ) :              raise CloudantDocumentException ( 102 , field )  doc [ field ] . remove ( value )  @ staticmethod def field_set ( doc , field , value ) :          if value is None :              doc . __delitem__ ( field )  else :              doc [ field ] = value   def _update_field ( self , action , field , value , max_tries , tries = 0 ) :          self . fetch ( ) action ( self , field , value ) try :              self . save ( )  except requests . HTTPError as ex :              if tries < max_tries and ex . response . status_code == 409 :                  self . _update_field ( action , field , value , max_tries , tries = tries + 1 )  else :                  raise    def update_field ( self , action , field , value , max_tries = 10 ) :          self . _update_field ( action , field , value , max_tries )  def delete ( self ) :          if not self . get ( <str> ) :              raise CloudantDocumentException ( 103 )  del_resp = self . r_session . delete ( self . document_url , params = { <str> : self [ <str> ] } , ) del_resp . raise_for_status ( ) _id = self [ <str> ] self . clear ( ) self [ <str> ] = _id  def __enter__ ( self ) :          try :              self . fetch ( )  except HTTPError as error :              if error . response . status_code != 404 :                  raise   except CloudantDocumentException as error :              if error . status_code != 101 :                  raise   return self  def __exit__ ( self , exc_type , exc_value , traceback ) :          if exc_type is None :              self . save ( )   def get_attachment ( self , attachment , headers = None , write_to = None , attachment_type = None ) :          self . fetch ( ) attachment_url = <str> . join ( ( self . document_url , attachment ) ) if headers is None :              headers = { <str> : self [ <str> ] }  else :              headers [ <str> ] = self [ <str> ]  resp = self . r_session . get ( attachment_url , headers = headers ) resp . raise_for_status ( ) if attachment_type is None :              if resp . headers [ <str> ] . startswith ( <str> ) :                  attachment_type = <str>  elif resp . headers [ <str> ] == <str> :                  attachment_type = <str>  else :                  attachment_type = <str>   if write_to is not None :              if attachment_type in ( <str> , <str> ) :                  write_to . write ( resp . text )  else :                  write_to . write ( resp . content )   if attachment_type == <str> :              return resp . text  if attachment_type == <str> :              return response_to_json_dict ( resp )  return resp . content  def delete_attachment ( self , attachment , headers = None ) :          self . fetch ( ) attachment_url = <str> . join ( ( self . document_url , attachment ) ) if headers is None :              headers = { <str> : self [ <str> ] }  else :              headers [ <str> ] = self [ <str> ]  resp = self . r_session . delete ( attachment_url , headers = headers ) resp . raise_for_status ( ) super ( Document , self ) . __setitem__ ( <str> , response_to_json_dict ( resp ) [ <str> ] ) if self . get ( <str> ) :              if self [ <str> ] . get ( attachment ) :                  self [ <str> ] . __delitem__ ( attachment )  if not self [ <str> ] :                  super ( Document , self ) . __delitem__ ( <str> )   return response_to_json_dict ( resp )  def put_attachment ( self , attachment , content_type , data , headers = None ) :          self . fetch ( ) attachment_url = <str> . join ( ( self . document_url , attachment ) ) if headers is None :              headers = { <str> : self [ <str> ] , <str> : content_type }  else :              headers [ <str> ] = self [ <str> ] headers [ <str> ] = content_type  resp = self . r_session . put ( attachment_url , data = data , headers = headers ) resp . raise_for_status ( ) self . fetch ( ) return response_to_json_dict ( resp )    