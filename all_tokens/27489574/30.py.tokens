import unittest import requests import json import mock from cloudant . scheduler import Scheduler from . unit_t_db_base import UnitTestDbBase class SchedulerTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( SchedulerTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( SchedulerTests , self ) . tearDown ( )  def test_scheduler_docs ( self ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) self . client . r_session . get = mock . Mock ( return_value = m_response_ok ) scheduler = Scheduler ( self . client ) response = scheduler . list_docs ( skip = 0 , limit = 10 ) self . client . r_session . get . assert_called_with ( self . url + <str> , params = { <str> : 0 , <str> : 10 } , ) self . assertEqual ( response [ <str> ] , 6 )  def test_scheduler_doc ( self ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) self . client . r_session . get = mock . Mock ( return_value = m_response_ok ) scheduler = Scheduler ( self . client ) response = scheduler . get_doc ( <str> ) self . client . r_session . get . assert_called_with ( self . url + <str> , ) self . assertEqual ( response [ <str> ] , <str> )  def test_scheduler_jobs ( self ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) self . client . r_session . get = mock . Mock ( return_value = m_response_ok ) scheduler = Scheduler ( self . client ) response = scheduler . list_jobs ( skip = 0 , limit = 10 ) self . client . r_session . get . assert_called_with ( self . url + <str> , params = { <str> : 0 , <str> : 10 } , ) self . assertEqual ( response [ <str> ] , 1 )    