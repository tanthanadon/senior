import logging import sys import unittest import uuid from cloudant import cloudant from cloudant . credentials import read_dot_cloudant from . . import unicode_ def setup_logging ( ) :      log = logging . getLogger ( ) log . setLevel ( logging . DEBUG ) handler = logging . StreamHandler ( sys . stdout ) handler . setLevel ( logging . DEBUG ) log . addHandler ( handler ) return log  LOG = setup_logging ( ) class ChangesTest ( unittest . TestCase ) :      @ classmethod def setUp ( self ) :          self . user , self . password = read_dot_cloudant ( filename = <str> ) self . last_db = None  def tearDown ( self ) :          if self . last_db is not None :              with cloudant ( self . user , self . password , account = self . user ) as c :                  c . delete_database ( self . last_db )    def test_changes ( self ) :          dbname = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . last_db = dbname with cloudant ( self . user , self . password , account = self . user ) as c :              session = c . session ( ) db = c . create_database ( dbname ) n = 0 def make_doc ( n ) :                  doc = db . create_document ( { <str> : <str> . format ( n ) , <str> : <str> . format ( n ) } ) return doc  doc = make_doc ( n ) for change in db . changes ( ) :                  LOG . debug ( unicode_ ( change ) ) if change is not None :                      self . assertEqual ( change [ <str> ] , doc [ <str> ] ) n += 1 doc = make_doc ( n )  if n > 10 :                      break   self . assertTrue ( n > 10 )   def test_changes_include_docs ( self ) :          dbname = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . last_db = dbname with cloudant ( self . user , self . password , account = self . user ) as c :              session = c . session ( ) db = c . create_database ( dbname ) n = 0 def make_doc ( n ) :                  doc = db . create_document ( { <str> : <str> . format ( n ) , <str> : <str> . format ( n ) } ) return doc  doc = make_doc ( n ) for change in db . changes ( include_docs = True ) :                  LOG . debug ( unicode_ ( change ) ) if change is not None :                      self . assertEqual ( change [ <str> ] , doc [ <str> ] ) self . assertEqual ( change . get ( <str> , { } ) . get ( <str> , { } ) , <str> . format ( n ) ) n += 1 doc = make_doc ( n )  if n > 10 :                      break   self . assertTrue ( n > 10 )    if __name__ == <str> :      unittest . main ( )   