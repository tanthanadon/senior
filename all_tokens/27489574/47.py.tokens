import json import unittest from cloudant . security_document import SecurityDocument from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase @ attr ( db = [ <str> , <str> ] ) class SecurityDocumentTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( SecurityDocumentTests , self ) . setUp ( ) self . db_set_up ( ) self . load_security_document_data ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( SecurityDocumentTests , self ) . tearDown ( )  def test_constructor ( self ) :          sdoc = SecurityDocument ( self . db ) self . assertIsInstance ( sdoc , SecurityDocument ) self . assertEqual ( sdoc . r_session , self . db . r_session )  def test_document_url ( self ) :          sdoc = SecurityDocument ( self . db ) self . assertEqual ( sdoc . document_url , <str> . join ( [ self . db . database_url , <str> ] ) )  def test_json ( self ) :          sdoc = SecurityDocument ( self . db ) sdoc . fetch ( ) sdoc_as_json_string = sdoc . json ( ) self . assertIsInstance ( sdoc_as_json_string , str ) sdoc_as_a_dict = json . loads ( sdoc_as_json_string ) self . assertDictEqual ( sdoc_as_a_dict , sdoc )  def test_fetch ( self ) :          sdoc = SecurityDocument ( self . db ) sdoc . fetch ( ) self . assertDictEqual ( sdoc , self . sdoc )  def test_save ( self ) :          sdoc = SecurityDocument ( self . db ) sdoc . fetch ( ) sdoc . update ( self . mod_sdoc ) sdoc . save ( ) mod_sdoc = SecurityDocument ( self . db ) mod_sdoc . fetch ( ) self . assertDictEqual ( mod_sdoc , self . mod_sdoc )  def test_context_manager ( self ) :          with SecurityDocument ( self . db ) as sdoc :              self . assertDictEqual ( sdoc , self . sdoc ) sdoc . update ( self . mod_sdoc )  mod_sdoc = SecurityDocument ( self . db ) mod_sdoc . fetch ( ) self . assertDictEqual ( mod_sdoc , self . mod_sdoc )   if __name__ == <str> :      unittest . main ( )   