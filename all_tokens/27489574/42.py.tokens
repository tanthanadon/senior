import json import unittest from cloudant . _common_util import CloudFoundryService from cloudant . error import CloudantException class CloudFoundryServiceTests ( unittest . TestCase ) :      def __init__ ( self , * args , ** kwargs ) :          super ( CloudFoundryServiceTests , self ) . __init__ ( * args , ** kwargs ) self . _test_vcap_services_single_legacy_credentials_enabled = json . dumps ( { <str> : [ { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 443 , <str> : <str> } } ] } ) self . _test_vcap_services_single = json . dumps ( { <str> : [ { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : 443 , <str> : <str> } } ] } ) self . _test_legacy_vcap_services_multiple = json . dumps ( { <str> : [ { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : 1234 , <str> : <str> } } , { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } , { <str> : <str> , <str> : { <str> : <str> , <str> : 1234 , <str> : <str> } } , { <str> : <str> , <str> : { <str> : <str> , <str> : 1234 , <str> : <str> } } , { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : 1234 , } } , { <str> : <str> , <str> : [ <str> , <str> , <str> ] } , { <str> : <str> , <str> : { <str> : <str> , <str> : 1234 , <str> : <str> } } , { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 1234 } } , ] } ) self . _test_vcap_services_dedicated = json . dumps ( { <str> : [ { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : 1234 , <str> : <str> } } ] } )  def test_get_vcap_service_legacy_creds_success ( self ) :          service = CloudFoundryService ( self . _test_vcap_services_single_legacy_credentials_enabled , service_name = <str> ) self . assertEqual ( <str> , service . name )  def test_get_vcap_service_iam_api_no_creds_success ( self ) :          service = CloudFoundryService ( self . _test_vcap_services_single , service_name = <str> ) self . assertEqual ( <str> , service . name ) self . assertEqual ( <str> , service . iam_api_key ) with self . assertRaises ( AttributeError ) as cm :              service . password  self . assertEqual ( <str> , str ( cm . exception ) )  def test_get_vcap_service_default_success_as_dict ( self ) :          service = CloudFoundryService ( json . loads ( self . _test_vcap_services_single_legacy_credentials_enabled ) , service_name = <str> ) self . assertEqual ( <str> , service . name )  def test_get_vcap_service_default_failure_multiple_services ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_get_vcap_service_instance_host ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . host )  def test_get_vcap_service_instance_password ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . password )  def test_get_vcap_service_instance_port ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . port )  def test_get_vcap_service_instance_port_default ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . port )  def test_get_vcap_service_instance_url ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . url )  def test_get_vcap_service_instance_username ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . username )  def test_get_vcap_service_instance_iam_api_key ( self ) :          service = CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> ) self . assertEqual ( <str> , service . iam_api_key )  def test_raise_error_for_missing_host ( self ) :          with self . assertRaises ( CloudantException ) :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )   def test_raise_error_for_missing_password ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_raise_error_for_missing_username ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_raise_error_for_invalid_credentials_type ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_raise_error_for_missing_iam_api_key_and_credentials ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_raise_error_for_missing_service ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( self . _test_legacy_vcap_services_multiple , instance_name = <str> , service_name = <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_raise_error_for_invalid_vcap ( self ) :          with self . assertRaises ( CloudantException ) as cm :              CloudFoundryService ( <str> , <str> )  self . assertEqual ( <str> , str ( cm . exception ) )  def test_get_vcap_service_with_dedicated_service_name_success ( self ) :          service = CloudFoundryService ( self . _test_vcap_services_dedicated , service_name = <str> ) self . assertEqual ( <str> , service . name )    