import logging import sys import time import uuid import unittest from cloudant import cloudant from cloudant . credentials import read_dot_cloudant from cloudant . replicator import Replicator from . . import unicode_ def setup_logging ( ) :      log = logging . getLogger ( ) log . setLevel ( logging . DEBUG ) handler = logging . StreamHandler ( sys . stdout ) handler . setLevel ( logging . DEBUG ) log . addHandler ( handler ) return log  LOG = setup_logging ( ) class ReplicatorTest ( unittest . TestCase ) :      def setUp ( self ) :          self . user , self . passwd = read_dot_cloudant ( filename = <str> ) self . replication_ids = [ ] self . dbs = [ ]  def tearDown ( self ) :          with cloudant ( self . user , self . passwd , account = self . user ) as c :              replicator = Replicator ( c ) while self . replication_ids :                  replicator . stop_replication ( self . replication_ids . pop ( ) )  while self . dbs :                  c . delete_database ( self . dbs . pop ( ) )    def test_init ( self ) :          with cloudant ( self . user , self . passwd , account = self . user ) as c :              replicator = Replicator ( c ) replicator . all_docs ( )   def test_create_replication ( self ) :          dbsource = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) dbtarget = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . dbs = [ dbsource , dbtarget ] with cloudant ( self . user , self . passwd , account = self . user ) as c :              dbs = c . create_database ( dbsource ) dbt = c . create_database ( dbtarget ) doc1 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc2 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc3 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) replicator = Replicator ( c ) repl_id = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . replication_ids . append ( repl_id ) ret = replicator . create_replication ( source_db = dbs , target_db = dbt , repl_id = repl_id , continuous = False ) try :                  repl_doc = replicator [ repl_id ]  except KeyError :                  repl_doc = None  if not repl_doc or not ( repl_doc . get ( <str> , <str> ) in ( <str> , <str> ) ) :                  for change in replicator . changes ( ) :                      if change . get ( <str> ) == repl_id :                          try :                              repl_doc = replicator [ repl_id ] repl_doc . fetch ( )  except KeyError :                              pass  if repl_doc and ( repl_doc . get ( <str> , <str> ) in ( <str> , <str> ) ) :                              break  else :                              LOG . debug ( unicode_ ( <str> <str> . format ( repl_doc ) ) )     self . assertTrue ( repl_doc ) self . assertEqual ( repl_doc . get ( <str> ) , <str> ) for d in [ <str> , <str> , <str> ] :                  self . assertTrue ( dbt [ d ] ) self . assertEqual ( dbt [ d ] [ <str> ] , dbs [ d ] [ <str> ] )    def test_follow_replication ( self ) :          dbsource = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) dbtarget = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . dbs = [ dbsource , dbtarget ] with cloudant ( self . user , self . passwd , account = self . user ) as c :              dbs = c . create_database ( dbsource ) dbt = c . create_database ( dbtarget ) doc1 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc2 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc3 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) replicator = Replicator ( c ) repl_id = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . replication_ids . append ( repl_id ) ret = replicator . create_replication ( source_db = dbs , target_db = dbt , repl_id = repl_id , continuous = False , ) updates = [ update for update in replicator . follow_replication ( repl_id ) ] self . assertTrue ( len ( updates ) > 0 ) self . assertEqual ( updates [ - 1 ] [ <str> ] , <str> )   def test_replication_state ( self ) :          dbsource = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) dbtarget = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . dbs = [ dbsource , dbtarget ] with cloudant ( self . user , self . passwd , account = self . user ) as c :              dbs = c . create_database ( dbsource ) dbt = c . create_database ( dbtarget ) doc1 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc2 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) doc3 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) replicator = Replicator ( c ) repl_id = unicode_ ( <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) ) self . replication_ids . append ( repl_id ) ret = replicator . create_replication ( source_db = dbs , target_db = dbt , repl_id = repl_id , continuous = False , ) replication_state = <str> while True :                  replication_state = replicator . replication_state ( repl_id ) if replication_state is not None :                      self . assertTrue ( replication_state in [ <str> , <str> , <str> ] ) if replication_state in ( <str> , <str> ) :                          break   LOG . debug ( <str> . format ( replication_state ) ) time . sleep ( 1 )    def test_list_replications ( self ) :          with cloudant ( self . user , self . passwd , account = self . user ) as c :              replicator = Replicator ( c ) repl_ids = [ ] num_reps = 3 for i in range ( 0 , num_reps ) :                  tag = <str> . format ( i , unicode_ ( uuid . uuid4 ( ) ) ) dbsource = unicode_ ( <str> . format ( tag ) ) dbtarget = unicode_ ( <str> . format ( tag ) ) self . dbs . append ( dbsource ) self . dbs . append ( dbtarget ) dbs = c . create_database ( dbsource ) dbt = c . create_database ( dbtarget ) doc1 = dbs . create_document ( { <str> : <str> , <str> : <str> } ) repl_id = unicode_ ( <str> . format ( tag ) ) self . replication_ids . append ( repl_id ) repl_ids . append ( repl_id ) ret = replicator . create_replication ( source_db = dbs , target_db = dbt , repl_id = repl_id , continuous = False )  replications = replicator . list_replications ( ) ids = [ doc [ <str> ] for doc in replications ] found_ids = [ i for i in ids if i in repl_ids ] self . assertEqual ( num_reps , len ( found_ids ) )     