import json import os import unittest from cloudant . _2to3 import unicode_ from cloudant . design_document import DesignDocument from cloudant . document import Document from cloudant . error import CloudantArgumentError from cloudant . feed import Feed from nose . plugins . attrib import attr from requests import Session from . unit_t_db_base import UnitTestDbBase from . . import BYTETYPE @ attr ( db = [ <str> , <str> ] ) class ChangesTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( ChangesTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( ChangesTests , self ) . tearDown ( )  def test_constructor_changes ( self ) :          feed = Feed ( self . db , raw_data = True , chunk_size = 1 , feed = <str> ) self . assertEqual ( feed . _url , <str> . join ( [ self . db . database_url , <str> ] ) ) self . assertIsInstance ( feed . _r_session , Session ) self . assertTrue ( feed . _raw_data ) self . assertDictEqual ( feed . _options , { <str> : <str> } ) self . assertEqual ( feed . _chunk_size , 1 )  def test_get_last_seq ( self ) :          self . populate_db_with_documents ( 10 ) feed = Feed ( self . db ) changes = [ x for x in feed ] self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_stop_iteration ( self ) :          self . populate_db_with_documents ( 10 ) feed = Feed ( self . db , feed = <str> ) count = 0 changes = list ( ) for change in feed :              changes . append ( change ) count += 1 if count == 3 :                  feed . stop ( )   self . assertEqual ( len ( change ) , 3 ) self . assertTrue ( str ( changes [ 0 ] [ <str> ] ) . startswith ( <str> ) ) self . assertTrue ( str ( changes [ 1 ] [ <str> ] ) . startswith ( <str> ) ) self . assertTrue ( str ( changes [ 2 ] [ <str> ] ) . startswith ( <str> ) ) self . assertIsNone ( feed . last_seq )  def test_get_raw_content ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , raw_data = True ) raw_content = list ( ) for raw_line in feed :              self . assertIsInstance ( raw_line , BYTETYPE ) raw_content . append ( raw_line )  changes = json . loads ( <str> . join ( [ unicode_ ( x ) for x in raw_content ] ) ) if self . is_couchdb_1x_version ( ) is True :              self . assertSetEqual ( set ( changes . keys ( ) ) , set ( [ <str> , <str> ] ) )  else :              self . assertSetEqual ( set ( changes . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) )  results = list ( ) for result in changes [ <str> ] :              self . assertSetEqual ( set ( result . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) results . append ( result )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in results ] ) , expected ) self . assertTrue ( str ( changes [ <str> ] ) . startswith ( <str> ) ) self . assertIsNone ( feed . last_seq )  def test_get_normal_feed_default ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_normal_feed_explicit ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , feed = <str> ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_continuous_feed ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , feed = <str> ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change ) if len ( changes ) == 100 :                  feed . stop ( )   expected = set ( [ <str> . format ( i ) for i in range ( 100 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertIsNone ( feed . last_seq ) normal = Feed ( self . db ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , set ( [ n [ <str> ] for n in normal ] ) )  def test_get_longpoll_feed ( self ) :          feed = Feed ( self . db , feed = <str> , heartbeat = 10 ) changes = list ( ) for change in feed :              if not change :                  self . populate_db_with_documents ( 1 ) continue  self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  self . assertListEqual ( [ x [ <str> ] for x in changes ] , [ <str> ] ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_with_heartbeat ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , feed = <str> , heartbeat = 10 ) changes = list ( ) heartbeats = 0 for change in feed :              if not change :                  self . assertIsNone ( change ) heartbeats += 1  else :                  self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  if heartbeats == 3 :                  feed . stop ( )   expected = set ( [ <str> . format ( i ) for i in range ( 100 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertIsNone ( feed . last_seq )  def test_get_raw_feed_with_heartbeat ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , raw_data = True , feed = <str> , heartbeat = 10 ) raw_content = list ( ) heartbeats = 0 for raw_line in feed :              if not raw_line :                  self . assertEqual ( len ( raw_line ) , 0 ) heartbeats += 1  else :                  self . assertIsInstance ( raw_line , BYTETYPE ) raw_content . append ( raw_line )  if heartbeats == 3 :                  feed . stop ( )   changes = [ json . loads ( unicode_ ( x ) ) for x in raw_content ] expected = set ( [ <str> . format ( i ) for i in range ( 100 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertIsNone ( feed . last_seq )  def test_get_feed_descending ( self ) :          self . populate_db_with_documents ( 50 ) feed = Feed ( self . db , descending = True ) seq_list = list ( ) last_seq = None for change in feed :              if last_seq :                  if self . is_couchdb_1x_version ( ) is True :                      self . assertTrue ( change [ <str> ] < last_seq )  else :                      current = int ( change [ <str> ] [ 0 : change [ <str> ] . find ( <str> ) ] ) last = int ( last_seq [ 0 : last_seq . find ( <str> ) ] ) try :                          self . assertTrue ( current < last )  except AssertionError :                          self . assertEqual ( current , last ) self . assertTrue ( len ( change [ <str> ] ) > len ( last_seq ) )    seq_list . append ( change [ <str> ] ) last_seq = change [ <str> ]  self . assertEqual ( len ( seq_list ) , 50 ) self . assertEqual ( feed . last_seq , last_seq )  def test_get_feed_include_docs ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , include_docs = True ) ids = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> ] ) ) self . assertSetEqual ( set ( change [ <str> ] . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> ] ) ) ids . append ( change [ <str> ] )  self . assertSetEqual ( set ( ids ) , set ( [ <str> , <str> , <str> ] ) )  def test_get_feed_using_style_main_only ( self ) :          self . populate_db_with_documents ( 3 ) for i in range ( 3 ) :              docid = <str> . format ( i ) doc = self . db [ docid ] doc . delete ( ) with Document ( self . db , docid ) as doc :                  doc [ <str> ] = <str> doc [ <str> ] = i   feed = Feed ( self . db , style = <str> ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) self . assertEqual ( len ( change [ <str> ] ) , 1 ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_style_all_docs ( self ) :          self . populate_db_with_documents ( 3 ) for i in range ( 3 ) :              docid = <str> . format ( i ) doc = self . db [ docid ] doc . delete ( ) with Document ( self . db , docid ) as doc :                  doc [ <str> ] = <str> doc [ <str> ] = i   feed = Feed ( self . db , style = <str> ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_since ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db ) changes = [ change for change in feed ] last_seq = feed . last_seq self . populate_db_with_documents ( 3 , off_set = 3 ) feed = Feed ( self . db , since = last_seq ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_since_now ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , feed = <str> , heartbeat = 1000 , since = <str> ) changes = list ( ) first_pass = True beats = 0 for change in feed :              if first_pass and not change :                  self . populate_db_with_documents ( 3 , off_set = 3 ) first_pass = False continue  elif change :                  self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change ) beats = 0  else :                  beats += 1  if beats == 15 or len ( changes ) == 3 :                  feed . stop ( )   expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected )  def test_get_feed_using_since_zero ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , since = 0 ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , { <str> , <str> , <str> } ) changes . append ( change )  expected = set ( [ <str> . format ( i ) for i in range ( 3 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_timeout ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , feed = <str> , timeout = 100 ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> . format ( i ) for i in range ( 100 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) ) normal = Feed ( self . db ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , set ( [ n [ <str> ] for n in normal ] ) )  def test_get_feed_using_limit ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , limit = 3 ) seq_list = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) seq_list . append ( change [ <str> ] )  self . assertEqual ( len ( seq_list ) , 3 ) self . assertTrue ( str ( seq_list [ 0 ] ) . startswith ( <str> ) ) self . assertTrue ( str ( seq_list [ 1 ] ) . startswith ( <str> ) ) self . assertTrue ( str ( seq_list [ 2 ] ) . startswith ( <str> ) ) self . assertEqual ( feed . last_seq , seq_list [ 2 ] )  def test_get_feed_using_filter ( self ) :          self . populate_db_with_documents ( 6 ) ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = { <str> : <str> } ddoc . create ( ) feed = Feed ( self . db , filter = <str> ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_conflicts_true ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , include_docs = True , conflicts = True ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_conflicts_false ( self ) :          self . populate_db_with_documents ( 3 ) feed = Feed ( self . db , include_docs = True , conflicts = False ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_using_doc_ids ( self ) :          self . populate_db_with_documents ( ) feed = Feed ( self . db , filter = <str> , doc_ids = [ <str> , <str> , <str> ] ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change )  expected = set ( [ <str> , <str> , <str> ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertTrue ( str ( feed . last_seq ) . startswith ( <str> ) )  def test_get_feed_with_custom_filter_query_params ( self ) :          feed = Feed ( self . db , filter = <str> , foo = <str> , include_docs = False ) params = feed . _translate ( feed . _options ) self . assertEquals ( params [ <str> ] , <str> ) self . assertEquals ( params [ <str> ] , <str> ) self . assertEquals ( params [ <str> ] , <str> )  def test_invalid_argument_type ( self ) :          feed = Feed ( self . db , conflicts = 0 ) with self . assertRaises ( CloudantArgumentError ) as cm :              invalid_feed = [ x for x in feed ]  self . assertTrue ( str ( cm . exception ) . startswith ( <str> ) )  def test_invalid_non_positive_integer_argument ( self ) :          feed = Feed ( self . db , limit = - 1 ) with self . assertRaises ( CloudantArgumentError ) as cm :              invalid_feed = [ x for x in feed ]  self . assertEqual ( str ( cm . exception ) , <str> )  def test_invalid_feed_value ( self ) :          feed = Feed ( self . db , feed = <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              invalid_feed = [ x for x in feed ]  self . assertTrue ( str ( cm . exception ) . startswith ( <str> ) )  def test_invalid_style_value ( self ) :          feed = Feed ( self . db , style = <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              invalid_feed = [ x for x in feed ]  self . assertEqual ( str ( cm . exception ) , <str> )   if __name__ == <str> :      unittest . main ( )   