import mock import unittest from cloudant . database import CouchDatabase from cloudant . replicator import Replicator from tests . unit . iam_auth_tests import MOCK_API_KEY class ReplicatorDocumentValidationMockTests ( unittest . TestCase ) :      def setUp ( self ) :          self . repl_id = <str> self . server_url = <str> self . user_ctx = { <str> : <str> , <str> : [ <str> , <str> ] } self . source_db = <str> self . target_db = <str>  def setUpClientMocks ( self , admin_party = False , iam_api_key = None ) :          m_client = mock . MagicMock ( ) type ( m_client ) . server_url = mock . PropertyMock ( return_value = self . server_url ) type ( m_client ) . admin_party = mock . PropertyMock ( return_value = admin_party ) iam_authenticated = False if iam_api_key is not None :              iam_authenticated = True m_session = mock . MagicMock ( ) type ( m_session ) . get_api_key = mock . PropertyMock ( return_value = iam_api_key ) type ( m_client ) . r_session = mock . PropertyMock ( return_value = m_session )  type ( m_client ) . is_iam_authenticated = mock . PropertyMock ( return_value = iam_authenticated ) return m_client  def test_using_admin_party_source_and_target ( self ) :          m_admin_party_client = self . setUpClientMocks ( admin_party = True ) m_replicator = mock . MagicMock ( ) type ( m_replicator ) . creds = mock . PropertyMock ( return_value = None ) m_admin_party_client . __getitem__ . return_value = m_replicator src = CouchDatabase ( m_admin_party_client , self . source_db ) tgt = CouchDatabase ( m_admin_party_client , self . target_db ) rep = Replicator ( m_admin_party_client ) rep . create_replication ( src , tgt , repl_id = self . repl_id ) kcall = m_replicator . create_document . call_args_list self . assertEquals ( len ( kcall ) , 1 ) args , kwargs = kcall [ 0 ] self . assertEquals ( len ( args ) , 1 ) expected_doc = { <str> : self . repl_id , <str> : { <str> : <str> . join ( ( self . server_url , self . source_db ) ) } , <str> : { <str> : <str> . join ( ( self . server_url , self . target_db ) ) } } self . assertDictEqual ( args [ 0 ] , expected_doc ) self . assertTrue ( kwargs [ <str> ] )  def test_using_basic_auth_source_and_target ( self ) :          test_basic_auth_header = <str> m_basic_auth_client = self . setUpClientMocks ( ) m_replicator = mock . MagicMock ( ) m_basic_auth_client . __getitem__ . return_value = m_replicator m_basic_auth_client . basic_auth_str . return_value = test_basic_auth_header src = CouchDatabase ( m_basic_auth_client , self . source_db ) tgt = CouchDatabase ( m_basic_auth_client , self . target_db ) rep = Replicator ( m_basic_auth_client ) rep . create_replication ( src , tgt , repl_id = self . repl_id , user_ctx = self . user_ctx ) kcall = m_replicator . create_document . call_args_list self . assertEquals ( len ( kcall ) , 1 ) args , kwargs = kcall [ 0 ] self . assertEquals ( len ( args ) , 1 ) expected_doc = { <str> : self . repl_id , <str> : self . user_ctx , <str> : { <str> : { <str> : test_basic_auth_header } , <str> : <str> . join ( ( self . server_url , self . source_db ) ) } , <str> : { <str> : { <str> : test_basic_auth_header } , <str> : <str> . join ( ( self . server_url , self . target_db ) ) } } self . assertDictEqual ( args [ 0 ] , expected_doc ) self . assertTrue ( kwargs [ <str> ] )  def test_using_iam_auth_source_and_target ( self ) :          m_iam_auth_client = self . setUpClientMocks ( iam_api_key = MOCK_API_KEY ) m_replicator = mock . MagicMock ( ) m_iam_auth_client . __getitem__ . return_value = m_replicator src = CouchDatabase ( m_iam_auth_client , self . source_db ) tgt = CouchDatabase ( m_iam_auth_client , self . target_db ) rep = Replicator ( m_iam_auth_client ) rep . create_replication ( src , tgt , repl_id = self . repl_id , user_ctx = self . user_ctx ) kcall = m_replicator . create_document . call_args_list self . assertEquals ( len ( kcall ) , 1 ) args , kwargs = kcall [ 0 ] self . assertEquals ( len ( args ) , 1 ) expected_doc = { <str> : self . repl_id , <str> : self . user_ctx , <str> : { <str> : { <str> : { <str> : MOCK_API_KEY } } , <str> : <str> . join ( ( self . server_url , self . source_db ) ) } , <str> : { <str> : { <str> : { <str> : MOCK_API_KEY } } , <str> : <str> . join ( ( self . server_url , self . target_db ) ) } } self . assertDictEqual ( args [ 0 ] , expected_doc ) self . assertTrue ( kwargs [ <str> ] )    