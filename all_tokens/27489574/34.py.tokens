import os import unittest import uuid import mock import requests from cloudant . _2to3 import UNICHR from cloudant . _common_util import response_to_json_dict from cloudant . design_document import DesignDocument from cloudant . document import Document from cloudant . error import CloudantArgumentError , CloudantDatabaseException from cloudant . feed import Feed , InfiniteFeed from cloudant . index import Index , TextIndex , SpecialIndex from cloudant . result import Result , QueryResult from cloudant . security_document import SecurityDocument from nose . plugins . attrib import attr from tests . unit . _test_util import LONG_NUMBER from . unit_t_db_base import skip_if_not_cookie_auth , UnitTestDbBase , skip_if_iam from . . import unicode_ class CloudantDatabaseExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantDatabaseException ) as cm :              raise CloudantDatabaseException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantDatabaseException ) as cm :              raise CloudantDatabaseException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_without_args ( self ) :          with self . assertRaises ( CloudantDatabaseException ) as cm :              raise CloudantDatabaseException ( 400 )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( CloudantDatabaseException ) as cm :              raise CloudantDatabaseException ( 400 , <str> )  self . assertEqual ( cm . exception . status_code , 400 )   @ attr ( db = [ <str> , <str> ] ) class DatabaseTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( DatabaseTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( DatabaseTests , self ) . tearDown ( )  def test_constructor ( self ) :          self . assertEqual ( self . db . client , self . client ) self . assertEqual ( self . db . database_name , self . test_dbname ) self . assertEqual ( self . db . r_session , self . client . r_session ) self . assertIsInstance ( self . db . result , Result )  def test_bulk_docs_uses_custom_encoder ( self ) :          self . set_up_client ( auto_connect = True , encoder = <str> ) docs = [ { <str> : <str> . format ( i ) , <str> : <str> , <str> : i } for i in range ( 3 ) ] database = self . client [ self . test_dbname ] with self . assertRaises ( TypeError ) :              database . bulk_docs ( docs )   def test_missing_revisions_uses_custom_encoder ( self ) :          revs = [ <str> , <str> , <str> ] self . set_up_client ( auto_connect = True , encoder = <str> ) database = self . client [ self . test_dbname ] with self . assertRaises ( TypeError ) :              database . missing_revisions ( <str> , * revs )   def test_revs_diff_uses_custom_encoder ( self ) :          revs = [ <str> , <str> , <str> ] self . set_up_client ( auto_connect = True , encoder = <str> ) database = self . client [ self . test_dbname ] with self . assertRaises ( TypeError ) :              database . revisions_diff ( <str> , * revs )   def test_retrieve_db_url ( self ) :          self . assertEqual ( self . db . database_url , <str> . join ( ( self . client . server_url , self . test_dbname ) ) )  @ skip_if_not_cookie_auth def test_retrieve_creds ( self ) :          if self . client . admin_party :              self . assertIsNone ( self . db . creds )  else :              expected_keys = [ <str> , <str> ] self . assertTrue ( all ( x in expected_keys for x in self . db . creds . keys ( ) ) ) self . assertTrue ( self . db . creds [ <str> ] . startswith ( <str> ) ) self . assertEqual ( self . db . creds [ <str> ] [ <str> ] , self . user )   def test_exists ( self ) :          self . assertTrue ( self . db . exists ( ) ) fake_db = self . client . _DATABASE_CLASS ( self . client , <str> ) self . assertFalse ( fake_db . exists ( ) )  def test_exists_raises_httperror ( self ) :          resp = requests . Response ( ) resp . status_code = 400 self . client . r_session . head = mock . Mock ( return_value = resp ) with self . assertRaises ( requests . HTTPError ) as cm :              self . db . exists ( )  err = cm . exception self . assertEqual ( err . response . status_code , 400 ) self . client . r_session . head . assert_called_with ( self . db . database_url )  def test_create_db_delete_db ( self ) :          dbname = self . dbname ( ) db = self . client . _DATABASE_CLASS ( self . client , dbname ) try :              db . create ( ) self . assertTrue ( db . exists ( ) ) db_2 = db . create ( ) self . assertEqual ( db , db_2 ) with self . assertRaises ( CloudantDatabaseException ) as cm :                  db . create ( throw_on_exists = True )  self . assertEqual ( cm . exception . status_code , 412 )  except Exception as err :              self . fail ( <str> . format ( str ( err ) ) )  finally :              db . delete ( ) self . assertFalse ( db . exists ( ) )   def test_delete_exception ( self ) :          try :              fake_db = self . client . _DATABASE_CLASS ( self . client , <str> ) fake_db . delete ( ) self . fail ( <str> )  except requests . HTTPError as err :              self . assertEqual ( err . response . status_code , 404 )   def test_retrieve_db_metadata ( self ) :          resp = self . db . r_session . get ( <str> . join ( ( self . client . server_url , self . test_dbname ) ) ) expected = response_to_json_dict ( resp ) actual = self . db . metadata ( ) self . assertListEqual ( list ( actual . keys ( ) ) , list ( expected . keys ( ) ) )  def test_retrieve_document_count ( self ) :          self . populate_db_with_documents ( 6 ) self . assertEqual ( self . db . doc_count ( ) , 6 )  def test_create_document_with_id ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : 6 } doc = self . db . create_document ( data ) self . assertEqual ( self . db [ <str> ] , doc ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertIsInstance ( doc , Document ) self . assertIsInstance ( self . db [ <str> ] , Document ) try :              self . db . create_document ( data , throw_on_exists = True ) self . fail ( <str> )  except CloudantDatabaseException as err :              self . assertEqual ( str ( err ) , <str> )   def test_create_document_that_already_exists ( self ) :          data = { <str> : <str> } doc = self . db . create_document ( data ) self . assertEqual ( self . db [ <str> ] , doc ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . db . create_document ( data , throw_on_exists = False )  def test_create_document_without_id ( self ) :          data = { <str> : <str> , <str> : 6 } doc = self . db . create_document ( data ) self . assertEqual ( self . db [ doc [ <str> ] ] , doc ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertIsInstance ( doc , Document ) self . assertIsInstance ( self . db [ doc [ <str> ] ] , Document )  def test_create_design_document ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : 6 } doc = self . db . create_document ( data ) self . assertEqual ( self . db [ <str> ] , doc ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertEqual ( doc [ <str> ] , data [ <str> ] ) self . assertEqual ( doc . views , dict ( ) ) self . assertIsInstance ( doc , DesignDocument ) self . assertIsInstance ( self . db [ <str> ] , DesignDocument )  def test_create_empty_document ( self ) :          empty_doc = self . db . new_document ( ) self . assertEqual ( self . db [ empty_doc [ <str> ] ] , empty_doc ) self . assertTrue ( all ( x in [ <str> , <str> ] for x in empty_doc . keys ( ) ) ) self . assertTrue ( empty_doc [ <str> ] . startswith ( <str> ) )  def test_retrieve_design_documents ( self ) :          map_func = <str> data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } ddoc1 = self . db . create_document ( data ) data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } ddoc2 = self . db . create_document ( data ) raw_ddocs = self . db . design_documents ( ) self . assertEqual ( len ( raw_ddocs ) , 2 ) self . assertTrue ( all ( x in [ raw_ddocs [ 0 ] [ <str> ] , raw_ddocs [ 1 ] [ <str> ] ] for x in self . db . keys ( ) ) ) self . assertTrue ( all ( x in [ raw_ddocs [ 0 ] [ <str> ] , raw_ddocs [ 1 ] [ <str> ] ] for x in self . db . keys ( ) ) ) self . assertTrue ( all ( x in [ raw_ddocs [ 0 ] [ <str> ] , raw_ddocs [ 1 ] [ <str> ] ] for x in [ ddoc1 , ddoc2 ] ) )  def test_retrieve_design_document_list ( self ) :          map_func = <str> data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } self . db . create_document ( data ) data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } self . db . create_document ( data ) ddoc_list = self . db . list_design_documents ( ) self . assertTrue ( all ( x in ddoc_list for x in self . db . keys ( ) ) )  def test_retrieve_design_document ( self ) :          local_ddoc = self . db . get_design_document ( <str> ) self . assertEqual ( local_ddoc , { <str> : <str> , <str> : { } , <str> : { } , <str> : { } , <str> : { } } ) map_func = <str> local_ddoc . add_view ( <str> , map_func ) local_ddoc . save ( ) ddoc = self . db . get_design_document ( <str> ) self . assertEqual ( ddoc , local_ddoc )  @ skip_if_not_cookie_auth def test_get_security_document ( self ) :          self . load_security_document_data ( ) sdoc = self . db . get_security_document ( ) self . assertIsInstance ( sdoc , SecurityDocument ) self . assertDictEqual ( sdoc , self . sdoc )  def test_retrieve_view_results ( self ) :          map_func = <str> data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } self . db . create_document ( data ) self . populate_db_with_documents ( ) rslt = self . db . get_view_result ( <str> , <str> ) self . assertIsInstance ( rslt , Result ) self . assertEqual ( rslt [ : 1 ] , rslt [ <str> ] ) rslt = self . db . get_view_result ( <str> , <str> , descending = True , reduce = False ) self . assertIsInstance ( rslt , Result ) self . assertEqual ( rslt [ : 1 ] , rslt [ <str> ] )  def test_retrieve_raw_view_results ( self ) :          map_func = <str> data = { <str> : <str> , <str> : { <str> : { <str> : map_func } } } self . db . create_document ( data ) self . populate_db_with_documents ( ) raw_rslt = self . db . get_view_result ( <str> , <str> , raw_result = True ) self . assertIsInstance ( raw_rslt , dict ) self . assertEqual ( len ( raw_rslt . get ( <str> ) ) , 100 )  def test_all_docs_post ( self ) :          self . populate_db_with_documents ( 200 ) keys_list = [ <str> . format ( i ) for i in range ( 0 , 200 , 2 ) ] self . assertEqual ( len ( keys_list ) , 100 ) rows = self . db . all_docs ( keys = keys_list ) . get ( <str> ) self . assertEqual ( len ( rows ) , 100 ) keys_returned = [ row [ <str> ] for row in rows ] self . assertTrue ( all ( x in keys_returned for x in keys_list ) )  def test_all_docs_post_empty_key_list ( self ) :          self . populate_db_with_documents ( ) rows = self . db . all_docs ( keys = [ ] ) . get ( <str> ) self . assertEqual ( len ( rows ) , 0 )  def test_all_docs_post_multiple_params ( self ) :          self . populate_db_with_documents ( 200 ) keys_list = [ <str> . format ( i ) for i in range ( 0 , 200 , 2 ) ] self . assertEqual ( len ( keys_list ) , 100 ) data = self . db . all_docs ( limit = 3 , skip = 10 , keys = keys_list ) self . assertEqual ( len ( data . get ( <str> ) ) , 3 ) self . assertEqual ( data [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( data [ <str> ] [ 1 ] [ <str> ] , <str> ) self . assertEqual ( data [ <str> ] [ 2 ] [ <str> ] , <str> )  def test_all_docs_get ( self ) :          self . populate_db_with_documents ( ) data = self . db . all_docs ( limit = 3 , skip = 10 ) self . assertEqual ( len ( data . get ( <str> ) ) , 3 ) self . assertEqual ( data [ <str> ] [ 0 ] [ <str> ] , <str> ) self . assertEqual ( data [ <str> ] [ 1 ] [ <str> ] , <str> ) self . assertEqual ( data [ <str> ] [ 2 ] [ <str> ] , <str> )  def test_all_docs_get_with_long_type ( self ) :          self . populate_db_with_documents ( ) data = self . db . all_docs ( limit = LONG_NUMBER , skip = 10 ) self . assertEqual ( len ( data . get ( <str> ) ) , 1 ) self . assertEqual ( data [ <str> ] [ 0 ] [ <str> ] , <str> ) data = self . db . all_docs ( limit = 1 , skip = LONG_NUMBER ) self . assertEqual ( len ( data . get ( <str> ) ) , 1 )  def test_custom_result_context_manager ( self ) :          self . populate_db_with_documents ( ) with self . db . custom_result ( startkey = <str> , endkey = <str> ) as rslt :              self . assertIsInstance ( rslt , Result ) keys_returned = [ i [ <str> ] for i in rslt ] expected_keys = [ <str> , <str> , <str> ] self . assertTrue ( all ( x in keys_returned for x in expected_keys ) )   def test_keys ( self ) :          self . assertEqual ( list ( self . db . keys ( ) ) , [ ] ) self . populate_db_with_documents ( 3 ) self . assertEqual ( self . db . keys ( remote = True ) , [ <str> , <str> , <str> ] )  def test_doc_id_in_db ( self ) :          self . populate_db_with_documents ( 1 ) self . assertTrue ( <str> in self . db )  def test_doc_id_not_in_db ( self ) :          self . populate_db_with_documents ( 1 ) self . assertFalse ( <str> in self . db )  def test_get_non_existing_doc_via_getitem ( self ) :          try :              doc = self . db [ <str> ] self . fail ( <str> )  except KeyError :              pass   def test_get_db_via_getitem ( self ) :          map_func = <str> expected_ddoc = self . db . get_design_document ( <str> ) expected_ddoc . add_view ( <str> , map_func ) expected_ddoc . save ( ) self . populate_db_with_documents ( 3 ) doc = self . db [ <str> ] self . assertIsInstance ( doc , Document ) self . assertEqual ( doc . get ( <str> ) , <str> ) self . assertTrue ( doc . get ( <str> ) . startswith ( <str> ) ) self . assertEqual ( doc . get ( <str> ) , <str> ) self . assertEqual ( doc . get ( <str> ) , 1 ) ddoc = self . db [ <str> ] self . assertIsInstance ( ddoc , DesignDocument ) self . assertTrue ( ddoc , expected_ddoc )  def test_document_iteration_under_fetch_limit ( self ) :          docs = [ ] for doc in self . db :              self . fail ( <str> )  self . populate_db_with_documents ( 3 ) age = 0 for doc in self . db :              self . assertIsInstance ( doc , Document ) self . assertEqual ( doc [ <str> ] , <str> . format ( age ) ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , <str> ) self . assertEqual ( doc [ <str> ] , age ) docs . append ( doc ) age += 1  self . assertEqual ( len ( docs ) , 3 ) expected_keys = [ <str> . format ( i ) for i in range ( 3 ) ] self . assertTrue ( all ( x in self . db . keys ( ) for x in expected_keys ) ) for id in self . db . keys ( ) :              doc = self . db . get ( id ) self . assertIsInstance ( doc , Document ) self . assertEqual ( doc [ <str> ] , id ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , <str> ) self . assertEqual ( doc [ <str> ] , int ( id [ len ( id ) - 3 : len ( id ) ] ) )   def test_document_iteration_over_fetch_limit ( self ) :          docs = [ ] for doc in self . db :              self . fail ( <str> )  self . populate_db_with_documents ( 103 ) age = 0 for doc in self . db :              self . assertIsInstance ( doc , Document ) self . assertEqual ( doc [ <str> ] , <str> . format ( age ) ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , <str> ) self . assertEqual ( doc [ <str> ] , age ) docs . append ( doc ) age += 1  self . assertEqual ( len ( docs ) , 103 ) expected_keys = [ <str> . format ( i ) for i in range ( 103 ) ] self . assertTrue ( all ( x in self . db . keys ( ) for x in expected_keys ) ) for id in self . db . keys ( ) :              doc = self . db . get ( id ) self . assertIsInstance ( doc , Document ) self . assertEqual ( doc [ <str> ] , id ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , <str> ) self . assertEqual ( doc [ <str> ] , int ( id [ len ( id ) - 3 : len ( id ) ] ) )   def test_document_iteration_completeness ( self ) :          for _ in self . db :              self . fail ( <str> )  include_ranges = [ ( 0x0023 , 0x0026 ) , ( 0x00A1 , 0x00AC ) , ( 0x0370 , 0x0377 ) , ( 0x037A , 0x037E ) , ( 0x0384 , 0x038A ) , ( 0x16A0 , 0x16F0 ) , ( 0x2C60 , 0x2C7F ) ] all_docs = [ { <str> : UNICHR ( i ) + UNICHR ( j ) } for a , b in include_ranges for i in range ( a , b ) for j in range ( a , b ) ] batch_size = 500 for i in range ( 0 , len ( all_docs ) , batch_size ) :              self . db . bulk_docs ( all_docs [ i : i + batch_size ] )  doc_count = 0 for i , doc in enumerate ( self . db ) :              doc_count += 1 self . assertEqual ( doc [ <str> ] , all_docs [ i ] [ <str> ] )  self . assertEqual ( doc_count , len ( all_docs ) )  def test_document_iteration_returns_valid_documents ( self ) :          self . populate_db_with_documents ( 3 ) with DesignDocument ( self . db , <str> ) as ddoc :              ddoc . add_view ( <str> , <str> )  docs = [ ] ddocs = [ ] for doc in self . db :              self . assertEqual ( doc . document_url , <str> . join ( ( self . db . database_url , doc [ <str> ] ) ) ) if isinstance ( doc , DesignDocument ) :                  self . assertEqual ( doc [ <str> ] , <str> ) ddocs . append ( doc )  elif isinstance ( doc , Document ) :                  self . assertTrue ( doc [ <str> ] in [ <str> , <str> , <str> ] ) docs . append ( doc )  doc . delete ( )  for doc in self . db :              self . fail ( <str> )  self . assertEqual ( len ( docs ) , 3 ) self . assertEqual ( len ( ddocs ) , 1 )  def test_bulk_docs_creation ( self ) :          docs = [ { <str> : <str> . format ( i ) , <str> : <str> , <str> : i } for i in range ( 3 ) ] results = self . db . bulk_docs ( docs ) self . assertEqual ( len ( results ) , 3 ) i = 0 for result in results :              self . assertEqual ( result [ <str> ] , <str> . format ( i ) ) self . assertTrue ( result [ <str> ] . startswith ( <str> ) ) i += 1   def test_bulk_docs_update ( self ) :          self . populate_db_with_documents ( 3 ) docs = [ ] for doc in self . db :              doc [ <str> ] = <str> docs . append ( doc )  results = self . db . bulk_docs ( docs ) self . assertEqual ( len ( results ) , 3 ) i = 0 for result in results :              self . assertEqual ( result [ <str> ] , <str> . format ( i ) ) self . assertTrue ( result [ <str> ] . startswith ( <str> ) ) i += 1  age = 0 for doc in self . db :              self . assertEqual ( doc [ <str> ] , <str> . format ( age ) ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , <str> ) self . assertEqual ( doc [ <str> ] , age ) age += 1  self . assertEqual ( age , 3 )  def test_missing_revisions ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) revs = [ <str> , <str> , <str> ] self . assertEqual ( self . db . missing_revisions ( <str> , * revs ) , revs ) self . assertEqual ( self . db . missing_revisions ( <str> , * revs ) , revs ) self . assertEqual ( self . db . missing_revisions ( <str> , doc [ <str> ] , * revs ) , revs ) self . assertEqual ( self . db . missing_revisions ( <str> , doc [ <str> ] ) , [ ] )  def test_revisions_diff ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) revs = [ <str> , <str> , <str> ] self . assertEqual ( self . db . revisions_diff ( <str> , * revs ) , { <str> : { <str> : revs } } ) self . assertEqual ( self . db . revisions_diff ( <str> , * revs ) , { <str> : { <str> : revs , <str> : [ doc [ <str> ] ] } } ) self . assertEqual ( self . db . revisions_diff ( <str> , doc [ <str> ] ) , { } )  @ mock . patch ( <str> ) def test_get_set_revision_limit ( self , m_req ) :          mock_200_get_1 = mock . MagicMock ( ) type ( mock_200_get_1 ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( mock_200_get_1 ) . text = mock . PropertyMock ( return_value = <str> ) mock_200_get_2 = mock . MagicMock ( ) type ( mock_200_get_2 ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( mock_200_get_2 ) . text = mock . PropertyMock ( return_value = <str> ) mock_200_set = mock . MagicMock ( ) type ( mock_200_set ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( mock_200_set ) . text = mock . PropertyMock ( return_value = <str> ) m_req . side_effect = [ mock_200_get_1 , mock_200_set , mock_200_get_2 ] self . assertEqual ( self . db . get_revision_limit ( ) , 4321 ) self . assertEqual ( self . db . set_revision_limit ( 1234 ) , { <str> : True } ) self . assertEqual ( self . db . get_revision_limit ( ) , 1234 ) self . assertEquals ( m_req . call_count , 3 )  @ attr ( db = <str> ) def test_view_clean_up ( self ) :          self . assertEqual ( self . db . view_cleanup ( ) , { <str> : True } )  def test_changes_feed_call ( self ) :          changes = self . db . changes ( limit = 100 ) self . assertIs ( type ( changes ) , Feed ) self . assertEqual ( changes . _url , <str> . join ( [ self . db . database_url , <str> ] ) ) self . assertIsInstance ( changes . _r_session , requests . Session ) self . assertFalse ( changes . _raw_data ) self . assertDictEqual ( changes . _options , { <str> : 100 } )  def test_changes_inifinite_feed_call ( self ) :          changes = self . db . infinite_changes ( ) self . assertIsInstance ( changes , InfiniteFeed ) self . assertEqual ( changes . _url , <str> . join ( [ self . db . database_url , <str> ] ) ) self . assertIsInstance ( changes . _r_session , requests . Session ) self . assertFalse ( changes . _raw_data ) self . assertDictEqual ( changes . _options , { <str> : <str> } )  def test_get_list_function_result_with_invalid_argument ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . get_list_function_result ( <str> , <str> , <str> , foo = { <str> : <str> } )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_get_list_function_result ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . add_list_function ( <str> , <str> <str> <str> <str> ) ddoc . save ( ) resp = self . db . get_list_function_result ( <str> , <str> , <str> , limit = 5 ) self . assertEqual ( resp , <str> <str> <str> <str> <str> <str> <str> )  def test_get_show_result ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_show_function ( <str> , <str> <str> <str> ) ddoc . save ( ) doc = Document ( self . db , <str> ) doc . save ( ) resp = self . db . get_show_function_result ( <str> , <str> , <str> ) self . assertEqual ( resp , <str> )  @ skip_if_iam def test_create_doc_with_update_handler ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = { <str> : <str> <str> <str> } ddoc . save ( ) resp = self . db . update_handler_result ( <str> , <str> , data = { <str> : <str> } ) self . assertEqual ( resp , <str> )  @ skip_if_iam def test_update_doc_with_update_handler ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = { <str> : <str> <str> <str> <str> <str> <str> <str> <str> <str> } ddoc . save ( ) resp = self . db . update_handler_result ( <str> , <str> , <str> , field = <str> , value = <str> , data = { <str> : <str> } ) self . assertEqual ( resp , <str> ) ddoc_remote = Document ( self . db , <str> ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , { <str> : 1 , <str> : <str> , <str> : <str> , <str> : ddoc_remote [ <str> ] , <str> : <str> , <str> : <str> } )  def test_update_handler_raises_httperror ( self ) :          resp = requests . Response ( ) resp . status_code = 400 self . client . r_session . put = mock . Mock ( return_value = resp ) with self . assertRaises ( requests . HTTPError ) as cm :              self . db . update_handler_result ( <str> , <str> , <str> , field = <str> , value = <str> , data = { <str> : <str> } )  err = cm . exception self . assertEqual ( err . response . status_code , 400 ) ddoc = DesignDocument ( self . db , <str> ) self . client . r_session . put . assert_called_with ( <str> . join ( [ ddoc . document_url , <str> , <str> , <str> ] ) , data = { <str> : <str> } , params = { <str> : <str> , <str> : <str> } )  def test_database_request_fails_after_client_disconnects ( self ) :          self . client . disconnect ( ) try :              with self . assertRaises ( AttributeError ) :                  self . db . metadata ( )  self . assertIsNone ( self . db . r_session )  finally :              self . client . connect ( )   @ attr ( couchapi = 2 ) def test_create_json_index ( self ) :          index = self . db . create_query_index ( fields = [ <str> , <str> ] ) self . assertIsInstance ( index , Index ) ddoc = self . db [ index . design_document_id ] self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) index = ddoc [ <str> ] [ index . name ] self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( index [ <str> ] , <str> )  @ attr ( couchapi = 2 ) def test_delete_json_index ( self ) :          index = self . db . create_query_index ( <str> , <str> , fields = [ <str> , <str> ] ) self . assertIsInstance ( index , Index ) ddoc = self . db [ <str> ] self . assertTrue ( ddoc . exists ( ) ) self . db . delete_query_index ( <str> , <str> , <str> ) self . assertFalse ( ddoc . exists ( ) )   @ attr ( db = <str> ) class CloudantDatabaseTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( CloudantDatabaseTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( CloudantDatabaseTests , self ) . tearDown ( )  def test_share_database_uses_custom_encoder ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . set_up_client ( auto_connect = True , encoder = <str> ) database = self . client [ self . test_dbname ] with self . assertRaises ( TypeError ) :              database . share_database ( share )   def test_unshare_database_uses_custom_encoder ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . set_up_client ( auto_connect = True , encoder = <str> ) database = self . client [ self . test_dbname ] with self . assertRaises ( TypeError ) :              database . unshare_database ( share )   @ skip_if_not_cookie_auth def test_security_document ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . db . share_database ( share ) expected = { <str> : { share : [ <str> ] } } self . assertDictEqual ( self . db . security_document ( ) , expected )  @ skip_if_not_cookie_auth def test_share_database_default_permissions ( self ) :          self . assertDictEqual ( self . db . security_document ( ) , dict ( ) ) share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . db . share_database ( share ) expected = { <str> : { share : [ <str> ] } } self . assertDictEqual ( self . db . security_document ( ) , expected )  @ skip_if_not_cookie_auth def test_share_database ( self ) :          self . assertDictEqual ( self . db . security_document ( ) , dict ( ) ) share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . db . share_database ( share , [ <str> ] ) expected = { <str> : { share : [ <str> ] } } self . assertDictEqual ( self . db . security_document ( ) , expected )  @ skip_if_not_cookie_auth def test_share_database_with_redundant_role_entries ( self ) :          self . assertDictEqual ( self . db . security_document ( ) , dict ( ) ) share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . db . share_database ( share , [ <str> , <str> ] ) expected = { <str> : { share : [ <str> ] } } self . assertDictEqual ( self . db . security_document ( ) , expected )  def test_share_database_invalid_role ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . share_database ( share , [ <str> , <str> ] )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> <str> <str> )  def test_share_database_empty_role_list ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . share_database ( share , [ ] )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> <str> )  @ skip_if_not_cookie_auth def test_unshare_database ( self ) :          share = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . db . share_database ( share ) expected = { <str> : { share : [ <str> ] } } self . assertDictEqual ( self . db . security_document ( ) , expected ) self . assertDictEqual ( self . db . unshare_database ( share ) , { <str> : True } ) self . assertDictEqual ( self . db . security_document ( ) , { <str> : dict ( ) } )  def test_retrieve_shards ( self ) :          shards = self . db . shards ( ) self . assertTrue ( all ( x in shards . keys ( ) for x in [ <str> ] ) ) self . assertIsInstance ( shards [ <str> ] , dict )  def test_get_raw_query_result ( self ) :          self . populate_db_with_documents ( 100 ) result = self . db . get_query_result ( { <str> : [ { <str> : { <str> : <str> } } , { <str> : { <str> : <str> } } ] } , [ <str> , <str> ] , True ) self . assertNotIsInstance ( result , QueryResult ) self . assertIsInstance ( result , dict ) self . assertEqual ( [ doc [ <str> ] for doc in result [ <str> ] ] , [ <str> , <str> , <str> , <str> ] )  def test_get_query_result_with_kwargs ( self ) :          self . populate_db_with_documents ( 100 ) result = self . db . get_query_result ( { <str> : [ { <str> : { <str> : <str> } } , { <str> : { <str> : <str> } } ] } , [ <str> , <str> ] , sort = [ { <str> : <str> } ] ) self . assertIsInstance ( result , QueryResult ) self . assertEqual ( [ doc [ <str> ] for doc in result ] , [ <str> , <str> , <str> , <str> ] )  def test_get_query_result_without_kwargs ( self ) :          self . populate_db_with_documents ( 100 ) result = self . db . get_query_result ( { <str> : [ { <str> : { <str> : <str> } } , { <str> : { <str> : <str> } } ] } , [ <str> , <str> ] ) self . assertIsInstance ( result , QueryResult ) self . assertEqual ( [ doc [ <str> ] for doc in result ] , [ <str> , <str> , <str> , <str> ] )  def test_get_query_result_without_fields ( self ) :          self . populate_db_with_documents ( 100 ) expected_fields = [ <str> , <str> , <str> , <str> ] expected_fields . sort ( ) result = self . db . get_query_result ( { <str> : [ { <str> : { <str> : <str> } } , { <str> : { <str> : <str> } } ] } ) self . assertIsInstance ( result , QueryResult ) for doc in result :              doc_fields = list ( doc . keys ( ) ) doc_fields . sort ( ) self . assertEqual ( doc_fields , expected_fields )  self . assertEqual ( [ doc [ <str> ] for doc in result ] , [ <str> , <str> , <str> , <str> ] )  def test_get_query_result_with_empty_fields_list ( self ) :          self . populate_db_with_documents ( 100 ) expected_fields = [ <str> , <str> , <str> , <str> ] expected_fields . sort ( ) result = self . db . get_query_result ( { <str> : [ { <str> : { <str> : <str> } } , { <str> : { <str> : <str> } } ] } , fields = [ ] ) self . assertIsInstance ( result , QueryResult ) for doc in result :              doc_fields = list ( doc . keys ( ) ) doc_fields . sort ( ) self . assertEqual ( doc_fields , expected_fields )  self . assertEqual ( [ doc [ <str> ] for doc in result ] , [ <str> , <str> , <str> , <str> ] )  def test_create_text_index ( self ) :          index = self . db . create_query_index ( index_type = <str> , fields = [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] ) self . assertIsInstance ( index , TextIndex ) ddoc = self . db [ index . design_document_id ] self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) text_index = ddoc [ <str> ] [ index . name ] self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertEquals ( text_index [ <str> ] [ <str> ] , [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertTrue ( text_index [ <str> ] [ <str> ] )  def test_create_all_fields_text_index ( self ) :          index = self . db . create_query_index ( index_type = <str> ) self . assertIsInstance ( index , TextIndex ) ddoc = self . db [ index . design_document_id ] self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) index = ddoc [ <str> ] [ index . name ] self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , { <str> : <str> } ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , { } ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , { } ) self . assertTrue ( index [ <str> ] [ <str> ] )  def test_create_multiple_indexes_one_ddoc ( self ) :          index = self . db . create_query_index ( <str> , <str> , fields = [ <str> , <str> ] ) self . assertIsInstance ( index , Index ) search_index = self . db . create_query_index ( <str> , <str> , <str> , fields = [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] ) self . assertIsInstance ( search_index , TextIndex ) ddoc = self . db [ <str> ] self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) json_index = ddoc [ <str> ] [ <str> ] self . assertEquals ( json_index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( json_index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( json_index [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( json_index [ <str> ] , <str> ) text_index = ddoc [ <str> ] [ <str> ] self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertEquals ( text_index [ <str> ] [ <str> ] , [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertTrue ( text_index [ <str> ] [ <str> ] )  def test_create_query_index_failure ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . create_query_index ( None , <str> , <str> , fields = [ { <str> : <str> } ] )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> )  def test_delete_text_index ( self ) :          index = self . db . create_query_index ( <str> , <str> , <str> ) self . assertIsInstance ( index , TextIndex ) ddoc = self . db [ <str> ] self . assertTrue ( ddoc . exists ( ) ) self . db . delete_query_index ( <str> , <str> , <str> ) self . assertFalse ( ddoc . exists ( ) )  def test_delete_query_index_failure ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . delete_query_index ( None , <str> , <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> )  def test_get_query_indexes_raw ( self ) :          self . db . create_query_index ( <str> , <str> , fields = [ <str> , <str> ] ) self . db . create_query_index ( <str> , <str> , <str> ) indexes = self . db . get_query_indexes ( raw_result = True ) self . assertEquals ( indexes [ <str> ] , 3 ) all_docs_index = indexes [ <str> ] [ 0 ] self . assertEquals ( all_docs_index [ <str> ] , None ) self . assertEquals ( all_docs_index [ <str> ] [ <str> ] , [ { <str> : <str> } ] ) self . assertEquals ( all_docs_index [ <str> ] , <str> ) self . assertEquals ( all_docs_index [ <str> ] , <str> ) json_index = indexes [ <str> ] [ 1 ] self . assertEquals ( json_index [ <str> ] , <str> ) self . assertEquals ( json_index [ <str> ] [ <str> ] , [ { <str> : <str> } , { <str> : <str> } ] ) self . assertEquals ( json_index [ <str> ] , <str> ) self . assertEquals ( json_index [ <str> ] , <str> ) text_index = indexes [ <str> ] [ 2 ] self . assertEquals ( text_index [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertEquals ( text_index [ <str> ] [ <str> ] , [ ] ) self . assertEquals ( text_index [ <str> ] [ <str> ] , { } ) self . assertEquals ( text_index [ <str> ] , <str> ) self . assertEquals ( text_index [ <str> ] , <str> ) self . assertTrue ( text_index [ <str> ] [ <str> ] )  def test_get_query_indexes ( self ) :          self . db . create_query_index ( <str> , <str> , fields = [ <str> , <str> ] ) self . db . create_query_index ( <str> , <str> , <str> ) indexes = self . db . get_query_indexes ( ) self . assertIsInstance ( indexes [ 0 ] , SpecialIndex ) self . assertIsNone ( indexes [ 0 ] . design_document_id ) self . assertEqual ( indexes [ 0 ] . name , <str> ) self . assertIsInstance ( indexes [ 1 ] , Index ) self . assertEqual ( indexes [ 1 ] . design_document_id , <str> ) self . assertEqual ( indexes [ 1 ] . name , <str> ) self . assertIsInstance ( indexes [ 2 ] , TextIndex ) self . assertEqual ( indexes [ 2 ] . design_document_id , <str> ) self . assertEqual ( indexes [ 2 ] . name , <str> )  def test_get_search_result_with_invalid_argument ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . get_search_result ( <str> , <str> , query = <str> , foo = { <str> : <str> } )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_get_search_result_with_both_q_and_query ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . get_search_result ( <str> , <str> , query = <str> , q = <str> )  err = cm . exception self . assertTrue ( str ( err ) . startswith ( <str> ) )  def test_get_search_result_with_invalid_value_types ( self ) :          test_data = [ { <str> : 1 } , { <str> : <str> } , { <str> : <str> } , { <str> : [ <str> ] } , { <str> : <str> } , { <str> : 3 } , { <str> : <str> } , { <str> : <str> } , { <str> : 1 } , { <str> : 10 } , { <str> : [ <str> ] } , { <str> : <str> } , { <str> : [ <str> ] } , { <str> : 1 } , { <str> : [ <str> ] } , { <str> : <str> } , { <str> : <str> } , ] for argument in test_data :              with self . assertRaises ( CloudantArgumentError ) as cm :                  self . db . get_search_result ( <str> , <str> , query = <str> , ** argument )  err = cm . exception self . assertTrue ( str ( err ) . startswith ( <str> . format ( list ( argument . keys ( ) ) [ 0 ] ) ) )   def test_get_search_result_without_query ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . get_search_result ( <str> , <str> , limit = 10 , include_docs = True )  err = cm . exception self . assertTrue ( str ( err ) . startswith ( <str> ) ) self . assertTrue ( str ( err ) . find ( <str> ) >= 0 ) self . assertTrue ( str ( err ) . find ( <str> ) >= 0 )  def test_get_search_result_with_invalid_query_type ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . db . get_search_result ( <str> , <str> , query = [ <str> ] )  err = cm . exception self . assertTrue ( str ( err ) . startswith ( <str> ) )  def test_get_search_result_executes_search_query ( self ) :          self . create_search_index ( ) self . populate_db_with_documents ( 100 ) resp = self . db . get_search_result ( <str> , <str> , query = <str> , sort = <str> , limit = 5 , include_docs = True ) self . assertEqual ( 5 , len ( resp [ <str> ] ) ) self . assertTrue ( resp [ <str> ] ) for i , row in enumerate ( resp [ <str> ] ) :              doc_id = <str> . format ( i ) self . assertEqual ( doc_id , row [ <str> ] ) self . assertEqual ( <str> , row [ <str> ] [ <str> ] ) self . assertEqual ( doc_id , row [ <str> ] [ 0 ] ) doc = row [ <str> ] self . assertEqual ( doc_id , doc [ <str> ] ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( i , doc [ <str> ] ) self . assertEqual ( <str> , doc [ <str> ] )   def test_get_search_result_executes_search_q ( self ) :          self . create_search_index ( ) self . populate_db_with_documents ( 100 ) resp = self . db . get_search_result ( <str> , <str> , q = <str> , sort = <str> , limit = 1 ) self . assertTrue ( resp [ <str> ] ) self . assertEqual ( 100 , resp [ <str> ] ) self . assertEqual ( 1 , len ( resp [ <str> ] ) ) row = resp [ <str> ] [ 0 ] self . assertEqual ( <str> , row [ <str> ] ) self . assertEqual ( <str> , row [ <str> ] [ 0 ] ) self . assertEqual ( <str> , row [ <str> ] [ <str> ] )  def test_get_search_result_executes_search_query_with_group_option ( self ) :          self . create_search_index ( ) self . populate_db_with_documents ( 100 ) resp = self . db . get_search_result ( <str> , <str> , query = <str> , group_field = <str> , group_limit = 5 , group_sort = <str> ) self . assertEqual ( len ( resp [ <str> ] ) , 5 ) for i , group in enumerate ( resp [ <str> ] ) :              by_id = <str> . format ( i ) self . assertEqual ( by_id , group [ <str> ] ) self . assertEqual ( 1 , group [ <str> ] ) self . assertEqual ( 1 , len ( group [ <str> ] ) ) row = group [ <str> ] [ 0 ] self . assertEqual ( by_id , row [ <str> ] ) self . assertEqual ( <str> , row [ <str> ] [ <str> ] ) self . assertEqual ( 1.0 , row [ <str> ] [ 0 ] )  self . assertEqual ( 100 , resp [ <str> ] )   if __name__ == <str> :      unittest . main ( )   