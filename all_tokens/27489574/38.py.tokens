import time import unittest import json import mock from cloudant . _2to3 import Cookie from cloudant . client import Cloudant from cloudant . _client_session import IAMSession MOCK_API_KEY = <str> MOCK_ACCESS_TOKEN = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> ) MOCK_IAM_TOKEN_RESPONSE = <str> % ( MOCK_ACCESS_TOKEN ) class IAMAuthTests ( unittest . TestCase ) :      @ staticmethod def _mock_cookie ( expires_secs = 300 ) :          return Cookie ( version = 0 , name = <str> , value = ( <str> <str> ) , port = None , port_specified = False , domain = <str> , domain_specified = False , domain_initial_dot = False , path = <str> , path_specified = True , secure = True , expires = int ( time . time ( ) + expires_secs ) , discard = False , comment = None , comment_url = None , rest = { <str> : None } , rfc2109 = True )  def test_iam_set_credentials ( self ) :          iam = IAMSession ( MOCK_API_KEY , <str> ) self . assertEquals ( iam . _api_key , MOCK_API_KEY ) new_api_key = <str> iam . set_credentials ( None , new_api_key ) self . assertEquals ( iam . _api_key , new_api_key )  @ mock . patch ( <str> ) def test_iam_get_access_token ( self , m_req ) :          m_response = mock . MagicMock ( ) mock_token_response_text = mock . PropertyMock ( return_value = MOCK_IAM_TOKEN_RESPONSE ) type ( m_response ) . text = mock_token_response_text m_req . return_value = m_response iam = IAMSession ( MOCK_API_KEY , <str> ) access_token = iam . _get_access_token ( ) m_req . assert_called_once_with ( <str> , iam . _token_url , auth = None , headers = { <str> : <str> } , data = { <str> : <str> , <str> : <str> , <str> : MOCK_API_KEY } ) self . assertEqual ( access_token , MOCK_ACCESS_TOKEN ) self . assertTrue ( m_response . raise_for_status . called ) mock_token_response_text . assert_called_with ( )  @ mock . patch ( <str> ) def test_iam_get_access_token_with_iam_client_id_and_secret ( self , m_req ) :          m_response = mock . MagicMock ( ) mock_token_response_text = mock . PropertyMock ( return_value = MOCK_IAM_TOKEN_RESPONSE ) type ( m_response ) . text = mock_token_response_text m_req . return_value = m_response iam_client_id = <str> iam_client_secret = <str> iam = IAMSession ( MOCK_API_KEY , <str> , client_id = iam_client_id , client_secret = iam_client_secret ) access_token = iam . _get_access_token ( ) m_req . assert_called_once_with ( <str> , iam . _token_url , auth = ( iam_client_id , iam_client_secret ) , headers = { <str> : <str> } , data = { <str> : <str> , <str> : <str> , <str> : MOCK_API_KEY } ) self . assertEqual ( access_token , MOCK_ACCESS_TOKEN ) self . assertTrue ( m_response . raise_for_status . called ) mock_token_response_text . assert_called_with ( )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_login ( self , m_token , m_req ) :          m_token . return_value = MOCK_ACCESS_TOKEN m_response = mock . MagicMock ( ) m_req . return_value = m_response iam = IAMSession ( MOCK_API_KEY , <str> ) iam . login ( ) m_req . assert_called_once_with ( <str> , iam . _session_url , headers = { <str> : <str> } , data = json . dumps ( { <str> : MOCK_ACCESS_TOKEN } ) ) self . assertEqual ( m_token . call_count , 1 ) self . assertTrue ( m_response . raise_for_status . called )  def test_iam_logout ( self ) :          iam = IAMSession ( MOCK_API_KEY , <str> ) iam . cookies . set_cookie ( self . _mock_cookie ( ) ) self . assertEqual ( len ( iam . cookies . keys ( ) ) , 1 ) iam . logout ( ) self . assertEqual ( len ( iam . cookies . keys ( ) ) , 0 )  @ mock . patch ( <str> ) def test_iam_get_session_info ( self , m_get ) :          m_info = <str> m_response = mock . MagicMock ( ) type ( m_response ) . text = mock . PropertyMock ( return_value = m_info ) m_get . return_value = m_response iam = IAMSession ( MOCK_API_KEY , <str> ) info = iam . info ( ) m_get . assert_called_once_with ( iam . _session_url ) self . assertEqual ( info , json . loads ( m_info ) ) self . assertTrue ( m_response . raise_for_status . called )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_first_request ( self , m_req , m_login ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) m_req . return_value = m_response_ok iam = IAMSession ( MOCK_API_KEY , <str> , auto_renew = True ) iam . login ( ) self . assertEqual ( m_login . call_count , 1 ) self . assertEqual ( m_req . call_count , 0 ) iam . cookies . set_cookie ( self . _mock_cookie ( ) ) resp = iam . request ( <str> , <str> ) self . assertEqual ( m_login . call_count , 1 ) self . assertEqual ( m_req . call_count , 1 ) self . assertEqual ( resp . status_code , 200 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_renew_cookie_on_expiry ( self , m_req , m_login ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) m_req . return_value = m_response_ok iam = IAMSession ( MOCK_API_KEY , <str> , auto_renew = True ) iam . login ( ) iam . cookies . set_cookie ( self . _mock_cookie ( expires_secs = - 300 ) ) resp = iam . request ( <str> , <str> ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_req . call_count , 1 ) self . assertEqual ( resp . status_code , 200 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_renew_cookie_on_401_success ( self , m_req , m_login ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) m_response_bad = mock . MagicMock ( ) type ( m_response_bad ) . status_code = mock . PropertyMock ( return_value = 401 ) m_req . side_effect = [ m_response_bad , m_response_ok , m_response_ok ] iam = IAMSession ( MOCK_API_KEY , <str> , auto_renew = True ) iam . login ( ) self . assertEqual ( m_login . call_count , 1 ) iam . cookies . set_cookie ( self . _mock_cookie ( ) ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 200 ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_req . call_count , 2 ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 200 ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_req . call_count , 3 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_renew_cookie_on_401_failure ( self , m_req , m_login ) :          m_response_bad = mock . MagicMock ( ) type ( m_response_bad ) . status_code = mock . PropertyMock ( return_value = 401 ) m_req . return_value = m_response_bad iam = IAMSession ( MOCK_API_KEY , <str> , auto_renew = True ) iam . login ( ) self . assertEqual ( m_login . call_count , 1 ) iam . cookies . set_cookie ( self . _mock_cookie ( ) ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 401 ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_req . call_count , 2 ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 401 ) self . assertEqual ( m_login . call_count , 3 ) self . assertEqual ( m_req . call_count , 4 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_renew_cookie_disabled ( self , m_req , m_login ) :          m_response_bad = mock . MagicMock ( ) type ( m_response_bad ) . status_code = mock . PropertyMock ( return_value = 401 ) m_req . return_value = m_response_bad iam = IAMSession ( MOCK_API_KEY , <str> , auto_renew = False ) iam . login ( ) self . assertEqual ( m_login . call_count , 1 ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 401 ) self . assertEqual ( m_login . call_count , 1 ) self . assertEqual ( m_req . call_count , 1 ) resp = iam . request ( <str> , <str> ) self . assertEqual ( resp . status_code , 401 ) self . assertEqual ( m_login . call_count , 1 ) self . assertEqual ( m_req . call_count , 2 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_client_create ( self , m_req , m_login ) :          m_response_ok = mock . MagicMock ( ) type ( m_response_ok ) . status_code = mock . PropertyMock ( return_value = 200 ) type ( m_response_ok ) . text = mock . PropertyMock ( return_value = <str> ) m_req . return_value = m_response_ok client = Cloudant . iam ( <str> , MOCK_API_KEY ) client . connect ( ) client . r_session . cookies . set_cookie ( self . _mock_cookie ( ) ) dbs = client . all_dbs ( ) self . assertEqual ( m_login . call_count , 1 ) self . assertEqual ( m_req . call_count , 1 ) self . assertEqual ( dbs , [ <str> ] )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_client_session_login ( self , m_set , m_login ) :          client = Cloudant . iam ( <str> , MOCK_API_KEY ) client . connect ( ) client . r_session . cookies . set_cookie ( self . _mock_cookie ( ) ) client . session_login ( ) m_set . assert_called_with ( None , None ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_set . call_count , 2 )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_iam_client_session_login_with_new_credentials ( self , m_set , m_login ) :          client = Cloudant . iam ( <str> , MOCK_API_KEY ) client . connect ( ) client . r_session . cookies . set_cookie ( self . _mock_cookie ( ) ) client . session_login ( <str> , <str> ) m_set . assert_called_with ( <str> , <str> ) self . assertEqual ( m_login . call_count , 2 ) self . assertEqual ( m_set . call_count , 2 )   if __name__ == <str> :      unittest . main ( )   