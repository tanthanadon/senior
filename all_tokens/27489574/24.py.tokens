import unittest import uuid from cloudant import cloudant from cloudant . credentials import read_dot_cloudant from . . import unicode_ class IterTest ( unittest . TestCase ) :      def setUp ( self ) :          self . user , self . password = read_dot_cloudant ( filename = <str> ) self . last_db = None  def tearDown ( self ) :          if self . last_db is not None :              with cloudant ( self . user , self . password , account = self . user ) as c :                  c . delete_database ( self . last_db )    def test_database_with_two_docs ( self ) :          dbname = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . last_db = dbname with cloudant ( self . user , self . password , account = self . user ) as c :              session = c . session ( ) db = c . create_database ( dbname ) doc1 = db . create_document ( { <str> : <str> , <str> : <str> } ) doc2 = db . create_document ( { <str> : <str> , <str> : <str> } ) docs = [ ] for doc in db :                  docs . append ( doc )  self . assertEqual ( len ( docs ) , 2 )   def test_database_with_many_docs ( self ) :          dbname = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) ) self . last_db = dbname with cloudant ( self . user , self . password , account = self . user ) as c :              session = c . session ( ) db = c . create_database ( dbname ) for i in range ( 0 , 300 ) :                  db . create_document ( { <str> : <str> . format ( i ) , <str> : <str> . format ( i ) } )  docs = [ ] for doc in db :                  docs . append ( doc )  self . assertEqual ( len ( docs ) , 300 ) unique_ids = set ( [ doc [ <str> ] for doc in docs ] ) self . assertEqual ( len ( unique_ids ) , 300 )    if __name__ == <str> :      unittest . main ( )   