from __future__ import absolute_import import os import unittest import mock import requests from cloudant . design_document import DesignDocument from cloudant . document import Document from cloudant . error import CloudantArgumentError , CloudantIndexException from cloudant . index import Index , TextIndex , SpecialIndex from cloudant . query import Query from cloudant . view import QueryIndexView from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase from . . import PY2 class CloudantIndexExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantIndexException ) as cm :              raise CloudantIndexException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantIndexException ) as cm :              raise CloudantIndexException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( CloudantIndexException ) as cm :              raise CloudantIndexException ( 101 )  self . assertEqual ( cm . exception . status_code , 101 )   @ attr ( db = [ <str> , <str> ] ) @ attr ( couchapi = 2 ) class IndexTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( IndexTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( IndexTests , self ) . tearDown ( )  def test_constructor_with_args ( self ) :          index = Index ( self . db , <str> , <str> , foo = { <str> : <str> } ) self . assertIsInstance ( index , Index ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) self . assertEqual ( index . type , <str> ) self . assertEqual ( index . definition , { <str> : { <str> : <str> } } )  def test_constructor_with_only_a_db ( self ) :          index = Index ( self . db ) self . assertIsInstance ( index , Index ) self . assertIsNone ( index . design_document_id ) self . assertIsNone ( index . name ) self . assertEqual ( index . type , <str> ) self . assertEqual ( index . definition , { } )  def test_retrieve_index_url ( self ) :          index = Index ( self . db ) self . assertEqual ( index . index_url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_index_to_dictionary ( self ) :          index = Index ( self . db , <str> , <str> , foo = { <str> : <str> } ) self . assertEqual ( index . as_a_dict ( ) , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : <str> } } } )  def test_index_as_a_dict_with_none_attributes ( self ) :          index = Index ( self . db ) self . assertEqual ( index . as_a_dict ( ) , { <str> : None , <str> : None , <str> : <str> , <str> : { } } )  def test_create_an_index_using_ddoc_index_name ( self ) :          index = Index ( self . db , <str> , <str> , fields = [ <str> , <str> ] ) index . create ( ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertIsInstance ( ddoc . get_view ( index . name ) , QueryIndexView ) self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertListEqual ( list ( ddoc [ <str> ] . keys ( ) ) , [ <str> ] ) view = ddoc [ <str> ] [ index . name ] self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( view [ <str> ] , <str> )   def test_create_an_index_without_ddoc_index_name ( self ) :          index = Index ( self . db , fields = [ <str> , <str> ] ) index . create ( ) self . assertIsNotNone ( index . design_document_id ) self . assertTrue ( index . design_document_id . startswith ( <str> ) ) self . assertIsNotNone ( index . name ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertIsInstance ( ddoc . get_view ( index . name ) , QueryIndexView ) self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertListEqual ( list ( ddoc [ <str> ] . keys ( ) ) , [ index . name ] ) view = ddoc [ <str> ] [ index . name ] self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( view [ <str> ] , <str> )   def test_create_an_index_with_empty_ddoc_index_name ( self ) :          index = Index ( self . db , <str> , <str> , fields = [ <str> , <str> ] ) index . create ( ) self . assertIsNotNone ( index . design_document_id ) self . assertTrue ( index . design_document_id . startswith ( <str> ) ) self . assertIsNotNone ( index . name ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertIsInstance ( ddoc . get_view ( index . name ) , QueryIndexView ) self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertListEqual ( list ( ddoc [ <str> ] . keys ( ) ) , [ index . name ] ) view = ddoc [ <str> ] [ index . name ] self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( view [ <str> ] , <str> )   def test_create_an_index_using_design_prefix ( self ) :          index = Index ( self . db , <str> , <str> , fields = [ <str> , <str> ] ) index . create ( ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertIsInstance ( ddoc . get_view ( index . name ) , QueryIndexView ) self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertListEqual ( list ( ddoc [ <str> ] . keys ( ) ) , [ index . name ] ) view = ddoc [ <str> ] [ index . name ] self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( view [ <str> ] [ <str> ] [ <str> ] , [ <str> , <str> ] ) self . assertEquals ( view [ <str> ] , <str> )   def test_create_uses_custom_encoder ( self ) :          self . set_up_client ( auto_connect = True , encoder = <str> ) database = self . client [ self . test_dbname ] index = Index ( database , <str> , <str> , fields = [ <str> , <str> ] ) with self . assertRaises ( TypeError ) :              index . create ( )   def test_create_fails_due_to_ddocid_validation ( self ) :          index = Index ( self . db , [ <str> ] , <str> , fields = [ <str> , <str> ] ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_create_fails_due_to_index_name_validation ( self ) :          index = Index ( self . db , <str> , [ <str> ] , fields = [ <str> , <str> ] ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_create_fails_due_to_def_validation ( self ) :          index = Index ( self . db , fields = [ <str> , <str> ] , selector = { } ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertTrue ( str ( err ) . endswith ( <str> ) )  def test_deleting_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertFalse ( ddoc . exists ( ) ) index = Index ( self . db , <str> , <str> , fields = [ <str> , <str> ] ) index . create ( ) self . assertTrue ( ddoc . exists ( ) ) index . delete ( ) self . assertFalse ( ddoc . exists ( ) )  def test_deleting_non_existing_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) index = Index ( self . db , <str> , <str> , fields = [ <str> , <str> ] ) self . assertFalse ( ddoc . exists ( ) ) with self . assertRaises ( requests . HTTPError ) as cm :              index . delete ( )  err = cm . exception self . assertEqual ( err . response . status_code , 404 )  def test_deleting_index_without_ddoc ( self ) :          ddoc = DesignDocument ( self . db , <str> ) index = Index ( self . db , None , <str> , fields = [ <str> , <str> ] ) self . assertFalse ( ddoc . exists ( ) ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . delete ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_deleting_index_without_index_name ( self ) :          ddoc = DesignDocument ( self . db , <str> ) index = Index ( self . db , <str> , fields = [ <str> , <str> ] ) self . assertFalse ( ddoc . exists ( ) ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . delete ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_index_via_query ( self ) :          index = Index ( self . db , <str> , <str> , fields = [ <str> ] ) index . create ( ) self . populate_db_with_documents ( 100 ) query = Query ( self . db ) resp = query ( fields = [ <str> , <str> ] , selector = { <str> : { <str> : 6 } } ) self . assertEqual ( resp [ <str> ] , [ { <str> : <str> , <str> : 6 } ] )  def test_index_usage_via_query ( self ) :          index = Index ( self . db , <str> , <str> , fields = [ <str> ] ) index . create ( ) self . populate_db_with_documents ( 100 ) result = self . db . get_query_result ( fields = [ <str> , <str> ] , selector = { <str> : { <str> : 6 } } , raw_result = True ) self . assertTrue ( str ( result [ <str> ] ) . startswith ( <str> ) )   @ attr ( db = <str> ) class TextIndexTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( TextIndexTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( TextIndexTests , self ) . tearDown ( )  def test_constructor_with_args ( self ) :          index = TextIndex ( self . db , <str> , <str> , foo = { <str> : <str> } ) self . assertIsInstance ( index , TextIndex ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) self . assertEqual ( index . type , <str> ) self . assertEqual ( index . definition , { <str> : { <str> : <str> } } )  def test_constructor_with_only_a_db ( self ) :          index = TextIndex ( self . db ) self . assertIsInstance ( index , TextIndex ) self . assertIsNone ( index . design_document_id ) self . assertIsNone ( index . name ) self . assertEqual ( index . type , <str> ) self . assertEqual ( index . definition , { } )  def test_create_a_search_index_no_kwargs ( self ) :          index = TextIndex ( self . db , <str> , <str> ) index . create ( ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) index = ddoc [ <str> ] [ <str> ] self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , { } ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , { } ) self . assertTrue ( index [ <str> ] [ <str> ] )   def test_create_a_search_index_with_kwargs ( self ) :          index = TextIndex ( self . db , <str> , <str> , fields = [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , selector = { } , default_field = { <str> : True , <str> : <str> } ) index . create ( ) self . assertEqual ( index . design_document_id , <str> ) self . assertEqual ( index . name , <str> ) with DesignDocument ( self . db , index . design_document_id ) as ddoc :              self . assertEquals ( ddoc [ <str> ] , index . design_document_id ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEquals ( ddoc [ <str> ] , <str> ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) self . assertEquals ( ddoc [ <str> ] , { } ) index = ddoc [ <str> ] [ <str> ] self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] [ <str> ] , <str> ) self . assertEquals ( index [ <str> ] [ <str> ] , [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] ) self . assertEquals ( index [ <str> ] [ <str> ] , { } ) self . assertTrue ( index [ <str> ] [ <str> ] [ <str> ] ) self . assertTrue ( index [ <str> ] [ <str> ] )   def test_create_a_search_index_invalid_argument ( self ) :          index = TextIndex ( self . db , <str> , <str> , foo = <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_create_a_search_index_invalid_fields_value ( self ) :          index = TextIndex ( self . db , <str> , <str> , fields = 5 ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> . format ( <str> if PY2 else <str> ) )  def test_create_a_search_index_invalid_default_field_value ( self ) :          index = TextIndex ( self . db , <str> , <str> , default_field = 5 ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> . format ( <str> if PY2 else <str> ) )  def test_create_a_search_index_invalid_selector_value ( self ) :          index = TextIndex ( self . db , <str> , <str> , selector = 5 ) with self . assertRaises ( CloudantArgumentError ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> . format ( <str> if PY2 else <str> ) )  def test_search_index_via_query ( self ) :          index = TextIndex ( self . db , <str> , <str> ) index . create ( ) self . populate_db_with_documents ( 100 ) with Document ( self . db , <str> ) as doc :              doc [ <str> ] = <str>  query = Query ( self . db ) resp = query ( fields = [ <str> , <str> ] , selector = { <str> : <str> } ) self . assertEqual ( resp [ <str> ] , [ { <str> : <str> , <str> : 6 } ] )   class SpecialIndexTests ( unittest . TestCase ) :      def setUp ( self ) :          self . db = mock . Mock ( ) self . db . r_session = <str> self . db . database_url = <str>  def test_constructor ( self ) :          index = SpecialIndex ( self . db , fields = [ { <str> : <str> } ] ) self . assertIsInstance ( index , SpecialIndex ) self . assertEqual ( index . as_a_dict ( ) , { <str> : None , <str> : <str> , <str> : <str> , <str> : { <str> : [ { <str> : <str> } ] } } )  def test_create_disabled ( self ) :          index = SpecialIndex ( self . db , fields = [ { <str> : <str> } ] ) with self . assertRaises ( CloudantIndexException ) as cm :              index . create ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_delete_disabled ( self ) :          index = SpecialIndex ( self . db , fields = [ { <str> : <str> } ] ) with self . assertRaises ( CloudantIndexException ) as cm :              index . delete ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )   if __name__ == <str> :      unittest . main ( )   