import json import os import unittest import mock import requests from cloudant . _common_util import response_to_json_dict from cloudant . design_document import DesignDocument from cloudant . document import Document from cloudant . error import CloudantArgumentError , CloudantDesignDocumentException from cloudant . view import View , QueryIndexView from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase , skip_if_iam class CloudantDesignDocumentExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantDesignDocumentException ) as cm :              raise CloudantDesignDocumentException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantDesignDocumentException ) as cm :              raise CloudantDesignDocumentException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_without_args ( self ) :          with self . assertRaises ( CloudantDesignDocumentException ) as cm :              raise CloudantDesignDocumentException ( 104 )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( CloudantDesignDocumentException ) as cm :              raise CloudantDesignDocumentException ( 104 , <str> )  self . assertEqual ( cm . exception . status_code , 104 )   @ attr ( db = [ <str> , <str> ] ) class DesignDocumentTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( DesignDocumentTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( DesignDocumentTests , self ) . tearDown ( )  def test_constructor_with_docid ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertIsInstance ( ddoc , DesignDocument ) self . assertEqual ( ddoc . get ( <str> ) , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_constructor_with_design_docid ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertIsInstance ( ddoc , DesignDocument ) self . assertEqual ( ddoc . get ( <str> ) , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_constructor_without_docid ( self ) :          ddoc = DesignDocument ( self . db ) self . assertIsInstance ( ddoc , DesignDocument ) self . assertIsNone ( ddoc . get ( <str> ) ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_create_design_document_with_docid_encoded_url ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertFalse ( ddoc . exists ( ) ) self . assertIsNone ( ddoc . get ( <str> ) ) ddoc . create ( ) self . assertTrue ( ddoc . exists ( ) ) self . assertTrue ( ddoc . get ( <str> ) . startswith ( <str> ) )  def test_fetch_existing_design_document_with_docid_encoded_url ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . create ( ) new_ddoc = DesignDocument ( self . db , <str> ) new_ddoc . fetch ( ) self . assertEqual ( new_ddoc , ddoc )  def test_update_design_document_with_encoded_url ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) remote_ddoc = DesignDocument ( self . db , <str> ) remote_ddoc . fetch ( ) self . assertEqual ( remote_ddoc , ddoc )  def test_delete_design_document_success_with_encoded_url ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . create ( ) self . assertTrue ( ddoc . exists ( ) ) ddoc . delete ( ) self . assertFalse ( ddoc . exists ( ) ) self . assertEqual ( ddoc , { <str> : <str> } )  def test_add_a_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } ) ddoc . add_view ( <str> , <str> ) self . assertListEqual ( list ( ddoc . get ( <str> ) . keys ( ) ) , [ <str> ] ) self . assertIsInstance ( ddoc . get ( <str> ) [ <str> ] , View ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> } )  def test_adding_existing_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) try :              ddoc . add_view ( <str> , <str> ) self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> )   def test_adding_query_index_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = <str> with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . add_view ( <str> , { <str> : <str> } )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> )  def test_update_a_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> } ) ddoc . update_view ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> } )  def test_update_non_existing_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) try :              ddoc . update_view ( <str> , <str> ) self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> )   def test_update_query_index_view ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } } self . db . create_document ( data ) ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . update_view ( <str> , <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_delete_a_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> } ) ddoc . delete_view ( <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_delete_a_query_index_view ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } } self . db . create_document ( data ) ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . delete_view ( <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_fetch_map_reduce ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> view_reduce = <str> ddoc . add_view ( <str> , view_map , view_reduce ) ddoc . add_view ( <str> , view_map ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , ddoc ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : { } , <str> : { } , <str> : { } , <str> : { <str> : { <str> : view_map , <str> : view_reduce } , <str> : { <str> : view_map } } } ) self . assertIsInstance ( ddoc_remote [ <str> ] [ <str> ] , View ) self . assertIsInstance ( ddoc_remote [ <str> ] [ <str> ] , View )  @ attr ( db = <str> ) def test_fetch_dbcopy ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> view_reduce = <str> db_copy = <str> . format ( self . db . database_name ) ddoc . add_view ( <str> , view_map , view_reduce , dbcopy = db_copy ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( db_copy , ddoc [ <str> ] [ <str> ] . pop ( <str> ) ) self . assertEqual ( { <str> : { <str> : { <str> : db_copy } } } , ddoc_remote . pop ( <str> ) ) self . assertEqual ( ddoc_remote , ddoc ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : { } , <str> : { } , <str> : { } , <str> : { <str> : { <str> : view_map , <str> : view_reduce } } } ) self . assertIsInstance ( ddoc_remote [ <str> ] [ <str> ] , View )  def test_fetch_no_views ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) self . assertEqual ( set ( ddoc_remote . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc_remote [ <str> ] , <str> ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( ddoc_remote . views , { } )  def test_fetch_query_views ( self ) :          data = { <str> : <str> , <str> : { } , <str> : { } , <str> : { } , <str> : <str> , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } } doc = self . db . create_document ( data ) self . assertIsInstance ( doc , Document ) data [ <str> ] = doc [ <str> ] ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) self . assertIsInstance ( ddoc , DesignDocument ) self . assertEqual ( ddoc , data ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] , QueryIndexView )  def test_fetch_text_indexes ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { } , <str> : { } , <str> : { <str> : { <str> : { <str> : True , <str> : [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , <str> : { <str> : True , <str> : <str> } , <str> : <str> , <str> : { } } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } } } doc = self . db . create_document ( data ) self . assertIsInstance ( doc , Document ) ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) self . assertIsInstance ( ddoc , DesignDocument ) data [ <str> ] = doc [ <str> ] data [ <str> ] = dict ( ) self . assertEqual ( ddoc , data ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] , dict )  def test_fetch_text_indexes_and_query_views ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { } , <str> : { } , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } , <str> : { <str> : { <str> : { <str> : True , <str> : [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , <str> : { <str> : True , <str> : <str> } , <str> : <str> , <str> : { } } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } } } doc = self . db . create_document ( data ) self . assertIsInstance ( doc , Document ) data [ <str> ] = doc [ <str> ] ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) self . assertIsInstance ( ddoc , DesignDocument ) self . assertEqual ( ddoc , data ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] , dict ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] , QueryIndexView )  def test_text_index_save_fails_when_lang_is_not_query ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] [ <str> ] = { <str> : { <str> : True , <str> : [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , <str> : { <str> : True , <str> : <str> } , <str> : <str> , <str> : { } } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } self . assertIsInstance ( ddoc [ <str> ] [ <str> ] [ <str> ] , dict ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_text_index_save_fails_with_existing_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) search_index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , search_index ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] [ <str> ] , str ) ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) ddoc_remote [ <str> ] [ <str> ] = { <str> : { <str> : True , <str> : [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , <str> : { <str> : True , <str> : <str> } , <str> : <str> , <str> : { } } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } self . assertIsInstance ( ddoc_remote [ <str> ] [ <str> ] [ <str> ] , dict ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc_remote . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_mr_view_save_fails_when_lang_is_query ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> view_reduce = <str> db_copy = <str> . format ( self . db . database_name ) ddoc . add_view ( <str> , view_map , view_reduce ) ddoc [ <str> ] = <str> with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_mr_view_save_succeeds ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> view_reduce = <str> db_copy = <str> . format ( self . db . database_name ) ddoc . add_view ( <str> , view_map , view_reduce ) ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) )  def test_query_view_save_fails_when_lang_is_not_query ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } } self . db . create_document ( data ) ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc [ <str> ] = <str> ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              del ddoc [ <str> ] ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_query_view_save_succeeds ( self ) :          data = { <str> : <str> , <str> : <str> , <str> : { <str> : { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } } } self . db . create_document ( data ) ddoc = DesignDocument ( self . db , <str> ) ddoc . fetch ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) )  def test_save_with_no_views ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) self . assertEqual ( set ( ddoc . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc [ <str> ] , <str> ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc . views , { } ) resp = self . client . r_session . get ( ddoc . document_url ) raw_ddoc = response_to_json_dict ( resp ) self . assertEqual ( set ( raw_ddoc . keys ( ) ) , { <str> , <str> } ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] )  def test_setting_id ( self ) :          ddoc = DesignDocument ( self . db ) ddoc [ <str> ] = <str> self . assertEqual ( ddoc [ <str> ] , <str> ) del ddoc [ <str> ] self . assertIsNone ( ddoc . get ( <str> ) ) ddoc [ <str> ] = <str> self . assertEqual ( ddoc [ <str> ] , <str> )  def test_iterating_over_views ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> ddoc . add_view ( <str> , view_map ) ddoc . add_view ( <str> , view_map ) ddoc . add_view ( <str> , view_map ) view_names = [ ] for view_name , view in ddoc . iterviews ( ) :              self . assertIsInstance ( view , View ) view_names . append ( view_name )  self . assertTrue ( all ( x in view_names for x in [ <str> , <str> , <str> ] ) )  def test_list_views ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> ddoc . add_view ( <str> , view_map ) ddoc . add_view ( <str> , view_map ) ddoc . add_view ( <str> , view_map ) self . assertTrue ( all ( x in ddoc . list_views ( ) for x in [ <str> , <str> , <str> ] ) )  def test_get_view ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view_map = <str> view_reduce = <str> ddoc . add_view ( <str> , view_map ) ddoc . add_view ( <str> , view_map , view_reduce ) ddoc . add_view ( <str> , view_map ) self . assertIsInstance ( ddoc . get_view ( <str> ) , View ) self . assertEqual ( ddoc . get_view ( <str> ) , { <str> : <str> , <str> : <str> } )  def test_get_info ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) info = ddoc_remote . info ( ) info [ <str> ] . pop ( <str> ) info [ <str> ] . pop ( <str> ) if <str> in info [ <str> ] :              info [ <str> ] . pop ( <str> )  if <str> in info [ <str> ] :              info [ <str> ] . pop ( <str> )  name = <str> self . assertEqual ( info , { <str> : { <str> : 0 , <str> : 0 , <str> : <str> , <str> : 0 , <str> : False , <str> : False , <str> : False , <str> : 0 } , <str> : name } )  def test_get_info_raises_httperror ( self ) :          resp = requests . Response ( ) resp . status_code = 400 self . client . r_session . get = mock . Mock ( return_value = resp ) ddoc = DesignDocument ( self . db , <str> ) with self . assertRaises ( requests . HTTPError ) as cm :              ddoc . info ( )  err = cm . exception self . assertEqual ( err . response . status_code , 400 ) self . client . r_session . get . assert_called_with ( <str> . join ( [ ddoc . document_url , <str> ] ) )  @ attr ( db = <str> ) def test_get_search_info ( self ) :          self . populate_db_with_documents ( 100 ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) search_info = ddoc_remote . search_info ( <str> ) self . assertEqual ( search_info [ <str> ] , <str> , <str> ) search_index_metadata = search_info [ <str> ] self . assertIsNotNone ( search_index_metadata ) self . assertEquals ( search_index_metadata [ <str> ] , 0 , <str> ) self . assertTrue ( search_index_metadata [ <str> ] <= 100 , <str> ) self . assertEquals ( search_index_metadata [ <str> ] , 0 , <str> ) self . assertTrue ( search_index_metadata [ <str> ] <= 101 , <str> ) self . assertTrue ( search_index_metadata [ <str> ] > 0 , <str> )  @ attr ( db = <str> ) def test_get_search_disk_size ( self ) :          self . populate_db_with_documents ( 100 ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) ddoc_remote . search_info ( <str> ) search_disk_size = ddoc_remote . search_disk_size ( <str> ) self . assertEqual ( sorted ( search_disk_size . keys ( ) ) , [ <str> , <str> ] , <str> ) self . assertEqual ( search_disk_size [ <str> ] , <str> , <str> ) self . assertEqual ( sorted ( search_disk_size [ <str> ] . keys ( ) ) , [ <str> ] , <str> ) self . assertTrue ( isinstance ( search_disk_size [ <str> ] [ <str> ] , int ) , <str> ) self . assertTrue ( search_disk_size [ <str> ] [ <str> ] > 0 , <str> )  @ attr ( db = <str> ) def test_get_search_info_raises_httperror ( self ) :          search_index = <str> resp = requests . Response ( ) resp . status_code = 400 self . client . r_session . get = mock . Mock ( return_value = resp ) ddoc = DesignDocument ( self . db , <str> ) with self . assertRaises ( requests . HTTPError ) as cm :              ddoc . search_info ( search_index )  err = cm . exception self . assertEqual ( err . response . status_code , 400 ) self . client . r_session . get . assert_called_with ( <str> . join ( [ ddoc . document_url , <str> , search_index ] ) )  def test_add_a_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } ) ddoc . add_search_index ( <str> , <str> <str> ) self . assertListEqual ( list ( ddoc . get ( <str> ) . keys ( ) ) , [ <str> ] ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> <str> } )  def test_add_a_search_index_with_analyzer ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } ) ddoc . add_search_index ( <str> , <str> <str> , { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } ) self . assertListEqual ( list ( ddoc . get ( <str> ) . keys ( ) ) , [ <str> ] ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } )  def test_adding_existing_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> <str> , ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . add_search_index ( <str> , <str> <str> <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_update_a_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> } ) ddoc . update_search_index ( <str> , <str> <str> , ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> <str> <str> } )  def test_update_a_search_index_with_analyzer ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> , <str> : <str> } ) ddoc . update_search_index ( <str> , <str> <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> <str> <str> , <str> : <str> } )  def test_update_non_existing_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . update_search_index ( <str> , <str> <str> <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_delete_a_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_search_index ( <str> , <str> <str> <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , { <str> : <str> <str> <str> } ) ddoc . delete_index ( <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_fetch_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) search_index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , search_index ) ddoc . add_search_index ( <str> , search_index , <str> ) ddoc . add_search_index ( <str> , search_index , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , ddoc ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : { <str> : { <str> : search_index } , <str> : { <str> : search_index , <str> : <str> } , <str> : { <str> : search_index , <str> : <str> } } , <str> : { } , <str> : { } , <str> : { } } )  def test_fetch_no_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) self . assertEqual ( set ( ddoc_remote . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc_remote [ <str> ] , <str> ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( ddoc_remote . indexes , { } )  def test_search_index_save_fails_when_lang_is_query ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = <str> ddoc [ <str> ] [ <str> ] = { <str> : <str> <str> <str> , <str> : <str> } self . assertIsInstance ( ddoc [ <str> ] [ <str> ] [ <str> ] , str ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_search_index_save_fails_with_existing_text_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = <str> ddoc [ <str> ] [ <str> ] = { <str> : { <str> : True , <str> : [ { <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ] , <str> : { <str> : True , <str> : <str> } , <str> : <str> , <str> : { } } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } } ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) search_index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , search_index ) self . assertIsInstance ( ddoc [ <str> ] [ <str> ] [ <str> ] , str ) with self . assertRaises ( CloudantDesignDocumentException ) as cm :              ddoc . save ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_search_index_save_succeeds ( self ) :          ddoc = DesignDocument ( self . db , <str> ) search_index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , search_index ) ddoc . save ( ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) )  def test_save_with_no_search_indexes ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) self . assertEqual ( set ( ddoc . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc [ <str> ] , <str> ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) resp = self . client . r_session . get ( ddoc . document_url ) raw_ddoc = response_to_json_dict ( resp ) self . assertEqual ( set ( raw_ddoc . keys ( ) ) , { <str> , <str> } ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] )  def test_iterating_over_search_indexes ( self ) :          ddoc = DesignDocument ( self . db , <str> ) search_index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , search_index ) ddoc . add_search_index ( <str> , search_index ) ddoc . add_search_index ( <str> , search_index ) search_index_names = [ ] for search_index_name , search_index in ddoc . iterindexes ( ) :              search_index_names . append ( search_index_name )  self . assertTrue ( all ( x in search_index_names for x in [ <str> , <str> , <str> ] ) )  def test_list_search_indexes ( self ) :          ddoc = DesignDocument ( self . db , <str> ) index = <str> <str> <str> ddoc . add_search_index ( <str> , index ) ddoc . add_search_index ( <str> , index ) ddoc . add_search_index ( <str> , index ) self . assertTrue ( all ( x in ddoc . list_indexes ( ) for x in [ <str> , <str> , <str> ] ) )  def test_get_search_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) index = ( <str> <str> <str> ) ddoc . add_search_index ( <str> , index ) ddoc . add_search_index ( <str> , index ) ddoc . add_search_index ( <str> , index ) self . assertEqual ( ddoc . get_index ( <str> ) , { <str> : <str> <str> <str> } )  @ skip_if_iam def test_rewrite_rule ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : { } } ] self . assertIsInstance ( ddoc . rewrites , list ) self . assertIsInstance ( ddoc . rewrites [ 0 ] , dict ) ddoc . save ( ) doc = Document ( self . db , <str> ) doc . save ( ) resp = self . client . r_session . get ( <str> . join ( [ ddoc . document_url , <str> ] ) ) self . assertEquals ( response_to_json_dict ( resp ) , { <str> : <str> , <str> : doc [ <str> ] } )  def test_add_a_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } ) ddoc . add_list_function ( <str> , <str> <str> <str> <str> ) self . assertListEqual ( list ( ddoc . get ( <str> ) . keys ( ) ) , [ <str> ] ) self . assertEqual ( ddoc . get ( <str> ) , { <str> : <str> <str> <str> <str> } )  def test_adding_existing_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_list_function ( <str> , <str> <str> <str> <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . add_list_function ( <str> , <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_update_a_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_list_function ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> ) ddoc . update_list_function ( <str> , <str> <str> <str> <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> <str> <str> <str> )  def test_update_non_existing_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . update_list_function ( <str> , <str> <str> <str> <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_delete_a_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_list_function ( <str> , <str> <str> <str> <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> <str> <str> <str> ) ddoc . delete_list_function ( <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_fetch_list_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) list_func = ( <str> <str> <str> <str> ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , ddoc ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : { <str> : list_func , <str> : list_func , <str> : list_func } , <str> : { } , <str> : { } , <str> : { } } )  def test_fetch_no_list_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) self . assertEqual ( set ( ddoc_remote . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc_remote [ <str> ] , <str> ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( ddoc_remote . lists , { } )  def test_save_with_no_list_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) self . assertEqual ( set ( ddoc . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc [ <str> ] , <str> ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) resp = self . client . r_session . get ( ddoc . document_url ) raw_ddoc = response_to_json_dict ( resp ) self . assertEqual ( set ( raw_ddoc . keys ( ) ) , { <str> , <str> } ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] )  def test_iterating_over_list_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) list_func = ( <str> <str> <str> <str> ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) list_names = [ ] for list_name , list_func in ddoc . iterlists ( ) :              list_names . append ( list_name )  self . assertTrue ( all ( x in list_names for x in [ <str> , <str> , <str> ] ) )  def test_listing_list_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) list_func = ( <str> <str> <str> <str> ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) self . assertTrue ( all ( x in ddoc . list_list_functions ( ) for x in [ <str> , <str> , <str> ] ) )  def test_get_list_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) list_func = ( <str> <str> <str> <str> ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) ddoc . add_list_function ( <str> , list_func ) self . assertEqual ( ddoc . get_list_function ( <str> ) , <str> <str> <str> <str> )  @ attr ( db = <str> ) def test_geospatial_index ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = { <str> : { <str> : <str> <str> <str> } } ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : ddoc [ <str> ] , <str> : { } , <str> : { } , <str> : { } , <str> : { } } ) geodoc = Document ( self . db , <str> ) geodoc [ <str> ] = <str> geodoc [ <str> ] = { <str> : <str> , <str> : [ - 71.1 , 42.3 ] } geodoc . save ( ) geo_result = self . client . r_session . get ( <str> . join ( [ ddoc_remote . document_url , <str> , <str> ] ) ) . json ( ) self . assertIsNotNone ( geo_result [ <str> ] ) geo_result . pop ( <str> ) rows = geo_result . pop ( <str> ) self . assertEqual ( 1 , len ( rows ) , <str> ) row = rows [ 0 ] row . pop ( <str> ) self . assertEqual ( row , { <str> : <str> , <str> : { <str> : <str> , <str> : [ - 71.1 , 42.3 ] } } )  def test_add_a_show_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } ) ddoc . add_show_function ( <str> , <str> <str> <str> <str> ) self . assertListEqual ( list ( ddoc . get ( <str> ) . keys ( ) ) , [ <str> ] ) self . assertEqual ( ddoc . get ( <str> ) , { <str> : <str> <str> <str> <str> } )  def test_adding_existing_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_show_function ( <str> , <str> <str> <str> <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . add_show_function ( <str> , <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_update_a_show_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_show_function ( <str> , <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> ) ddoc . update_show_function ( <str> , <str> <str> <str> <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> <str> <str> <str> )  def test_update_non_existing_show_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              ddoc . update_show_function ( <str> , <str> <str> <str> <str> )  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_delete_a_show_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . add_show_function ( <str> , <str> <str> <str> <str> ) self . assertEqual ( ddoc . get ( <str> ) [ <str> ] , <str> <str> <str> <str> ) ddoc . delete_show_function ( <str> ) self . assertEqual ( ddoc . get ( <str> ) , { } )  def test_fetch_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) show_func = ( <str> <str> <str> <str> ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) self . assertNotEqual ( ddoc_remote , ddoc ) ddoc_remote . fetch ( ) self . assertEqual ( ddoc_remote , ddoc ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote , { <str> : <str> , <str> : ddoc [ <str> ] , <str> : { } , <str> : { <str> : show_func , <str> : show_func , <str> : show_func } , <str> : { } , <str> : { } } )  def test_fetch_no_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) ddoc_remote = DesignDocument ( self . db , <str> ) ddoc_remote . fetch ( ) self . assertEqual ( set ( ddoc_remote . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc_remote [ <str> ] , <str> ) self . assertTrue ( ddoc_remote [ <str> ] . startswith ( <str> ) ) self . assertEqual ( ddoc_remote [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( ddoc_remote . shows , { } )  def test_save_with_no_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc . save ( ) self . assertEqual ( set ( ddoc . keys ( ) ) , { <str> , <str> , <str> , <str> , <str> , <str> } ) self . assertEqual ( ddoc [ <str> ] , <str> ) self . assertTrue ( ddoc [ <str> ] . startswith ( <str> ) ) resp = self . client . r_session . get ( ddoc . document_url ) raw_ddoc = response_to_json_dict ( resp ) self . assertEqual ( set ( raw_ddoc . keys ( ) ) , { <str> , <str> } ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] ) self . assertEqual ( raw_ddoc [ <str> ] , ddoc [ <str> ] )  def test_iterating_over_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) show_func = ( <str> <str> <str> <str> ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) show_names = [ ] for show_name , show_func in ddoc . itershows ( ) :              show_names . append ( show_name )  self . assertTrue ( all ( x in show_names for x in [ <str> , <str> , <str> ] ) )  def test_listing_show_functions ( self ) :          ddoc = DesignDocument ( self . db , <str> ) show_func = ( <str> <str> <str> <str> ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) self . assertTrue ( all ( x in ddoc . list_show_functions ( ) for x in [ <str> , <str> , <str> ] ) )  def test_get_show_function ( self ) :          ddoc = DesignDocument ( self . db , <str> ) show_func = ( <str> <str> <str> <str> ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) ddoc . add_show_function ( <str> , show_func ) self . assertEqual ( ddoc . get_show_function ( <str> ) , <str> <str> <str> <str> )  def test_update_validator ( self ) :          ddoc = DesignDocument ( self . db , <str> ) ddoc [ <str> ] = ( <str> <str> <str> ) ddoc . save ( ) headers = { <str> : <str> } resp = self . client . r_session . post ( self . db . database_url , headers = headers , data = json . dumps ( { <str> : <str> } ) ) self . assertEqual ( response_to_json_dict ( resp ) , { <str> : <str> , <str> : <str> } )   if __name__ == <str> :      unittest . main ( )   