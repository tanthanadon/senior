import unittest from cloudant . error import CloudantArgumentError from cloudant . _common_util import python_to_couch from tests . unit . _test_util import LONG_NUMBER class PythonToCouchTests ( unittest . TestCase ) :      def test_valid_descending ( self ) :          self . assertEqual ( python_to_couch ( { <str> : True } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : False } ) , { <str> : <str> } )  def test_valid_endkey ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 10 } ) , { <str> : 10 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : [ <str> , 10 ] } ) , { <str> : <str> } )  def test_valid_endkey_docid ( self ) :          self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } )  def test_valid_group ( self ) :          self . assertEqual ( python_to_couch ( { <str> : True } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : False } ) , { <str> : <str> } )  def test_valid_group_level ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 100 } ) , { <str> : 100 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : None } ) , { <str> : None } )  def test_valid_include_docs ( self ) :          self . assertEqual ( python_to_couch ( { <str> : True } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : False } ) , { <str> : <str> } )  def test_valid_inclusive_end ( self ) :          self . assertEqual ( python_to_couch ( { <str> : True } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : False } ) , { <str> : <str> } )  def test_valid_key ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 10 } ) , { <str> : 10 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : [ <str> , 10 ] } ) , { <str> : <str> } )  def test_valid_keys ( self ) :          self . assertEqual ( python_to_couch ( { <str> : [ 100 , 200 ] } ) , { <str> : [ 100 , 200 ] } ) LONG_NUM_KEY = 92233720368547758071 self . assertEqual ( python_to_couch ( { <str> : [ LONG_NUMBER , LONG_NUM_KEY ] } ) , { <str> : [ LONG_NUMBER , LONG_NUM_KEY ] } ) self . assertEqual ( python_to_couch ( { <str> : [ <str> , <str> ] } ) , { <str> : [ <str> , <str> ] } ) self . assertEqual ( python_to_couch ( { <str> : [ [ <str> , 100 ] , [ <str> , 200 ] ] } ) , { <str> : [ [ <str> , 100 ] , [ <str> , 200 ] ] } )  def test_valid_limit ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 100 } ) , { <str> : 100 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : None } ) , { <str> : None } )  def test_valid_reduce ( self ) :          self . assertEqual ( python_to_couch ( { <str> : True } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : False } ) , { <str> : <str> } )  def test_valid_skip ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 100 } ) , { <str> : 100 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : None } ) , { <str> : None } )  def test_valid_stale ( self ) :          self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } )  def test_valid_startkey ( self ) :          self . assertEqual ( python_to_couch ( { <str> : 10 } ) , { <str> : 10 } ) self . assertEqual ( python_to_couch ( { <str> : LONG_NUMBER } ) , { <str> : LONG_NUMBER } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : [ <str> , 10 ] } ) , { <str> : <str> } )  def test_valid_startkey_docid ( self ) :          self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } )  def test_valid_update ( self ) :          self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } ) self . assertEqual ( python_to_couch ( { <str> : <str> } ) , { <str> : <str> } )  def test_invalid_argument ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : <str> } )  self . assertEqual ( str ( cm . exception ) , <str> )  def test_invalid_descending ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_endkey ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_endkey_docid ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_group ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_group_level ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_include_docs ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_inclusive_end ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_key ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_keys_not_list ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : <str> } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_keys_invalid_key ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : [ <str> , True , <str> ] } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_limit ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_reduce ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_skip ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_stale ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) ) msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : <str> } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_startkey ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : True } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )  def test_invalid_startkey_docid ( self ) :          msg = <str> with self . assertRaises ( CloudantArgumentError ) as cm :              python_to_couch ( { <str> : 10 } )  self . assertTrue ( str ( cm . exception ) . startswith ( msg ) )   if __name__ == <str> :      unittest . main ( )   