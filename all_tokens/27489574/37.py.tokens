from cloudant . design_document import DesignDocument from cloudant . index import Index , SpecialIndex from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase @ attr ( db = [ <str> ] ) class DatabasePartitionTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( DatabasePartitionTests , self ) . setUp ( ) self . db_set_up ( partitioned = True )  def tearDown ( self ) :          self . db_tear_down ( ) super ( DatabasePartitionTests , self ) . tearDown ( )  def test_is_partitioned_database ( self ) :          self . assertTrue ( self . db . metadata ( ) [ <str> ] [ <str> ] )  def test_create_partitioned_design_document ( self ) :          ddoc_id = <str> ddoc = DesignDocument ( self . db , ddoc_id , partitioned = True ) ddoc . save ( ) r = self . db . r_session . get ( ddoc . document_url ) r . raise_for_status ( ) self . assertTrue ( r . json ( ) [ <str> ] [ <str> ] )  def test_partitioned_all_docs ( self ) :          for partition_key in self . populate_db_with_partitioned_documents ( 5 , 25 ) :              docs = self . db . partitioned_all_docs ( partition_key ) self . assertEquals ( len ( docs [ <str> ] ) , 25 ) for doc in docs [ <str> ] :                  self . assertTrue ( doc [ <str> ] . startswith ( partition_key + <str> ) )    def test_partition_metadata ( self ) :          for partition_key in self . populate_db_with_partitioned_documents ( 5 , 25 ) :              meta = self . db . partition_metadata ( partition_key ) self . assertEquals ( meta [ <str> ] , partition_key ) self . assertEquals ( meta [ <str> ] , 25 )   def test_partitioned_search ( self ) :          ddoc = DesignDocument ( self . db , <str> , partitioned = True ) ddoc . add_search_index ( <str> , <str> ) ddoc . save ( ) for partition_key in self . populate_db_with_partitioned_documents ( 2 , 10 ) :              results = self . db . get_partitioned_search_result ( partition_key , ddoc [ <str> ] , <str> , query = <str> ) i = 0 for result in results [ <str> ] :                  print ( result ) self . assertTrue ( result [ <str> ] . startswith ( partition_key + <str> ) ) i += 1  self . assertEquals ( i , 10 )   def test_get_partitioned_index ( self ) :          index_name = <str> self . db . create_query_index ( index_name = index_name , fields = [ <str> ] ) results = self . db . get_query_indexes ( ) self . assertEquals ( len ( results ) , 2 ) index_all_docs = results [ 0 ] self . assertEquals ( index_all_docs . name , <str> ) self . assertEquals ( type ( index_all_docs ) , SpecialIndex ) self . assertFalse ( index_all_docs . partitioned ) index_partitioned = results [ 1 ] self . assertEquals ( index_partitioned . name , index_name ) self . assertEquals ( type ( index_partitioned ) , Index ) self . assertTrue ( index_partitioned . partitioned )  def test_partitioned_query ( self ) :          self . db . create_query_index ( fields = [ <str> ] ) for partition_key in self . populate_db_with_partitioned_documents ( 2 , 10 ) :              results = self . db . get_partitioned_query_result ( partition_key , selector = { <str> : { <str> : <str> } } ) i = 0 for result in results :                  self . assertTrue ( result [ <str> ] . startswith ( partition_key + <str> ) ) i += 1  self . assertEquals ( i , 10 )   def test_partitioned_view ( self ) :          ddoc = DesignDocument ( self . db , <str> , partitioned = True ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) for partition_key in self . populate_db_with_partitioned_documents ( 2 , 10 ) :              results = self . db . get_partitioned_view_result ( partition_key , ddoc [ <str> ] , <str> ) i = 0 for result in results :                  self . assertTrue ( result [ <str> ] . startswith ( partition_key + <str> ) ) i += 1  self . assertEquals ( i , 10 )     