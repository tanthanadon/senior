import os import unittest from time import sleep from cloudant . error import CloudantArgumentError , CloudantFeedException from cloudant . feed import InfiniteFeed , Feed from nose . plugins . attrib import attr from requests import Session from . unit_t_db_base import UnitTestDbBase class MethodCallCount ( object ) :      def __init__ ( self , meth_ref ) :          self . _ref = meth_ref self . called_count = 0  def __call__ ( self ) :          self . called_count += 1 self . _ref ( )   class CloudantFeedExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantFeedException ) as cm :              raise CloudantFeedException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantFeedException ) as cm :              raise CloudantFeedException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( CloudantFeedException ) as cm :              raise CloudantFeedException ( 101 )  self . assertEqual ( cm . exception . status_code , 101 )   @ attr ( db = [ <str> , <str> ] ) class InfiniteFeedTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( InfiniteFeedTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( InfiniteFeedTests , self ) . tearDown ( )  def test_constructor_no_feed_option ( self ) :          feed = InfiniteFeed ( self . db , chunk_size = 1 , timeout = 100 ) self . assertEqual ( feed . _url , <str> . join ( [ self . db . database_url , <str> ] ) ) self . assertIsInstance ( feed . _r_session , Session ) self . assertFalse ( feed . _raw_data ) self . assertDictEqual ( feed . _options , { <str> : <str> , <str> : 100 } ) self . assertEqual ( feed . _chunk_size , 1 )  def test_constructor_with_feed_option ( self ) :          feed = InfiniteFeed ( self . db , chunk_size = 1 , timeout = 100 , feed = <str> ) self . assertEqual ( feed . _url , <str> . join ( [ self . db . database_url , <str> ] ) ) self . assertIsInstance ( feed . _r_session , Session ) self . assertFalse ( feed . _raw_data ) self . assertDictEqual ( feed . _options , { <str> : <str> , <str> : 100 } ) self . assertEqual ( feed . _chunk_size , 1 )  def test_constructor_with_invalid_feed_option ( self ) :          feed = InfiniteFeed ( self . db , feed = <str> ) with self . assertRaises ( CloudantArgumentError ) as cm :              invalid_feed = [ x for x in feed ]  self . assertEqual ( str ( cm . exception ) , <str> )  @ attr ( db = <str> ) def test_invalid_source_couchdb ( self ) :          with self . assertRaises ( CloudantFeedException ) as cm :              invalid_feed = [ x for x in InfiniteFeed ( self . client ) ]  self . assertEqual ( str ( cm . exception ) , <str> )  @ unittest . skipIf ( os . environ . get ( <str> ) , <str> ) @ attr ( db = <str> ) def test_constructor_db_updates ( self ) :          feed = InfiniteFeed ( self . client , chunk_size = 1 , timeout = 100 , feed = <str> ) self . assertEqual ( feed . _url , <str> . join ( [ self . client . server_url , <str> ] ) ) self . assertIsInstance ( feed . _r_session , Session ) self . assertFalse ( feed . _raw_data ) self . assertDictEqual ( feed . _options , { <str> : <str> , <str> : 100 } ) self . assertEqual ( feed . _chunk_size , 1 )  def test_infinite_feed ( self ) :          self . populate_db_with_documents ( ) feed = InfiniteFeed ( self . db , timeout = 100 ) feed . _start = MethodCallCount ( feed . _start ) changes = list ( ) for change in feed :              self . assertSetEqual ( set ( change . keys ( ) ) , set ( [ <str> , <str> , <str> ] ) ) changes . append ( change ) if len ( changes ) in ( 100 , 200 ) :                  sleep ( 1 ) self . populate_db_with_documents ( off_set = len ( changes ) )  elif len ( changes ) == 300 :                  feed . stop ( )   expected = set ( [ <str> . format ( i ) for i in range ( 300 ) ] ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , expected ) self . assertIsNone ( feed . last_seq ) normal = Feed ( self . db ) self . assertSetEqual ( set ( [ x [ <str> ] for x in changes ] ) , set ( [ n [ <str> ] for n in normal ] ) ) self . assertEqual ( feed . _start . called_count , 3 )  @ unittest . skipIf ( os . environ . get ( <str> ) , <str> ) @ attr ( db = <str> ) def test_infinite_db_updates_feed ( self ) :          feed = InfiniteFeed ( self . client , since = <str> , timeout = 100 ) feed . _start = MethodCallCount ( feed . _start ) new_dbs = list ( ) try :              new_dbs . append ( self . client . create_database ( self . dbname ( ) ) ) for change in feed :                  self . assertTrue ( all ( x in change for x in ( <str> , <str> ) ) ) new_dbs . append ( self . client . create_database ( self . dbname ( ) ) ) if feed . _start . called_count >= 3 and len ( new_dbs ) >= 3 :                      feed . stop ( )  if len ( new_dbs ) >= 15 :                      feed . stop ( )    finally :              [ db . delete ( ) for db in new_dbs ]  self . assertTrue ( feed . _start . called_count > 1 )   if __name__ == <str> :      unittest . main ( )   