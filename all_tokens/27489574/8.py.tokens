from . _2to3 import iteritems_ , url_quote_plus , STRTYPE from . _common_util import QUERY_LANGUAGE , codify , response_to_json_dict from . document import Document from . view import View , QueryIndexView from . error import CloudantArgumentError , CloudantDesignDocumentException class DesignDocument ( Document ) :      def __init__ ( self , database , document_id = None , partitioned = False ) :          if document_id and not document_id . startswith ( <str> ) :              document_id = <str> . format ( document_id )  super ( DesignDocument , self ) . __init__ ( database , document_id ) if partitioned :              self . setdefault ( <str> , { <str> : True } )  self . _nested_object_names = frozenset ( [ <str> , <str> , <str> , <str> ] ) for prop in self . _nested_object_names :              self . setdefault ( prop , dict ( ) )   @ property def validate_doc_update ( self ) :          return self . get ( <str> )  @ property def filters ( self ) :          return self . get ( <str> )  @ property def updates ( self ) :          return self . get ( <str> )  @ property def st_indexes ( self ) :          return self . get ( <str> )  @ property def lists ( self ) :          return self . get ( <str> )  @ property def shows ( self ) :          return self . get ( <str> )  @ property def rewrites ( self ) :          return self . get ( <str> )  @ property def views ( self ) :          return self . get ( <str> )  @ property def indexes ( self ) :          return self . get ( <str> )  def document_partition_url ( self , partition_key ) :          return <str> . join ( ( self . _database . database_partition_url ( partition_key ) , <str> , url_quote_plus ( self [ <str> ] [ 8 : ] , safe = <str> ) ) )  def add_view ( self , view_name , map_func , reduce_func = None , ** kwargs ) :          if self . get_view ( view_name ) is not None :              raise CloudantArgumentError ( 107 , view_name )  if self . get ( <str> , None ) == QUERY_LANGUAGE :              raise CloudantDesignDocumentException ( 101 )  view = View ( self , view_name , map_func , reduce_func , ** kwargs ) self . views . __setitem__ ( view_name , view )  def add_search_index ( self , index_name , search_func , analyzer = None ) :          if self . get_index ( index_name ) is not None :              raise CloudantArgumentError ( 108 , index_name )  if analyzer is not None :              search = { <str> : codify ( search_func ) , <str> : analyzer }  else :              search = { <str> : codify ( search_func ) }  self . indexes . __setitem__ ( index_name , search )  def add_list_function ( self , list_name , list_func ) :          if self . get_list_function ( list_name ) is not None :              raise CloudantArgumentError ( 109 , list_name )  self . lists . __setitem__ ( list_name , codify ( list_func ) )  def add_show_function ( self , show_name , show_func ) :          if self . get_show_function ( show_name ) is not None :              raise CloudantArgumentError ( 110 , show_name )  self . shows . __setitem__ ( show_name , show_func )  def update_view ( self , view_name , map_func , reduce_func = None , ** kwargs ) :          view = self . get_view ( view_name ) if view is None :              raise CloudantArgumentError ( 111 , view_name )  if isinstance ( view , QueryIndexView ) :              raise CloudantDesignDocumentException ( 102 )  view = View ( self , view_name , map_func , reduce_func , ** kwargs ) self . views . __setitem__ ( view_name , view )  def update_search_index ( self , index_name , search_func , analyzer = None ) :          search = self . get_index ( index_name ) if search is None :              raise CloudantArgumentError ( 112 , index_name )  if analyzer is not None :              search = { <str> : codify ( search_func ) , <str> : analyzer }  else :              search = { <str> : codify ( search_func ) }  self . indexes . __setitem__ ( index_name , search )  def update_list_function ( self , list_name , list_func ) :          if self . get_list_function ( list_name ) is None :              raise CloudantArgumentError ( 113 , list_name )  self . lists . __setitem__ ( list_name , codify ( list_func ) )  def update_show_function ( self , show_name , show_func ) :          if self . get_show_function ( show_name ) is None :              raise CloudantArgumentError ( 114 , show_name )  self . shows . __setitem__ ( show_name , show_func )  def delete_view ( self , view_name ) :          view = self . get_view ( view_name ) if view is None :              return  if isinstance ( view , QueryIndexView ) :              raise CloudantDesignDocumentException ( 103 )  self . views . __delitem__ ( view_name )  def delete_index ( self , index_name ) :          index = self . get_index ( index_name ) if index is None :              return  self . indexes . __delitem__ ( index_name )  def delete_list_function ( self , list_name ) :          self . lists . __delitem__ ( list_name )  def delete_show_function ( self , show_name ) :          if self . get_show_function ( show_name ) is None :              return  self . shows . __delitem__ ( show_name )  def fetch ( self ) :          super ( DesignDocument , self ) . fetch ( ) if self . views :              for view_name , view_def in iteritems_ ( self . get ( <str> , dict ( ) ) ) :                  if self . get ( <str> , None ) != QUERY_LANGUAGE :                      self [ <str> ] [ view_name ] = View ( self , view_name , view_def . pop ( <str> , None ) , view_def . pop ( <str> , None ) , ** view_def )  else :                      self [ <str> ] [ view_name ] = QueryIndexView ( self , view_name , view_def . pop ( <str> , None ) , view_def . pop ( <str> , None ) , ** view_def )    for prop in self . _nested_object_names :              getattr ( self , prop , self . setdefault ( prop , dict ( ) ) )   def save ( self ) :          if self . views :              if self . get ( <str> , None ) != QUERY_LANGUAGE :                  for view_name , view in self . iterviews ( ) :                      if isinstance ( view , QueryIndexView ) :                          raise CloudantDesignDocumentException ( 104 , view_name )    else :                  for view_name , view in self . iterviews ( ) :                      if not isinstance ( view , QueryIndexView ) :                          raise CloudantDesignDocumentException ( 105 , view_name )     if self . indexes :              if self . get ( <str> , None ) != QUERY_LANGUAGE :                  for index_name , search in self . iterindexes ( ) :                      if not isinstance ( search [ <str> ] , STRTYPE ) :                          raise CloudantDesignDocumentException ( 106 , index_name )    else :                  for index_name , index in self . iterindexes ( ) :                      if not isinstance ( index [ <str> ] , dict ) :                          raise CloudantDesignDocumentException ( 107 , index_name )     for prop in self . _nested_object_names :              if not getattr ( self , prop ) :                  self . __delitem__ ( prop )   super ( DesignDocument , self ) . save ( ) for prop in self . _nested_object_names :              getattr ( self , prop , self . setdefault ( prop , dict ( ) ) )   def __setitem__ ( self , key , value ) :          if ( key == <str> and value is not None and not value . startswith ( <str> ) ) :              value = <str> . format ( value )  super ( DesignDocument , self ) . __setitem__ ( key , value )  def iterviews ( self ) :          for view_name , view in iteritems_ ( self . views ) :              yield view_name , view   def iterindexes ( self ) :          for index_name , search_func in iteritems_ ( self . indexes ) :              yield index_name , search_func   def iterlists ( self ) :          for list_name , list_func in iteritems_ ( self . lists ) :              yield list_name , list_func   def itershows ( self ) :          for show_name , show_func in iteritems_ ( self . shows ) :              yield show_name , show_func   def list_views ( self ) :          return list ( self . views . keys ( ) )  def list_indexes ( self ) :          return list ( self . indexes . keys ( ) )  def list_list_functions ( self ) :          return list ( self . lists . keys ( ) )  def list_show_functions ( self ) :          return list ( self . shows . keys ( ) )  def get_view ( self , view_name ) :          return self . views . get ( view_name )  def get_index ( self , index_name ) :          return self . indexes . get ( index_name )  def get_list_function ( self , list_name ) :          return self . lists . get ( list_name )  def get_show_function ( self , show_name ) :          return self . shows . get ( show_name )  def info ( self ) :          ddoc_info = self . r_session . get ( <str> . join ( [ self . document_url , <str> ] ) ) ddoc_info . raise_for_status ( ) return response_to_json_dict ( ddoc_info )  def search_info ( self , search_index ) :          ddoc_search_info = self . r_session . get ( <str> . join ( [ self . document_url , <str> , search_index ] ) ) ddoc_search_info . raise_for_status ( ) return response_to_json_dict ( ddoc_search_info )  def search_disk_size ( self , search_index ) :          ddoc_search_disk_size = self . r_session . get ( <str> . join ( [ self . document_url , <str> , search_index ] ) ) ddoc_search_disk_size . raise_for_status ( ) return response_to_json_dict ( ddoc_search_disk_size )    