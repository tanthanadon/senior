import base64 import json import os from requests import RequestException , Session from . _2to3 import bytes_ , unicode_ , url_join from . _common_util import response_to_json_dict from . error import CloudantException class ClientSession ( Session ) :      def __init__ ( self , username = None , password = None , session_url = None , ** kwargs ) :          super ( ClientSession , self ) . __init__ ( ) self . _username = username self . _password = password self . _session_url = session_url self . _auto_renew = kwargs . get ( <str> , False ) self . _timeout = kwargs . get ( <str> , None )  def base64_user_pass ( self ) :          if self . _username is None or self . _password is None :              return None  hash_ = base64 . urlsafe_b64encode ( bytes_ ( <str> . format ( username = self . _username , password = self . _password ) ) ) return <str> . format ( unicode_ ( hash_ ) )  def request ( self , method , url , ** kwargs ) :          resp = super ( ClientSession , self ) . request ( method , url , timeout = self . _timeout , ** kwargs ) return resp  def info ( self ) :          if self . _session_url is None :              return None  resp = self . get ( self . _session_url ) resp . raise_for_status ( ) return response_to_json_dict ( resp )  def set_credentials ( self , username , password ) :          if username is not None :              self . _username = username  if password is not None :              self . _password = password   def login ( self ) :          pass  def logout ( self ) :          pass   class BasicSession ( ClientSession ) :      def __init__ ( self , username , password , server_url , ** kwargs ) :          super ( BasicSession , self ) . __init__ ( username = username , password = password , session_url = url_join ( server_url , <str> ) , ** kwargs )  def request ( self , method , url , ** kwargs ) :          auth = None if self . _username is not None and self . _password is not None :              auth = ( self . _username , self . _password )  return super ( BasicSession , self ) . request ( method , url , auth = auth , ** kwargs )   class CookieSession ( ClientSession ) :      def __init__ ( self , username , password , server_url , ** kwargs ) :          super ( CookieSession , self ) . __init__ ( username = username , password = password , session_url = url_join ( server_url , <str> ) , ** kwargs )  def login ( self ) :          resp = super ( CookieSession , self ) . request ( <str> , self . _session_url , data = { <str> : self . _username , <str> : self . _password } , ) resp . raise_for_status ( )  def logout ( self ) :          resp = super ( CookieSession , self ) . request ( <str> , self . _session_url ) resp . raise_for_status ( )  def request ( self , method , url , ** kwargs ) :          resp = super ( CookieSession , self ) . request ( method , url , ** kwargs ) if not self . _auto_renew :              return resp  is_expired = any ( ( resp . status_code == 403 and response_to_json_dict ( resp ) . get ( <str> ) == <str> , resp . status_code == 401 ) ) if is_expired :              self . login ( ) resp = super ( CookieSession , self ) . request ( method , url , ** kwargs )  return resp   class IAMSession ( ClientSession ) :      def __init__ ( self , api_key , server_url , client_id = None , client_secret = None , ** kwargs ) :          super ( IAMSession , self ) . __init__ ( session_url = url_join ( server_url , <str> ) , ** kwargs ) self . _api_key = api_key self . _token_url = os . environ . get ( <str> , <str> ) self . _token_auth = None if client_id and client_secret :              self . _token_auth = ( client_id , client_secret )   @ property def get_api_key ( self ) :          return self . _api_key  def login ( self ) :          access_token = self . _get_access_token ( ) try :              super ( IAMSession , self ) . request ( <str> , self . _session_url , headers = { <str> : <str> } , data = json . dumps ( { <str> : access_token } ) ) . raise_for_status ( )  except RequestException :              raise CloudantException ( <str> )   def logout ( self ) :          self . cookies . clear ( )  def request ( self , method , url , ** kwargs ) :          self . cookies . clear_expired_cookies ( ) if self . _auto_renew and <str> not in self . cookies . keys ( ) :              self . login ( )  resp = super ( IAMSession , self ) . request ( method , url , ** kwargs ) if not self . _auto_renew :              return resp  if resp . status_code == 401 :              self . login ( ) resp = super ( IAMSession , self ) . request ( method , url , ** kwargs )  return resp  def set_credentials ( self , username , api_key ) :          if api_key is not None :              self . _api_key = api_key   def _get_access_token ( self ) :          err = <str> try :              resp = super ( IAMSession , self ) . request ( <str> , self . _token_url , auth = self . _token_auth , headers = { <str> : <str> } , data = { <str> : <str> , <str> : <str> , <str> : self . _api_key } ) err = response_to_json_dict ( resp ) . get ( <str> , err ) resp . raise_for_status ( ) return response_to_json_dict ( resp ) [ <str> ]  except KeyError :              raise CloudantException ( <str> )  except RequestException :              raise CloudantException ( err )     