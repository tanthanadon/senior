from . _common_util import response_to_json_dict class Scheduler ( object ) :      def __init__ ( self , client ) :          self . _client = client self . _r_session = client . r_session self . _scheduler = <str> . join ( [ self . _client . server_url , <str> ] )  def list_docs ( self , limit = None , skip = None ) :          params = dict ( ) if limit is not None :              params [ <str> ] = limit  if skip is not None :              params [ <str> ] = skip  resp = self . _r_session . get ( <str> . join ( [ self . _scheduler , <str> ] ) , params = params ) resp . raise_for_status ( ) return response_to_json_dict ( resp )  def get_doc ( self , doc_id ) :          resp = self . _r_session . get ( <str> . join ( [ self . _scheduler , <str> , <str> , doc_id ] ) ) resp . raise_for_status ( ) return response_to_json_dict ( resp )  def list_jobs ( self , limit = None , skip = None ) :          params = dict ( ) if limit is not None :              params [ <str> ] = limit  if skip is not None :              params [ <str> ] = skip  resp = self . _r_session . get ( <str> . join ( [ self . _scheduler , <str> ] ) , params = params ) resp . raise_for_status ( ) return response_to_json_dict ( resp )    