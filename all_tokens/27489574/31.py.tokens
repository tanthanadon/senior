import mock import unittest from cloudant . error import ResultException from cloudant . result import Result , ResultByKey from cloudant . view import View from nose . plugins . attrib import attr from requests . exceptions import HTTPError from . unit_t_db_base import UnitTestDbBase class ResultExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( ResultException ) as cm :              raise ResultException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( ResultException ) as cm :              raise ResultException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_without_args ( self ) :          with self . assertRaises ( ResultException ) as cm :              raise ResultException ( 101 )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_without_insufficient_args ( self ) :          with self . assertRaises ( ResultException ) as cm :              raise ResultException ( 102 , <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( ResultException ) as cm :              raise ResultException ( 102 , <str> , <str> )  self . assertEqual ( cm . exception . status_code , 102 )   @ attr ( db = [ <str> , <str> ] ) class ResultTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( ResultTests , self ) . setUp ( ) self . db_set_up ( ) self . populate_db_with_documents ( ) self . create_views ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( ResultTests , self ) . tearDown ( )  def test_constructor ( self ) :          result = Result ( self . ddoc . get_view ( <str> ) , startkey = <str> , endkey = <str> , page_size = 1000 ) self . assertIsInstance ( result , Result ) self . assertDictEqual ( result . options , { <str> : <str> , <str> : <str> } )  def test_get_item_by_index ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 10 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 99 ] , expected ) self . assertEqual ( result [ 100 ] , [ ] ) self . assertEqual ( result [ 110 ] , [ ] )  def test_get_item_by_index_using_skip_limit ( self ) :          result = Result ( self . view001 , skip = 10 , limit = 10 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 5 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 9 ] , expected ) self . assertEqual ( result [ 10 ] , [ ] ) self . assertEqual ( result [ 20 ] , [ ] )  def test_get_item_by_index_using_limit ( self ) :          result = Result ( self . view001 , limit = 10 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 5 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 9 ] , expected ) self . assertEqual ( result [ 10 ] , [ ] ) self . assertEqual ( result [ 20 ] , [ ] )  def test_get_item_by_index_using_skip ( self ) :          result = Result ( self . view001 , skip = 10 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 5 ] , expected ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 89 ] , expected ) self . assertEqual ( result [ 90 ] , [ ] ) self . assertEqual ( result [ 100 ] , [ ] )  def test_get_item_by_negative_index ( self ) :          result = Result ( self . view001 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_by_key_using_invalid_options ( self ) :          options = ( <str> , <str> , <str> , <str> ) for option in options :              result = Result ( self . view001 , ** { option : <str> } ) with self . assertRaises ( ResultException ) as cm :                  invalid_result = result [ <str> ]  self . assertEqual ( cm . exception . status_code , 102 )   def test_get_item_by_key ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ <str> ] , expected ) self . assertEqual ( result [ ResultByKey ( <str> ) ] , expected )  def test_get_item_by_missing_key ( self ) :          result = Result ( self . view001 ) self . assertEqual ( result [ <str> ] , [ ] ) self . assertEqual ( result [ ResultByKey ( <str> ) ] , [ ] )  def test_get_item_by_complex_key ( self ) :          result = Result ( self . view005 ) expected = [ { <str> : [ <str> , 10 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ [ <str> , 10 ] ] , expected ) self . assertEqual ( result [ ResultByKey ( [ <str> , 10 ] ) ] , expected )  def test_get_item_by_integer_key ( self ) :          result = Result ( self . view003 ) expected = [ { <str> : 10 , <str> : <str> , <str> : 1 } , { <str> : 10 , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ ResultByKey ( 10 ) ] , expected )  def test_get_item_by_missing_integer_key ( self ) :          result = Result ( self . view003 ) self . assertEqual ( result [ ResultByKey ( 99 ) ] , [ ] )  def test_get_item_slice_no_start_no_stop ( self ) :          result = Result ( self . view001 , limit = 3 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : ] , expected )  def test_get_all_items ( self ) :          result = Result ( self . view001 , limit = 3 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result . all ( ) , expected )  def test_get_item_invalid_index_slice ( self ) :          result = Result ( self . view001 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 : 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 1 : - 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 : - 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 2 : 2 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 5 : 2 ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_index_slice_using_start_stop ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 98 : 100 ] , expected ) self . assertEqual ( result [ 98 : 102 ] , expected ) self . assertEqual ( result [ 100 : 102 ] , [ ] ) result = Result ( self . view001 , limit = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 18 : 20 ] , expected ) self . assertEqual ( result [ 18 : 22 ] , expected ) self . assertEqual ( result [ 20 : 22 ] , [ ] ) result = Result ( self . view001 , skip = 98 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 : 2 ] , expected ) self . assertEqual ( result [ 0 : 4 ] , expected ) self . assertEqual ( result [ 2 : 4 ] , [ ] ) result = Result ( self . view001 , limit = 20 , skip = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 18 : 20 ] , expected ) self . assertEqual ( result [ 18 : 22 ] , expected ) self . assertEqual ( result [ 20 : 22 ] , [ ] )  def test_get_item_index_slice_using_start_only ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 98 : ] , expected ) self . assertEqual ( result [ 100 : ] , [ ] ) result = Result ( self . view001 , limit = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 18 : ] , expected ) self . assertEqual ( result [ 20 : ] , [ ] ) result = Result ( self . view001 , skip = 98 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 0 : ] , expected ) self . assertEqual ( result [ 2 : ] , [ ] ) result = Result ( self . view001 , limit = 20 , skip = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ 18 : ] , expected ) self . assertEqual ( result [ 20 : ] , [ ] )  def test_get_item_index_slice_using_stop_only ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : 2 ] , expected ) expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] self . assertEqual ( result [ : 102 ] , expected ) result = Result ( self . view001 , limit = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : 2 ] , expected ) expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 20 ) ] self . assertEqual ( result [ : 22 ] , expected ) result = Result ( self . view001 , skip = 98 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : 2 ] , expected ) self . assertEqual ( result [ : 4 ] , expected ) result = Result ( self . view001 , limit = 2 , skip = 20 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : 2 ] , expected ) self . assertEqual ( result [ : 4 ] , expected )  def test_get_item_key_slice_using_invalid_options ( self ) :          result = Result ( self . view001 , key = <str> ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : ]  self . assertEqual ( cm . exception . status_code , 102 ) result = Result ( self . view001 , keys = [ <str> , <str> ] ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : ]  self . assertEqual ( cm . exception . status_code , 102 ) result = Result ( self . view001 , startkey = <str> ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : ]  self . assertEqual ( cm . exception . status_code , 102 ) result = Result ( self . view001 , endkey = <str> ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : ]  self . assertEqual ( cm . exception . status_code , 102 )  def test_get_item_invalid_key_slice ( self ) :          result = Result ( self . view001 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : [ <str> , <str> ] ]  self . assertEqual ( cm . exception . status_code , 101 ) ten = ResultByKey ( 10 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : ten ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_key_slice_using_start_stop ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ <str> : <str> ] , expected ) self . assertEqual ( result [ ResultByKey ( <str> ) : ResultByKey ( <str> ) ] , expected ) self . assertEqual ( result [ <str> : <str> ] , expected ) self . assertEqual ( result [ <str> : <str> ] , [ { <str> : <str> , <str> : <str> , <str> : 1 } ] ) self . assertEqual ( result [ <str> : <str> ] , [ ] ) result = Result ( self . view003 ) expected = [ { <str> : 47 , <str> : <str> , <str> : 1 } , { <str> : 47 , <str> : <str> , <str> : 1 } , { <str> : 48 , <str> : <str> , <str> : 1 } , { <str> : 48 , <str> : <str> , <str> : 1 } , { <str> : 49 , <str> : <str> , <str> : 1 } , { <str> : 49 , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ ResultByKey ( 47 ) : ResultByKey ( 49 ) ] , expected ) self . assertEqual ( result [ ResultByKey ( 47 ) : ResultByKey ( 52 ) ] , expected ) self . assertEqual ( result [ ResultByKey ( 48 ) : ResultByKey ( 48 ) ] , [ { <str> : 48 , <str> : <str> , <str> : 1 } , { <str> : 48 , <str> : <str> , <str> : 1 } ] ) self . assertEqual ( result [ ResultByKey ( 52 ) : ResultByKey ( 54 ) ] , [ ] ) result = Result ( self . view005 ) expected = [ { <str> : [ <str> , 97 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 98 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 99 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ [ <str> , 97 ] : [ <str> , 99 ] ] , expected ) self . assertEqual ( result [ ResultByKey ( [ <str> , 97 ] ) : ResultByKey ( [ <str> , 99 ] ) ] , expected ) self . assertEqual ( result [ [ <str> , 97 ] : [ <str> , 97 ] ] , expected ) self . assertEqual ( result [ [ <str> , 98 ] : [ <str> , 98 ] ] , [ { <str> : [ <str> , 98 ] , <str> : <str> , <str> : 1 } ] ) self . assertEqual ( result [ [ <str> , <str> ] : [ <str> , <str> ] ] , [ ] )  def test_get_item_key_slice_start_greater_than_stop ( self ) :          result = Result ( self . view001 ) with self . assertRaises ( HTTPError ) as cm :              invalid_result = result [ <str> : <str> ]  self . assertTrue ( str ( cm . exception ) . startswith ( <str> ) )  def test_get_item_key_slice_using_start_only ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ <str> : ] , expected ) self . assertEqual ( result [ ResultByKey ( <str> ) : ] , expected ) self . assertEqual ( result [ <str> : ] , [ ] ) result = Result ( self . view003 ) expected = [ { <str> : 47 , <str> : <str> , <str> : 1 } , { <str> : 47 , <str> : <str> , <str> : 1 } , { <str> : 48 , <str> : <str> , <str> : 1 } , { <str> : 48 , <str> : <str> , <str> : 1 } , { <str> : 49 , <str> : <str> , <str> : 1 } , { <str> : 49 , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ ResultByKey ( 47 ) : ] , expected ) self . assertEqual ( result [ ResultByKey ( 52 ) : ] , [ ] ) result = Result ( self . view005 ) expected = [ { <str> : [ <str> , 97 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 98 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 99 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ [ <str> , 97 ] : ] , expected ) self . assertEqual ( result [ ResultByKey ( [ <str> , 97 ] ) : ] , expected ) self . assertEqual ( result [ ResultByKey ( [ <str> , <str> ] ) : ] , [ ] )  def test_get_item_key_slice_using_stop_only ( self ) :          result = Result ( self . view001 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : <str> ] , expected ) self . assertEqual ( result [ : ResultByKey ( <str> ) ] , expected ) self . assertEqual ( result [ : <str> ] , [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] ) self . assertEqual ( result [ : <str> ] , [ ] ) result = Result ( self . view003 ) expected = [ { <str> : 0 , <str> : <str> , <str> : 1 } , { <str> : 0 , <str> : <str> , <str> : 1 } , { <str> : 1 , <str> : <str> , <str> : 1 } , { <str> : 1 , <str> : <str> , <str> : 1 } , { <str> : 2 , <str> : <str> , <str> : 1 } , { <str> : 2 , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : ResultByKey ( 2 ) ] , expected ) self . assertEqual ( result [ : ResultByKey ( 51 ) ] , [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] ) self . assertEqual ( result [ : ResultByKey ( - 10 ) ] , [ ] ) result = Result ( self . view005 ) expected = [ { <str> : [ <str> , 0 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 1 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 2 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( result [ : [ <str> , 2 ] ] , expected ) self . assertEqual ( result [ : ResultByKey ( [ <str> , 2 ] ) ] , expected ) self . assertEqual ( result [ : [ <str> , 102 ] ] , [ { <str> : [ <str> , x ] , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] ) self . assertEqual ( result [ : ResultByKey ( [ <str> , <str> ] ) ] , [ ] )  def test_iteration_with_invalid_options ( self ) :          result = Result ( self . view001 , limit = 10 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 103 )  def test_iteration_invalid_page_size ( self ) :          result = Result ( self . view001 , page_size = - 1 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 104 ) result = Result ( self . view001 , page_size = <str> ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 104 )  def test_iteration_using_valid_page_size ( self ) :          result = Result ( self . view001 , endkey = <str> , page_size = 3 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( [ x for x in result ] , expected ) result = Result ( self . view001 , endkey = <str> , page_size = <str> ) self . assertEqual ( [ x for x in result ] , expected ) result = Result ( self . view001 , endkey = <str> , page_size = 3 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( [ x for x in result ] , expected ) result = Result ( self . view001 , endkey = <str> , page_size = 3 ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( [ x for x in result ] , expected )  def test_iteration_using_default_page_size ( self ) :          result = Result ( self . view001 , endkey = <str> ) expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( [ x for x in result ] , expected )  def test_iteration_no_data ( self ) :          result = Result ( self . view001 , startkey = <str> ) self . assertEqual ( [ x for x in result ] , [ ] )  def test_iteration_integer_keys ( self ) :          result = Result ( self . view007 , page_size = 10 ) self . assertEqual ( len ( [ x for x in result ] ) , 100 )  def test_iteration_pagination ( self ) :          class CallMock :              expected_calls = [ { <str> : 28 } , { <str> : 28 , <str> : 1 , <str> : <str> } , { <str> : 28 , <str> : 1 , <str> : <str> } , { <str> : 28 , <str> : 1 , <str> : <str> } , ] def __init__ ( self , outer ) :                  self . outer = outer self . expected_calls . reverse ( )  def call ( self , * args , ** kwargs ) :                  self . outer . assertEqual ( dict ( kwargs ) , self . expected_calls . pop ( ) , <str> ) return View . __call__ ( self . outer . view007 , * args , ** kwargs )   with mock . patch . object ( self , <str> , CallMock ( self ) . call ) as _ :              result = Result ( self . view007 , page_size = 27 )  expected = [ { <str> : <str> . format ( i ) , <str> : 1 , <str> : <str> } for i in range ( 100 ) ] self . assertEqual ( [ x for x in result ] , expected )   if __name__ == <str> :      unittest . main ( )   