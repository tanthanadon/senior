import os import unittest from cloudant . error import CloudantArgumentError from cloudant . query import Query from cloudant . result import QueryResult from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase @ attr ( db = [ <str> , <str> ] ) @ attr ( couchapi = 2 ) class QueryTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( QueryTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( QueryTests , self ) . tearDown ( )  def test_constructor_with_kwargs ( self ) :          query = Query ( self . db , foo = { <str> : <str> } ) self . assertIsInstance ( query , Query ) self . assertIsInstance ( query . result , QueryResult ) self . assertEqual ( query , { <str> : { <str> : <str> } } )  def test_constructor_without_kwargs ( self ) :          query = Query ( self . db ) self . assertIsInstance ( query , Query ) self . assertIsInstance ( query . result , QueryResult ) self . assertEqual ( query , { } )  def test_retrieve_query_url ( self ) :          query = Query ( self . db ) self . assertEqual ( query . url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_callable_with_invalid_argument ( self ) :          query = Query ( self . db ) try :              query ( foo = { <str> : <str> } ) self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> )   def test_callable_with_invalid_value_types ( self ) :          test_data = [ { <str> : <str> } , { <str> : <str> } , { <str> : <str> } , { <str> : <str> } , { <str> : <str> } , { <str> : <str> } , { <str> : 1 } , { <str> : 1 } ] for argument in test_data :              query = Query ( self . db ) try :                  query ( ** argument ) self . fail ( <str> )  except CloudantArgumentError as err :                  self . assertTrue ( str ( err ) . startswith ( <str> . format ( list ( argument . keys ( ) ) [ 0 ] ) ) )    def test_callable_without_selector ( self ) :          query = Query ( self . db ) try :              query ( fields = [ <str> , <str> ] ) self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> <str> )   def test_callable_with_empty_selector ( self ) :          query = Query ( self . db ) try :              query ( selector = { } , fields = [ <str> , <str> ] ) self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> <str> )   def test_callable_executes_query ( self ) :          self . populate_db_with_documents ( 100 ) query = Query ( self . db ) resp = query ( selector = { <str> : { <str> : <str> } } , fields = [ <str> ] , sort = [ { <str> : <str> } ] , skip = 10 , limit = 3 , r = 1 ) self . assertEqual ( resp [ <str> ] , [ { <str> : <str> } , { <str> : <str> } , { <str> : <str> } ] )  def test_custom_result_context_manager ( self ) :          self . populate_db_with_documents ( 100 ) query = Query ( self . db , selector = { <str> : { <str> : <str> } } , fields = [ <str> ] , r = 1 ) with query . custom_result ( sort = [ { <str> : <str> } ] ) as rslt :              self . assertEqual ( rslt [ 10 : 13 ] , [ { <str> : <str> } , { <str> : <str> } , { <str> : <str> } ] )    if __name__ == <str> :      unittest . main ( )   