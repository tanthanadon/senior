import json from . _2to3 import STRTYPE , iteritems_ from . _common_util import JSON_INDEX_TYPE from . _common_util import TEXT_INDEX_TYPE from . _common_util import SPECIAL_INDEX_TYPE from . _common_util import TEXT_INDEX_ARGS from . _common_util import response_to_json_dict from . error import CloudantArgumentError , CloudantIndexException class Index ( object ) :      def __init__ ( self , database , design_document_id = None , name = None , partitioned = False , ** kwargs ) :          self . _database = database self . _r_session = self . _database . r_session self . _ddoc_id = design_document_id self . _name = name self . _type = JSON_INDEX_TYPE self . _def = kwargs self . _partitioned = partitioned  @ property def index_url ( self ) :          return <str> . join ( ( self . _database . database_url , <str> ) )  @ property def design_document_id ( self ) :          return self . _ddoc_id  @ property def name ( self ) :          return self . _name  @ property def type ( self ) :          return self . _type  @ property def definition ( self ) :          return self . _def  @ property def partitioned ( self ) :          return self . _partitioned  def as_a_dict ( self ) :          index_dict = { <str> : self . _ddoc_id , <str> : self . _name , <str> : self . _type , <str> : self . _def } if self . _partitioned :              index_dict [ <str> ] = True  return index_dict  def create ( self ) :          payload = { <str> : self . _type } if self . _ddoc_id and self . _ddoc_id != <str> :              if isinstance ( self . _ddoc_id , STRTYPE ) :                  if self . _ddoc_id . startswith ( <str> ) :                      payload [ <str> ] = self . _ddoc_id [ 8 : ]  else :                      payload [ <str> ] = self . _ddoc_id   else :                  raise CloudantArgumentError ( 122 , self . _ddoc_id )   if self . _name and self . _name != <str> :              if isinstance ( self . _name , STRTYPE ) :                  payload [ <str> ] = self . _name  else :                  raise CloudantArgumentError ( 123 , self . _name )   self . _def_check ( ) payload [ <str> ] = self . _def if self . _partitioned :              payload [ <str> ] = True  headers = { <str> : <str> } resp = self . _r_session . post ( self . index_url , data = json . dumps ( payload , cls = self . _database . client . encoder ) , headers = headers ) resp . raise_for_status ( ) self . _ddoc_id = response_to_json_dict ( resp ) [ <str> ] self . _name = response_to_json_dict ( resp ) [ <str> ]  def _def_check ( self ) :          if list ( self . _def . keys ( ) ) != [ <str> ] :              raise CloudantArgumentError ( 124 , self . _def )   def delete ( self ) :          if not self . _ddoc_id :              raise CloudantArgumentError ( 125 )  if not self . _name :              raise CloudantArgumentError ( 126 )  ddoc_id = self . _ddoc_id if ddoc_id . startswith ( <str> ) :              ddoc_id = ddoc_id [ 8 : ]  url = <str> . join ( ( self . index_url , ddoc_id , self . _type , self . _name ) ) resp = self . _r_session . delete ( url ) resp . raise_for_status ( )   class TextIndex ( Index ) :      def __init__ ( self , database , design_document_id = None , name = None , ** kwargs ) :          super ( TextIndex , self ) . __init__ ( database , design_document_id , name , ** kwargs ) self . _type = TEXT_INDEX_TYPE  def _def_check ( self ) :          if self . _def != dict ( ) :              for key , val in iteritems_ ( self . _def ) :                  if key not in list ( TEXT_INDEX_ARGS . keys ( ) ) :                      raise CloudantArgumentError ( 127 , key )  if not isinstance ( val , TEXT_INDEX_ARGS [ key ] ) :                      raise CloudantArgumentError ( 128 , key , TEXT_INDEX_ARGS [ key ] )      class SpecialIndex ( Index ) :      def __init__ ( self , database , design_document_id = None , name = <str> , ** kwargs ) :          super ( SpecialIndex , self ) . __init__ ( database , design_document_id , name , ** kwargs ) self . _type = SPECIAL_INDEX_TYPE  def create ( self ) :          raise CloudantIndexException ( 101 )  def delete ( self ) :          raise CloudantIndexException ( 102 )    