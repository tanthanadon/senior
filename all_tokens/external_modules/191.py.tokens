from openerp . osv import osv , fields import time from openerp import netsvc from openerp . tools . translate import _ class purchases_forecast ( osv . osv ) :      _name = <str> _description = <str> _columns = { <str> : fields . char ( <str> , size = 255 , required = True ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . date ( <str> ) , <str> : fields . one2many ( <str> , <str> , <str> ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . selection ( [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , string = <str> , required = True , readonly = True ) , <str> : fields . many2one ( <str> , <str> , required = False , readonly = True ) , <str> : fields . one2many ( <str> , <str> , <str> , readonly = True ) , <str> : fields . integer ( <str> , size = 4 ) } _defaults = { <str> : <str> , <str> : lambda obj , cr , uid , context : uid , } def action_done ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def action_validate ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def action_draft ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def action_cancel ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def do_merge ( self , cr , uid , ids , context = None ) :          wf_service = netsvc . LocalService ( <str> ) forecast_obj = self . pool . get ( <str> ) forecast_line_obj = self . pool . get ( <str> ) product_obj = self . pool . get ( <str> ) old_ids = [ ] res = { } lines = [ ] company = self . pool . get ( <str> ) . browse ( cr , uid , uid ) . company_id and self . pool . get ( <str> ) . browse ( cr , uid , uid ) . company_id . id or False new_id = forecast_obj . create ( cr , uid , { <str> : _ ( <str> ) , <str> : uid , <str> : time . strftime ( <str> ) , <str> : company , <str> : <str> } ) months = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for porder in self . browse ( cr , uid , ids , context = context ) :              forecast_obj . write ( cr , uid , porder . id , { <str> : new_id } ) old_ids . append ( porder . id ) for l in porder . purchases_forecast_lines :                  lines . append ( l . id )   if lines :              for line in forecast_line_obj . browse ( cr , uid , lines ) :                  if not res . get ( line . product_id . id ) :                      res [ line . product_id . id ] = { }  for month in range ( 0 , 12 ) :                      if not res [ line . product_id . id ] . get ( months [ month ] + <str> ) :                          res [ line . product_id . id ] [ months [ month ] + <str> ] = 0.0  res [ line . product_id . id ] [ months [ month ] + <str> ] = res [ line . product_id . id ] [ months [ month ] + <str> ] + ( eval ( <str> + ( months [ month ] + <str> ) , { <str> : line } ) )    if res :              for product in res :                  nwline = forecast_line_obj . create ( cr , uid , { <str> : new_id , <str> : product_obj . browse ( cr , uid , product ) . standard_price , <str> : product } ) for month in range ( 0 , 12 ) :                      forecast_line_obj . write ( cr , uid , nwline , { months [ month ] + <str> : res [ product ] [ months [ month ] + <str> ] , months [ month ] + <str> : res [ product ] [ months [ month ] + <str> ] * product_obj . browse ( cr , uid , product ) . standard_price } )    if old_ids :              for old_id in old_ids :                  wf_service . trg_validate ( uid , <str> , old_id , <str> , cr )   return new_id   class purchases_forecast_line ( osv . osv ) :      _name = <str> _description = <str> def _get_total_amount ( self , cr , uid , ids , name , arg , context = None ) :          res = { } for line in self . browse ( cr , uid , ids , context = context ) :              res [ line . id ] = line . jan_amount_total + line . feb_amount_total + line . mar_amount_total + line . apr_amount_total + line . may_amount_total + line . jun_amount_total + line . jul_amount_total + line . aug_amount_total + line . sep_amount_total + line . oct_amount_total + line . nov_amount_total + line . dec_amount_total  return res  def _get_total_qty ( self , cr , uid , ids , name , arg , context = None ) :          res = { } for line in self . browse ( cr , uid , ids , context = context ) :              res [ line . id ] = line . jan_qty + line . feb_qty + line . mar_qty + line . apr_qty + line . may_qty + line . jun_qty + line . jul_qty + line . aug_qty + line . sep_qty + line . oct_qty + line . nov_qty + line . dec_qty  return res  def _get_actual_stock ( self , cr , uid , ids , name , arg , context = None ) :          res = { } c = context . copy ( ) for line in self . browse ( cr , uid , ids , context = context ) :              c . update ( { <str> : time . strftime ( <str> ) } ) res [ line . id ] = self . pool . get ( <str> ) . browse ( cr , uid , line . product_id . id , context = c ) . qty_available  return res  _columns = { <str> : fields . char ( <str> , size = 255 , required = True ) , <str> : fields . many2one ( <str> , <str> , required = True , ondelete = <str> ) , <str> : fields . many2one ( <str> , <str> , required = True ) , <str> : fields . function ( _get_actual_stock , type = <str> , digits = ( 16 , 2 ) , string = <str> , readonly = True ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . function ( _get_total_qty , type = <str> , digits = ( 16 , 2 ) , string = <str> , readonly = True ) , <str> : fields . function ( _get_total_amount , type = <str> , digits = ( 16 , 2 ) , string = <str> , readonly = True , store = True ) , } _defaults = { <str> : lambda x , y , z , c : x . pool . get ( <str> ) . get ( y , z , <str> ) or <str> } def on_change_qty ( self , cr , uid , ids , qty = 0.0 , field = <str> , product_id = False , context = None ) :          if context is None :              context = { }  res = { } return { <str> : res }    