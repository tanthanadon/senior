from openerp import models , api from datetime import datetime from datetime import timedelta class HrAttendance ( models . Model ) :      _inherit = <str> def get_nearest_interval ( self , intervals , employee ) :          closest_time = False closest_interval = False for interval in intervals :              if interval [ 1 ] > datetime . now ( ) :                  return False  if not closest_time or ( datetime . now ( ) - interval [ 1 ] ) . seconds < closest_time :                  closest_time = ( datetime . now ( ) - interval [ 1 ] ) . seconds < closest_time closest_interval = interval   if not closest_interval :              raise Exception ( <str> % employee . name )  return closest_interval  @ api . model def cron_attendance_reminder ( self ) :          for employee in self . env [ <str> ] . search ( [ ( <str> , <str> , False ) ] ) :              currently_working = employee . state == <str> and True or False calendar = employee . calendar_id intervals = calendar . get_working_intervals_of_day ( compute_leaves = True , resource_id = employee . resource_id . id ) if intervals :                  intervals = intervals [ 0 ]  if currently_working :                  if intervals :                      nearest_interval = self . get_nearest_interval ( intervals , employee ) if not nearest_interval :                          continue  if ( datetime . now ( ) - nearest_interval [ 1 ] ) . seconds / 60.0 / 60.0 > 1 :                          continue   self . env . ref ( <str> ) . send_mail ( employee . id )  else :                  for interval in intervals :                      if interval [ 1 ] < datetime . now ( ) or interval [ 0 ] > datetime . now ( ) :                          continue  if interval [ 0 ] < datetime . now ( ) + timedelta ( minutes = - calendar . reminder_delay ) and ( datetime . now ( ) - interval [ 0 ] ) . seconds / 60.0 / 60.0 < 1 :                          self . env . ref ( <str> ) . send_mail ( employee . id ) break        