from openerp . osv import orm import time from openerp import _ , tools from itertools import chain class product_pricelist ( orm . Model ) :      _inherit = <str> def _price_rule_get_multi ( self , cr , uid , pricelist , products_by_qty_by_partner , context = None ) :          context = context or { } date = context . get ( <str> ) or time . strftime ( <str> ) date = date [ 0 : 10 ] products = map ( lambda x : x [ 0 ] , products_by_qty_by_partner ) currency_obj = self . pool . get ( <str> ) product_obj = self . pool . get ( <str> ) product_uom_obj = self . pool . get ( <str> ) price_type_obj = self . pool . get ( <str> ) if not products :              return { }  version = False for v in pricelist . version_id :              if ( ( v . date_start is False ) or ( v . date_start <= date ) ) and ( ( v . date_end is False ) or ( v . date_end >= date ) ) :                  version = v break   if not version :              raise orm . except_orm ( _ ( <str> ) , _ ( <str> ) )  categ_ids = { } for p in products :              categ = p . categ_id while categ :                  categ_ids [ categ . id ] = True categ = categ . parent_id   categ_ids = categ_ids . keys ( ) is_product_template = products [ 0 ] . _name == <str> if is_product_template :              prod_tmpl_ids = [ tmpl . id for tmpl in products ] prod_ids = [ p . id for p in list ( chain . from_iterable ( [ t . product_variant_ids for t in products ] ) ) ]  else :              prod_ids = [ product . id for product in products ] prod_tmpl_ids = [ product . product_tmpl_id . id for product in products ]  cr . execute ( <str> <str> <str> <str> <str> <str> <str> , ( prod_tmpl_ids , prod_ids , categ_ids , version . id ) ) item_ids = [ x [ 0 ] for x in cr . fetchall ( ) ] items = self . pool . get ( <str> ) . browse ( cr , uid , item_ids , context = context ) price_types = { } results = { } for product , qty , partner in products_by_qty_by_partner :              results [ product . id ] = 0.0 rule_id = False price = False qty_uom_id = context . get ( <str> ) or product . uom_id . id price_uom_id = product . uom_id . id qty_in_product_uom = qty if qty_uom_id != product . uom_id . id :                  try :                      qty_in_product_uom = product_uom_obj . _compute_qty ( cr , uid , context [ <str> ] , qty , product . uom_id . id or product . uos_id . id )  except orm . except_orm :                      pass   for rule in items :                  if rule . min_quantity and qty_in_product_uom < rule . min_quantity :                      continue  if is_product_template :                      if rule . product_tmpl_id and product . id != rule . product_tmpl_id . id :                          continue  if rule . product_id and ( product . product_variant_count > 1 or product . product_variant_ids [ 0 ] . id != rule . product_id . id ) :                          continue   else :                      if rule . product_tmpl_id and product . product_tmpl_id . id != rule . product_tmpl_id . id :                          continue  if rule . product_id and product . id != rule . product_id . id :                          continue   if rule . categ_id :                      cat = product . categ_id while cat :                          if cat . id == rule . categ_id . id :                              break  cat = cat . parent_id  if not cat :                          continue   if rule . base == - 1 :                      if rule . base_pricelist_id :                          price_tmp = self . _price_get_multi ( cr , uid , rule . base_pricelist_id , [ ( product , qty , partner ) ] , context = context ) [ product . id ] ptype_src = rule . base_pricelist_id . currency_id . id price_uom_id = qty_uom_id price = currency_obj . compute ( cr , uid , ptype_src , pricelist . currency_id . id , price_tmp , round = False , context = context )   elif rule . base == - 2 :                      seller = False for seller_id in product . seller_ids :                          if ( not partner ) or ( seller_id . name . id != partner ) :                              continue  seller = seller_id  if not seller :                          continue  if seller :                          qty_in_seller_uom = qty seller_uom = seller . product_uom . id if qty_uom_id != seller_uom :                              qty_in_seller_uom = product_uom_obj . _compute_qty ( cr , uid , qty_uom_id , qty , to_uom_id = seller_uom )  price_uom_id = seller_uom pricelist_ids = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , seller . id ) , ( <str> , <str> , qty_in_seller_uom ) , ( <str> , <str> , date ) ] , order = <str> , limit = 1 ) if pricelist_ids :                              pricelist = self . pool . get ( <str> ) . browse ( cr , uid , pricelist_ids [ 0 ] ) price = pricelist . price    else :                      if rule . base not in price_types :                          price_types [ rule . base ] = price_type_obj . browse ( cr , uid , int ( rule . base ) )  price_type = price_types [ rule . base ] price_uom_id = qty_uom_id price = currency_obj . compute ( cr , uid , price_type . currency_id . id , pricelist . currency_id . id , product_obj . _price_get ( cr , uid , [ product ] , price_type . field , context = context ) [ product . id ] , round = False , context = context )  if price is not False :                      price_limit = price price = price * ( 1.0 + ( rule . price_discount or 0.0 ) ) if rule . price_round :                          price = tools . float_round ( price , precision_rounding = rule . price_round )  convert_to_price_uom = ( lambda price : product_uom_obj . _compute_price ( cr , uid , product . uom_id . id , price , price_uom_id ) ) if rule . price_surcharge :                          price_surcharge = convert_to_price_uom ( rule . price_surcharge ) price += price_surcharge  if rule . price_min_margin :                          price_min_margin = convert_to_price_uom ( rule . price_min_margin ) price = max ( price , price_limit + price_min_margin )  if rule . price_max_margin :                          price_max_margin = convert_to_price_uom ( rule . price_max_margin ) price = min ( price , price_limit + price_max_margin )  rule_id = rule . id break   price = product_uom_obj . _compute_price ( cr , uid , price_uom_id , price , qty_uom_id ) results [ product . id ] = ( price , rule_id )  return results    