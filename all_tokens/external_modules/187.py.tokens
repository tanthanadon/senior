from openerp import models , fields , api class PickingImportWizard ( models . TransientModel ) :      _name = <str> _description = <str> @ api . model def default_get ( self , field_list ) :          res = super ( PickingImportWizard , self ) . default_get ( field_list ) if self . env . context . get ( <str> ) and <str> in field_list :              distribution = self . env [ <str> ] . browse ( self . env . context [ <str> ] ) pickings = self . env [ <str> ] moves = distribution . mapped ( <str> ) for line in distribution . cost_lines :                  if line . picking_id in pickings :                      continue  if all ( x in moves for x in line . picking_id . move_lines ) :                      pickings |= line . picking_id   res [ <str> ] = [ ( 6 , 0 , pickings . ids ) ]  return res  supplier = fields . Many2one ( comodel_name = <str> , string = <str> , required = True , domain = <str> ) pickings = fields . Many2many ( comodel_name = <str> , relation = <str> , column1 = <str> , column2 = <str> , string = <str> , domain = <str> <str> <str> <str> , required = True ) prev_pickings = fields . Many2many ( comodel_name = <str> ) def _prepare_distribution_line ( self , move ) :          return { <str> : self . env . context [ <str> ] , <str> : move . id , }  @ api . multi def action_import_picking ( self ) :          self . ensure_one ( ) distribution = self . env [ <str> ] . browse ( self . env . context [ <str> ] ) previous_moves = distribution . mapped ( <str> ) for move in self . mapped ( <str> ) :              if move not in previous_moves :                  self . env [ <str> ] . create ( self . _prepare_distribution_line ( move ) )      