from openerp . osv import osv , fields from openerp . tools . translate import _ class scale_sales_forecast ( osv . osv_memory ) :      _name = <str> _description = <str> _columns = { <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) } def scale_sales_forecast ( self , cr , uid , ids , context = None ) :          default = { } context = context or { } new_ids = [ ] if not ids :              return  months = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] if context . get ( <str> , [ ] ) :              forecast_obj = self . pool . get ( <str> ) forecast_line_obj = self . pool . get ( <str> ) for reg_id in context [ <str> ] :                  reg_original = forecast_obj . browse ( cr , uid , reg_id ) val_percent_increase = self . browse ( cr , uid , ids ) [ 0 ] . percent_increase default . update ( { <str> : reg_original . name + <str> + str ( val_percent_increase ) + <str> } ) default . update ( { <str> : False } ) default . update ( { <str> : False } ) new_id = forecast_obj . copy ( cr , uid , reg_id , default , context ) new_ids . append ( new_id ) o = forecast_obj . browse ( cr , uid , reg_id ) for line in o . sales_forecast_lines :                      default = { } default . update ( { <str> : new_id } ) for m in range ( 0 , 12 ) :                          qty = ( eval ( <str> + ( months [ m ] + <str> ) , { <str> : line } ) ) qty = qty * ( 1 + ( val_percent_increase / 100 ) ) default . update ( { months [ m ] + <str> : qty } ) default . update ( { months [ m ] + <str> : 0 } )  new_id2 = forecast_line_obj . copy ( cr , uid , line . id , default , context )    mod_obj = self . pool . get ( <str> ) res1 = mod_obj . get_object_reference ( cr , uid , <str> , <str> ) res2 = mod_obj . get_object_reference ( cr , uid , <str> , <str> ) if len ( context . get ( <str> , [ ] ) ) == 1 :              result = { <str> : _ ( <str> ) , <str> : <str> , <str> : <str> , <str> : <str> , <str> : res1 and res1 [ 1 ] or False , <str> : <str> , <str> : True , <str> : <str> , <str> : new_ids and new_ids [ 0 ] or False , }  elif len ( context . get ( <str> , [ ] ) ) > 1 :              result = { <str> : [ ( <str> , <str> , new_ids ) ] , <str> : _ ( <str> ) , <str> : <str> , <str> : <str> , <str> : <str> , <str> : False , <str> : <str> , <str> : res2 and res2 [ 1 ] or False }  else :              result = { <str> : <str> }  return result   scale_sales_forecast ( )  