from openerp import models , fields , api , _ from openerp . exceptions import Warning import time class StockPicking ( models . Model ) :      _inherit = <str> pending_invoice_move_id = fields . Many2one ( <str> , <str> , readonly = True , copy = False ) @ api . one def account_pending_invoice ( self ) :          period_obj = self . env [ <str> ] move_obj = self . env [ <str> ] product_uom_obj = self . env [ <str> ] move_line_obj = self . env [ <str> ] amount = 0 date = self . date_done and self . date_done [ : 10 ] or time . strftime ( <str> ) period_id = period_obj . find ( date ) origin = self . name if self . origin :              origin += <str> + self . origin  stock_journal_id = self . company_id . property_pending_stock_journal . id move = { <str> : origin , <str> : stock_journal_id , <str> : period_id . id , <str> : date , } move_id = move_obj . create ( move ) obj_precision = self . env [ <str> ] for move_line in self . move_lines :              account_id = move_line . product_id . product_tmpl_id . property_account_expense . id if not account_id :                  account_id = move_line . product_id . categ_id . property_account_expense_categ . id  name = move_line . name or origin purchase_line_obj = False if move_line . purchase_line_id :                  purchase_line_obj = move_line . purchase_line_id  else :                  for m in self . move_lines :                      if m . product_id . id == move_line . product_id . id and m . purchase_line_id :                          purchase_line_obj = m . purchase_line_id break    if purchase_line_obj :                  unit_price_line = purchase_line_obj . price_unit discount_line = purchase_line_obj . discount or 0.0  else :                  unit_price_line = move_line . product_id . standard_price discount_line = 0  unit_price_line = product_uom_obj . _compute_price ( move_line . product_uom . id , unit_price_line , move_line . product_id . uom_id . id ) price_line = unit_price_line * ( 1 - ( discount_line or 0.0 ) / 100.0 ) price_line = price_line * move_line . product_qty amount_line = round ( price_line , obj_precision . precision_get ( <str> ) ) if move_line . purchase_line_id and ( move_line . purchase_line_id . order_id . currency_id != move_line . company_id . currency_id ) :                  from_currency = move_line . purchase_line_id . order_id . currency_id to_currency = move_line . company_id . currency_id amount_line = from_currency . compute ( amount_line , to_currency )  amount += amount_line vals = { <str> : name , <str> : origin , <str> : self . partner_id . commercial_partner_id . id , <str> : move_line . product_id . id , <str> : account_id , <str> : amount_line , <str> : 0 , <str> : move_line . product_qty , <str> : move_id . id , <str> : stock_journal_id , <str> : period_id . id , } move_line_obj . create ( vals )  account_id = self . company_id . property_pending_supplier_invoice_account . id vals = { <str> : name , <str> : origin , <str> : self . partner_id . commercial_partner_id . id , <str> : account_id , <str> : 0 , <str> : amount , <str> : move_id . id , <str> : stock_journal_id , <str> : period_id . id , } move_line_obj . create ( vals ) move_id . post ( ) self . pending_invoice_move_id = move_id return move_id  @ api . multi def write ( self , vals ) :          res = super ( StockPicking , self ) . write ( vals ) if vals . get ( <str> , False ) :              for pick in self :                  exists_purchase = False for move in pick . move_lines :                      if move . purchase_line_id :                          exists_purchase = True break   if ( pick . picking_type_id . code == <str> and exists_purchase and pick . invoice_state in [ <str> , <str> ] and pick . company_id . required_invoice_pending_move ) :                      pick . refresh ( ) if not pick . company_id . property_pending_supplier_invoice_account :                          raise Warning ( _ ( <str> <str> ) )  if not pick . company_id . property_pending_stock_journal :                          raise Warning ( _ ( <str> <str> <str> ) )  pick . account_pending_invoice ( )    return res  @ api . model def _prepare_values_extra_move ( self , op , product , remaining_qty ) :          res = super ( StockPicking , self ) . _prepare_values_extra_move ( op , product , remaining_qty ) if op . linked_move_operation_ids and op . linked_move_operation_ids [ 0 ] . move_id . purchase_line_id :              res . update ( purchase_line_id = op . linked_move_operation_ids [ 0 ] . move_id . purchase_line_id . id ) t_uom = self . env [ <str> ] uos_id = uom_id = op . product_uom_id . id uos_qty = uom_qty = remaining_qty move = op . linked_move_operation_ids [ 0 ] . move_id uos_id = move . product_uos . id or uos_id uos_qty = t_uom . _compute_qty ( uom_id , uom_qty , uos_id ) uos_vals = { <str> : uos_id , <str> : uos_qty , <str> : uos_id , <str> : uos_qty , } res . update ( uos_vals )  return res    