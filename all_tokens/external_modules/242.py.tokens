from openerp . osv import osv , fields from openerp import netsvc import time from openerp . tools . translate import _ class sales_forecast ( osv . osv ) :      _name = <str> _description = <str> _columns = { <str> : fields . char ( <str> , size = 255 , required = True ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . date ( <str> ) , <str> : fields . one2many ( <str> , <str> , <str> ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . selection ( [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , string = <str> , required = True , readonly = True ) , <str> : fields . many2one ( <str> , <str> ) , <str> : fields . boolean ( <str> , readonly = True , states = { <str> : [ ( <str> , False ) ] } , help = <str> , ) , <str> : fields . many2one ( <str> , <str> , required = False , readonly = True ) , <str> : fields . one2many ( <str> , <str> , <str> , readonly = True ) , <str> : fields . integer ( <str> , size = 4 ) } _defaults = { <str> : <str> , <str> : lambda obj , cr , uid , context : uid , <str> : False , } def action_done ( self , cr , uid , ids , context = None ) :          months = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] if context is None :              user = self . pool . get ( <str> ) . browse ( cr , uid , uid , context ) context = { <str> : user . context_lang }  for o in self . browse ( cr , uid , ids , context = context ) :              if o . sales_forecast_lines and o . pricelist_id :                  pricelist_version_ids = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , o . pricelist_id . id ) , <str> , ( <str> , <str> , False ) , ( <str> , <str> , o . date ) , <str> , ( <str> , <str> , False ) , ( <str> , <str> , o . date ) , ] ) if not pricelist_version_ids :                      raise osv . except_osv ( _ ( <str> ) , _ ( <str> ) )  products_version = [ ] if self . pool . get ( <str> ) . browse ( cr , uid , pricelist_version_ids [ 0 ] ) . items_id :                      for item in self . pool . get ( <str> ) . browse ( cr , uid , pricelist_version_ids [ 0 ] ) . items_id :                          if item . product_id :                              products_version . append ( item . product_id . id )   for line in o . sales_forecast_lines :                          if not line . product_id . id in products_version :                              raise osv . except_osv ( _ ( <str> ) , _ ( <str> ) % ( line . product_id . default_code , line . product_id . name ) )  for m in range ( 0 , 12 ) :                              qty = ( eval ( <str> + ( months [ m ] + <str> ) , { <str> : line } ) ) price = self . pool . get ( <str> ) . price_get ( cr , uid , [ o . pricelist_id . id ] , line . product_id . id , qty or 1.0 , None , { <str> : line . product_id . uom_id . id , <str> : o . date , } ) [ o . pricelist_id . id ] if price :                                  price_total = qty * price self . pool . get ( <str> ) . write ( cr , uid , line . id , { months [ m ] + <str> : price_total } )      self . write ( cr , uid , ids , { <str> : <str> } )  return True  def action_validate ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def action_draft ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def action_cancel ( self , cr , uid , ids , context = None ) :          self . write ( cr , uid , ids , { <str> : <str> } ) return True  def do_merge ( self , cr , uid , ids , context = None ) :          wf_service = netsvc . LocalService ( <str> ) forecast_obj = self . pool . get ( <str> ) forecast_line_obj = self . pool . get ( <str> ) product_obj = self . pool . get ( <str> ) old_ids = [ ] res = { } lines = [ ] company = self . pool . get ( <str> ) . browse ( cr , uid , uid ) . company_id and self . pool . get ( <str> ) . browse ( cr , uid , uid ) . company_id . id or False new_id = forecast_obj . create ( cr , uid , { <str> : _ ( <str> ) , <str> : uid , <str> : time . strftime ( <str> ) , <str> : company , <str> : <str> , <str> : <str> , } ) months = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for porder in self . browse ( cr , uid , ids , context = context ) :              forecast_obj . write ( cr , uid , porder . id , { <str> : new_id } ) old_ids . append ( porder . id ) for l in porder . sales_forecast_lines :                  lines . append ( l . id )   if lines :              for line in forecast_line_obj . browse ( cr , uid , lines ) :                  if not res . get ( line . product_id . id ) :                      res [ line . product_id . id ] = { }  for month in range ( 0 , 12 ) :                      if not res [ line . product_id . id ] . get ( months [ month ] + <str> ) :                          res [ line . product_id . id ] [ months [ month ] + <str> ] = 0.0 res [ line . product_id . id ] [ months [ month ] + <str> ] = 0.0  res [ line . product_id . id ] [ months [ month ] + <str> ] = res [ line . product_id . id ] [ months [ month ] + <str> ] + ( eval ( <str> + ( months [ month ] + <str> ) , { <str> : line } ) ) res [ line . product_id . id ] [ months [ month ] + <str> ] = res [ line . product_id . id ] [ months [ month ] + <str> ] + ( eval ( <str> + ( months [ month ] + <str> ) , { <str> : line } ) )    if res :              for product in res :                  nwline = forecast_line_obj . create ( cr , uid , { <str> : new_id , <str> : product_obj . browse ( cr , uid , product ) . standard_price , <str> : product } ) for month in range ( 0 , 12 ) :                      forecast_line_obj . write ( cr , uid , nwline , { months [ month ] + <str> : res [ product ] [ months [ month ] + <str> ] , months [ month ] + <str> : res [ product ] [ months [ month ] + <str> ] } )    if old_ids :              for old_id in old_ids :                  wf_service . trg_validate ( uid , <str> , old_id , <str> , cr )   return new_id  def write ( self , cr , uid , ids , vals , context = None ) :          if context is None :              context = { }  if isinstance ( ids , ( int , long ) ) :              ids = [ ids ]  if vals . get ( <str> , False ) :              vals . update ( { <str> : False } ) vals . update ( { <str> : False } ) vals . update ( { <str> : False } )  return super ( sales_forecast , self ) . write ( cr , uid , ids , vals , context = context )   class sales_forecast_line ( osv . osv ) :      _name = <str> _description = <str> def _get_total_amount ( self , cr , uid , ids , name , arg , context = None ) :          res = { } for line in self . browse ( cr , uid , ids , context = context ) :              res [ line . id ] = line . jan_amount + line . feb_amount + line . mar_amount + line . apr_amount + line . may_amount + line . jun_amount + line . jul_amount + line . aug_amount + line . sep_amount + line . oct_amount + line . nov_amount + line . dec_amount  return res  def _get_total_qty ( self , cr , uid , ids , name , arg , context = None ) :          res = { } for line in self . browse ( cr , uid , ids , context = context ) :              res [ line . id ] = line . jan_qty + line . feb_qty + line . mar_qty + line . apr_qty + line . may_qty + line . jun_qty + line . jul_qty + line . aug_qty + line . sep_qty + line . oct_qty + line . nov_qty + line . dec_qty  return res  _columns = { <str> : fields . char ( <str> , size = 255 , required = True ) , <str> : fields . many2one ( <str> , <str> , required = True , ondelete = <str> ) , <str> : fields . many2one ( <str> , <str> , required = True ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . float ( <str> , digits = ( 16 , 2 ) ) , <str> : fields . function ( _get_total_qty , type = <str> , digits = ( 16 , 2 ) , string = <str> , readonly = True , store = True ) , <str> : fields . function ( _get_total_amount , type = <str> , digits = ( 16 , 2 ) , string = <str> , readonly = True , store = True ) , } _defaults = { <str> : lambda x , y , z , c : x . pool . get ( <str> ) . get ( y , z , <str> ) or <str> } def on_change_amount ( self , cr , uid , ids , amount = 0.0 , field = <str> , product_id = False , context = None ) :          if context is None :              context = { }  res = { } return { <str> : res }  def on_change_qty ( self , cr , uid , ids , qty = 0.0 , field = <str> , product_id = False , context = None ) :          if context is None :              context = { }  res = { } return { <str> : res }    