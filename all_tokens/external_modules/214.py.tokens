from openerp import models , fields , api , exceptions , _ class rappel ( models . Model ) :      _name = <str> _description = <str> CALC_MODE = [ ( <str> , <str> ) , ( <str> , <str> ) ] QTY_TYPE = [ ( <str> , <str> ) , ( <str> , <str> ) ] CALC_AMOUNT = [ ( <str> , <str> ) , ( <str> , <str> ) ] name = fields . Char ( <str> , size = 255 , required = True ) type_id = fields . Many2one ( <str> , <str> , required = True ) qty_type = fields . Selection ( QTY_TYPE , <str> , required = True , default = <str> ) calc_mode = fields . Selection ( CALC_MODE , <str> , required = True ) fix_qty = fields . Float ( <str> ) sections = fields . One2many ( <str> , <str> , <str> ) global_application = fields . Boolean ( <str> , default = True ) product_id = fields . Many2one ( <str> , <str> ) product_categ_id = fields . Many2one ( <str> , <str> ) calc_amount = fields . Selection ( CALC_AMOUNT , <str> , required = True ) customer_ids = fields . One2many ( <str> , <str> , <str> ) advice_timing_ids = fields . One2many ( <str> , <str> , <str> ) @ api . constrains ( <str> , <str> , <str> ) def _check_application ( self ) :          if not self . global_application and not self . product_id and not self . product_categ_id :              raise exceptions . ValidationError ( _ ( <str> ) )   @ api . multi def get_products ( self ) :          product_obj = self . env [ <str> ] product_ids = self . env [ <str> ] for rappel in self :              if not rappel . global_application :                  if rappel . product_id :                      product_ids += rappel . product_id  elif rappel . product_categ_id :                      product_ids += product_obj . search ( [ ( <str> , <str> , rappel . product_categ_id . id ) ] )   else :                  product_ids += product_obj . search ( [ ] )   return [ x . id for x in product_ids ]  @ api . model def compute_rappel ( self ) :          if not self . ids :              rappels = self . search ( [ ] )  else :              rappels = self  rappel_infos = self . env [ <str> ] . search ( [ ] ) if rappel_infos :              rappel_infos . unlink ( )  for rappel in rappels :              products = rappel . get_products ( ) for customer in rappel . customer_ids :                  period = customer . _get_next_period ( ) if period :                      invoice_lines , refund_lines = customer . _get_invoices ( period , products ) customer . compute ( period , invoice_lines , refund_lines , tmp_model = True )    self . env [ <str> ] . send_rappel_info_mail ( )   class rappel_section ( models . Model ) :      _name = <str> _description = <str> @ api . multi def name_get ( self ) :          result = [ ] for record in self :              result . append ( ( record . id , <str> % ( record . rappel_from , record . rappel_until ) ) )  return result  rappel_from = fields . Float ( <str> , required = True ) rappel_until = fields . Float ( <str> ) percent = fields . Float ( <str> , required = True ) rappel_id = fields . Many2one ( <str> , <str> )  class rappel_calculated ( models . Model ) :      _name = <str> partner_id = fields . Many2one ( <str> , <str> , required = True ) date_start = fields . Date ( <str> , required = True ) date_end = fields . Date ( <str> , required = True ) quantity = fields . Float ( <str> , required = True ) rappel_id = fields . Many2one ( <str> , <str> , required = True ) invoice_id = fields . Many2one ( <str> , <str> , readonly = True )   