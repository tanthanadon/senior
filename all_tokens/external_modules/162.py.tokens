from openerp import models , fields , api , exceptions , _ import openerp . addons . decimal_precision as dp import time def intersect ( la , lb ) :      l = filter ( lambda x : x in lb , la ) return len ( l ) == len ( la ) == len ( lb )  class account_invoice ( models . Model ) :      _inherit = <str> @ api . one def _get_early_discount_amount ( self ) :          res = { } prod_early_payment_id = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) ] ) prod_early_payment_id = prod_early_payment_id and prod_early_payment_id [ 0 ] or False if prod_early_payment_id :              if not self . early_payment_discount :                  self . early_payment_discount_amount = 0.0  found = False for line in self . invoice_line :                  if line . product_id and line . product_id . id == prod_early_payment_id . id :                      found = True break ;   if found :                  self . early_payment_discount_amount = 0.0  else :                  total_net_price = 0.0 for invoice_line in self . invoice_line :                      if invoice_line . product_id and invoice_line . product_id . without_early_payment :                          continue  total_net_price += invoice_line . price_subtotal  self . early_payment_discount_amount = float ( total_net_price ) - ( float ( total_net_price ) * ( 1 - ( self . early_payment_discount or 0.0 ) / 100.0 ) )    early_payment_discount = fields . Float ( <str> , digits = ( 16 , 2 ) , help = <str> ) early_discount_amount = fields . Float ( <str> , digits_compute = dp . get_precision ( <str> ) , help = <str> , readonly = True , compute = _get_early_discount_amount ) def compute_early_payment_discount ( self , invoice_line_ids , early_payment_percentage ) :          total_net_price = 0.0 for invoice_line in self . env [ <str> ] . browse ( invoice_line_ids ) :              if invoice_line . product_id and invoice_line . product_id . without_early_payment :                  continue  total_net_price += invoice_line . price_subtotal  return float ( total_net_price ) - ( float ( total_net_price ) * ( 1 - ( float ( early_payment_percentage ) or 0.0 ) / 100.0 ) )  @ api . one def compute_early_payment_lines ( self ) :          early_payments = { } inv_lines_out_vat = [ ] for invoice_line in self . invoice_line :              if invoice_line . product_id and invoice_line . product_id . without_early_payment :                  continue  if invoice_line . invoice_line_tax_id :                  line_tax_ids = [ x . id for x in invoice_line . invoice_line_tax_id ] found = False for key in early_payments :                      if intersect ( [ int ( x ) for x in key . split ( <str> ) ] , line_tax_ids ) :                          early_payments [ key ] . append ( invoice_line . id ) found = True break ;   if not found :                      tax_str = <str> . join ( [ str ( x ) for x in line_tax_ids ] ) early_payments [ tax_str ] = [ invoice_line . id ]   else :                  inv_lines_out_vat . append ( invoice_line . id )   prod_early_payment = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) ] ) prod_early_payment = prod_early_payment and prod_early_payment [ 0 ] or False if prod_early_payment :              analytic_id = False rec = self . env [ <str> ] . account_get ( prod_early_payment . id , self . partner_id . id , self . _uid , time . strftime ( <str> ) , company_id = self . company_id . id ) if rec :                  analytic_id = rec . analytic_id . id  group_account_line = { } for early_payment_line in early_payments :                  group_account_line [ early_payment_line ] = { } for invoice_line in self . env [ <str> ] . browse ( early_payments [ early_payment_line ] ) :                      if invoice_line . product_id . categ_id and invoice_line . product_id . categ_id . property_account_sale_early_payment_disc and str ( invoice_line . product_id . categ_id . property_account_sale_early_payment_disc . id ) not in group_account_line [ early_payment_line ] :                          group_account_line [ early_payment_line ] [ str ( invoice_line . product_id . categ_id . property_account_sale_early_payment_disc . id ) ] = [ invoice_line . id ]  elif invoice_line . product_id . categ_id and invoice_line . product_id . categ_id . property_account_sale_early_payment_disc and str ( invoice_line . product_id . categ_id . property_account_sale_early_payment_disc . id ) in group_account_line [ early_payment_line ] :                          group_account_line [ early_payment_line ] [ str ( invoice_line . product_id . categ_id . property_account_sale_early_payment_disc . id ) ] . append ( invoice_line . id )  elif prod_early_payment . property_stock_account_output and str ( prod_early_payment . property_stock_account_output . id ) not in group_account_line [ early_payment_line ] :                          group_account_line [ early_payment_line ] [ str ( prod_early_payment . property_stock_account_output . id ) ] = [ invoice_line . id ]  elif prod_early_payment . property_stock_account_output and str ( prod_early_payment . property_stock_account_output . id ) in group_account_line [ early_payment_line ] or prod_early_payment . categ_id . property_account_sale_early_payment_disc . id and str ( prod_early_payment . categ_id . property_account_sale_early_payment_disc . id ) in group_account_line [ early_payment_line ] :                          group_account_line [ early_payment_line ] [ str ( prod_early_payment . property_stock_account_output . id ) ] . append ( invoice_line . id )  else :                          raise exceptions . except_orm ( _ ( <str> ) , _ ( <str> ) )    partner_id = self . partner_id and self . partner_id . id or False for early_payment_line in group_account_line :                  for account_id in group_account_line [ early_payment_line ] :                      self . env [ <str> ] . with_context ( partner_id = partner_id ) . create ( { <str> : _ ( <str> ) + <str> + str ( self . early_payment_discount ) + <str> , <str> : self . id , <str> : prod_early_payment . id , <str> : int ( account_id ) , <str> : self . currency_id . round ( 0.0 - ( self . compute_early_payment_discount ( group_account_line [ early_payment_line ] [ account_id ] , self . early_payment_discount ) ) ) , <str> : 1 , <str> : [ ( 6 , 0 , [ int ( x ) for x in early_payment_line . split ( <str> ) ] ) ] , <str> : analytic_id } )   if inv_lines_out_vat :                  self . env [ <str> ] . with_context ( partner_id = partner_id ) . create ( { <str> : _ ( <str> ) + <str> + str ( self . early_payment_discount ) + <str> , <str> : self . id , <str> : prod_early_payment . id , <str> : prod_early_payment . categ_id and prod_early_payment . categ_id . property_account_sale_early_payment_disc . id or prod_early_payment . property_stock_account_output . id , <str> : self . currency_id . round ( 0.0 - ( self . compute_early_payment_discount ( inv_lines_out_vat , self . early_payment_discount ) ) ) , <str> : 1 , <str> : analytic_id } )   self . button_compute ( set_total = ( type in ( <str> , <str> ) ) ) return True  @ api . one def button_compute_early_payment_disc ( self ) :          if self . early_payment_discount :              orig_early_payment_lines = self . env [ <str> ] early_payment = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) ] ) for invoice_line in self . invoice_line :                  if invoice_line . product_id . id == early_payment . id :                      orig_early_payment_lines += invoice_line   if orig_early_payment_lines :                  orig_early_payment_lines . unlink ( )  self . compute_early_payment_lines ( )  return True  def onchange_partner_id ( self , cr , uid , ids , type , partner_id , date_invoice = False , payment_term = False , partner_bank_id = False , company_id = False , context = False ) :          res = super ( account_invoice , self ) . onchange_partner_id ( cr , uid , ids , type , partner_id , date_invoice = date_invoice , payment_term = payment_term , partner_bank_id = partner_bank_id , company_id = company_id , context = context ) if not partner_id :              res [ <str> ] [ <str> ] = False return res  partner = self . pool . get ( <str> ) . browse ( cr , uid , partner_id , context ) com_part_id = partner . commercial_partner_id . id early_discs = [ ] if not payment_term and not ( res . get ( <str> ) and res [ <str> ] . get ( <str> ) ) :              early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , ( <str> , <str> , False ) ] , context = context ) if early_discs :                  res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount   elif payment_term and not ( res . get ( <str> ) and res [ <str> ] . get ( <str> ) ) :              early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , ( <str> , <str> , payment_term ) ] , context = context ) if early_discs :                  res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount  else :                  early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , False ) , ( <str> , <str> , payment_term ) ] , context = context ) if early_discs :                      res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount    elif res . get ( <str> ) and res [ <str> ] . get ( <str> ) :              early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , com_part_id ) , <str> , ( <str> , <str> , res [ <str> ] [ <str> ] ) , ( <str> , <str> , False ) ] , context = context ) if early_discs :                  res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount  else :                  early_discs = self . pool . get ( <str> ) . search ( cr , uid , [ ( <str> , <str> , False ) , ( <str> , <str> , res [ <str> ] [ <str> ] ) ] , context = context ) if early_discs :                      res [ <str> ] [ <str> ] = self . pool . get ( <str> ) . browse ( cr , uid , early_discs [ 0 ] , context ) . early_payment_discount    return res  @ api . onchange ( <str> ) def onchange_payment_term ( self ) :          early_disc_obj = self . env [ <str> ] if not self . payment_term :              self . early_payment_discount = False return  self . date_due = False early_discs = early_disc_obj . search ( [ ( <str> , <str> , self . partner_id . commercial_partner_id . id ) , ( <str> , <str> , self . payment_term . id ) ] ) if early_discs :              self . early_payment_discount = early_discs . early_payment_discount  else :              early_discs = early_disc_obj . search ( [ ( <str> , <str> , False ) , ( <str> , <str> , self . payment_term . id ) ] ) if early_discs :                  self . early_payment_discount = early_discs . early_payment_discount      