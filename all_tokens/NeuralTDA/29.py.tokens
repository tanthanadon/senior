import neuraltda . simpComp as sc import neuraltda . topology2 as tp2 import neuraltda . spectralAnalysis as sa from ephys import rasters import pyslsa from importlib import reload import pickle import glob import os import datetime import numpy as np from scipy . optimize import brentq import tqdm daystr = datetime . datetime . now ( ) . strftime ( <str> ) figsavepth = <str> + daystr + <str> print ( figsavepth ) def binmat_to_scg_C ( sptrain ) :      msimps = sc . binarytomaxsimplex ( sptrain , True ) return pyslsa . build_SCG ( msimps )  def loss_C ( a , beta , dim , ncells , nsamples2 ) :      KLsave = [ ] JSsave = [ ] probs = ( a * np . ones ( ( ncells , 1 ) ) ) samples = np . random . rand ( ncells , nwin , nsamples2 ) probmat = np . tile ( probs , ( 1 , nwin ) ) [ : , : , np . newaxis ] probmat = np . tile ( probmat , ( 1 , 1 , nsamples2 ) ) binMatsamples = np . greater ( probmat , samples ) . astype ( int ) SCGs = [ ] for ind in range ( nsamples2 ) :          maxsimps = sc . binarytomaxsimplex ( binMatsamples [ : , : , ind ] , rDup = True ) Emodel = pyslsa . build_SCG ( maxsimps ) div = pyslsa . KL ( Etarget , Emodel , dim , beta ) KLsave . append ( div )  m = np . mean ( KLsave ) std = np . std ( KLsave ) stderr = std / np . sqrt ( nsamples2 ) return ( m , stderr )  ncellss = [ 10 , 20 , 50 , 100 ] ncellss = np . arange ( 10 , 110 , 10 ) nwin = 1000 a_s = [ 600.0 / ( x * 1000 ) for x in ncellss ] betas = np . linspace ( - 0.15 , - 2 , 10 ) dims = [ 1 , 2 , 3 , 4 ] KL = np . zeros ( ( 100 , len ( ncellss ) , len ( betas ) , len ( dims ) ) ) KLerr = np . zeros ( ( 100 , len ( ncellss ) , len ( betas ) , len ( dims ) ) ) Ptests = np . zeros ( ( 100 , len ( ncellss ) , len ( betas ) , len ( dims ) ) ) for I , ncell in enumerate ( ncellss ) :      a = 600.0 / ( ncell * 1000 ) probs = ( a * np . ones ( ( ncell , 1 ) ) ) nsamples = 1 samples = np . random . rand ( ncell , nwin , nsamples ) probmat = np . tile ( probs , ( 1 , nwin ) ) [ : , : , np . newaxis ] probmat = np . tile ( probmat , ( 1 , 1 , nsamples ) ) binMatsamples = np . greater ( probmat , samples ) . astype ( int ) SCGs = [ ] for ind in range ( nsamples ) :          E = binmat_to_scg_C ( binMatsamples [ : , : , ind ] ) SCGs . append ( E )  Etarget = SCGs [ 0 ] ntrials = 1 x_low = 10.0 / ( ncell * 1000. ) x_hi = 1600.0 / ( ncell * 1000. ) X = np . linspace ( x_low , x_hi , 100 ) for K , beta in enumerate ( betas ) :          for L , dim in enumerate ( dims ) :              print ( ( I , K , L ) ) for t in range ( ntrials ) :                  for M , x in tqdm . tqdm ( enumerate ( X ) ) :                      ( m , stderr ) = loss_C ( x , beta , dim , ncell , 10 ) KL [ M , I , K , L ] = m KLerr [ M , I , K , L ] = stderr Ptests [ M , I , K , L ] = x      with open ( os . path . join ( figsavepth , <str> ) , <str> ) as f :      pickle . dump ( [ KL , KLerr , Ptests , ncellss , betas , dims ] , f )   