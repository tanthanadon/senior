import numpy as np import scipy as sp import os import topology import pandas as pd def generate_poisson_ring_dataset ( N_neurons , times , fr_fact ) : 	 thetas = np . linspace ( 0 , 2 * np . pi , N_neurons ) period = float ( ( times [ - 1 ] - times [ 0 ] ) ) / ( 4 * np . pi ) norm_times = times / period nt_mat = np . tile ( norm_times , ( N_neurons , 1 ) ) phases = ( nt_mat . transpose ( ) - thetas ) . transpose ( ) fr = np . cos ( phases ) * fr_fact fr [ fr < 0 ] = 0.0 spikes = 1.0 * np . less ( np . random . uniform ( size = fr . shape ) , fr ) print ( spikes . shape ) spikes_frame = pd . DataFrame ( columns = [ <str> , <str> , <str> ] ) for neuron in range ( N_neurons ) : 		 spikes_from_neuron = times [ np . squeeze ( spikes [ neuron , : ] ) > 0 ] clusterid = ( neuron * np . ones ( len ( spikes_from_neuron ) ) ) . astype ( int ) recording = np . zeros ( len ( spikes_from_neuron ) ) . astype ( int ) toadd = pd . DataFrame ( data = { <str> : clusterid , <str> : spikes_from_neuron , <str> : recording } ) spikes_frame = spikes_frame . append ( toadd )  spikes_frame . to_pickle ( <str> ) return spikes_frame  def test_ring_dataset ( N_neurons , fs , max_fr ) : 	 times = np . array ( range ( round ( fs ) ) ) times2 = times + 60.0 * fs fr_fact = float ( max_fr ) / float ( fs ) spikes1 = generate_poisson_ring_dataset ( N_neurons , times , fr_fact ) spikes2 = generate_poisson_ring_dataset ( N_neurons , times2 , fr_fact ) spikes = spikes1 . append ( spikes2 ) trials = pd . DataFrame ( { <str> : [ times [ 0 ] , times2 [ 0 ] ] , <str> : [ <str> , <str> ] , <str> : [ times [ - 1 ] , times2 [ - 1 ] ] } ) clusterIDs = range ( N_neurons ) qualities = [ <str> for i in range ( N_neurons ) ] clusters = pd . DataFrame ( { <str> : clusterIDs , <str> : qualities } ) windt_ms = 50. n_subwin = 5 segment_info = { <str> : <str> , <str> : 0.0 , <str> : 0.0 } cluster_group = [ <str> ] kwikfile = os . path . abspath ( <str> ) kwikname = <str> topology . calc_bettis_on_loaded_dataset ( spikes , clusters , trials , fs , kwikfile , kwikname , cluster_group = cluster_group , windt_ms = windt_ms , n_subwin = 5 , segment_info = segment_info , persistence = True )   