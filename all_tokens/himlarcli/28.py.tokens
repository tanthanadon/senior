from himlarcli . keystone import Keystone from himlarcli . cinder import Cinder from himlarcli . nova import Nova from himlarcli . neutron import Neutron from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils himutils . is_virtual_env ( ) parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) ksclient = Keystone ( options . config , debug = options . debug ) logger = ksclient . get_logger ( ) regions = ksclient . find_regions ( region_name = options . region ) if not regions :      himutils . sys_error ( <str> )  def action_show ( ) :      for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) cinderclient = Cinder ( options . config , debug = options . debug , log = logger , region = region ) components = { <str> : novaclient , <str> : cinderclient } for comp , client in components . iteritems ( ) :              if options . service != <str> and comp != options . service :                  continue  if hasattr ( client , <str> ) :                  current = getattr ( client , <str> ) ( )  else :                  logger . debug ( <str> % comp ) continue  if not isinstance ( current , dict ) :                  current = current . to_dict ( )  current [ <str> ] = <str> % ( comp , region ) printer . output_dict ( current )    def action_update ( ) :      dry_run_txt = <str> if options . dry_run else <str> defaults = himutils . load_config ( <str> % options . quota_config , logger ) if not defaults :          himutils . sys_error ( <str> % options . quota_config )  for region in regions :          novaclient = Nova ( options . config , debug = options . debug , log = logger , region = region ) cinderclient = Cinder ( options . config , debug = options . debug , log = logger , region = region ) components = { <str> : novaclient , <str> : cinderclient } for comp , client in components . iteritems ( ) :              if options . service != <str> and comp != options . service :                  continue  if comp not in defaults :                  logger . debug ( <str> % comp ) continue  if hasattr ( client , <str> ) :                  current = getattr ( client , <str> ) ( )  else :                  logger . debug ( <str> % comp ) continue  if not isinstance ( current , dict ) :                  current = current . to_dict ( )  updates = dict ( ) for k , v in defaults [ comp ] . iteritems ( ) :                  if k in current and current [ k ] != v :                      logger . debug ( <str> % ( dry_run_txt , k , current [ k ] , v , region ) ) updates [ k ] = v   if updates and not options . dry_run :                  result = getattr ( client , <str> ) ( updates = updates ) logger . debug ( <str> % result )  elif not updates :                  logger . debug ( <str> % ( comp , region ) )     action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  