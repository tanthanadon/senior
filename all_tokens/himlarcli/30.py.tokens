from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils import time parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) nc = Nova ( options . config , debug = options . debug , log = logger ) nc . set_dry_run ( options . dry_run ) def action_instances ( ) :      host = nc . get_host ( nc . get_fqdn ( options . host ) ) if not host :          himutils . sys_error ( <str> % options . host )  search_opts = dict ( all_tenants = 1 , host = host . hypervisor_hostname ) instances = nc . get_all_instances ( search_opts = search_opts ) printer . output_dict ( { <str> : <str> } ) status = dict ( { <str> : 0 } ) for i in instances :          if options . type :              project = kc . get_by_id ( <str> , i . tenant_id ) if hasattr ( project , <str> ) and project . type != options . type :                  status [ <str> ] = options . type continue   output = { <str> : i . id , <str> : i . name , <str> : i . status , <str> : i . flavor [ <str> ] } printer . output_dict ( output , sort = True , one_line = True ) status [ <str> ] += 1 status [ str ( i . status ) . lower ( ) ] = status . get ( str ( i . status ) . lower ( ) , 0 ) + 1  printer . output_dict ( { <str> : <str> } ) printer . output_dict ( status )  def action_show ( ) :      host = nc . get_host ( hostname = nc . get_fqdn ( options . host ) , detailed = True ) if not host :          himutils . sys_error ( <str> % options . host )  printer . output_dict ( host . to_dict ( ) )  def action_users ( ) :      users = nc . get_users ( options . aggregate , simple = True ) printer . output_dict ( { <str> : <str> % options . aggregate , <str> : list ( users ) } )  def action_move ( ) :      hostname = nc . get_fqdn ( options . host ) instances = nc . get_instances ( host = hostname ) if instances :          himutils . sys_error ( <str> % hostname )  if nc . move_host_aggregate ( hostname = hostname , aggregate = options . aggregate ) :          print <str> % ( hostname , options . aggregate )   def action_enable ( ) :      host = nc . get_host ( hostname = nc . get_fqdn ( options . host ) , detailed = True ) if not host :          himutils . sys_error ( <str> % options . host )  if host . status != <str> and not options . dry_run :          nc . enable_host ( host . hypervisor_hostname ) print <str> % host . hypervisor_hostname   def action_disable ( ) :      host = nc . get_host ( hostname = nc . get_fqdn ( options . host ) , detailed = True ) if not host :          himutils . sys_error ( <str> % options . host )  if host . status != <str> and not options . dry_run :          nc . disable_host ( host . hypervisor_hostname ) print <str> % host . hypervisor_hostname   def action_list ( ) :      aggregates = nc . get_all_aggregate_hosts ( ) if options . aggregate == <str> :          hosts = nc . get_hosts ( )  else :          hosts = nc . get_aggregate_hosts ( options . aggregate , True )  printer . output_dict ( { <str> : <str> } ) for host in hosts :          output = { <str> : host . hypervisor_hostname , <str> : host . state , <str> : host . status , <str> : host . running_vms , <str> : host . vcpus_used , <str> : int ( host . memory_mb_used / 1024 ) , <str> : aggregates . get ( host . hypervisor_hostname , <str> ) } printer . output_dict ( output , sort = True , one_line = True )   action = locals ( ) . get ( <str> + options . action ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  