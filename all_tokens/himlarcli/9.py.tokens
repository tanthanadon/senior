from himlarcli import tests as tests tests . is_virtual_env ( ) from himlarcli . keystone import Keystone from himlarcli . nova import Nova from himlarcli . parser import Parser from himlarcli . printer import Printer from himlarcli import utils as himutils from collections import OrderedDict parser = Parser ( ) options = parser . parse_args ( ) printer = Printer ( options . format ) kc = Keystone ( options . config , debug = options . debug ) kc . set_domain ( options . domain ) kc . set_dry_run ( options . dry_run ) logger = kc . get_logger ( ) if hasattr ( options , <str> ) :      regions = kc . find_regions ( region_name = options . region )  else :      regions = kc . find_regions ( )  def action_list ( ) :      for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) flavors = nc . get_flavors ( filters = options . flavor ) outputs = [ <str> , <str> , <str> , <str> ] header = <str> % ( region , <str> . join ( outputs ) ) printer . output_dict ( { <str> : header } ) for flavor in flavors :              output = OrderedDict ( ) for out in outputs :                  output [ out ] = getattr ( flavor , out )  printer . output_dict ( objects = output , one_line = True , sort = False )    def action_update ( ) :      question = ( <str> <str> ) if not himutils . confirm_action ( question ) :          return  for region in regions :          flavors = get_flavor_config ( region ) public = flavors [ <str> ] if <str> in flavors else False properties = flavors [ <str> ] if <str> in flavors else dict ( ) if not properties or not properties . get ( <str> , None ) :              properties [ <str> ] = <str>  if ( options . flavor not in flavors or not isinstance ( flavors [ options . flavor ] , dict ) ) :              himutils . sys_error ( <str> % options . flavor )  nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) nc . set_dry_run ( options . dry_run ) for name , spec in sorted ( flavors [ options . flavor ] . iteritems ( ) ) :              flavor_properties = properties . copy ( ) if <str> in spec :                  for p_name , prop in spec [ <str> ] . iteritems ( ) :                      flavor_properties [ p_name ] = prop  del spec [ <str> ]  nc . update_flavor ( name = name , spec = spec , properties = flavor_properties , public = public )  access = nc . get_flavor_access ( filters = options . flavor ) all_projects = set ( ) for name , projects in access . iteritems ( ) :              for project_id in projects :                  all_projects . add ( project_id . tenant_id )   for project in all_projects :              nc . update_flavor_access ( filters = options . flavor , project_id = project , action = <str> )    def action_purge ( ) :      for region in regions :          flavors = get_flavor_config ( region ) nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) nc . set_dry_run ( options . dry_run ) print <str> % ( options . flavor , region ) nc . purge_flavors ( options . flavor , flavors )   def action_grant ( ) :      for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) nc . set_dry_run ( options . dry_run ) update_access ( nc , <str> , region ) print <str> % ( options . flavor , options . project , region )   def action_revoke ( ) :      for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) nc . set_dry_run ( options . dry_run ) update_access ( nc , <str> , region ) print <str> % ( options . flavor , options . project , region )   def action_list_access ( ) :      for region in regions :          nc = Nova ( options . config , debug = options . debug , log = logger , region = region ) nc . set_dry_run ( options . dry_run ) access = nc . get_flavor_access ( filters = options . flavor ) header = <str> % ( options . flavor , region ) printer . output_dict ( { <str> : header } ) output = dict ( ) for name , projects in access . iteritems ( ) :              output [ name ] = list ( ) for project_id in projects :                  project = kc . get_by_id ( <str> , project_id . tenant_id ) if project :                      output [ name ] . append ( project . name )  else :                      himutils . sys_error ( <str> % project_id . tenant_id , 0 ) continue    printer . output_dict ( output )   def get_flavor_config ( region ) :      if himutils . file_exists ( <str> % ( options . flavor , region ) ) :          configfile = <str> % ( options . flavor , region )  else :          configfile = <str> % ( options . flavor )  kc . debug_log ( <str> % configfile ) flavors = himutils . load_config ( configfile ) if not flavors :          himutils . sys_error ( <str> % options . flavor )  return flavors  def update_access ( nc , access_action , region ) :      flavors = get_flavor_config ( region ) if <str> in flavors and flavors [ <str> ] :          himutils . sys_error ( <str> )  project = kc . get_project_by_name ( options . project ) if not project :          himutils . sys_error ( <str> % project )  nc . update_flavor_access ( filters = options . flavor , project_id = project . id , action = access_action )  action = locals ( ) . get ( <str> + options . action . replace ( <str> , <str> ) ) if not action :      himutils . sys_error ( <str> % options . action )  action ( )  