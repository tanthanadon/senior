import unittest import mock import requests from cloudant . _common_util import _Code from cloudant . design_document import DesignDocument from cloudant . error import CloudantArgumentError , CloudantViewException from cloudant . result import Result from cloudant . view import View , QueryIndexView from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase class CodeTests ( unittest . TestCase ) :      def test_constructor ( self ) :          code = _Code ( <str> ) self . assertIsInstance ( code , _Code ) self . assertEqual ( code , <str> )   class CloudantViewExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantViewException ) as cm :              raise CloudantViewException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantViewException ) as cm :              raise CloudantViewException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code ( self ) :          with self . assertRaises ( CloudantViewException ) as cm :              raise CloudantViewException ( 101 )  self . assertEqual ( cm . exception . status_code , 101 )   @ attr ( db = [ <str> , <str> ] ) class ViewTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( ViewTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( ViewTests , self ) . tearDown ( )  def test_constructor ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> , <str> , <str> , dbcopy = <str> . format ( self . db . database_name ) ) self . assertEqual ( view . design_doc , ddoc ) self . assertEqual ( view . view_name , <str> ) self . assertIsInstance ( view [ <str> ] , _Code ) self . assertEqual ( view [ <str> ] , <str> ) self . assertIsInstance ( view [ <str> ] , _Code ) self . assertEqual ( view [ <str> ] , <str> ) self . assertEqual ( view [ <str> ] , <str> . format ( self . db . database_name ) ) self . assertEqual ( view , { <str> : <str> , <str> : <str> , <str> : <str> . format ( self . db . database_name ) } )  def test_map_setter ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> ) self . assertIsNone ( view . get ( <str> ) ) view . map = <str> self . assertEqual ( view . get ( <str> ) , <str> )  def test_map_getter ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> ) self . assertIsNone ( view . map ) view . map = <str> self . assertIsInstance ( view . map , _Code ) self . assertEqual ( view . map , <str> )  def test_reduce_setter ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> ) self . assertIsNone ( view . get ( <str> ) ) view . reduce = <str> self . assertEqual ( view . get ( <str> ) , <str> )  def test_reduce_getter ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> ) self . assertIsNone ( view . reduce ) view . reduce = <str> self . assertIsInstance ( view . reduce , _Code ) self . assertEqual ( view . reduce , <str> )  def test_retrieve_view_url ( self ) :          ddoc = DesignDocument ( self . db , <str> ) view = View ( ddoc , <str> ) self . assertEqual ( view . url , <str> . join ( ( ddoc . document_url , <str> ) ) )  def test_get_view_callable_raw_json ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) view = ddoc . get_view ( <str> ) ids = [ ] for row in view ( limit = 3 ) [ <str> ] :              ids . append ( row [ <str> ] )  expected = [ <str> , <str> , <str> ] self . assertTrue ( all ( x in ids for x in expected ) )  def test_post_view_callable_raw_json ( self ) :          self . populate_db_with_documents ( 200 ) keys_list = [ <str> . format ( i ) for i in range ( 0 , 200 , 2 ) ] self . assertEqual ( len ( keys_list ) , 100 ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) view = ddoc . get_view ( <str> ) ids = [ row [ <str> ] for row in view ( keys = keys_list ) [ <str> ] ] self . assertEqual ( len ( ids ) , 100 ) self . assertTrue ( all ( x in ids for x in keys_list ) )  def test_post_view_callable_raw_json_multiple_params ( self ) :          self . populate_db_with_documents ( 200 ) keys_list = [ <str> . format ( i ) for i in range ( 0 , 200 , 2 ) ] self . assertEqual ( len ( keys_list ) , 100 ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) view = ddoc . get_view ( <str> ) ids = [ row [ <str> ] for row in view ( keys = keys_list , limit = 3 ) [ <str> ] ] self . assertTrue ( all ( x in ids for x in [ <str> , <str> , <str> ] ) )  def test_view_callable_view_result ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) view = ddoc . get_view ( <str> ) rslt = view . result self . assertIsInstance ( rslt , Result ) ids = [ ] for row in rslt [ : 3 ] :              ids . append ( row [ <str> ] )  expected = [ <str> , <str> , <str> ] self . assertTrue ( all ( x in ids for x in expected ) )  def test_view_callable_with_non_existing_view ( self ) :          self . populate_db_with_documents ( ) view = View ( DesignDocument ( self . db , <str> ) , <str> , <str> ) self . assertIsInstance ( view , View ) try :              for row in view . result :                  self . fail ( <str> )   except requests . HTTPError as err :              self . assertEqual ( err . response . status_code , 404 )   def test_custom_result_context_manager ( self ) :          self . populate_db_with_documents ( ) ddoc = DesignDocument ( self . db , <str> ) ddoc . add_view ( <str> , <str> ) ddoc . save ( ) view = ddoc . get_view ( <str> ) with view . custom_result ( include_docs = True , reduce = False ) as rslt :              i = 0 for row in rslt :                  self . assertEqual ( row [ <str> ] [ <str> ] , <str> . format ( i ) ) self . assertTrue ( row [ <str> ] [ <str> ] . startswith ( <str> ) ) self . assertEqual ( row [ <str> ] [ <str> ] , <str> ) self . assertEqual ( row [ <str> ] [ <str> ] , i ) i += 1  self . assertEqual ( i , 100 )    class QueryIndexViewTests ( unittest . TestCase ) :      def setUp ( self ) :          self . ddoc = mock . Mock ( ) self . ddoc . r_session = <str> self . ddoc . document_url = <str> self . view = QueryIndexView ( self . ddoc , <str> , { <str> : { <str> : <str> , <str> : <str> } } , <str> , options = { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } )  def test_constructor ( self ) :          self . assertIsInstance ( self . view , QueryIndexView ) self . assertEqual ( self . view . design_doc , self . ddoc ) self . assertEqual ( self . view . view_name , <str> ) self . assertIsNone ( self . view . result ) self . assertEqual ( self . view , { <str> : { <str> : { <str> : <str> , <str> : <str> } } , <str> : <str> , <str> : { <str> : { <str> : [ <str> , <str> ] } , <str> : 2 } } )  def test_map_getter ( self ) :          self . assertEqual ( self . view . map , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( self . view . map , self . view [ <str> ] )  def test_map_setter ( self ) :          self . view . map = { <str> : { <str> : <str> , <str> : <str> } } self . assertEqual ( self . view . map , { <str> : { <str> : <str> , <str> : <str> } } ) self . assertEqual ( self . view . map , self . view [ <str> ] )  def test_map_setter_failure ( self ) :          try :              self . view . map = <str> self . fail ( <str> )  except CloudantArgumentError as err :              self . assertEqual ( str ( err ) , <str> )   def test_reduce_getter ( self ) :          self . assertEqual ( self . view . reduce , <str> ) self . assertEqual ( self . view . reduce , self . view [ <str> ] )  def test_reduce_setter ( self ) :          self . view . reduce = <str> self . assertEqual ( self . view . reduce , <str> ) self . assertEqual ( self . view . reduce , self . view [ <str> ] )  def test_reduce_setter_failure ( self ) :          with self . assertRaises ( CloudantArgumentError ) as cm :              self . view . reduce = { <str> }  err = cm . exception self . assertEqual ( str ( err ) , <str> )  def test_callable_disabled ( self ) :          with self . assertRaises ( CloudantViewException ) as cm :              self . view ( )  err = cm . exception self . assertEqual ( str ( err ) , <str> <str> <str> )  def test_custom_result_disabled ( self ) :          with self . assertRaises ( CloudantViewException ) as cm :              with self . view . custom_result ( ) as result :                  pass   err = cm . exception self . assertEqual ( str ( err ) , <str> <str> <str> )   if __name__ == <str> :      unittest . main ( )   