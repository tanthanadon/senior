import uuid import unittest from cloudant import cloudant , couchdb from . . credentials import read_dot_cloudant , read_dot_couch class E2ECouchTest ( unittest . TestCase ) :      def setUp ( self ) :          self . user , self . passwd = read_dot_couch ( filename = <str> ) self . dbname = <str> . format ( str ( uuid . uuid4 ( ) ) )  def test_end_to_end ( self ) :          with couchdb ( self . user , self . passwd , url = <str> ) as c :              session = c . session ( ) self . assertEqual ( session [ <str> ] [ <str> ] , self . user ) db = c . create_database ( self . dbname ) try :                  self . assertIn ( self . dbname , c ) self . assertTrue ( db . exists ( ) ) doc1 = db . new_document ( ) doc2 = db . create_document ( { <str> : <str> , <str> : <str> } ) doc3 = db . create_document ( { <str> : <str> } ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc2 ) self . assertIn ( <str> , doc2 ) self . assertIn ( <str> , doc3 ) self . assertIn ( <str> , doc3 ) self . assertIn ( doc1 [ <str> ] , db ) self . assertIn ( doc2 [ <str> ] , db ) self . assertIn ( doc3 [ <str> ] , db ) self . assertEqual ( db [ doc1 [ <str> ] ] , doc1 ) self . assertEqual ( db [ doc2 [ <str> ] ] , doc2 ) self . assertEqual ( db [ doc3 [ <str> ] ] , doc3 ) with doc2 as working_doc :                      working_doc [ <str> ] = [ 1 , 2 , 3 ] working_doc [ <str> ] = { <str> : <str> }  self . assertEqual ( c [ self . dbname ] [ <str> ] [ <str> ] , { <str> : <str> } )  finally :                  c . delete_database ( self . dbname )     class E2ECloudantTest ( unittest . TestCase ) :      def setUp ( self ) :          self . user , self . passwd = read_dot_cloudant ( filename = <str> ) self . dbname = <str> . format ( str ( uuid . uuid4 ( ) ) )  def test_end_to_end ( self ) :          with cloudant ( self . user , self . passwd , account = self . user ) as c :              session = c . session ( ) self . assertEqual ( session [ <str> ] [ <str> ] , self . user ) db = c . create_database ( self . dbname ) try :                  self . assertIn ( self . dbname , c ) self . assertTrue ( db . exists ( ) ) doc1 = db . new_document ( ) doc2 = db . create_document ( { <str> : <str> , <str> : <str> } ) doc3 = db . create_document ( { <str> : <str> } ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc1 ) self . assertIn ( <str> , doc2 ) self . assertIn ( <str> , doc2 ) self . assertIn ( <str> , doc3 ) self . assertIn ( <str> , doc3 ) self . assertIn ( doc1 [ <str> ] , db ) self . assertIn ( doc2 [ <str> ] , db ) self . assertIn ( doc3 [ <str> ] , db ) self . assertEqual ( db [ doc1 [ <str> ] ] , doc1 ) self . assertEqual ( db [ doc2 [ <str> ] ] , doc2 ) self . assertEqual ( db [ doc3 [ <str> ] ] , doc3 ) with doc2 as working_doc :                      working_doc [ <str> ] = [ 1 , 2 , 3 ] working_doc [ <str> ] = { <str> : <str> }  self . assertEqual ( c [ self . dbname ] [ <str> ] [ <str> ] , { <str> : <str> } )  finally :                  c . delete_database ( self . dbname )     if __name__ == <str> :      unittest . main ( )   