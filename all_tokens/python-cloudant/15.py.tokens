import cloudant import inspect import json import os import unittest import uuid from datetime import datetime import mock import requests from cloudant . document import Document from cloudant . error import CloudantDocumentException from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase from . . import StringIO , unicode_ def find_fixture ( name ) :      import tests . unit . fixtures as fixtures dirname = os . path . dirname ( inspect . getsourcefile ( fixtures ) ) filename = os . path . join ( dirname , name ) return filename  class CloudantDocumentExceptionTests ( unittest . TestCase ) :      def test_raise_without_code ( self ) :          with self . assertRaises ( CloudantDocumentException ) as cm :              raise CloudantDocumentException ( )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_using_invalid_code ( self ) :          with self . assertRaises ( CloudantDocumentException ) as cm :              raise CloudantDocumentException ( <str> )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_without_args ( self ) :          with self . assertRaises ( CloudantDocumentException ) as cm :              raise CloudantDocumentException ( 102 )  self . assertEqual ( cm . exception . status_code , 100 )  def test_raise_with_proper_code_and_args ( self ) :          with self . assertRaises ( CloudantDocumentException ) as cm :              raise CloudantDocumentException ( 102 , <str> )  self . assertEqual ( cm . exception . status_code , 102 )   @ attr ( db = [ <str> , <str> ] ) class DocumentTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( DocumentTests , self ) . setUp ( ) self . db_set_up ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( DocumentTests , self ) . tearDown ( )  def test_constructor_with_docid ( self ) :          doc = Document ( self . db , <str> ) self . assertIsInstance ( doc , Document ) self . assertEqual ( doc . r_session , self . db . r_session ) self . assertEqual ( doc . get ( <str> ) , <str> )  def test_document_url ( self ) :          doc = Document ( self . db , <str> ) self . assertEqual ( doc . document_url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_document_url_encodes_correctly ( self ) :          doc = Document ( self . db , <str> ) self . assertEqual ( doc . document_url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_design_document_url ( self ) :          doc = Document ( self . db , <str> ) self . assertEqual ( doc . document_url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_design_document_url_encodes_correctly ( self ) :          doc = Document ( self . db , <str> ) self . assertEqual ( doc . document_url , <str> . join ( ( self . db . database_url , <str> ) ) )  def test_constructor_without_docid ( self ) :          doc = Document ( self . db ) self . assertIsInstance ( doc , Document ) self . assertEqual ( doc . r_session , self . db . r_session ) self . assertIsNone ( doc . get ( <str> ) ) self . assertIsNone ( doc . document_url )  def test_document_exists ( self ) :          doc = Document ( self . db ) self . assertFalse ( doc . exists ( ) ) doc [ <str> ] = <str> self . assertFalse ( doc . exists ( ) ) doc . create ( ) self . assertTrue ( doc . exists ( ) )  def test_document_exists_raises_httperror ( self ) :          resp = requests . Response ( ) resp . status_code = 400 self . client . r_session . head = mock . Mock ( return_value = resp ) doc = Document ( self . db ) doc [ <str> ] = <str> with self . assertRaises ( requests . HTTPError ) as cm :              doc . exists ( )  err = cm . exception self . assertEqual ( err . response . status_code , 400 ) self . client . r_session . head . assert_called_with ( doc . document_url )  def test_retrieve_document_json ( self ) :          doc = Document ( self . db ) doc [ <str> ] = <str> doc [ <str> ] = <str> doc [ <str> ] = 6 doc_as_json = doc . json ( ) self . assertIsInstance ( doc_as_json , str ) self . assertEqual ( json . loads ( doc_as_json ) , doc )  def test_create_document_with_docid ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 self . assertFalse ( doc . exists ( ) ) self . assertIsNone ( doc . get ( <str> ) ) doc . create ( ) self . assertTrue ( doc . exists ( ) ) self . assertTrue ( doc . get ( <str> ) . startswith ( <str> ) )  def test_create_document_with_docid_encoded_url ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 self . assertFalse ( doc . exists ( ) ) self . assertIsNone ( doc . get ( <str> ) ) doc . create ( ) self . assertTrue ( doc . exists ( ) ) self . assertTrue ( doc . get ( <str> ) . startswith ( <str> ) )  def test_create_document_without_docid ( self ) :          doc = Document ( self . db ) doc [ <str> ] = <str> doc [ <str> ] = 6 self . assertFalse ( doc . exists ( ) ) self . assertIsNone ( doc . get ( <str> ) ) self . assertIsNone ( doc . get ( <str> ) ) doc . create ( ) self . assertTrue ( doc . exists ( ) ) self . assertIsNotNone ( doc . get ( <str> ) ) self . assertTrue ( doc . get ( <str> ) . startswith ( <str> ) )  def test_create_existing_document ( self ) :          doc = Document ( self . db , <str> ) doc . create ( ) with self . assertRaises ( requests . HTTPError ) as cm :              doc . create ( )  err = cm . exception self . assertEqual ( err . response . status_code , 409 )  def test_fetch_document_without_docid ( self ) :          doc = Document ( self . db ) try :              doc . fetch ( ) self . fail ( <str> )  except CloudantDocumentException as err :              self . assertEqual ( str ( err ) , <str> <str> )   def test_fetch_non_existing_document ( self ) :          doc = Document ( self . db , <str> ) try :              doc . fetch ( ) self . fail ( <str> )  except requests . HTTPError as err :              self . assertEqual ( err . response . status_code , 404 )   def test_fetch_existing_document_with_docid ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . create ( ) new_doc = Document ( self . db , <str> ) new_doc . fetch ( ) self . assertEqual ( new_doc , doc )  def test_appended_error_message_using_save_with_invalid_key ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> with self . assertRaises ( requests . HTTPError ) as cm :              doc . save ( )  err = cm . exception if err . response . status_code == 500 :              self . assertTrue ( self . client . r_session . head ( self . url ) . headers [ <str> ] . find ( <str> ) >= 0 , <str> ) self . assertEqual ( str ( err . response . reason ) , <str> )  else :              self . assertEqual ( str ( err . response . reason ) , <str> ) self . assertEqual ( err . response . status_code , 400 )   def test_fetch_existing_document_with_docid_encoded_url ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . create ( ) new_doc = Document ( self . db , <str> ) new_doc . fetch ( ) self . assertEqual ( new_doc , doc )  def test_create_document_using_save ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 self . assertIsNone ( doc . get ( <str> ) ) doc . save ( ) self . assertTrue ( doc . exists ( ) ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) remote_doc = Document ( self . db , <str> ) remote_doc . fetch ( ) self . assertEqual ( remote_doc , doc )  def test_update_document_using_save ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . save ( ) doc [ <str> ] = <str> doc . save ( ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) remote_doc = Document ( self . db , <str> ) remote_doc . fetch ( ) self . assertEqual ( remote_doc , doc ) self . assertEqual ( remote_doc [ <str> ] , <str> )  def test_update_document_with_encoded_url ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . save ( ) doc [ <str> ] = <str> doc . save ( ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) remote_doc = Document ( self . db , <str> ) remote_doc . fetch ( ) self . assertEqual ( remote_doc , doc ) self . assertEqual ( remote_doc [ <str> ] , <str> )  def test_list_field_append_successfully ( self ) :          doc = Document ( self . db ) self . assertEqual ( doc , { } ) doc . list_field_append ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : [ <str> ] } ) doc . list_field_append ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : [ <str> , <str> ] } ) doc . list_field_append ( doc , <str> , None ) self . assertEqual ( doc , { <str> : [ <str> , <str> ] } )  def test_list_field_append_failure ( self ) :          doc = Document ( self . db ) doc . field_set ( doc , <str> , <str> ) try :              doc . list_field_append ( doc , <str> , <str> ) self . fail ( <str> )  except CloudantDocumentException as err :              self . assertEqual ( str ( err ) , <str> )  self . assertEqual ( doc , { <str> : <str> } )  def test_list_field_remove_successfully ( self ) :          doc = Document ( self . db ) self . assertEqual ( doc , { } ) doc . list_field_append ( doc , <str> , <str> ) doc . list_field_append ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : [ <str> , <str> ] } ) doc . list_field_remove ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : [ <str> ] } )  def test_list_field_remove_failure ( self ) :          doc = Document ( self . db ) doc . field_set ( doc , <str> , <str> ) try :              doc . list_field_remove ( doc , <str> , <str> ) self . fail ( <str> )  except CloudantDocumentException as err :              self . assertEqual ( str ( err ) , <str> )  self . assertEqual ( doc , { <str> : <str> } )  def test_field_set_and_replace ( self ) :          doc = Document ( self . db ) self . assertEqual ( doc , { } ) doc . field_set ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : <str> } ) doc . field_set ( doc , <str> , <str> ) self . assertEqual ( doc , { <str> : <str> } ) doc . field_set ( doc , <str> , [ <str> , <str> ] ) self . assertEqual ( doc , { <str> : <str> , <str> : [ <str> , <str> ] } ) doc . field_set ( doc , <str> , None ) self . assertEqual ( doc , { <str> : <str> } )  def test_update_field ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc [ <str> ] = [ <str> , <str> ] doc . create ( ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , [ <str> , <str> ] ) doc . update_field ( doc . list_field_append , <str> , <str> ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , [ <str> , <str> , <str> ] )  @ mock . patch ( <str> ) def test_update_field_maxretries ( self , m_save ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . create ( ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , 6 ) m_save . side_effect = requests . HTTPError ( response = mock . Mock ( status_code = 409 , reason = <str> ) ) with self . assertRaises ( requests . HTTPError ) as cm :              doc . update_field ( doc . field_set , <str> , 7 , max_tries = 2 )  self . assertEqual ( m_save . call_count , 3 ) self . assertEqual ( cm . exception . response . status_code , 409 ) self . assertEqual ( cm . exception . response . reason , <str> ) doc . fetch ( ) self . assertFalse ( doc [ <str> ] . startswith ( <str> ) ) self . assertNotEqual ( doc [ <str> ] , 7 )  def test_update_field_success_on_retry ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . create ( ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , 6 ) class SaveMock ( object ) :              calls = 0 def save ( self ) :                  if self . calls == 0 :                      self . calls += 1 raise requests . HTTPError ( response = mock . Mock ( status_code = 409 , reason = <str> ) )  else :                      return cloudant . document . Document . save ( doc )    with mock . patch . object ( doc , <str> , side_effect = SaveMock ( ) . save ) as m_save :              doc . update_field ( doc . field_set , <str> , 7 , max_tries = 1 )  self . assertEqual ( m_save . call_count , 2 ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , 7 )  def test_delete_document_failure ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc [ <str> ] = [ <str> , <str> ] try :              doc . delete ( ) self . fail ( <str> )  except CloudantDocumentException as err :              self . assertEqual ( str ( err ) , <str> <str> )   def test_delete_document_success ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc [ <str> ] = [ <str> , <str> ] doc . create ( ) self . assertTrue ( doc . exists ( ) ) doc . delete ( ) self . assertFalse ( doc . exists ( ) ) self . assertEqual ( doc , { <str> : <str> } )  def test_delete_document_success_with_encoded_url ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc [ <str> ] = [ <str> , <str> ] doc . create ( ) self . assertTrue ( doc . exists ( ) ) doc . delete ( ) self . assertFalse ( doc . exists ( ) ) self . assertEqual ( doc , { <str> : <str> } )  def test_document_context_manager ( self ) :          new_doc = Document ( self . db , <str> ) new_doc . create ( ) self . assertTrue ( new_doc . exists ( ) ) del new_doc with Document ( self . db , <str> ) as doc :              self . assertTrue ( all ( x in list ( doc . keys ( ) ) for x in [ <str> , <str> ] ) ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) doc [ <str> ] = <str> doc [ <str> ] = 6  self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( self . db [ <str> ] , doc )  def test_document_context_manager_no_doc_id ( self ) :          with Document ( self . db ) as doc :              doc [ <str> ] = <str> doc [ <str> ] = <str> doc [ <str> ] = 6  self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( self . db [ <str> ] , doc )  def test_document_context_manager_creation_failure_on_error ( self ) :          with self . assertRaises ( ZeroDivisionError ) , Document ( self . db , <str> ) as doc :              doc [ <str> ] = <str> doc [ <str> ] = 6 raise ZeroDivisionError ( )  doc = Document ( self . db , <str> ) try :              doc . fetch ( )  except requests . HTTPError as err :              self . assertEqual ( err . response . status_code , 404 )  else :              self . fail ( <str> )   def test_document_context_manager_update_failure_on_error ( self ) :          doc = Document ( self . db , <str> ) doc [ <str> ] = <str> doc [ <str> ] = 6 doc . save ( ) with self . assertRaises ( ZeroDivisionError ) , Document ( self . db , <str> ) as doc :              doc [ <str> ] = 7 raise ZeroDivisionError ( )  self . assertEqual ( doc [ <str> ] , 7 ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( self . db [ <str> ] [ <str> ] , 6 )  def test_document_context_manager_doc_create ( self ) :          with Document ( self . db , <str> ) as doc :              doc [ <str> ] = <str> doc [ <str> ] = 6  self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) self . assertEqual ( self . db [ <str> ] , doc )  def test_setting_id ( self ) :          doc = Document ( self . db ) self . assertIsNone ( doc . get ( <str> ) ) doc [ <str> ] = <str> self . assertEqual ( doc [ <str> ] , <str> )  def test_removing_id ( self ) :          doc = Document ( self . db ) doc [ <str> ] = <str> del doc [ <str> ] self . assertIsNone ( doc . get ( <str> ) )  def test_get_text_attachment ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) attachment = StringIO ( ) try :              filename = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) , <str> ) attachment . write ( <str> ) attachment . write ( <str> ) resp = doc . put_attachment ( filename , <str> , attachment . getvalue ( ) ) with open ( find_fixture ( filename ) , <str> ) as f :                  text_attachment = doc . get_attachment ( filename , write_to = f ) self . assertEqual ( text_attachment , attachment . getvalue ( ) )  with open ( find_fixture ( filename ) , <str> ) as f :                  self . assertEqual ( f . read ( ) , attachment . getvalue ( ) )   finally :              attachment . close ( ) os . remove ( find_fixture ( filename ) )   def test_get_json_attachment ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) try :              filename = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) , <str> ) data = { <str> : <str> , <str> : 99 } resp = doc . put_attachment ( filename , <str> , json . dumps ( data ) ) with open ( find_fixture ( filename ) , <str> ) as f :                  json_attachment = doc . get_attachment ( filename , write_to = f ) self . assertIsInstance ( json_attachment , dict ) self . assertEqual ( json_attachment , data )  with open ( find_fixture ( filename ) , <str> ) as f :                  self . assertEqual ( f . read ( ) , json . dumps ( data ) )   finally :              os . remove ( find_fixture ( filename ) )   def test_get_binary_attachment ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) try :              filename = <str> . format ( unicode_ ( uuid . uuid4 ( ) ) , <str> ) data = None with open ( find_fixture ( <str> ) , <str> ) as f :                  data = f . read ( ) resp = doc . put_attachment ( filename , <str> , data )  with open ( find_fixture ( filename ) , <str> ) as f :                  binary_attachment = doc . get_attachment ( filename , write_to = f ) self . assertEqual ( binary_attachment , data )  with open ( find_fixture ( filename ) , <str> ) as f :                  self . assertEqual ( f . read ( ) , data )   finally :              os . remove ( find_fixture ( filename ) )   def test_attachment_management ( self ) :          doc = self . db . create_document ( { <str> : <str> , <str> : <str> , <str> : 6 } ) attachment = StringIO ( ) try :              attachment . write ( <str> ) attachment . write ( <str> ) self . assertTrue ( doc [ <str> ] . startswith ( <str> ) ) resp = doc . put_attachment ( <str> , <str> , attachment . getvalue ( ) ) self . assertTrue ( resp [ <str> ] ) self . assertTrue ( resp [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , resp [ <str> ] ) self . assertTrue ( all ( x in list ( doc . keys ( ) ) for x in [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertTrue ( all ( x in list ( doc [ <str> ] . keys ( ) ) for x in [ <str> ] ) ) orig_size = doc [ <str> ] [ <str> ] [ <str> ] self . assertEqual ( orig_size , len ( attachment . getvalue ( ) ) ) expected = Document ( self . db , <str> ) expected . fetch ( ) self . assertEqual ( doc . get_attachment ( <str> , attachment_type = <str> ) , attachment . getvalue ( ) ) attachment . write ( <str> ) resp = doc . put_attachment ( <str> , <str> , attachment . getvalue ( ) ) self . assertTrue ( resp [ <str> ] ) self . assertTrue ( resp [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , resp [ <str> ] ) self . assertTrue ( all ( x in list ( doc . keys ( ) ) for x in [ <str> , <str> , <str> , <str> , <str> ] ) ) self . assertTrue ( all ( x in list ( doc [ <str> ] . keys ( ) ) for x in [ <str> ] ) ) updated_size = doc [ <str> ] [ <str> ] [ <str> ] self . assertTrue ( updated_size > orig_size ) self . assertEqual ( updated_size , len ( attachment . getvalue ( ) ) ) self . assertEqual ( doc . get_attachment ( <str> , attachment_type = <str> ) , attachment . getvalue ( ) ) expected = Document ( self . db , <str> ) expected . fetch ( ) resp = doc . put_attachment ( <str> , <str> , attachment . getvalue ( ) ) resp = doc . delete_attachment ( <str> ) self . assertTrue ( resp [ <str> ] ) self . assertTrue ( resp [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , resp [ <str> ] ) self . assertTrue ( all ( x in list ( doc . keys ( ) ) for x in [ <str> , <str> , <str> , <str> , <str> ] ) ) expected = Document ( self . db , <str> ) expected . fetch ( ) self . assertEqual ( doc , expected ) resp = doc . delete_attachment ( <str> ) self . assertTrue ( resp [ <str> ] ) self . assertTrue ( resp [ <str> ] . startswith ( <str> ) ) self . assertEqual ( doc [ <str> ] , resp [ <str> ] ) self . assertTrue ( all ( x in list ( doc . keys ( ) ) for x in [ <str> , <str> , <str> , <str> ] ) ) expected = Document ( self . db , <str> ) expected . fetch ( ) self . assertEqual ( doc , expected )  finally :              attachment . close ( )   def test_document_request_fails_after_client_disconnects ( self ) :          self . client . connect ( ) doc = Document ( self . db , <str> ) doc . save ( ) self . client . disconnect ( ) try :              with self . assertRaises ( AttributeError ) :                  doc . fetch ( )  self . assertIsNone ( doc . r_session )  finally :              self . client . connect ( )   def test_document_custom_json_encoder_and_decoder ( self ) :          dt_format = <str> class DTEncoder ( json . JSONEncoder ) :              def default ( self , obj ) :                  if isinstance ( obj , datetime ) :                      return { <str> : <str> , <str> : obj . strftime ( dt_format ) }  return super ( DTEncoder , self ) . default ( obj )   class DTDecoder ( json . JSONDecoder ) :              def __init__ ( self , * args , ** kwargs ) :                  json . JSONDecoder . __init__ ( self , object_hook = self . object_hook , * args , ** kwargs )  def object_hook ( self , obj ) :                  if <str> not in obj :                      return obj  if obj [ <str> ] == <str> :                      return datetime . strptime ( obj [ <str> ] , dt_format )  return obj   doc = Document ( self . db , encoder = DTEncoder ) doc [ <str> ] = <str> doc [ <str> ] = datetime ( 2018 , 7 , 9 , 15 , 11 , 10 , 0 ) doc . save ( ) raw_doc = self . db . all_docs ( include_docs = True ) [ <str> ] [ 0 ] [ <str> ] self . assertEquals ( raw_doc [ <str> ] , <str> ) self . assertEquals ( raw_doc [ <str> ] [ <str> ] , <str> ) self . assertEquals ( raw_doc [ <str> ] [ <str> ] , <str> ) doc2 = Document ( self . db , doc [ <str> ] , decoder = DTDecoder ) doc2 . fetch ( ) self . assertEquals ( doc2 [ <str> ] , doc [ <str> ] )   if __name__ == <str> :      unittest . main ( )   