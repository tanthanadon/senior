import unittest from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase @ attr ( db = [ <str> , <str> ] ) class QueryParmExecutionTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( QueryParmExecutionTests , self ) . setUp ( ) self . db_set_up ( ) self . populate_db_with_documents ( ) self . create_views ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( QueryParmExecutionTests , self ) . tearDown ( )  def test_descending_true ( self ) :          actual = self . view001 ( descending = True ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] self . assertEqual ( actual , list ( reversed ( expected ) ) )  def test_descending_false ( self ) :          actual = self . view001 ( descending = False ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] self . assertEqual ( actual , expected )  def test_endkey_int ( self ) :          actual = self . view003 ( endkey = 4 ) [ <str> ] expected = [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 ) ] self . assertEqual ( len ( actual ) , 10 ) self . assertEqual ( len ( expected ) , 10 ) self . assertEqual ( actual , expected )  def test_endkey_str ( self ) :          actual = self . view001 ( endkey = <str> ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 ) ] self . assertEqual ( len ( actual ) , 10 ) self . assertEqual ( len ( expected ) , 10 ) self . assertEqual ( actual , expected )  def test_endkey_complex ( self ) :          actual = self . view005 ( endkey = [ <str> , 9 ] ) [ <str> ] expected = [ { <str> : [ <str> , x ] , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 ) ] self . assertEqual ( len ( actual ) , 10 ) self . assertEqual ( len ( expected ) , 10 ) self . assertEqual ( actual , expected )  def test_endkey_docid ( self ) :          actual = self . view003 ( endkey_docid = <str> , endkey = 5 ) [ <str> ] expected = [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 11 ) ] self . assertEqual ( len ( actual ) , 11 ) self . assertEqual ( len ( expected ) , 11 ) self . assertEqual ( actual , expected )  def test_group_true ( self ) :          actual = self . view004 ( group = True ) [ <str> ] expected = [ { <str> : x , <str> : 2 } for x in range ( 50 ) ] self . assertEqual ( len ( actual ) , 50 ) self . assertEqual ( len ( expected ) , 50 ) self . assertEqual ( actual , expected )  def test_group_false ( self ) :          actual = self . view004 ( group = False ) [ <str> ] self . assertEqual ( actual , [ { <str> : None , <str> : 100 } ] )  def test_group_level ( self ) :          actual = self . view006 ( group_level = 1 ) [ <str> ] expected = [ { <str> : [ <str> ] , <str> : 100 } ] self . assertEqual ( actual , expected )  def test_include_docs_true ( self ) :          data = self . view001 ( key = <str> , include_docs = True ) [ <str> ] self . assertEqual ( len ( data ) , 1 ) self . assertTrue ( all ( x in [ <str> , <str> , <str> , <str> ] for x in data [ 0 ] . keys ( ) ) ) self . assertEqual ( data [ 0 ] [ <str> ] , <str> ) self . assertEqual ( data [ 0 ] [ <str> ] , <str> ) self . assertEqual ( data [ 0 ] [ <str> ] , 1 ) self . assertTrue ( all ( x in [ <str> , <str> , <str> , <str> ] for x in data [ 0 ] [ <str> ] . keys ( ) ) ) self . assertEqual ( data [ 0 ] [ <str> ] [ <str> ] , <str> ) self . assertTrue ( data [ 0 ] [ <str> ] [ <str> ] . startswith ( <str> ) ) self . assertEqual ( data [ 0 ] [ <str> ] [ <str> ] , <str> ) self . assertEqual ( data [ 0 ] [ <str> ] [ <str> ] , 10 )  def test_include_docs_false ( self ) :          actual = self . view001 ( key = <str> , include_docs = False ) [ <str> ] expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_inclusive_end_true ( self ) :          actual = self . view001 ( endkey = <str> , inclusive_end = True ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 11 ) ] self . assertEqual ( actual , expected )  def test_inclusive_end_false ( self ) :          actual = self . view001 ( endkey = <str> , inclusive_end = False ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 ) ] self . assertEqual ( actual , expected )  def test_key_int ( self ) :          actual = self . view003 ( key = 5 ) [ <str> ] expected = [ { <str> : 5 , <str> : <str> , <str> : 1 } , { <str> : 5 , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_key_str ( self ) :          actual = self . view001 ( key = <str> ) [ <str> ] expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_key_complex ( self ) :          actual = self . view005 ( key = [ <str> , 10 ] ) [ <str> ] expected = [ { <str> : [ <str> , 10 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_keys_int ( self ) :          actual = self . view003 ( keys = [ 10 , 20 , 30 ] ) [ <str> ] expected = [ { <str> : 10 , <str> : <str> , <str> : 1 } , { <str> : 10 , <str> : <str> , <str> : 1 } , { <str> : 20 , <str> : <str> , <str> : 1 } , { <str> : 20 , <str> : <str> , <str> : 1 } , { <str> : 30 , <str> : <str> , <str> : 1 } , { <str> : 30 , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_keys_str ( self ) :          actual = self . view001 ( keys = [ <str> , <str> , <str> ] ) [ <str> ] expected = [ { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_keys_complex ( self ) :          actual = self . view005 ( keys = [ [ <str> , 10 ] , [ <str> , 20 ] , [ <str> , 30 ] ] ) [ <str> ] expected = [ { <str> : [ <str> , 10 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 20 ] , <str> : <str> , <str> : 1 } , { <str> : [ <str> , 30 ] , <str> : <str> , <str> : 1 } ] self . assertEqual ( actual , expected )  def test_limit ( self ) :          actual = self . view001 ( limit = 10 ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 ) ] self . assertEqual ( actual , expected )  def test_reduce_true ( self ) :          actual = self . view004 ( reduce = True ) [ <str> ] self . assertEqual ( actual , [ { <str> : None , <str> : 100 } ] )  def test_reduce_false ( self ) :          actual = self . view004 ( reduce = False ) [ <str> ] expected = [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 100 ) ] self . assertEqual ( len ( actual ) , 100 ) self . assertEqual ( len ( expected ) , 100 ) self . assertEqual ( actual , expected )  def test_skip ( self ) :          actual = self . view001 ( skip = 10 ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 , 100 ) ] self . assertEqual ( actual , expected )  def test_stale_ok ( self ) :          try :              self . view001 ( stale = <str> )  except Exception as err :              self . fail ( <str> + str ( err ) )   def test_stale_update_after ( self ) :          try :              self . view001 ( stale = <str> )  except Exception as err :              self . fail ( <str> + str ( err ) )   def test_stable_true ( self ) :          try :              self . view001 ( stable = True )  except Exception as err :              self . fail ( <str> + str ( err ) )   def test_stable_update_lazy ( self ) :          try :              self . view001 ( update = <str> )  except Exception as err :              self . fail ( <str> + str ( err ) )   def test_stable_update_true ( self ) :          try :              self . view001 ( update = <str> )  except Exception as err :              self . fail ( <str> + str ( err ) )   def test_startkey_int ( self ) :          actual = self . view003 ( startkey = 5 ) [ <str> ] expected = [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 , 100 ) ] self . assertEqual ( len ( actual ) , 90 ) self . assertEqual ( len ( expected ) , 90 ) self . assertEqual ( actual , expected )  def test_startkey_str ( self ) :          actual = self . view001 ( startkey = <str> ) [ <str> ] expected = [ { <str> : <str> . format ( x ) , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 , 100 ) ] self . assertEqual ( len ( actual ) , 90 ) self . assertEqual ( len ( expected ) , 90 ) self . assertEqual ( actual , expected )  def test_startkey_complex ( self ) :          actual = self . view005 ( startkey = [ <str> , 10 ] ) [ <str> ] expected = [ { <str> : [ <str> , x ] , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 10 , 100 ) ] self . assertEqual ( len ( actual ) , 90 ) self . assertEqual ( len ( expected ) , 90 ) self . assertEqual ( actual , expected )  def test_startkey_docid ( self ) :          actual = self . view003 ( startkey_docid = <str> , startkey = 5 ) [ <str> ] expected = [ { <str> : x // 2 , <str> : <str> . format ( x ) , <str> : 1 } for x in range ( 11 , 100 ) ] self . assertEqual ( len ( actual ) , 89 ) self . assertEqual ( len ( expected ) , 89 ) self . assertEqual ( actual , expected )   if __name__ == <str> :      unittest . main ( )   