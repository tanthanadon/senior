import os import time import unittest import requests from cloudant . _client_session import CookieSession from nose . plugins . attrib import attr from . unit_t_db_base import skip_if_not_cookie_auth , UnitTestDbBase @ attr ( db = [ <str> , <str> ] ) @ unittest . skipIf ( os . environ . get ( <str> ) == <str> , <str> ) class AuthRenewalTests ( UnitTestDbBase ) :      def setUp ( self ) :          pass  def tearDown ( self ) :          pass  @ skip_if_not_cookie_auth def test_client_db_doc_stack_success ( self ) :          try :              self . set_up_client ( auto_connect = True , auto_renew = True ) db = self . client . _DATABASE_CLASS ( self . client , self . dbname ( ) ) db . create ( ) db_2 = self . client . _DATABASE_CLASS ( self . client , self . dbname ( ) ) doc = db . create_document ( { <str> : <str> , <str> : <str> } ) auth_session = self . client . r_session . cookies . get ( <str> ) db_auth_session = db . r_session . cookies . get ( <str> ) db_2_auth_session = db_2 . r_session . cookies . get ( <str> ) doc_auth_session = doc . r_session . cookies . get ( <str> ) self . assertIsInstance ( self . client . r_session , CookieSession ) self . assertIsInstance ( db . r_session , CookieSession ) self . assertIsInstance ( db_2 . r_session , CookieSession ) self . assertIsInstance ( doc . r_session , CookieSession ) self . assertIsNotNone ( auth_session ) self . assertTrue ( auth_session == db_auth_session == db_2_auth_session == doc_auth_session ) self . assertTrue ( db . exists ( ) ) self . assertTrue ( doc . exists ( ) ) self . client . r_session . cookies . clear ( ) self . assertIsNone ( self . client . r_session . cookies . get ( <str> ) ) self . assertIsNone ( db . r_session . cookies . get ( <str> ) ) self . assertIsNone ( db_2 . r_session . cookies . get ( <str> ) ) self . assertIsNone ( doc . r_session . cookies . get ( <str> ) ) time . sleep ( 1 ) db_2 . create ( ) new_auth_session = self . client . r_session . cookies . get ( <str> ) new_db_auth_session = db . r_session . cookies . get ( <str> ) new_db_2_auth_session = db_2 . r_session . cookies . get ( <str> ) new_doc_auth_session = doc . r_session . cookies . get ( <str> ) self . assertIsNotNone ( new_auth_session ) self . assertNotEqual ( new_auth_session , auth_session ) self . assertTrue ( new_auth_session == new_db_auth_session == new_db_2_auth_session == new_doc_auth_session ) self . assertTrue ( db . exists ( ) ) self . assertTrue ( doc . exists ( ) )  finally :              self . client . delete_database ( db . database_name ) self . client . delete_database ( db_2 . database_name ) self . client . disconnect ( ) del self . client   @ skip_if_not_cookie_auth def test_client_db_doc_stack_failure ( self ) :          try :              self . set_up_client ( auto_connect = True ) db = self . client . _DATABASE_CLASS ( self . client , self . dbname ( ) ) db . create ( ) self . assertIsInstance ( self . client . r_session , requests . Session ) self . assertIsInstance ( db . r_session , requests . Session ) self . client . r_session . cookies . clear ( ) with self . assertRaises ( requests . HTTPError ) as cm :                  db . delete ( )  self . assertEqual ( cm . exception . response . status_code , 401 )  finally :              self . client . disconnect ( ) self . client . connect ( ) self . client . delete_database ( db . database_name ) self . client . disconnect ( ) del self . client    if __name__ == <str> :      unittest . main ( )   