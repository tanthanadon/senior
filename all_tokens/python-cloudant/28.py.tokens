import unittest import os from cloudant . query import Query from cloudant . result import QueryResult from cloudant . error import ResultException from nose . plugins . attrib import attr from . unit_t_db_base import UnitTestDbBase @ attr ( db = [ <str> , <str> ] ) @ attr ( couchapi = 2 ) class QueryResultTests ( UnitTestDbBase ) :      def setUp ( self ) :          super ( QueryResultTests , self ) . setUp ( ) self . db_set_up ( ) self . populate_db_with_documents ( )  def tearDown ( self ) :          self . db_tear_down ( ) super ( QueryResultTests , self ) . tearDown ( )  def create_result ( self , selector = { <str> : { <str> : 0 } } , fields = [ <str> , <str> , <str> ] , ** kwargs ) :          if kwargs . get ( <str> , None ) :              query = Query ( self . db , ** kwargs [ <str> ] )  else :              query = Query ( self . db )  if kwargs . get ( <str> , None ) :              return QueryResult ( query , selector = selector , fields = fields , ** kwargs [ <str> ] )  else :              return QueryResult ( query , selector = selector , fields = fields )   def test_constructor_with_options ( self ) :          query = Query ( self . db ) result = QueryResult ( query , foo = <str> , page_size = 10 ) self . assertIsInstance ( result , QueryResult ) self . assertEqual ( result . options , { <str> : <str> } ) self . assertEqual ( result . _ref , query ) self . assertEqual ( result . _page_size , 10 )  def test_constructor_without_options ( self ) :          query = Query ( self . db ) result = QueryResult ( query ) self . assertIsInstance ( result , QueryResult ) self . assertEqual ( result . options , { } ) self . assertEqual ( result . _ref , query ) self . assertEqual ( result . _page_size , 100 )  def test_constructor_with_query_skip_limit ( self ) :          query = Query ( self . db , skip = 10 , limit = 10 ) result = QueryResult ( query ) self . assertIsInstance ( result , QueryResult ) self . assertDictEqual ( result . options , { <str> : 10 , <str> : 10 } ) self . assertEqual ( result . _ref , query )  def test_constructor_with_query_skip_limit_options_skip_limit ( self ) :          query = Query ( self . db , skip = 10 , limit = 10 ) result = QueryResult ( query , skip = 100 , limit = 100 ) self . assertIsInstance ( result , QueryResult ) self . assertDictEqual ( result . options , { <str> : 100 , <str> : 100 } ) self . assertEqual ( result . _ref , query )  def test_key_value_access_is_not_supported ( self ) :          result = self . create_result ( ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_key_value_slicing_is_not_supported ( self ) :          result = self . create_result ( ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ <str> : <str> ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_by_index ( self ) :          result = self . create_result ( ) expected = { 0 : [ { <str> : <str> , <str> : <str> , <str> : 0 } ] , 10 : [ { <str> : <str> , <str> : <str> , <str> : 10 } ] , 99 : [ { <str> : <str> , <str> : <str> , <str> : 99 } ] , 100 : [ ] , 110 : [ ] } for key in expected :              self . assertEqual ( result [ key ] , expected [ key ] )   def test_get_item_by_index_using_skip_limit ( self ) :          results = [ self . create_result ( q_parms = { <str> : 10 , <str> : 10 } ) , self . create_result ( qr_parms = { <str> : 10 , <str> : 10 } ) , self . create_result ( q_parms = { <str> : 100 , <str> : 100 } , qr_parms = { <str> : 10 , <str> : 10 } ) ] expected = { 0 : [ { <str> : <str> , <str> : <str> , <str> : 10 } ] , 5 : [ { <str> : <str> , <str> : <str> , <str> : 15 } ] , 9 : [ { <str> : <str> , <str> : <str> , <str> : 19 } ] , 10 : [ ] , 20 : [ ] } for key in expected :              for result in results :                  self . assertEqual ( result [ key ] , expected [ key ] )    def test_get_item_by_index_using_limit ( self ) :          results = [ self . create_result ( q_parms = { <str> : 10 } ) , self . create_result ( qr_parms = { <str> : 10 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 10 } ) ] expected = { 0 : [ { <str> : <str> , <str> : <str> , <str> : 0 } ] , 5 : [ { <str> : <str> , <str> : <str> , <str> : 5 } ] , 9 : [ { <str> : <str> , <str> : <str> , <str> : 9 } ] , 10 : [ ] , 20 : [ ] } for key in expected :              for result in results :                  self . assertEqual ( result [ key ] , expected [ key ] )    def test_get_item_by_index_using_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 10 } ) , self . create_result ( qr_parms = { <str> : 10 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 10 } ) ] expected = { 0 : [ { <str> : <str> , <str> : <str> , <str> : 10 } ] , 5 : [ { <str> : <str> , <str> : <str> , <str> : 15 } ] , 89 : [ { <str> : <str> , <str> : <str> , <str> : 99 } ] , 90 : [ ] , 100 : [ ] } for key in expected :              for result in results :                  self . assertEqual ( result [ key ] , expected [ key ] )    def test_get_item_by_negative_index ( self ) :          result = self . create_result ( ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_slice_no_start_no_stop ( self ) :          result = self . create_result ( { <str> : { <str> : <str> } } ) expected = [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 2 } ] self . assertEqual ( result [ : ] , expected )  def test_get_item_invalid_index_slice ( self ) :          result = self . create_result ( ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 : 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 1 : - 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ - 1 : - 10 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 5 : 2 ]  self . assertEqual ( cm . exception . status_code , 101 ) with self . assertRaises ( ResultException ) as cm :              invalid_result = result [ 5 : 5 ]  self . assertEqual ( cm . exception . status_code , 101 )  def test_get_item_index_slice_using_start_stop ( self ) :          result = self . create_result ( ) expected = [ { <str> : <str> , <str> : <str> , <str> : 98 } , { <str> : <str> , <str> : <str> , <str> : 99 } ] self . assertEqual ( result [ 98 : 100 ] , expected ) self . assertEqual ( result [ 98 : 102 ] , expected ) self . assertEqual ( result [ 100 : 102 ] , [ ] )  def test_get_item_index_slice_using_start_stop_limit ( self ) :          results = [ self . create_result ( q_parms = { <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 20 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 18 } , { <str> : <str> , <str> : <str> , <str> : 19 } ] for result in results :              self . assertEqual ( result [ 18 : 20 ] , expected ) self . assertEqual ( result [ 18 : 22 ] , expected ) self . assertEqual ( result [ 20 : 22 ] , [ ] )   def test_get_item_index_slice_using_start_stop_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 98 } ) , self . create_result ( qr_parms = { <str> : 98 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 98 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 98 } , { <str> : <str> , <str> : <str> , <str> : 99 } ] for result in results :              self . assertEqual ( result [ 0 : 2 ] , expected ) self . assertEqual ( result [ 0 : 4 ] , expected ) self . assertEqual ( result [ 2 : 4 ] , [ ] )   def test_get_item_index_slice_using_start_stop_limit_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 20 , <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 20 , <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 , <str> : 100 } , qr_parms = { <str> : 20 , <str> : 20 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 38 } , { <str> : <str> , <str> : <str> , <str> : 39 } ] for result in results :              self . assertEqual ( result [ 18 : 20 ] , expected ) self . assertEqual ( result [ 18 : 22 ] , expected ) self . assertEqual ( result [ 20 : 22 ] , [ ] )   def test_get_item_index_slice_using_start_only ( self ) :          result = self . create_result ( ) expected = [ { <str> : <str> , <str> : <str> , <str> : 98 } , { <str> : <str> , <str> : <str> , <str> : 99 } ] self . assertEqual ( result [ 98 : ] , expected ) self . assertEqual ( result [ 100 : ] , [ ] )  def test_get_item_index_slice_using_start_only_limit ( self ) :          results = [ self . create_result ( q_parms = { <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 20 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 18 } , { <str> : <str> , <str> : <str> , <str> : 19 } ] for result in results :              self . assertEqual ( result [ 18 : ] , expected ) self . assertEqual ( result [ 20 : ] , [ ] )   def test_get_item_index_slice_using_start_only_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 98 } ) , self . create_result ( qr_parms = { <str> : 98 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 98 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 98 } , { <str> : <str> , <str> : <str> , <str> : 99 } ] for result in results :              self . assertEqual ( result [ 0 : ] , expected ) self . assertEqual ( result [ 2 : ] , [ ] )   def test_get_item_index_slice_using_start_only_limit_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 20 , <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 20 , <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 , <str> : 100 } , qr_parms = { <str> : 20 , <str> : 20 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 38 } , { <str> : <str> , <str> : <str> , <str> : 39 } ] for result in results :              self . assertEqual ( result [ 18 : ] , expected ) self . assertEqual ( result [ 20 : ] , [ ] )   def test_get_item_index_slice_using_stop_only ( self ) :          result = self . create_result ( ) expected = { 2 : [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] , 102 : [ { <str> : <str> . format ( x ) , <str> : <str> , <str> : x } for x in range ( 100 ) ] } for key in expected :              self . assertEqual ( result [ : key ] , expected [ key ] )   def test_get_item_index_slice_using_stop_only_limit ( self ) :          results = [ self . create_result ( q_parms = { <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 20 } ) ] expected = { 2 : [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] , 22 : [ { <str> : <str> . format ( x ) , <str> : <str> , <str> : x } for x in range ( 20 ) ] } for result in results :              for key in expected :                  self . assertEqual ( result [ : key ] , expected [ key ] )    def test_get_item_index_slice_using_stop_only_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 98 } ) , self . create_result ( qr_parms = { <str> : 98 } ) , self . create_result ( q_parms = { <str> : 100 } , qr_parms = { <str> : 98 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 98 } , { <str> : <str> , <str> : <str> , <str> : 99 } ] for result in results :              self . assertEqual ( result [ : 2 ] , expected ) self . assertEqual ( result [ : 4 ] , expected )   def test_get_item_index_slice_using_stop_only_limit_skip ( self ) :          results = [ self . create_result ( q_parms = { <str> : 2 , <str> : 20 } ) , self . create_result ( qr_parms = { <str> : 2 , <str> : 20 } ) , self . create_result ( q_parms = { <str> : 100 , <str> : 100 } , qr_parms = { <str> : 2 , <str> : 20 } ) ] expected = [ { <str> : <str> , <str> : <str> , <str> : 20 } , { <str> : <str> , <str> : <str> , <str> : 21 } ] for result in results :              self . assertEqual ( result [ : 2 ] , expected ) self . assertEqual ( result [ : 4 ] , expected )   def test_iteration_with_invalid_options ( self ) :          result = self . create_result ( q_parms = { <str> : 10 } ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 103 )  def test_iteration_invalid_page_size ( self ) :          result = self . create_result ( qr_parms = { <str> : - 1 } ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 104 ) result = self . create_result ( qr_parms = { <str> : <str> } ) with self . assertRaises ( ResultException ) as cm :              invalid_result = [ row for row in result ]  self . assertEqual ( cm . exception . status_code , 104 )  def test_iteration_using_valid_page_size ( self ) :          result = self . create_result ( { <str> : { <str> : <str> } } , qr_parms = { <str> : 3 } ) expected = [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 4 } ] self . assertEqual ( [ x for x in result ] , expected ) result = self . create_result ( { <str> : { <str> : <str> } } , qr_parms = { <str> : 3 } ) expected = [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 2 } ] self . assertEqual ( [ x for x in result ] , expected ) result = self . create_result ( { <str> : { <str> : <str> } } , qr_parms = { <str> : 3 } ) expected = [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } ] self . assertEqual ( [ x for x in result ] , expected )  def test_iteration_using_default_page_size ( self ) :          result = self . create_result ( { <str> : { <str> : <str> } } ) expected = [ { <str> : <str> , <str> : <str> , <str> : 0 } , { <str> : <str> , <str> : <str> , <str> : 1 } , { <str> : <str> , <str> : <str> , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 4 } ] self . assertEqual ( [ x for x in result ] , expected )  def test_iteration_no_data ( self ) :          result = self . create_result ( { <str> : { <str> : <str> } } ) self . assertEqual ( [ x for x in result ] , [ ] )   if __name__ == <str> :      unittest . main ( )   