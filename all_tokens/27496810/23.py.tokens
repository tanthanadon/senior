import unittest import os from red_library_autodiscover import _collect_source_paths class LibraryAutodiscoveringTests ( unittest . TestCase ) :      def test_if_empty_paths_are_returned_for_project_without_libs ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location ) self . assertEqual ( python_paths , [ ] ) self . assertEqual ( class_paths , [ ] )  def test_if_all_paths_with_python_files_are_collected ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location ) self . assertEqual ( python_paths , [ project_location , os . path . join ( project_location , <str> ) , os . path . join ( project_location , <str> , <str> ) , os . path . join ( project_location , <str> , <str> , <str> ) , os . path . join ( project_location , <str> ) ] ) self . assertEqual ( class_paths , [ ] )  def test_if_only_paths_with_python_files_are_collected ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location ) self . assertEqual ( python_paths , [ os . path . join ( project_location , <str> ) ] ) self . assertEqual ( class_paths , [ ] )  def test_if_paths_with_multiple_libs_are_collected_only_once ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location ) self . assertEqual ( python_paths , [ project_location , os . path . join ( project_location , <str> ) ] ) self . assertEqual ( class_paths , [ ] )  def test_if_python_and_java_libs_are_collected ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location ) self . assertEqual ( python_paths , [ os . path . join ( project_location , <str> ) ] ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( class_paths , [ os . path . join ( project_location , <str> , <str> ) , os . path . join ( project_location , <str> , <str> ) ] )  else :              self . assertEqual ( class_paths , [ ] )   def test_if_nested_paths_are_not_collected_when_search_is_not_recursive ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location , False ) self . assertEqual ( python_paths , [ project_location , os . path . join ( project_location , <str> ) , os . path . join ( project_location , <str> ) ] ) self . assertEqual ( class_paths , [ ] )  def test_if_excluded_paths_are_not_collected ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) project_location = os . path . join ( parent_path , <str> , <str> ) python_paths , class_paths = _collect_source_paths ( project_location , True , [ <str> , <str> ] ) self . assertEqual ( python_paths , [ os . path . join ( project_location , <str> ) , os . path . join ( project_location , <str> , <str> ) , os . path . join ( project_location , <str> , <str> , <str> ) ] ) self . assertEqual ( class_paths , [ ] )    