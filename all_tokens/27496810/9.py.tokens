def get_modules_search_paths ( ) :      import sys import robot return sys . path  def get_module_path ( module_name ) :      import imp try :          _ , path , _ = imp . find_module ( module_name ) return path  except ImportError as e :          import platform if <str> in platform . python_implementation ( ) :              source = _find_jar_source_path ( module_name ) if source :                  if <str> in source :                      source = source [ source . index ( <str> ) + 5 : ]  if <str> in source . lower ( ) :                      source = _modify_source_path_for_jar_files ( source , <str> )  elif <str> in source . lower ( ) :                      source = _modify_source_path_for_jar_files ( source , <str> )  elif <str> in source . lower ( ) :                      source = _modify_source_path_for_jar_files ( source , <str> )  return source   raise e   def _find_jar_source_path ( module_name ) :      import org . python . core . imp as jimp from types import ModuleType module = jimp . load ( module_name ) if isinstance ( module , ModuleType ) :          source = module . __file__ if <str> in source :              res = source [ source . index ( <str> ) + 16 : ] return jimp . getSyspathJavaLoader ( ) . getResource ( res ) . getPath ( )  return source  else :          return module . getResource ( <str> + module_name . replace ( <str> , <str> ) + <str> ) . getPath ( )   def _modify_source_path_for_jar_files ( source , jar_part ) :      jar_part_index = source . lower ( ) . rindex ( jar_part ) jar_extension = source [ jar_part_index : jar_part_index + 4 ] return source [ : jar_part_index ] + jar_extension   