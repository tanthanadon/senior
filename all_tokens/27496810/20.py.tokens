import unittest import os from red_module_classes import get_classes_from_module , isJarOrZip class ClassesRetrievingTests ( unittest . TestCase ) :      def test_retrieving_classes_from_file_with_error ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) with self . assertRaises ( SyntaxError ) as cm :              get_classes_from_module ( module_location )   def test_retrieving_classes_from_file_with_cycle ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) import platform if <str> in platform . python_implementation ( ) :              with self . assertRaises ( ImportError ) as cm :                  get_classes_from_module ( module_location )   else :              result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> ] )   def test_retrieving_classes_from_empty_file ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> ] )  def test_retrieving_classes_from_file_with_same_class_name ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> ] )  def test_retrieving_classes_from_file_with_different_class_name ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> ] )  def test_retrieving_classes_from_file_with_several_classes ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_file_with_several_classes_and_methods ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_file_with_several_classes_and_comments ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> ] )  def test_retrieving_classes_from_file_with_several_methods_and_documentation ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> ] )  def test_retrieving_classes_from_file_with_same_name_inside_module ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_file_with_different_name_inside_module ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_file_in_directory_with_same_name_like_sys_module ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_module_with_relative_imports ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( result , [ <str> , <str> ] )  else :              self . assertEqual ( result , [ <str> , <str> , <str> , <str> ] )   def test_retrieving_classes_from_python_module_with_init_only ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> ] )  def test_retrieving_classes_from_python_module_with_empty_init_and_classes ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_python_module_with_init_and_classes ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_nested_python_module_1 ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )  else :              self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )   def test_retrieving_classes_from_nested_python_module_2 ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )  else :              self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )   def test_retrieving_classes_from_nested_python_module_3 ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] )  def test_retrieving_classes_from_module_with_non_module_files ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> ] )  import sys @ unittest . skipUnless ( sys . version_info >= ( 3 , 0 , 0 ) , <str> ) def test_retrieving_classes_from_unicode_named_module ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) self . assertEqual ( result , [ <str> , <str> ] )  def test_retrieving_classes_from_python_module_in_zip ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( result , [ <str> , <str> , <str> ] )  else :              self . assertEqual ( result , [ <str> , <str> ] )   def test_retrieving_classes_from_python_module_in_jar ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) module_location = os . path . join ( parent_path , <str> , <str> ) result = get_classes_from_module ( module_location ) import platform if <str> in platform . python_implementation ( ) :              self . assertEqual ( result , [ <str> , <str> , <str> ] )  else :              self . assertEqual ( result , [ <str> , <str> ] )    class ModuleLocationTest ( unittest . TestCase ) :      def test_if_module_location_is_jar_file ( self ) :          module_location = os . path . join ( <str> , <str> , <str> ) self . assertTrue ( isJarOrZip ( module_location ) )  def test_if_module_location_is_zip_file ( self ) :          module_location = os . path . join ( <str> , <str> , <str> ) self . assertTrue ( isJarOrZip ( module_location ) )  def test_if_module_location_is_capital_jar_file ( self ) :          module_location = os . path . join ( <str> , <str> , <str> ) self . assertTrue ( isJarOrZip ( module_location ) )  def test_if_module_location_is_capital_zip_file ( self ) :          module_location = os . path . join ( <str> , <str> , <str> ) self . assertTrue ( isJarOrZip ( module_location ) )  def test_if_module_location_is_not_jar_or_zip_file ( self ) :          module_location = os . path . join ( <str> , <str> , <str> ) self . assertFalse ( isJarOrZip ( module_location ) )    