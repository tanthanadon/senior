import os import sys import platform def start_auto_discovering ( port , data_source_path , support_gevent ) :      from robot . run import run from TestRunnerAgent import TestRunnerAgent from SuiteVisitorImportProxy import SuiteVisitorImportProxy run ( data_source_path , listener = TestRunnerAgent ( port ) , prerunmodifier = SuiteVisitorImportProxy ( support_gevent = support_gevent ) , runemptysuite = True , dryrun = True , output = <str> , report = <str> , log = <str> , console = <str> )  def _collect_source_paths ( start_path , recursive = True , excluded_paths = [ ] ) :      to_exclude = set ( [ os . path . normpath ( os . path . join ( start_path , p ) ) for p in excluded_paths ] ) max_depth = start_path . count ( os . sep ) + 1 python_paths = list ( ) class_paths = list ( ) for root , dirs , files in os . walk ( start_path ) :          for file in files :              if __is_excluded_path ( root , file , to_exclude ) :                  continue  _ , extension = os . path . splitext ( file ) if extension == <str> and not root in python_paths :                  python_paths . append ( root )  elif extension . lower ( ) == <str> and <str> in platform . python_implementation ( ) :                  class_paths . append ( os . path . join ( root , file ) )   if recursive or root . count ( os . sep ) < max_depth :              dirs [ : ] = [ dir for dir in dirs if not __is_excluded_path ( root , dir , to_exclude ) ]  else :              del dirs [ : ]  dirs . sort ( )  return python_paths , class_paths  def __is_excluded_path ( root , path , to_exclude ) :      return path . startswith ( <str> ) or os . path . join ( root , path ) in to_exclude  def _is_virtualenv ( ) :      return hasattr ( sys , <str> )  if __name__ == <str> :      import robot_session_server decoded_args = robot_session_server . __decode_unicode_if_needed ( sys . argv ) port = decoded_args [ 1 ] data_source_path = decoded_args [ 2 ] project_location_path = decoded_args [ 3 ] support_gevent = decoded_args [ 4 ] . lower ( ) == <str> recursive = recursive = not _is_virtualenv ( ) or decoded_args [ 5 ] . lower ( ) == <str> excluded_paths = [ ] additional_paths = [ ] if len ( decoded_args ) > 6 :          if decoded_args [ 6 ] == <str> :              excluded_paths = decoded_args [ 7 ] . split ( <str> ) if len ( decoded_args ) > 8 :                  additional_paths = decoded_args [ 8 ] . split ( <str> )   else :              additional_paths = decoded_args [ 6 ] . split ( <str> )   python_paths , class_paths = _collect_source_paths ( project_location_path , recursive , excluded_paths ) robot_session_server . __extend_paths ( [ project_location_path ] + additional_paths + python_paths , class_paths ) start_auto_discovering ( port , data_source_path , support_gevent )   