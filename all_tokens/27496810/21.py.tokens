import unittest import os from red_variables import get_variables from red_variables import get_global_variables from robot . errors import DataError class VariablesRetrievingTests ( unittest . TestCase ) :      def test_if_global_variables_are_returned ( self ) :          result = get_global_variables ( ) self . assertEqual ( set ( result . keys ( ) ) , set ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) )  def test_if_empty_result_is_returned_for_empty_file ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertEqual ( result , { } )  def test_if_result_is_returned_for_vars_in_lines ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertEqual ( result , { <str> : <str> , <str> : <str> , <str> : <str> } )  def test_if_result_is_returned_for_vars_in_method ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertEqual ( result , { <str> : <str> , <str> : <str> , <str> : <str> } )  def test_if_result_is_returned_for_vars_in_class ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertEqual ( result , { <str> : <str> , <str> : <str> , <str> : <str> } )  def test_if_result_is_returned_for_vars_with_argument ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ <str> ] ) self . assertEqual ( result , { <str> : <str> , <str> : <str> , <str> : <str> } )  def test_if_result_is_returned_for_vars_with_proper_casing ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertEqual ( result , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } )  def test_if_result_is_returned_with_defined_classes_visible_as_variables ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) result = get_variables ( vars_location , [ ] ) self . assertSetEqual ( set ( result . keys ( ) ) , set ( [ <str> ] ) )  def test_if_data_error_is_raised_for_file_without_arguments ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) with self . assertRaises ( DataError ) as cm :              get_variables ( vars_location , [ ] )  self . assertTrue ( <str> in cm . exception . message )  def test_if_data_error_is_raised_for_not_existing_file ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) with self . assertRaises ( DataError ) as cm :              get_variables ( vars_location , [ ] )  self . assertTrue ( <str> in cm . exception . message )  def test_if_data_error_is_raised_for_file_with_unsupported_extension ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) with self . assertRaises ( DataError ) as cm :              get_variables ( vars_location , [ ] )  self . assertTrue ( <str> in cm . exception . message )  def test_if_data_error_is_raised_for_file_with_error ( self ) :          parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) vars_location = os . path . join ( parent_path , <str> , <str> ) with self . assertRaises ( DataError ) as cm :              get_variables ( vars_location , [ ] )  self . assertTrue ( <str> in cm . exception . message )    