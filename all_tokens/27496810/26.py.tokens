import unittest from TestRunnerAgent import _truncate from TestRunnerAgent import _extract_source_path from TestRunnerAgent import _collect_children_paths class TruncationTests ( unittest . TestCase ) :      def test_message_is_untouched_if_holds_limit ( self ) :          limit = 99 message = <str> * 20 self . assertEqual ( <str> * 20 , _truncate ( limit , message ) )  def test_message_is_untouched_if_equals_limit ( self ) :          limit = 99 message = <str> * 33 self . assertEqual ( <str> * 33 , _truncate ( limit , message ) )  def test_message_is_truncated_if_exceeds_limit ( self ) :          limit = 99 message = <str> * limit self . assertEqual ( ( <str> * 33 ) + <str> , _truncate ( limit , message ) )   class SourcePathExtractionTests ( unittest . TestCase ) :      def test_extracting_path_to_jar ( self ) :          self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) )  def test_extracting_path_to_compiled_python_file ( self ) :          self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) ) self . assertEqual ( <str> , _extract_source_path ( <str> ) )   class ChildrenPathsCollectingTests ( unittest . TestCase ) :      def test_collect_children_paths_from_root_node ( self ) :          import os parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) suites = [ <str> , <str> ] source = os . path . join ( parent_path , <str> , <str> ) self . assertEqual ( [ os . path . join ( source , <str> ) , os . path . join ( source , <str> ) ] , _collect_children_paths ( suites , source ) )  def test_collect_children_paths_of_same_name_suites ( self ) :          import os parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) suites = [ <str> , <str> ] source = os . path . join ( parent_path , <str> , <str> ) collected = _collect_children_paths ( suites , source ) self . assertEqual ( [ os . path . join ( source , <str> ) , os . path . join ( source , <str> ) ] , collected )  def test_none_is_returned_for_non_existing_suites ( self ) :          import os parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) suites = [ <str> ] source = os . path . join ( parent_path , <str> ) collected = _collect_children_paths ( suites , source ) self . assertEqual ( [ None ] , collected )  def test_collect_children_paths_from_child_node ( self ) :          import os parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) suites = [ <str> ] source = os . path . join ( parent_path , <str> , <str> , <str> ) self . assertEqual ( [ os . path . join ( source , <str> ) ] , _collect_children_paths ( suites , source ) )  def test_collect_children_paths_from_suite_file ( self ) :          import os parent_path = os . path . dirname ( os . path . realpath ( __file__ ) ) suites = [ ] source = os . path . join ( parent_path , <str> , <str> , <str> , <str> ) self . assertEqual ( [ ] , _collect_children_paths ( suites , source ) )    