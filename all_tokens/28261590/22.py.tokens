import argparse import sys import errno import os import math from multiprocessing import Process , Queue import time import logging log = logging . getLogger ( __name__ ) import numpy as np from scipy import stats import hicmatrix . HiCMatrix as hm from hicexplorer import utilities from hicexplorer . _version import __version__ from . lib import Viewpoint def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( add_help = False , formatter_class = argparse . RawDescriptionHelpFormatter , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True , nargs = <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , type = float , default = 0.05 , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , help = <str> , choices = [ <str> , <str> ] , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , action = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = 4 , type = int ) parserOpt . add_argument ( <str> , <str> , help = <str> , default = <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def readInteractionFile ( pInteractionFile ) :      line_content = [ ] data = [ ] with open ( pInteractionFile , <str> ) as file :          file . readline ( ) header = file . readline ( ) sum_of_all_interactions = float ( header . strip ( ) . split ( <str> ) [ - 1 ] . split ( <str> ) [ - 1 ] ) header += file . readline ( ) for line in file . readlines ( ) :              if line . startswith ( <str> ) :                  continue  _line = line . strip ( ) . split ( <str> ) if len ( _line ) <= 1 :                  continue  line_content . append ( _line ) data . append ( [ sum_of_all_interactions , float ( _line [ - 1 ] ) ] )   return header , line_content , data  def chisquare_test ( pDataFile1 , pDataFile2 , pAlpha ) :      test_result = [ ] accepted = [ ] rejected = [ ] critical_value = stats . chi2 . ppf ( q = 1 - pAlpha , df = 1 ) zero_values_counter = 0 for i , ( group1 , group2 ) in enumerate ( zip ( pDataFile1 , pDataFile2 ) ) :          try :              chi2 , p_value , dof , ex = stats . chi2_contingency ( [ group1 , group2 ] , correction = False ) if chi2 >= critical_value :                  test_result . append ( p_value ) rejected . append ( [ i , p_value ] )  else :                  test_result . append ( p_value ) accepted . append ( [ i , p_value ] )   except ValueError :              zero_values_counter += 1 test_result . append ( np . nan ) accepted . append ( [ i , 1.0 ] )   if zero_values_counter > 0 :          log . info ( <str> . format ( zero_values_counter ) )  return test_result , accepted , rejected  def fisher_exact_test ( pDataFile1 , pDataFile2 , pAlpha ) :      test_result = [ ] accepted = [ ] rejected = [ ] for i , ( group1 , group2 ) in enumerate ( zip ( pDataFile1 , pDataFile2 ) ) :          try :              odds , p_value = stats . fisher_exact ( np . ceil ( [ group1 , group2 ] ) ) if p_value <= pAlpha :                  test_result . append ( p_value ) rejected . append ( [ i , p_value ] )  else :                  test_result . append ( p_value ) accepted . append ( [ i , p_value ] )   except ValueError :              test_result . append ( np . nan ) accepted . append ( [ i , 1.0 ] )   return test_result , accepted , rejected  def writeResult ( pOutFileName , pData , pHeaderOld , pHeaderNew , pAlpha , pTest ) :      with open ( pOutFileName , <str> ) as file :          header = <str> header += str ( __version__ ) header += <str> header += <str> . format ( pTest ) header += <str> header += <str> header += <str> . join ( [ <str> , str ( pAlpha ) ] ) header += <str> header += <str> . join ( [ <str> , <str> ] ) header += <str> file . write ( header ) file . write ( pHeaderOld . split ( <str> ) [ 0 ] + <str> ) file . write ( pHeaderNew . split ( <str> ) [ 0 ] + <str> ) file . write ( <str> ) if pData :              for data in pData :                  line = <str> . join ( data [ 0 ] [ : 4 ] ) line += <str> line += <str> . format ( data [ 0 ] [ 5 ] ) line += <str> line += <str> . join ( format ( x , <str> ) for x in data [ 3 ] ) line += <str> line += <str> . join ( format ( x , <str> ) for x in data [ 4 ] ) line += <str> line += <str> . format ( format ( data [ 2 ] , <str> ) ) file . write ( line )     def run_statistical_tests ( pInteractionFilesList , pArgs , pQueue = None ) :      rejected_names = [ ] for interactionFile in pInteractionFilesList :          sample_prefix = interactionFile [ 0 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] + <str> + interactionFile [ 1 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] region_prefix = <str> . join ( interactionFile [ 0 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 1 : 6 ] ) outFileName = sample_prefix + <str> + region_prefix rejected_name_output_file = outFileName + <str> if pArgs . outputFolder != <str> :              outFileName_accepted = pArgs . outputFolder + <str> + outFileName + <str> outFileName_rejected = pArgs . outputFolder + <str> + outFileName + <str> outFileName = pArgs . outputFolder + <str> + outFileName + <str>  else :              outFileName_accepted = outFileName + <str> outFileName_rejected = outFileName + <str> outFileName = outFileName + <str>  if pArgs . interactionFileFolder != <str> :              absolute_sample_path1 = pArgs . interactionFileFolder + <str> + interactionFile [ 0 ] absolute_sample_path2 = pArgs . interactionFileFolder + <str> + interactionFile [ 1 ]  else :              absolute_sample_path1 = interactionFile [ 0 ] absolute_sample_path2 = interactionFile [ 1 ]  header1 , line_content1 , data1 = readInteractionFile ( absolute_sample_path1 ) header2 , line_content2 , data2 = readInteractionFile ( absolute_sample_path2 ) if len ( line_content1 ) == 0 or len ( line_content2 ) == 0 :              writeResult ( outFileName , None , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) writeResult ( outFileName_accepted , None , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) writeResult ( outFileName_rejected , None , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) rejected_names . append ( rejected_name_output_file ) continue  if pArgs . statisticTest == <str> :              test_result , accepted , rejected = chisquare_test ( data1 , data2 , pArgs . alpha )  elif pArgs . statisticTest == <str> :              test_result , accepted , rejected = fisher_exact_test ( data1 , data2 , pArgs . alpha )  write_out_lines = [ ] for i , result in enumerate ( test_result ) :              write_out_lines . append ( [ line_content1 [ i ] , line_content2 [ i ] , result , data1 [ i ] , data2 [ i ] ] )  write_out_lines_accepted = [ ] for result in accepted :              write_out_lines_accepted . append ( [ line_content1 [ result [ 0 ] ] , line_content2 [ result [ 0 ] ] , result [ 1 ] , data1 [ result [ 0 ] ] , data2 [ result [ 0 ] ] ] )  write_out_lines_rejected = [ ] for result in rejected :              write_out_lines_rejected . append ( [ line_content1 [ result [ 0 ] ] , line_content2 [ result [ 0 ] ] , result [ 1 ] , data1 [ result [ 0 ] ] , data2 [ result [ 0 ] ] ] )  writeResult ( outFileName , write_out_lines , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) writeResult ( outFileName_accepted , write_out_lines_accepted , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) writeResult ( outFileName_rejected , write_out_lines_rejected , header1 , header2 , pArgs . alpha , pArgs . statisticTest ) rejected_names . append ( rejected_name_output_file )  if pQueue is None :          return  pQueue . put ( rejected_names ) return  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) if not os . path . exists ( args . outputFolder ) :          try :              os . makedirs ( args . outputFolder )  except OSError as exc :              if exc . errno != errno . EEXIST :                  raise    interactionFileList = [ ] if args . batchMode :          with open ( args . interactionFile [ 0 ] , <str> ) as interactionFile :              file_ = True while file_ :                  file_ = interactionFile . readline ( ) . strip ( ) file2_ = interactionFile . readline ( ) . strip ( ) if file_ != <str> and file2_ != <str> :                      interactionFileList . append ( ( file_ , file2_ ) )   log . debug ( <str> . format ( len ( interactionFileList ) ) )   else :          if len ( args . interactionFile ) % 2 == 0 :              i = 0 while i < len ( args . interactionFile ) :                  interactionFileList . append ( ( args . interactionFile [ i ] , args . interactionFile [ i + 1 ] ) ) i += 2    if args . batchMode :          rejected_file_names = [ None ] * args . threads interactionFilesPerThread = len ( interactionFileList ) // args . threads all_data_collected = False queue = [ None ] * args . threads process = [ None ] * args . threads thread_done = [ False ] * args . threads length_of_threads = 0 for i in range ( args . threads ) :              if i < args . threads - 1 :                  interactionFileListThread = interactionFileList [ i * interactionFilesPerThread : ( i + 1 ) * interactionFilesPerThread ]  else :                  interactionFileListThread = interactionFileList [ i * interactionFilesPerThread : ]  length_of_threads += len ( interactionFileListThread ) queue [ i ] = Queue ( ) process [ i ] = Process ( target = run_statistical_tests , kwargs = dict ( pInteractionFilesList = interactionFileListThread , pArgs = args , pQueue = queue [ i ] ) ) process [ i ] . start ( )  log . debug ( <str> . format ( length_of_threads ) ) while not all_data_collected :              for i in range ( args . threads ) :                  if queue [ i ] is not None and not queue [ i ] . empty ( ) :                      background_data_thread = queue [ i ] . get ( ) rejected_file_names [ i ] = background_data_thread queue [ i ] = None process [ i ] . join ( ) process [ i ] . terminate ( ) process [ i ] = None thread_done [ i ] = True   all_data_collected = True for thread in thread_done :                  if not thread :                      all_data_collected = False   time . sleep ( 1 )   else :          run_statistical_tests ( interactionFileList , args )  if args . batchMode :          log . debug ( <str> . format ( len ( rejected_file_names ) ) ) rejected_file_names = [ item for sublist in rejected_file_names for item in sublist ] log . debug ( <str> . format ( len ( rejected_file_names ) ) ) with open ( args . rejectedFileNamesToFile , <str> ) as nameListFile :              nameListFile . write ( <str> . join ( rejected_file_names ) )     