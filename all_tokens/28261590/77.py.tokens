import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import os . path from tempfile import NamedTemporaryFile from hicexplorer import hicConvertFormat import pytest from hicmatrix import HiCMatrix as hm import numpy . testing as nt REMOVE_OUTPUT = True DELTA_DECIMAL = 0 ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) original_matrix_h5 = ROOT + <str> original_matrix_cool = ROOT + <str> @ pytest . mark . parametrize ( <str> , [ original_matrix_h5 , original_matrix_cool ] ) @ pytest . mark . parametrize ( <str> , [ <str> , <str> , <str> , <str> ] ) @ pytest . mark . parametrize ( <str> , [ <str> ] ) def test_trivial_run ( matrices , outputFormat , resolutions , ) :      from pathlib import Path inputFormat = Path ( matrices ) . suffix [ 1 : ] outFileName = NamedTemporaryFile ( suffix = <str> . format ( outputFormat ) , delete = True ) args = <str> . format ( matrices , outFileName . name , inputFormat , outputFormat , resolutions , ) . split ( ) hicConvertFormat . main ( args )  @ pytest . mark . parametrize ( <str> , [ original_matrix_h5 , original_matrix_cool ] ) @ pytest . mark . parametrize ( <str> , [ <str> , <str> ] ) @ pytest . mark . parametrize ( <str> , [ <str> ] ) def test_trivial_functionality ( matrices , outputFormat , resolutions , ) :      from pathlib import Path inputFormat = Path ( matrices ) . suffix [ 1 : ] outFileName = NamedTemporaryFile ( suffix = <str> . format ( outputFormat ) , delete = True ) outFileName . close ( ) args = <str> . format ( matrices , outFileName . name , inputFormat , outputFormat , resolutions , ) . split ( ) hicConvertFormat . main ( args ) test = hm . hiCMatrix ( matrices ) new = hm . hiCMatrix ( outFileName . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) nt . assert_equal ( len ( new . cut_intervals ) , len ( test . cut_intervals ) ) cut_interval_new_ = [ ] cut_interval_test_ = [ ] for x in new . cut_intervals :          cut_interval_new_ . append ( x [ : 3 ] )  for x in test . cut_intervals :          cut_interval_test_ . append ( x [ : 3 ] )  nt . assert_equal ( cut_interval_new_ , cut_interval_test_ ) os . unlink ( outFileName . name )   