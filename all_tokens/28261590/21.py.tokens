import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) import numpy as np from scipy . sparse import csr_matrix , save_npz , lil_matrix def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . RawDescriptionHelpFormatter , add_help = False , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserMutuallyExclusiveGroup = parser . add_mutually_exclusive_group ( required = True ) parserMutuallyExclusiveGroup . add_argument ( <str> , <str> , help = <str> , nargs = 2 , type = int ) parserMutuallyExclusiveGroup . add_argument ( <str> , <str> , help = <str> , nargs = 2 , type = int ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def calculateViewpointRange ( pHiCMatrix , pViewpoint , pRange ) :      max_length = pHiCMatrix . getBinPos ( pHiCMatrix . getChrBinRange ( pViewpoint [ 0 ] ) [ 1 ] - 1 ) [ 2 ] bin_size = pHiCMatrix . getBinSize ( ) _range = [ pRange [ 0 ] , pRange [ 1 ] ] region_start = int ( pViewpoint [ 1 ] ) - pRange [ 0 ] if region_start < 0 :          region_start = 0 _range [ 0 ] = int ( pViewpoint [ 1 ] )  region_end = int ( pViewpoint [ 2 ] ) + pRange [ 1 ] if region_end > max_length :          region_end = max_length - 1 _range [ 1 ] = ( max_length - int ( pViewpoint [ 2 ] ) ) + bin_size  return region_start , region_end , _range  def getBinIndices ( pHiCMatrix , pViewpoint ) :      return pHiCMatrix . getRegionBinRange ( pViewpoint [ 0 ] , pViewpoint [ 1 ] , pViewpoint [ 2 ] )  def calculateViewpointRangeBins ( pHiCMatrix , pViewpoint , pRange ) :      viewpoint_index = getBinIndices ( pHiCMatrix , pViewpoint ) [ 0 ] start = viewpoint_index - pRange [ 0 ] end = viewpoint_index + pRange [ 1 ] return start , end  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) hic_ma = hm . hiCMatrix ( pMatrixFile = args . matrix ) indices_values = [ ] with open ( args . regions , <str> ) as file :          for line in file . readlines ( ) :              _line = line . strip ( ) . split ( <str> ) if len ( line ) == 0 :                  continue  if len ( _line ) == 2 :                  chrom , start = _line [ 0 ] , _line [ 1 ] viewpoint = ( chrom , start , start )  elif len ( _line ) >= 3 :                  chrom , start , end = _line [ 0 ] , _line [ 1 ] , _line [ 2 ] viewpoint = ( chrom , start , end )  if args . range :                  start_range_genomic , end_range_genomic , _ = calculateViewpointRange ( hic_ma , viewpoint , args . range ) start_bin , end_bin = getBinIndices ( hic_ma , ( chrom , start_range_genomic , end_range_genomic ) )  else :                  start_bin , end_bin = calculateViewpointRangeBins ( hic_ma , viewpoint , args . rangeInBins )  indices_values . append ( [ start_bin , end_bin ] )   if args . range :          dimensions_new_matrix = ( args . range [ 0 ] // hic_ma . getBinSize ( ) ) + ( args . range [ 1 ] // hic_ma . getBinSize ( ) )  elif args . rangeInBins :          dimensions_new_matrix = args . rangeInBins [ 0 ] + args . rangeInBins [ 1 ]  summed_matrix = lil_matrix ( ( dimensions_new_matrix , dimensions_new_matrix ) , dtype = np . float32 ) max_length = hic_ma . matrix . shape [ 1 ] for start , end in indices_values :          _start = 0 _end = summed_matrix . shape [ 1 ] if start < 0 :              _start = np . absolute ( start ) start = 0  if end >= max_length :              _end = end end = max_length  summed_matrix [ _start : _end , _start : _end ] += hic_ma . matrix [ start : end , start : end ]  summed_matrix /= len ( indices_values ) summed_matrix = summed_matrix . tocsr ( ) save_npz ( args . outFileName , summed_matrix )   