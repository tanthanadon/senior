import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse import numpy as np from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . ArgumentDefaultsHelpFormatter , add_help = False , description = ( <str> <str> <str> ) ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , metavar = <str> , nargs = 2 , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , help = <str> , choices = [ <str> , <str> , <str> ] , default = <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) if args . operation not in [ <str> , <str> , <str> ] :          exit ( <str> )  hic1 = hm . hiCMatrix ( args . matrices [ 0 ] ) hic2 = hm . hiCMatrix ( args . matrices [ 1 ] ) if hic1 . matrix . shape != hic2 . matrix . shape :          exit ( <str> <str> )  if hic1 . chrBinBoundaries != hic2 . chrBinBoundaries :          exit ( <str> <str> <str> . format ( args . matrices [ 0 ] , hic1 . chrBinBoundaries . keys ( ) , args . matrices [ 1 ] , hic2 . chrBinBoundaries . keys ( ) ) )  hic1 . matrix . data = hic1 . matrix . data . astype ( float ) / hic1 . matrix . data . sum ( ) hic2 . matrix . data = hic2 . matrix . data . astype ( float ) / hic2 . matrix . data . sum ( ) nan_bins = set ( hic1 . nan_bins ) nan_bins = nan_bins . union ( hic2 . nan_bins ) if args . operation == <str> :          new_matrix = hic1 . matrix - hic2 . matrix  elif args . operation == <str> or args . operation == <str> :          hic2 . matrix . data = float ( 1 ) / hic2 . matrix . data new_matrix = hic1 . matrix . multiply ( hic2 . matrix ) new_matrix . eliminate_zeros ( ) if args . operation == <str> :              new_matrix . data = np . log2 ( new_matrix . data ) new_matrix . eliminate_zeros ( )   hic1 . setMatrixValues ( new_matrix ) hic1 . maskBins ( sorted ( nan_bins ) ) hic1 . save ( args . outFileName )   