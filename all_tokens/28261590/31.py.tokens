import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from scipy . sparse import csr_matrix , lil_matrix import numpy as np from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ from hicexplorer . utilities import obs_exp_matrix_lieberman , obs_exp_matrix_non_zero , obs_exp_matrix from hicexplorer . utilities import convertNansToZeros , convertInfsToZeros import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . ArgumentDefaultsHelpFormatter , add_help = False , description = <str> ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> , choices = [ <str> , <str> , <str> , <str> , <str> ] , default = <str> ) parserOpt . add_argument ( <str> , help = <str> <str> <str> <str> <str> <str> , action = <str> ) parserOpt . add_argument ( <str> , help = <str> , default = None , nargs = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> <str> <str> , action = <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def _obs_exp_lieberman ( pSubmatrix , pLengthChromosome , pChromosomeCount ) :      obs_exp_matrix_ = obs_exp_matrix_lieberman ( pSubmatrix , pLengthChromosome , pChromosomeCount ) obs_exp_matrix_ = convertNansToZeros ( csr_matrix ( obs_exp_matrix_ ) ) obs_exp_matrix_ = convertInfsToZeros ( csr_matrix ( obs_exp_matrix_ ) ) . todense ( ) return obs_exp_matrix_  def _pearson ( pSubmatrix ) :      pearson_correlation_matrix = np . corrcoef ( pSubmatrix ) pearson_correlation_matrix = convertNansToZeros ( csr_matrix ( pearson_correlation_matrix ) ) pearson_correlation_matrix = convertInfsToZeros ( csr_matrix ( pearson_correlation_matrix ) ) . todense ( ) return pearson_correlation_matrix  def _obs_exp ( pSubmatrix ) :      obs_exp_matrix_ = obs_exp_matrix ( pSubmatrix ) obs_exp_matrix_ = convertNansToZeros ( csr_matrix ( obs_exp_matrix_ ) ) obs_exp_matrix_ = convertInfsToZeros ( csr_matrix ( obs_exp_matrix_ ) ) . todense ( ) return obs_exp_matrix_  def _obs_exp_non_zero ( pSubmatrix , ligation_factor ) :      obs_exp_matrix_ = obs_exp_matrix_non_zero ( pSubmatrix , ligation_factor ) obs_exp_matrix_ = convertNansToZeros ( csr_matrix ( obs_exp_matrix_ ) ) obs_exp_matrix_ = convertInfsToZeros ( csr_matrix ( obs_exp_matrix_ ) ) . todense ( ) return obs_exp_matrix_  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) if not args . outFileName . endswith ( <str> ) and not args . outFileName . endswith ( <str> ) :          log . error ( <str> ) log . error ( <str> . format ( args . outFileName ) ) log . error ( <str> ) exit ( 1 )  if args . matrix . endswith ( <str> ) and args . chromosomes is not None and len ( args . chromosomes ) == 1 :          hic_ma = hm . hiCMatrix ( pMatrixFile = args . matrix , pChrnameList = args . chromosomes )  else :          hic_ma = hm . hiCMatrix ( pMatrixFile = args . matrix ) if args . chromosomes :              hic_ma . keepOnlyTheseChr ( args . chromosomes )   trasf_matrix = lil_matrix ( hic_ma . matrix . shape ) if args . method == <str> :          if args . perChromosome :              for chrname in hic_ma . getChrNames ( ) :                  chr_range = hic_ma . getChrBinRange ( chrname ) submatrix = hic_ma . matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] submatrix . astype ( float ) trasf_matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] = lil_matrix ( _obs_exp ( submatrix ) )   else :              submatrix = _obs_exp ( hic_ma . matrix ) trasf_matrix = csr_matrix ( submatrix )   elif args . method == <str> :          if args . perChromosome :              for chrname in hic_ma . getChrNames ( ) :                  chr_range = hic_ma . getChrBinRange ( chrname ) submatrix = hic_ma . matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] submatrix . astype ( float ) trasf_matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] = lil_matrix ( _obs_exp_non_zero ( submatrix , args . ligation_factor ) )   else :              submatrix = _obs_exp_non_zero ( hic_ma . matrix , args . ligation_factor ) trasf_matrix = csr_matrix ( submatrix )   elif args . method == <str> :          length_chromosome = 0 chromosome_count = len ( hic_ma . getChrNames ( ) ) for chrname in hic_ma . getChrNames ( ) :              chr_range = hic_ma . getChrBinRange ( chrname ) length_chromosome += chr_range [ 1 ] - chr_range [ 0 ]  for chrname in hic_ma . getChrNames ( ) :              chr_range = hic_ma . getChrBinRange ( chrname ) submatrix = hic_ma . matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] submatrix . astype ( float ) trasf_matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] = lil_matrix ( _obs_exp_lieberman ( submatrix , length_chromosome , chromosome_count ) )  trasf_matrix = trasf_matrix . tocsr ( )  elif args . method == <str> :          if args . perChromosome :              for chrname in hic_ma . getChrNames ( ) :                  chr_range = hic_ma . getChrBinRange ( chrname ) submatrix = hic_ma . matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] submatrix . astype ( float ) trasf_matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] = lil_matrix ( _pearson ( submatrix . todense ( ) ) )   else :              trasf_matrix = csr_matrix ( _pearson ( hic_ma . matrix . todense ( ) ) )   elif args . method == <str> :          if args . perChromosome :              for chrname in hic_ma . getChrNames ( ) :                  chr_range = hic_ma . getChrBinRange ( chrname ) submatrix = hic_ma . matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] submatrix . astype ( float ) corrmatrix = np . cov ( submatrix . todense ( ) ) trasf_matrix [ chr_range [ 0 ] : chr_range [ 1 ] , chr_range [ 0 ] : chr_range [ 1 ] ] = lil_matrix ( corrmatrix )   else :              corrmatrix = np . cov ( hic_ma . matrix . todense ( ) ) trasf_matrix = csr_matrix ( corrmatrix )   if args . perChromosome :          hic_ma . setMatrix ( trasf_matrix . tocsr ( ) , cut_intervals = hic_ma . cut_intervals )  else :          hic_ma . setMatrix ( trasf_matrix , cut_intervals = hic_ma . cut_intervals )  hic_ma . save ( args . outFileName , pSymmetric = True , pApplyCorrection = False )   