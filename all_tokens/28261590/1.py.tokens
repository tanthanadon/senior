import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ from hicmatrix . HiCMatrix import check_cooler import numpy as np import cooler import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . RawDescriptionHelpFormatter , add_help = False , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> <str> , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserMutuallyExclusive = parser . add_mutually_exclusive_group ( ) parserMutuallyExclusive . add_argument ( <str> , <str> , nargs = <str> , help = <str> ) parserMutuallyExclusive . add_argument ( <str> , <str> , help = <str> ) parserMutuallyExclusive . add_argument ( <str> , <str> , help = <str> ) parserOpt . add_argument ( <str> , help = <str> , default = <str> , choices = [ <str> , <str> , <str> ] ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def adjustMatrix ( pArgs ) :      if pArgs . chromosomes is not None and pArgs . regions is not None :          log . error ( <str> ) exit ( 1 )  hic_matrix = None if pArgs . chromosomes :          if check_cooler ( pArgs . matrix ) and len ( pArgs . chromosomes ) == 1 and pArgs . action == <str> :              chromosomes_list = cooler . Cooler ( pArgs . matrix ) . chromnames if pArgs . chromosomes [ 0 ] in chromosomes_list :                  hic_matrix = hm . hiCMatrix ( pArgs . matrix , pChrnameList = pArgs . chromosomes )  else :                  log . error ( <str> . format ( pArgs . matrix , pArgs . chromosomes [ 0 ] ) ) exit ( 1 )   else :              hic_matrix = hm . hiCMatrix ( pArgs . matrix )  chromosomes_list = list ( hic_matrix . chrBinBoundaries ) chromosomes_list_to_operate_on = [ ] for chromosome in pArgs . chromosomes :              if chromosome in chromosomes_list :                  chromosomes_list_to_operate_on . append ( chromosome )  else :                  log . warning ( <str> . format ( pArgs . matrix , chromosome ) )   if len ( chromosomes_list_to_operate_on ) == 0 :              log . error ( <str> . format ( pArgs . chromosomes , chromosomes_list ) ) exit ( 1 )  if pArgs . action == <str> :              hic_matrix . reorderChromosomes ( chromosomes_list_to_operate_on )  elif pArgs . action == <str> :              for chromosome in chromosomes_list :                  if chromosome in chromosomes_list_to_operate_on :                      chromosomes_list . remove ( chromosome )   hic_matrix . reorderChromosomes ( chromosomes_list )  elif pArgs . action == <str> :              hic_matrix . maskChromosomes ( chromosomes_list_to_operate_on )   elif pArgs . regions :          hic_matrix = hm . hiCMatrix ( pArgs . matrix ) chromosomes_list = list ( hic_matrix . chrBinBoundaries ) genomic_regions = [ ] with open ( pArgs . regions , <str> ) as file :              for line in file . readlines ( ) :                  _line = line . strip ( ) . split ( <str> ) if len ( line ) < 3 :                      log . warning ( <str> ) continue  if len ( _line ) >= 3 :                      chrom , start , end = _line [ 0 ] , int ( _line [ 1 ] ) , int ( _line [ 2 ] ) if chrom in chromosomes_list :                          genomic_regions . append ( ( chrom , start , end ) )  else :                          log . warning ( <str> . format ( pArgs . matrix , chrom ) )     if len ( genomic_regions ) == 0 :              log . error ( <str> . format ( chromosomes_list ) ) exit ( 1 )  matrix_indices_regions = [ ] for region in genomic_regions :              _regionBinRange = hic_matrix . getRegionBinRange ( region [ 0 ] , region [ 1 ] , region [ 2 ] ) if _regionBinRange is not None :                  start , end = _regionBinRange matrix_indices_regions . extend ( list ( range ( start , end ) ) )   if pArgs . action == <str> :              values_submatrix = matrix_indices_regions instances , features = hic_matrix . matrix . nonzero ( ) mask = np . isin ( instances , values_submatrix ) mask = np . logical_not ( mask ) hic_matrix . matrix . data [ mask ] = 0 hic_matrix . matrix . eliminate_zeros ( )  elif pArgs . action == <str> :              hic_matrix . maskBins ( matrix_indices_regions )  elif pArgs . action == <str> :              full_matrix_range = np . array ( range ( 0 , max ( hic_matrix . matrix . shape [ 0 ] , hic_matrix . matrix . shape [ 1 ] ) ) ) matrix_indices_regions = np . array ( matrix_indices_regions ) full_matrix_range [ matrix_indices_regions ] = - 1 mask = full_matrix_range != - 1 full_matrix_range = full_matrix_range [ mask ] hic_matrix . reorderBins ( full_matrix_range )   elif pArgs . maskBadRegions :          if check_cooler ( pArgs . matrix ) and len ( pArgs . chromosomes ) == 1 and pArgs . action == <str> :              hic_matrix = hm . hiCMatrix ( pArgs . matrix , pChrnameList = pArgs . chromosomes )  else :              hic_matrix = hm . hiCMatrix ( pArgs . matrix )   else :          log . info ( <str> )  return hic_matrix  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) hic_matrix = adjustMatrix ( args ) if hic_matrix is not None :          hic_matrix . save ( args . outFileName )    