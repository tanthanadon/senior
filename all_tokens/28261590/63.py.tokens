import logging from hicexplorer import chicViewpointBackgroundModel import numpy as np from sys import platform from tempfile import NamedTemporaryFile import os import pytest import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) log = logging . getLogger ( __name__ ) def are_files_equal ( file1 , file2 , delta = 1 , skip = 0 , eps = 0.1 ) :      mismatches = 0 with open ( file1 , <str> ) as textfile1 :          with open ( file2 , <str> ) as textfile2 :              file1_content = textfile1 . readlines ( ) file2_content = textfile2 . readlines ( ) for i , ( line1 , line2 ) in enumerate ( zip ( file1_content , file2_content ) ) :                  if i < skip :                      continue  line1_list = np . array ( line1 . split ( <str> ) ) line2_list = np . array ( line2 . split ( <str> ) ) line1_list = line1_list . astype ( np . float ) line2_list = line2_list . astype ( np . float ) for value1 , value2 in zip ( line1_list , line2_list ) :                      if np . abs ( value1 - value2 ) < eps :                          continue  else :                          log . debug ( <str> . format ( line1_list ) ) log . debug ( <str> . format ( line2_list ) ) mismatches += 1      if mismatches < delta :          return True  else :          log . debug ( <str> . format ( mismatches ) ) return False   def test_compute_background_functional ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( ROOT + <str> , ROOT + <str> , ROOT + <str> , outfile . name , 1 ) . split ( ) chicViewpointBackgroundModel . main ( args ) assert are_files_equal ( ROOT + <str> , outfile . name , delta = 700 , skip = 1 )  def test_compute_background_number_of_lines ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( ROOT + <str> , ROOT + <str> , ROOT + <str> , outfile . name , 1 ) . split ( ) chicViewpointBackgroundModel . main ( args ) length_background = 0 length_background_outfile = 0 with open ( ROOT + <str> ) as textfile :          file_content = textfile . readlines ( ) length_background = len ( file_content )  with open ( outfile . name ) as textfile :          file_content = textfile . readlines ( ) length_background_outfile = len ( file_content )  assert np . abs ( length_background - length_background_outfile ) < 1   