import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) from hicexplorer import hicTransform from hicmatrix import HiCMatrix as hm import numpy . testing as nt from tempfile import NamedTemporaryFile import os ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) original_matrix = ROOT + <str> original_matrix_cool = ROOT + <str> DELTA_DECIMAL = 0 def test_hic_transfer_obs_exp ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_perChromosome ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_non_zero ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_non_zero_perChromosome ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_lieberman ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_norm ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_obs_exp_norm_perChromosome ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_pearson ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_pearson_perChromosome ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_covariance ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )  def test_hic_transfer_covariance_perChromosome ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix , outfile . name ) . split ( ) hicTransform . main ( args ) test = hm . hiCMatrix ( ROOT + <str> ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( outfile . name )   