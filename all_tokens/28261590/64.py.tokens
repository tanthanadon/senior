import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) from hicexplorer import hicPCA from hicmatrix import HiCMatrix as hm from tempfile import NamedTemporaryFile import os import numpy . testing as nt import numpy as np import pyBigWig ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) import logging log = logging . getLogger ( __name__ ) DELTA_DECIMAL = 0 def are_files_equal ( file1 , file2 ) :      equal = True with open ( file1 ) as textfile1 , open ( file2 ) as textfile2 :          for x , y in zip ( textfile1 , textfile2 ) :              if x . startswith ( <str> ) :                  continue  if x != y :                  split_x = x . split ( <str> ) split_y = y . split ( <str> ) if split_x [ 0 ] == split_y [ 0 ] and split_x [ 1 ] == split_y [ 1 ] and split_x [ 2 ] == split_y [ 2 ] :                      if 0 <= abs ( abs ( float ( split_x [ 3 ] . strip ( ) ) ) - abs ( float ( split_y [ 3 ] . strip ( ) ) ) ) <= 0.01 :                          continue  else :                          log . debug ( <str> . format ( split_x , split_y ) )   equal = False break    return equal  def are_files_equal_bigwig ( pFile1 , pFile2 , pChromosomeList ) :      bw_file1 = pyBigWig . open ( pFile1 ) bw_file2 = pyBigWig . open ( pFile2 ) for chrom in pChromosomeList :          try :              bins_list_file1 = bw_file1 . intervals ( chrom )  except Exception :              log . debug ( <str> , chrom )  try :              bins_list_file2 = bw_file2 . intervals ( chrom )  except Exception :              log . debug ( <str> , chrom )  if bins_list_file1 is not None and bins_list_file1 [ 0 ] [ 2 ] != bins_list_file2 [ 0 ] [ 2 ] :              bins_list_file1 = np . array ( bins_list_file1 ) bins_list_file2 = np . array ( bins_list_file2 ) bins_list_file1 [ : ] [ 2 ] *= - 1  if bins_list_file1 is None and bins_list_file2 is None :              return True  nt . assert_array_almost_equal ( np . absolute ( bins_list_file1 ) , np . absolute ( bins_list_file2 ) , decimal = DELTA_DECIMAL )  return True  def test_pca_bedgraph_lieberman ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> args = <str> . format ( matrix , pca1 . name , pca2 . name ) . split ( ) hicPCA . main ( args ) assert are_files_equal ( ROOT + <str> , pca1 . name ) assert are_files_equal ( ROOT + <str> , pca2 . name ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bedgraph_lieberman_ignore_masked_bins ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> args = <str> . format ( matrix , pca1 . name , pca2 . name ) . split ( ) hicPCA . main ( args ) assert are_files_equal ( ROOT + <str> , pca1 . name ) assert are_files_equal ( ROOT + <str> , pca2 . name ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bigwig_lieberman ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> args = <str> . format ( matrix , pca1 . name , pca2 . name ) . split ( ) hicPCA . main ( args ) chrom_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] assert are_files_equal_bigwig ( ROOT + <str> , pca1 . name , chrom_list ) assert are_files_equal_bigwig ( ROOT + <str> , pca2 . name , chrom_list ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bedgraph_lieberman_gene_density ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> gene_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , gene_track , chromosomes ) . split ( ) hicPCA . main ( args ) assert are_files_equal ( ROOT + <str> , pca1 . name ) assert are_files_equal ( ROOT + <str> , pca2 . name ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bigwig_lieberman_gene_density ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> gene_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , gene_track , chromosomes ) . split ( ) hicPCA . main ( args ) chrom_list = [ <str> , <str> ] assert are_files_equal_bigwig ( ROOT + <str> , pca1 . name , chrom_list ) assert are_files_equal_bigwig ( ROOT + <str> , pca2 . name , chrom_list ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bigwig_lieberman_gene_density_intermediate_matrices ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pearson_matrix = NamedTemporaryFile ( suffix = <str> , delete = False ) obs_exp_matrix = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) pearson_matrix . close ( ) obs_exp_matrix . close ( ) matrix = ROOT + <str> gene_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , gene_track , chromosomes , pearson_matrix . name , obs_exp_matrix . name ) . split ( ) hicPCA . main ( args ) chrom_list = [ <str> , <str> ] assert are_files_equal_bigwig ( ROOT + <str> , pca1 . name , chrom_list ) assert are_files_equal_bigwig ( ROOT + <str> , pca2 . name , chrom_list ) test_pearson = hm . hiCMatrix ( ROOT + <str> ) new_pearson = hm . hiCMatrix ( pearson_matrix . name ) test_obs_exp = hm . hiCMatrix ( ROOT + <str> ) new_obs_exp = hm . hiCMatrix ( obs_exp_matrix . name ) nt . assert_array_almost_equal ( test_pearson . matrix . data , new_pearson . matrix . data , decimal = DELTA_DECIMAL ) nt . assert_array_almost_equal ( test_obs_exp . matrix . data , new_obs_exp . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name ) os . unlink ( obs_exp_matrix . name ) os . unlink ( pearson_matrix . name )  def test_pca_bigwig_gene_density_intermediate_matrices_norm ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pearson_matrix = NamedTemporaryFile ( suffix = <str> , delete = False ) obs_exp_matrix = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) pearson_matrix . close ( ) obs_exp_matrix . close ( ) matrix = ROOT + <str> gene_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , gene_track , chromosomes , pearson_matrix . name , obs_exp_matrix . name ) . split ( ) hicPCA . main ( args ) chrom_list = [ <str> , <str> ] assert are_files_equal_bigwig ( ROOT + <str> , pca1 . name , chrom_list ) assert are_files_equal_bigwig ( ROOT + <str> , pca2 . name , chrom_list ) test_pearson = hm . hiCMatrix ( ROOT + <str> ) new_pearson = hm . hiCMatrix ( pearson_matrix . name ) test_obs_exp = hm . hiCMatrix ( ROOT + <str> ) new_obs_exp = hm . hiCMatrix ( obs_exp_matrix . name ) test_obs_exp_h5 = hm . hiCMatrix ( ROOT + <str> ) test_pearson_h5 = hm . hiCMatrix ( ROOT + <str> ) nt . assert_array_almost_equal ( test_pearson . matrix . data , new_pearson . matrix . data , decimal = DELTA_DECIMAL ) nt . assert_array_almost_equal ( test_obs_exp . matrix . data , new_obs_exp . matrix . data , decimal = DELTA_DECIMAL ) nt . assert_array_almost_equal ( test_pearson_h5 . matrix . data , new_pearson . matrix . data , decimal = DELTA_DECIMAL ) nt . assert_array_almost_equal ( test_obs_exp_h5 . matrix . data , new_obs_exp . matrix . data , decimal = DELTA_DECIMAL ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name ) os . unlink ( obs_exp_matrix . name ) os . unlink ( pearson_matrix . name )  def test_pca_bigwig_lieberman_histoneMark_track ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> extra_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , extra_track , chromosomes ) . split ( ) hicPCA . main ( args ) chrom_list = [ <str> ] assert are_files_equal_bigwig ( ROOT + <str> , pca1 . name , chrom_list ) assert are_files_equal_bigwig ( ROOT + <str> , pca2 . name , chrom_list ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )  def test_pca_bedgraph_lieberman_histoneMark_track ( ) :      pca1 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca2 = NamedTemporaryFile ( suffix = <str> , delete = False ) pca1 . close ( ) pca2 . close ( ) matrix = ROOT + <str> extra_track = ROOT + <str> chromosomes = <str> args = <str> . format ( matrix , pca1 . name , pca2 . name , extra_track , chromosomes ) . split ( ) hicPCA . main ( args ) assert are_files_equal ( ROOT + <str> , pca1 . name ) assert are_files_equal ( ROOT + <str> , pca2 . name ) os . unlink ( pca1 . name ) os . unlink ( pca2 . name )   