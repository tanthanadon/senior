import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) from scipy . sparse import load_npz import matplotlib matplotlib . use ( <str> ) from matplotlib . colors import LogNorm import matplotlib . pyplot as plt import numpy as np from scipy . ndimage import rotate from mpl_toolkits . axes_grid1 import make_axes_locatable def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . RawDescriptionHelpFormatter , add_help = False , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , help = <str> , action = <str> ) parserOpt . add_argument ( <str> , help = <str> , action = <str> ) parserOpt . add_argument ( <str> , help = <str> <str> <str> , default = <str> ) parserOpt . add_argument ( <str> , help = <str> , type = float , default = None ) parserOpt . add_argument ( <str> , help = <str> , type = float , default = None ) parserOpt . add_argument ( <str> , help = <str> <str> , type = int , default = 300 ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) matrix = load_npz ( args . matrix ) matrix = matrix . toarray ( ) matrix = np . triu ( matrix ) matrix = rotate ( matrix , 45 , cval = np . nan ) matrix_shapes = matrix . shape matrix = matrix [ : matrix_shapes [ 0 ] // 2 , : ] if args . log1p :          matrix += 1  fig = plt . figure ( ) axis = plt . gca ( ) if args . log :          norm = LogNorm ( vmin = args . vMin , vmax = args . vMax )  elif args . log1p :          if args . vMin is not None :              vMin = args . vMin + 1  else :              vMin = None  if args . vMax is not None :              vMax = args . vMax + 1  else :              vMax = None  norm = LogNorm ( vmin = vMin , vmax = vMax )  else :          norm = matplotlib . colors . Normalize ( vmin = args . vMin , vmax = args . vMax )  matrix_axis = axis . matshow ( matrix , cmap = args . colorMap , norm = norm ) divider = make_axes_locatable ( axis ) cax = divider . append_axes ( <str> , size = <str> , pad = 0.05 ) axis . xaxis . set_visible ( False ) axis . yaxis . set_visible ( False ) fig . colorbar ( matrix_axis , cax = cax ) plt . tight_layout ( ) plt . savefig ( args . outputFile , dpi = args . dpi )   