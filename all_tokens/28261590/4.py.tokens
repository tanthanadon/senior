import argparse import sys import os import errno import math from multiprocessing import Process , Queue import time import logging log = logging . getLogger ( __name__ ) import numpy as np import matplotlib matplotlib . use ( <str> ) import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import hicmatrix . HiCMatrix as hm from hicexplorer import utilities from hicexplorer . _version import __version__ from . lib import Viewpoint def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( add_help = False , formatter_class = argparse . RawDescriptionHelpFormatter , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , required = True , nargs = <str> ) parserRequired . add_argument ( <str> , help = <str> <str> , required = True , type = int , default = [ 500000 , 500000 ] , nargs = 2 ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , nargs = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , nargs = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , action = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = <str> ) parserOpt . add_argument ( <str> , help = <str> <str> , type = int , default = 300 , required = False ) parserOpt . add_argument ( <str> , <str> , help = <str> , type = int , default = 1000 , required = False ) parserOpt . add_argument ( <str> , help = <str> <str> <str> , default = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , type = float , default = None ) parserOpt . add_argument ( <str> , <str> , help = <str> , type = float , default = None ) parserOpt . add_argument ( <str> , <str> , help = <str> , action = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , type = float , nargs = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , type = float , default = None ) parserOpt . add_argument ( <str> , <str> , help = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , action = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = 2 , type = int ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = [ <str> , <str> , <str> , <str> , <str> , <str> ] , type = str , nargs = <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> , required = False , default = 4 , type = int ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def plot_images ( pInteractionFileList , pHighlightDifferentialRegionsFileList , pBackgroundData , pArgs , pViewpointObj , pSignificantRegionsFileList , pQueue = None ) :      for j , interactionFile in enumerate ( pInteractionFileList ) :          number_of_rows_plot = len ( interactionFile ) matplotlib . rcParams . update ( { <str> : 9 } ) fig = plt . figure ( figsize = ( 9.4 , 4.8 ) ) z_score_heights = [ 0.07 ] * number_of_rows_plot viewpoint_height_ratio = 0.95 - ( 0.07 * number_of_rows_plot ) if viewpoint_height_ratio < 0.4 :              viewpoint_height_ratio = 0.4 _ratio = 0.6 / number_of_rows_plot z_score_heights = [ _ratio ] * number_of_rows_plot  if pArgs . pValue :              gs = gridspec . GridSpec ( 1 + len ( interactionFile ) , 2 , height_ratios = [ 0.95 - ( 0.07 * number_of_rows_plot ) , * z_score_heights ] , width_ratios = [ 0.75 , 0.25 ] ) gs . update ( hspace = 0.5 , wspace = 0.05 ) ax1 = plt . subplot ( gs [ 0 , 0 ] ) ax1 . margins ( x = 0 )  else :              ax1 = plt . gca ( )  colors = pArgs . colorList background_plot = True data_plot_label = None gene = <str> for i , interactionFile_ in enumerate ( interactionFile ) :              if pArgs . interactionFileFolder != <str> :                  absolute_path_interactionFile_ = pArgs . interactionFileFolder + <str> + interactionFile_  else :                  absolute_path_interactionFile_ = interactionFile_  header , data , background_data_plot , p_values , viewpoint_index_start , viewpoint_index_end = pViewpointObj . getDataForPlotting ( absolute_path_interactionFile_ , pArgs . range , pBackgroundData , pArgs . binResolution ) if len ( data ) <= 1 or len ( p_values ) <= 1 :                  log . warning ( <str> . format ( interactionFile_ , pArgs . range ) ) continue  matrix_name , viewpoint , upstream_range , downstream_range , gene , _ = header . strip ( ) . split ( <str> ) log . debug ( <str> . format ( matrix_name ) ) matrix_name = os . path . basename ( matrix_name ) matrix_name = matrix_name . split ( <str> ) [ 0 ] log . debug ( <str> . format ( matrix_name ) ) highlight_differential_regions = None significant_p_values = None significant_regions = None if pArgs . differentialTestResult :                  if pArgs . differentialTestResultsFolder != <str> :                      differentialFilePath = pArgs . differentialTestResultsFolder + <str> + pHighlightDifferentialRegionsFileList [ j ]  else :                      differentialFilePath = pHighlightDifferentialRegionsFileList [ j ]  highlight_differential_regions = pViewpointObj . readRejectedFile ( differentialFilePath , viewpoint_index_start , viewpoint_index_end , pArgs . binResolution , pArgs . range , viewpoint )  if pArgs . significantInteractions :                  if pArgs . significantInteractionFileFolder != <str> :                      significantInteractionsFilePath = pArgs . significantInteractionFileFolder + <str> + pSignificantRegionsFileList [ j ] [ i ]  else :                      significantInteractionsFilePath = pSignificantRegionsFileList [ j ] [ i ]  significant_regions , significant_p_values = pViewpointObj . readSignificantRegionsFile ( significantInteractionsFilePath , viewpoint_index_start , viewpoint_index_end , pArgs . binResolution , pArgs . range , viewpoint )  if not pArgs . plotSignificantInteractions :                  significant_regions = None  if data_plot_label :                  data_plot_label += pViewpointObj . plotViewpoint ( pAxis = ax1 , pData = data , pColor = colors [ i % len ( colors ) ] , pLabelName = gene + <str> + matrix_name , pHighlightRegion = highlight_differential_regions , pHighlightSignificantRegion = significant_regions )  else :                  data_plot_label = pViewpointObj . plotViewpoint ( pAxis = ax1 , pData = data , pColor = colors [ i % len ( colors ) ] , pLabelName = gene + <str> + matrix_name , pHighlightRegion = highlight_differential_regions , pHighlightSignificantRegion = significant_regions )  if background_plot :                  if background_data_plot is not None :                      data_plot_label += pViewpointObj . plotBackgroundModel ( pAxis = ax1 , pBackgroundData = background_data_plot , pXFold = pArgs . xFold )  background_plot = False  if pArgs . minPValue is not None or pArgs . maxPValue is not None :                  p_values = np . array ( p_values , dtype = np . float32 ) if significant_p_values :                      for location in significant_p_values :                          for x in range ( location [ 0 ] , location [ 1 ] ) :                              if x < len ( p_values ) :                                  p_values [ x ] = location [ 2 ]     p_values . clip ( pArgs . minPValue , pArgs . maxPValue , p_values )  if pArgs . pValue :                  pViewpointObj . plotPValue ( pAxis = plt . subplot ( gs [ 1 + i , 0 ] ) , pAxisLabel = plt . subplot ( gs [ 1 + i , 1 ] ) , pPValueData = p_values , pLabelText = gene + <str> + matrix_name , pCmap = pArgs . colorMapPvalue , pFigure = fig , pValueSignificanceLevels = pArgs . pValueSignificanceLevels )   if data_plot_label is not None :              ticks = [ ] x_labels = [ ] if pArgs . range [ 0 ] + pArgs . range [ 1 ] <= 2e6 :                  divisor_legend = 1e3 mod_legend = 2e5 if pArgs . range [ 0 ] + pArgs . range [ 1 ] <= 1e4 :                      mod_legend = 5e3  elif pArgs . range [ 0 ] + pArgs . range [ 1 ] <= 5e4 :                      mod_legend = 1e4  elif pArgs . range [ 0 ] + pArgs . range [ 1 ] <= 1e5 :                      mod_legend = 5e4  elif pArgs . range [ 0 ] + pArgs . range [ 1 ] <= 5e5 :                      mod_legend = 1e5  log . debug ( <str> . format ( divisor_legend ) ) unit = <str>  elif pArgs . range [ 0 ] + pArgs . range [ 1 ] > 2e6 :                  divisor_legend = 1e6 mod_legend = 1e6 unit = <str>  for k , j in zip ( range ( ( pArgs . range [ 0 ] ) ) , range ( pArgs . range [ 0 ] , 1 , - 1 ) ) :                  if j % mod_legend == 0 :                      x_labels . append ( str ( - int ( j ) // int ( divisor_legend ) ) + unit ) ticks . append ( k // pArgs . binResolution )   x_labels . append ( <str> ) ticks . append ( pArgs . range [ 0 ] // pArgs . binResolution ) referencepoint_index = ticks [ - 1 ] for k , j in zip ( range ( pArgs . range [ 1 ] ) , range ( 1 , pArgs . range [ 1 ] + 1 , 1 ) ) :                  if j % mod_legend == 0 :                      x_labels . append ( str ( int ( j ) // int ( divisor_legend ) ) + unit ) ticks . append ( referencepoint_index + ( k // pArgs . binResolution ) )   ax1 . set_ylabel ( <str> ) ax1 . set_xticks ( ticks ) ax1 . set_xticklabels ( x_labels ) data_legend = [ label . get_label ( ) for label in data_plot_label ] ax1 . legend ( data_plot_label , data_legend , loc = 0 ) sample_prefix = <str> if pArgs . outFileName :                  if pArgs . outputFolder != <str> :                      outFileName = pArgs . outputFolder + <str> + pArgs . outFileName  else :                      outFileName = pArgs . outFileName   else :                  for interactionFile_ in interactionFile :                      sample_prefix += interactionFile_ . split ( <str> ) [ - 1 ] . split ( <str> ) [ 0 ] + <str>  if sample_prefix . endswith ( <str> ) :                      sample_prefix = sample_prefix [ : - 1 ]  region_prefix = <str> . join ( interactionFile [ 0 ] . split ( <str> ) [ - 1 ] . split ( <str> ) [ 1 : 4 ] ) outFileName = gene + <str> + sample_prefix + <str> + region_prefix if pArgs . outputFolder != <str> :                      outFileName = pArgs . outputFolder + <str> + outFileName   if pArgs . outputFormat != outFileName . split ( <str> ) [ - 1 ] :                  outFileName = outFileName + <str> + pArgs . outputFormat  plt . savefig ( outFileName , dpi = pArgs . dpi )  plt . close ( fig )  if pQueue is None :          return  pQueue . put ( <str> ) return  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) viewpointObj = Viewpoint ( ) background_data = None if not os . path . exists ( args . outputFolder ) :          try :              os . makedirs ( args . outputFolder )  except OSError as exc :              if exc . errno != errno . EEXIST :                  raise    if args . pValueSignificanceLevels :          old = - 100 for element in args . pValueSignificanceLevels :              if old < element :                  old = element continue  else :                  log . error ( <str> . format ( args . pValueSignificanceLevels ) ) exit ( 1 )    if args . backgroundModelFile :          background_data = viewpointObj . readBackgroundDataFile ( args . backgroundModelFile , args . range , pMean = True )  interactionFileList = [ ] highlightDifferentialRegionsFileList = [ ] highlightSignificantRegionsFileList = [ ] if args . batchMode :          with open ( args . interactionFile [ 0 ] , <str> ) as interactionFile :              file_ = True while file_ :                  lines = [ ] for i in range ( 0 , args . plotSampleNumber ) :                      file_ = interactionFile . readline ( ) . strip ( ) if file_ != <str> :                          lines . append ( file_ )   interactionFileList . append ( lines )   if args . differentialTestResult :              if args . differentialTestResult and args . plotSampleNumber != 2 :                  log . warning ( <str> ) args . differentialTestResult = None  else :                  with open ( args . differentialTestResult [ 0 ] , <str> ) as differentialTestFile :                      file_ = True while file_ :                          file_ = differentialTestFile . readline ( ) . strip ( ) if file_ != <str> :                              highlightDifferentialRegionsFileList . append ( file_ )      if args . significantInteractions :              with open ( args . significantInteractions [ 0 ] , <str> ) as significantRegionsFile :                  file_ = True while file_ :                      lines = [ ] for i in range ( 0 , args . plotSampleNumber ) :                          file_ = significantRegionsFile . readline ( ) . strip ( ) if file_ != <str> :                              lines . append ( file_ )   if len ( lines ) > 0 :                          highlightSignificantRegionsFileList . append ( lines )     interactionFilesPerThread = len ( interactionFileList ) // args . threads highlightSignificantRegionsFileListThread = len ( highlightSignificantRegionsFileList ) // args . threads all_data_collected = False queue = [ None ] * args . threads process = [ None ] * args . threads thread_done = [ False ] * args . threads for i in range ( args . threads ) :              if i < args . threads - 1 :                  interactionFileListThread = interactionFileList [ i * interactionFilesPerThread : ( i + 1 ) * interactionFilesPerThread ] highlightDifferentialRegionsFileListThread = highlightDifferentialRegionsFileList [ i * interactionFilesPerThread : ( i + 1 ) * interactionFilesPerThread ] highlightSignificantRegionsFileListThread = highlightSignificantRegionsFileList [ i * interactionFilesPerThread : ( i + 1 ) * interactionFilesPerThread ]  else :                  interactionFileListThread = interactionFileList [ i * interactionFilesPerThread : ] highlightDifferentialRegionsFileListThread = highlightDifferentialRegionsFileList [ i * interactionFilesPerThread : ] highlightSignificantRegionsFileListThread = highlightSignificantRegionsFileList [ i * interactionFilesPerThread : ]  queue [ i ] = Queue ( ) process [ i ] = Process ( target = plot_images , kwargs = dict ( pInteractionFileList = interactionFileListThread , pHighlightDifferentialRegionsFileList = highlightDifferentialRegionsFileListThread , pBackgroundData = background_data , pArgs = args , pViewpointObj = viewpointObj , pSignificantRegionsFileList = highlightSignificantRegionsFileListThread , pQueue = queue [ i ] ) ) process [ i ] . start ( )  while not all_data_collected :              for i in range ( args . threads ) :                  if queue [ i ] is not None and not queue [ i ] . empty ( ) :                      _ = queue [ i ] . get ( ) queue [ i ] = None process [ i ] . join ( ) process [ i ] . terminate ( ) process [ i ] = None thread_done [ i ] = True   all_data_collected = True for thread in thread_done :                  if not thread :                      all_data_collected = False   time . sleep ( 1 )   else :          interactionFileList = [ args . interactionFile ] highlightDifferentialRegionsFileList = args . differentialTestResult highlightSignificantRegionsFileList = [ args . significantInteractions ] plot_images ( pInteractionFileList = interactionFileList , pHighlightDifferentialRegionsFileList = highlightDifferentialRegionsFileList , pBackgroundData = background_data , pArgs = args , pViewpointObj = viewpointObj , pSignificantRegionsFileList = highlightSignificantRegionsFileList )    