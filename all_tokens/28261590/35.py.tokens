import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from io import StringIO import cooler from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ from hicexplorer . utilities import toString from hicmatrix . HiCMatrix import check_cooler import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . RawDescriptionHelpFormatter , add_help = False , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> <str> , nargs = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) for matrix in args . matrices :          generated_by = None genome_assembly = None statistics = None generated_by_cooler_lib = None tool_url = None matrix_generated_by = None matrix_generated_by_url = None creation_date = None chromosomes = None bin_length = None size = None nchroms = None num_non_zero = None min_non_zero = None max_non_zero = None sum_elements = None num_nan_bins = None if check_cooler ( matrix ) and args . no_metadata :              cooler_file = cooler . Cooler ( matrix ) if cooler_file . info is not None :                  if <str> in cooler_file . info :                      bin_length = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      size = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      nchroms = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      chromosomes = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      num_non_zero = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      min_non_zero = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      max_non_zero = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      generated_by = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      genome_assembly = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      if cooler_file . info [ <str> ] is not None :                          if <str> in cooler_file . info [ <str> ] :                              statistics = cooler_file . info [ <str> ] [ <str> ]    if <str> in cooler_file . info :                      generated_by_cooler_lib = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      tool_url = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      matrix_generated_by = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      matrix_generated_by_url = toString ( cooler_file . info [ <str> ] )  if <str> in cooler_file . info :                      creation_date = cooler_file . info [ <str> ]  if <str> in cooler_file . info :                      sum_elements = cooler_file . info [ <str> ]    else :              hic_ma = hm . hiCMatrix ( matrix ) size = hic_ma . matrix . shape [ 0 ] num_non_zero = hic_ma . matrix . nnz sum_elements = hic_ma . matrix . sum ( ) / 2 bin_length = hic_ma . getBinSize ( ) num_nan_bins = len ( hic_ma . nan_bins ) min_non_zero = hic_ma . matrix . data . min ( ) max_non_zero = hic_ma . matrix . data . max ( ) chromosomes = list ( hic_ma . chrBinBoundaries )  information = StringIO ( ) information . write ( <str> . format ( __version__ ) ) if matrix is not None :              information . write ( <str> . format ( matrix ) )  if creation_date is not None :              information . write ( <str> . format ( creation_date ) )  if genome_assembly is not None :              information . write ( <str> . format ( genome_assembly ) )  if size is not None :              information . write ( <str> . format ( size ) )  if bin_length is not None :              information . write ( <str> . format ( bin_length ) )  if sum_elements is not None :              information . write ( <str> . format ( sum_elements ) )  if chromosomes is not None :              information . write ( <str> . format ( <str> . join ( toString ( chromosomes ) ) ) )  if nchroms is not None :              information . write ( <str> . format ( nchroms ) )  if num_non_zero is not None :              information . write ( <str> . format ( num_non_zero ) )  if min_non_zero is not None :              information . write ( <str> . format ( min_non_zero ) )  if max_non_zero is not None :              information . write ( <str> . format ( max_non_zero ) )  if num_nan_bins is not None :              information . write ( <str> . format ( num_nan_bins ) )  if check_cooler ( matrix ) :              information . write ( <str> . format ( cooler . Cooler ( matrix ) . bins ( ) . columns . values ) )  if generated_by is not None :              information . write ( <str> . format ( generated_by ) )  if generated_by_cooler_lib is not None :              information . write ( <str> . format ( generated_by_cooler_lib ) )  if tool_url is not None :              information . write ( <str> . format ( tool_url ) )  if matrix_generated_by is not None :              information . write ( <str> . format ( matrix_generated_by ) )  if matrix_generated_by_url is not None :              information . write ( <str> . format ( matrix_generated_by_url ) )  if statistics is not None :              information . write ( <str> . format ( statistics ) )  if args . outFileName :              with open ( args . outFileName , <str> ) as file :                  file . write ( information . getvalue ( ) )   else :              print ( information . getvalue ( ) )  information . close ( )    