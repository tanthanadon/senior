import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse import os import errno import matplotlib import pandas as pd matplotlib . use ( <str> ) import matplotlib . pyplot as plt from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) def parse_arguments ( ) :      parser = argparse . ArgumentParser ( description = <str> <str> , add_help = False , usage = <str> <str> ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , type = argparse . FileType ( <str> ) , nargs = <str> , required = True ) parserRequired . add_argument ( <str> , help = <str> <str> , nargs = <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , help = <str> , type = int , default = 200 ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def save_html ( filename , unmap_table , discard_table , distance_table , orientation_table , all_table ) :      root = os . path . dirname ( os . path . abspath ( __file__ ) ) html = open ( os . path . join ( root , <str> ) , <str> ) html_content = html . read ( ) html_content = html_content . replace ( <str> , unmap_table . style . format ( lambda x : <str> . format ( x ) if x > 1 else <str> . format ( x ) ) . render ( ) ) html_content = html_content . replace ( <str> , discard_table . style . format ( lambda x : <str> . format ( x ) if x > 1 else <str> . format ( x ) ) . render ( ) ) html_content = html_content . replace ( <str> , distance_table . style . format ( lambda x : <str> . format ( x ) if x > 1 else <str> . format ( x ) ) . render ( ) ) html_content = html_content . replace ( <str> , orientation_table . style . format ( lambda x : <str> . format ( x ) if x > 1 else <str> . format ( x ) ) . render ( ) ) all_table = all_table [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ] html_content = html_content . replace ( <str> , all_table . style . render ( ) ) with open ( filename , <str> ) as fh :          fh . write ( html_content )  html . close ( )  def make_sure_path_exists ( path ) :      try :          os . makedirs ( path )  except OSError as exception :          if exception . errno != errno . EEXIST :              raise    def make_figure_pairs_used ( table , filename , dpi ) :      prc_table = table [ [ <str> , <str> , <str> ] ] / 1e6 fig = plt . figure ( figsize = ( 7 , 5 ) ) ax = fig . add_subplot ( 111 ) prc_table . plot ( kind = <str> , ax = ax ) handles , labels = ax . get_legend_handles_labels ( ) lgd = ax . legend ( handles , labels , loc = <str> , bbox_to_anchor = ( 1 , 0.5 ) ) ax . set_xlabel ( <str> ) ax . set_ylabel ( <str> ) plt . savefig ( filename , bbox_extra_artists = ( lgd , ) , bbox_inches = <str> , dpi = dpi )  def make_figure_umappable_non_unique_reads ( table , filename , dpi ) :      prc_table = table [ [ <str> , <str> , <str> , <str> ] ] . T / table [ <str> ] fig = plt . figure ( figsize = ( 7 , 5 ) ) ax = fig . add_subplot ( 111 ) prc_table . plot . bar ( ax = ax ) labels = ax . get_xticklabels ( ) ax . set_xticklabels ( labels , rotation = 45 , ha = <str> ) handles , labels = ax . get_legend_handles_labels ( ) lgd = ax . legend ( handles , labels , loc = <str> , bbox_to_anchor = ( 1 , 0.5 ) ) ax . set_ylabel ( <str> ) plt . savefig ( filename , bbox_extra_artists = ( lgd , ) , bbox_inches = <str> , dpi = dpi ) ret_table = table [ [ <str> , <str> , <str> , <str> ] ] . join ( prc_table . T , rsuffix = <str> ) return ret_table [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ]  def make_figure_pairs_discarded ( table , filename , dpi ) :      prc_table = table [ [ <str> , <str> , <str> , <str> , <str> , <str> ] ] . T / table [ <str> ] fig = plt . figure ( figsize = ( 7 , 5 ) ) ax = fig . add_subplot ( 111 ) prc_table . plot . bar ( ax = ax ) labels = ax . get_xticklabels ( ) ax . set_xticklabels ( labels , rotation = 45 , ha = <str> ) handles , labels = ax . get_legend_handles_labels ( ) lgd = ax . legend ( handles , labels , loc = <str> , bbox_to_anchor = ( 1 , 0.5 ) ) ax . set_ylabel ( <str> ) plt . savefig ( filename , bbox_extra_artists = ( lgd , ) , bbox_inches = <str> , dpi = dpi ) ret_table = table [ [ <str> , <str> , <str> , <str> , <str> , <str> ] ] . join ( prc_table . T , rsuffix = <str> ) return ret_table [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ]  def make_figure_distance ( table , filename ) :      prc_table2 = table [ [ <str> , <str> , <str> ] ] . T / table [ <str> ] fig = plt . figure ( figsize = ( 5 , 4 ) ) ax = fig . add_subplot ( 111 ) prc_table2 . plot . bar ( ax = ax ) labels = ax . get_xticklabels ( ) ax . set_xticklabels ( labels , rotation = 45 , ha = <str> ) handles , labels = ax . get_legend_handles_labels ( ) lgd = ax . legend ( handles , labels , loc = <str> , bbox_to_anchor = ( 1 , 0.5 ) ) ax . set_ylabel ( <str> ) plt . savefig ( filename , bbox_extra_artists = ( lgd , ) , bbox_inches = <str> , dpi = 200 ) ret_table = table [ [ <str> , <str> , <str> ] ] . join ( prc_table2 . T , rsuffix = <str> ) return ret_table [ [ <str> , <str> , <str> , <str> , <str> , <str> ] ]  def make_figure_read_orientation ( table , filename , dpi ) :      _t = table [ [ <str> , <str> , <str> , <str> ] ] . T prc_table3 = _t / _t . sum ( axis = 0 ) fig = plt . figure ( figsize = ( 4 , 3 ) ) ax = fig . add_subplot ( 111 ) prc_table3 . plot . bar ( ax = ax ) handles , labels = ax . get_legend_handles_labels ( ) lgd = ax . legend ( handles , labels , loc = <str> , bbox_to_anchor = ( 1 , 0.5 ) ) ax . set_ylabel ( <str> ) plt . savefig ( filename , bbox_extra_artists = ( lgd , ) , bbox_inches = <str> , dpi = dpi ) ret_table = table [ [ <str> , <str> , <str> , <str> ] ] . join ( prc_table3 . T , rsuffix = <str> ) return ret_table [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ]  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) params = dict ( ) make_sure_path_exists ( args . outputFolder ) for fh in args . logfiles :          in_log_part = False log . debug ( <str> . format ( fh . name ) ) for line in fh . readlines ( ) :              if line . startswith ( <str> ) :                  in_log_part = True  if in_log_part is True :                  if line . strip ( ) == <str> or line . startswith ( <str> ) :                      continue  fields = line . strip ( ) . split ( <str> ) if len ( fields ) == 1 :                      continue  if fields [ 0 ] not in params :                      params [ fields [ 0 ] ] = [ ]  try :                      params [ fields [ 0 ] ] . append ( int ( fields [ 1 ] ) )  except ValueError :                      params [ fields [ 0 ] ] . append ( fields [ 1 ] )     table = pd . DataFrame ( params ) if args . labels and len ( args . labels ) == len ( args . logfiles ) :          try :              table [ <str> ] = args . labels  except ValueError :              log . error ( <str> <str> ) exit ( )  table = table . set_index ( <str> )  else :          table = table . set_index ( <str> )  if <str> not in table . columns :          table [ <str> ] = table [ <str> ] - ( table [ <str> ] + table [ <str> ] + table [ <str> ] )  if <str> in table . columns :          table [ <str> ] = table [ <str> ]  make_figure_pairs_used ( table , args . outputFolder + <str> , args . dpi ) unmap_table = make_figure_umappable_non_unique_reads ( table , args . outputFolder + <str> , args . dpi ) discarded_table = make_figure_pairs_discarded ( table , args . outputFolder + <str> , args . dpi ) distance_table = make_figure_distance ( table , args . outputFolder + <str> ) read_orientation_table = make_figure_read_orientation ( table , args . outputFolder + <str> , args . dpi ) save_html ( args . outputFolder + <str> , unmap_table , discarded_table , distance_table , read_orientation_table , table ) unmap_table . to_csv ( args . outputFolder + <str> , sep = <str> ) discarded_table . to_csv ( args . outputFolder + <str> , sep = <str> ) distance_table . to_csv ( args . outputFolder + <str> , sep = <str> ) read_orientation_table . to_csv ( args . outputFolder + <str> , sep = <str> ) table . to_csv ( args . outputFolder + <str> , sep = <str> )   