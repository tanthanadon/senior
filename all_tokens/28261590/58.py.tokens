import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import os . path from tempfile import NamedTemporaryFile from hicexplorer import hicConvertFormat from hicmatrix import HiCMatrix as hm from hicmatrix . lib import MatrixFileHandler import gzip from scipy . sparse import triu import numpy . testing as nt import numpy as np REMOVE_OUTPUT = True DELTA_DECIMAL = 0 ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) original_matrix_h5 = ROOT + <str> original_matrix_cool = ROOT + <str> original_matrix_cool_chr4 = ROOT + <str> def test_hicConvertFormat_h5_to_cool ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_h5 , outfile . name ) . split ( ) hicConvertFormat . main ( args ) test = hm . hiCMatrix ( original_matrix_cool ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL )  def test_hicConvertFormat_h5_to_cool_enforce_integer ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_h5 , outfile . name ) . split ( ) hicConvertFormat . main ( args ) test = hm . hiCMatrix ( original_matrix_cool ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = 0 ) assert issubclass ( test . matrix . data . dtype . type , np . integer )  def test_hicConvertFormat_h5_to_homer ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool_chr4 , outfile . name ) . split ( ) hicConvertFormat . main ( args ) test = hm . hiCMatrix ( original_matrix_cool_chr4 ) f = gzip . open ( outfile . name , <str> ) file_content = f . read ( ) outfile2 = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile2 . close ( ) with open ( outfile2 . name , <str> ) as matrix_file :          matrix_file . write ( file_content )  matrixFileHandlerInput = MatrixFileHandler ( pFileType = <str> , pMatrixFile = outfile2 . name ) _matrix , cut_intervals , nan_bins , distance_counts , correction_factors = matrixFileHandlerInput . load ( ) nt . assert_array_almost_equal ( test . matrix . data , _matrix . data , decimal = 0 )  def test_hicConvertFormat_h5_to_ginteractions ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_h5 , outfile . name ) . split ( ) hicConvertFormat . main ( args )  def test_hicConvertFormat_h5_to_mcool ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_h5 , outfile . name ) . split ( ) hicConvertFormat . main ( args ) new1 = hm . hiCMatrix ( outfile . name + <str> ) new2 = hm . hiCMatrix ( outfile . name + <str> ) new3 = hm . hiCMatrix ( outfile . name + <str> )  def test_hicConvertFormat_cool_to_h5 ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) args = <str> . format ( original_matrix_cool , outfile . name ) . split ( ) hicConvertFormat . main ( args ) test = hm . hiCMatrix ( original_matrix_h5 ) new = hm . hiCMatrix ( outfile . name ) nt . assert_array_almost_equal ( test . matrix . data , new . matrix . data , decimal = DELTA_DECIMAL )  def test_hicConvertFormat_hicpro_to_cool ( ) :      outfile = NamedTemporaryFile ( suffix = <str> , delete = False ) outfile . close ( ) hicprofile = ROOT + <str> bedfile = ROOT + <str> args = <str> . format ( hicprofile , outfile . name , bedfile ) . split ( ) hicConvertFormat . main ( args ) new = hm . hiCMatrix ( outfile . name ) matrixFileHandlerInput = MatrixFileHandler ( pFileType = <str> , pMatrixFile = hicprofile , pBedFileHicPro = bedfile ) _matrix , cut_intervals , nan_bins , distance_counts , correction_factors = matrixFileHandlerInput . load ( ) new . matrix = triu ( new . matrix ) nt . assert_array_almost_equal ( new . matrix . data , _matrix . data , decimal = 0 )   