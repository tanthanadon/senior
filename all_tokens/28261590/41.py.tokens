import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) from tempfile import NamedTemporaryFile import shutil import argparse import os import errno from hicexplorer import hicBuildMatrix as hicBuildMatrix from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . ArgumentDefaultsHelpFormatter , add_help = False , description = ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> , metavar = <str> , nargs = 2 , required = True ) parserRequired . add_argument ( <str> , help = <str> <str> <str> , metavar = <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , help = <str> ) parserOpt . add_argument ( <str> , help = <str> <str> <str> <str> <str> <str> <str> <str> <str> ) parserOpt . add_argument ( <str> , help = <str> , required = False , default = 1000000 , type = int ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) if not os . path . exists ( args . QCfolder ) :          try :              os . makedirs ( args . QCfolder )  except OSError as exc :              if exc . errno != errno . EEXIST :                  raise    outFile = NamedTemporaryFile ( suffix = <str> , delete = False ) args_hicBuildMatrix = <str> . format ( args . samFiles [ 0 ] , args . samFiles [ 1 ] , outFile . name , args . QCfolder , str ( args . lines ) ) . split ( ) args_hicBuildMatrix . append ( <str> ) args_hicBuildMatrix . append ( str ( 10000 ) ) if args . restrictionSequence :          args_hicBuildMatrix . append ( <str> ) args_hicBuildMatrix . append ( args . restrictionSequence )  if args . danglingSequence :          args_hicBuildMatrix . append ( <str> ) args_hicBuildMatrix . append ( args . danglingSequence )  log . debug ( <str> . format ( args_hicBuildMatrix ) ) hicBuildMatrix . main ( args_hicBuildMatrix )   