import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) import argparse from hicmatrix import HiCMatrix as hm from hicexplorer . _version import __version__ import logging log = logging . getLogger ( __name__ ) def parse_arguments ( args = None ) :      parser = argparse . ArgumentParser ( formatter_class = argparse . ArgumentDefaultsHelpFormatter , add_help = False , description = ( <str> <str> <str> <str> ) ) parserRequired = parser . add_argument_group ( <str> ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> , metavar = <str> , nargs = <str> , required = True ) parserRequired . add_argument ( <str> , <str> , help = <str> <str> <str> , required = True ) parserOpt = parser . add_argument_group ( <str> ) parserOpt . add_argument ( <str> , <str> , action = <str> , help = <str> ) parserOpt . add_argument ( <str> , action = <str> , version = <str> . format ( __version__ ) ) return parser  def main ( args = None ) :      args = parse_arguments ( ) . parse_args ( args ) hic = hm . hiCMatrix ( args . matrices [ 0 ] ) summed_matrix = hic . matrix nan_bins = set ( hic . nan_bins ) for matrix in args . matrices [ 1 : ] :          hic_to_append = hm . hiCMatrix ( matrix ) if hic . chrBinBoundaries != hic_to_append . chrBinBoundaries :              log . error ( <str> <str> <str> . format ( args . matrices [ 0 ] , list ( hic . chrBinBoundaries ) , matrix , list ( hic_to_append . chrBinBoundaries ) ) ) exit ( 1 )  try :              summed_matrix = summed_matrix + hic_to_append . matrix if len ( hic_to_append . nan_bins ) :                  nan_bins = nan_bins . union ( hic_to_append . nan_bins )   except Exception :              log . exception ( <str> . format ( matrix ) ) exit ( 1 )   hic . setMatrixValues ( summed_matrix ) hic . maskBins ( sorted ( nan_bins ) ) hic . save ( args . outFileName ) return   