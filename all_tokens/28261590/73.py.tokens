import os . path from tempfile import NamedTemporaryFile from psutil import virtual_memory import logging log = logging . getLogger ( __name__ ) from hicexplorer import hicDetectLoops mem = virtual_memory ( ) memory = mem . total / 2 ** 30 LOW_MEMORY = 2 MID_MEMORY = 7 HIGH_MEMORY = 200 REMOVE_OUTPUT = True ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) def are_files_equal ( file1 , file2 , delta = None ) :      equal = True if delta :          mismatches = 0  with open ( file1 ) as textfile1 , open ( file2 ) as textfile2 :          for x , y in zip ( textfile1 , textfile2 ) :              if x . startswith ( <str> ) :                  continue  if x != y :                  if delta :                      mismatches += 1 if mismatches > delta :                          equal = False break   else :                      equal = False break     return equal  def test_main_h5 ( ) :      outfile_loop_h5 = NamedTemporaryFile ( suffix = <str> , delete = True ) args = <str> . format ( ROOT + <str> , outfile_loop_h5 . name ) . split ( ) hicDetectLoops . main ( args )  def test_main_cool_chromosomes ( ) :      outfile_loop_cool = NamedTemporaryFile ( suffix = <str> , delete = True ) args = <str> . format ( ROOT + <str> , outfile_loop_cool . name ) . split ( ) hicDetectLoops . main ( args ) assert are_files_equal ( ROOT + <str> , outfile_loop_cool . name , delta = 0 )   