import warnings warnings . simplefilter ( action = <str> , category = RuntimeWarning ) warnings . simplefilter ( action = <str> , category = PendingDeprecationWarning ) from hicexplorer import hicFindTADs from hicmatrix import HiCMatrix as hm from tempfile import mkdtemp import shutil import os import numpy . testing as nt ROOT = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) , <str> ) def are_files_equal ( file1 , file2 , pDifference = 10 ) :      equal = True with open ( file1 ) as textfile1 , open ( file2 ) as textfile2 :          for x , y in zip ( textfile1 , textfile2 ) :              if x . startswith ( <str> ) :                  continue  if x != y :                  count = sum ( 1 for a , b in zip ( x , y ) if a != b ) if count > pDifference :                      equal = False break     return equal  def test_find_TADs_fdr ( ) :      matrix = ROOT + <str> tad_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( matrix , tad_folder ) . split ( ) hicFindTADs . main ( args ) new = hm . hiCMatrix ( tad_folder + <str> ) test = hm . hiCMatrix ( ROOT + <str> ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( test . cut_intervals , new . cut_intervals ) print ( tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) shutil . rmtree ( tad_folder )  def test_find_TADs_fdr_chromosomes ( ) :      matrix = ROOT + <str> tad_folder = mkdtemp ( prefix = <str> ) args = <str> . format ( matrix , tad_folder ) . split ( ) hicFindTADs . main ( args ) new = hm . hiCMatrix ( tad_folder + <str> ) test = hm . hiCMatrix ( ROOT + <str> ) nt . assert_equal ( test . matrix . data , new . matrix . data ) nt . assert_equal ( test . cut_intervals , new . cut_intervals ) print ( tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) shutil . rmtree ( tad_folder )  def test_find_TADs_bonferroni ( ) :      matrix = ROOT + <str> tad_folder = mkdtemp ( prefix = <str> ) shutil . copy ( ROOT + <str> , tad_folder + <str> ) shutil . copy ( ROOT + <str> , tad_folder + <str> ) args = <str> . format ( matrix , tad_folder ) . split ( ) hicFindTADs . main ( args ) print ( tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> , pDifference = 10 ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) shutil . rmtree ( tad_folder )  def test_find_TADs_none ( ) :      matrix = ROOT + <str> tad_folder = mkdtemp ( prefix = <str> ) shutil . copy ( ROOT + <str> , tad_folder + <str> ) shutil . copy ( ROOT + <str> , tad_folder + <str> ) args = <str> . format ( matrix , tad_folder ) . split ( ) hicFindTADs . main ( args ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) assert are_files_equal ( ROOT + <str> , tad_folder + <str> ) shutil . rmtree ( tad_folder )   