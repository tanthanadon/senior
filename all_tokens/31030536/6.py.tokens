import humanreadable as hr import pytest from tcconfig . _network import ( _get_iproute2_upper_limite_rate , get_anywhere_network , get_upper_limit_rate , is_anywhere_network , sanitize_network , ) @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  class Test_is_anywhere_network :      @ pytest . mark . parametrize ( [ <str> , <str> , <str> ] , [ [ <str> , 4 , True ] , [ <str> , 4 , False ] , [ <str> , 6 , True ] , [ <str> , 6 , True ] , [ <str> , 6 , False ] , ] , ) def test_normal ( self , network , ip_version , expected ) :          assert is_anywhere_network ( network , ip_version ) == expected  @ pytest . mark . parametrize ( [ <str> , <str> , <str> ] , [ [ None , 4 , ValueError ] , [ <str> , 5 , ValueError ] , [ <str> , None , ValueError ] ] , ) def test_exception ( self , network , ip_version , expected ) :          with pytest . raises ( expected ) :              is_anywhere_network ( network , ip_version )    class Test_get_iproute2_upper_limite_rate :      def test_normal ( self ) :          assert _get_iproute2_upper_limite_rate ( ) == hr . BitPerSecond ( <str> )   class Test_get_anywhere_network :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ 4 , <str> ] , [ <str> , <str> ] , [ 6 , <str> ] , [ <str> , <str> ] ] ) def test_normal ( self , value , expected ) :          assert get_anywhere_network ( value ) == expected  @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ None , ValueError ] , [ <str> , ValueError ] ] ) def test_exception ( self , value , expected ) :          with pytest . raises ( expected ) :              get_anywhere_network ( value )    class Test_get_upper_limit_rate :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ 1 , 1000 ] , [ 0 , 0 ] ] ) def test_normal ( self , monkeypatch , device_option , speed , expected ) :          if device_option is None :              pytest . skip ( <str> )  monkeypatch . setattr ( <str> , lambda x : speed ) assert get_upper_limit_rate ( device_option ) . kilo_bps == expected  @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ - 1 , _get_iproute2_upper_limite_rate ( ) ] ] ) def test_normal_paravirt ( self , monkeypatch , device_option , speed , expected ) :          if device_option is None :              pytest . skip ( <str> )  monkeypatch . setattr ( <str> , lambda x : speed ) assert get_upper_limit_rate ( device_option ) == expected  @ staticmethod def raise_ioerror ( tc_device ) :          raise OSError ( )  def test_exception ( self , monkeypatch , device_option ) :          if device_option is None :              pytest . skip ( <str> )  monkeypatch . setattr ( <str> , self . raise_ioerror ) assert get_upper_limit_rate ( device_option ) == _get_iproute2_upper_limite_rate ( )   class Test_sanitize_network :      @ pytest . mark . parametrize ( [ <str> , <str> , <str> ] , [ [ <str> , 4 , <str> ] , [ <str> , 4 , <str> ] , [ <str> , 4 , <str> ] , [ <str> , 4 , <str> ] , [ <str> , 6 , <str> ] , [ <str> , 4 , <str> ] , [ <str> , 4 , <str> ] , [ <str> , 6 , <str> ] , [ <str> , 6 , <str> ] , [ <str> , 4 , <str> ] , [ None , 4 , <str> ] , [ <str> , 6 , <str> ] , [ None , 6 , <str> ] , ] , ) def test_normal ( self , value , ip_version , expected ) :          assert sanitize_network ( value , ip_version ) == expected  @ pytest . mark . parametrize ( [ <str> , <str> , <str> ] , [ [ <str> , 4 , ValueError ] , [ <str> , 4 , ValueError ] , [ <str> , 4 , ValueError ] , [ <str> , 4 , ValueError ] , [ <str> , 4 , ValueError ] , [ <str> , 6 , ValueError ] , [ <str> , 4 , ValueError ] , ] , ) def test_exception ( self , value , ip_version , expected ) :          with pytest . raises ( expected ) :              sanitize_network ( value , ip_version )     