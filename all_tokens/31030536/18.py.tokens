import pytest from humanreadable import ParameterError from tcconfig . _netem_param import NetemParameter , convert_rate_to_f class Test_convert_rate_to_f :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ 0 , 0 ] , [ 100.0 , 100.0 ] , [ <str> , 1.0 ] , [ <str> , 100.0 ] , [ <str> , 0.1 ] , [ <str> , 10.0 ] ] , ) def test_normal ( self , value , expected ) :          assert convert_rate_to_f ( value ) == expected  @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , ValueError ] , [ <str> , ValueError ] , [ <str> , ValueError ] ] ) def test_exception ( self , value , expected ) :          with pytest . raises ( expected ) :              convert_rate_to_f ( value )    class Test_NetemParameter_validate_bandwidth_rate :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , ParameterError ] , [ <str> , ParameterError ] , [ <str> , None ] , [ <str> , None ] ] , ) def test_normal ( self , value , expected ) :          param = NetemParameter ( device = <str> , bandwidth_rate = value ) if expected is None :              param . validate_bandwidth_rate ( )  else :              with pytest . raises ( expected ) :                  param . validate_bandwidth_rate ( )      