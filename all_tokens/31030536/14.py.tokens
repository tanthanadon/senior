import json import sys from collections import OrderedDict import humanreadable as hr from subprocrunner import SubprocessRunner from typepy import RealNumber DEADLINE_TIME = 3 ASSERT_MARGIN = 0.5 def print_test_result ( expected , actual , error = None ) :      if isinstance ( expected , ( dict , OrderedDict ) ) :          expected = json . dumps ( expected , indent = 4 )  print ( <str> . format ( expected ) ) if isinstance ( actual , ( dict , OrderedDict ) ) :          actual = json . dumps ( actual , indent = 4 )  print ( <str> . format ( actual ) ) if error :          print ( error , file = sys . stderr )   def is_invalid_param ( rate , delay , packet_loss , packet_duplicate , corrupt , reordering ) :      param_values = [ packet_loss , packet_duplicate , corrupt , reordering ] print ( <str> . format ( rate , param_values ) ) is_invalid = all ( [ not RealNumber ( param_value ) . is_type ( ) or param_value <= 0 for param_value in param_values ] + [ hr . Time ( delay , hr . Time . Unit . MILLISECOND ) . milliseconds <= 0 ] ) try :          hr . BitPerSecond ( rate ) . bps  except ( TypeError , ValueError ) :          pass  else :          is_invalid = False  return is_invalid  def runner_helper ( command ) :      proc_runner = SubprocessRunner ( command ) proc_runner . run ( ) print ( <str> . format ( proc_runner . command_str , proc_runner . stderr ) , file = sys . stderr ) assert proc_runner . returncode == 0 return proc_runner  class NullLogger :      level_name = None def remove ( self , handler_id = None ) :          pass  def add ( self , sink , ** kwargs ) :          pass  def disable ( self , name ) :          pass  def enable ( self , name ) :          pass  def critical ( self , __message , * args , ** kwargs ) :          pass  def debug ( self , __message , * args , ** kwargs ) :          pass  def error ( self , __message , * args , ** kwargs ) :          pass  def exception ( self , __message , * args , ** kwargs ) :          pass  def info ( self , __message , * args , ** kwargs ) :          pass  def log ( self , __level , __message , * args , ** kwargs ) :          pass  def success ( self , __message , * args , ** kwargs ) :          pass  def trace ( self , __message , * args , ** kwargs ) :          pass  def warning ( self , __message , * args , ** kwargs ) :          pass    