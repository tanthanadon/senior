from __future__ import absolute_import , division , print_function import itertools import pingparsing import pytest import typepy from subprocrunner import SubprocessRunner from tcconfig . _const import Tc , TrafficDirection from . common import ASSERT_MARGIN , DEADLINE_TIME , execute_tcdel @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def local_host_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def dst_host_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def transmitter ( ) :      transmitter = pingparsing . PingTransmitter ( ) transmitter . ping_option = <str> transmitter . deadline = DEADLINE_TIME return transmitter  @ pytest . fixture def pingparser ( ) :      return pingparsing . PingParsing ( )  class Test_tcset_one_network ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ params [ 0 ] , params [ 1 ] ] for params in itertools . product ( [ <str> ] , [ 100 ] ) ] , ) def test_src_net_uniform_latency ( self , device_option , local_host_option , dst_host_option , transmitter , pingparser , shaping_algo , delay , ) :          if device_option is None :              pytest . skip ( <str> )  if typepy . is_null_string ( local_host_option ) :              pytest . skip ( <str> )  if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option without_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg assert ( SubprocessRunner ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( local_host_option ) , <str> . format ( delay ) , <str> . format ( shaping_algo ) , ] ) ) . run ( ) == 0 ) with_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg rtt_diff = with_tc_rtt_avg - without_tc_rtt_avg print ( <str> . format ( without_tc_rtt_avg ) ) print ( <str> . format ( with_tc_rtt_avg ) ) assert rtt_diff > ( delay * ASSERT_MARGIN ) execute_tcdel ( tc_target )    class Test_tcset_exclude ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ params [ 0 ] , params [ 1 ] ] for params in itertools . product ( [ <str> ] , [ 100 ] ) ] , ) def test_src_net_uniform_latency ( self , device_option , local_host_option , dst_host_option , transmitter , pingparser , shaping_algo , delay , ) :          if device_option is None :              pytest . skip ( <str> )  if typepy . is_null_string ( local_host_option ) :              pytest . skip ( <str> )  if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option without_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg assert ( SubprocessRunner ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( TrafficDirection . INCOMING ) , <str> . format ( local_host_option ) , <str> . format ( dst_host_option ) , <str> . format ( delay ) , <str> . format ( shaping_algo ) , ] ) ) . run ( ) == 0 ) exclude_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) . stdout ) . rtt_avg rtt_diff = exclude_tc_rtt_avg - without_tc_rtt_avg print ( <str> . format ( without_tc_rtt_avg ) ) print ( <str> . format ( exclude_tc_rtt_avg ) ) assert rtt_diff < ( delay / 10 ) execute_tcdel ( tc_target )     