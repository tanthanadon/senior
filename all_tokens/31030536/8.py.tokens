import pytest from subprocrunner import SubprocessRunner from tcconfig . _const import Tc from tcconfig . traffic_control import delete_all_rules @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  class Test_tcset_iface_speed :      @ pytest . mark . parametrize ( [ <str> ] , [ [ 1 ] , [ - 1 ] ] ) def test_smoke_speed ( self , monkeypatch , device_option , speed ) :          if device_option is None :              pytest . skip ( <str> )  for tc_target in [ device_option ] :              monkeypatch . setattr ( <str> , lambda x : speed ) runner = SubprocessRunner ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> ] ) assert runner . run ( ) == 0 , ( runner . command_str , runner . returncode , runner . stderr ) delete_all_rules ( tc_target )   @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] ] ) def test_normal_exceed_max_rate ( self , monkeypatch , device_option , rate ) :          if device_option is None :              pytest . skip ( <str> )  for tc_target in [ device_option ] :              monkeypatch . setattr ( <str> , lambda x : <str> ) runner = SubprocessRunner ( [ Tc . Command . TCSET , tc_target , <str> , rate , <str> ] ) assert runner . run ( ) == 0 , ( runner . command_str , runner . returncode , runner . stderr ) delete_all_rules ( tc_target )   @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] ] ) def test_abnormal ( self , monkeypatch , device_option , rate ) :          if device_option is None :              pytest . skip ( <str> )  for tc_target in [ device_option ] :              monkeypatch . setattr ( <str> , lambda x : <str> ) runner = SubprocessRunner ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , rate , <str> ] ) ) assert runner . run ( ) != 0 , ( runner . command_str , runner . returncode , runner . stderr ) delete_all_rules ( tc_target )     