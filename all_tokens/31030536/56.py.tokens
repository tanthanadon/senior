from __future__ import unicode_literals import sys from path import Path from readmemaker import ReadmeMaker PROJECT_NAME = <str> OUTPUT_DIR = <str> def write_examples ( maker ) :      maker . set_indent_level ( 0 ) maker . write_chapter ( <str> ) usage_root = Path ( <str> ) . joinpath ( <str> ) maker . inc_indent_level ( ) maker . write_chapter ( <str> ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_file ( usage_root . joinpath ( <str> , <str> ) ) maker . write_chapter ( <str> ) maker . write_lines ( [ <str> , <str> . format ( PROJECT_NAME ) , ] )  def main ( ) :      maker = ReadmeMaker ( PROJECT_NAME , OUTPUT_DIR , is_make_toc = True , project_url = <str> . format ( PROJECT_NAME ) , ) maker . examples_dir_name = <str> maker . write_chapter ( <str> ) maker . write_introduction_file ( <str> ) maker . write_introduction_file ( <str> ) maker . write_introduction_file ( <str> ) maker . write_lines ( [ <str> ] ) write_examples ( maker ) maker . write_lines ( [ ] ) maker . write_file ( maker . doc_page_root_dir_path . joinpath ( <str> ) ) maker . set_indent_level ( 0 ) maker . write_chapter ( <str> ) maker . write_lines ( [ <str> . format ( PROJECT_NAME ) ] ) maker . write_chapter ( <str> ) maker . write_lines ( [ <str> . format ( PROJECT_NAME ) ] ) maker . write_chapter ( <str> ) maker . write_lines ( [ <str> ] ) return 0  if __name__ == <str> :      sys . exit ( main ( ) )   