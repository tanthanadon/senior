import pytest from simplesqlite import connect_memdb import tcconfig . parser . _filter import tcconfig . parser . _qdisc import tcconfig . parser . shaping_rule from tcconfig . _const import Tc from tcconfig . parser . _class import TcClassParser from tcconfig . parser . _model import Filter , Qdisc from . common import print_test_result DEVICE = <str> @ pytest . fixture def filter_parser_ipv4 ( ) :      return tcconfig . parser . _filter . TcFilterParser ( connect_memdb ( ) , ip_version = 4 )  @ pytest . fixture def filter_parser_ipv6 ( ) :      return tcconfig . parser . _filter . TcFilterParser ( connect_memdb ( ) , ip_version = 6 )  @ pytest . fixture def qdisc_parser ( ) :      return tcconfig . parser . _qdisc . TcQdiscParser ( connect_memdb ( ) )  @ pytest . fixture def class_parser ( ) :      return TcClassParser ( connect_memdb ( ) )  def six_b ( s ) :      return s . encode ( <str> )  class Test_TcFilterParser_parse_filter_ipv4 :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ None , [ ] ] , [ <str> , [ ] ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) , Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) , ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 80 , } ) , Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : 1234 , Tc . Param . DST_PORT : None , } ) , ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 8080 , } ) , Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) , ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : 5555 , Tc . Param . DST_PORT : 4444 , } ) ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : 101 } ) ] , ] , ] , ) def test_normal ( self , filter_parser_ipv4 , value , expected ) :          Filter . attach ( filter_parser_ipv4 . con ) Filter . create ( ) filter_parser_ipv4 . parse ( DEVICE , value ) actual = [ f for f in Filter ( ) . select ( ) ] assert actual == expected   class Test_TcFilterParser_parse_filter_ipv6 :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ None , [ ] ] , [ <str> , [ ] ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) , Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ) , Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 8080 , } ) , ] , ] , [ six_b ( ) , [ Filter ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : 80 , Tc . Param . DST_PORT : 8080 , } ) ] , ] , ] , ) def test_normal ( self , filter_parser_ipv6 , value , expected ) :          Filter . attach ( filter_parser_ipv6 . con ) Filter . create ( ) filter_parser_ipv6 . parse ( DEVICE , value ) actual = [ f for f in Filter ( ) . select ( ) ] assert actual == expected   class Test_TcFilterParser_parse_incoming_device :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , None ] , [ None , None ] , [ six_b ( ) , <str> , ] , [ six_b ( ) , <str> , ] , ] , ) def test_normal ( self , filter_parser_ipv4 , value , expected ) :          assert filter_parser_ipv4 . parse_incoming_device ( value ) == expected   class Test_TcQdiscParser_parse :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ six_b ( ) , [ Qdisc ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ) ] , ] , [ six_b ( ) , [ Qdisc ( ** { Tc . Param . DEVICE : DEVICE , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ) ] , ] , [ six_b ( ) , [ Qdisc ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ) , Qdisc ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , } ) , ] , ] , [ six_b ( ) , [ Qdisc ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ) , Qdisc ( ** { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , } ) , ] , ] , ] , ) def test_normal ( self , qdisc_parser , value , expected ) :          Qdisc . attach ( qdisc_parser . con ) Qdisc . create ( ) qdisc_parser . parse ( DEVICE , value ) actual = [ qdisc for qdisc in Qdisc . select ( ) ] assert actual == expected   class Test_TcClassParser_parse :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ six_b ( ) , [ { TcClassParser . Key . RATE : <str> , TcClassParser . Key . CLASS_ID : <str> , TcClassParser . Key . DEVICE : <str> , } , { TcClassParser . Key . RATE : <str> , TcClassParser . Key . CLASS_ID : <str> , TcClassParser . Key . DEVICE : <str> , } , ] , ] , [ six_b ( ) , [ { TcClassParser . Key . RATE : <str> , TcClassParser . Key . DEVICE : <str> , TcClassParser . Key . CLASS_ID : <str> , } , { TcClassParser . Key . RATE : <str> , TcClassParser . Key . DEVICE : <str> , TcClassParser . Key . CLASS_ID : <str> , } , ] , ] , ] , ) def test_normal ( self , class_parser , value , expected ) :          actual = class_parser . parse ( DEVICE , value ) import json print_test_result ( expected = json . dumps ( expected , indent = 4 ) , actual = json . dumps ( actual , indent = 4 ) ) assert actual == expected    