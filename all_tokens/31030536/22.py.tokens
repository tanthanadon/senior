from __future__ import print_function , unicode_literals import pytest import six from simplesqlite import connect_memdb import tcconfig . parser . _filter import tcconfig . parser . _qdisc import tcconfig . parser . shaping_rule from tcconfig . _const import Tc from . common import print_test_result DEVICE = <str> @ pytest . fixture def filter_parser_ipv4 ( ) :      return tcconfig . parser . _filter . TcFilterParser ( connect_memdb ( ) , ip_version = 4 )  @ pytest . fixture def filter_parser_ipv6 ( ) :      return tcconfig . parser . _filter . TcFilterParser ( connect_memdb ( ) , ip_version = 6 )  @ pytest . fixture def qdisc_parser ( ) :      return tcconfig . parser . _qdisc . TcQdiscParser ( connect_memdb ( ) )  class Test_TcFilterParser_parse_filter_ipv4 ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ None , [ ] ] , [ <str> , [ ] ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } , { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } , ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 80 , } , { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : 1234 , Tc . Param . DST_PORT : None , } , ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 8080 , } , { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 2 , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } , ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_PORT : 5555 , Tc . Param . DST_PORT : 4444 , } ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : 101 } ] , ] , ] , ) def test_normal ( self , filter_parser_ipv4 , value , expected ) :          actual = filter_parser_ipv4 . parse ( DEVICE , value ) print_test_result ( expected = expected , actual = actual ) assert actual == expected   class Test_TcFilterParser_parse_filter_ipv6 ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ None , [ ] ] , [ <str> , [ ] ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } , { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : None , } , { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : None , Tc . Param . DST_PORT : 8080 , } , ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . FILTER_ID : <str> , Tc . Param . FLOW_ID : <str> , Tc . Param . PROTOCOL : <str> , Tc . Param . PRIORITY : 1 , Tc . Param . SRC_NETWORK : <str> , Tc . Param . DST_NETWORK : <str> , Tc . Param . SRC_PORT : 80 , Tc . Param . DST_PORT : 8080 , } ] , ] , ] , ) def test_normal ( self , filter_parser_ipv6 , value , expected ) :          actual = filter_parser_ipv6 . parse ( DEVICE , value ) print_test_result ( expected = expected , actual = actual ) assert actual == expected   class Test_TcFilterParser_parse_incoming_device ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , None ] , [ None , None ] , [ six . b ( ) , <str> , ] , [ six . b ( ) , <str> , ] , ] , ) def test_normal ( self , filter_parser_ipv4 , value , expected ) :          assert filter_parser_ipv4 . parse_incoming_device ( value ) == expected   class Test_TcQdiscParser_parse ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } , { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , } , ] , ] , [ six . b ( ) , [ { Tc . Param . DEVICE : DEVICE , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , <str> : 1000 , } , { Tc . Param . DEVICE : DEVICE , <str> : <str> , <str> : <str> , <str> : <str> , Tc . Param . HANDLE : <str> , Tc . Param . PARENT : <str> , } , ] , ] , ] , ) def test_normal ( self , qdisc_parser , value , expected ) :          actual = qdisc_parser . parse ( DEVICE , value ) import json print_test_result ( expected = json . dumps ( expected , indent = 4 ) , actual = json . dumps ( actual , indent = 4 ) ) assert actual == expected    