import abc from pyroute2 import IPRoute class TargetNotFoundError ( Exception ) :      @ abc . abstractproperty def _target_type ( self ) :          return None  def __init__ ( self , * args , ** kwargs ) :          self . _target = kwargs . pop ( <str> , None ) super ( ) . __init__ ( * args , ** kwargs )  def __str__ ( self , * args , ** kwargs ) :          item_list = [ Exception . __str__ ( self , * args , ** kwargs ) ] if self . _target :              item_list . append ( <str> . format ( self . _target_type , self . _target ) )  return <str> . join ( item_list ) . strip ( )  def __repr__ ( self , * args , ** kwargs ) :          return self . __str__ ( * args , ** kwargs )   class NetworkInterfaceNotFoundError ( TargetNotFoundError ) :      @ property def _target_type ( self ) :          return <str>  def __str__ ( self , * args , ** kwargs ) :          item_list = [ super ( ) . __str__ ( * args , ** kwargs ) ] with IPRoute ( ) as ipr :              avail_interfaces = [ link . get_attr ( <str> ) for link in ipr . get_links ( ) ]  item_list . append ( <str> . format ( <str> . join ( avail_interfaces ) ) ) return <str> . join ( item_list ) . strip ( )   class ContainerNotFoundError ( TargetNotFoundError ) :      @ property def _target_type ( self ) :          return <str>  def __str__ ( self , * args , ** kwargs ) :          from . _docker import DockerClient dclient = DockerClient ( ) container_names = dclient . extract_running_container_names ( ) item_list = [ super ( ) . __str__ ( * args , ** kwargs ) ] if container_names :              item_list . append ( <str> . format ( <str> . join ( container_names ) ) )  else :              item_list . append ( <str> )  return <str> . join ( item_list ) . strip ( )   class ModuleNotFoundError ( Exception ) :       class TcCommandExecutionError ( Exception ) :       class TcAlreadyExist ( TcCommandExecutionError ) :        