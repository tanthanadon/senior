import typepy from humanreadable import ParameterError from subprocrunner import SubprocessRunner from . . _common import logging_context , run_command_helper from . . _const import ShapingAlgorithm , TcSubCommand , TrafficDirection from . . _network import get_anywhere_network , get_upper_limit_rate from . _interface import AbstractShaper class TbfShaper ( AbstractShaper ) :      __NETEM_QDISC_MAJOR_ID_OFFSET = 10 __MIN_BUFFER_BYTE = 1600 __OUT_DEVICE_QDISC_MINOR_ID = 1 __IN_DEVICE_QDISC_MINOR_ID = 3 @ property def algorithm_name ( self ) :          return ShapingAlgorithm . TBF  def _get_qdisc_minor_id ( self ) :          if self . _tc_obj . direction == TrafficDirection . OUTGOING :              return self . __OUT_DEVICE_QDISC_MINOR_ID  if self . _tc_obj . direction == TrafficDirection . INCOMING :              return self . __IN_DEVICE_QDISC_MINOR_ID  raise ParameterError ( <str> , expected = TrafficDirection . LIST , value = self . _tc_obj . direction )  def _get_netem_qdisc_major_id ( self , base_id ) :          if self . _tc_obj . direction == TrafficDirection . OUTGOING :              direction_offset = 0  elif self . _tc_obj . direction == TrafficDirection . INCOMING :              direction_offset = 1  return base_id + self . __NETEM_QDISC_MAJOR_ID_OFFSET + direction_offset  def _make_qdisc ( self ) :          base_command = self . _tc_obj . get_tc_command ( TcSubCommand . QDISC ) handle = <str> . format ( self . _tc_obj . qdisc_major_id_str ) return run_command_helper ( <str> . join ( [ base_command , self . _dev , <str> , <str> . format ( handle ) , <str> ] ) , ignore_error_msg_regexp = self . _tc_obj . REGEXP_FILE_EXISTS , notice_msg = self . _tc_obj . EXISTS_MSG_TEMPLATE . format ( <str> <str> . format ( command = base_command , dev = self . _dev , algorithm = self . algorithm_name , handle = handle , ) ) , )  def _add_rate ( self ) :          try :              self . _tc_obj . netem_param . validate_bandwidth_rate ( )  except ParameterError :              return 0  base_command = self . _tc_obj . get_tc_command ( TcSubCommand . QDISC ) parent = <str> . format ( self . _get_netem_qdisc_major_id ( self . _tc_obj . qdisc_major_id ) , self . _get_qdisc_minor_id ( ) ) handle = <str> . format ( 20 ) upper_limit_rate = get_upper_limit_rate ( self . _tc_device ) bandwidth = self . _tc_obj . netem_param . bandwidth_rate if bandwidth is None :              bandwidth = upper_limit_rate  command = <str> . join ( [ base_command , self . _dev , <str> . format ( parent ) , <str> . format ( handle ) , self . algorithm_name , <str> . format ( bandwidth . kilo_bps ) , <str> . format ( max ( int ( bandwidth . kilo_bps ) , self . __MIN_BUFFER_BYTE ) ) , <str> , ] ) run_command_helper ( command , ignore_error_msg_regexp = self . _tc_obj . REGEXP_FILE_EXISTS , notice_msg = self . _tc_obj . EXISTS_MSG_TEMPLATE . format ( <str> <str> . format ( command = base_command , dev = self . _dev , algorithm = self . algorithm_name , parent = parent , handle = handle , ) ) , ) self . __set_pre_network_filter ( )  def set_shaping ( self ) :          with logging_context ( <str> ) :              self . _make_qdisc ( )  with logging_context ( <str> ) :              self . _set_netem ( )  with logging_context ( <str> ) :              self . _add_rate ( )  with logging_context ( <str> ) :              self . _add_filter ( )  return 0  def __set_pre_network_filter ( self ) :          if self . _is_use_iptables ( ) :              return 0  if all ( [ typepy . is_null_string ( self . _tc_obj . dst_network ) , not typepy . Integer ( self . _tc_obj . dst_port ) . is_type ( ) , ] ) :              flowid = <str> . format ( self . _tc_obj . qdisc_major_id_str , self . _get_qdisc_minor_id ( ) )  else :              flowid = <str> . format ( self . _tc_obj . qdisc_major_id_str )  return SubprocessRunner ( <str> . join ( [ self . _tc_obj . get_tc_command ( TcSubCommand . FILTER ) , self . _dev , <str> . format ( self . _tc_obj . protocol ) , <str> . format ( self . _tc_obj . qdisc_major_id_str ) , <str> . format ( self . _tc_obj . protocol , self . _get_network_direction_str ( ) , get_anywhere_network ( self . _tc_obj . ip_version ) , ) , <str> . format ( flowid ) , ] ) ) . run ( )    