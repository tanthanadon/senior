import abc class ParserInterface ( metaclass = abc . ABCMeta ) :      @ abc . abstractmethod def parse ( self , device , text ) :          pass   class AbstractParser ( ParserInterface , metaclass = abc . ABCMeta ) :      def __init__ ( self , con ) :          self . _con = con self . _clear ( )  @ property def con ( self ) :          return self . _con  @ abc . abstractproperty def _tc_subcommand ( self ) :          pass  @ abc . abstractmethod def _clear ( self ) :          pass  @ staticmethod def _to_unicode ( text ) :          try :              return text . decode ( <str> )  except AttributeError :              return text     