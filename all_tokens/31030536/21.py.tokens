import pytest import simplejson as json from subprocrunner import SubprocessRunner from tcconfig . _const import Tc from . common import execute_tcdel , print_test_result , runner_helper @ pytest . fixture def device_value ( request ) :      return request . config . getoption ( <str> )  class Test_tcshow ( object ) :      @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] , [ <str> ] ] ) def test_normal_empty ( self , device_value , colorize_option ) :          if device_value is None :              pytest . skip ( <str> )  for tc_target in [ device_value , <str> . format ( device_value ) ] :              execute_tcdel ( tc_target ) runner = SubprocessRunner ( <str> . join ( [ Tc . Command . TCSHOW , tc_target , colorize_option ] ) ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) print ( runner . command_str ) runner . run ( ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert runner . returncode == 0 assert json . loads ( runner . stdout ) == json . loads ( expected )   @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] , [ <str> ] ] ) def test_normal_ipv4 ( self , device_value , colorize_option ) :          if device_value is None :              pytest . skip ( <str> )  for tc_target in [ device_value , <str> . format ( device_value ) ] :              runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner = SubprocessRunner ( <str> . join ( [ Tc . Command . TCSHOW , tc_target , colorize_option ] ) ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) runner . run ( ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) execute_tcdel ( tc_target )   @ pytest . mark . parametrize ( [ <str> ] , [ [ <str> ] , [ <str> ] ] ) def test_normal_ipv6 ( self , device_value , colorize_option ) :          if device_value is None :              pytest . skip ( <str> )  for tc_target in [ device_value , <str> . format ( device_value ) ] :              runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) ) runner = SubprocessRunner ( <str> . join ( [ Tc . Command . TCSHOW , tc_target , <str> , colorize_option ] ) ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) runner . run ( ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) execute_tcdel ( tc_target )     