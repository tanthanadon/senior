import humanreadable as hr import typepy from pyroute2 import IPRoute from . _const import Network from . _error import NetworkInterfaceNotFoundError def get_anywhere_network ( ip_version ) :      ip_version_n = typepy . Integer ( ip_version ) . try_convert ( ) if ip_version_n == 4 :          return Network . Ipv4 . ANYWHERE  if ip_version_n == 6 :          return Network . Ipv6 . ANYWHERE  raise ValueError ( <str> . format ( ip_version ) )  def _get_iproute2_upper_limite_rate ( ) :      return hr . BitPerSecond ( <str> )  def _read_iface_speed ( tc_device ) :      with open ( <str> . format ( tc_device ) ) as f :          return int ( f . read ( ) . strip ( ) )   def get_upper_limit_rate ( tc_device ) :      if typepy . is_null_string ( tc_device ) :          return _get_iproute2_upper_limite_rate ( )  try :          speed_value = _read_iface_speed ( tc_device )  except OSError :          return _get_iproute2_upper_limite_rate ( )  if speed_value < 0 :          return _get_iproute2_upper_limite_rate ( )  return min ( hr . BitPerSecond ( <str> . format ( speed_value ) ) , _get_iproute2_upper_limite_rate ( ) )  def is_anywhere_network ( network , ip_version ) :      try :          network = network . strip ( )  except AttributeError as e :          raise ValueError ( e )  if ip_version == 4 :          return network == get_anywhere_network ( ip_version )  if ip_version == 6 :          return network in ( get_anywhere_network ( ip_version ) , <str> )  raise ValueError ( <str> . format ( ip_version ) )  def sanitize_network ( network , ip_version ) :      import ipaddress if typepy . is_null_string ( network ) or network . lower ( ) == <str> :          return get_anywhere_network ( ip_version )  try :          if ip_version == 4 :              ipaddress . IPv4Address ( network ) return network + <str>  if ip_version == 6 :              return ipaddress . IPv6Address ( network ) . compressed   except ipaddress . AddressValueError :          pass  if ip_version == 4 :          return ipaddress . IPv4Network ( str ( network ) ) . compressed  if ip_version == 6 :          return ipaddress . IPv6Network ( str ( network ) ) . compressed  raise ValueError ( <str> . format ( ip_version ) )  def verify_network_interface ( device , tc_command_output ) :      from . _common import is_execute_tc_command if not is_execute_tc_command ( tc_command_output ) :          return  with IPRoute ( ) as ipr :          avail_interfaces = [ link . get_attr ( <str> ) for link in ipr . get_links ( ) ]  if device not in avail_interfaces :          raise NetworkInterfaceNotFoundError ( target = device )    