import pytest import simplejson as json from subprocrunner import SubprocessRunner from tcconfig . _const import Tc from . common import print_test_result , runner_helper @ pytest . fixture def device_value ( request ) :      return request . config . getoption ( <str> )  def execute_tcdel ( device ) :      return SubprocessRunner ( [ Tc . Command . TCDEL , device , <str> ] , dry_run = False ) . run ( )  class Test_tcdel :      def test_normal_ipv4 ( self , device_value ) :          if device_value is None :              pytest . skip ( <str> )  for device_option in [ [ device_value ] , [ <str> , device_value ] ] :              execute_tcdel ( device_value ) tcshow_cmd = [ Tc . Command . TCSHOW ] + device_option runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner = SubprocessRunner ( tcshow_cmd ) runner . run ( ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> ] ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> ] ) runner = SubprocessRunner ( tcshow_cmd ) runner . run ( ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> ] ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> , <str> ] ) runner = SubprocessRunner ( tcshow_cmd ) runner . run ( ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) execute_tcdel ( device_value )   def test_normal_ipv6 ( self , device_value ) :          if device_value is None :              pytest . skip ( <str> )  for device_option in [ [ device_value ] , [ <str> , device_value ] ] :              execute_tcdel ( device_value ) tcshow_cmd = [ Tc . Command . TCSHOW ] + device_option runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner_helper ( [ Tc . Command . TCSET ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner = SubprocessRunner ( tcshow_cmd + [ <str> ] ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) runner . run ( ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> ] ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) runner = SubprocessRunner ( tcshow_cmd ) runner . run ( ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) print_test_result ( expected = expected , actual = runner . stdout , error = runner . stderr ) assert json . loads ( runner . stdout ) == json . loads ( expected ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> ] ) runner_helper ( [ Tc . Command . TCDEL ] + device_option + [ <str> , <str> , <str> , <str> , <str> ] ) runner = SubprocessRunner ( tcshow_cmd ) runner . run ( ) expected = ( <str> + <str> . format ( device_value ) + <str> + ) execute_tcdel ( device_value )   def test_abnormal ( self ) :          assert execute_tcdel ( <str> ) != 0    