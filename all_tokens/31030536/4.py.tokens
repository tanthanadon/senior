import random import pytest from tcconfig . _iptables import ( VALID_CHAIN_LIST , IptablesMangleController , IptablesMangleMarkEntry , get_iptables_base_command , ) _DEF_SRC = <str> _DEF_DST = <str> prerouting_mangle_mark_list = [ IptablesMangleMarkEntry ( ip_version = 4 , line_number = 1 , mark_id = 1 , source = _DEF_SRC , destination = _DEF_DST , chain = <str> , protocol = <str> , ) ] input_mangle_mark_list = [ IptablesMangleMarkEntry ( ip_version = 4 , line_number = 1 , mark_id = 1234 , source = <str> , destination = _DEF_DST , chain = <str> , protocol = <str> , ) ] output_mangle_mark_list = [ IptablesMangleMarkEntry ( ip_version = 4 , line_number = 1 , mark_id = 12 , source = _DEF_SRC , destination = _DEF_DST , chain = <str> , protocol = <str> , ) , IptablesMangleMarkEntry ( ip_version = 4 , line_number = 2 , mark_id = 123 , source = _DEF_SRC , destination = <str> , chain = <str> , protocol = <str> , ) , IptablesMangleMarkEntry ( ip_version = 4 , line_number = 3 , mark_id = 12345 , source = <str> , destination = <str> , chain = <str> , protocol = <str> , ) , ] mangle_mark_list = prerouting_mangle_mark_list + input_mangle_mark_list + output_mangle_mark_list reverse_mangle_mark_list = ( list ( reversed ( prerouting_mangle_mark_list ) ) + list ( reversed ( input_mangle_mark_list ) ) + list ( reversed ( output_mangle_mark_list ) ) ) @ pytest . fixture def iptables_ctrl_ipv4 ( ) :      return IptablesMangleController ( True , ip_version = 4 )  class Test_IptablesMangleMark_repr :      def test_smoke ( self ) :          for mangle_mark in mangle_mark_list :              assert len ( str ( mangle_mark ) ) > 0    class Test_IptablesMangleMark_to_append_command :      _CMD_PREFIX = get_iptables_base_command ( ) + <str> @ pytest . mark . parametrize ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ [ 2 , _DEF_SRC , _DEF_DST , <str> , <str> , None , <str> . format ( _CMD_PREFIX . format ( <str> ) , _DEF_SRC , _DEF_DST ) , ] , [ 2 , _DEF_SRC , _DEF_DST , <str> , <str> , 1 , <str> . format ( _CMD_PREFIX . format ( <str> ) , _DEF_SRC , _DEF_DST ) , ] , [ 2 , _DEF_SRC , _DEF_DST , <str> , <str> , 1 , <str> . format ( _CMD_PREFIX . format ( <str> ) , _DEF_SRC , _DEF_DST ) , ] , [ 100 , _DEF_SRC , <str> , <str> , <str> , 100 , <str> . format ( _CMD_PREFIX . format ( <str> ) , _DEF_SRC ) , ] , [ 1 , <str> , _DEF_DST , <str> , <str> , 100 , <str> . format ( _CMD_PREFIX . format ( <str> ) , _DEF_DST ) , ] , [ 1 , <str> , <str> , <str> , <str> , 100 , <str> . format ( _CMD_PREFIX . format ( <str> ) ) , ] , ] , ) def test_normal ( self , mark_id , source , destination , chain , protocol , line_number , expected ) :          mark = IptablesMangleMarkEntry ( ip_version = 4 , mark_id = mark_id , source = source , destination = destination , chain = chain , protocol = protocol , line_number = line_number , ) assert mark . to_append_command ( ) == expected   class Test_IptablesMangleMark_to_delete_command :      @ pytest . mark . parametrize ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ [ 2 , _DEF_SRC , _DEF_DST , <str> , <str> , 1 , <str> . format ( get_iptables_base_command ( ) ) , ] , [ 20 , None , None , <str> , <str> , 2 , <str> . format ( get_iptables_base_command ( ) ) , ] , ] , ) def test_normal ( self , mark_id , source , destination , chain , protocol , line_number , expected ) :          mark = IptablesMangleMarkEntry ( ip_version = 4 , mark_id = mark_id , source = _DEF_SRC , destination = _DEF_DST , chain = chain , protocol = protocol , line_number = line_number , ) assert mark . to_delete_command ( ) == expected  @ pytest . mark . parametrize ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ [ 2 , _DEF_SRC , _DEF_DST , <str> , <str> , None , TypeError ] ] , ) def test_exception ( self , mark_id , source , destination , chain , protocol , line_number , expected ) :          mark = IptablesMangleMarkEntry ( ip_version = 4 , mark_id = mark_id , source = source , destination = destination , chain = chain , protocol = protocol , line_number = line_number , ) with pytest . raises ( expected ) :              mark . to_delete_command ( )    class Test_IptablesMangleController_get_unique_mark_id :      @ pytest . mark . xfail ( run = False ) def test_normal ( self , iptables_ctrl_ipv4 ) :          iptables_ctrl_ipv4 . clear ( ) for i in range ( 5 ) :              mark_id = iptables_ctrl_ipv4 . get_unique_mark_id ( ) assert mark_id == ( i + 101 ) mangle_mark = IptablesMangleMarkEntry ( ip_version = 4 , mark_id = mark_id , source = _DEF_SRC , destination = _DEF_DST , chain = random . choice ( VALID_CHAIN_LIST ) , ) assert iptables_ctrl_ipv4 . add ( mangle_mark ) == 0    class Test_IptablesMangleController_add :      @ pytest . mark . xfail ( run = False ) def test_normal ( self , iptables_ctrl_ipv4 ) :          iptables_ctrl_ipv4 . clear ( ) initial_len = len ( iptables_ctrl_ipv4 . get_iptables ( ) ) for mangle_mark in mangle_mark_list :              assert iptables_ctrl_ipv4 . add ( mangle_mark ) == 0  assert len ( iptables_ctrl_ipv4 . get_iptables ( ) ) > initial_len   class Test_IptablesMangleController_clear :      @ pytest . mark . xfail ( run = False ) def test_normal ( self , iptables_ctrl_ipv4 ) :          iptables_ctrl_ipv4 . clear ( ) initial_len = len ( iptables_ctrl_ipv4 . get_iptables ( ) ) for mangle_mark in mangle_mark_list :              assert iptables_ctrl_ipv4 . add ( mangle_mark ) == 0  assert len ( iptables_ctrl_ipv4 . get_iptables ( ) ) > initial_len iptables_ctrl_ipv4 . clear ( ) assert len ( iptables_ctrl_ipv4 . get_iptables ( ) ) == initial_len   class Test_IptablesMangleController_parse :      @ pytest . mark . xfail ( run = False ) def test_normal ( self , iptables_ctrl_ipv4 ) :          iptables_ctrl_ipv4 . clear ( ) for mangle_mark in mangle_mark_list :              assert iptables_ctrl_ipv4 . add ( mangle_mark ) == 0  for lhs_mangle , rhs_mangle in zip ( iptables_ctrl_ipv4 . parse ( ) , reverse_mangle_mark_list ) :              print ( <str> . format ( lhs_mangle ) ) print ( <str> . format ( rhs_mangle ) ) assert lhs_mangle == rhs_mangle     