from __future__ import absolute_import , division import itertools import pingparsing import pytest import typepy from tcconfig . _const import Tc from tcconfig . _netem_param import convert_rate_to_f from . common import ASSERT_MARGIN , DEADLINE_TIME , execute_tcdel , runner_helper @ pytest . fixture def device_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def dst_host_option ( request ) :      return request . config . getoption ( <str> )  @ pytest . fixture def transmitter ( ) :      transmitter = pingparsing . PingTransmitter ( ) transmitter . ping_option = <str> transmitter . deadline = DEADLINE_TIME return transmitter  @ pytest . fixture def pingparser ( ) :      return pingparsing . PingParsing ( )  class Test_tcset_one_network ( object ) :      @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ params [ 0 ] , params [ 1 ] ] for params in itertools . product ( [ <str> ] , [ 100 ] ) ] , ) def test_dst_net_uniform_latency ( self , device_option , dst_host_option , transmitter , pingparser , shaping_algo , delay ) :          if device_option is None :              pytest . skip ( <str> )  if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 without_tc_rtt_avg = pingparser . parse ( ping_result ) . rtt_avg runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( delay ) , <str> . format ( shaping_algo ) , ] ) ) ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 with_tc_rtt_avg = pingparser . parse ( ping_result ) . rtt_avg rtt_diff = with_tc_rtt_avg - without_tc_rtt_avg assert rtt_diff > ( delay * ASSERT_MARGIN ) execute_tcdel ( device_option )   @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ 100 , 50 ] ] ) def test_dst_net_latency_distro ( self , device_option , dst_host_option , transmitter , pingparser , delay , delay_distro ) :          if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 ping_stats = pingparser . parse ( ping_result ) without_tc_rtt_avg = ping_stats . rtt_avg without_tc_rtt_mdev = ping_stats . rtt_mdev runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> , <str> . format ( delay ) , <str> , <str> . format ( delay_distro ) , ] ) ) ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 ping_stats = pingparser . parse ( ping_result ) with_tc_rtt_avg = ping_stats . rtt_avg with_tc_rtt_mdev = ping_stats . rtt_mdev rtt_diff = with_tc_rtt_avg - without_tc_rtt_avg assert rtt_diff > ( delay * ASSERT_MARGIN ) rtt_diff = with_tc_rtt_mdev - without_tc_rtt_mdev assert rtt_diff > ( delay_distro * ASSERT_MARGIN ) execute_tcdel ( tc_target )   @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , 10 ] , [ <str> , 10 ] ] ) def test_dst_net_packet_loss ( self , device_option , dst_host_option , transmitter , pingparser , option , value ) :          if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 without_tc_loss_rate = pingparser . parse ( ping_result ) . packet_loss_rate runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( option , value ) ] ) ) ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 with_tc_loss_rate = pingparser . parse ( ping_result ) . packet_loss_rate loss_diff = with_tc_loss_rate - without_tc_loss_rate assert loss_diff > ( value * ASSERT_MARGIN ) execute_tcdel ( tc_target )   @ pytest . mark . parametrize ( [ <str> , <str> ] , [ [ <str> , 50 ] , [ <str> , <str> ] ] ) def test_dst_net_packet_duplicate ( self , device_option , dst_host_option , transmitter , pingparser , option , value ) :          if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  for tc_target in [ device_option , <str> . format ( device_option ) ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 without_tc_duplicate_rate = pingparser . parse ( ping_result ) . packet_duplicate_rate runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( option , value ) ] ) ) ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 with_tc_duplicate_rate = pingparser . parse ( ping_result ) . packet_duplicate_rate duplicate_rate_diff = with_tc_duplicate_rate - without_tc_duplicate_rate assert duplicate_rate_diff > ( convert_rate_to_f ( value ) * ASSERT_MARGIN ) execute_tcdel ( tc_target )   def test_dst_net_exclude_dst_network ( self , device_option , dst_host_option , transmitter , pingparser ) :          if device_option is None :              pytest . skip ( <str> )  if typepy . is_null_string ( dst_host_option ) :              pytest . skip ( <str> )  delay = 100 for tc_target in [ device_option ] :              execute_tcdel ( tc_target ) transmitter . destination = dst_host_option runner_helper ( [ Tc . Command . TCSET , tc_target , <str> , <str> . format ( delay ) ] ) ping_result = transmitter . ping ( ) assert ping_result . returncode == 0 with_tc_rtt_avg = pingparser . parse ( ping_result ) . rtt_avg runner_helper ( <str> . join ( [ Tc . Command . TCSET , tc_target , <str> . format ( <str> . join ( dst_host_option . split ( <str> ) [ : 3 ] + [ <str> ] ) ) , <str> . format ( delay ) , <str> , ] ) ) without_tc_rtt_avg = pingparser . parse ( transmitter . ping ( ) ) . rtt_avg rtt_diff = with_tc_rtt_avg - without_tc_rtt_avg assert rtt_diff > ( delay * ASSERT_MARGIN ) execute_tcdel ( tc_target )     