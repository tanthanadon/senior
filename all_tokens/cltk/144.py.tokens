import os import shutil import unittest from cltk . corpus . utils . importer import CorpusImporter from cltk . stem . latin . j_v import JVReplacer from cltk . tag import ner from cltk . tag . ner import NamedEntityReplacer from cltk . tag . pos import POSTag __license__ = <str> class TestSequenceFunctions ( unittest . TestCase ) :      def setUp ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists )  def test_pos_unigram_greek ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_unigram ( <str> ) self . assertTrue ( tagged )  def test_pos_bigram_greek ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_bigram ( <str> ) self . assertTrue ( tagged )  def test_pos_trigram_greek ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_trigram ( <str> ) self . assertTrue ( tagged )  def test_pos_ngram123_tagger_greek ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_ngram_123_backoff ( <str> ) self . assertTrue ( tagged )  def test_pos_tnt_tagger_greek ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_tnt ( <str> ) self . assertTrue ( tagged )  def test_pos_unigram_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_unigram ( <str> ) self . assertTrue ( tagged )  def test_pos_bigram_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_bigram ( <str> ) self . assertTrue ( tagged )  def test_pos_trigram_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_trigram ( <str> ) self . assertTrue ( tagged )  def test_pos_ngram123_tagger_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_ngram_123_backoff ( <str> ) self . assertTrue ( tagged )  def test_pos_tnt_tagger_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_tnt ( <str> ) self . assertTrue ( tagged )  def test_pos_crf_tagger_latin ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_crf ( <str> ) self . assertTrue ( tagged )  def test_check_latest_latin ( self ) :          ner . _check_latest_data ( <str> ) names_path = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) self . assertTrue ( os . path . isfile ( names_path ) )  def test_check_latest_latin ( self ) :          path = get_cltk_data_dir ( ) + <str> names_dir = os . path . expanduser ( path ) shutil . rmtree ( names_dir , ignore_errors = True ) ner . _check_latest_data ( <str> ) names_path = os . path . join ( names_dir , <str> , <str> ) self . assertTrue ( os . path . isfile ( names_path ) )  def test_tag_ner_str_list_latin ( self ) :          text_str = jv_replacer = JVReplacer ( ) text_str_iu = jv_replacer . replace ( text_str ) tokens = ner . tag_ner ( <str> , input_text = text_str_iu , output_type = list ) target = [ ( <str> , ) , ( <str> , <str> ) , ( <str> , ) , ( <str> , ) , ( <str> , <str> ) , ( <str> , ) , ( <str> , ) , ( <str> , <str> ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) ] self . assertEqual ( tokens , target )  def test_tag_ner_list_list_latin ( self ) :          text_list = [ <str> , <str> , <str> ] jv_replacer = JVReplacer ( ) text_list_iu = [ jv_replacer . replace ( x ) for x in text_list ] tokens = ner . tag_ner ( <str> , input_text = text_list_iu , output_type = list ) target = [ ( <str> , ) , ( <str> , <str> ) , ( <str> , <str> ) ] self . assertEqual ( tokens , target )  def test_tag_ner_list_str_latin ( self ) :          text_list = [ <str> , <str> , <str> ] jv_replacer = JVReplacer ( ) text_list_iu = [ jv_replacer . replace ( x ) for x in text_list ] text = ner . tag_ner ( <str> , input_text = text_list_iu , output_type = str ) target = <str> self . assertEqual ( text , target )  def test_tag_ner_str_str_latin ( self ) :          jv_replacer = JVReplacer ( ) text_str = jv_replacer = JVReplacer ( ) text_str_iu = jv_replacer . replace ( text_str ) text = ner . tag_ner ( <str> , input_text = text_str_iu , output_type = str ) target = <str> self . assertEqual ( text , target )  def test_tag_ner_str_list_greek ( self ) :          text_str = <str> tokens = ner . tag_ner ( <str> , input_text = text_str , output_type = list ) target = [ ( <str> , ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , ) ] self . assertEqual ( tokens , target )  def test_tag_ner_list_list_greek ( self ) :          text_list = [ <str> , <str> , <str> ] tokens = ner . tag_ner ( <str> , input_text = text_list , output_type = list ) target = [ ( <str> , ) , ( <str> , <str> ) , ( <str> , <str> ) ] self . assertEqual ( tokens , target )  def test_tag_ner_list_str_greek ( self ) :          text_list = [ <str> , <str> , <str> ] text = ner . tag_ner ( <str> , input_text = text_list , output_type = str ) target = <str> self . assertEqual ( text , target )  def test_tag_ner_str_str_greek ( self ) :          text_str = <str> text = ner . tag_ner ( <str> , input_text = text_str , output_type = str ) target = <str> self . assertEqual ( text , target )  def test_tag_ner_str_list_french ( self ) :          text_str = ner_replacer = NamedEntityReplacer ( ) tokens = ner_replacer . tag_ner_fr ( input_text = text_str , output_type = list ) target = [ [ ( <str> , <str> , <str> ) ] , ( <str> , ) , ( <str> , ) , [ ( <str> , <str> , <str> ) ] , ( <str> , ) , ( <str> , ) , ( <str> , ) , ( <str> , ) , [ ( <str> , <str> , <str> ) ] , ( <str> , ) , ( <str> , ) , ( <str> , ) , [ ( <str> , <str> , <str> ) ] , ( <str> , ) ] self . assertEqual ( tokens , target )  def test_pos_tnt_tagger_old_norse ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_tnt ( <str> ) print ( tagged ) self . assertTrue ( tagged )  def test_pos_ngram12_tagger_middle_low_german ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_ngram_12_backoff ( <str> ) self . assertTrue ( tagged )  def test_pos_unigram_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_unigram ( <str> ) self . assertTrue ( tagged )  def test_pos_bigram_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_bigram ( <str> ) self . assertTrue ( tagged )  def test_pos_trigram_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_trigram ( <str> ) self . assertTrue ( tagged )  def test_pos_ngram123_tagger_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_ngram_123_backoff ( <str> ) self . assertTrue ( tagged )  def test_pos_crf_tagger_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_crf ( <str> ) self . assertTrue ( tagged )  def test_pos_perceptron_tagger_old_english ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_perceptron ( <str> ) self . assertTrue ( tagged )   if __name__ == <str> :      unittest . main ( )   