__author__ = <str> __reviewers__ = [ <str> , <str> ] from cltk . corpus . arabic . utils . pyarabic import araby import unittest class TestSequenceFunctions ( unittest . TestCase ) :      def test_support_pyarabic_araby ( self ) :          self . assertTrue ( araby . is_sukun ( araby . SUKUN ) ) self . assertTrue ( araby . is_shadda ( araby . SHADDA ) ) self . assertTrue ( araby . is_tatweel ( araby . TATWEEL ) ) for archar in araby . TANWIN :              self . assertTrue ( araby . is_tanwin ( archar ) )  for archar in araby . TASHKEEL :              self . assertTrue ( araby . is_tashkeel ( archar ) )  for haraka in araby . HARAKAT :              self . assertTrue ( araby . is_haraka ( haraka ) )  for short_haraka in araby . SHORTHARAKAT :              self . assertTrue ( araby . is_shortharaka ( short_haraka ) )  for liguature in araby . LIGUATURES :              self . assertTrue ( araby . is_ligature ( liguature ) )  for hamza in araby . HAMZAT :              self . assertTrue ( araby . is_hamza ( hamza ) )  for alef in araby . ALEFAT :              self . assertTrue ( araby . is_alef ( alef ) )  for yeh in araby . YEHLIKE :              self . assertTrue ( araby . is_yehlike ( yeh ) )  for waw in araby . WAWLIKE :              self . assertTrue ( araby . is_wawlike ( waw ) )  for teh in araby . TEHLIKE :              self . assertTrue ( araby . is_teh )  for small in araby . SMALL :              self . assertTrue ( araby . is_small ( small ) )  for weak in araby . WEAK :              self . assertTrue ( araby . is_weak ( weak ) )  for archar in araby . MOON :              self . assertTrue ( araby . is_moon ( archar ) )  for archar in araby . SUN :              self . assertTrue ( araby . is_sun ( archar ) )  assert araby . order ( araby . ALEF ) == 1 assert araby . order ( araby . HAMZA ) == 29 assert araby . order ( araby . YEH ) == 28 assert araby . order ( araby . TEH_MARBUTA ) == 3 assert araby . order ( araby . TEH ) == 3 assert araby . name ( <str> ) == <str> assert araby . name ( <str> ) == <str> assert araby . name ( araby . ALEF_HAMZA_ABOVE ) == <str> assert araby . name ( <str> ) == <str> self . assertTrue ( araby . has_shadda ( <str> ) ) self . assertFalse ( araby . has_shadda ( <str> ) ) self . assertFalse ( araby . is_vocalized ( <str> ) ) self . assertTrue ( araby . is_vocalized ( <str> ) ) self . assertFalse ( araby . is_vocalizedtext ( <str> ) ) self . assertTrue ( araby . is_vocalizedtext ( <str> ) ) self . assertTrue ( araby . is_arabicstring ( <str> ) ) self . assertFalse ( araby . is_arabicword ( <str> ) ) self . assertFalse ( araby . is_arabicword ( <str> ) ) self . assertFalse ( araby . is_arabicword ( <str> ) ) self . assertFalse ( araby . is_arabicword ( <str> ) ) self . assertFalse ( araby . is_arabicword ( <str> ) ) self . assertTrue ( araby . is_arabicword ( <str> ) ) assert araby . first_char ( <str> ) == <str> assert araby . second_char ( <str> ) == <str> assert araby . last_char ( <str> ) == <str> assert araby . secondlast_char ( <str> ) == <str> assert araby . strip_harakat ( <str> ) == <str> assert araby . strip_lastharaka ( <str> ) == <str> assert araby . strip_tashkeel ( <str> ) == <str> assert araby . strip_tatweel ( <str> ) == <str> assert araby . strip_shadda ( <str> ) == <str> assert araby . normalize_hamza ( <str> ) == <str> marks = <str> assert araby . joint ( <str> , marks ) == <str> word1 = <str> word2 = <str> self . assertTrue ( araby . vocalizedlike ( word1 , word2 ) ) word1 = <str> wazn = <str> wazn1 = <str> self . assertTrue ( araby . waznlike ( word1 , wazn ) ) self . assertFalse ( araby . waznlike ( word1 , wazn1 ) ) word1 = <str> word2 = <str> word3 = <str> self . assertTrue ( araby . shaddalike ( word1 , word2 ) ) self . assertFalse ( araby . shaddalike ( word1 , word3 ) ) word = <str> assert araby . reduce_tashkeel ( word ) == <str> word1 = <str> word2 = <str> word3 = <str> self . assertTrue ( araby . vocalized_similarity ( word1 , word2 ) ) assert araby . vocalized_similarity ( word1 , word3 ) == - 1 tests = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] results = [ ] for test in tests :              result = araby . tokenize ( test ) results . append ( result )  target = [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ] self . assertEqual ( results , target )   if __name__ == <str> :      unittest . main ( )   