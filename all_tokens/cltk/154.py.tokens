__author__ = [ <str> ] __license__ = <str> import pickle from abc import abstractmethod from typing import List , Dict , Tuple , Set , Any , Generator import inspect from nltk . tokenize . punkt import PunktSentenceTokenizer , PunktTrainer from nltk . tokenize . punkt import PunktLanguageVars class BaseSentenceTokenizerTrainer ( ) :      def __init__ ( self : object , language : str = None , punctuation : List [ str ] = None , strict : bool = False , strict_punctuation : List [ str ] = None , abbreviations : List [ str ] = None ) :          if language :              self . language = language . lower ( )  self . strict = strict self . punctuation = punctuation self . strict_punctuation = strict_punctuation self . abbreviations = abbreviations  def train_sentence_tokenizer ( self : object , text : str ) :          language_punkt_vars = PunktLanguageVars if self . punctuation :              if self . strict :                  language_punkt_vars . sent_end_chars = self . punctuation + self . strict_punctuation  else :                  language_punkt_vars . sent_end_chars = self . punctuation   trainer = PunktTrainer ( text , language_punkt_vars ) trainer . INCLUDE_ALL_COLLOCS = True trainer . INCLUDE_ABBREV_COLLOCS = True tokenizer = PunktSentenceTokenizer ( trainer . get_params ( ) ) if self . abbreviations :              for abbreviation in self . abbreviations :                  tokenizer . _params . abbrev_types . add ( abbreviation )   return tokenizer  def pickle_sentence_tokenizer ( self : object , filename : str , tokenizer : object ) :          with open ( filename , <str> ) as f :              pickle . dump ( tokenizer , f )     