import os import unittest from cltk . corpus . middle_english . alphabet import normalize_middle_english from cltk . phonology . middle_english . transcription import Word as word_me from cltk . stem . middle_english . stem import affix_stemmer as MiddleEnglishAffixStemmer from cltk . tokenize . word import WordTokenizer __author__ = [ <str> , ] class TestMiddleEnglish ( unittest . TestCase ) :      def test_normalize_middle_english ( self ) :          in_test = <str> target = <str> test = normalize_middle_english ( in_test ) self . assertEqual ( target , test )  def test_middle_english_syllabify ( self ) :          words = [ <str> , <str> , <str> , <str> , <str> ] syllabified = [ word_me ( w ) . syllabify ( ) for w in words ] target_syllabified = [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> ] , [ <str> ] , [ <str> , <str> , <str> ] ] assert syllabified == target_syllabified syllabified_str = [ word_me ( w ) . syllabified_str ( ) for w in words ] target_syllabified_str = [ <str> , <str> , <str> , <str> , <str> ] assert syllabified_str == target_syllabified_str  def test_middle_english_stemmer ( self ) :          sentence = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stemmed = MiddleEnglishAffixStemmer ( sentence ) target = <str> self . assertEqual ( stemmed , target )  def test_middle_english_tokenizer ( self ) :          text = <str> target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] tokenizer = WordTokenizer ( <str> ) tokenized = tokenizer . tokenize ( text ) self . assertTrue ( tokenized == target )   if __name__ == <str> :      unittest . main ( )   