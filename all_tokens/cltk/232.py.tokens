import re estre_replace = [ ( <str> , <str> ) ] avoir_replace = [ ( <str> <str> <str> <str> <str> <str> <str> <str> , <str> ) ] auxiliary_rules = estre_replace + avoir_replace first_conj_rules = [ ( <str> , <str> ) ] i_type_rules = [ ( <str> , <str> ) ] u_type_rules = [ ( <str> , <str> ) ] verbal_rules = u_type_rules + i_type_rules + first_conj_rules regime_rules = [ ( <str> , <str> ) ] plural_rules = [ ( <str> , <str> ) , ( <str> , <str> ) ] masc_to_fem_rules = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] french_nominal_rules = regime_rules + plural_rules + masc_to_fem_rules misc_rules = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] determiner_rules = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] reduction_rules = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] patterns = determiner_rules + misc_rules + auxiliary_rules + verbal_rules + french_nominal_rules + reduction_rules def build_match_and_apply_functions ( pattern , replace ) :      def matches_rule ( word ) :          return re . search ( pattern , word )  def apply_rule ( word ) :          return re . sub ( pattern , replace , word )  return ( matches_rule , apply_rule )  rules = [ build_match_and_apply_functions ( pattern , replace ) for ( pattern , replace ) in patterns ] def regex ( token ) :      for matches_rule , apply_rule in rules :          if matches_rule ( token ) :              return apply_rule ( token )     