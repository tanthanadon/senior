__author__ = [ <str> , <str> ] __license__ = <str> import re def tokenize_akkadian_words ( line : str ) :      beginning_underscore = <str> ending_underscore = <str> two_underscores = <str> words = line . split ( ) language = <str> output_words = [ ] for word in words :          if re . search ( two_underscores , word ) :              output_words . append ( ( word , <str> ) )  elif re . search ( beginning_underscore , word ) :              language = <str> output_words . append ( ( word , language ) )  elif re . search ( ending_underscore , word ) :              output_words . append ( ( word , language ) ) language = <str>  else :              output_words . append ( ( word , language ) )   return output_words  def tokenize_akkadian_signs ( word : str ) :      word_signs = [ ] sign = <str> language = word [ 1 ] determinative = False for char in word [ 0 ] :          if determinative is True :              if char == <str> :                  determinative = False if len ( sign ) > 0 :                      word_signs . append ( ( sign , <str> ) )  sign = <str> language = word [ 1 ] continue  else :                  sign += char continue   else :              if language == <str> :                  if char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> determinative = True continue  elif char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> language = <str> continue  elif char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> language = word [ 1 ] continue  else :                      sign += char   elif language == <str> :                  if char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> determinative = True continue  elif char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> language = word [ 1 ] continue  elif char == <str> :                      if len ( sign ) > 0 :                          word_signs . append ( ( sign , language ) )  sign = <str> language = word [ 1 ] continue  else :                      sign += char     if len ( sign ) > 0 :          word_signs . append ( ( sign , language ) )  return word_signs   