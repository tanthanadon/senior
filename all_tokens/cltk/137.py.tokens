from unicodedata import normalize import os import unittest from unittest . mock import patch import nltk from cltk . corpus . greek . alphabet import expand_iota_subscript from cltk . corpus . greek . alphabet import filter_non_greek from cltk . corpus . greek . beta_to_unicode import Replacer from cltk . corpus . greek . tlg . parse_tlg_indices import get_female_authors from cltk . corpus . greek . tlg . parse_tlg_indices import get_epithet_index from cltk . corpus . greek . tlg . parse_tlg_indices import get_epithets from cltk . corpus . greek . tlg . parse_tlg_indices import select_authors_by_epithet from cltk . corpus . greek . tlg . parse_tlg_indices import get_epithet_of_author from cltk . corpus . greek . tlg . parse_tlg_indices import get_geo_index from cltk . corpus . greek . tlg . parse_tlg_indices import get_geographies from cltk . corpus . greek . tlg . parse_tlg_indices import select_authors_by_geo from cltk . corpus . greek . tlg . parse_tlg_indices import get_geo_of_author from cltk . corpus . greek . tlg . parse_tlg_indices import get_lists from cltk . corpus . greek . tlg . parse_tlg_indices import get_id_author from cltk . corpus . greek . tlg . parse_tlg_indices import select_id_by_name from cltk . corpus . greek . tlg . parse_tlg_indices import get_works_by_id from cltk . corpus . greek . tlg . parse_tlg_indices import check_id from cltk . corpus . greek . tlg . parse_tlg_indices import get_date_author from cltk . corpus . greek . tlg . parse_tlg_indices import get_dates from cltk . corpus . greek . tlg . parse_tlg_indices import get_date_of_author from cltk . corpus . greek . tlg . parse_tlg_indices import _get_epoch from cltk . corpus . greek . tlg . parse_tlg_indices import _check_number from cltk . corpus . greek . tlg . parse_tlg_indices import _handle_splits from cltk . corpus . greek . tlgu import TLGU from cltk . corpus . middle_english . alphabet import normalize_middle_english from cltk . corpus . old_norse import runes from cltk . corpus . utils . formatter import assemble_phi5_author_filepaths from cltk . corpus . utils . formatter import assemble_phi5_works_filepaths from cltk . corpus . utils . formatter import assemble_tlg_author_filepaths from cltk . corpus . utils . formatter import assemble_tlg_works_filepaths from cltk . corpus . utils . formatter import phi5_plaintext_cleanup from cltk . corpus . utils . formatter import remove_non_ascii from cltk . corpus . utils . formatter import remove_non_latin from cltk . corpus . utils . formatter import tonos_oxia_converter from cltk . corpus . utils . formatter import tlg_plaintext_cleanup from cltk . corpus . utils . formatter import cltk_normalize from cltk . corpus . utils . importer import CorpusImporter from cltk . corpus . utils . importer import CorpusImportError from cltk . corpus . sanskrit . itrans . itrans_transliterator import * from cltk . corpus . sanskrit . itrans . unicode_transliterate import * from cltk . corpus . sanskrit . itrans . langinfo import * from cltk . corpus . sanskrit . itrans . sinhala_transliterator import SinhalaDevanagariTransliterator as sdt from cltk . corpus . punjabi . numerifier import punToEnglish_number from cltk . corpus . punjabi . numerifier import englishToPun_number from cltk . corpus . egyptian . transliterate_mdc import mdc_unicode from cltk . corpus . utils . formatter import normalize_fr from cltk . corpus . swadesh import Swadesh from cltk . corpus . readers import assemble_corpus , get_corpus_reader from cltk . corpus . latin . latin_library_corpus_types import corpus_texts_by_type , corpus_directories_by_type from cltk . utils . matrix_corpus_fun import distinct_words __license__ = <str> DISTRIBUTED_CORPUS_PATH_REL = get_cltk_data_dir ( ) + <str> DISTRIBUTED_CORPUS_PATH = os . path . expanduser ( DISTRIBUTED_CORPUS_PATH_REL ) class TestSequenceFunctions ( unittest . TestCase ) :      @ classmethod def setUpClass ( self ) :          try :              corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) corpus_importer . import_corpus ( <str> ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) corpus_importer . import_corpus ( <str> ) nltk . download ( <str> ) nltk . download ( <str> )  except :              raise Exception ( <str> )   def test_greek_betacode_to_unicode ( self ) :          replacer = Replacer ( ) beta_1 = <str> unicode_1 = replacer . beta_code ( beta_1 ) target_1 = <str> self . assertEqual ( unicode_1 , target_1 ) beta_2 = <str> unicode_2 = replacer . beta_code ( beta_2 ) target_2 = <str> self . assertEqual ( unicode_2 , target_2 ) beta_3 = <str> unicode_3 = replacer . beta_code ( beta_3 ) target_3 = <str> self . assertEqual ( unicode_3 , target_3 ) beta_4 = <str> unicode_4 = replacer . beta_code ( beta_4 ) target_4 = <str> self . assertEqual ( unicode_4 , target_4 )  def test_tlgu_init ( self ) :          tlgu = TLGU ( testing = True ) self . assertTrue ( tlgu )  def test_import_greek_software_tlgu ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) _file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( _file ) self . assertTrue ( file_exists )  def test_tlgu_convert ( self ) :          in_test = os . path . abspath ( <str> ) out_test = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) tlgu = TLGU ( testing = True ) tlgu . convert ( in_test , out_test ) with open ( out_test ) as out_file :              new_text = out_file . read ( )  os . remove ( out_test ) target = self . assertEqual ( new_text , target )  def test_tlgu_convert_fail ( self ) :          tlgu = TLGU ( testing = True ) with self . assertRaises ( AssertionError ) :              tlgu . convert ( <str> , <str> )   def test_tlgu_convert_corpus_fail ( self ) :          tlgu = TLGU ( testing = True ) with self . assertRaises ( AssertionError ) :              tlgu . convert_corpus ( corpus = <str> )   def test_tlg_plaintext_cleanup ( self ) :          dirty = clean = tlg_plaintext_cleanup ( dirty , rm_punctuation = True , rm_periods = False ) target = <str> self . assertEqual ( clean , target )  def test_tlg_plaintext_cleanup_rm_periods ( self ) :          dirty = clean = tlg_plaintext_cleanup ( dirty , rm_punctuation = True , rm_periods = True ) target = <str> self . assertEqual ( clean , target )  def test_phi5_plaintext_cleanup ( self ) :          dirty = clean = phi5_plaintext_cleanup ( dirty , rm_punctuation = True , rm_periods = False ) target = <str> self . assertEqual ( clean , target )  def test_phi5_plaintext_cleanup_rm_periods ( self ) :          dirty = clean = phi5_plaintext_cleanup ( dirty , rm_punctuation = True , rm_periods = True ) target = <str> self . assertEqual ( clean , target )  def test_phi5_plaintext_cleanup_rm_periods_bytes ( self ) :          dirty = <str> clean = phi5_plaintext_cleanup ( dirty , rm_punctuation = True , rm_periods = True ) target = <str> self . assertEqual ( clean , target )  def test_cltk_normalize_compatible ( self ) :          s1 = <str> s2 = <str> normalized_text = cltk_normalize ( s1 , compatibility = True ) target = normalize ( <str> , s2 ) self . assertEqual ( normalized_text , target )  def test_cltk_normalize_noncompatible ( self ) :          s1 = <str> s2 = <str> normalized_text = cltk_normalize ( s1 , compatibility = False ) target = normalize ( <str> , s2 ) self . assertEqual ( normalized_text , target )  def test_assemble_tlg_author ( self ) :          paths = assemble_tlg_author_filepaths ( ) self . assertEqual ( len ( paths ) , 1823 )  def test_assemble_phi5_author ( self ) :          paths = assemble_phi5_author_filepaths ( ) self . assertEqual ( len ( paths ) , 362 )  def test_assemble_tlg_works ( self ) :          paths = assemble_tlg_works_filepaths ( ) self . assertEqual ( len ( paths ) , 6625 )  def test_assemble_phi5_works ( self ) :          paths = assemble_phi5_works_filepaths ( ) self . assertEqual ( len ( paths ) , 836 )  def test_corpora_import_list_greek ( self ) :          corpus_importer = CorpusImporter ( <str> ) available_corpora = corpus_importer . list_corpora self . assertTrue ( available_corpora )  def test_corpora_import_list_latin ( self ) :          corpus_importer = CorpusImporter ( <str> ) available_corpora = corpus_importer . list_corpora self . assertTrue ( available_corpora )  def test_tonos_oxia_converter ( self ) :          char_tonos = <str> char_oxia = <str> corrected = tonos_oxia_converter ( char_tonos ) self . assertEqual ( char_oxia , corrected )  def test_tonos_oxia_converter_reverse ( self ) :          char_tonos = <str> char_oxia = <str> corrected = tonos_oxia_converter ( char_oxia , reverse = True ) self . assertEqual ( char_tonos , corrected )  def test_remove_non_ascii ( self ) :          non_ascii_str = <str> ascii_str = remove_non_ascii ( non_ascii_str ) valid = <str> self . assertEqual ( ascii_str , valid )  def test_remove_non_latin ( self ) :          latin_str = <str> non_latin_str = remove_non_latin ( latin_str ) valid = <str> self . assertEqual ( non_latin_str , valid )  def test_remove_non_latin_opt ( self ) :          latin_str = <str> non_latin_str = remove_non_latin ( latin_str , also_keep = [ <str> , <str> ] ) valid = <str> self . assertEqual ( non_latin_str , valid )  def test_latin_library_reader_missing_corpus ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) def _import ( ) :              with patch ( <str> , return_value = <str> ) :                  from cltk . corpus . readers import latinlibrary self . assertRaises ( OSError , _import )    def test_import_lat_text_lat_lib ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) _file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( _file ) self . assertTrue ( file_exists )  def test_import_latin_library_corpus_reader ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) ALL_FILE_IDS = list ( reader . fileids ( ) ) self . assertTrue ( len ( ALL_FILE_IDS ) > 2100 )  def test_json_corpus_reader ( self ) :          reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) reader . _fileids = [ <str> ] self . assertTrue ( len ( list ( reader . paras ( ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . sents ( ) ) ) > 400 ) self . assertTrue ( len ( list ( reader . words ( ) ) ) > 12000 ) reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) reader . _fileids = [ <str> ] self . assertTrue ( len ( list ( reader . docs ( ) ) ) == 1 ) self . assertTrue ( len ( list ( reader . paras ( ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . sents ( ) ) ) > 50 ) self . assertTrue ( len ( list ( reader . words ( ) ) ) > 2750 )  def test_tesserae_corpus_reader ( self ) :          reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) sample = reader . fileids ( ) [ 0 ] self . assertTrue ( len ( list ( reader . docs ( sample ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . texts ( sample ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . paras ( sample ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . sents ( sample ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . words ( sample ) ) ) >= 1 ) self . assertTrue ( len ( list ( reader . lines ( sample ) ) ) >= 1 ) self . assertTrue ( reader . describe ( ) ) self . assertTrue ( len ( list ( reader . pos_tokenize ( sample ) ) ) >= 1 )  def test_json_corpus_reader_sizes ( self ) :          reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) self . assertTrue ( len ( list ( reader . sizes ( ) ) ) > 290 )  def test_import_latin_models_cltk ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) _file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( _file ) self . assertTrue ( file_exists )  def test_import_greek_models_cltk ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) _file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( _file ) self . assertTrue ( file_exists )  def test_show_corpora_bad_lang ( self ) :          with self . assertRaises ( CorpusImportError ) :              CorpusImporter ( <str> )   def test_import_nonexistant_corpus ( self ) :          with self . assertRaises ( CorpusImportError ) :              corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> )   def test_import_latin_text_antique_digiliblt ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) _file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( _file ) self . assertTrue ( file_exists )  def test_get_female_authors ( self ) :          authors = get_female_authors ( ) authors = sorted ( authors ) [ : 3 ] self . assertEqual ( authors , [ <str> , <str> , <str> ] )  def test_get_epithet_index ( self ) :          ind = get_epithet_index ( ) self . assertEqual ( type ( ind ) , dict )  def test_get_epithets ( self ) :          epithets = get_epithets ( ) self . assertEqual ( epithets [ : 2 ] , [ <str> , <str> ] )  def test_select_authors_by_epithet ( self ) :          authors = select_authors_by_epithet ( <str> ) self . assertEqual ( len ( authors ) , 9 )  def test_get_epithet_of_author ( self ) :          epithet = get_epithet_of_author ( <str> ) self . assertEqual ( epithet , <str> )  def test_get_geo_index ( self ) :          index = get_geo_index ( ) self . assertEqual ( type ( index ) , dict )  def test_get_geographies ( self ) :          geos = get_geographies ( ) self . assertEqual ( type ( geos ) , list )  def test_select_authors_by_geo ( self ) :          authors = select_authors_by_geo ( <str> ) self . assertEqual ( len ( authors ) , 113 )  def test_get_geo_of_author ( self ) :          geo = get_geo_of_author ( <str> ) self . assertEqual ( geo , <str> )  def test_get_lists ( self ) :          index = get_lists ( ) self . assertEqual ( type ( index ) , dict )  def test_get_id_author ( self ) :          self . assertEqual ( type ( get_id_author ( ) ) , dict )  def test_select_id_by_name ( self ) :          matches = select_id_by_name ( <str> ) self . assertEqual ( len ( matches ) , 11 )  def test_get_works_by_id ( self ) :          works = get_works_by_id ( <str> ) self . assertEqual ( len ( works ) , 147 )  def test_check_id ( self ) :          author = check_id ( <str> ) valid = <str> self . assertEqual ( author , valid )  def test_get_epoch ( self ) :          self . assertEqual ( _get_epoch ( <str> ) , <str> ) self . assertEqual ( _get_epoch ( <str> ) , <str> ) self . assertIsNone ( _get_epoch ( <str> ) ) self . assertEqual ( _get_epoch ( <str> ) , <str> ) self . assertIsNone ( _get_epoch ( <str> ) ) self . assertEqual ( _get_epoch ( <str> ) , <str> ) self . assertEqual ( _get_epoch ( <str> ) , <str> )  def test_check_number ( self ) :          self . assertTrue ( _check_number ( <str> ) ) self . assertTrue ( _check_number ( <str> ) ) self . assertFalse ( _check_number ( <str> ) ) self . assertFalse ( _check_number ( <str> ) ) self . assertFalse ( _check_number ( <str> ) )  def test_handle_splits ( self ) :          _dict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( _handle_splits ( <str> ) , _dict ) _dict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( _handle_splits ( <str> ) , _dict ) _dict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( _handle_splits ( <str> ) , _dict ) _dict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( _handle_splits ( <str> ) , _dict ) _dict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( _handle_splits ( <str> ) , _dict )  def test_punjabi_to_english_number_conversion ( self ) :          str_test = <str> self . assertEqual ( 1234567890 , punToEnglish_number ( str_test ) )  def test_englishToPun_number ( self ) :          str_test = <str> self . assertEqual ( str_test , englishToPun_number ( 1234567890 ) )  def test_english_to_punjabi_number_conversion ( self ) :          str_test = <str> self . assertEqual ( str_test , englishToPun_number ( 1234567890 ) )  def make_distributed_corpora_testing_file ( self ) :          yaml_str_to_write = cltk_data_dir = get_cltk_data_dir ( ) if not os . path . isdir ( cltk_data_dir ) :              os . mkdir ( cltk_data_dir )  with open ( DISTRIBUTED_CORPUS_PATH , <str> ) as file_open :              file_open . write ( yaml_str_to_write )   def remove_distributed_corpora_testing_file ( self ) :          os . remove ( DISTRIBUTED_CORPUS_PATH )  def test_corpus_importer_variables_no_user_but_in_core ( self ) :          self . make_distributed_corpora_testing_file ( ) corpus_importer = CorpusImporter ( <str> , testing = True ) self . assertIn ( <str> , corpus_importer . list_corpora ) self . remove_distributed_corpora_testing_file ( )  def test_corpus_importer_variables_user_but_not_core ( self ) :          self . make_distributed_corpora_testing_file ( ) corpus_importer = CorpusImporter ( <str> , testing = True ) corpus_name = corpus_importer . list_corpora target_name = <str> self . assertEqual ( corpus_name [ 0 ] , target_name ) self . remove_distributed_corpora_testing_file ( )  def test_corpus_importer_variables_no_user_but_yes_core ( self ) :          self . make_distributed_corpora_testing_file ( ) corpus_importer = CorpusImporter ( <str> , testing = True ) corpora = corpus_importer . list_corpora self . assertIn ( <str> , corpora ) self . remove_distributed_corpora_testing_file ( )  def test_corpus_importer_variables_no_user_no_core ( self ) :          self . make_distributed_corpora_testing_file ( ) with self . assertRaises ( CorpusImportError ) :              CorpusImporter ( <str> )  self . remove_distributed_corpora_testing_file ( )  def test_egyptian_transliterate_mdc_to_unicode_q_kopf_True ( self ) :          mdc_string = test_result_string = mdc_unicode ( mdc_string ) comparison_string = self . assertEqual ( test_result_string , comparison_string )  def test_egyptian_transliterate_mdc_to_unicode_q_kopf_False ( self ) :          mdc_string = test_result_string = mdc_unicode ( mdc_string , q_kopf = False ) comparison_string = self . assertEqual ( test_result_string , comparison_string )  def test_expand_iota_subscript ( self ) :          unexpanded = <str> expanded = expand_iota_subscript ( unexpanded ) target = <str> self . assertEqual ( expanded , target )  def test_expand_iota_subscript_lower ( self ) :          unexpanded = <str> expanded = expand_iota_subscript ( unexpanded , lowercase = True ) target = <str> self . assertEqual ( expanded , target )  def test_filter_non_greek ( self ) :          test_input_string = <str> comparison_string = <str> test_result_string = filter_non_greek ( test_input_string ) self . assertEqual ( test_result_string , comparison_string )  def test_normalize ( self ) :          text = <str> normalized = normalize_fr ( text ) target = [ <str> ] self . assertEqual ( normalized , target )  def test_normalize_middle_english ( self ) :          in_test = <str> target = <str> test = normalize_middle_english ( in_test ) self . assertEqual ( target , test )   class TestFilteredCorpus ( unittest . TestCase ) :          @ classmethod def setUpClass ( self ) :              try :                  corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) corpus_importer . import_corpus ( <str> )  except :                  raise Exception ( <str> )  self . reader = get_corpus_reader ( language = <str> , corpus_name = <str> ) self . reader . _fileids = [ <str> ] self . reader_2 = get_corpus_reader ( language = <str> , corpus_name = <str> ) self . reader_3 = get_corpus_reader ( language = <str> , corpus_name = <str> ) self . reader_4 = get_corpus_reader ( language = <str> , corpus_name = <str> )  def test_import_latin_library_corpus_filter_by_file ( self ) :              filtered_reader = assemble_corpus ( self . reader_2 , types_requested = [ <str> ] , type_files = corpus_texts_by_type ) self . assertTrue ( len ( list ( filtered_reader . fileids ( ) ) ) > 0 )  def test_import_latin_library_corpus_filter_by_dir ( self ) :              filtered_reader = assemble_corpus ( self . reader_3 , types_requested = [ <str> ] , type_dirs = corpus_directories_by_type ) self . assertTrue ( len ( list ( filtered_reader . fileids ( ) ) ) > 0 )  def test_import_latin_library_corpus_filter_by_file_and_dir ( self ) :              filtered_reader = assemble_corpus ( self . reader_4 , types_requested = [ <str> ] , type_dirs = corpus_directories_by_type , type_files = corpus_texts_by_type ) self . assertTrue ( len ( list ( filtered_reader . fileids ( ) ) ) > 0 )  def test_filtered_corpus_reader_sents ( self ) :              sents = self . reader . sents ( ) uniq_words = distinct_words ( sents ) if <str> in uniq_words :                  self . fail ( <str> )  self . assertTrue ( uniq_words )  def test_filtered_corpus_reader_paras ( self ) :              paras = self . reader . paras ( ) sents = [ sent for para in paras for sent in para ] uniq_words = distinct_words ( sents ) if <str> in uniq_words :                  self . fail ( <str> )  self . assertTrue ( uniq_words )  def test_filtered_corpus_reader_words ( self ) :              words = self . reader . words ( ) uniq_words = distinct_words ( words ) if <str> in uniq_words :                  self . fail ( <str> )  self . assertTrue ( uniq_words )  def test_filtered_corpus_reader_docs ( self ) :              docs = list ( self . reader . docs ( ) ) uniq_words = distinct_words ( docs ) if <str> in uniq_words :                  self . fail ( <str> )  self . assertTrue ( len ( docs ) > 0 ) problem_files = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for filename in problem_files :                  doc = list ( self . reader . docs ( [ filename ] ) ) assert ( doc ) assert ( len ( doc [ 0 ] ) > 100 )   def test_filtered_corpus_reader_sizes ( self ) :              self . assertTrue ( len ( list ( self . reader . sizes ( ) ) ) > 0 )   class TestUnicode ( unittest . TestCase ) :      <str> def test_py23char ( self ) :          self . assertEqual ( py23char ( 0x92D ) , <str> ) self . assertFalse ( py23char ( 0x93D ) == <str> )   class TestTransliteration ( unittest . TestCase ) :      <str> def test_Indicization ( self ) :          x = ItransTransliterator . from_itrans ( <str> , <str> ) y = ItransTransliterator . from_itrans ( <str> , <str> ) z = ItransTransliterator . from_itrans ( <str> , <str> ) self . assertEqual ( x , <str> ) self . assertEqual ( y , <str> ) self . assertEqual ( z , <str> )  def test_ScriptConversion ( self ) :          x = UnicodeIndicTransliterator . transliterate ( <str> , <str> , <str> ) self . assertEqual ( x , <str> ) y = UnicodeIndicTransliterator . transliterate ( <str> , <str> , <str> ) self . assertEqual ( y , <str> ) z = UnicodeIndicTransliterator . transliterate ( <str> , <str> , <str> ) self . assertEqual ( z , <str> ) t = UnicodeIndicTransliterator . transliterate ( <str> , <str> , <str> ) self . assertEqual ( t , <str> ) h = UnicodeIndicTransliterator . transliterate ( <str> , <str> , <str> ) self . assertEqual ( h , <str> )  def test_Romanization ( self ) :          x = ItransTransliterator . to_itrans ( <str> , <str> ) self . assertTrue ( x == <str> or x == <str> ) x = ItransTransliterator . to_itrans ( <str> , <str> ) self . assertEqual ( x , <str> ) ml = ItransTransliterator . to_itrans ( <str> , <str> ) self . assertEqual ( ml , <str> )  def test_SinhalaDevanagariTransliterator ( self ) :          sin = sdt . devanagari_to_sinhala ( <str> ) self . assertEqual ( sin , <str> ) dev = sdt . sinhala_to_devanagari ( <str> ) self . assertEqual ( dev , <str> )   class TestScriptInformation ( unittest . TestCase ) :      def test_IsVowel ( self ) :          self . assertFalse ( is_vowel ( <str> , <str> ) ) self . assertTrue ( is_vowel ( <str> , <str> ) )  def test_IsConsonant ( self ) :          self . assertTrue ( is_consonant ( <str> , <str> ) ) self . assertFalse ( is_consonant ( <str> , <str> ) )  def test_IsVelar ( self ) :          self . assertTrue ( is_velar ( <str> , <str> ) ) self . assertFalse ( is_velar ( <str> , <str> ) )  def test_IsPalatal ( self ) :          self . assertTrue ( is_palatal ( <str> , <str> ) ) self . assertFalse ( is_palatal ( <str> , <str> ) )  def test_IsAspirated ( self ) :          self . assertTrue ( is_aspirated ( <str> , <str> ) ) self . assertFalse ( is_aspirated ( <str> , <str> ) )  def test_IsUnvoiced ( self ) :          self . assertTrue ( is_unvoiced ( <str> , <str> ) ) self . assertFalse ( is_unvoiced ( <str> , <str> ) )  def test_IsNasal ( self ) :          self . assertTrue ( is_nasal ( <str> , <str> ) ) self . assertFalse ( is_nasal ( <str> , <str> ) )  def test_IsVowelSign ( self ) :          self . assertTrue ( is_vowel_sign ( <str> , <str> ) )  def test_IsNukta ( self ) :          self . assertTrue ( is_nukta ( <str> , <str> ) )  def test_IsAum ( self ) :          self . assertTrue ( is_aum ( <str> , <str> ) )  def test_IsHalanta ( self ) :          self . assertTrue ( is_halanta ( <str> , <str> ) )  def test_IsRetroflex ( self ) :          self . assertTrue ( is_retroflex ( <str> , <str> ) )  def test_IsDental ( self ) :          self . assertTrue ( is_dental ( <str> , <str> ) )  def test_IsLabial ( self ) :          self . assertTrue ( is_labial ( <str> , <str> ) )  def test_IsVoiced ( self ) :          self . assertTrue ( is_voiced ( <str> , <str> ) )  def test_IsUnAspirated ( self ) :          self . assertTrue ( is_unaspirated ( <str> , <str> ) )  def test_IsFricative ( self ) :          self . assertTrue ( is_fricative ( <str> , <str> ) )  def test_IsApproximant ( self ) :          self . assertTrue ( is_approximant ( <str> , <str> ) )  def test_IsNumber ( self ) :          self . assertTrue ( is_number ( <str> , <str> ) )  def test_offset_to_char ( self ) :          self . assertEqual ( offset_to_char ( 0x021 , <str> ) , <str> )  def test_in_coordinated_range ( self ) :          self . assertTrue ( in_coordinated_range ( 0x6e ) )  def test_is_indiclang_char ( self ) :          self . assertTrue ( is_indiclang_char ( <str> , <str> ) )  def test_swadesh_greek ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_latin ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_tocharianB ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_old_portuguese ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_sanskrit ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_hindi ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_old_english ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_old_norse ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_swadesh_arabic ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )   class TestRunes ( unittest . TestCase ) :      def test_rune_alphabet_name ( self ) :          self . assertEqual ( runes . RunicAlphabetName . elder_futhark . value , <str> )  def test_rune_definition ( self ) :          haglaz = runes . Rune ( runes . RunicAlphabetName . elder_futhark , <str> , <str> , <str> , <str> ) self . assertEqual ( haglaz . form , <str> )  def test_runic_transcription_definition ( self ) :          inscription = <str> transcription = runes . Transcriber . transcribe ( inscription , runes . YOUNGER_FUTHARK ) self . assertEqual ( transcription , <str> )   if __name__ == <str> :      unittest . main ( )   