__author__ = [ <str> ] __license__ = <str> ENDINGS = { <str> : { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> } } , <str> : { <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> } , <str> : { <str> : [ <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> ] } } } class Stemmer ( object ) :      def __init__ ( self ) :          self . endings = ENDINGS  def get_stem ( self , noun , gender , mimation = True ) :          stem = <str> if mimation and noun [ - 1 : ] == <str> :              pass  if gender == <str> :              if noun [ - 2 : ] in list ( self . endings [ <str> ] [ <str> ] . values ( ) ) + list ( self . endings [ <str> ] [ <str> ] . values ( ) ) :                  stem = noun [ : - 2 ]  elif noun [ - 1 ] in list ( self . endings [ <str> ] [ <str> ] . values ( ) ) :                  stem = noun [ : - 1 ]  else :                  print ( <str> . format ( noun ) )   elif gender == <str> :              if noun [ - 4 : ] in self . endings [ <str> ] [ <str> ] [ <str> ] + self . endings [ <str> ] [ <str> ] [ <str> ] :                  stem = noun [ : - 4 ] + <str>  elif noun [ - 3 : ] in list ( self . endings [ <str> ] [ <str> ] . values ( ) ) + list ( self . endings [ <str> ] [ <str> ] . values ( ) ) :                  stem = noun [ : - 3 ] + <str>  elif noun [ - 2 : ] in list ( self . endings [ <str> ] [ <str> ] . values ( ) ) + list ( self . endings [ <str> ] [ <str> ] . values ( ) ) :                  stem = noun [ : - 2 ]  else :                  print ( <str> . format ( noun ) )   else :              print ( <str> . format ( noun ) )  return stem    