import os import sys import numpy as np from scipy import stats from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings import database_bandwidth_tuning_fit_funcs as fitfuncs import figparams dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbase = celldatabase . load_hdf ( dbPath ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , figName ) cellList = [ { <str> : <str> , <str> : <str> , <str> : 1200 , <str> : 6 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1000 , <str> : 2 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1400 , <str> : 4 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1200 , <str> : 1 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1300 , <str> : 2 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1300 , <str> : 2 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1250 , <str> : 4 , <str> : 2 } ] cellTypes = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] args = sys . argv [ 1 : ] if len ( args ) :      cellsToGenerate = [ int ( x ) for x in args ]  else :      cellsToGenerate = range ( len ( cellList ) )  print cellsToGenerate for indCell in cellsToGenerate :      cellInd , dbRow = celldatabase . find_cell ( dbase , ** cellList [ indCell ] ) cell = ephyscore . Cell ( dbRow ) bandEphysData , bandBData = cell . load_by_index ( int ( dbRow [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) secondSort = bandBData [ <str> ] numSec = np . unique ( secondSort ) bandTimeRange = [ - 0.5 , 1.5 ] bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , secondSort , numSec ) bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , bandTimeRange ) soundDuration = bandBData [ <str> ] [ - 1 ] print ( <str> . format ( soundDuration ) ) onsetTimeRange = [ 0.0 , 0.05 ] onsetDuration = onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] sustainedTimeRange = [ 0.2 , soundDuration ] sustainedDuration = sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] onsetSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , onsetTimeRange ) sustainedSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , sustainedTimeRange ) onsetResponseArray = np . zeros ( ( len ( numBands ) , len ( numSec ) ) ) onsetSEM = np . zeros_like ( onsetResponseArray ) sustainedResponseArray = np . zeros_like ( onsetResponseArray ) sustainedSEM = np . zeros_like ( onsetResponseArray ) for band in range ( len ( numBands ) ) :          trialsThisBand = bandTrialsEachCond [ : , band , : ] for thisSecVal in range ( len ( numSec ) ) :              trialsThisLaser = trialsThisBand [ : , thisSecVal ] if onsetSpikeCountMat . shape [ 0 ] != len ( trialsThisLaser ) :                  onsetSpikeCountMat = onsetSpikeCountMat [ : - 1 , : ] sustainedSpikeCountMat = sustainedSpikeCountMat [ : - 1 , : ]  if any ( trialsThisLaser ) :                  thisLaserOnsetCounts = onsetSpikeCountMat [ trialsThisLaser ] . flatten ( ) thisLaserSustainedCounts = sustainedSpikeCountMat [ trialsThisLaser ] . flatten ( ) onsetResponseArray [ band , thisSecVal ] = np . mean ( thisLaserOnsetCounts ) / onsetDuration sustainedResponseArray [ band , thisSecVal ] = np . mean ( thisLaserSustainedCounts ) / sustainedDuration onsetSEM [ band , thisSecVal ] = stats . sem ( thisLaserOnsetCounts ) / onsetDuration sustainedSEM [ band , thisSecVal ] = stats . sem ( thisLaserSustainedCounts ) / sustainedDuration    noLaserBaseline = dbRow [ <str> ] laserBaseline = dbRow [ <str> ] noLaserSEM = dbRow [ <str> ] laserSEM = dbRow [ <str> ] suppIndNoLaser = dbRow [ <str> ] suppIndLaser = dbRow [ <str> ] suppIndPureToneNoLaser = dbRow [ <str> ] suppIndPureToneLaser = dbRow [ <str> ] suppIndNoZeroNoLaser = dbRow [ <str> ] suppIndNoZeroLaser = dbRow [ <str> ] numBands [ - 1 ] = 6 testBands = np . linspace ( numBands [ 0 ] , numBands [ - 1 ] , 500 ) testRespsNoLaser = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testRespsLaser = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testRespsPureToneNoLaser = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testRespsPureToneLaser = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testBandsNoZero = np . linspace ( numBands [ 1 ] , numBands [ - 1 ] , 500 ) testRespsNoZeroNoLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testRespsNoZeroLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) outputFile = <str> . format ( cellTypes [ indCell ] , dbRow [ <str> ] , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , onsetResponseArray = onsetResponseArray , onsetSEM = onsetSEM , sustainedResponseArray = sustainedResponseArray , sustainedSEM = sustainedSEM , noLaserBaseline = noLaserBaseline , laserBaseline = laserBaseline , noLaserSEM = noLaserSEM , laserSEM = laserSEM , possibleBands = numBands , possibleLasers = numSec , spikeTimesFromEventOnset = bandSpikeTimesFromEventOnset , indexLimitsEachTrial = bandIndexLimitsEachTrial , timeRange = bandTimeRange , trialsEachCond = bandTrialsEachCond , onsetTimeRange = onsetTimeRange , sustainedTimeRange = sustainedTimeRange , fitBands = testBands , fitResponseNoLaser = testRespsNoLaser , fitResponseLaser = testRespsLaser , fitResponsePureToneNoLaser = testRespsPureToneNoLaser , fitResponsePureToneLaser = testRespsPureToneLaser , fitBandsNoZero = testBandsNoZero , fitResponseNoZeroNoLaser = testRespsNoZeroNoLaser , fitResponseNoZeroLaser = testRespsNoZeroLaser , suppIndNoLaser = suppIndNoLaser , suppIndLaser = suppIndLaser , suppIndPureToneNoLaser = suppIndPureToneNoLaser , suppIndPureToneLaser = suppIndPureToneLaser , suppIndNoZeroNoLaser = suppIndNoZeroNoLaser , suppIndNoZeroLaser = suppIndNoZeroLaser ) print outputFile + <str>    