import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from jaratoolbox import ephyscore from collections import Counter from scipy import stats import pandas as pd from sklearn import metrics def medline ( yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) plt . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  dbPath = <str> dataframe = pd . read_hdf ( dbPath , key = <str> ) dataframe = dataframe . query ( <str> ) ac = dataframe . groupby ( <str> ) . get_group ( <str> ) thal = dataframe . groupby ( <str> ) . get_group ( <str> ) possibleFreqKeys = [ 4 , 5 , 8 , 11 , 16 , 22 , 32 , 45 , 64 , 90 , 128 ] keys = [ <str> . format ( rate ) for rate in possibleFreqKeys ] acData = np . full ( ( len ( ac ) , len ( possibleFreqKeys ) ) , np . nan ) thalData = np . full ( ( len ( thal ) , len ( possibleFreqKeys ) ) , np . nan ) for externalInd , ( indRow , row ) in enumerate ( ac . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          acData [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( thal . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          thalData [ externalInd , indKey ] = row [ key ]   acData [ acData < 0 ] = 0 thalData [ thalData < 0 ] = 0 for indCol , freqKey in enumerate ( possibleFreqKeys ) :      acDataThisFreq = acData [ : , indCol ] [ np . logical_not ( np . isnan ( acData [ : , indCol ] ) ) ] thalDataThisFreq = thalData [ : , indCol ] [ np . logical_not ( np . isnan ( thalData [ : , indCol ] ) ) ] zStat , pVal = stats . ranksums ( acDataThisFreq , thalDataThisFreq ) print <str> . format ( freqKey , pVal )  acMean = np . nanmean ( acData , axis = 0 ) acStd = np . nanstd ( acData , axis = 0 ) thalMean = np . nanmean ( thalData , axis = 0 ) thalStd = np . nanstd ( thalData , axis = 0 ) numAC = sum ( np . logical_not ( np . isnan ( acData [ : , 0 ] ) ) ) numThal = sum ( np . logical_not ( np . isnan ( thalData [ : , 0 ] ) ) ) plt . clf ( ) for indRate in range ( len ( possibleFreqKeys ) ) :      indThal = indRate - 0.1 indAC = indRate + 0.1 plt . plot ( np . ones ( len ( thalData [ : , indRate ] ) ) * indThal , thalData [ : , indRate ] , <str> , mec = <str> , mfc = <str> ) medline ( np . nanmean ( thalData [ : , indRate ] ) , indThal , 0.1 ) plt . hold ( 1 ) plt . plot ( np . ones ( len ( acData [ : , indRate ] ) ) * indAC , acData [ : , indRate ] , <str> , mec = <str> , mfc = <str> ) medline ( np . nanmean ( acData [ : , indRate ] ) , indAC , 0.1 )  plt . show ( )  