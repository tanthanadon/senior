import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . patches as mpatches import matplotlib . lines as mlines import scipy . stats as stats import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> colorsDict = { <str> : figparams . colp [ <str> ] , <str> : figparams . colp [ <str> ] } soundColor = figparams . colp [ <str> ] timeRange = [ - 0.3 , 0.5 ] premovementColor = <str> PANELS = [ 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 13.5 , 3.5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 labelPosX = [ 0.02 , 0.26 , 0.53 , 0.76 ] labelPosY = [ 0.95 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 4 ) gs . update ( left = 0.07 , right = 0.98 , top = 0.9 , bottom = 0.18 , wspace = 0.35 , hspace = 0.3 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 3 , 3 , subplot_spec = gs [ 0 , 2 ] , hspace = 0.15 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 3 , 3 , subplot_spec = gs [ 0 , 3 ] , hspace = 0.15 ) msRaster = 2 smoothWinSizePsth = 3 lwPsth = 2 downsampleFactorPsth = 1 ax6 = plt . subplot ( gs [ 0 , 0 ] ) ax6 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 0 ] :      colorMod = <str> colorNotMod = <str> dataDirPsy = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) summaryFilename = <str> summaryFullPath = os . path . join ( dataDirPsy , summaryFilename ) summary = np . load ( summaryFullPath ) sigModulated = summary [ <str> ] sigMI = summary [ <str> ] [ sigModulated ] nonsigMI = summary [ <str> ] [ ~ sigModulated ] if np . any ( np . isnan ( nonsigMI ) ) :          print <str> nonsigMI = nonsigMI [ ~ np . isnan ( nonsigMI ) ]  nonsigMI [ ( nonsigMI == 1 ) | ( nonsigMI == - 1 ) ] = 0 binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . hist ( [ sigMI , nonsigMI ] , bins = binsEdges , color = [ colorMod , colorNotMod ] , edgecolor = <str> , stacked = True , rwidth = 0.8 ) yPosText = 0.95 * plt . ylim ( ) [ 1 ] plt . text ( - 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . text ( 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . axvline ( x = 0 , linestyle = <str> , linewidth = 1.5 , color = <str> ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) ) plt . title ( <str> ) print <str> , len ( sigModulated ) , <str> , sum ( sigModulated ) ( T , pVal ) = stats . wilcoxon ( summary [ <str> ] ) print <str> , pVal  ax7 = plt . subplot ( gs [ 0 , 1 ] ) ax7 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      colorMod = <str> colorNotMod = <str> summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) sigModulated = summary [ <str> ] sigMI = summary [ <str> ] [ sigModulated ] nonsigMI = summary [ <str> ] [ ~ sigModulated ] binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . hist ( [ sigMI , nonsigMI ] , bins = binsEdges , color = [ colorMod , colorNotMod ] , edgecolor = <str> , stacked = True , rwidth = 0.8 ) yPosText = 0.95 * plt . ylim ( ) [ 1 ] plt . text ( - 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . text ( 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . axvline ( x = 0 , linestyle = <str> , linewidth = 1.5 , color = <str> ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) ) plt . title ( <str> ) print <str> , len ( sigModulated ) , <str> , sum ( sigModulated ) ( T , pVal ) = stats . wilcoxon ( summary [ <str> ] ) print <str> , pVal  ax2 = plt . subplot ( gs00 [ 0 : 2 , 0 : ] ) ax2 . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 2 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) trialsEachCond = rasterExample [ <str> ] colorEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond ) plt . setp ( pRaster , ms = msRaster ) ax2 . set_yticklabels ( [ ] ) ax2 . set_xticklabels ( [ ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) ax3 = plt . subplot ( gs00 [ 2 : , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] colorEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRange ) yLims = [ 0 , 18 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) plt . fill ( [ - 0.1 , 0 , 0 , - 0.1 ] , [ yLims [ 0 ] , yLims [ 0 ] , yLims [ - 1 ] , yLims [ - 1 ] ] , ec = <str> , fc = premovementColor , alpha = 0.3 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) )  ax4 = plt . subplot ( gs01 [ 0 : 2 , 0 : ] ) ax4 . annotate ( <str> , xy = ( labelPosX [ 3 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 3 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) trialsEachCond = rasterExample [ <str> ] colorEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . setp ( pRaster , ms = msRaster ) ax4 . set_yticklabels ( [ ] ) ax4 . set_xticklabels ( [ ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) ax5 = plt . subplot ( gs01 [ 2 : , 0 : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] colorEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) left_line = mlines . Line2D ( [ ] , [ ] , color = colorsDict [ <str> ] , label = <str> ) right_line = mlines . Line2D ( [ ] , [ ] , color = colorsDict [ <str> ] , label = <str> ) plt . legend ( [ <str> , <str> ] , loc = <str> , fontsize = fontSizeTicks , handlelength = 0.2 , frameon = False , handletextpad = 0.3 , labelspacing = 0 , borderaxespad = 0 ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) yLims = [ 0 , 30 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . xlim ( timeRange ) plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) plt . fill ( [ - 0.1 , 0 , 0 , - 0.1 ] , [ yLims [ 0 ] , yLims [ 0 ] , yLims [ - 1 ] , yLims [ - 1 ] ] , ec = <str> , fc = premovementColor , alpha = 0.3 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) extraplots . boxoff ( plt . gca ( ) )  plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   