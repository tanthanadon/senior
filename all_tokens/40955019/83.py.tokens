import numpy as np from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis import database_generation_funcs as funcs import database_bandwidth_tuning_fit_funcs as fitfuncs def inactivation_base_stats ( db ) :      laserTestStatistic = np . empty ( len ( db ) ) laserPVal = np . empty ( len ( db ) ) soundResponseTestStatistic = np . empty ( len ( db ) ) soundResponsePVal = np . empty ( len ( db ) ) onsetSoundResponseTestStatistic = np . empty ( len ( db ) ) onsetSoundResponsePVal = np . empty ( len ( db ) ) sustainedSoundResponseTestStatistic = np . empty ( len ( db ) ) sustainedSoundResponsePVal = np . empty ( len ( db ) ) gaussFit = [ ] tuningTimeRange = [ ] Rsquared = np . empty ( len ( db ) ) prefFreq = np . empty ( len ( db ) ) octavesFromPrefFreq = np . empty ( len ( db ) ) bestBandSession = np . empty ( len ( db ) ) for indRow , ( dbIndex , dbRow ) in enumerate ( db . iterrows ( ) ) :          cellObj = ephyscore . Cell ( dbRow ) print <str> , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] try :              laserEphysData , noBehav = cellObj . load ( <str> )  except IndexError :              print <str> testStatistic = np . nan pVal = np . nan changeFR = np . nan  else :              testStatistic , pVal , changeFR = funcs . laser_response ( laserEphysData , baseRange = [ - 0.3 , - 0.2 ] , responseRange = [ 0.0 , 0.1 ] )  laserTestStatistic [ indRow ] = testStatistic laserPVal [ indRow ] = pVal if any ( session in dbRow [ <str> ] for session in [ <str> , <str> ] ) :              if <str> in dbRow [ <str> ] :                  bandEphysData , bandBehavData = cellObj . load ( <str> ) behavSession = <str> db . at [ dbIndex , <str> ] = 0  elif <str> in dbRow [ <str> ] :                  bandEphysData , bandBehavData = cellObj . load ( <str> ) behavSession = <str> db . at [ dbIndex , <str> ] = 1  bandEventOnsetTimes = funcs . get_sound_onset_times ( bandEphysData , <str> ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBehavData [ <str> ] secondSort = bandBehavData [ <str> ] numBands = np . unique ( bandEachTrial ) numSec = np . unique ( secondSort ) trialsEachComb = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , secondSort , numSec ) trialsEachBaseCond = trialsEachComb [ : , : , 0 ] testStatistic , pVal = funcs . sound_response_any_stimulus ( bandEventOnsetTimes , bandSpikeTimestamps , trialsEachBaseCond , [ 0.0 , 1.0 ] , [ - 1.2 , - 0.2 ] ) onsetTestStatistic , onsetpVal = funcs . sound_response_any_stimulus ( bandEventOnsetTimes , bandSpikeTimestamps , trialsEachBaseCond , [ 0.0 , 0.05 ] , [ - 0.25 , - 0.2 ] ) sustainedTestStatistic , sustainedpVal = funcs . sound_response_any_stimulus ( bandEventOnsetTimes , bandSpikeTimestamps , trialsEachBaseCond , [ 0.2 , 1.0 ] , [ - 1.0 , - 0.2 ] ) pVal *= len ( numBands ) onsetpVal *= len ( numBands ) sustainedpVal *= len ( numBands ) baselineRange = [ - 0.05 , 0.0 ] baselineRates , baselineSEMs = funcs . inactivated_cells_baselines ( bandSpikeTimestamps , bandEventOnsetTimes , secondSort , baselineRange ) db . at [ dbIndex , <str> ] = baselineRates [ 0 ] db . at [ dbIndex , <str> ] = baselineRates [ 1 ] db . at [ dbIndex , <str> ] = baselineSEMs [ 0 ] db . at [ dbIndex , <str> ] = baselineSEMs [ 1 ] db . at [ dbIndex , <str> ] = baselineRates [ 1 ] - baselineRates [ 0 ]  else :              print <str> testStatistic = np . nan pVal = np . nan onsetTestStatistic = np . nan onsetpVal = np . nan sustainedTestStatistic = np . nan sustainedpVal = np . nan  soundResponseTestStatistic [ indRow ] = testStatistic soundResponsePVal [ indRow ] = pVal onsetSoundResponseTestStatistic [ indRow ] = onsetTestStatistic onsetSoundResponsePVal [ indRow ] = onsetpVal sustainedSoundResponseTestStatistic [ indRow ] = sustainedTestStatistic sustainedSoundResponsePVal [ indRow ] = sustainedpVal try :              tuningEphysData , tuningBehavData = cellObj . load ( <str> )  except IndexError :              print <str> freqFit = np . full ( 4 , np . nan ) thisRsquared = np . nan bestFreq = np . nan tuningWindow = np . full ( 2 , np . nan ) octavesFromBest = np . nan bandIndex = np . nan  else :              tuningEventOnsetTimes = funcs . get_sound_onset_times ( tuningEphysData , <str> ) tuningSpikeTimestamps = tuningEphysData [ <str> ] freqEachTrial = tuningBehavData [ <str> ] intensityEachTrial = tuningBehavData [ <str> ] numFreqs = np . unique ( freqEachTrial ) numIntensities = np . unique ( intensityEachTrial ) timeRange = [ - 0.2 , 0.2 ] spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( tuningSpikeTimestamps , tuningEventOnsetTimes , timeRange ) trialsEachType = behavioranalysis . find_trials_each_type ( intensityEachTrial , numIntensities ) trialsHighInt = trialsEachType [ : , - 1 ] trialsEachComb = behavioranalysis . find_trials_each_combination ( freqEachTrial , numFreqs , intensityEachTrial , numIntensities ) trialsEachFreqHighInt = trialsEachComb [ : , : , - 1 ] tuningWindow = funcs . best_window_freq_tuning ( spikeTimesFromEventOnset , indexLimitsEachTrial , trialsEachFreqHighInt ) tuningWindow = np . array ( tuningWindow ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , tuningWindow ) if spikeCountMat . shape [ 0 ] == len ( trialsHighInt ) + 1 :                  spikeCountMat = spikeCountMat [ : - 1 , : ]  tuningSpikeRates = ( spikeCountMat [ trialsHighInt ] . flatten ( ) ) / ( tuningWindow [ 1 ] - tuningWindow [ 0 ] ) freqsThisIntensity = freqEachTrial [ trialsHighInt ] freqFit , thisRsquared = funcs . gaussian_tuning_fit ( np . log2 ( freqsThisIntensity ) , tuningSpikeRates ) if freqFit is not None :                  bestFreq = 2 ** freqFit [ 0 ] bandIndex , octavesFromBest = funcs . best_index ( cellObj , bestFreq , behavSession )  else :                  freqFit = np . full ( 4 , np . nan ) bestFreq = np . nan bandIndex = np . nan octavesFromBest = np . nan   gaussFit . append ( freqFit ) tuningTimeRange . append ( tuningWindow ) Rsquared [ indRow ] = thisRsquared prefFreq [ indRow ] = bestFreq octavesFromPrefFreq [ indRow ] = octavesFromBest bestBandSession [ indRow ] = bandIndex  db [ <str> ] = laserPVal db [ <str> ] = laserTestStatistic db [ <str> ] = soundResponseTestStatistic db [ <str> ] = soundResponsePVal db [ <str> ] = onsetSoundResponseTestStatistic db [ <str> ] = onsetSoundResponsePVal db [ <str> ] = sustainedSoundResponseTestStatistic db [ <str> ] = sustainedSoundResponsePVal db [ <str> ] = gaussFit db [ <str> ] = tuningTimeRange db [ <str> ] = Rsquared db [ <str> ] = prefFreq db [ <str> ] = octavesFromPrefFreq db [ <str> ] = bestBandSession return db  def inactivation_indices ( db ) :      bestCells = db . query ( <str> ) bestCells = bestCells . loc [ bestCells [ <str> ] > 2 ] bestCells = bestCells . query ( <str> ) bestCells = bestCells . loc [ bestCells [ <str> ] > 0.05 ] bestCells = bestCells . loc [ bestCells [ <str> ] < 0.5 ] for dbIndex , dbRow in bestCells . iterrows ( ) :          cell = ephyscore . Cell ( dbRow ) print <str> , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] bandEphysData , bandBehavData = cell . load_by_index ( int ( dbRow [ <str> ] ) ) bandEventOnsetTimes = funcs . get_sound_onset_times ( bandEphysData , <str> ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBehavData [ <str> ] secondSort = bandBehavData [ <str> ] propOnset , propSustained = funcs . onset_sustained_spike_proportion ( bandSpikeTimestamps , bandEventOnsetTimes ) db . at [ dbIndex , <str> ] = propOnset db . at [ dbIndex , <str> ] = propSustained onsetSupInds , onsetSupIndpVals , onsetFacInds , onsetFacIndpVals , onsetPeakInds , onsetSpikeArray = funcs . bandwidth_suppression_from_peak ( bandSpikeTimestamps , bandEventOnsetTimes , bandEachTrial , secondSort , timeRange = [ 0.0 , 0.05 ] , baseRange = [ - 0.05 , 0.0 ] ) db . at [ dbIndex , <str> ] = onsetSupInds [ - 1 ] db . at [ dbIndex , <str> ] = onsetSupIndpVals [ - 1 ] db . at [ dbIndex , <str> ] = onsetFacInds [ - 1 ] db . at [ dbIndex , <str> ] = onsetFacIndpVals [ - 1 ] db . at [ dbIndex , <str> ] = bandEachTrial [ int ( onsetPeakInds [ - 1 ] ) ] db . at [ dbIndex , <str> ] = onsetSupInds [ 0 ] db . at [ dbIndex , <str> ] = onsetSupIndpVals [ 0 ] db . at [ dbIndex , <str> ] = onsetFacInds [ 0 ] db . at [ dbIndex , <str> ] = onsetFacIndpVals [ 0 ] db . at [ dbIndex , <str> ] = bandEachTrial [ int ( onsetPeakInds [ 0 ] ) ] sustainedSupInds , sustainedSupIndpVals , sustainedFacInds , sustainedFacIndpVals , sustainedPeakInds , sustainedSpikeArray = funcs . bandwidth_suppression_from_peak ( bandSpikeTimestamps , bandEventOnsetTimes , bandEachTrial , secondSort , timeRange = [ 0.2 , 1.0 ] , baseRange = [ - 0.05 , 0.0 ] ) db . at [ dbIndex , <str> ] = sustainedSupInds [ - 1 ] db . at [ dbIndex , <str> ] = sustainedSupIndpVals [ - 1 ] db . at [ dbIndex , <str> ] = sustainedFacInds [ - 1 ] db . at [ dbIndex , <str> ] = sustainedFacIndpVals [ - 1 ] db . at [ dbIndex , <str> ] = bandEachTrial [ int ( sustainedPeakInds [ - 1 ] ) ] db . at [ dbIndex , <str> ] = sustainedSupInds [ 0 ] db . at [ dbIndex , <str> ] = sustainedSupIndpVals [ 0 ] db . at [ dbIndex , <str> ] = sustainedFacInds [ 0 ] db . at [ dbIndex , <str> ] = sustainedFacIndpVals [ 0 ] db . at [ dbIndex , <str> ] = bandEachTrial [ int ( sustainedPeakInds [ 0 ] ) ] sustainedResponseNoLaser = sustainedSpikeArray [ : , 0 ] bandsForFit = np . unique ( bandEachTrial ) bandsForFit [ - 1 ] = 6 mFixed = 1 fitParams , R2 = fitfuncs . diff_of_gauss_fit ( bandsForFit , sustainedResponseNoLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = fitParams [ 0 ] db . at [ dbIndex , <str> ] = fitParams [ 3 ] db . at [ dbIndex , <str> ] = fitParams [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = fitParams [ 1 ] db . at [ dbIndex , <str> ] = fitParams [ 2 ] db . at [ dbIndex , <str> ] = R2 testBands = np . linspace ( bandsForFit [ 0 ] , bandsForFit [ - 1 ] , 500 ) allFitParams = [ mFixed ] allFitParams . extend ( fitParams ) suppInd , prefBW = fitfuncs . extract_stats_from_fit ( allFitParams , testBands ) db . at [ dbIndex , <str> ] = suppInd db . at [ dbIndex , <str> ] = prefBW sustainedResponseLaser = sustainedSpikeArray [ : , 1 ] fitParamsLaser , R2Laser = fitfuncs . diff_of_gauss_fit ( bandsForFit , sustainedResponseLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = fitParamsLaser [ 0 ] db . at [ dbIndex , <str> ] = fitParamsLaser [ 3 ] db . at [ dbIndex , <str> ] = fitParamsLaser [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = fitParamsLaser [ 1 ] db . at [ dbIndex , <str> ] = fitParamsLaser [ 2 ] db . at [ dbIndex , <str> ] = R2Laser allFitParamsLaser = [ mFixed ] allFitParamsLaser . extend ( fitParamsLaser ) suppIndLaser , prefBWLaser = fitfuncs . extract_stats_from_fit ( allFitParamsLaser , testBands ) db . at [ dbIndex , <str> ] = suppIndLaser db . at [ dbIndex , <str> ] = prefBWLaser meanLaserDiff = np . mean ( sustainedResponseLaser - sustainedResponseNoLaser ) db . at [ dbIndex , <str> ] = meanLaserDiff laserDiff = sustainedResponseLaser - sustainedResponseNoLaser peakInd = np . argmax ( sustainedResponseNoLaser ) db . at [ dbIndex , <str> ] = laserDiff [ peakInd ] db . at [ dbIndex , <str> ] = laserDiff [ - 1 ] testRespsNoLaser = fitfuncs . diff_gauss_form ( testBands , * allFitParams ) testRespsLaser = fitfuncs . diff_gauss_form ( testBands , * allFitParamsLaser ) laserDiffModel = testRespsLaser - testRespsNoLaser peakIndModel = np . argmax ( testRespsNoLaser ) db . at [ dbIndex , <str> ] = testRespsNoLaser [ peakIndModel ] db . at [ dbIndex , <str> ] = testRespsLaser [ peakIndModel ] db . at [ dbIndex , <str> ] = laserDiffModel [ peakIndModel ] db . at [ dbIndex , <str> ] = testRespsNoLaser [ - 1 ] db . at [ dbIndex , <str> ] = testRespsLaser [ - 1 ] db . at [ dbIndex , <str> ] = laserDiffModel [ - 1 ] noZeroSustainedResponseNoLaser = sustainedSpikeArray [ 1 : , 0 ] bandsForFitNoZero = bandsForFit [ 1 : ] noZeroFitParamsNoLaser , noZeroR2 = fitfuncs . diff_of_gauss_fit ( bandsForFitNoZero , noZeroSustainedResponseNoLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = noZeroFitParamsNoLaser [ 0 ] db . at [ dbIndex , <str> ] = noZeroFitParamsNoLaser [ 3 ] db . at [ dbIndex , <str> ] = noZeroFitParamsNoLaser [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = noZeroFitParamsNoLaser [ 1 ] db . at [ dbIndex , <str> ] = noZeroFitParamsNoLaser [ 2 ] db . at [ dbIndex , <str> ] = noZeroR2 allFitParamsNoZero = [ mFixed ] allFitParamsNoZero . extend ( noZeroFitParamsNoLaser ) testBandsNoZero = np . linspace ( bandsForFitNoZero [ 0 ] , bandsForFitNoZero [ - 1 ] , 500 ) suppIndNoZero , prefBWNoZero = fitfuncs . extract_stats_from_fit ( allFitParamsNoZero , testBandsNoZero ) db . at [ dbIndex , <str> ] = suppIndNoZero db . at [ dbIndex , <str> ] = prefBWNoZero noZeroSustainedResponseLaser = sustainedSpikeArray [ 1 : , 1 ] bandsForFitNoZero = bandsForFit [ 1 : ] noZeroFitParamsLaser , noZeroR2Laser = fitfuncs . diff_of_gauss_fit ( bandsForFitNoZero , noZeroSustainedResponseLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = noZeroFitParamsLaser [ 0 ] db . at [ dbIndex , <str> ] = noZeroFitParamsLaser [ 3 ] db . at [ dbIndex , <str> ] = noZeroFitParamsLaser [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = noZeroFitParamsLaser [ 1 ] db . at [ dbIndex , <str> ] = noZeroFitParamsLaser [ 2 ] db . at [ dbIndex , <str> ] = noZeroR2Laser allFitParamsNoZeroLaser = [ mFixed ] allFitParamsNoZeroLaser . extend ( noZeroFitParamsLaser ) suppIndNoZeroLaser , prefBWNoZeroLaser = fitfuncs . extract_stats_from_fit ( allFitParamsNoZeroLaser , testBandsNoZero ) db . at [ dbIndex , <str> ] = suppIndNoZeroLaser db . at [ dbIndex , <str> ] = prefBWNoZeroLaser testRespsNoLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , * allFitParamsNoZero ) testRespsLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , * allFitParamsNoZeroLaser ) laserDiffModel = testRespsLaser - testRespsNoLaser peakIndModel = np . argmax ( testRespsNoLaser ) db . at [ dbIndex , <str> ] = laserDiffModel [ peakIndModel ] db . at [ dbIndex , <str> ] = laserDiffModel [ - 1 ] noZeroOnsetResponseNoLaser = onsetSpikeArray [ 1 : , 0 ] bandsForFitNoZero = bandsForFit [ 1 : ] noZeroOnsetFitParamsNoLaser , noZeroOnsetR2 = fitfuncs . diff_of_gauss_fit ( bandsForFitNoZero , noZeroOnsetResponseNoLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsNoLaser [ 0 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsNoLaser [ 3 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsNoLaser [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsNoLaser [ 1 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsNoLaser [ 2 ] db . at [ dbIndex , <str> ] = noZeroOnsetR2 allFitParamsOnsetNoZero = [ mFixed ] allFitParamsOnsetNoZero . extend ( noZeroOnsetFitParamsNoLaser ) testBandsNoZero = np . linspace ( bandsForFitNoZero [ 0 ] , bandsForFitNoZero [ - 1 ] , 500 ) suppIndOnsetNoZero , prefBWOnsetNoZero = fitfuncs . extract_stats_from_fit ( allFitParamsOnsetNoZero , testBandsNoZero ) db . at [ dbIndex , <str> ] = suppIndOnsetNoZero db . at [ dbIndex , <str> ] = prefBWOnsetNoZero noZeroOnsetResponseLaser = onsetSpikeArray [ 1 : , 1 ] bandsForFitNoZero = bandsForFit [ 1 : ] noZeroOnsetFitParamsLaser , noZeroOnsetR2Laser = fitfuncs . diff_of_gauss_fit ( bandsForFitNoZero , noZeroOnsetResponseLaser , mFixed = mFixed ) db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsLaser [ 0 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsLaser [ 3 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsLaser [ 4 ] db . at [ dbIndex , <str> ] = mFixed db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsLaser [ 1 ] db . at [ dbIndex , <str> ] = noZeroOnsetFitParamsLaser [ 2 ] db . at [ dbIndex , <str> ] = noZeroOnsetR2Laser allFitParamsOnsetNoZeroLaser = [ mFixed ] allFitParamsOnsetNoZeroLaser . extend ( noZeroOnsetFitParamsLaser ) suppIndOnsetNoZeroLaser , prefBWOnsetNoZeroLaser = fitfuncs . extract_stats_from_fit ( allFitParamsOnsetNoZeroLaser , testBandsNoZero ) db . at [ dbIndex , <str> ] = suppIndOnsetNoZeroLaser db . at [ dbIndex , <str> ] = prefBWOnsetNoZeroLaser testRespsNoLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , * allFitParamsOnsetNoZero ) testRespsLaser = fitfuncs . diff_gauss_form ( testBandsNoZero , * allFitParamsOnsetNoZeroLaser ) laserDiffModel = testRespsLaser - testRespsNoLaser peakIndModel = np . argmax ( testRespsNoLaser ) db . at [ dbIndex , <str> ] = laserDiffModel [ peakIndModel ] db . at [ dbIndex , <str> ] = laserDiffModel [ - 1 ]  return db   