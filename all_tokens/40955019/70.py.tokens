import os import numpy as np import pandas as pd from jaratoolbox import settings from jaratoolbox import extraplots import figparams import matplotlib . pyplot as plt import scipy . stats as stats import matplotlib import matplotlib . gridspec as gridspec matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 3 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.04 , 0.5 ] labelPosY = [ 0.9 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.15 , right = 0.95 , top = 0.85 , bottom = 0.2 , wspace = 0.5 , hspace = 0.1 ) qualityList = [ 1 , 6 ] ISIcutoff = 0.02 maxZThreshold = 3 switchingFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) switchingFileName = <str> switchingFullPath = os . path . join ( switchingFilePath , switchingFileName ) allcells_switching = pd . read_hdf ( switchingFullPath , key = <str> ) psychometricFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) goodcells_psychometric = ( allcells_psychometric . cellQuality . isin ( qualityList ) ) & ( allcells_psychometric . ISI <= ISIcutoff ) cellInStr = ( allcells_psychometric . cellInStr == 1 ) keepAfterDupTest = allcells_psychometric . keep_after_dup_test responsiveMidFreqs = ( abs ( allcells_psychometric . maxZSoundMid1 ) >= maxZThreshold ) | ( abs ( allcells_psychometric . maxZSoundMid2 ) >= maxZThreshold ) cellsToPlot_psychometric = allcells_psychometric [ goodcells_psychometric & cellInStr & keepAfterDupTest & responsiveMidFreqs ] movementModI_psychometric = cellsToPlot_psychometric . movementModI . values movementModSig_psychometric = cellsToPlot_psychometric . movementModS . values strongerSoundResMid1 = abs ( cellsToPlot_psychometric . maxZSoundMid1 ) > abs ( cellsToPlot_psychometric . maxZSoundMid2 ) soundModI_psychometric = np . r_ [ cellsToPlot_psychometric . modIndexMid1 [ strongerSoundResMid1 ] . values , cellsToPlot_psychometric . modIndexMid2 [ ~ strongerSoundResMid1 ] . values ] soundModSig_psychometric = np . r_ [ cellsToPlot_psychometric . modSigMid1 [ strongerSoundResMid1 ] . values , cellsToPlot_psychometric . modSigMid2 [ ~ strongerSoundResMid1 ] . values ] movementSelectivePsychometric = ( movementModSig_psychometric <= 0.05 ) soundModPsychometric = ( soundModSig_psychometric <= 0.05 ) goodcells_switching = ( allcells_switching . cellQuality . isin ( qualityList ) ) & ( allcells_switching . ISI <= ISIcutoff ) cellInStr = ( allcells_switching . cellInStr == 1 ) keepAfterDupTest = allcells_switching . keep_after_dup_test responsiveMidFreqs = abs ( allcells_switching . maxZSoundMid ) >= maxZThreshold cellsToPlot_switching = allcells_switching [ goodcells_switching & cellInStr & keepAfterDupTest & responsiveMidFreqs ] movementModI_switching = cellsToPlot_switching . movementModI . values movementModSig_switching = cellsToPlot_switching . movementModS . values soundModI_switching = cellsToPlot_switching . modIndex . values soundModSig_switching = cellsToPlot_switching . modSig . values movementSelectiveSwitching = ( movementModSig_switching <= 0.05 ) soundModSwitching = ( soundModSig_switching <= 0.05 ) ax1 = plt . subplot ( gs [ : , 0 ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . plot ( np . abs ( movementModI_psychometric ) , np . abs ( soundModI_psychometric ) , marker = <str> , linestyle = <str> , mec = <str> , mfc = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . title ( <str> ) plt . xlim ( [ - 0.09 , 1.1 ] ) plt . ylim ( [ - 0.09 , 0.7 ] ) extraplots . boxoff ( plt . gca ( ) ) ax2 = plt . subplot ( gs [ : , 1 ] ) ax2 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . plot ( np . abs ( movementModI_switching ) , np . abs ( soundModI_switching ) , marker = <str> , linestyle = <str> , mec = <str> , mfc = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . title ( <str> ) plt . xlim ( [ - 0.09 , 1.1 ] ) plt . ylim ( [ - 0.09 , 0.7 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . show ( ) print <str> , len ( cellsToPlot_psychometric ) print <str> , len ( cellsToPlot_switching ) rPsy , pValPsy = stats . spearmanr ( np . abs ( movementModI_psychometric ) , np . abs ( soundModI_psychometric ) ) print <str> , rPsy , <str> , pValPsy rPsy , pValPsy = stats . spearmanr ( movementModI_psychometric , soundModI_psychometric ) print <str> , rPsy , <str> , pValPsy rSwi , pValSwi = stats . spearmanr ( np . abs ( movementModI_switching ) , np . abs ( soundModI_switching ) ) print <str> , rSwi , <str> , pValSwi rSwi , pValSwi = stats . spearmanr ( movementModI_switching , soundModI_switching ) print <str> , rSwi , <str> , pValSwi if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   