import os import numpy as np import pandas as pd from jaratoolbox import settings import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) scriptFullPath = os . path . realpath ( __file__ ) qualityList = [ 1 , 6 ] ISIcutoff = 0.02 removedDuplicates = True switchingFilePath = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) switchingFileName = <str> switchingFullPath = os . path . join ( switchingFilePath , switchingFileName ) allcells_switching = pd . read_hdf ( switchingFullPath , key = <str> ) psychometricFilePath = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) dataToPlot = { <str> : [ ] , <str> : [ ] , <str> : [ ] } for ind , allcells in enumerate ( [ allcells_switching , allcells_psychometric ] ) :      goodcells = ( allcells . cellQuality . isin ( qualityList ) ) & ( allcells . ISI <= ISIcutoff ) cellInStr = ( allcells . cellInStr == 1 ) keepAfterDupTest = allcells . keep_after_dup_test if removedDuplicates :          allcells = allcells [ goodcells & cellInStr & keepAfterDupTest ]  else :          allcells = allcells [ goodcells & cellInStr ]  sigMod = np . array ( ( allcells . movementModS <= 0.05 ) , dtype = bool ) dataToPlot [ <str> ] . extend ( sigMod ) dataToPlot [ <str> ] . extend ( allcells . animalName ) dataToPlot [ <str> ] . extend ( allcells . movementModI )  if removedDuplicates :      outputFile = <str>  else :      outputFile = <str>  outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , sourcePsychometric = psychometricFilePath , sourceSwitching = switchingFilePath , goodCellQuality = qualityList , script = scriptFullPath , ** dataToPlot )  