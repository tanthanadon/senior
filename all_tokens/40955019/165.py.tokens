import os import numpy as np from collections import Counter import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import colorpalette from scipy import stats import copy import pandas as pd import figparams reload ( figparams ) np . random . seed ( 0 ) selectUntagged = True invertUntaggedSelection = True FIGNAME = <str> SAVE_FIGURE = 1 outputDir = figparams . FIGURE_OUTPUT_DIR figFilename = <str> figFormat = <str> figSize = [ 12 , 8 ] labelPosX = [ 0.04 , 0.48 ] labelPosY = [ 0.48 , 0.95 ] dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbase = pd . read_hdf ( dbPath , key = <str> ) thalColor = figparams . colp [ <str> ] acColor = figparams . colp [ <str> ] fig = plt . gcf ( ) plt . clf ( ) fig . set_facecolor ( <str> ) def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) plt . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  plt . clf ( ) gs = gridspec . GridSpec ( 2 , 3 ) gs . update ( left = 0.12 , right = 0.98 , top = 0.88 , bottom = 0.15 , wspace = 0.52 , hspace = 1 ) features = [ <str> , <str> ] yLabels = [ <str> , <str> , <str> ] dataframe = dbase . query ( <str> ) taggedBool = ( dataframe [ <str> ] < 0.05 ) & ( dataframe [ <str> ] > 0.8 ) taggedCells = dataframe [ taggedBool ] untaggedCells = dataframe [ ~ taggedBool ] if selectUntagged :      sameShankAs = { 1 : 2 , 2 : 1 , 3 : 4 , 4 : 3 , 5 : 6 , 6 : 5 , 7 : 8 , 8 : 7 } untaggedCellsSSA = copy . deepcopy ( untaggedCells ) newTetrode = [ sameShankAs [ tt ] for tt in untaggedCellsSSA [ <str> ] ] untaggedCellsSSA [ <str> ] = newTetrode for indRow , row in untaggedCells . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) untaggedCells . loc [ indRow , <str> ] = idString  for indRow , row in taggedCells . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) taggedCells . loc [ indRow , <str> ] = idString  for indRow , row in untaggedCellsSSA . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) untaggedCellsSSA . loc [ indRow , <str> ] = idString  untaggedBool = ( untaggedCells [ <str> ] . isin ( taggedCells [ <str> ] ) | untaggedCellsSSA [ <str> ] . isin ( taggedCells [ <str> ] ) ) if not invertUntaggedSelection :          untaggedCells = untaggedCells [ untaggedBool ]  elif invertUntaggedSelection :          untaggedCells = untaggedCells [ ~ untaggedBool ]   rowX = 0 for indFeature , feature in enumerate ( features ) :      ax = plt . subplot ( gs [ rowX , indFeature ] ) if indFeature == 0 :          dataTagged = taggedCells [ feature ] [ pd . notnull ( taggedCells [ feature ] ) ] dataTagged = dataTagged [ dataTagged > 0 ] dataTagged = np . log ( dataTagged ) dataUntagged = untaggedCells [ feature ] [ pd . notnull ( untaggedCells [ feature ] ) ] dataUntagged = dataUntagged [ dataUntagged > 0 ] dataUntagged = np . log ( dataUntagged ) ytickLabels = [ 4 , 8 , 16 , 32 , 64 , 128 ] yticks = np . log ( ytickLabels )  elif indFeature == 1 :          dataTagged = taggedCells [ feature ] [ pd . notnull ( taggedCells [ feature ] ) ] dataTagged [ dataTagged < 0 ] = 0 dataUntagged = untaggedCells [ feature ] [ pd . notnull ( untaggedCells [ feature ] ) ] dataUntagged [ dataUntagged < 0 ] = 0  posTagged = jitter ( np . ones ( len ( dataTagged ) ) * 0 , 0.20 ) posUntagged = jitter ( np . ones ( len ( dataUntagged ) ) * 1 , 0.20 ) ax . plot ( posTagged , dataTagged , <str> , mec = <str> , mfc = <str> ) medline ( np . median ( dataTagged ) , 0 , 0.5 ) ax . plot ( posUntagged , dataUntagged , <str> , mec = <str> , mfc = <str> ) medline ( np . median ( dataUntagged ) , 1 , 0.5 ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataTagged ) ) , <str> . format ( len ( dataUntagged ) ) ] ) ax . set_ylabel ( yLabels [ indFeature ] ) if indFeature == 0 :          ax . set_yticks ( yticks ) ax . set_yticklabels ( ytickLabels )  extraplots . boxoff ( ax ) zVal , pVal = stats . mannwhitneyu ( dataTagged , dataUntagged ) plt . title ( <str> . format ( pVal ) )  axSummary = plt . subplot ( gs [ rowX , 2 ] ) possibleFreqKeys = [ 4 , 5 , 8 , 11 , 16 , 22 , 32 , 45 , 64 , 90 , 128 ] keys = [ <str> . format ( rate ) for rate in possibleFreqKeys ] dataTagged = np . full ( ( len ( taggedCells ) , len ( possibleFreqKeys ) ) , np . nan ) dataUntagged = np . full ( ( len ( untaggedCells ) , len ( possibleFreqKeys ) ) , np . nan ) for externalInd , ( indRow , row ) in enumerate ( taggedCells . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataTagged [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( untaggedCells . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataUntagged [ externalInd , indKey ] = row [ key ]   dataTagged [ dataTagged < 0 ] = 0 dataUntagged [ dataUntagged < 0 ] = 0 allPval = [ ] for indCol , freqKey in enumerate ( possibleFreqKeys ) :      dataTaggedThisFreq = dataTagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataTagged [ : , indCol ] ) ) ] dataUntaggedThisFreq = dataUntagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataUntagged [ : , indCol ] ) ) ] zStat , pVal = stats . ranksums ( dataTaggedThisFreq , dataUntaggedThisFreq ) allPval . append ( int ( pVal < 0.05 ) ) print <str> . format ( freqKey , pVal )  taggedMean = np . nanmean ( dataTagged , axis = 0 ) taggedStd = np . nanstd ( dataTagged , axis = 0 ) untaggedMean = np . nanmean ( dataUntagged , axis = 0 ) untaggedStd = np . nanstd ( dataUntagged , axis = 0 ) numTagged = sum ( np . logical_not ( np . isnan ( dataTagged [ : , 0 ] ) ) ) numUntagged = sum ( np . logical_not ( np . isnan ( dataUntagged [ : , 0 ] ) ) ) axSummary . plot ( taggedMean , <str> , color = <str> , label = <str> . format ( numTagged ) ) plt . hold ( 1 ) axSummary . plot ( untaggedMean , <str> , color = <str> , label = <str> . format ( numUntagged ) ) axSummary . set_xticks ( range ( len ( possibleFreqKeys ) ) [ : : 2 ] ) axSummary . set_xticklabels ( possibleFreqKeys [ : : 2 ] ) axSummary . set_xlabel ( <str> ) for indRate , significant in enumerate ( allPval ) :      if significant :          axSummary . plot ( indRate , np . mean ( [ untaggedMean [ indRate ] , taggedMean [ indRate ] ] ) , <str> )   axSummary . set_ylabel ( <str> ) extraplots . boxoff ( axSummary ) axSummary . legend ( ) dataframe = dbase . query ( <str> ) taggedBool = ( dataframe [ <str> ] < 0.05 ) & ( dataframe [ <str> ] > 0.8 ) taggedCells = dataframe [ taggedBool ] untaggedCells = dataframe [ ~ taggedBool ] if selectUntagged :      sameShankAs = { 1 : 2 , 2 : 1 , 3 : 4 , 4 : 3 , 5 : 6 , 6 : 5 , 7 : 8 , 8 : 7 } untaggedCellsSSA = copy . deepcopy ( untaggedCells ) newTetrode = [ sameShankAs [ tt ] for tt in untaggedCellsSSA [ <str> ] ] untaggedCellsSSA [ <str> ] = newTetrode for indRow , row in untaggedCells . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) untaggedCells . loc [ indRow , <str> ] = idString  for indRow , row in taggedCells . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) taggedCells . loc [ indRow , <str> ] = idString  for indRow , row in untaggedCellsSSA . iterrows ( ) :          idString = <str> . format ( row [ <str> ] , row [ <str> ] , row [ <str> ] , row [ <str> ] ) untaggedCellsSSA . loc [ indRow , <str> ] = idString  untaggedBool = ( untaggedCells [ <str> ] . isin ( taggedCells [ <str> ] ) | untaggedCellsSSA [ <str> ] . isin ( taggedCells [ <str> ] ) ) if not invertUntaggedSelection :          untaggedCells = untaggedCells [ untaggedBool ]  elif invertUntaggedSelection :          untaggedCells = untaggedCells [ ~ untaggedBool ]   rowX = 1 for indFeature , feature in enumerate ( features ) :      if indFeature == 0 :          dataTagged = taggedCells [ feature ] [ pd . notnull ( taggedCells [ feature ] ) ] dataTagged = dataTagged [ dataTagged > 0 ] dataTagged = np . log ( dataTagged ) dataUntagged = untaggedCells [ feature ] [ pd . notnull ( untaggedCells [ feature ] ) ] dataUntagged = dataUntagged [ dataUntagged > 0 ] dataUntagged = np . log ( dataUntagged ) ytickLabels = [ 4 , 8 , 16 , 32 , 64 , 128 ] yticks = np . log ( ytickLabels )  elif indFeature == 1 :          dataTagged = taggedCells [ feature ] [ pd . notnull ( taggedCells [ feature ] ) ] dataTagged [ dataTagged < 0 ] = 0 dataUntagged = untaggedCells [ feature ] [ pd . notnull ( untaggedCells [ feature ] ) ] dataUntagged [ dataUntagged < 0 ] = 0  else :          dataTagged = taggedCells [ feature ] [ pd . notnull ( taggedCells [ feature ] ) ] dataUntagged = untaggedCells [ feature ] [ pd . notnull ( untaggedCells [ feature ] ) ]  ax = plt . subplot ( gs [ rowX , indFeature ] ) posTagged = jitter ( np . ones ( len ( dataTagged ) ) * 0 , 0.20 ) posUntagged = jitter ( np . ones ( len ( dataUntagged ) ) * 1 , 0.20 ) ax . plot ( posTagged , dataTagged , <str> , mec = <str> , mfc = <str> ) plt . hold ( 1 ) medline ( np . median ( dataTagged ) , 0 , 0.5 ) ax . plot ( posUntagged , dataUntagged , <str> , mec = <str> , mfc = <str> ) plt . hold ( 1 ) medline ( np . median ( dataUntagged ) , 1 , 0.5 ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataTagged ) ) , <str> . format ( len ( dataUntagged ) ) ] ) ax . set_ylabel ( yLabels [ indFeature ] ) if indFeature == 0 :          ax . set_yticks ( yticks ) ax . set_yticklabels ( ytickLabels )  extraplots . boxoff ( ax ) zVal , pVal = stats . mannwhitneyu ( dataTagged , dataUntagged ) plt . title ( <str> . format ( pVal ) )  axSummary = plt . subplot ( gs [ rowX , 2 ] ) possibleFreqKeys = [ 4 , 5 , 8 , 11 , 16 , 22 , 32 , 45 , 64 , 90 , 128 ] keys = [ <str> . format ( rate ) for rate in possibleFreqKeys ] dataTagged = np . full ( ( len ( taggedCells ) , len ( possibleFreqKeys ) ) , np . nan ) dataUntagged = np . full ( ( len ( untaggedCells ) , len ( possibleFreqKeys ) ) , np . nan ) for externalInd , ( indRow , row ) in enumerate ( taggedCells . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataTagged [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( untaggedCells . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataUntagged [ externalInd , indKey ] = row [ key ]   dataTagged [ dataTagged < 0 ] = 0 dataUntagged [ dataUntagged < 0 ] = 0 allPval = [ ] for indCol , freqKey in enumerate ( possibleFreqKeys ) :      dataTaggedThisFreq = dataTagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataTagged [ : , indCol ] ) ) ] dataUntaggedThisFreq = dataUntagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataUntagged [ : , indCol ] ) ) ] zStat , pVal = stats . ranksums ( dataTaggedThisFreq , dataUntaggedThisFreq ) allPval . append ( int ( pVal < 0.05 ) ) print <str> . format ( freqKey , pVal )  taggedMean = np . nanmean ( dataTagged , axis = 0 ) taggedStd = np . nanstd ( dataTagged , axis = 0 ) untaggedMean = np . nanmean ( dataUntagged , axis = 0 ) untaggedStd = np . nanstd ( dataUntagged , axis = 0 ) numTagged = sum ( np . logical_not ( np . isnan ( dataTagged [ : , 0 ] ) ) ) numUntagged = sum ( np . logical_not ( np . isnan ( dataUntagged [ : , 0 ] ) ) ) axSummary . plot ( taggedMean , <str> , color = <str> , label = <str> . format ( numTagged ) ) plt . hold ( 1 ) axSummary . plot ( untaggedMean , <str> , color = <str> , label = <str> . format ( numUntagged ) ) axSummary . set_xticks ( range ( len ( possibleFreqKeys ) ) [ : : 2 ] ) axSummary . set_xticklabels ( possibleFreqKeys [ : : 2 ] ) axSummary . set_xlabel ( <str> ) for indRate , significant in enumerate ( allPval ) :      if significant :          axSummary . plot ( indRate , np . mean ( [ untaggedMean [ indRate ] , taggedMean [ indRate ] ] ) , <str> )   axSummary . set_ylabel ( <str> ) extraplots . boxoff ( axSummary ) axSummary . legend ( ) ax . annotate ( <str> , xy = ( 0.04 , 0.875 ) , xycoords = <str> , fontsize = 14 , fontweight = <str> , color = thalColor ) ax . annotate ( <str> , xy = ( 0.04 , 0.45 ) , xycoords = <str> , fontsize = 14 , fontweight = <str> , color = acColor ) labelPosX = [ 0.04 , 0.4 , 0.7 ] labelPosY = [ 0.49 , 0.92 ] fontSizePanel = figparams . fontSizePanel ax . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   