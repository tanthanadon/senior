import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as patches import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 3 ] PANELS = [ 1 , 1 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel fontSizeLegend = figparams . fontSizeLegend labelPosX = [ 0.01 , 0.31 , 0.67 ] labelPosY = [ 0.94 ] dataFileName = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 3 , width_ratios = [ 1 , 1.3 , 1.3 ] ) gs . update ( top = 0.94 , bottom = 0.15 , left = 0.08 , right = 0.98 , wspace = 0.45 , hspace = 0.2 ) dataFullPath = os . path . join ( dataDir , dataFileName ) data = np . load ( dataFullPath ) PVNoLaser = data [ <str> ] PVLaser = data [ <str> ] noPVChange = 100.0 * ( PVLaser - PVNoLaser ) / PVNoLaser notNanInds = np . where ( np . isfinite ( noPVChange ) ) noPVChange = noPVChange [ notNanInds ] controlPVNoLaser = data [ <str> ] controlPVLaser = data [ <str> ] controlPVChange = 100.0 * ( controlPVLaser - controlPVNoLaser ) / controlPVNoLaser SOMNoLaser = data [ <str> ] SOMLaser = data [ <str> ] noSOMChange = 100.0 * ( SOMLaser - SOMNoLaser ) / SOMNoLaser notNanInds = np . where ( np . isfinite ( noSOMChange ) ) noSOMChange = noSOMChange [ notNanInds ] controlSOMNoLaser = data [ <str> ] controlSOMLaser = data [ <str> ] controlSOMChange = 100.0 * ( controlSOMLaser - controlSOMNoLaser ) / controlSOMNoLaser excColor = figparams . colp [ <str> ] PVcolour = figparams . colp [ <str> ] SOMcolour = figparams . colp [ <str> ] if PANELS [ 0 ] :      panelLabel = <str> cellLabels = [ <str> , <str> ] axBar = plt . subplot ( gs [ 0 , 0 ] ) controlData = [ controlPVChange , controlSOMChange ] laserData = [ noPVChange , noSOMChange ] plt . hold ( True ) ind = np . arange ( 2 ) width = 0.35 controlMeans = [ np . mean ( controlData [ 0 ] ) , np . mean ( controlData [ 1 ] ) ] controlSEMs = [ stats . sem ( controlData [ 0 ] ) , stats . sem ( controlData [ 1 ] ) ] axBar . bar ( ind , controlMeans , width , color = <str> , edgecolor = excColor , linewidth = 3 ) plt . errorbar ( ind + width / 2 , controlMeans , yerr = [ controlSEMs , controlSEMs ] , fmt = <str> , ecolor = excColor , lw = 1.5 , capsize = 5 ) laserMeans = [ np . mean ( laserData [ 0 ] ) , np . mean ( laserData [ 1 ] ) ] laserSEMs = [ stats . sem ( laserData [ 0 ] ) , stats . sem ( laserData [ 1 ] ) ] axBar . bar ( ind + width , laserMeans , width , edgecolor = [ PVcolour , SOMcolour ] , color = <str> , linewidth = 3 ) plt . errorbar ( ind [ 0 ] + 3 * width / 2 , laserMeans [ 0 ] , yerr = [ laserSEMs [ 0 ] ] , fmt = <str> , ecolor = PVcolour , lw = 1.5 , capsize = 5 ) plt . errorbar ( ind [ 1 ] + 3 * width / 2 , laserMeans [ 1 ] , yerr = [ laserSEMs [ 1 ] ] , fmt = <str> , ecolor = SOMcolour , lw = 1.5 , capsize = 5 ) axBar . set_xticks ( ind + width ) axBar . set_xticklabels ( cellLabels ) extraplots . boxoff ( axBar ) legendXY = [ 0.9 , 170 ] ExcPatch = patches . Rectangle ( ( legendXY [ 0 ] + 0.1 , legendXY [ 1 ] + 18 ) , 0.33 , 8 , facecolor = <str> , edgecolor = excColor , linewidth = 3 ) PVpatch = patches . Rectangle ( ( legendXY [ 0 ] + 0.1 , legendXY [ 1 ] ) , 0.15 , 8 , facecolor = <str> , edgecolor = PVcolour , linewidth = 3 ) SOMpatch = patches . Rectangle ( ( legendXY [ 0 ] + 0.29 , legendXY [ 1 ] ) , 0.15 , 8 , facecolor = <str> , edgecolor = SOMcolour , linewidth = 3 ) axBar . add_patch ( ExcPatch ) axBar . add_patch ( PVpatch ) axBar . add_patch ( SOMpatch ) axBar . annotate ( <str> , ( legendXY [ 0 ] + 0.6 , legendXY [ 1 ] + 18 ) , fontsize = fontSizeLabels ) axBar . annotate ( <str> , ( legendXY [ 0 ] + 0.6 , legendXY [ 1 ] ) , fontsize = fontSizeLabels ) plt . plot ( [ - 5 , 5 ] , [ 0 , 0 ] , <str> , zorder = - 10 ) plt . ylabel ( <str> ) plt . ylim ( - 20 , 210 ) plt . xlim ( - 0.1 , 1.8 ) pNoPV = stats . ranksums ( controlPVChange , noPVChange ) [ 1 ] pNoSOM = stats . ranksums ( controlSOMChange , noSOMChange ) [ 1 ] print <str> . format ( pNoPV , pNoSOM ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ ind [ 0 ] + width / 2 , ind [ 0 ] + 3 * width / 2 ] , yLims [ 1 ] * 0.94 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) extraplots . significance_stars ( [ ind [ 1 ] + width / 2 , ind [ 1 ] + 3 * width / 2 ] , yLims [ 1 ] * 0.55 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) axBar . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if PANELS [ 1 ] :      panelLabels = [ <str> , <str> ] cellLabels = [ <str> , <str> ] cellTypeData = [ [ PVNoLaser , PVLaser ] , [ SOMNoLaser , SOMLaser ] ] controlCellTypeData = [ [ controlPVNoLaser , controlPVLaser ] , [ controlSOMNoLaser , controlSOMLaser ] ] cellTypeColours = [ PVcolour , SOMcolour ] for indType in range ( 2 ) :          axScatter = plt . subplot ( gs [ 0 , indType + 1 ] ) laserData = cellTypeData [ indType ] controlData = controlCellTypeData [ indType ] plt . hold ( True ) plt . scatter ( laserData [ 0 ] , laserData [ 1 ] , edgecolors = cellTypeColours [ indType ] , facecolors = <str> , s = 15 , label = cellLabels [ indType ] ) plt . scatter ( controlData [ 0 ] , controlData [ 1 ] , edgecolors = excColor , facecolors = excColor , s = 15 , label = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . legend ( scatterpoints = 1 , loc = <str> , fontsize = fontSizeLegend , numpoints = 1 , handlelength = 0.3 , markerscale = 1.5 ) axScatter . set_xscale ( <str> , basex = 10 ) axScatter . set_yscale ( <str> , basex = 10 ) plt . plot ( [ - 5 , 100 ] , [ - 5 , 100 ] , <str> ) plt . xlim ( 0.05 , 100 ) plt . ylim ( 0.05 , 100 ) axScatter . tick_params ( top = False , right = False , which = <str> ) ticks = [ 0.1 , 1 , 10 , 100 ] axScatter . set_xticks ( ticks ) axScatter . set_xticklabels ( ticks ) axScatter . set_yticks ( ticks ) axScatter . set_yticklabels ( ticks ) extraplots . boxoff ( axScatter ) axScatter . set ( adjustable = <str> , aspect = <str> ) axScatter . annotate ( panelLabels [ indType ] , xy = ( labelPosX [ indType + 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) pControl = stats . wilcoxon ( controlData [ 0 ] , controlData [ 1 ] ) [ 1 ] pLaser = stats . wilcoxon ( laserData [ 0 ] , laserData [ 1 ] ) [ 1 ] print <str> . format ( cellLabels [ indType ] , pControl , pLaser )   if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    