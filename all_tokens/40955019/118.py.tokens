import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) exampleDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 8 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.01 , 0.47 ] labelPosY = [ 0.96 , 0.65 , 0.34 , 0.5 ] PVFileName = <str> SOMFileName = <str> ExcFileName = <str> summaryFileName = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 6 , 2 , width_ratios = [ 1 , 1.2 ] ) gs . update ( top = 0.95 , bottom = 0.08 , left = 0.08 , right = 0.95 , wspace = 0.4 , hspace = 0.7 ) if PANELS [ 0 ] :      ExcFile = <str> + ExcFileName ExcDataFullPath = os . path . join ( exampleDataDir , ExcFile ) ExcData = np . load ( ExcDataFullPath ) ExcSustainedResponseArray = ExcData [ <str> ] ExcSustainedError = ExcData [ <str> ] ExcFitCurve = ExcData [ <str> ] ExcSI = ExcData [ <str> ] . tolist ( ) ExcBaseline = ExcData [ <str> ] [ 0 ] PVFile = <str> + PVFileName PVDataFullPath = os . path . join ( exampleDataDir , PVFile ) PVData = np . load ( PVDataFullPath ) PVsustainedResponseArray = PVData [ <str> ] PVsustainedError = PVData [ <str> ] PVFitCurve = PVData [ <str> ] PVSI = PVData [ <str> ] . tolist ( ) PVBaseline = PVData [ <str> ] [ 0 ] SOMFile = <str> + SOMFileName SOMDataFullPath = os . path . join ( exampleDataDir , SOMFile ) SOMData = np . load ( SOMDataFullPath ) SOMsustainedResponseArray = SOMData [ <str> ] SOMsustainedError = SOMData [ <str> ] SOMFitCurve = SOMData [ <str> ] SOMSI = SOMData [ <str> ] . tolist ( ) SOMBaseline = SOMData [ <str> ] [ 0 ] bands = PVData [ <str> ] fitBands = PVData [ <str> ] sustainedResponses = [ ExcSustainedResponseArray , PVsustainedResponseArray , SOMsustainedResponseArray ] sustainedErrors = [ ExcSustainedError , PVsustainedError , SOMsustainedError ] fitResponses = [ ExcFitCurve , PVFitCurve , SOMFitCurve ] SIs = [ ExcSI , PVSI , SOMSI ] baselines = [ ExcBaseline , PVBaseline , SOMBaseline ] ExColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ ExColor , PVColor , SOMColor ] panelLabels = [ <str> , <str> , <str> ] for indCell , responseByCell in enumerate ( sustainedResponses ) :          plt . hold ( 1 ) axCurve = plt . subplot ( gs [ 2 * indCell : 2 * indCell + 2 , 0 ] ) axCurve . set_xscale ( <str> , basex = 2 , linthreshx = 0.25 , linscalex = 0.5 ) plt . plot ( bands , responseByCell , <str> , ms = 5 , color = cellTypeColours [ indCell ] , mec = cellTypeColours [ indCell ] , clip_on = False ) plt . errorbar ( bands , responseByCell , yerr = [ sustainedErrors [ indCell ] , sustainedErrors [ indCell ] ] , fmt = <str> , ecolor = cellTypeColours [ indCell ] , lw = 1.5 , capsize = 5 ) plt . plot ( [ bands [ 0 ] , bands [ - 1 ] ] , np . tile ( baselines [ indCell ] , 2 ) , <str> , color = <str> , lw = 2 ) plt . plot ( fitBands , fitResponses [ indCell ] , <str> , lw = 1.5 , color = cellTypeColours [ indCell ] ) axCurve . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 0 ] , labelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axCurve . set_xticks ( bands ) axCurve . set_ylim ( bottom = 0 ) extraplots . boxoff ( axCurve ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) axCurve . tick_params ( top = False , right = False , which = <str> ) if indCell != 2 :              axCurve . set_xticklabels ( <str> )  else :              bandLabels = bands . tolist ( ) bandLabels [ - 1 ] = <str> bandLabels [ 1 : : 2 ] = [ <str> ] * len ( bands [ 1 : : 2 ] ) axCurve . set_xticklabels ( bandLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels )  plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( - 0.1 , 7 )   if PANELS [ 1 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedSuppression = summaryData [ <str> ] SOMsustainedSuppression = summaryData [ <str> ] ACsustainedSuppression = summaryData [ <str> ] sustainedSuppressionVals = [ ACsustainedSuppression , PVsustainedSuppression , SOMsustainedSuppression ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs [ : 3 , 1 ] ) plt . hold ( 1 ) for category in range ( len ( sustainedSuppressionVals ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( sustainedSuppressionVals [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , sustainedSuppressionVals [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( sustainedSuppressionVals [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( sustainedSuppressionVals ) + 1 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( sustainedSuppressionVals ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 3 ] , yLims [ 1 ] * 1.07 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 1.03 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) plt . hold ( 0 ) ExcPV = stats . ranksums ( ACsustainedSuppression , PVsustainedSuppression ) [ 1 ] ExcSOM = stats . ranksums ( ACsustainedSuppression , SOMsustainedSuppression ) [ 1 ] PVSOM = stats . ranksums ( PVsustainedSuppression , SOMsustainedSuppression ) [ 1 ] print <str> . format ( ExcPV , ExcSOM , PVSOM )  if PANELS [ 2 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedPrefBW = summaryData [ <str> ] SOMsustainedPrefBW = summaryData [ <str> ] ACsustainedPrefBW = summaryData [ <str> ] prefBandwidths = [ ACsustainedPrefBW , PVsustainedPrefBW , SOMsustainedPrefBW ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs [ 3 : , 1 ] ) plt . hold ( 1 ) axScatter . set_yscale ( <str> , basey = 2 , linthreshy = 0.25 , linscaley = 0.5 ) plt . hold ( True ) for category in range ( len ( prefBandwidths ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( prefBandwidths [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . plot ( xval , prefBandwidths [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( prefBandwidths [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 3 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( prefBandwidths ) + 1 ) plt . ylim ( - 0.05 , 7 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( prefBandwidths ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) axScatter . set_yticks ( bands ) axScatter . set_yticklabels ( bandLabels ) axScatter . tick_params ( top = False , right = False , which = <str> ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 3 ] , yLims [ 1 ] * 1.05 , yLims [ 1 ] * 0.1 , gapFactor = 0.25 ) plt . hold ( 0 ) ExcPV = stats . ranksums ( ACsustainedPrefBW , PVsustainedPrefBW ) [ 1 ] ExcSOM = stats . ranksums ( ACsustainedPrefBW , SOMsustainedPrefBW ) [ 1 ] PVSOM = stats . ranksums ( PVsustainedPrefBW , SOMsustainedPrefBW ) [ 1 ] print <str> . format ( ExcPV , ExcSOM , PVSOM )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    