import os import numpy as np from scipy import stats from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import ephyscore from jaratoolbox import celldatabase from jaratoolbox import settings import studyparams import figparams dbFilename = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbFilename ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , <str> , figName ) BAND_USED = 1 cellList = [ { <str> : <str> , <str> : <str> , <str> : 1450 , <str> : 5 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 1300 , <str> : 4 , <str> : 4 } ] cellTypes = [ <str> , <str> ] for indCell , oneCell in enumerate ( cellList ) :      cellInd , dbRow = celldatabase . find_cell ( db , ** oneCell ) cell = ephyscore . Cell ( dbRow ) bandEphysData , bandBData = cell . load_by_index ( int ( dbRow [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) LaserEachTrial = bandBData [ <str> ] numLaser = np . unique ( LaserEachTrial ) bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , LaserEachTrial , numLaser ) bandTimeRange = [ - 0.5 , 1.5 ] binsize = 50 bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , [ bandTimeRange [ 0 ] - binsize , bandTimeRange [ 1 ] ] ) binEdges = np . around ( np . arange ( bandTimeRange [ 0 ] - ( binsize / 1000.0 ) , bandTimeRange [ 1 ] + 2 * ( binsize / 1000.0 ) , ( binsize / 1000.0 ) ) , decimals = 2 ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , binEdges ) trialsThisBand = bandTrialsEachCond [ : , BAND_USED , : ] controlSpikeCounts = spikeCountMat [ trialsThisBand [ : , 0 ] ] laserSpikeCounts = spikeCountMat [ trialsThisBand [ : , 1 ] ] controlPSTH = np . mean ( controlSpikeCounts , axis = 0 ) / ( binsize / 1000.0 ) laserPSTH = np . mean ( laserSpikeCounts , axis = 0 ) / ( binsize / 1000.0 ) outputFile = <str> . format ( cellTypes [ indCell ] , dbRow [ <str> ] , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , bandwidth = BAND_USED , possibleLasers = numLaser , spikeTimesFromEventOnset = bandSpikeTimesFromEventOnset , indexLimitsEachTrial = bandIndexLimitsEachTrial , trialsEachCond = trialsThisBand , rasterTimeRange = bandTimeRange , PSTHbins = binEdges [ 1 : - 2 ] , controlPSTH = controlPSTH [ 1 : - 1 ] , laserPSTH = laserPSTH [ 1 : - 1 ] ) print outputFile + <str>  singleUnits = db . query ( studyparams . SINGLE_UNITS_INACTIVATION ) goodCells = singleUnits . query ( <str> . format ( studyparams . SPIKE_QUALITY_THRESHOLD ) ) bestCells = goodCells . query ( <str> . format ( studyparams . SOUND_RESPONSE_PVAL ) ) bestCells = bestCells . query ( <str> ) noPVCells = bestCells . loc [ bestCells [ <str> ] . isin ( studyparams . PV_ARCHT_MICE ) ] noSOMCells = bestCells . loc [ bestCells [ <str> ] . isin ( studyparams . SOM_ARCHT_MICE ) ] cellTypes = [ noPVCells , noSOMCells ] soundResponses = [ [ np . zeros ( len ( noPVCells ) ) , np . zeros ( len ( noPVCells ) ) ] , [ np . zeros ( len ( noSOMCells ) ) , np . zeros ( len ( noSOMCells ) ) ] ] laserOnsetResponses = [ [ np . zeros ( len ( noPVCells ) ) , np . zeros ( len ( noPVCells ) ) ] , [ np . zeros ( len ( noSOMCells ) ) , np . zeros ( len ( noSOMCells ) ) ] ] soundpVals = [ np . zeros ( len ( noPVCells ) ) , np . zeros ( len ( noSOMCells ) ) ] laserOnsetpVals = [ np . zeros ( len ( noPVCells ) ) , np . zeros ( len ( noSOMCells ) ) ] for indType , cells in enumerate ( cellTypes ) :      for indCell , ( dbIndex , dbRow ) in enumerate ( cells . iterrows ( ) ) :          cell = ephyscore . Cell ( dbRow ) bandEphysData , bandBData = cell . load_by_index ( int ( dbRow [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) LaserEachTrial = bandBData [ <str> ] numLaser = np . unique ( LaserEachTrial ) bandTimeRange = [ - 0.5 , 1.5 ] bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , LaserEachTrial , numLaser ) bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , bandTimeRange ) sustainedTimeRange = [ 0.2 , 1.0 ] sustainedDuration = sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] sustainedSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , sustainedTimeRange ) laserOnsetTimeRange = [ - 0.1 , - 0.05 ] laserOnsetDuration = laserOnsetTimeRange [ 1 ] - laserOnsetTimeRange [ 0 ] laserSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , laserOnsetTimeRange ) trialsThisBand = bandTrialsEachCond [ : , BAND_USED , : ] soundCounts = [ ] laserCounts = [ ] for laser in range ( len ( numLaser ) ) :              trialsThisLaser = trialsThisBand [ : , laser ] if sustainedSpikeCountMat . shape [ 0 ] != len ( trialsThisLaser ) :                  sustainedSpikeCountMat = sustainedSpikeCountMat [ : - 1 , : ] laserSpikeCountMat = laserSpikeCountMat [ : - 1 , : ]  if any ( trialsThisLaser ) :                  thisLaserSustainedCounts = sustainedSpikeCountMat [ trialsThisLaser ] . flatten ( ) soundCounts . append ( thisLaserSustainedCounts ) thisLaserLaserCounts = laserSpikeCountMat [ trialsThisLaser ] . flatten ( ) laserCounts . append ( thisLaserLaserCounts ) soundResponses [ indType ] [ laser ] [ indCell ] = np . mean ( thisLaserSustainedCounts ) / sustainedDuration laserOnsetResponses [ indType ] [ laser ] [ indCell ] = np . mean ( thisLaserLaserCounts ) / laserOnsetDuration   soundpVal = stats . ranksums ( soundCounts [ 0 ] , soundCounts [ 1 ] ) [ 1 ] soundpVals [ indType ] [ indCell ] = soundpVal laserpVal = stats . ranksums ( laserCounts [ 0 ] , laserCounts [ 1 ] ) [ 1 ] laserOnsetpVals [ indType ] [ indCell ] = laserpVal   outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , PVcontrolResponses = soundResponses [ 0 ] [ 0 ] , PVlaserResponses = soundResponses [ 0 ] [ 1 ] , SOMcontrolResponses = soundResponses [ 1 ] [ 0 ] , SOMlaserResponses = soundResponses [ 1 ] [ 1 ] , PVpVals = soundpVals [ 0 ] , SOMpVals = soundpVals [ 1 ] , PVcontrolLaserOnset = laserOnsetResponses [ 0 ] [ 0 ] , PVlaserOnset = laserOnsetResponses [ 0 ] [ 1 ] , SOMcontrolLaserOnset = laserOnsetResponses [ 1 ] [ 0 ] , SOMlaserOnset = laserOnsetResponses [ 1 ] [ 1 ] , PVlaserOnsetpVals = laserOnsetpVals [ 0 ] , SOMlaserOnsetpVals = laserOnsetpVals [ 1 ] , ) print outputFile + <str>   