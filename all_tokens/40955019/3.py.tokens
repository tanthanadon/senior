import os import numpy as np import pandas as pd from jaratoolbox import settings from jaratoolbox import behavioranalysis import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  scriptFullPath = os . path . realpath ( __file__ ) animalName = [ <str> ] sessionsDict = { <str> : [ <str> , <str> ] , <str> : [ <str> , <str> ] } resultsDict = { } for mouse in animalName :      resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] for hemi , sessions in sessionsDict . items ( ) :          for session in sessions :              session = session + <str> stimHemi = hemi bdata = behavioranalysis . load_many_sessions ( mouse , [ session ] ) trialType = bdata [ <str> ] stimTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] stimLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( trialType , stimTypes ) choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) if stimHemi == <str> :                  validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] choiceRightControl = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRightStim = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] percentRightChoiceControl = sum ( choiceRightControl & validTrialsControl ) / float ( sum ( validTrialsControl ) ) percentRightChoiceStim = sum ( choiceRightStim & validTrialsStim ) / float ( sum ( validTrialsStim ) ) percentChangeRightChoice = percentRightChoiceStim - percentRightChoiceControl resultsDict [ mouse + <str> ] . append ( percentChangeRightChoice ) resultsDict [ mouse + <str> ] . append ( session )  elif stimHemi == <str> :                  validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] choiceRightControl = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRightStim = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] percentRightChoiceControl = sum ( choiceRightControl & validTrialsControl ) / float ( sum ( validTrialsControl ) ) percentRightChoiceStim = sum ( choiceRightStim & validTrialsStim ) / float ( sum ( validTrialsStim ) ) percentChangeRightChoice = percentRightChoiceStim - percentRightChoiceControl resultsDict [ mouse + <str> ] . append ( percentChangeRightChoice ) resultsDict [ mouse + <str> ] . append ( session )     outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , script = scriptFullPath , ** resultsDict )  