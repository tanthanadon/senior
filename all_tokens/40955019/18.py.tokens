import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . lines as mlines import scipy . stats as stats import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 labelPosX = [ 0.02 , 0.54 ] labelPosY = [ 0.95 , 0.48 ] PHOTOSTIMCOLORS = { <str> : <str> , <str> : figparams . colp [ <str> ] , <str> : figparams . colp [ <str> ] } SHAPESEACHANIMAL = { <str> : <str> , <str> : <str> , <str> : <str> } fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 4 ) gs . update ( left = 0.12 , right = 0.98 , top = 0.95 , bottom = 0.1 , wspace = 1.8 , hspace = 0.15 ) ax1 = plt . subplot ( gs [ 0 , 0 : 2 ] ) plt . axis ( <str> ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax3 = plt . subplot ( gs [ 0 , 2 : ] ) if PANELS [ 0 ] :      leftExampleFilename = <str> leftExampleFullPath = os . path . join ( dataDir , leftExampleFilename ) leftExample = np . load ( leftExampleFullPath ) possibleValues = leftExample [ <str> ] plotHandles = [ ] for stimType in [ <str> , <str> ] :          fractionHitsEachValue = leftExample [ <str> + stimType ] ciHitsEachValue = leftExample [ <str> + stimType ] upperWhisker = ciHitsEachValue [ 1 , : ] - fractionHitsEachValue lowerWhisker = fractionHitsEachValue - ciHitsEachValue [ 0 , : ] fitxvals = leftExample [ <str> + stimType ] fityvals = leftExample [ <str> + stimType ] logPossibleValues = np . log2 ( leftExample [ <str> ] ) plt . hold ( True ) ( pline , pcaps , pbars ) = ax3 . errorbar ( logPossibleValues , 100 * fractionHitsEachValue , yerr = [ 100 * lowerWhisker , 100 * upperWhisker ] , ecolor = PHOTOSTIMCOLORS [ stimType ] , fmt = None , clip_on = False ) pdots = ax3 . plot ( logPossibleValues , 100 * fractionHitsEachValue , <str> , ms = 6 , mec = <str> , mfc = PHOTOSTIMCOLORS [ stimType ] , clip_on = False ) pfit , = ax3 . plot ( fitxvals , 100 * fityvals , color = PHOTOSTIMCOLORS [ stimType ] , lw = 2 , clip_on = False ) plotHandles . append ( pfit )  extraplots . boxoff ( ax3 ) plt . xlim ( [ fitxvals [ 0 ] , fitxvals [ - 1 ] ] ) xTicks = np . array ( [ 6 , 11 , 19 ] ) ax3 . set_xticks ( np . log2 ( xTicks * 1000 ) ) freqLabels = [ <str> . format ( x ) for x in xTicks ] ax3 . set_xticklabels ( freqLabels ) ax3 . set_xticklabels ( <str> ) ax3 . set_ylim ( [ 0 , 100 ] ) ax3 . set_yticks ( [ 0 , 50 , 100 ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . legend ( plotHandles , [ <str> , <str> ] , loc = <str> , labelspacing = 0.1 , fontsize = fontSizeTicks , handlelength = 1.5 , handletextpad = 0.2 , borderaxespad = 0.0 , frameon = False ) ax3 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  ax4 = plt . subplot ( gs [ 1 , 2 : ] ) ax4 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      rightExampleFilename = <str> rightExampleFullPath = os . path . join ( dataDir , rightExampleFilename ) rightExample = np . load ( rightExampleFullPath ) possibleValues = rightExample [ <str> ] plotHandles = [ ] for stimType in [ <str> , <str> ] :          fractionHitsEachValue = rightExample [ <str> + stimType ] ciHitsEachValue = rightExample [ <str> + stimType ] upperWhisker = ciHitsEachValue [ 1 , : ] - fractionHitsEachValue lowerWhisker = fractionHitsEachValue - ciHitsEachValue [ 0 , : ] fitxvals = rightExample [ <str> + stimType ] fityvals = rightExample [ <str> + stimType ] logPossibleValues = np . log2 ( rightExample [ <str> ] ) plt . hold ( True ) ( pline , pcaps , pbars ) = ax4 . errorbar ( logPossibleValues , 100 * fractionHitsEachValue , yerr = [ 100 * lowerWhisker , 100 * upperWhisker ] , ecolor = PHOTOSTIMCOLORS [ stimType ] , fmt = None , clip_on = False ) pdots = ax4 . plot ( logPossibleValues , 100 * fractionHitsEachValue , <str> , ms = 6 , mec = <str> , mfc = PHOTOSTIMCOLORS [ stimType ] , clip_on = False ) pfit , = ax4 . plot ( fitxvals , 100 * fityvals , color = PHOTOSTIMCOLORS [ stimType ] , lw = 2 , clip_on = False ) plotHandles . append ( pfit )  extraplots . boxoff ( ax4 ) plt . xlim ( [ fitxvals [ 0 ] , fitxvals [ - 1 ] ] ) xTicks = np . array ( [ 6 , 11 , 19 ] ) ax4 . set_xticks ( np . log2 ( xTicks * 1000 ) ) freqLabels = [ <str> . format ( x ) for x in xTicks ] ax4 . set_xticklabels ( freqLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) ax4 . set_ylim ( [ 0 , 100 ] ) ax4 . set_yticks ( [ 0 , 50 , 100 ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . legend ( plotHandles , [ <str> , <str> ] , loc = <str> , labelspacing = 0.1 , fontsize = fontSizeTicks , handlelength = 1.5 , handletextpad = 0.2 , borderaxespad = 0.0 , frameon = False )  ax5 = plt . subplot ( gs [ 1 , : 2 ] ) ax5 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 2 ] :      summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) left014 = summary [ <str> ] left015 = summary [ <str> ] left016 = summary [ <str> ] right014 = summary [ <str> ] right015 = summary [ <str> ] right016 = summary [ <str> ] ( T , leftpVal014 ) = stats . wilcoxon ( left014 ) ( T , leftpVal015 ) = stats . wilcoxon ( left015 ) ( T , leftpVal016 ) = stats . wilcoxon ( left016 ) ( T , rightpVal014 ) = stats . wilcoxon ( right014 ) ( T , rightpVal015 ) = stats . wilcoxon ( right015 ) ( T , rightpVal016 ) = stats . wilcoxon ( right016 ) print <str> . format ( len ( left014 ) , leftpVal014 ) print <str> . format ( len ( left015 ) , leftpVal015 ) print <str> . format ( len ( left016 ) , leftpVal016 ) print <str> . format ( len ( right014 ) , rightpVal014 ) print <str> . format ( len ( right015 ) , rightpVal015 ) print <str> . format ( len ( right016 ) , rightpVal016 ) ( Z , lvrpVal014 ) = stats . ranksums ( left014 , right014 ) ( Z , lvrpVal015 ) = stats . ranksums ( left015 , right015 ) ( Z , lvrpVal016 ) = stats . ranksums ( left016 , right016 ) print <str> . format ( lvrpVal014 ) print <str> . format ( lvrpVal015 ) print <str> . format ( lvrpVal016 ) maxSessionNum = 10 left014 = left014 [ : maxSessionNum ] left015 = left015 [ : maxSessionNum ] left016 = left016 [ : maxSessionNum ] right014 = right014 [ : maxSessionNum ] right015 = right015 [ : maxSessionNum ] right016 = right016 [ : maxSessionNum ] print <str> . format ( maxSessionNum ) ax5 . axhline ( y = 0 , color = <str> , linestyle = <str> ) np . random . seed ( 7 ) for inda , ( animal , leftData ) in enumerate ( zip ( [ <str> , <str> , <str> ] , [ left014 , left015 , left016 ] ) ) :          offset = np . repeat ( inda * 0.1 , len ( leftData ) ) ax5 . plot ( 0.9 + offset , 100 * leftData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> ) ax5 . plot ( 0.9 + inda * 0.1 , np . mean ( 100 * leftData ) , <str> , mfc = PHOTOSTIMCOLORS [ <str> ] , mec = <str> )  for inda , ( animal , rightData ) in enumerate ( zip ( [ <str> , <str> , <str> ] , [ right014 , right015 , right016 ] ) ) :          offset = np . repeat ( inda * 0.1 , len ( leftData ) ) ax5 . plot ( 1.9 + offset , 100 * rightData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> ) ax5 . plot ( 1.9 + inda * 0.1 , np . mean ( 100 * rightData ) , <str> , mfc = PHOTOSTIMCOLORS [ <str> ] , mec = <str> )  leftStimChange = np . concatenate ( ( left014 , left015 , left016 ) ) rightStimChange = np . concatenate ( ( right014 , right015 , right016 ) ) meanLeftStim = np . mean ( leftStimChange ) meanRightStim = np . mean ( rightStimChange ) ax5 . plot ( 0.25 * np . array ( [ - 1 , 1 ] ) + 1 , 100 * np . tile ( meanLeftStim , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) ax5 . plot ( 0.25 * np . array ( [ - 1 , 1 ] ) + 2 , 100 * np . tile ( meanRightStim , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) xlim = [ 0.5 , 2.5 ] ylim = [ - 50 , 50 ] plt . xlim ( xlim ) plt . ylim ( ylim ) xticks = [ 1 , 2 ] xticklabels = [ <str> , <str> ] plt . xticks ( xticks , xticklabels , fontsize = fontSizeTicks ) labelDis = 0.1 plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( ax5 ) ax5 . spines [ <str> ] . set_visible ( False ) [ t . set_visible ( False ) for t in ax5 . get_xticklines ( ) ] extraplots . significance_stars ( [ 1 , 2 ] , 52 , 3 , starSize = 10 , gapFactor = 0.12 , color = <str> ) ( Z , pVal ) = stats . ranksums ( leftStimChange , rightStimChange ) print <str> , pVal , <str>  plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   