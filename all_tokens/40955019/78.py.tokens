import os import imp import nrrd import numpy as np from allensdk . core . mouse_connectivity_cache import MouseConnectivityCache from jaratoolbox import histologyanalysis as ha from jaratoolbox import settings def cell_locations ( db ) :      lapPath = <str> lapData = nrrd . read ( lapPath ) lap = lapData [ 0 ] mcc = MouseConnectivityCache ( resolution = 25 ) rsp = mcc . get_reference_space ( ) rspAnnotationVolumeRotated = np . rot90 ( rsp . annotation , 1 , axes = ( 2 , 0 ) ) tetrodetoshank = { 1 : 1 , 2 : 1 , 3 : 2 , 4 : 2 , 5 : 3 , 6 : 3 , 7 : 4 , 8 : 4 } bestCells = db [ db [ <str> ] . notnull ( ) ] db [ <str> ] = <str> for dbIndex , dbRow in bestCells . iterrows ( ) :          subject = dbRow [ <str> ] try :              fileNameInfohist = os . path . join ( settings . INFOHIST_PATH , <str> . format ( subject ) ) tracks = imp . load_source ( <str> , fileNameInfohist ) . tracks  except IOError :              print ( <str> . format ( fileNameInfohist ) )  else :              brainArea = dbRow [ <str> ] if brainArea == <str> :                  brainArea = <str>  elif brainArea == <str> :                  brainArea = <str>  tetrode = dbRow [ <str> ] shank = tetrodetoshank [ tetrode ] recordingTrack = dbRow [ <str> ] [ 0 ] track = next ( ( track for track in tracks if ( track [ <str> ] == brainArea ) and ( track [ <str> ] == shank ) and ( track [ <str> ] == recordingTrack ) ) , None ) if track is not None :                  histImage = track [ <str> ] filenameSVG = ha . get_filename_registered_svg ( subject , brainArea , histImage , recordingTrack , shank ) if tetrode % 2 == 0 :                      depth = dbRow [ <str> ]  else :                      depth = dbRow [ <str> ] - 150.0  brainSurfCoords , tipCoords , siteCoords = ha . get_coords_from_svg ( filenameSVG , [ depth ] , dbRow [ <str> ] ) siteCoords = siteCoords [ 0 ] atlasZ = track [ <str> ] cortexDepthData = np . rot90 ( lap [ : , : , atlasZ ] , - 1 ) bottomData = np . where ( cortexDepthData > 0.95 ) topData = np . where ( ( cortexDepthData < 0.02 ) & ( cortexDepthData > 0 ) ) dXTop = topData [ 1 ] - siteCoords [ 0 ] dYTop = topData [ 0 ] - siteCoords [ 1 ] distanceTop = np . sqrt ( dXTop ** 2 + dYTop ** 2 ) indMinTop = np . argmin ( distanceTop ) minDistanceTop = distanceTop . min ( ) dXBottom = bottomData [ 1 ] - siteCoords [ 0 ] dYBottom = bottomData [ 0 ] - siteCoords [ 1 ] distanceBottom = np . sqrt ( dXBottom ** 2 + dYBottom ** 2 ) minDistanceBottom = distanceBottom . min ( ) cellRatio = minDistanceTop / ( minDistanceBottom + minDistanceTop ) db . at [ dbIndex , <str> ] = cellRatio thisCoordID = rspAnnotationVolumeRotated [ int ( siteCoords [ 0 ] ) , int ( siteCoords [ 1 ] ) , atlasZ ] structDict = rsp . structure_tree . get_structures_by_id ( [ thisCoordID ] ) print <str> . format ( str ( structDict [ 0 ] [ <str> ] ) ) db . at [ dbIndex , <str> ] = structDict [ 0 ] [ <str> ]  else :                  print subject , brainArea , shank , recordingTrack    return db    