import os import numpy as np from jaratoolbox import settings import studyparams import figparams import model_suppression as suppmodel reload ( suppmodel ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , figName ) nCells = 101 RANDOMIZED = 1 np . random . seed ( 1 ) def random_in_range ( low , high , shape ) :      width = high - low randVec = width * np . random . rand ( shape ) + low return randVec  if RANDOMIZED :      nSamples = 200 rfWidths = None suppIndexVec = np . empty ( ( 3 , nSamples ) ) changeAtPeakVec = np . empty ( ( 2 , nSamples ) ) changeAtWNVec = np . empty ( ( 2 , nSamples ) ) oct_range = 6 stdPVoct = 0.8 * ( nCells - 1 ) / oct_range ampPVvec = random_in_range ( - 1 , - 30 , nSamples ) ampSOMvec = random_in_range ( - 1 , - 30 , nSamples ) stdSOMvec = random_in_range ( 1 , 2 , nSamples ) stdThalvec = random_in_range ( .2 , 1 , nSamples ) for inds in range ( nSamples ) :          wParams = { <str> : ampPVvec [ inds ] , <str> : stdPVoct , <str> : ampSOMvec [ inds ] , <str> : stdSOMvec [ inds ] * stdPVoct , <str> : 100 , <str> : stdThalvec [ inds ] * stdPVoct } net = suppmodel . Network ( nCells , wParams , rfWidths ) centerCellOutput , bandwidths , condLabels = net . simulate_inactivation ( ) suppIndex = suppmodel . suppression_index ( centerCellOutput ) changeAtPeak , changeAtWN = suppmodel . change_in_response ( centerCellOutput ) suppIndexVec [ : , inds ] = suppIndex changeAtPeakVec [ : , inds ] = changeAtPeak changeAtWNVec [ : , inds ] = changeAtWN   else :      ampPVvec = np . arange ( - 2 , - 44 , - 4 ) ampSOMvec = np . arange ( - 2 , - 44 , - 4 ) stdThalvec = [ 5 , 7 , 9 ] suppIndexAll = np . empty ( ( 3 , len ( ampPVvec ) , len ( ampSOMvec ) , len ( stdThalvec ) ) ) changeAtPeakAll = np . empty ( ( 2 , len ( ampPVvec ) , len ( ampSOMvec ) , len ( stdThalvec ) ) ) changeAtWNAll = np . empty ( ( 2 , len ( ampPVvec ) , len ( ampSOMvec ) , len ( stdThalvec ) ) ) for indPV , ampPV in enumerate ( ampPVvec ) :          for indSOM , ampSOM in enumerate ( ampSOMvec ) :              for indThal , stdThal in enumerate ( stdThalvec ) :                  wParams = { <str> : ampPV , <str> : 10 , <str> : ampSOM , <str> : 30 , <str> : 100 , <str> : stdThal } net = suppmodel . Network ( nCells , wParams ) centerCellOutput , bandwidths , condLabels = net . simulate_inactivation ( ) suppIndex = suppmodel . suppression_index ( centerCellOutput ) changeAtPeak , changeAtWN = suppmodel . change_in_response ( centerCellOutput ) suppIndexAll [ : , indPV , indSOM , indThal ] = suppIndex changeAtPeakAll [ : , indPV , indSOM , indThal ] = changeAtPeak changeAtWNAll [ : , indPV , indSOM , indThal ] = changeAtWN    nConds = len ( ampPVvec ) * len ( ampSOMvec ) * len ( stdThalvec ) suppIndexVec = suppIndexAll . reshape ( [ 3 , nConds ] ) changeAtPeakVec = changeAtPeakAll . reshape ( [ 2 , nConds ] ) changeAtWNVec = changeAtWNAll . reshape ( [ 2 , nConds ] )  import matplotlib . pyplot as plt plt . clf ( ) markerSize = 3 plt . subplot ( 2 , 2 , 1 ) plt . plot ( suppIndexVec [ 0 ] , suppIndexVec [ 1 ] , <str> , mfc = <str> , ms = markerSize ) plt . plot ( suppIndexVec [ 0 ] , suppIndexVec [ 2 ] , <str> , mfc = <str> , ms = markerSize ) xLims = [ - 0.1 , 1.1 ] plt . xlim ( xLims ) plt . ylim ( xLims ) plt . plot ( xLims , xLims , <str> , color = <str> ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . subplot ( 2 , 2 , 2 ) avgSIchangePV = np . median ( suppIndexVec [ 1 ] - suppIndexVec [ 0 ] ) avgSIchangeSOM = np . median ( suppIndexVec [ 2 ] - suppIndexVec [ 0 ] ) plt . bar ( 1 , avgSIchangePV , fc = <str> , ec = <str> , lw = 2 ) plt . bar ( 2 , avgSIchangeSOM , fc = <str> , ec = <str> , lw = 2 ) plt . subplot ( 2 , 2 , 3 ) plt . plot ( changeAtPeakVec [ 0 , : ] , changeAtWNVec [ 0 , : ] , <str> , mfc = <str> , ms = markerSize ) plt . plot ( changeAtPeakVec [ 1 , : ] , changeAtWNVec [ 1 , : ] , <str> , mfc = <str> , ms = markerSize ) xLims = [ - 50 , 1500 ] plt . xlim ( xLims ) plt . ylim ( xLims ) plt . plot ( xLims , xLims , <str> , color = <str> ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . subplot ( 2 , 2 , 2 ) outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , suppIndexVec = suppIndexVec , changeAtPeakVec = changeAtPeakVec , changeAtWNVec = changeAtWNVec , condLabels = condLabels ) print ( <str> . format ( outputFullPath ) )  