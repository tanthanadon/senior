import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec from scipy import stats import matplotlib import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> PANELS = [ 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 12 , 3.5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 timeRangeSound = [ - 0.2 , 0.4 ] msRaster = 2 msMvStart = 3 smoothWinSizePsth1 = 1 smoothWinSizePsth2 = 3 lwPsth = 2 downsampleFactorPsth = 1 colormapTuning = matplotlib . cm . winter labelPosX = [ 0.015 , 0.28 , 0.52 , 0.76 ] labelPosY = [ 0.95 ] PHOTOSTIMCOLORS = { <str> : <str> , <str> : <str> , <str> : <str> } soundColor = figparams . colp [ <str> ] alphaLevel = 0.05 numFreqs = 6 bonferroniCorrectedAlphaLevel = alphaLevel / numFreqs fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 4 ) gs . update ( left = 0.08 , right = 0.98 , top = 0.95 , bottom = 0.15 , wspace = 0.4 , hspace = 0.1 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 0 ] , hspace = 0.15 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 1 ] , hspace = 0.15 ) ax5 = plt . subplot ( gs00 [ 0 : 3 , : ] ) ax5 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 0 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] colorEachFreq = [ colormapTuning ( x ) for x in np . linspace ( 1.0 , 0.2 , len ( possibleFreq ) ) ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeSound , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) plt . setp ( hcond , zorder = 3 ) movementTimesFromEventOnset = rasterExample [ <str> ] trialsToUse = np . sum ( trialsEachCond , axis = 1 ) . astype ( <str> ) yLims = plt . gca ( ) . get_ylim ( ) plt . hold ( <str> ) bplot = plt . boxplot ( movementTimesFromEventOnset [ trialsToUse ] , sym = <str> , vert = False , positions = [ yLims [ - 1 ] + 15 ] , widths = [ 25 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . autoscale ( enable = True , axis = <str> , tight = True ) plt . axis ( <str> ) for element in [ <str> , <str> , <str> , <str> ] :          plt . setp ( bplot [ element ] , color = <str> , linewidth = 1 )  plt . setp ( bplot [ <str> ] , linestyle = <str> ) plt . setp ( bplot [ <str> ] , color = <str> ) plt . gca ( ) . set_xticklabels ( <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) ax6 = plt . subplot ( gs00 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth1 , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labels [ ind ] )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 90 ] plt . ylim ( yLims ) plt . yticks ( yLims ) soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) extraplots . boxoff ( plt . gca ( ) )  ax6 = plt . subplot ( gs01 [ 0 : 3 , : ] ) ax6 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] colorEachFreq = [ colormapTuning ( x ) for x in np . linspace ( 1.0 , 0.2 , len ( possibleFreq ) ) ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeSound , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) plt . setp ( hcond , zorder = 3 ) movementTimesFromEventOnset = rasterExample [ <str> ] trialsToUse = np . sum ( trialsEachCond , axis = 1 ) . astype ( <str> ) yLims = plt . gca ( ) . get_ylim ( ) plt . hold ( <str> ) bplot = plt . boxplot ( movementTimesFromEventOnset [ trialsToUse ] , sym = <str> , vert = False , positions = [ yLims [ - 1 ] + 15 ] , widths = [ 25 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . autoscale ( enable = True , axis = <str> , tight = True ) plt . axis ( <str> ) for element in [ <str> , <str> , <str> , <str> ] :          plt . setp ( bplot [ element ] , color = <str> , linewidth = 1 )  plt . setp ( bplot [ <str> ] , linestyle = <str> ) plt . setp ( bplot [ <str> ] , color = <str> ) plt . gca ( ) . set_xticklabels ( <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) ax7 = plt . subplot ( gs01 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth2 , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labels [ ind ] )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 10 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) plt . ylim ( yLims ) plt . yticks ( yLims ) extraplots . boxoff ( plt . gca ( ) )  ax8 = plt . subplot ( gs [ : , 2 ] ) ax8 . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 2 ] :      summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) cellSelectorBoolArray = summary [ <str> ] bestFreqEachCell = summary [ <str> ] maxZscoreEachCell = summary [ <str> ] pValEachFreqEachCell = summary [ <str> ] minPValEachCell = np . amin ( pValEachFreqEachCell , axis = 1 ) sigResp = ( minPValEachCell <= bonferroniCorrectedAlphaLevel ) responseFilename = <str> responseFullPath = os . path . join ( dataDir , responseFilename ) responseEachCellEachFreq = np . load ( responseFullPath ) baselineFilename = <str> baselineFullPath = os . path . join ( dataDir , baselineFilename ) baselineEachCellEachFreq = np . load ( baselineFullPath ) numCells = sum ( cellSelectorBoolArray ) overallRespInds = np . array ( [ ] ) pVals = np . array ( [ ] ) for cellInd in range ( numCells ) :          fSound = responseEachCellEachFreq [ cellInd , : , : ] . compressed ( ) fBaseline = baselineEachCellEachFreq [ cellInd , : , : ] . compressed ( ) zScore , pVal = stats . ranksums ( fBaseline , fSound ) pVals = np . append ( pVals , pVal ) if np . mean ( fSound ) + np . mean ( fBaseline ) == 0 :              overallRespIndexThisCell = 0  else :              overallRespIndexThisCell = ( np . mean ( fSound ) - np . mean ( fBaseline ) ) / ( np . mean ( fSound ) + np . mean ( fBaseline ) )  overallRespInds = np . append ( overallRespInds , overallRespIndexThisCell )  sigRespOverall = ( pVals <= 0.05 ) nansInData = np . isnan ( overallRespInds ) if np . any ( nansInData ) :          print <str> overallRespInds [ nansInData ] = 0  plt . hold ( True ) binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . hist ( [ overallRespInds [ sigRespOverall ] , overallRespInds [ ~ sigRespOverall ] ] , bins = binsEdges , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , rwidth = 0.8 ) nCellsString = <str> . format ( sum ( cellSelectorBoolArray ) ) nMiceString = <str> . format ( 5 ) plt . text ( 0.4 , 168 , nCellsString , ha = <str> , fontsize = fontSizeLabels ) plt . text ( 0.4 , 155 , nMiceString , ha = <str> , fontsize = fontSizeLabels ) plt . axvline ( x = 0 , linestyle = <str> , linewidth = 1.5 , color = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( [ - 1.01 , 1.01 ] ) extraplots . boxoff ( ax8 ) numCells = sum ( cellSelectorBoolArray ) numOverallRespCells = sum ( sigRespOverall ) percentRespOverall = float ( numOverallRespCells ) / numCells * 100 print <str> . format ( numOverallRespCells , percentRespOverall )  ax9 = plt . subplot ( gs [ : , 3 ] ) ax9 . annotate ( <str> , xy = ( labelPosX [ 3 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 3 ] :      responseFilename = <str> responseFullPath = os . path . join ( dataDir , responseFilename ) responseEachCellEachFreq = np . load ( responseFullPath ) selectivityInds = np . array ( [ ] ) pVals = np . array ( [ ] ) for cellInd in range ( numCells ) :          fLow = responseEachCellEachFreq [ cellInd , : , : 3 ] . compressed ( ) fHigh = responseEachCellEachFreq [ cellInd , : , 3 : ] . compressed ( ) zScore , pVal = stats . ranksums ( fLow , fHigh ) pVals = np . append ( pVals , pVal ) if ( np . mean ( fHigh ) + np . mean ( fLow ) ) == 0 :              selectivityIndexThisCell = 0  else :              selectivityIndexThisCell = ( np . mean ( fHigh ) - np . mean ( fLow ) ) / ( np . mean ( fHigh ) + np . mean ( fLow ) )  selectivityInds = np . append ( selectivityInds , selectivityIndexThisCell )  nansInData = np . isnan ( selectivityInds ) if np . any ( nansInData ) :          print <str> selectivityInds [ nansInData ] = 0  freqSelective = ( pVals <= 0.05 ) binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . axvline ( x = 0 , linestyle = <str> , linewidth = 1.5 , color = <str> ) plt . hist ( [ selectivityInds [ freqSelective ] , selectivityInds [ ~ freqSelective ] ] , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , bins = binsEdges , rwidth = 0.8 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . text ( 0.4 , 195.5 , nCellsString , ha = <str> , fontsize = fontSizeLabels ) plt . text ( 0.4 , 180 , nMiceString , ha = <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( ax9 ) plt . ylim ( [ 0 , 210 ] ) numFreqSelCells = sum ( freqSelective . astype ( int ) ) print 100 * float ( numFreqSelCells ) / numCells , <str> , numFreqSelCells , <str> , numCells , <str> hlFreqSelSoundResp = freqSelective & sigRespOverall numHLFreqSelSoundRespCells = sum ( hlFreqSelSoundResp ) print 100 * float ( numHLFreqSelSoundRespCells ) / numOverallRespCells , <str> , numHLFreqSelSoundRespCells , <str> , numOverallRespCells , <str> ANOVAfreqSelective = summary [ <str> ] <= alphaLevel numOverallFreqSelCells = sum ( ANOVAfreqSelective ) numOverallFreqSelSoundRespCells = sum ( ANOVAfreqSelective & sigRespOverall ) print 100 * float ( numOverallFreqSelSoundRespCells ) / numOverallRespCells , <str> , numOverallFreqSelSoundRespCells , <str> , numOverallRespCells , <str> print 100 * float ( numOverallFreqSelCells ) / numCells , <str> , numOverallFreqSelCells , <str> , numCells , <str> allKruskalPVals = np . ones ( numCells ) for cellInd in range ( numCells ) :          Fstat , pVal = stats . kruskal ( * np . hsplit ( responseEachCellEachFreq [ cellInd ] , numFreqs ) ) allKruskalPVals [ cellInd ] = pVal  KruskalfreqSelective = allKruskalPVals <= alphaLevel numOverallFreqSelCellsKruskal = sum ( KruskalfreqSelective ) numOverallFreqSelSoundRespCellsKruskal = sum ( KruskalfreqSelective & sigRespOverall ) print 100 * float ( numOverallFreqSelCellsKruskal ) / numCells , <str> , numOverallFreqSelCellsKruskal , <str> , numCells , <str> print 100 * float ( numOverallFreqSelSoundRespCellsKruskal ) / numOverallRespCells , <str> , numOverallFreqSelSoundRespCellsKruskal , <str> , numOverallRespCells , <str>  plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   