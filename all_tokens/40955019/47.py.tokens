import os import sys import importlib import numpy as np from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import spikesorting from jaratoolbox import behavioranalysis from jaratoolbox import settings from jaratoolbox import extraplots import matplotlib import figparams import matplotlib . gridspec as gridspec import matplotlib . patches as mpatches import pandas as pd from matplotlib import pyplot as plt import pdb FIGNAME = <str> EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 timeRange = [ - 0.3 , 0.4 ] binWidth = 0.010 qualityList = [ 1 , 6 ] ISIcutoff = 0.02 figSize = [ 12 , 8 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 msRaster = 2 smoothWinSizePsth = 3 lwPsth = 2 downsampleFactorPsth = 1 colormapTuning = matplotlib . cm . winter outputDir = os . path . join ( <str> , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  plt . figure ( figsize = figSize ) gs = gridspec . GridSpec ( 2 , 3 ) gs . update ( left = 0.1 , right = 0.9 , wspace = 0.55 , hspace = 0.6 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 4 , 3 , subplot_spec = gs [ : , 0 ] , hspace = 0.2 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 4 , 3 , subplot_spec = gs [ : , 1 ] , hspace = 0.2 ) BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE if not os . path . ismount ( BEHAVIOR_PATH ) :      os . system ( <str> . format ( BEHAVIOR_PATH ) )  if not os . path . ismount ( EPHYS_PATH ) :      os . system ( <str> . format ( EPHYS_PATH ) )  psychometricFilePath = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) goodcells_psychometric = ( allcells_psychometric . cellQuality . isin ( qualityList ) ) & ( allcells_psychometric . ISI <= ISIcutoff ) cellInStr = ( allcells_psychometric . cellInStr == 1 ) keepAfterDupTest = allcells_psychometric . keep_after_dup_test cellSelector = goodcells_psychometric & cellInStr & keepAfterDupTest cellsToPlot = allcells_psychometric [ cellSelector ] for ind , cell in cellsToPlot . iterrows ( ) :      fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) try :          cellParams = { <str> : str ( cell [ <str> ] ) , <str> : str ( cell [ <str> ] ) , <str> : int ( cell [ <str> ] ) , <str> : int ( cell [ <str> ] ) } figname = <str> . format ( cell [ <str> ] , cell [ <str> ] , cell [ <str> ] , cell [ <str> ] ) fullFigname = os . path . join ( outputDir , figname ) print <str> , ind mouseName = cellParams [ <str> ] allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellIndex = allcells . cellDB . findcell ( ** cellParams ) oneCell = allcells . cellDB [ cellIndex ] behavFileName = <str> . format ( oneCell . animalName , <str> , oneCell . behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , oneCell . animalName , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . tuningSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE eventOnsetTimes = eventData . timestamps soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] spikeFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . tuningSession , <str> . format ( oneCell . tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . tuningSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( oneCell . tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == oneCell . cluster ] spikeData . samples = spikeData . samples [ clusters == oneCell . cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeTimestamps = spikeData . timestamps freqEachTrial = bdata [ <str> ] intensityEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) possibleIntensity = np . unique ( intensityEachTrial ) trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , soundOnsetTimes , timeRange ) ax1 = plt . subplot ( gs00 [ 0 : 2 , : ] ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . title ( <str> , fontsize = fontSizeLabels ) ax2 = plt . subplot ( gs00 [ 2 , : ] ) freqScaleFactor = 3 possibleFreq = possibleFreq [ 1 : : freqScaleFactor ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] numFreqs = len ( possibleFreq ) trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) cm_subsection = np . linspace ( 0.0 , 1.0 , numFreqs ) colorEachCond = [ colormapTuning ( x ) for x in cm_subsection ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachFreq , colorEachCond = colorEachCond , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :              plt . setp ( line , label = labels [ ind ] )  plt . legend ( loc = <str> , fontsize = fontSizeTicks , handlelength = 0.2 , frameon = False , labelspacing = 0 , borderaxespad = 0.1 ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) behavFileName = <str> . format ( oneCell . animalName , <str> , oneCell . behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , oneCell . animalName , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE spikeFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> . format ( oneCell . tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( oneCell . tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == oneCell . cluster ] spikeData . samples = spikeData . samples [ clusters == oneCell . cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventOnsetTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) freqEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) numFreqs = len ( possibleFreq ) trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , soundOnsetTimeEphys , timeRange ) ax3 = plt . subplot ( gs01 [ 0 : 2 , : ] ) labels = [ <str> % f for f in possibleFreq / 1000.0 ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . title ( <str> , fontsize = fontSizeLabels ) ax4 = plt . subplot ( gs01 [ 2 , : ] ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) cm_subsection = np . linspace ( 0.0 , 1.0 , numFreqs ) colorEachCond = [ colormapTuning ( x ) for x in cm_subsection ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachFreq , colorEachCond = colorEachCond , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :              plt . setp ( line , label = labels [ ind ] )  plt . legend ( loc = <str> , fontsize = fontSizeTicks , handlelength = 0.2 , frameon = False , labelspacing = 0 , borderaxespad = 0.1 ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] middleFreqs = [ possibleFreq [ numFreqs / 2 - 1 ] , possibleFreq [ numFreqs / 2 ] ] ax5 = plt . subplot ( gs [ 0 , 2 ] ) oneFreq = bdata [ <str> ] == middleFreqs [ 0 ] trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq condLabels = [ <str> , <str> ] trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] colorEachCond = [ <str> , <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . setp ( pRaster , ms = msRaster ) plt . title ( <str> . format ( middleFreqs [ 0 ] , cell [ <str> ] , cell [ <str> ] , cell [ <str> ] ) , fontsize = fontSizeLabels - 2 ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) ax6 = plt . subplot ( gs [ 1 , 2 ] ) oneFreq = bdata [ <str> ] == middleFreqs [ 1 ] trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq condLabels = [ <str> , <str> ] trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] colorEachCond = [ <str> , <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . setp ( pRaster , ms = msRaster ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = labelDis ) plt . title ( <str> . format ( middleFreqs [ 1 ] , cell [ <str> ] , cell [ <str> ] , cell [ <str> ] ) , fontsize = fontSizeLabels - 2 ) ax7 = plt . subplot ( gs00 [ 3 , : ] ) wavesThisCluster = spikeData . samples spikesorting . plot_waveforms ( wavesThisCluster ) ax8 = plt . subplot ( gs01 [ 3 , : ] ) spikesorting . plot_isi_loghist ( spikeTimestamps ) print <str> plt . savefig ( fullFigname )  except :          continue    