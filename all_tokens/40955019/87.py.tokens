import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors import matplotlib . patches as patches from mpl_toolkits . axes_grid1 . inset_locator import inset_axes from scipy import ndimage from jaratoolbox import settings from jaratoolbox import extraplots import figparams import studyparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) HISTFIGNAME = <str> histDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , HISTFIGNAME ) PANELS = [ 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 6 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel fontSizeLegend = figparams . fontSizeLegend labelPosX = [ 0.005 , 0.24 , 0.49 , 0.76 ] labelPosY = [ 0.96 , 0.66 , 0.37 ] ExcFileName = <str> PVFileName = <str> SOMFileName = <str> waveformsFileName = <str> laserResponsesFileName = <str> histFileName = <str> ExcColor = figparams . colp [ <str> ] excludedExcColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] laserColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 3 , 4 , width_ratios = [ 1.1 , 0.9 , 1 , 1 ] ) gs . update ( top = 0.95 , bottom = 0.14 , left = 0.02 , right = 0.99 , wspace = 0.5 , hspace = 0.3 ) def list_colours_to_rgba ( colours ) :      dumbcolours = np . zeros ( ( len ( colours ) , 4 ) ) for indColour , colour in enumerate ( colours ) :          thisColour = matplotlib . colors . colorConverter . to_rgba ( colour , alpha = 1 ) dumbcolours [ indColour , : ] = thisColour  return dumbcolours  if PANELS [ 0 ] :      panelLabels = [ <str> , <str> , <str> ] histFullPath = os . path . join ( histDataDir , histFileName ) histImage = ndimage . imread ( histFullPath ) imageBounds = [ 400 , 800 , 0 , 400 ] axImage = plt . subplot ( gs [ 2 , 0 ] ) plt . imshow ( histImage [ imageBounds [ 0 ] : imageBounds [ 1 ] , imageBounds [ 2 ] : imageBounds [ 3 ] , : ] ) plt . axis ( <str> ) axImage . set_position ( [ 0.015 , 0.07 , 0.17 , 0.27 ] ) for ind , label in enumerate ( panelLabels ) :          axImage . annotate ( label , xy = ( labelPosX [ 0 ] , labelPosY [ ind ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  axImage . annotate ( <str> , xy = ( 0.6 , 0.35 ) , xycoords = <str> , fontsize = fontSizeLegend , color = <str> ) axImage . annotate ( <str> , xy = ( 0.65 , 0.75 ) , xycoords = <str> , fontsize = fontSizeLegend , color = <str> ) axImage . annotate ( <str> , xy = ( 0.45 , 0.05 ) , xycoords = <str> , fontsize = fontSizeLegend , color = <str> )  if PANELS [ 1 ] :      ExcFile = <str> + ExcFileName ExcDataFullPath = os . path . join ( dataDir , ExcFile ) ExcData = np . load ( ExcDataFullPath ) PVFile = <str> + PVFileName PVDataFullPath = os . path . join ( dataDir , PVFile ) PVData = np . load ( PVDataFullPath ) SOMFile = <str> + SOMFileName SOMDataFullPath = os . path . join ( dataDir , SOMFile ) SOMData = np . load ( SOMDataFullPath ) cellData = [ PVData , SOMData , ExcData ] panelLabels = [ <str> , <str> , <str> ] panelTitles = [ <str> , <str> , <str> ] colours = [ PVColor , SOMColor , ExcColor ] cellLabelPosX = 0.22 cellLabelPosY = [ 0.87 , 0.595 , 0.31 ] for indCell , cell in enumerate ( cellData ) :          axRaster = plt . subplot ( gs [ indCell : indCell + 1 , 1 ] ) plt . cla ( ) bandSpikeTimesFromEventOnset = cell [ <str> ] bandIndexLimitsEachTrial = cell [ <str> ] rasterTimeRange = cell [ <str> ] pRaster , hcond , zline = extraplots . raster_plot ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , rasterTimeRange ) axRaster . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 1 ] , labelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axRaster . annotate ( panelTitles [ indCell ] , xy = ( cellLabelPosX , cellLabelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> , color = colours [ indCell ] , rotation = 90 ) plt . setp ( pRaster , ms = 3 , color = <str> ) while len ( hcond ) > 0 :              bar = hcond . pop ( 0 ) bar . remove ( )  extraplots . boxoff ( axRaster ) xticks = np . arange ( rasterTimeRange [ 0 ] , rasterTimeRange [ 1 ] + 0.1 , 0.1 ) axRaster . set_xticks ( xticks ) if indCell != 2 :              axRaster . set_xticklabels ( <str> )  else :              plt . xlabel ( <str> , fontsize = fontSizeLabels )  plt . ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 2 ) yLims = np . array ( plt . ylim ( ) ) rect = patches . Rectangle ( ( 0 , yLims [ 1 ] * 1.03 ) , 0.1 , yLims [ 1 ] * 0.04 , linewidth = 1 , edgecolor = laserColor , facecolor = laserColor , clip_on = False ) axRaster . add_patch ( rect )  extraplots . set_ticks_fontsize ( axRaster , fontSizeTicks )  if PANELS [ 2 ] :      waveformsDataFullPath = os . path . join ( dataDir , waveformsFileName ) spikeShapeData = np . load ( waveformsDataFullPath ) ExcSpikeShapes = spikeShapeData [ <str> ] ExcMedianSpikeShape = spikeShapeData [ <str> ] PVspikeShapes = spikeShapeData [ <str> ] PVmedianSpikeShape = spikeShapeData [ <str> ] SOMspikeShapes = spikeShapeData [ <str> ] SOMmedianSpikeShape = spikeShapeData [ <str> ] ExcSpikeWidths = spikeShapeData [ <str> ] PVspikeWidths = spikeShapeData [ <str> ] SOMspikeWidths = spikeShapeData [ <str> ] spikeWidthData = [ PVspikeWidths , SOMspikeWidths , ExcSpikeWidths ] waveformData = [ PVspikeShapes , SOMspikeShapes , ExcSpikeShapes ] medianWaveforms = [ PVmedianSpikeShape , SOMmedianSpikeShape , ExcMedianSpikeShape ] panelLabels = [ <str> , <str> , <str> ] ExcColors = np . where ( ExcSpikeWidths > studyparams . EXC_SPIKE_WIDTH , ExcColor , excludedExcColor ) histColours = [ PVColor , SOMColor , ExcColor ] colours = [ [ PVColor ] , [ SOMColor ] , ExcColors ] insetLocs = [ 1 , 1 , 2 ] insetAnchors = [ ( 0 , 0 , 1 , 1 ) , ( 0 , 0 , 1 , 1 ) , ( .05 , 0 , 1 , 1 ) ] bins = np . linspace ( 0 , 1 , 16 ) plt . hold ( True ) for indType , cellTypeData in enumerate ( spikeWidthData ) :          axHist = plt . subplot ( gs [ indType : indType + 1 , 2 ] ) plt . hist ( cellTypeData * 1000.0 , bins = bins , color = histColours [ indType ] , edgecolor = histColours [ indType ] , linewidth = 0.3 ) plt . ylabel ( <str> ) plt . locator_params ( axis = <str> , nbins = 5 ) if indType < 2 :              axHist . set_xticklabels ( <str> )  else :              plt . hist ( cellTypeData [ ExcSpikeWidths < studyparams . EXC_SPIKE_WIDTH ] * 1000.0 , bins = bins , color = excludedExcColor , edgecolor = excludedExcColor , linewidth = 0.3 ) axHist . set_xticklabels ( [ 0 , <str> , 0.4 , <str> , 0.8 , <str> ] ) plt . xlabel ( <str> )  axInset = inset_axes ( axHist , width = <str> , height = <str> , loc = insetLocs [ indType ] , bbox_to_anchor = insetAnchors [ indType ] , bbox_transform = axHist . transAxes , ) for indCell in range ( waveformData [ indType ] . shape [ 0 ] ) :              if len ( colours [ indType ] ) > 1 :                  colour = colours [ indType ] [ indCell ]  else :                  colour = colours [ indType ] [ 0 ]  plt . plot ( waveformData [ indType ] [ indCell , : ] , color = colour , alpha = 0.1 ) plt . xticks ( [ ] ) plt . yticks ( [ ] )  axHist . annotate ( panelLabels [ indType ] , xy = ( labelPosX [ 2 ] , labelPosY [ indType ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( axHist )   if PANELS [ 3 ] :      laserDataFullPath = os . path . join ( dataDir , laserResponsesFileName ) laserResponseData = np . load ( laserDataFullPath ) PVanimalsChangeFR = laserResponseData [ <str> ] PVanimalsLaserPVal = laserResponseData [ <str> ] SOManimalsChangeFR = laserResponseData [ <str> ] SOManimalsLaserPVal = laserResponseData [ <str> ] SOManimalsLaserUStat = laserResponseData [ <str> ] SOManimalsSpikeWidth = laserResponseData [ <str> ] putExcCells = ( ( SOManimalsLaserUStat < 0 ) | ( SOManimalsLaserPVal > studyparams . EXC_LASER_RESPONSE_PVAL ) ) & ( SOManimalsSpikeWidth > studyparams . EXC_SPIKE_WIDTH ) putExcCellResponses = SOManimalsChangeFR [ putExcCells ] otherCellResponses = SOManimalsChangeFR [ ~ putExcCells ] otherCellpVals = SOManimalsLaserPVal [ ~ putExcCells ] changesFR = [ PVanimalsChangeFR , otherCellResponses ] pVals = [ PVanimalsLaserPVal , otherCellpVals ] colours = [ PVColor , SOMColor ] categoryLabels = [ <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs [ : , 3 ] ) plt . hold ( True ) for category in range ( len ( changesFR ) ) :          xval = ( category + 1 ) * np . ones ( len ( changesFR [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.6 * jitterAmt ) - 0.3 mfc = np . where ( pVals [ category ] < 0.001 , colours [ category ] , <str> ) mec = list_colours_to_rgba ( np . where ( pVals [ category ] < 0.001 , colours [ category ] , <str> ) ) plt . scatter ( xval , changesFR [ category ] , facecolors = mfc , edgecolors = mec , clip_on = False , s = 10 , linewidths = 0.5 )  xval = ( category + 1 ) * np . ones ( len ( putExcCellResponses ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.6 * jitterAmt ) - 0.3 plt . scatter ( xval , putExcCellResponses , facecolors = ExcColor , edgecolors = ExcColor , clip_on = False , s = 10 , linewidths = 0.5 , zorder = 10 ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 3 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0.3 , len ( changesFR ) + 0.7 ) axScatter . set_xticks ( range ( 1 , len ( changesFR ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels , rotation = - 45 ) plt . ylim ( - 20 , 125 ) plt . ylabel ( <str> ) extraplots . boxoff ( axScatter )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    