import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from collections import Counter from scipy import stats import pandas as pd import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = pd . read_hdf ( dbPath , key = <str> ) goodISI = db . query ( <str> ) goodShape = goodISI . query ( <str> ) goodNSpikes = goodShape . query ( <str> ) cellsToUse = goodNSpikes . query ( <str> ) ac = cellsToUse . groupby ( <str> ) . get_group ( <str> ) thal = cellsToUse . groupby ( <str> ) . get_group ( <str> ) features = [ <str> , <str> ] for indFeature , feature in enumerate ( features ) :      dataAC = ac [ feature ] [ pd . notnull ( ac [ feature ] ) ] dataThal = thal [ feature ] [ pd . notnull ( thal [ feature ] ) ] zStat , pVal = stats . mannwhitneyu ( dataAC , dataThal ) print <str> . format ( feature , zStat , pVal )  yLabels = [ <str> , <str> , <str> ] goodFit = cellsToUse . query ( <str> ) goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUse = goodFit . query ( <str> ) ac = goodFitToUse . groupby ( <str> ) . get_group ( <str> ) thal = goodFitToUse . groupby ( <str> ) . get_group ( <str> ) features = [ <str> , <str> , <str> ] for indFeature , feature in enumerate ( features ) :      dataAC = ac [ feature ] [ pd . notnull ( ac [ feature ] ) ] dataThal = thal [ feature ] [ pd . notnull ( thal [ feature ] ) ] zStat , pVal = stats . mannwhitneyu ( dataAC , dataThal ) print <str> . format ( feature , zStat , pVal )   