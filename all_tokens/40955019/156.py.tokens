import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import celldatabase from scipy import stats import pandas as pd import figparams reload ( extraplots ) reload ( figparams ) def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( ax , yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) ax . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  FIGNAME = <str> titleExampleBW = True exampleDataPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME , <str> ) dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbPath ) exData = np . load ( exampleDataPath ) np . random . seed ( 8 ) goodISI = db . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodFit = goodLaser . query ( <str> ) goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUse = goodFit . query ( <str> ) goodFitToUseNSpikes = goodFitToUse . query ( <str> ) goodPulseLatency = goodFitToUseNSpikes . query ( <str> ) dataframe = goodPulseLatency dataframe [ <str> ] = ( dataframe [ <str> ] - dataframe [ <str> ] ) / ( dataframe [ <str> ] + dataframe [ <str> ] ) ac = dataframe . groupby ( <str> ) . get_group ( <str> ) thal = dataframe . groupby ( <str> ) . get_group ( <str> ) PANELS = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> fullPanelWidthInches = 6.9 figSizeFactor = 2.5 figWidth = fullPanelWidthInches * ( figSizeFactor ) figHeight = figWidth / 3 figSize = [ figWidth , figHeight ] fontSizeModifier = figSizeFactor fontSizeLabels = figparams . fontSizeLabels * fontSizeModifier fontSizeTicks = figparams . fontSizeTicks * fontSizeModifier fontSizePanel = figparams . fontSizePanel * fontSizeModifier fontSizeTitles = figparams . fontSizeTitles * fontSizeModifier fontSizeNS = figparams . fontSizeNS * ( fontSizeModifier * 0.5 ) fontSizeStars = figparams . fontSizeStars * ( fontSizeModifier * 0.5 ) starHeightFactor = figparams . starHeightFactor starGapFactor = figparams . starGapFactor starYfactor = figparams . starYfactor dotEdgeColor = figparams . dotEdgeColor thalColorMap = <str> acColorMap = <str> colorATh = figparams . cp . TangoPalette [ <str> ] colorAC = figparams . cp . TangoPalette [ <str> ] markerAlpha = 1 labelPosX = [ 0.02 , 0.24 , 0.45 , 0.64 , 0.835 ] labelPosY = [ 0.92 , 0.42 ] laserColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 7 ) gs . update ( left = 0.04 , right = 0.98 , top = 0.95 , bottom = 0.175 , wspace = 1.1 , hspace = 0.5 ) axThalamus = plt . subplot ( gs [ 0 , 0 : 2 ] ) axCortex = plt . subplot ( gs [ 1 , 0 : 2 ] ) axBW = plt . subplot ( gs [ 0 : 2 , 2 ] ) axThresh = plt . subplot ( gs [ 0 : 2 , 3 ] ) axLatency = plt . subplot ( gs [ 0 : 2 , 4 ] ) axOnsetivity = plt . subplot ( gs [ 0 : 2 , 5 ] ) axMonotonicity = plt . subplot ( gs [ 0 : 2 , 6 ] ) plt . text ( - 0.45 , 1.03 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axThalamus . transAxes ) plt . text ( - 0.45 , 1.03 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axCortex . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axBW . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axThresh . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axLatency . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axOnsetivity . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axMonotonicity . transAxes ) messages = [ ] lowFreq = 2 highFreq = 40 nFreqLabels = 3 freqTickLocations = np . linspace ( 0 , 15 , nFreqLabels ) freqs = np . logspace ( np . log10 ( lowFreq ) , np . log10 ( highFreq ) , nFreqLabels ) freqs = np . round ( freqs , decimals = 1 ) nIntenLabels = 3 intensities = np . linspace ( 15 , 70 , nIntenLabels ) intenTickLocations = np . linspace ( 0 , 11 , nIntenLabels ) if PANELS [ 0 ] :      exampleKey = <str> exDataFR = exData [ exampleKey ] / 0.1 cax = axThalamus . imshow ( np . flipud ( exDataFR ) , interpolation = <str> , cmap = thalColorMap ) cbar = plt . colorbar ( cax , ax = axThalamus , format = <str> ) maxFR = np . max ( exDataFR . ravel ( ) ) cbar . ax . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 10 ) extraplots . set_ticks_fontsize ( cbar . ax , fontSizeTicks ) cbar . set_ticks ( [ 0 , maxFR ] ) cax . set_clim ( [ 0 , maxFR ] ) axThalamus . set_yticks ( intenTickLocations ) axThalamus . set_yticklabels ( intensities [ : : - 1 ] ) axThalamus . set_xticks ( freqTickLocations ) freqLabels = [ <str> . format ( freq ) for freq in freqs ] axThalamus . set_xticklabels ( freqLabels ) axThalamus . set_xlabel ( <str> , fontsize = fontSizeLabels ) axThalamus . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( axThalamus , fontSizeTicks )  if PANELS [ 1 ] :      exampleKey = <str> exDataFR = exData [ exampleKey ] / 0.1 cax = axCortex . imshow ( np . flipud ( exDataFR ) , interpolation = <str> , cmap = acColorMap ) cbar = plt . colorbar ( cax , ax = axCortex , format = <str> ) maxFR = np . max ( exDataFR . ravel ( ) ) cbar . ax . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 10 ) extraplots . set_ticks_fontsize ( cbar . ax , fontSizeTicks ) cbar . set_ticks ( [ 0 , maxFR ] ) cax . set_clim ( [ 0 , maxFR ] ) axCortex . set_yticks ( intenTickLocations ) axCortex . set_yticklabels ( intensities [ : : - 1 ] ) axCortex . set_xticks ( freqTickLocations ) freqLabels = [ <str> . format ( freq ) for freq in freqs ] axCortex . set_xticklabels ( freqLabels ) axCortex . set_xlabel ( <str> , fontsize = fontSizeLabels ) axCortex . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( axCortex , fontSizeTicks )  order = [ <str> , <str> ] colors = { <str> : colorATh , <str> : colorAC } groups = dataframe . groupby ( <str> ) plt . hold ( True ) if PANELS [ 2 ] :      popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axBW . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axBW , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axBW . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axBW , np . median ( acPopStat ) , 1 , 0.5 ) axBW . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axBW . set_xticks ( range ( 2 ) ) axBW . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axBW ) extraplots . set_ticks_fontsize ( axBW , fontSizeTicks ) axBW . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axBW ) if pVal < 0.05 :          starString = None starSize = fontSizeStars  else :          starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  plt . hold ( True ) if PANELS [ 3 ] :      popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] plt . sca ( axThresh ) spacing = 0.05 markers = extraplots . spread_plot ( 0 , thalPopStat , spacing ) plt . setp ( markers , mec = colorATh , mfc = <str> ) medline ( axThresh , np . median ( thalPopStat ) , 0 , 0.5 ) markers = extraplots . spread_plot ( 1 , acPopStat , spacing ) plt . setp ( markers , mec = colorAC , mfc = <str> ) medline ( axThresh , np . median ( acPopStat ) , 1 , 0.5 ) axThresh . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axThresh . set_xticks ( range ( 2 ) ) axThresh . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axThresh ) extraplots . set_ticks_fontsize ( axThresh , fontSizeTicks ) axThresh . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor if pVal < 0.05 :          starString = None starSize = fontSizeStars  else :          starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  if PANELS [ 4 ] :      popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axLatency . plot ( pos , thalPopStat * 1000 , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axLatency , np . median ( thalPopStat ) * 1000 , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axLatency . plot ( pos , acPopStat * 1000 , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axLatency , np . median ( acPopStat ) * 1000 , 1 , 0.5 ) axLatency . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axLatency . set_xticks ( range ( 2 ) ) axLatency . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axLatency ) axLatency . set_ylim ( [ - 0.001 , 65 ] ) extraplots . set_ticks_fontsize ( axLatency , fontSizeTicks ) axLatency . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat * 1000 ) , max ( thalPopStat * 1000 ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor if pVal < 0.05 :          starString = None starSize = fontSizeStars  else :          starString = <str> starSize = fontSizeNS  plt . sca ( axLatency ) extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  if PANELS [ 5 ] :      popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axOnsetivity . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axOnsetivity , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axOnsetivity . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axOnsetivity , np . median ( acPopStat ) , 1 , 0.5 ) axOnsetivity . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axOnsetivity . set_xticks ( range ( 2 ) ) axOnsetivity . set_xlim ( [ - 0.5 , 1.5 ] ) axOnsetivity . set_ylim ( [ - 0.51 , 1.1 ] ) extraplots . boxoff ( axOnsetivity ) extraplots . set_ticks_fontsize ( axOnsetivity , fontSizeTicks ) axOnsetivity . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axOnsetivity ) if pVal < 0.05 :          starString = None starSize = fontSizeStars  else :          starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  if PANELS [ 6 ] :      popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axMonotonicity . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axMonotonicity , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axMonotonicity . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axMonotonicity , np . median ( acPopStat ) , 1 , 0.5 ) axMonotonicity . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axMonotonicity . set_xticks ( range ( 2 ) ) axMonotonicity . set_xlim ( [ - 0.5 , 1.5 ] ) axMonotonicity . set_ylim ( [ 0 , 1.1 ] ) extraplots . boxoff ( axMonotonicity ) extraplots . set_ticks_fontsize ( axMonotonicity , fontSizeTicks ) axMonotonicity . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axMonotonicity ) if pVal < 0.05 :          starString = None starSize = fontSizeStars  else :          starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  plt . show ( ) print <str> for message in messages :      print ( message )  print <str> if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   