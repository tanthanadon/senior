import os import numpy as np from collections import Counter import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) from jaratoolbox import colorpalette from scipy import stats import copy import pandas as pd import figparams reload ( figparams ) np . random . seed ( 0 ) FIGNAME = <str> SAVE_FIGURE = 0 outputDir = figparams . FIGURE_OUTPUT_DIR figFilename = <str> figFormat = <str> figSize = [ 12 , 8 ] colorAC = colorpalette . TangoPalette [ <str> ] colorATh = colorpalette . TangoPalette [ <str> ] dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbase = pd . read_hdf ( dbPath , key = <str> ) fig = plt . gcf ( ) plt . clf ( ) fig . set_facecolor ( <str> ) def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( ax , yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) ax . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  plt . clf ( ) features = [ <str> , <str> ] yLabels = [ <str> , <str> , <str> ] goodISI = dbase . query ( <str> ) goodShape = goodISI . query ( <str> ) goodFit = goodShape . query ( <str> ) dataframeAC = goodFit . query ( <str> ) dataframeATh = goodFit . query ( <str> ) acUntaggedCellsAM = dataframeAC [ dataframeAC [ <str> ] == 2 ] thalUntaggedCellsAM = dataframeATh [ dataframeATh [ <str> ] == 2 ] goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUseForFreq = goodFit . query ( <str> ) acUntaggedCellsFreq = goodFitToUseForFreq [ goodFitToUseForFreq [ <str> ] == 2 ] thalUntaggedCellsFreq = goodFitToUseForFreq [ goodFitToUseForFreq [ <str> ] == 2 ] gs = gridspec . GridSpec ( 2 , 21 ) gs . update ( left = 0.12 , right = 0.98 , top = 0.88 , bottom = 0.15 , wspace = 40 , hspace = 0.7 ) axBW10 = plt . subplot ( gs [ 0 , 0 : 7 ] ) axThresh = plt . subplot ( gs [ 0 , 7 : 14 ] ) axLatency = plt . subplot ( gs [ 0 , 14 : 21 ] ) gsNSYNC = gridspec . GridSpecFromSubplotSpec ( 3 , 1 , subplot_spec = gs [ 1 , 0 : 3 ] ) axTaggedNSYNC = plt . subplot ( gsNSYNC [ 0 , 0 ] ) axCloseUntaggedNSYNC = plt . subplot ( gsNSYNC [ 1 , 0 ] ) axFarUntaggedNSYNC = plt . subplot ( gsNSYNC [ 2 , 0 ] ) axHighestSync = plt . subplot ( gs [ 1 , 3 : 9 ] ) axMIRate = plt . subplot ( gs [ 1 , 9 : 15 ] ) axMIPhase = plt . subplot ( gs [ 1 , 15 : 21 ] ) feature = <str> dataAC = acUntaggedCellsFreq [ feature ] [ pd . notnull ( acUntaggedCellsFreq [ feature ] ) ] dataATh = thalUntaggedCellsFreq [ feature ] [ pd . notnull ( thalUntaggedCellsFreq [ feature ] ) ] ax = axBW10 ax . set_ylabel ( <str> ) posAC = jitter ( np . ones ( len ( dataAC ) ) * 0 , 0.20 ) posATh = jitter ( np . ones ( len ( dataATh ) ) * 1 , 0.20 ) boxData = [ dataAC , dataATh ] bp = axBW10 . boxplot ( boxData , widths = 0.5 , showfliers = False , positions = [ 0 , 1 , 2 ] ) colors = [ colorAC , colorATh ] whiskerColors = [ colorAC , colorAC , colorATh , colorATh ] linewidth = 2 for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , whiskerColors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  plt . setp ( bp [ <str> ] , visible = False ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataAC ) ) , <str> . format ( len ( dataATh ) ) ] ) extraplots . boxoff ( ax ) yMin = 0 yMax = 2 yStars = [ yMax * 1.1 , yMax * 1.2 ] yStarHeight = ( yMax - yMin ) * 0.05 starGapFactor = 0.1 fontSizeStars = 9 zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataCloseUntagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor * 1.5 , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  ax . set_ylim ( [ yMin , yMax ] ) feature = <str> dataAC = acUntaggedCellsFreq [ feature ] [ pd . notnull ( acUntaggedCellsFreq [ feature ] ) ] dataATh = thalUntaggedCellsFreq [ feature ] [ pd . notnull ( thalUntaggedCellsFreq [ feature ] ) ] ax = axBW10 ax . set_ylabel ( <str> ) posAC = jitter ( np . ones ( len ( dataAC ) ) * 0 , 0.20 ) posATh = jitter ( np . ones ( len ( dataATh ) ) * 1 , 0.20 ) boxData = [ dataAC , dataATh ] bp = axBW10 . boxplot ( boxData , widths = 0.5 , showfliers = False , positions = [ 0 , 1 , 2 ] ) colors = [ colorAC , colorATh ] whiskerColors = [ colorAC , colorAC , colorATh , colorATh ] linewidth = 2 for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , whiskerColors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  plt . setp ( bp [ <str> ] , visible = False ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataAC ) ) , <str> . format ( len ( dataATh ) ) ] ) extraplots . boxoff ( ax ) yMin = 0 yMax = 2 yStars = [ yMax * 1.1 , yMax * 1.2 ] yStarHeight = ( yMax - yMin ) * 0.05 starGapFactor = 0.1 fontSizeStars = 9 zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataCloseUntagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor * 1.5 , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  ax . set_ylim ( [ yMin , yMax ] ) ax . set_ylim ( [ yMin , yMax ] ) ax . set_ylabel ( <str> ) latencyQuery = <str> taggedCellsLatency = taggedCellsFreq . query ( latencyQuery ) closeUntaggedCellsLatency = closeUntaggedCellsFreq . query ( latencyQuery ) farUntaggedCellsLatency = farUntaggedCellsFreq . query ( latencyQuery ) feature = <str> dataTagged = taggedCellsLatency [ feature ] [ pd . notnull ( taggedCellsLatency [ feature ] ) ] dataCloseUntagged = closeUntaggedCellsLatency [ feature ] [ pd . notnull ( closeUntaggedCellsLatency [ feature ] ) ] dataFarUntagged = farUntaggedCellsLatency [ feature ] [ pd . notnull ( farUntaggedCellsLatency [ feature ] ) ] ax = axLatency dataAC = acUntaggedCellsFreq [ feature ] [ pd . notnull ( acUntaggedCellsFreq [ feature ] ) ] dataATh = thalUntaggedCellsFreq [ feature ] [ pd . notnull ( thalUntaggedCellsFreq [ feature ] ) ] ax = axBW10 ax . set_ylabel ( <str> ) posAC = jitter ( np . ones ( len ( dataAC ) ) * 0 , 0.20 ) posATh = jitter ( np . ones ( len ( dataATh ) ) * 1 , 0.20 ) boxData = [ dataAC , dataATh ] bp = axBW10 . boxplot ( boxData , widths = 0.5 , showfliers = False , positions = [ 0 , 1 , 2 ] ) colors = [ colorAC , colorATh ] whiskerColors = [ colorAC , colorAC , colorATh , colorATh ] linewidth = 2 for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , whiskerColors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  plt . setp ( bp [ <str> ] , visible = False ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataAC ) ) , <str> . format ( len ( dataATh ) ) ] ) extraplots . boxoff ( ax ) yMin = 0 yMax = 2 yStars = [ yMax * 1.1 , yMax * 1.2 ] yStarHeight = ( yMax - yMin ) * 0.05 starGapFactor = 0.1 fontSizeStars = 9 zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataCloseUntagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor * 1.5 , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataAC , dataATh ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  ax . set_ylim ( [ yMin , yMax ] ) ax . set_ylabel ( <str> ) def plot_y_lines_with_ticks ( ax , x , y1 , y2 , gapwidth , tickwidth , color = <str> , starMarker = <str> , fontSize = 9 ) :      ax . plot ( [ x , x ] , [ y1 , np . mean ( [ y1 , y2 ] ) - ( gapwidth / 2 ) ] , <str> , clip_on = False , color = color ) ax . hold ( 1 ) ax . plot ( [ x , x ] , [ np . mean ( [ y1 , y2 ] ) + ( gapwidth / 2 ) , y2 ] , <str> , clip_on = False , color = color ) ax . plot ( [ x , x + xTickWidth ] , [ y1 , y1 ] , <str> , clip_on = False , color = color ) ax . plot ( [ x , x + xTickWidth ] , [ y2 , y2 ] , <str> , clip_on = False , color = color ) ax . text ( x , np . mean ( [ y1 , y2 ] ) , starMarker , fontsize = fontSize , va = <str> , ha = <str> , clip_on = False , rotation = 90 )  ax = axHighestSync feature = <str> dataTagged = taggedCellsAM [ feature ] [ pd . notnull ( taggedCellsAM [ feature ] ) ] dataCloseUntagged = closeUntaggedCellsAM [ feature ] [ pd . notnull ( closeUntaggedCellsAM [ feature ] ) ] dataFarUntagged = farUntaggedCellsAM [ feature ] [ pd . notnull ( farUntaggedCellsAM [ feature ] ) ] dataTagged = dataTagged [ dataTagged > 0 ] dataTagged = np . log ( dataTagged ) dataCloseUntagged = dataCloseUntagged [ dataCloseUntagged > 0 ] dataCloseUntagged = np . log ( dataCloseUntagged ) dataFarUntagged = dataFarUntagged [ dataFarUntagged > 0 ] dataFarUntagged = np . log ( dataFarUntagged ) ytickLabels = [ 4 , 8 , 16 , 32 , 64 , 128 ] yticks = np . log ( ytickLabels ) boxData = [ dataTagged , dataCloseUntagged , dataFarUntagged ] bp = axHighestSync . boxplot ( boxData , widths = 0.5 , showfliers = False , positions = [ 0 , 1 , 2 ] ) colors = [ colorTagged , colorCloseUntagged , colorFarUntagged ] whiskerColors = [ colorTagged , colorTagged , colorCloseUntagged , colorCloseUntagged , colorFarUntagged , colorFarUntagged ] linewidth = 2 for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , whiskerColors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  plt . setp ( bp [ <str> ] , visible = False ) ax . set_xticks ( [ 0 , 1 , 2 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataTagged ) ) , <str> . format ( len ( dataCloseUntagged ) ) , <str> . format ( len ( dataFarUntagged ) ) ] ) ax . set_yticks ( yticks ) ax . set_yticklabels ( ytickLabels ) yMin = np . log ( 3 ) yMax = np . log ( 128 ) yStars = [ yMax * 1.1 , yMax * 1.2 ] yStarHeight = ( yMax - yMin ) * 0.05 starGapFactor = 0.1 fontSizeStars = 9 zVal , pVal = stats . mannwhitneyu ( dataTagged , dataCloseUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataCloseUntagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor * 1.5 , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataTagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor , ax = ax )  ax . set_ylim ( [ yMin , yMax ] ) ax . set_ylabel ( <str> ) extraplots . boxoff ( ax ) ax = axMIRate feature = <str> dataTagged = taggedCellsAM [ feature ] [ pd . notnull ( taggedCellsAM [ feature ] ) ] dataTagged [ dataTagged < 0 ] = 0 dataCloseUntagged = closeUntaggedCellsAM [ feature ] [ pd . notnull ( closeUntaggedCellsAM [ feature ] ) ] dataCloseUntagged [ dataCloseUntagged < 0 ] = 0 dataFarUntagged = farUntaggedCellsAM [ feature ] [ pd . notnull ( farUntaggedCellsAM [ feature ] ) ] dataFarUntagged [ dataFarUntagged < 0 ] = 0 boxData = [ dataTagged , dataCloseUntagged , dataFarUntagged ] bp = axMIRate . boxplot ( boxData , widths = 0.5 , showfliers = False , positions = [ 0 , 1 , 2 ] ) colors = [ colorTagged , colorCloseUntagged , colorFarUntagged ] whiskerColors = [ colorTagged , colorTagged , colorCloseUntagged , colorCloseUntagged , colorFarUntagged , colorFarUntagged ] linewidth = 2 for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , whiskerColors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  for patch , color in zip ( bp [ <str> ] , colors ) :      patch . set_color ( color ) patch . set_lw ( linewidth )  plt . setp ( bp [ <str> ] , visible = False ) ax . set_xticks ( [ 0 , 1 , 2 ] ) ax . set_xticklabels ( [ <str> . format ( len ( dataTagged ) ) , <str> . format ( len ( dataCloseUntagged ) ) , <str> . format ( len ( dataFarUntagged ) ) ] ) yMin = 0 yMax = 0.3 yStars = [ yMax * 1.1 , yMax * 1.2 ] yStarHeight = ( yMax - yMin ) * 0.05 starGapFactor = [ 0.1 , 0.2 ] fontSizeStars = 9 zVal , pVal = stats . mannwhitneyu ( dataTagged , dataCloseUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 1 ] , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 0.9 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 1 ] , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataCloseUntagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 1 ] , ax = ax )  else :      extraplots . new_significance_stars ( [ 1.1 , 2 ] , yStars [ 0 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 1 ] , ax = ax )  zVal , pVal = stats . mannwhitneyu ( dataTagged , dataFarUntagged ) if pVal < 0.05 :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 0 ] , ax = ax )  else :      extraplots . new_significance_stars ( [ 0 , 2 ] , yStars [ 1 ] , yStarHeight , starMarker = <str> , fontSize = fontSizeStars , gapFactor = starGapFactor [ 0 ] , ax = ax )  ax . set_ylabel ( <str> ) ax . set_ylim ( [ yMin , yMax ] ) extraplots . boxoff ( ax ) ax = axMIPhase possibleFreqKeys = [ 4 , 5 , 8 , 11 , 16 , 22 , 32 , 45 , 64 , 90 , 128 ] keys = [ <str> . format ( rate ) for rate in possibleFreqKeys ] dataTagged = np . full ( ( len ( taggedCellsAM ) , len ( possibleFreqKeys ) ) , np . nan ) dataCloseUntagged = np . full ( ( len ( closeUntaggedCellsAM ) , len ( possibleFreqKeys ) ) , np . nan ) dataFarUntagged = np . full ( ( len ( farUntaggedCellsAM ) , len ( possibleFreqKeys ) ) , np . nan ) for externalInd , ( indRow , row ) in enumerate ( taggedCellsAM . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataTagged [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( closeUntaggedCellsAM . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataCloseUntagged [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( farUntaggedCellsAM . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          dataFarUntagged [ externalInd , indKey ] = row [ key ]   dataTagged [ dataTagged < 0 ] = 0 dataCloseUntagged [ dataCloseUntagged < 0 ] = 0 dataFarUntagged [ dataFarUntagged < 0 ] = 0 allPval = [ ] for indCol , freqKey in enumerate ( possibleFreqKeys ) :      dataTaggedThisFreq = dataTagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataTagged [ : , indCol ] ) ) ] dataCloseUntaggedThisFreq = dataCloseUntagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataCloseUntagged [ : , indCol ] ) ) ] dataFarUntaggedThisFreq = dataFarUntagged [ : , indCol ] [ np . logical_not ( np . isnan ( dataFarUntagged [ : , indCol ] ) ) ]  taggedMean = np . nanmean ( dataTagged , axis = 0 ) taggedStd = np . nanstd ( dataTagged , axis = 0 ) closeUntaggedMean = np . nanmean ( dataCloseUntagged , axis = 0 ) closeUntaggedStd = np . nanstd ( dataCloseUntagged , axis = 0 ) farUntaggedMean = np . nanmean ( dataFarUntagged , axis = 0 ) farUntaggedStd = np . nanstd ( dataFarUntagged , axis = 0 ) numTagged = sum ( np . logical_not ( np . isnan ( dataTagged [ : , 0 ] ) ) ) numCloseUntagged = sum ( np . logical_not ( np . isnan ( dataCloseUntagged [ : , 0 ] ) ) ) numFarUntagged = sum ( np . logical_not ( np . isnan ( dataFarUntagged [ : , 0 ] ) ) ) ax . plot ( taggedMean , <str> , color = colorTagged , label = <str> . format ( numTagged ) ) plt . hold ( 1 ) ax . plot ( closeUntaggedMean , <str> , color = colorCloseUntagged , label = <str> . format ( numCloseUntagged ) ) ax . plot ( farUntaggedMean , <str> , color = colorFarUntagged , label = <str> . format ( numFarUntagged ) ) ax . set_xticks ( range ( len ( possibleFreqKeys ) ) [ : : 2 ] ) ax . set_xticklabels ( possibleFreqKeys [ : : 2 ] ) ax . set_xlabel ( <str> ) extraplots . boxoff ( ax ) plt . show ( )  