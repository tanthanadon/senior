import os import sys import numpy as np import pandas as pd import importlib from jaratoolbox import settings import figparams from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis import scipy . stats as stats FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) paradigm = <str> scriptFullPath = os . path . realpath ( __file__ ) EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 baseRange = [ - 0.1 , 0 ] binEdges = [ 0 , 0.1 ] timeRange = [ - 0.2 , 0.2 ] qualityList = [ 1 , 6 ] ISIcutoff = 0.02 BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE psychometricFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) goodcells_psychometric = ( allcells_psychometric . cellQuality . isin ( qualityList ) ) & ( allcells_psychometric . ISI <= ISIcutoff ) cellInStr = ( allcells_psychometric . cellInStr == 1 ) keepAfterDupTest = allcells_psychometric . keep_after_dup_test cellSelector = goodcells_psychometric & cellInStr & keepAfterDupTest cellsToPlot = allcells_psychometric [ cellSelector ] bestFreqEachCell = np . zeros ( len ( allcells_psychometric ) ) maxZscoreEachCell = np . zeros ( len ( allcells_psychometric ) ) pValSoundResponseEachCell = np . ones ( len ( allcells_psychometric ) ) responseIndEachCell = np . zeros ( len ( allcells_psychometric ) ) freqSelectivityEachCell = np . ones ( len ( allcells_psychometric ) ) for ind , cell in cellsToPlot . iterrows ( ) :      print <str> , ind animalName = cell [ <str> ] allcellsFileName = <str> + animalName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) behavSession = cell [ <str> ] tetrode = cell [ <str> ] cluster = cell [ <str> ] cellIndex = allcells . cellDB . findcell ( animalName , behavSession , tetrode , cluster ) oneCell = allcells . cellDB [ cellIndex ] tuningSession = oneCell . tuningSession behavFileName = <str> . format ( animalName , paradigm , behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , animalName , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , animalName , tuningSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE spikeFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . tuningSession , <str> . format ( oneCell . tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . tuningSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( oneCell . tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == oneCell . cluster ] spikeData . samples = spikeData . samples [ clusters == oneCell . cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] if len ( soundOnsetTimes ) != len ( bdata [ <str> ] ) :          if len ( soundOnsetTimes ) == len ( bdata [ <str> ] ) + 1 :              soundOnsetTimes = soundOnsetTimes [ : - 1 ]  else :              continue   print <str> , ind possibleFreq = np . unique ( bdata [ <str> ] ) numFreqs = len ( possibleFreq ) zScores = [ ] pVals = [ ] responseEachFreq = [ ] responseInds = [ ] for freq in possibleFreq :          oneFreqTrials = bdata [ <str> ] == freq oneFreqSoundOnsetTimes = soundOnsetTimes [ oneFreqTrials ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , oneFreqSoundOnsetTimes , timeRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , binEdges ) print nspkBase . shape , nspkResp . shape responseIndex = ( np . mean ( nspkResp ) - np . mean ( nspkBase ) ) / ( np . mean ( nspkResp ) + np . mean ( nspkBase ) ) responseInds . append ( responseIndex ) responseEachFreq . append ( nspkResp ) print <str> , np . mean ( nspkBase ) , np . mean ( nspkResp ) , <str> , responseIndex [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) zScores . append ( maxZ ) pVals . append ( pValue )  indMaxZ = np . argmax ( np . abs ( zScores ) ) maxZscore = zScores [ indMaxZ ] bestFreq = possibleFreq [ indMaxZ ] pVal = pVals [ indMaxZ ] responseIndMaxZ = responseInds [ indMaxZ ] bestFreqEachCell [ ind ] = bestFreq maxZscoreEachCell [ ind ] = maxZscore responseIndEachCell [ ind ] = responseIndMaxZ pValSoundResponseEachCell [ ind ] = pVal statistics , freqSelectivityEachCell [ ind ] = stats . f_oneway ( * responseEachFreq )  if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , bestFreqEachCell = bestFreqEachCell , maxZscoreEachCell = maxZscoreEachCell , pValSoundResponseEachCell = pValSoundResponseEachCell , responseIndEachCell = responseIndEachCell , freqSelectivityEachCell = freqSelectivityEachCell , cellSelectorBoolArray = cellSelector , baselineWindow = baseRange , soundWindow = binEdges , paradigm = paradigm , script = scriptFullPath )  