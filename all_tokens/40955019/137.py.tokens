import os import numpy as np from numpy import inf from scipy import optimize from scipy import stats from scipy import signal from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import settings import figparams import pandas as pd FIGNAME = <str> dbPath = <str> db = pd . read_hdf ( dbPath , key = <str> ) examples = { } examples . update ( { <str> : <str> } ) examples . update ( { <str> : <str> } ) examples . update ( { <str> : <str> } ) examples . update ( { <str> : <str> } ) exampleList = [ val for key , val in examples . iteritems ( ) ] exampleKeys = [ key for key , val in examples . iteritems ( ) ] exampleSpikeData = { } for exampleInd , cellName in enumerate ( exampleList ) :      ( subject , date , depth , tetrodeCluster ) = cellName . split ( <str> ) depth = float ( depth ) tetrode = int ( tetrodeCluster [ 2 ] ) cluster = int ( tetrodeCluster [ 4 : ] ) indRow , dbRow = celldatabase . find_cell ( db , subject , date , depth , tetrode , cluster ) cell = ephyscore . Cell ( dbRow ) try :          ephysData , bdata = cell . load ( <str> )  except ( IndexError , ValueError ) :          failed = True print <str> . format ( indRow ) noTCinds . append ( indRow ) continue  eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimes = ephysData [ <str> ] baseRange = [ - 0.1 , 0 ] responseRange = [ 0 , 0.1 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ 1 ] ] freqEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) intensityEachTrial = bdata [ <str> ] possibleIntensity = np . unique ( intensityEachTrial ) popts = [ ] Rsquareds = [ ] allIntenBase = np . array ( [ ] ) allIntenResp = np . empty ( ( len ( possibleIntensity ) , len ( possibleFreq ) ) ) allIntenRespMedian = np . empty ( ( len ( possibleIntensity ) , len ( possibleFreq ) ) ) for indinten , inten in enumerate ( possibleIntensity ) :          spks = np . array ( [ ] ) freqs = np . array ( [ ] ) base = np . array ( [ ] ) for indfreq , freq in enumerate ( possibleFreq ) :              selectinds = np . flatnonzero ( ( freqEachTrial == freq ) & ( intensityEachTrial == inten ) ) selectedOnsetTimes = eventOnsetTimes [ selectinds ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , selectedOnsetTimes , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) base = np . concatenate ( [ base , nspkBase . ravel ( ) ] ) spks = np . concatenate ( [ spks , nspkResp . ravel ( ) ] ) freqs = np . concatenate ( [ freqs , np . ones ( len ( nspkResp . ravel ( ) ) ) * freq ] ) allIntenBase = np . concatenate ( [ allIntenBase , nspkBase . ravel ( ) ] ) allIntenResp [ indinten , indfreq ] = np . mean ( nspkResp )   exampleSpikeData . update ( { exampleKeys [ exampleInd ] : allIntenResp } )  exampleDataPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME , <str> ) np . savez ( exampleDataPath , ** exampleSpikeData )  