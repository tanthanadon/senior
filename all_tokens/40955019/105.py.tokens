import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors import matplotlib . patches as patches from mpl_toolkits . axes_grid1 . inset_locator import inset_axes from scipy import stats from jaratoolbox import settings from jaratoolbox import extraplots import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 6 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel fontSizeLegend = figparams . fontSizeLegend labelPosX = [ 0.01 , 0.3 , 0.64 ] labelPosY = [ 0.96 , 0.36 , 0.48 ] ExcColour = figparams . colp [ <str> ] Exclight = matplotlib . colors . colorConverter . to_rgba ( ExcColour , alpha = 0.5 ) PVcolour = figparams . colp [ <str> ] PVlight = matplotlib . colors . colorConverter . to_rgba ( PVcolour , alpha = 0.5 ) SOMcolour = figparams . colp [ <str> ] SOMlight = matplotlib . colors . colorConverter . to_rgba ( SOMcolour , alpha = 0.5 ) laserColour = figparams . colp [ <str> ] soundColour = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 3 , width_ratios = [ 0.8 , 0.8 , 1.1 ] , height_ratios = [ 2 , 1 ] ) gs . update ( top = 0.96 , left = 0.07 , right = 0.95 , bottom = 0.11 , wspace = 0.5 , hspace = 0.3 ) exampleNoSOM = <str> exampleNoPV = <str> summaryFileName = <str> def bootstrap_median_CI ( data , reps = 1000 , interval = 95 ) :      medians = np . zeros ( reps ) for ind in range ( reps ) :          samples = np . random . choice ( data , len ( data ) , replace = True ) medians [ ind ] = np . median ( samples )  low = np . percentile ( medians , ( 100 - interval ) / 2.0 ) high = np . percentile ( medians , interval + ( 100 - interval ) / 2.0 ) return [ low , high ]  if PANELS [ 0 ] :      exampleCells = [ exampleNoPV , exampleNoSOM ] cellColours = [ [ PVcolour , PVlight ] , [ SOMcolour , SOMlight ] ] panelLabels = [ <str> , <str> ] for indCell , cell in enumerate ( exampleCells ) :          axRaster = gs [ 0 , indCell ] exampleDataFullPath = os . path . join ( dataDir , cell ) exampleData = np . load ( exampleDataFullPath ) colours = [ [ ExcColour , Exclight ] , cellColours [ indCell ] ] possibleBands = exampleData [ <str> ] bandLabels = possibleBands . tolist ( ) bandLabels [ - 1 ] = <str> laserTrials = exampleData [ <str> ] inner = gridspec . GridSpecFromSubplotSpec ( 2 , 1 , subplot_spec = axRaster , wspace = 0.1 , hspace = 0.2 ) for laser in laserTrials :              thisAx = plt . subplot ( inner [ laser , 0 ] ) colorEachCond = colours [ laser ] * ( len ( possibleBands ) / 2 + 1 ) pRaster , hcond , zline = extraplots . raster_plot ( exampleData [ <str> ] , exampleData [ <str> ] , exampleData [ <str> ] , trialsEachCond = exampleData [ <str> ] [ : , 1 : , laser ] , labels = bandLabels [ 1 : ] , colorEachCond = colorEachCond ) plt . setp ( pRaster , ms = 3 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = np . array ( plt . ylim ( ) ) soundPatch = patches . Rectangle ( ( 0.0 , yLims [ 1 ] * 1.03 ) , 1.0 , yLims [ 1 ] * 0.04 , linewidth = 1 , edgecolor = soundColour , facecolor = soundColour , clip_on = False ) thisAx . add_patch ( soundPatch ) if not laser :                  thisAx . set_xticklabels ( <str> )  else :                  laserPatch = patches . Rectangle ( ( - 0.1 , yLims [ 1 ] * 1.1 ) , 1.3 , yLims [ 1 ] * 0.04 , linewidth = 1 , edgecolor = laserColour , facecolor = laserColour , clip_on = False ) thisAx . add_patch ( laserPatch )   plt . xlabel ( <str> , fontsize = fontSizeLabels ) thisAx . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ indCell ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )   if PANELS [ 1 ] :      exampleCells = [ exampleNoPV , exampleNoSOM ] figLegends = [ <str> , <str> ] excColour = figparams . colp [ <str> ] PVcolour = figparams . colp [ <str> ] SOMcolour = figparams . colp [ <str> ] colours = [ [ excColour , PVcolour ] , [ excColour , SOMcolour ] ] lineType = [ <str> , <str> ] panelLabels = [ <str> , <str> ] legendLocs = [ ( 1 , 1 ) , ( 1 , 0.5 ) ] for indCell , cell in enumerate ( exampleCells ) :          exampleDataFullPath = os . path . join ( dataDir , cell ) exampleData = np . load ( exampleDataFullPath ) sustainedResponseArray = exampleData [ <str> ] sustainedSEM = exampleData [ <str> ] baseline = sustainedResponseArray [ 0 ] bands = exampleData [ <str> ] laserTrials = exampleData [ <str> ] bandLabels = [ <str> . format ( band ) for band in np . unique ( possibleBands ) ] fitBands = exampleData [ <str> ] fitResponseNoLaser = exampleData [ <str> ] fitResponseLaser = exampleData [ <str> ] fits = [ fitResponseNoLaser , fitResponseLaser ] lines = [ ] SIs = [ float ( exampleData [ <str> ] ) , float ( exampleData [ <str> ] ) ] print <str> . format ( figLegends [ indCell ] , SIs ) plt . hold ( 1 ) axCurve = plt . subplot ( gs [ 1 , indCell ] ) axCurve . set_xscale ( <str> , basex = 2 ) for laser in laserTrials :              thisResponse = sustainedResponseArray [ : , laser ] . flatten ( ) thisSEM = sustainedSEM [ : , laser ] . flatten ( ) plt . plot ( bands [ 1 : ] , thisResponse [ 1 : ] , <str> , ms = 5 , color = colours [ indCell ] [ laser ] , mec = colours [ indCell ] [ laser ] , clip_on = False ) plt . errorbar ( bands [ 1 : ] , thisResponse [ 1 : ] , yerr = [ thisSEM [ 1 : ] , thisSEM [ 1 : ] ] , fmt = <str> , ecolor = colours [ indCell ] [ laser ] ) line , = plt . plot ( fitBands , fits [ laser ] , lineType [ laser ] , lw = 1.5 , color = colours [ indCell ] [ laser ] ) lines . append ( line )  plt . legend ( [ lines [ - 1 ] , lines [ 0 ] ] , [ figLegends [ indCell ] , <str> ] , frameon = False , fontsize = fontSizeLegend , bbox_to_anchor = legendLocs [ indCell ] , handlelength = 2.4 ) axCurve . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ indCell ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axCurve . set_ylim ( bottom = 0 ) axCurve . set_xticks ( bands [ 1 : ] ) axCurve . tick_params ( top = False , right = False , which = <str> ) extraplots . boxoff ( axCurve ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) bands = bands . tolist ( ) bands [ - 1 ] = <str> axCurve . set_xticklabels ( bands [ 1 : ] ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( 0.2 , 7 )   axSummaries = gs [ : , 2 ] gs2 = gridspec . GridSpecFromSubplotSpec ( 2 , 1 , subplot_spec = axSummaries , wspace = 0.3 , hspace = 0.4 ) if PANELS [ 2 ] :      EXCLUDE = 0 summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedSuppressionNoLaser = summaryData [ <str> ] PVsustainedSuppressionLaser = summaryData [ <str> ] SOMsustainedSuppressionNoLaser = summaryData [ <str> ] SOMsustainedSuppressionLaser = summaryData [ <str> ] if EXCLUDE :          PVnonzeroInds = np . nonzero ( PVsustainedSuppressionNoLaser ) PVsustainedSuppressionNoLaser = PVsustainedSuppressionNoLaser [ PVnonzeroInds ] PVsustainedSuppressionLaser = PVsustainedSuppressionLaser [ PVnonzeroInds ] SOMnonzeroInds = np . nonzero ( SOMsustainedSuppressionNoLaser ) SOMsustainedSuppressionNoLaser = SOMsustainedSuppressionNoLaser [ SOMnonzeroInds ] SOMsustainedSuppressionLaser = SOMsustainedSuppressionLaser [ SOMnonzeroInds ]  PVsupNoLaser = summaryData [ <str> ] PVsupLaser = summaryData [ <str> ] semPVsupNoLaser = summaryData [ <str> ] semPVsupLaser = summaryData [ <str> ] SOMsupNoLaser = summaryData [ <str> ] SOMsupLaser = summaryData [ <str> ] semSOMsupNoLaser = summaryData [ <str> ] semSOMsupLaser = summaryData [ <str> ] panelLabel = <str> cellLabels = [ <str> , <str> ] cellTypeColours = [ PVcolour , SOMcolour ] axScatter = plt . subplot ( gs2 [ 0 , 0 ] ) plt . hold ( True ) plt . plot ( [ - 2 , 2 ] , [ - 2 , 2 ] , <str> ) l2 , = plt . plot ( SOMsustainedSuppressionNoLaser , SOMsustainedSuppressionLaser , <str> , color = <str> , mec = SOMcolour , ms = 3.2 , markeredgewidth = 1.2 ) l1 , = plt . plot ( PVsustainedSuppressionNoLaser , PVsustainedSuppressionLaser , <str> , color = PVcolour , mec = <str> , ms = 4 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( - 0.1 , 1.1 ) plt . ylim ( - 0.1 , 1.1 ) plt . legend ( [ l1 , l2 ] , cellLabels , loc = <str> , fontsize = fontSizeLegend , numpoints = 1 , handlelength = 0.3 , markerscale = 1.7 , frameon = False , ) extraplots . boxoff ( axScatter ) axScatter . set ( adjustable = <str> , aspect = <str> ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) noPV = stats . wilcoxon ( PVsustainedSuppressionNoLaser , PVsustainedSuppressionLaser ) [ 1 ] noSOM = stats . wilcoxon ( SOMsustainedSuppressionNoLaser , SOMsustainedSuppressionLaser ) [ 1 ] print <str> . format ( noPV , noSOM ) reps = 1000 pVals = np . zeros ( reps ) sampleSize = len ( PVsustainedSuppressionLaser ) SOMinds = range ( len ( SOMsustainedSuppressionLaser ) ) for ind in range ( reps ) :          indsToUse = np . random . choice ( SOMinds , sampleSize , replace = False ) pVals [ ind ] = stats . wilcoxon ( SOMsustainedSuppressionNoLaser [ indsToUse ] , SOMsustainedSuppressionLaser [ indsToUse ] ) [ 1 ]  print <str> . format ( reps , np . median ( pVals ) ) noPVsupDiff = ( PVsustainedSuppressionLaser - PVsustainedSuppressionNoLaser ) / np . mean ( PVsustainedSuppressionNoLaser ) noSOMsupDiff = ( SOMsustainedSuppressionLaser - SOMsustainedSuppressionNoLaser ) / np . mean ( SOMsustainedSuppressionNoLaser ) supDiffs = [ noPVsupDiff , noSOMsupDiff ] axInset = inset_axes ( axScatter , width = <str> , height = <str> , loc = 4 , bbox_to_anchor = ( 0.16 , 0.02 , 1 , 1 ) , bbox_transform = axScatter . transAxes ) width = 0.6 loc = np . arange ( 1 , 3 ) SIMedians = [ 100.0 * np . median ( noPVsupDiff ) , 100.0 * np . median ( noSOMsupDiff ) ] SICIs = [ bootstrap_median_CI ( 100.0 * noPVsupDiff ) , bootstrap_median_CI ( 100.0 * noSOMsupDiff ) ] for indType in range ( len ( SIMedians ) ) :          plt . plot ( [ loc [ indType ] - width / 2 , loc [ indType ] + width / 2 ] , [ SIMedians [ indType ] , SIMedians [ indType ] ] , color = cellTypeColours [ indType ] , linewidth = 3 ) plt . plot ( [ loc [ indType ] , loc [ indType ] ] , SICIs [ indType ] , color = cellTypeColours [ indType ] , linewidth = 1.5 ) plt . plot ( [ loc [ indType ] - width / 8 , loc [ indType ] + width / 8 ] , [ SICIs [ indType ] [ 0 ] , SICIs [ indType ] [ 0 ] ] , color = cellTypeColours [ indType ] , linewidth = 1.5 ) plt . plot ( [ loc [ indType ] - width / 8 , loc [ indType ] + width / 8 ] , [ SICIs [ indType ] [ 1 ] , SICIs [ indType ] [ 1 ] ] , color = cellTypeColours [ indType ] , linewidth = 1.5 )  yLims = ( - 36 , 10 ) plt . ylim ( yLims ) plt . xlim ( 0.3 , 3.0 ) axInset . yaxis . tick_right ( ) axInset . yaxis . set_ticks_position ( <str> ) plt . locator_params ( axis = <str> , nbins = 5 ) axInset . spines [ <str> ] . set_visible ( False ) axInset . spines [ <str> ] . set_visible ( False ) plt . ylabel ( <str> , fontsize = fontSizeLegend , rotation = - 90 , labelpad = 15 ) axInset . yaxis . set_label_position ( <str> ) axInset . tick_params ( axis = <str> , labelsize = fontSizeLegend ) plt . tick_params ( axis = <str> , which = <str> , bottom = False , top = False , labelbottom = False ) plt . plot ( loc [ 1 ] , 8 , <str> , mfc = <str> , clip_on = False ) axInset . annotate ( <str> , xy = ( 0.6 , 6 ) , xycoords = <str> , fontsize = 8 ) pVal = stats . ranksums ( noPVsupDiff , noSOMsupDiff ) [ 1 ] print <str> . format ( pVal )  if PANELS [ 3 ] :      EXCLUDE = 0 summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVpeakChangeFR = summaryData [ <str> ] PVWNChangeFR = summaryData [ <str> ] SOMpeakChangeFR = summaryData [ <str> ] SOMWNChangeFR = summaryData [ <str> ] if EXCLUDE :          PVpeakChangeFR = PVpeakChangeFR [ PVnonzeroInds ] PVWNChangeFR = PVWNChangeFR [ PVnonzeroInds ] SOMpeakChangeFR = SOMpeakChangeFR [ SOMnonzeroInds ] SOMWNChangeFR = SOMWNChangeFR [ SOMnonzeroInds ]  PVpeakChange = summaryData [ <str> ] PVWNChange = summaryData [ <str> ] semPVpeakChange = summaryData [ <str> ] semPVWNChange = summaryData [ <str> ] SOMpeakChange = summaryData [ <str> ] SOMWNChange = summaryData [ <str> ] semSOMpeakChange = summaryData [ <str> ] semSOMWNChange = summaryData [ <str> ] panelLabel = <str> cellLabels = [ <str> , <str> ] PVcolour = figparams . colp [ <str> ] SOMcolour = figparams . colp [ <str> ] cellTypeColours = [ PVcolour , SOMcolour ] axScatter = plt . subplot ( gs2 [ 1 , 0 ] ) plt . hold ( True ) plt . plot ( [ - 20 , 30 ] , [ - 20 , 30 ] , <str> ) l1 , = plt . plot ( PVpeakChangeFR , PVWNChangeFR , <str> , color = PVcolour , mec = <str> , ms = 4 , zorder = 10 ) l2 , = plt . plot ( SOMpeakChangeFR , SOMWNChangeFR , <str> , color = <str> , mec = SOMcolour , ms = 3.2 , markeredgewidth = 1.2 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( - 8 , 16 ) plt . ylim ( - 8 , 16 ) plt . legend ( [ l1 , l2 ] , cellLabels , loc = <str> , fontsize = fontSizeLegend , numpoints = 1 , handlelength = 0.3 , markerscale = 1.7 , frameon = False , ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 2 ] , labelPosY [ 2 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( axScatter ) axScatter . set ( adjustable = <str> , aspect = <str> ) noPV = stats . wilcoxon ( PVpeakChangeFR , PVWNChangeFR ) [ 1 ] noSOM = stats . wilcoxon ( SOMpeakChangeFR , SOMWNChangeFR ) [ 1 ] print <str> . format ( noPV , noSOM ) axInset = inset_axes ( axScatter , width = <str> , height = <str> , loc = 4 , bbox_to_anchor = ( 0.16 , 0.02 , 1 , 1 ) , bbox_transform = axScatter . transAxes ) PVInds = ( PVWNChangeFR - PVpeakChangeFR ) SOMInds = ( SOMWNChangeFR - SOMpeakChangeFR ) width = 0.6 loc = np . arange ( 1 , 3 ) IndMedians = [ np . median ( PVInds ) , np . median ( SOMInds ) ] IndCIs = [ bootstrap_median_CI ( PVInds ) , bootstrap_median_CI ( SOMInds ) ] for indType in range ( len ( SIMedians ) ) :          plt . plot ( [ loc [ indType ] - width / 2 , loc [ indType ] + width / 2 ] , [ IndMedians [ indType ] , IndMedians [ indType ] ] , color = cellTypeColours [ indType ] , linewidth = 3 ) plt . plot ( [ loc [ indType ] , loc [ indType ] ] , IndCIs [ indType ] , color = cellTypeColours [ indType ] , linewidth = 1.5 ) plt . plot ( [ loc [ indType ] - width / 8 , loc [ indType ] + width / 8 ] , [ IndCIs [ indType ] [ 0 ] , IndCIs [ indType ] [ 0 ] ] , color = cellTypeColours [ indType ] , linewidth = 1.5 ) plt . plot ( [ loc [ indType ] - width / 8 , loc [ indType ] + width / 8 ] , [ IndCIs [ indType ] [ 1 ] , IndCIs [ indType ] [ 1 ] ] , color = cellTypeColours [ indType ] , linewidth = 1.5 )  axInset . yaxis . tick_right ( ) axInset . yaxis . set_ticks_position ( <str> ) plt . locator_params ( axis = <str> , nbins = 4 ) axInset . spines [ <str> ] . set_visible ( False ) axInset . spines [ <str> ] . set_visible ( False ) plt . ylabel ( <str> , fontsize = fontSizeLegend , rotation = - 90 , labelpad = 15 ) axInset . yaxis . set_label_position ( <str> ) axInset . tick_params ( axis = <str> , labelsize = fontSizeLegend ) plt . tick_params ( axis = <str> , which = <str> , bottom = False , top = False , labelbottom = False ) plt . xlim ( 0.3 , 3 ) plt . ylim ( - 0.3 , 1.2 ) plt . plot ( loc [ 1 ] , 1.15 , <str> , mfc = <str> , clip_on = False ) axInset . annotate ( <str> , xy = ( 0.6 , 0.3 ) , xycoords = <str> , fontsize = 8 )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    