import os import sys import numpy as np from jaratoolbox import celldatabase from jaratoolbox import settings from jaratoolbox import spikesorting import database_photoidentification import database_inactivation import database_cell_locations import studyparams def cluster_spike_data ( subjects ) :      for subject in subjects :          inforecPath = os . path . join ( settings . INFOREC_PATH , <str> . format ( subject ) ) ci = spikesorting . ClusterInforec ( inforecPath ) ci . process_all_experiments ( )   def cluster_rescue ( db , isiThreshold ) :      modifiedDB = spikesorting . rescue_clusters ( db , isiThreshold ) return modifiedDB  args = sys . argv [ 1 : ] if len ( args ) :      dbsToGenerate = np . zeros ( 2 ) indsToGenerate = [ int ( x ) for x in args ] dbsToGenerate [ indsToGenerate ] = 1  else :      print ( <str> )  if dbsToGenerate [ 0 ] :      chr2mice = studyparams . PV_CHR2_MICE + studyparams . SOM_CHR2_MICE basicDB = celldatabase . generate_cell_database_from_subjects ( chr2mice ) basicDB = cluster_rescue ( basicDB , isiThreshold = studyparams . ISI_THRESHOLD ) photoDBFilename = <str> photoIDDB = database_photoidentification . photoID_base_stats ( basicDB , filename = photoDBFilename ) photoIDDB = database_photoidentification . photoID_indices ( photoIDDB , filename = photoDBFilename ) photoIDDB = database_photoidentification . photoDB_cell_locations ( photoIDDB , filename = photoDBFilename )  if dbsToGenerate [ 1 ] :      archTmice = studyparams . PV_ARCHT_MICE + studyparams . SOM_ARCHT_MICE inactivationDBFilename = <str> basicDB = celldatabase . generate_cell_database_from_subjects ( archTmice ) inactivationDB = database_inactivation . inactivation_base_stats ( basicDB ) inactivationDB = database_inactivation . inactivation_indices ( inactivationDB ) inactivationDB = database_cell_locations . cell_locations ( inactivationDB ) celldatabase . save_hdf ( inactivationDB , inactivationDBFilename ) print inactivationDBFilename + <str>   