import os import numpy as np from collections import Counter import operator from jaratoolbox import settings reload ( settings ) from jaratoolbox import histologyanalysis as ha from allensdk . core . mouse_connectivity_cache import MouseConnectivityCache reload ( ha ) import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) annotationVolume = ha . AllenAnnotation ( ) corticalVolume = ha . AllenCorticalCoordinates ( ) subject = <str> mcc = MouseConnectivityCache ( resolution = 25 ) rsp = mcc . get_reference_space ( ) rspAnnotationVolumeRotated = np . rot90 ( rsp . annotation , 1 , axes = ( 2 , 0 ) ) jpgFolder = <str> registrationFolder = <str> anat036ccfSlice = { <str> : 163 , <str> : 167 , <str> : 171 , <str> : 175 , <str> : 179 , <str> : 183 , <str> : 187 , <str> : 191 , <str> : 195 , <str> : 199 , <str> : 203 , <str> : 207 , <str> : 211 , <str> : 215 , <str> : 219 , <str> : 223 , <str> : 226 , <str> : 229 , <str> : 230 } anat037ccfSlice = { <str> : 176 , <str> : 184 , <str> : 186 , <str> : 189 , <str> : 193 , <str> : 196 , <str> : 198 , <str> : 200 , <str> : 204 , <str> : 205 , <str> : 206 , <str> : 208 , <str> : 210 , <str> : 213 , <str> : 219 , <str> : 225 , <str> : 230 , <str> : 233 , <str> : 237 , <str> : 241 , <str> : 242 } anat043ccfSlice = { <str> : 169 , <str> : 173 , <str> : 176 , <str> : 180 , <str> : 184 , <str> : 186 , <str> : 188 , <str> : 190 , <str> : 191 , <str> : 196 , <str> : 199 , <str> : 202 , <str> : 205 , <str> : 209 , <str> : 212 , <str> : 215 , <str> : 219 , <str> : 222 , <str> : 226 , <str> : 230 } pixelSizes = { <str> : 4.0048 , <str> : 4.0048 , <str> : 1.29 , } def calculate_area_totals ( subject , registrationFolder , ccfSlice , nSliceGroups = 1 ) :      slices = sorted ( ccfSlice . keys ( ) ) sliceGroups = [ ] for sgInd in range ( nSliceGroups ) :          sliceGroups . append ( slices [ sgInd : : nSliceGroups ] )  groupSliceCount = [ ] for sgInd , slices in enumerate ( sliceGroups ) :          allAreaNames = [ ] allSliceCounts = [ ] allSliceTotalVoxels = [ ] for sliceName in slices :              ccfZ = ccfSlice [ sliceName ] filenameSVGPost = os . path . join ( settings . HISTOLOGY_PATH , subject , registrationFolder , <str> . format ( sliceName ) ) ( scale , translate , affine ) = ha . get_svg_transform ( filenameSVGPost , sliceSize = [ 1388 , 1040 ] ) filenameCSV = os . path . join ( settings . HISTOLOGY_PATH , subject , registrationFolder , <str> . format ( sliceName ) ) coords = ha . get_coords_from_fiji_csv ( filenameCSV , pixelSize = pixelSizes [ subject ] ) newCoords = ha . apply_svg_transform ( scale , translate , affine , coords ) structIDs = [ ] for indCoords in range ( np . shape ( newCoords ) [ 1 ] ) :                  x = newCoords [ 0 , indCoords ] y = newCoords [ 1 , indCoords ] thisCoordID = rspAnnotationVolumeRotated [ int ( x ) , int ( y ) , ccfZ ] structIDs . append ( thisCoordID )  structDicts = rsp . structure_tree . get_structures_by_id ( structIDs ) structNames = [ d [ <str> ] for d in structDicts ] structCounts = Counter ( structNames ) allSliceCounts . append ( structCounts ) totalVoxels = annotationVolume . get_total_voxels_per_area ( ccfZ ) totalVoxels = Counter ( totalVoxels ) allSliceTotalVoxels . append ( totalVoxels )  sliceCountSum = reduce ( operator . add , allSliceCounts ) sliceTotalVoxelsSum = reduce ( operator . add , allSliceTotalVoxels ) groupSliceCount . append ( sliceCountSum ) allAreaNames . extend ( sliceCountSum . keys ( ) )  uniqueAreaNames = set ( allAreaNames ) allAreasResults = { } for areaName in uniqueAreaNames :          areaCounts = [ ] for sliceCountSum in groupSliceCount :              areaCounts . append ( sliceCountSum . get ( areaName , 0 ) )  allAreasResults . update ( { areaName : areaCounts } )  return allAreasResults  nSliceGroups = 3 anat036sliceCountSum = calculate_area_totals ( <str> , registrationFolder , anat036ccfSlice , nSliceGroups = nSliceGroups ) anat037sliceCountSum = calculate_area_totals ( <str> , registrationFolder , anat037ccfSlice , nSliceGroups = nSliceGroups ) anat043sliceCountSum = calculate_area_totals ( <str> , registrationFolder , anat043ccfSlice , nSliceGroups = nSliceGroups ) nonLemNuclei = [ <str> , <str> , <str> ] anat036NonLem = np . array ( [ anat036sliceCountSum . get ( area , np . zeros ( nSliceGroups ) ) for area in nonLemNuclei ] ) anat037NonLem = np . array ( [ anat037sliceCountSum . get ( area , np . zeros ( nSliceGroups ) ) for area in nonLemNuclei ] ) anat043NonLem = np . array ( [ anat043sliceCountSum . get ( area , np . zeros ( nSliceGroups ) ) for area in nonLemNuclei ] ) anat036ventral = np . array ( anat036sliceCountSum . get ( <str> , np . zeros ( nSliceGroups ) ) ) anat037ventral = np . array ( anat037sliceCountSum . get ( <str> , np . zeros ( nSliceGroups ) ) ) anat043ventral = np . array ( anat043sliceCountSum . get ( <str> , np . zeros ( nSliceGroups ) ) ) savePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) np . save ( os . path . join ( savePath , <str> ) , anat036NonLem ) np . save ( os . path . join ( savePath , <str> ) , anat036ventral ) np . save ( os . path . join ( savePath , <str> ) , anat037NonLem ) np . save ( os . path . join ( savePath , <str> ) , anat037ventral ) np . save ( os . path . join ( savePath , <str> ) , anat043NonLem ) np . save ( os . path . join ( savePath , <str> ) , anat043ventral )  