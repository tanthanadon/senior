import os import numpy as np import pandas as pd from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . lines as mlines import figparams import matplotlib . patches as mpatches import scipy . stats as stats FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 3.5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.015 , 0.355 , 0.68 ] labelPosY = [ 0.92 ] soundColor = figparams . colp [ <str> ] colormapTuning = matplotlib . cm . winter timeRangeSound = [ - 0.2 , 0.5 ] msRaster = 2 msRaster1 = 1 smoothWinSizePsth = 2 lwPsth = 2 downsampleFactorPsth = 1 fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 3 ) gs . update ( left = 0.08 , right = 0.98 , top = 0.95 , bottom = 0.15 , wspace = 0.4 , hspace = 0.1 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 0 ] , hspace = 0.15 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 1 ] , hspace = 0.15 ) gs02 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 2 ] , hspace = 0.15 ) ax1 = plt . subplot ( gs00 [ 0 : 3 , : ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 0 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] colorEachFreq = [ colormapTuning ( x ) for x in np . linspace ( 1.0 , 0.2 , len ( possibleFreq ) ) ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeSound , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster1 ) plt . setp ( hcond , zorder = 3 ) plt . gca ( ) . set_xticklabels ( <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) ax2 = plt . subplot ( gs00 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labels [ ind ] )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 65 ] plt . ylim ( yLims ) plt . yticks ( yLims ) soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) extraplots . boxoff ( plt . gca ( ) )  ax3 = plt . subplot ( gs01 [ 0 : 3 , : ] ) ax3 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] colorEachFreq = [ colormapTuning ( x ) for x in np . linspace ( 1.0 , 0.2 , len ( possibleFreq ) ) ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeSound , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster1 ) plt . setp ( hcond , zorder = 3 ) plt . gca ( ) . set_xticklabels ( <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) ax4 = plt . subplot ( gs01 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labels [ ind ] )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 70 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) plt . ylim ( yLims ) plt . yticks ( yLims ) extraplots . boxoff ( plt . gca ( ) )  ax5 = plt . subplot ( gs02 [ 0 : 3 , : ] ) ax5 . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 2 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] colorEachFreq = [ colormapTuning ( x ) for x in np . linspace ( 1.0 , 0.2 , len ( possibleFreq ) ) ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeSound , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster1 ) plt . setp ( hcond , zorder = 3 ) plt . gca ( ) . set_xticklabels ( <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) ax6 = plt . subplot ( gs02 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labels [ ind ] )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 35 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) plt . ylim ( yLims ) plt . yticks ( yLims ) extraplots . boxoff ( plt . gca ( ) )  alphaLevel = 0.05 dataDirMv = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) movementSummaryFilename = <str> movementSummaryFullPath = os . path . join ( dataDirMv , movementSummaryFilename ) movementSummary = np . load ( movementSummaryFullPath ) sigMvModulated = movementSummary [ <str> ] dataDirSound = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) responseFilename = <str> responseFullPath = os . path . join ( dataDirSound , responseFilename ) responseEachCellEachFreq = np . load ( responseFullPath ) numCells = len ( sigMvModulated ) selectivityInds = np . array ( [ ] ) pVals = np . array ( [ ] ) for cellInd in range ( numCells ) :      fLow = responseEachCellEachFreq [ cellInd , : , : 3 ] . compressed ( ) fHigh = responseEachCellEachFreq [ cellInd , : , 3 : ] . compressed ( ) zScore , pVal = stats . ranksums ( fLow , fHigh ) pVals = np . append ( pVals , pVal ) if ( np . mean ( fHigh ) + np . mean ( fLow ) ) == 0 :          selectivityIndexThisCell = 0  else :          selectivityIndexThisCell = ( np . mean ( fHigh ) - np . mean ( fLow ) ) / ( np . mean ( fHigh ) + np . mean ( fLow ) )  selectivityInds = np . append ( selectivityInds , selectivityIndexThisCell )  nansInData = np . isnan ( selectivityInds ) if np . any ( nansInData ) :      print <str> selectivityInds [ nansInData ] = 0  hlFreqSelective = ( pVals <= alphaLevel ) bothSelective = sigMvModulated & hlFreqSelective numBothSel = sum ( bothSelective ) percentBothSel = 100 * numBothSel / float ( numCells ) print <str> . format ( numCells , numBothSel , percentBothSel ) rho , pCorr = stats . spearmanr ( movementSummary [ <str> ] , selectivityInds ) print <str> , rho , <str> , pCorr rhoS , pCorrS = stats . spearmanr ( movementSummary [ <str> ] [ bothSelective ] , selectivityInds [ bothSelective ] ) print <str> , rhoS , <str> , pCorrS plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   