import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . lines as mlines import scipy . stats as stats import figparams reload ( figparams ) STUDY_NAME = <str> FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 4 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 labelPosX = [ 0.02 , 0.5 ] labelPosY = [ 0.95 , 0.95 ] PHOTOSTIMCOLORS = { <str> : <str> , <str> : figparams . colp [ <str> ] , <str> : figparams . colp [ <str> ] } SHAPES = { <str> : <str> , <str> : <str> , <str> : <str> } fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) plt . hold ( True ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.13 , right = 0.97 , top = 0.95 , bottom = 0.1 , wspace = 0.29 , hspace = 0.15 ) ax1 = plt . subplot ( gs [ 0 , 0 ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) left014 = summary [ <str> ] left015 = summary [ <str> ] left016 = summary [ <str> ] right014 = summary [ <str> ] right015 = summary [ <str> ] right016 = summary [ <str> ] maxSessionNum = 10 left014 = left014 [ : maxSessionNum ] left015 = left015 [ : maxSessionNum ] left016 = left016 [ : maxSessionNum ] right014 = right014 [ : maxSessionNum ] right015 = right015 [ : maxSessionNum ] right016 = right016 [ : maxSessionNum ] print <str> . format ( maxSessionNum ) summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) left048 = summary [ <str> ] left056 = summary [ <str> ] right048 = summary [ <str> ] right056 = summary [ <str> ] ax1 . axhline ( y = 0 , color = <str> , linestyle = <str> ) np . random . seed ( 7 ) for animal , leftData in zip ( [ <str> , <str> , <str> ] , [ left014 , left015 , left016 ] ) :      randOffset = 0.3 * ( np . random . rand ( len ( leftData ) ) - 0.5 ) ax1 . plot ( 1 + randOffset , 100 * leftData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )  for animal , controlLeftData in zip ( [ <str> , <str> ] , [ left048 , left056 ] ) :      randOffset = 0.3 * ( np . random . rand ( len ( controlLeftData ) ) - 0.5 ) ax1 . plot ( 2 + randOffset , 100 * controlLeftData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )  for animal , rightData in zip ( [ <str> , <str> , <str> ] , [ right014 , right015 , right016 ] ) :      randOffset = 0.3 * ( np . random . rand ( len ( rightData ) ) - 0.5 ) ax1 . plot ( 3 + randOffset , 100 * rightData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )  for animal , controlRightData in zip ( [ <str> , <str> ] , [ right048 , right056 ] ) :      randOffset = 0.3 * ( np . random . rand ( len ( controlRightData ) ) - 0.5 ) ax1 . plot ( 4 + randOffset , 100 * controlRightData , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )  leftStimChange = np . concatenate ( ( left014 , left015 , left016 ) ) rightStimChange = np . concatenate ( ( right014 , right015 , right016 ) ) meanLeftStim = np . mean ( leftStimChange ) meanRightStim = np . mean ( rightStimChange ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 1 , 100 * np . tile ( meanLeftStim , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 3 , 100 * np . tile ( meanRightStim , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) controlLeftStimChange = np . concatenate ( ( left048 , left056 ) ) controlRightStimChange = np . concatenate ( ( right048 , right056 ) ) meanLeftStimCtrl = np . mean ( controlLeftStimChange ) meanRightStimCtrl = np . mean ( controlRightStimChange ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 2 , 100 * np . tile ( meanLeftStimCtrl , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 4 , 100 * np . tile ( meanRightStimCtrl , 2 ) , lw = 3 , color = PHOTOSTIMCOLORS [ <str> ] ) ( Z , pVal ) = stats . ranksums ( leftStimChange , controlLeftStimChange ) print <str> . format ( pVal ) extraplots . significance_stars ( [ 1 , 2 ] , 48 , 2 , starSize = 10 , gapFactor = 0.12 , color = <str> ) ( Z , pVal ) = stats . ranksums ( rightStimChange , controlRightStimChange ) print <str> . format ( pVal ) extraplots . significance_stars ( [ 3 , 4 ] , 48 , 2 , starSize = 10 , gapFactor = 0.12 , color = <str> ) xlim = [ 0.5 , 4.5 ] ylim = [ - 50 , 50 ] plt . xlim ( xlim ) plt . ylim ( ylim ) xticks = [ 1 , 2 , 3 , 4 ] xticklabels = [ <str> , <str> , <str> , <str> ] plt . xticks ( xticks , xticklabels , fontsize = fontSizeTicks ) plt . yticks ( range ( - 40 , 60 , 10 ) ) labelDis = 0.1 plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( ax1 ) ax1 . spines [ <str> ] . set_visible ( False ) [ t . set_visible ( False ) for t in ax1 . get_xticklines ( ) ] ax2 = plt . subplot ( gs [ 0 , 1 ] ) plt . hold ( True ) extraplots . boxoff ( ax2 ) ax2 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) FIGNAME_behav = <str> dataDir_behav = os . path . join ( settings . FIGURES_DATA_PATH , STUDY_NAME , FIGNAME_behav ) summaryFilename_behav = <str> summaryFullPath_behav = os . path . join ( dataDir_behav , summaryFilename_behav ) summary_behav = np . load ( summaryFullPath_behav ) left014 = summary_behav [ <str> ] [ : maxSessionNum ] left015 = summary_behav [ <str> ] [ : maxSessionNum ] left016 = summary_behav [ <str> ] [ : maxSessionNum ] right014 = summary_behav [ <str> ] [ : maxSessionNum ] right015 = summary_behav [ <str> ] [ : maxSessionNum ] right016 = summary_behav [ <str> ] [ : maxSessionNum ] left014sessions = summary_behav [ <str> ] left015sessions = summary_behav [ <str> ] left016sessions = summary_behav [ <str> ] right014sessions = summary_behav [ <str> ] right015sessions = summary_behav [ <str> ] right016sessions = summary_behav [ <str> ] locationDict = { <str> : { <str> : left014 , <str> : right016 , <str> : left015 , <str> : right015 } , <str> : { <str> : right014 , <str> : left016 } } ax2 . axhline ( y = 0 , color = <str> , linestyle = <str> ) np . random . seed ( 7 ) centerBias = [ ] borderBias = [ ] for key , valueDict in locationDict . items ( ) :      for label , value in valueDict . items ( ) :          if key == <str> :              centerBias . extend ( value )  elif key == <str> :              borderBias . extend ( value )  randOffset = 0.1 * ( np . random . rand ( len ( value ) ) - 0.5 ) if label . split ( <str> ) [ 1 ] == <str> :              ax2 . plot ( float ( key ) + randOffset , 100 * value , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )  elif label . split ( <str> ) [ 1 ] == <str> :              ax2 . plot ( float ( key ) + randOffset , 100 * value , <str> , mec = PHOTOSTIMCOLORS [ <str> ] , mfc = <str> )    meanCenterBias = np . mean ( centerBias ) meanBorderBias = np . mean ( borderBias ) ax2 . plot ( 0.1 * np . array ( [ - 0.5 , 0.5 ] ) + 0 , 100 * np . tile ( meanCenterBias , 2 ) , lw = 2 , color = <str> ) ax2 . plot ( 0.1 * np . array ( [ - 0.5 , 0.5 ] ) + 0.4 , 100 * np . tile ( meanBorderBias , 2 ) , lw = 2 , color = <str> ) ax2 . set_xlim ( [ - 0.2 , 0.6 ] ) ax2 . set_ylim ( [ - 15 , 50 ] ) ax2 . set_xticks ( [ 0 , 0.4 ] ) ax2 . set_xticklabels ( [ <str> , <str> ] ) ax2 . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) extraplots . boxoff ( ax2 ) ax2 . spines [ <str> ] . set_visible ( False ) [ t . set_visible ( False ) for t in ax2 . get_xticklines ( ) ] ( Z , pVal ) = stats . ranksums ( centerBias , borderBias ) print <str> . format ( pVal ) extraplots . significance_stars ( [ 0 , 0.4 ] , 48 , 2 , starSize = 10 , gapFactor = 0.12 , color = <str> ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   