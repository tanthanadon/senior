import numpy as np from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from matplotlib import pyplot as plt from scipy import stats import figparams import os import pandas as pd def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( ax , yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) ax . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  plt . clf ( ) messages = [ ] colorATh = figparams . cp . TangoPalette [ <str> ] colorAC = figparams . cp . TangoPalette [ <str> ] markerAlpha = 1 fullPanelWidthInches = 6.9 / 2 figSizeFactor = 1 figWidth = fullPanelWidthInches * ( figSizeFactor ) figHeight = figWidth / 1 figSize = [ figWidth , figHeight ] fontSizeModifier = 1.5 fontSizeLabels = figparams . fontSizeLabels * fontSizeModifier fontSizeTicks = figparams . fontSizeTicks * fontSizeModifier fontSizePanel = figparams . fontSizePanel * fontSizeModifier fontSizeTitles = figparams . fontSizeTitles * fontSizeModifier fontSizeNS = figparams . fontSizeNS * ( fontSizeModifier * 0.5 ) fontSizeStars = figparams . fontSizeStars * ( fontSizeModifier * 0.5 ) starHeightFactor = figparams . starHeightFactor starGapFactor = figparams . starGapFactor starYfactor = figparams . starYfactor dbPath = <str> database = celldatabase . load_hdf ( dbPath ) database [ <str> ] = database [ <str> ] - database [ <str> ] goodISI = database . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodNSpikes = goodLaser . query ( <str> ) goodPulseLatency = goodNSpikes . query ( <str> ) db = goodPulseLatency goodFit = db . query ( <str> ) goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUse = goodFit . query ( <str> ) goodFitToUseNSpikes = goodFitToUse . query ( <str> ) popStatCol = <str> ac = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) thal = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] axMaxFR = plt . subplot ( 131 ) pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axMaxFR . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axMaxFR , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axMaxFR . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axMaxFR , np . median ( acPopStat ) , 1 , 0.5 ) axMaxFR . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axMaxFR . set_xticks ( range ( 2 ) ) axMaxFR . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axMaxFR ) extraplots . set_ticks_fontsize ( axMaxFR , fontSizeTicks ) axMaxFR . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , np . median ( thalPopStat ) ) ) messages . append ( <str> . format ( popStatCol , np . median ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axMaxFR ) if pVal < 0.05 :      starString = None starSize = fontSizeStars  else :      starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 ) popStatCol = <str> ac = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) thal = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] axBaseFR = plt . subplot ( 132 ) pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axBaseFR . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axBaseFR , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axBaseFR . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axBaseFR , np . median ( acPopStat ) , 1 , 0.5 ) axBaseFR . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axBaseFR . set_xticks ( range ( 2 ) ) axBaseFR . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axBaseFR ) extraplots . set_ticks_fontsize ( axBaseFR , fontSizeTicks ) axBaseFR . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , np . median ( thalPopStat ) ) ) messages . append ( <str> . format ( popStatCol , np . median ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axBaseFR ) if pVal < 0.05 :      starString = None starSize = fontSizeStars  else :      starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 ) popStatCol = <str> ac = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) thal = goodFitToUseNSpikes . groupby ( <str> ) . get_group ( <str> ) acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] axEvokedFR = plt . subplot ( 133 ) pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) axEvokedFR . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) medline ( axEvokedFR , np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) axEvokedFR . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( axEvokedFR , np . median ( acPopStat ) , 1 , 0.5 ) axEvokedFR . set_ylabel ( <str> , fontsize = fontSizeLabels ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axEvokedFR . set_xticks ( range ( 2 ) ) axEvokedFR . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axEvokedFR ) extraplots . set_ticks_fontsize ( axEvokedFR , fontSizeTicks ) axEvokedFR . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) messages . append ( <str> . format ( popStatCol , np . median ( thalPopStat ) ) ) messages . append ( <str> . format ( popStatCol , np . median ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor plt . sca ( axEvokedFR ) if pVal < 0.05 :      starString = None starSize = fontSizeStars  else :      starString = <str> starSize = fontSizeNS  extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = starSize , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 ) plt . subplots_adjust ( wspace = 0.7 ) plt . show ( ) print <str> for message in messages :      print ( message )  print <str>  