import os import sys import importlib import numpy as np from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import settings from jaratest . lan import test055_load_n_plot_billy_data_one_cell as loader import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( dataDir ) :      os . mkdir ( dataDir )  timeRange = [ - 0.2 , 0.4 ] binWidth = 0.010 scriptFullPath = os . path . realpath ( __file__ ) BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE cellParamsList = [ { <str> : <str> , <str> : <str> , <str> : 5 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 8 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 4 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 5 , <str> : 3 } ] for cellParams in cellParamsList :      mouseName = cellParams [ <str> ] allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellIndex = allcells . cellDB . findcell ( ** cellParams ) thisCell = allcells . cellDB [ cellIndex ] ( eventOnsetTimes , spikeTimestamps , bdata ) = loader . load_remote_tuning_data ( thisCell , BEHAVIOR_PATH , EPHYS_PATH ) freqEachTrial = bdata [ <str> ] intensityEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) possibleIntensity = np . unique ( intensityEachTrial ) if len ( possibleIntensity ) != 1 :          intensity = 50 trialsThisIntensity = [ intensityEachTrial == intensity ] freqEachTrial = freqEachTrial [ trialsThisIntensity ] eventOnsetTimes = eventOnsetTimes [ trialsThisIntensity ]  possibleFreq = np . unique ( freqEachTrial ) trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) timeRange = [ - 0.5 , 1 ] binWidth = 0.010 ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , eventOnsetTimes , timeRange ) outputFile = <str> . format ( thisCell . animalName , thisCell . behavSession , thisCell . tetrode , thisCell . cluster ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , spikeTimestamps = spikeTimestamps , eventOnsetTimes = eventOnsetTimes , possibleFreq = possibleFreq , spikeTimesFromEventOnset = spikeTimesFromEventOnset , indexLimitsEachTrial = indexLimitsEachTrial , timeRange = timeRange , trialsEachFreq = trialsEachFreq , script = scriptFullPath , ** cellParams ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) outputFile = <str> . format ( thisCell . animalName , thisCell . behavSession , thisCell . tetrode , thisCell . cluster ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , possibleFreq = possibleFreq , spikeCountMat = spikeCountMat , timeVec = timeVec , trialsEachFreq = trialsEachFreq , timeRange = timeRange , binWidth = binWidth , script = scriptFullPath , ** cellParams )   