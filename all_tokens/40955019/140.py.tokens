import os import numpy as np import pandas as pd from matplotlib import pyplot as plt from matplotlib import gridspec from mpl_toolkits . mplot3d import Axes3D from jaratoolbox import celldatabase from jaratoolbox import spikesanalysis from jaratoolbox import spikesorting from jaratoolbox import ephyscore from jaratoolbox import extraplots from jaratoolbox import colorpalette as cp from jaratoolbox import settings from scipy import stats from scipy import signal STUDY_NAME = <str> SAVE = 0 dbPath = os . path . join ( settings . FIGURES_DATA_PATH , STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbPath ) lasercells = db . query ( <str> ) goodcells = lasercells . query ( <str> ) PLOT = True database = goodcells for indRow , dbRow in database . iterrows ( ) :      cell = ephyscore . Cell ( dbRow , useModifiedClusters = False ) try :          trainData , _ = cell . load ( <str> )  except ( IndexError , ValueError ) :          print <str> continue  spikeTimes = trainData [ <str> ] trainPulseOnsetTimes = trainData [ <str> ] [ <str> ] eventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( trainPulseOnsetTimes , 0.5 ) baseRange = [ - 0.050 , - 0.04 ] pulseTimes = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] alignmentRange = [ baseRange [ 0 ] , pulseTimes [ - 1 ] + binTime ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) zStats = np . empty ( len ( pulseTimes ) ) pVals = np . ones ( len ( pulseTimes ) ) respSpikeMean = np . empty ( len ( pulseTimes ) ) for indPulse , pulse in enumerate ( pulseTimes ) :          responseRange = [ pulse , pulse + binTime ] nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) respSpikeMean [ indPulse ] = nspkResp . ravel ( ) . mean ( ) try :              zStats [ indPulse ] , pVals [ indPulse ] = stats . mannwhitneyu ( nspkResp , nspkBase )  except ValueError :              zStats [ indPulse ] , pVals [ indPulse ] = [ 0 , 1 ]   numSignificant = sum ( pVals < 0.05 ) if PLOT :          plt . clf ( ) plt . plot ( spikeTimesFromEventOnset , trialIndexForEachSpike , <str> , ms = 4 ) plt . title ( <str> . format ( indRow , numSignificant ) ) for pulse in pulseTimes :              plt . axvline ( x = pulse , color = <str> ) plt . axvline ( x = pulse + binTime , color = <str> )  plt . waitforbuttonpress ( )  database . loc [ indRow , <str> ] = numSignificant excited = respSpikeMean > nspkBase . ravel ( ) . mean ( ) numTrainResponses = sum ( pVals < 0.05 ) excitedTrainResponse = ( pVals < 0.05 ) & excited numExcitedTrainResponse = sum ( excitedTrainResponse ) database . loc [ indRow , <str> ] = numTrainResponses  print goodcells [ <str> ]  