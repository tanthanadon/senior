import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as mpatches import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 8 , 4 ] dataFileName = <str> fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.01 , 0.46 ] labelPosY = [ 0.95 ] ExColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 , width_ratios = [ 1 , 1.2 ] ) gs . update ( top = 0.95 , bottom = 0.12 , left = 0.08 , right = 0.95 , wspace = 0.3 , hspace = 0.4 ) if PANELS [ 0 ] :      dataFullPath = os . path . join ( dataDir , dataFileName ) data = np . load ( dataFullPath ) axBar = plt . subplot ( gs [ 0 , 0 ] ) panelLabel = <str> ExAMrate = data [ <str> ] PVAMrate = data [ <str> ] SOMAMrate = data [ <str> ] rates = np . unique ( ExAMrate ) . astype ( int ) ExCounts = np . bincount ( ExAMrate . astype ( int ) ) [ rates ] PVCounts = np . bincount ( PVAMrate . astype ( int ) ) [ rates ] SOMCounts = np . bincount ( SOMAMrate . astype ( int ) ) [ rates ] ExPercents = 100.0 * ExCounts / np . sum ( ExCounts ) PVPercents = 100.0 * PVCounts / np . sum ( PVCounts ) SOMPercents = 100.0 * SOMCounts / np . sum ( SOMCounts ) plt . hold ( True ) xvals = np . arange ( len ( rates ) ) bar_width = 0.25 bar_spacing = 0.03 ExBars = plt . bar ( xvals - 1.5 * bar_width - bar_spacing , ExPercents , bar_width , color = ExColor , edgecolor = ExColor , label = <str> ) PVBars = plt . bar ( xvals - 0.5 * bar_width , PVPercents , bar_width , color = PVColor , edgecolor = PVColor , label = <str> ) SOMBars = plt . bar ( xvals + 0.5 * bar_width + bar_spacing , SOMPercents , bar_width , color = SOMColor , edgecolor = SOMColor , label = <str> ) plt . legend ( frameon = False , fontsize = fontSizeLabels , loc = <str> ) plt . ylim ( 0 , 100 ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) axBar . set_xticks ( xvals ) axBar . set_xticklabels ( rates ) extraplots . boxoff ( axBar ) axBar . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if PANELS [ 1 ] :      dataFullPath = os . path . join ( dataDir , dataFileName ) data = np . load ( dataFullPath ) axScatter = plt . subplot ( gs [ 0 , 1 ] ) panelLabel = <str> ExAMrate = data [ <str> ] PVAMrate = data [ <str> ] SOMAMrate = data [ <str> ] ExSI = data [ <str> ] PVSI = data [ <str> ] SOMSI = data [ <str> ] cellRates = [ ExAMrate , PVAMrate , SOMAMrate ] cellSIs = [ ExSI , PVSI , SOMSI ] cellTypeColours = [ ExColor , PVColor , SOMColor ] bar_width = 0.15 bar_spacing = 0.13 bar_loc = [ - 1 , 0 , 1 ] xticks = [ ] xticklabels = [ ] for cellType in range ( len ( cellRates ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ cellType ] , alpha = 0.5 ) thisCellTypeSIs = cellSIs [ cellType ] thisCellTypeAMrates = cellRates [ cellType ] SIs16 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates <= 16 ) [ 0 ] ] SIs32 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates == 32 ) [ 0 ] ] SIs64 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates == 64 ) [ 0 ] ] allSIs = [ ] for indSI , SIs in enumerate ( [ SIs16 , SIs32 , SIs64 ] ) :              if len ( SIs ) > 0 :                  allSIs . append ( SIs ) if indSI == 0 :                      xticklabels . append ( <str> )  else :                      xticklabels . append ( 16 * ( 2 ** indSI ) )    print <str> . format ( stats . kruskal ( * allSIs ) ) for indSI , SIs in enumerate ( allSIs ) :              xval = ( cellType + 1 ) + ( bar_loc [ indSI ] * ( bar_width + bar_spacing ) ) xticks . append ( xval ) xvals = xval * np . ones ( len ( SIs ) ) jitterAmt = np . random . random ( len ( xvals ) ) xvals = xvals + ( bar_width * jitterAmt ) - bar_width / 2 plt . hold ( True ) plt . plot ( xvals , SIs , <str> , mec = edgeColour , mfc = <str> , clip_on = False , markeredgewidth = 1.3 ) median = np . median ( SIs ) plt . plot ( [ xval - bar_width / 2 , xval + bar_width / 2 ] , [ median , median ] , <str> , color = <str> , mec = edgeColour , lw = 3 )   ExPatch = mpatches . Patch ( color = ExColor , label = <str> ) PVPatch = mpatches . Patch ( color = PVColor , label = <str> ) SOMPatch = mpatches . Patch ( color = SOMColor , label = <str> ) plt . legend ( handles = [ ExPatch , PVPatch , SOMPatch ] , frameon = False , fontsize = fontSizeLabels , loc = <str> ) plt . ylim ( - 0.1 , 1.1 ) plt . xlim ( xticks [ 0 ] - bar_width , xticks [ - 1 ] + bar_width ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) axScatter . set_xticks ( xticks ) axScatter . set_xticklabels ( xticklabels ) extraplots . boxoff ( axScatter ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    