import os import numpy as np from collections import Counter import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import colorpalette from jaratoolbox import spikesanalysis from jaratoolbox import ephyscore from jaratoolbox import celldatabase from scipy import stats import copy import pandas as pd import figparams reload ( figparams ) STUDY_NAME = <str> SAVE = False dbPath = <str> dataframe = celldatabase . load_hdf ( dbPath ) goodISI = dataframe . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodNSpikes = goodLaser . query ( <str> ) dbToUse = goodNSpikes allSigNums = [ ] for indIter , ( indRow , dbRow ) in enumerate ( dbToUse . iterrows ( ) ) :      cell = ephyscore . Cell ( dbRow , useModifiedClusters = False ) try :          trainData , _ = cell . load ( <str> )  except ( IndexError , ValueError ) :          print <str> continue  spikeTimes = trainData [ <str> ] trainPulseOnsetTimes = trainData [ <str> ] [ <str> ] eventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( trainPulseOnsetTimes , 0.5 ) baseRange = [ - 0.050 , 0 ] pulseTimes = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] alignmentRange = [ baseRange [ 0 ] , pulseTimes [ - 1 ] + binTime ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) zStats = np . empty ( len ( pulseTimes ) ) pVals = np . empty ( len ( pulseTimes ) ) respSpikeMean = np . empty ( len ( pulseTimes ) ) for indPulse , pulse in enumerate ( pulseTimes ) :          responseRange = [ pulse , pulse + binTime ] nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) respSpikeMean [ indPulse ] = nspkResp . ravel ( ) . mean ( ) try :              zStats [ indPulse ] , pVals [ indPulse ] = stats . mannwhitneyu ( nspkResp , nspkBase )  except ValueError :              zStats [ indPulse ] , pVals [ indPulse ] = [ 0 , 1 ]   numSignificant = sum ( pVals < 0.05 ) allSigNums . append ( numSignificant )   