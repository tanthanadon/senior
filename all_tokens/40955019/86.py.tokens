import os import numpy as np from jaratoolbox import celldatabase from jaratoolbox import spikesanalysis from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings import figparams import studyparams dbFilename = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbFilename ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , figName ) bestCells = db . query ( studyparams . SINGLE_UNITS ) bestCells = bestCells . query ( studyparams . GOOD_CELLS ) sustPVCells = bestCells . query ( studyparams . PV_CELLS ) sustSOMCells = bestCells . query ( studyparams . SOM_CELLS ) sustExCells = bestCells . query ( studyparams . EXC_CELLS ) PVsustainedSuppression = sustPVCells [ <str> ] SOMsustainedSuppression = sustSOMCells [ <str> ] ExsustainedSuppression = sustExCells [ <str> ] fitPVsustainedSuppression = sustPVCells [ <str> ] fitSOMsustainedSuppression = sustSOMCells [ <str> ] fitExsustainedSuppression = sustExCells [ <str> ] fitPVsustainedSuppressionNoZero = sustPVCells [ <str> ] fitSOMsustainedSuppressionNoZero = sustSOMCells [ <str> ] fitExsustainedSuppressionNoZero = sustExCells [ <str> ] PVsustainedPrefBW = sustPVCells [ <str> ] SOMsustainedPrefBW = sustSOMCells [ <str> ] ExsustainedPrefBW = sustExCells [ <str> ] fitPVsustainedPrefBW = sustPVCells [ <str> ] fitSOMsustainedPrefBW = sustSOMCells [ <str> ] fitExsustainedPrefBW = sustExCells [ <str> ] fitPVsustainedPrefBWNoZero = sustPVCells [ <str> ] fitSOMsustainedPrefBWNoZero = sustSOMCells [ <str> ] fitExsustainedPrefBWNoZero = sustExCells [ <str> ] PVonsetProp = sustPVCells [ <str> ] SOMonsetProp = sustSOMCells [ <str> ] ExonsetProp = sustExCells [ <str> ] PVsustProp = sustPVCells [ <str> ] SOMsustProp = sustSOMCells [ <str> ] ExsustProp = sustExCells [ <str> ] onsetTimeRange = [ 0.0 , 0.05 ] sustainedTimeRange = [ 0.2 , 1.0 ] PVBaseSpikeRates = np . zeros ( len ( sustPVCells ) ) SOMBaseSpikeRates = np . zeros ( len ( sustSOMCells ) ) ExBaseSpikeRates = np . zeros ( len ( sustExCells ) ) PVHighBandOnsetSpikeRates = np . zeros ( len ( sustPVCells ) ) SOMHighBandOnsetSpikeRates = np . zeros ( len ( sustSOMCells ) ) ExHighBandOnsetSpikeRates = np . zeros ( len ( sustExCells ) ) PVHighBandSustainedSpikeRates = np . zeros ( len ( sustPVCells ) ) SOMHighBandSustainedSpikeRates = np . zeros ( len ( sustSOMCells ) ) ExHighBandSustainedSpikeRates = np . zeros ( len ( sustExCells ) ) cells = [ sustPVCells , sustSOMCells , sustExCells ] highBandOnsetSpikeRates = [ PVHighBandOnsetSpikeRates , SOMHighBandOnsetSpikeRates , ExHighBandOnsetSpikeRates ] highBandSustainedSpikeRates = [ PVHighBandSustainedSpikeRates , SOMHighBandSustainedSpikeRates , ExHighBandSustainedSpikeRates ] baselineSpikeRates = [ PVBaseSpikeRates , SOMBaseSpikeRates , ExBaseSpikeRates ] highBands = [ 5 , 6 ] for ind , cellsThisType in enumerate ( cells ) :      for indCell in range ( len ( cellsThisType ) ) :          cell = cellsThisType . iloc [ indCell ] cellObj = ephyscore . Cell ( cell , useModifiedClusters = True ) bandEphysData , bandBData = cellObj . load_by_index ( int ( cell [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] if len ( bandEventOnsetTimes ) == 0 :              bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] + 0.0093  bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] baselineRange = [ - 1.0 , - 0.2 ] fullTimeRange = [ baselineRange [ 0 ] , sustainedTimeRange [ 1 ] ] onsetResponseDuration = onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] sustainedResponseTimeDuration = sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , fullTimeRange ) onsetSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , onsetTimeRange ) sustainedSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , sustainedTimeRange ) bandEachTrial = bandBData [ <str> ] ampEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) numAmps = np . unique ( ampEachTrial ) bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , ampEachTrial , numAmps ) trialsHighAmp = bandTrialsEachCond [ : , : , - 1 ] trialsHighBands = None for band in highBands :              if trialsHighBands is None :                  trialsHighBands = trialsHighAmp [ : , band ]  else :                  trialsHighBands = trialsHighBands | trialsHighAmp [ : , band ]   if onsetSpikeCountMat . shape [ 0 ] == len ( trialsHighBands ) + 1 :              onsetSpikeCountMat = onsetSpikeCountMat [ : - 1 , : ]  highBandOnsetSpikeCounts = onsetSpikeCountMat [ trialsHighBands ] highBandOnsetMean = np . mean ( highBandOnsetSpikeCounts ) / ( onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] ) highBandOnsetSpikeRates [ ind ] [ indCell ] = highBandOnsetMean if sustainedSpikeCountMat . shape [ 0 ] == len ( trialsHighBands ) + 1 :              sustainedSpikeCountMat = sustainedSpikeCountMat [ : - 1 , : ]  highBandSustainedSpikeCounts = sustainedSpikeCountMat [ trialsHighBands ] highBandSustainedMean = np . mean ( highBandSustainedSpikeCounts ) / ( sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] ) highBandSustainedSpikeRates [ ind ] [ indCell ] = highBandSustainedMean baselineDuration = baselineRange [ 1 ] - baselineRange [ 0 ] baselineSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , baselineRange ) baselineMean = np . mean ( baselineSpikeCountMat ) / baselineDuration baselineSpikeRates [ ind ] [ indCell ] = baselineMean   averagePSTHs = [ ] for ind , cellsThisType in enumerate ( cells ) :      thisCellTypeAllPSTHs = None for indCell in range ( len ( cellsThisType ) ) :          cell = cellsThisType . iloc [ indCell ] cellObj = ephyscore . Cell ( cell , useModifiedClusters = True ) bandEphysData , bandBData = cellObj . load_by_index ( int ( cell [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] if len ( bandEventOnsetTimes ) == 0 :              bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] + 0.0093  bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandTimeRange = [ - 0.5 , 1.5 ] binsize = 50 bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , [ bandTimeRange [ 0 ] - binsize , bandTimeRange [ 1 ] ] ) binEdges = np . around ( np . arange ( bandTimeRange [ 0 ] - ( binsize / 1000.0 ) , bandTimeRange [ 1 ] + 2 * ( binsize / 1000.0 ) , ( binsize / 1000.0 ) ) , decimals = 2 ) if thisCellTypeAllPSTHs is None :              thisCellTypeAllPSTHs = np . zeros ( ( len ( cellsThisType ) , len ( binEdges ) - 1 ) )  spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , binEdges ) trialsEachBand = behavioranalysis . find_trials_each_type ( bandBData [ <str> ] , np . unique ( bandBData [ <str> ] ) ) trialsHighBands = None for band in highBands :              if trialsHighBands is None :                  trialsHighBands = trialsEachBand [ : , band ]  else :                  trialsHighBands = trialsHighBands | trialsEachBand [ : , band ]   if spikeCountMat . shape [ 0 ] == len ( trialsHighBands ) + 1 :              spikeCountMat = spikeCountMat [ : - 1 , : ]  highBandSpikeCounts = spikeCountMat [ trialsHighBands ] thisPSTH = np . mean ( highBandSpikeCounts , axis = 0 ) thisPSTH = ( thisPSTH - np . mean ( thisPSTH [ 1 : np . where ( binEdges == - 0.05 ) [ 0 ] [ 0 ] ] ) ) / ( thisPSTH [ np . where ( binEdges == 0 ) [ 0 ] [ 0 ] ] - np . mean ( thisPSTH [ 1 : np . where ( binEdges == - 0.05 ) [ 0 ] [ 0 ] ] ) ) thisCellTypeAllPSTHs [ indCell , : ] = thisPSTH  thisCellTypeAllPSTHs = thisCellTypeAllPSTHs [ ~ np . isnan ( thisCellTypeAllPSTHs ) . any ( axis = 1 ) ] thisCellTypePSTH = np . median ( thisCellTypeAllPSTHs , axis = 0 ) smoothWinSize = 1 winShape = np . concatenate ( ( np . zeros ( smoothWinSize ) , np . ones ( smoothWinSize ) ) ) winShape = winShape / np . sum ( winShape ) thisCellTypePSTH = np . convolve ( thisCellTypePSTH , winShape , mode = <str> ) averagePSTHs . append ( thisCellTypePSTH )  numBands [ - 1 ] = 6 outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , PVsustainedResponses = highBandSustainedSpikeRates [ 0 ] , SOMsustainedResponses = highBandSustainedSpikeRates [ 1 ] , ExcSustainedResponses = highBandSustainedSpikeRates [ 2 ] , PVonsetResponses = highBandOnsetSpikeRates [ 0 ] , SOMonsetResponses = highBandOnsetSpikeRates [ 1 ] , ExcOnsetResponses = highBandOnsetSpikeRates [ 2 ] , possibleBands = numBands , PVbaselines = baselineSpikeRates [ 0 ] , SOMbaselines = baselineSpikeRates [ 1 ] , ExcBaselines = baselineSpikeRates [ 2 ] , PVonsetProp = PVonsetProp , SOMonsetProp = SOMonsetProp , ExcOnsetProp = ExonsetProp , PVsustProp = PVsustProp , SOMsustProp = SOMsustProp , ExcSustProp = ExsustProp , PVaveragePSTH = averagePSTHs [ 0 ] , SOMaveragePSTH = averagePSTHs [ 1 ] , ExcAveragePSTH = averagePSTHs [ 2 ] , PSTHbinStartTimes = binEdges [ : - 1 ] , rawPVsustainedSuppressionInd = PVsustainedSuppression , rawSOMsustainedSuppressionInd = SOMsustainedSuppression , rawExcSustainedSuppressionInd = ExsustainedSuppression , fitPVsustainedSuppressionInd = fitPVsustainedSuppression , fitSOMsustainedSuppressionInd = fitSOMsustainedSuppression , fitExcSustainedSuppressionInd = fitExsustainedSuppression , fitPVsustainedSuppressionNoZero = fitPVsustainedSuppressionNoZero , fitSOMsustainedSuppressionNoZero = fitSOMsustainedSuppressionNoZero , fitExcsustainedSuppressionNoZero = fitExsustainedSuppressionNoZero , rawPVsustainedPrefBW = PVsustainedPrefBW , rawSOMsustainedPrefBW = SOMsustainedPrefBW , rawExcSustainedPrefBW = ExsustainedPrefBW , fitPVsustainedPrefBW = fitPVsustainedPrefBW , fitSOMsustainedPrefBW = fitSOMsustainedPrefBW , fitExcSustainedPrefBW = fitExsustainedPrefBW , fitPVsustainedPrefBWNoZero = fitPVsustainedPrefBWNoZero , fitSOMsustainedPrefBWNoZero = fitSOMsustainedPrefBWNoZero , fitExcsustainedPrefBWNoZero = fitExsustainedPrefBWNoZero ) print outputFile + <str>   