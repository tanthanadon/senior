import os import sys import importlib import numpy as np from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import settings import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  scriptFullPath = os . path . realpath ( __file__ ) timeRange = [ - 0.5 , 1 ] binWidth = 0.010 EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 colorsDict = { <str> : figparams . colp [ <str> ] , <str> : figparams . colp [ <str> ] } BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE cellParamsList = [ { <str> : <str> , <str> : <str> , <str> : 2 , <str> : 7 } , { <str> : <str> , <str> : <str> , <str> : 7 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 8 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 4 , <str> : 11 } , { <str> : <str> , <str> : <str> , <str> : 7 , <str> : 9 } ] for cellParams in cellParamsList :      mouseName = cellParams [ <str> ] allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellIndex = allcells . cellDB . findcell ( ** cellParams ) oneCell = allcells . cellDB [ cellIndex ] behavFileName = <str> . format ( oneCell . animalName , <str> , oneCell . behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , oneCell . animalName , behavFileName ) bdata = loadbehavior . FlexCategBehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE spikeFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> . format ( oneCell . tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( oneCell . tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == oneCell . cluster ] spikeData . samples = spikeData . samples [ clusters == oneCell . cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventOnsetTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] trialsToUseRight = rightward trialsToUseLeft = leftward condLabels = [ <str> , <str> ] trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] colorEachCond = [ colorsDict [ <str> ] , colorsDict [ <str> ] ] eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] diffTimes = bdata [ <str> ] - bdata [ <str> ] movementOnsetTimes = soundOnsetTimes + diffTimes ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , movementOnsetTimes , timeRange ) outputFile = <str> . format ( oneCell . animalName , oneCell . behavSession , oneCell . tetrode , oneCell . cluster ) outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , spikeTimestamps = spikeTimestamps , eventOnsetTimes = movementOnsetTimes , spikeTimesFromEventOnset = spikeTimesFromEventOnset , soundTimesFromEventOnset = - ( diffTimes ) , indexLimitsEachTrial = indexLimitsEachTrial , condLabels = condLabels , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , script = scriptFullPath , EPHYS_SAMPLING_RATE = EPHYS_SAMPLING_RATE , soundTriggerChannel = soundTriggerChannel , timeRange = timeRange , colorLeftTrials = colorsDict [ <str> ] , colorRightTrials = colorsDict [ <str> ] , ** cellParams ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) outputFile = <str> . format ( oneCell . animalName , oneCell . behavSession , oneCell . tetrode , oneCell . cluster ) outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , spikeCountMat = spikeCountMat , timeVec = timeVec , condLabels = condLabels , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , timeRange = timeRange , binWidth = binWidth , EPHYS_SAMPLING_RATE = EPHYS_SAMPLING_RATE , soundTriggerChannel = soundTriggerChannel , colorLeftTrials = colorsDict [ <str> ] , colorRightTrials = colorsDict [ <str> ] , script = scriptFullPath , ** cellParams )   