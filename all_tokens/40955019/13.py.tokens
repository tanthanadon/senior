import os import numpy as np import matplotlib . pyplot as plt from scipy import stats import pandas as pd from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 6 , 6 ] mouse = <str> psychometricFilePath = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE if not os . path . ismount ( BEHAVIOR_PATH ) :      os . system ( <str> . format ( BEHAVIOR_PATH ) )  scriptFullPath = os . path . realpath ( __file__ ) allBehavSessions = np . unique ( allcells_psychometric . loc [ allcells_psychometric [ <str> ] == mouse , <str> ] . values ) resultsDict = { <str> : mouse , <str> : scriptFullPath } allRespTimes = np . array ( [ ] ) for behavSession in allBehavSessions :      behavFileName = <str> . format ( mouse , <str> , behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , mouse , behavFileName ) bdata = loadbehavior . FlexCategBehaviorData ( behavFile , readmode = <str> ) validTrials = bdata [ <str> ] . astype ( <str> ) & ( bdata [ <str> ] != bdata . labels [ <str> ] [ <str> ] ) timeCenterOut = bdata [ <str> ] [ validTrials ] timeSideIn = bdata [ <str> ] [ validTrials ] responseTimes = timeSideIn - timeCenterOut resultsDict [ behavSession ] = responseTimes allRespTimes = np . concatenate ( ( allRespTimes , responseTimes ) ) if np . any ( np . isnan ( responseTimes ) ) :          print <str> . format ( behavSession )   outputFile = <str> . format ( mouse ) outputDataDir = os . path . join ( dataDir , FIGNAME ) if not os . path . exists ( outputDataDir ) :      os . mkdir ( outputDataDir )  outputFullPath = os . path . join ( outputDataDir , outputFile ) np . savez ( outputFullPath , ** resultsDict ) plt . figure ( ) responseTimesToPlot = 1000 * allRespTimes [ ~ np . isnan ( allRespTimes ) ] plt . hist ( responseTimesToPlot , bins = 1000 ) plt . xlabel ( <str> ) plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )  print <str> , np . median ( responseTimesToPlot ) , <str> , np . std ( responseTimesToPlot )  