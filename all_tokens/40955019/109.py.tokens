import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( <str> , <str> ) PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 5 , 4 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.01 , 0.59 ] labelPosY = [ 0.96 ] summaryFileName = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( top = 0.90 , bottom = 0.08 , left = 0.12 , right = 0.95 , wspace = 0.4 , hspace = 0.6 ) if PANELS [ 0 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedSuppression = summaryData [ <str> ] SOMsustainedSuppression = summaryData [ <str> ] ACsustainedSuppression = summaryData [ <str> ] sustainedSuppressionVals = [ ACsustainedSuppression , PVsustainedSuppression , SOMsustainedSuppression ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs [ 0 , 0 ] ) plt . hold ( 1 ) for category in range ( len ( sustainedSuppressionVals ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( sustainedSuppressionVals [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , sustainedSuppressionVals [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( sustainedSuppressionVals [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( sustainedSuppressionVals ) + 1 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( sustainedSuppressionVals ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 3 ] , yLims [ 1 ] * 1.07 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 1.03 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) plt . hold ( 0 )  if PANELS [ 1 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedPrefBW = summaryData [ <str> ] PVsustainedPrefBW [ np . isinf ( PVsustainedPrefBW ) ] = 6 SOMsustainedPrefBW = summaryData [ <str> ] SOMsustainedPrefBW [ np . isinf ( SOMsustainedPrefBW ) ] = 6 ACsustainedPrefBW = summaryData [ <str> ] ACsustainedPrefBW [ np . isinf ( ACsustainedPrefBW ) ] = 6 possibleBands = summaryData [ <str> ] prefBandwidths = [ ACsustainedPrefBW , PVsustainedPrefBW , SOMsustainedPrefBW ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs [ 0 , 1 ] ) plt . hold ( 1 ) axScatter . set_yscale ( <str> , basey = 2 , linthreshy = 0.25 , linscaley = 0.5 ) plt . hold ( True ) for category in range ( len ( prefBandwidths ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( prefBandwidths [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . plot ( xval , prefBandwidths [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( prefBandwidths [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( prefBandwidths ) + 1 ) plt . ylim ( - 0.05 , 7 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( prefBandwidths ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) axScatter . set_yticks ( possibleBands ) bandLabels = possibleBands . tolist ( ) bandLabels [ - 1 ] = <str> axScatter . set_yticklabels ( bandLabels ) axScatter . tick_params ( top = False , right = False , which = <str> ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) plt . hold ( 0 )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    