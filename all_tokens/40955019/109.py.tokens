import numpy as np import scipy . stats import matplotlib . pyplot as plt from jaratoolbox import celldatabase db = celldatabase . load_hdf ( <str> ) bestCells = db . query ( <str> ) bestCells = bestCells . query ( <str> ) LASER_RESPONSE_PVAL = 0.001 EXC_LASER_RESPONSE_PVAL = 0.5 EXC_SPIKE_WIDTH = 0.0004 PV_CHR2_MICE = [ <str> , <str> , <str> , <str> ] SOM_CHR2_MICE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] PV_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , PV_CHR2_MICE ) ) SOM_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , SOM_CHR2_MICE ) ) EXC_CELLS = bestCells . query ( <str> . format ( EXC_LASER_RESPONSE_PVAL , EXC_SPIKE_WIDTH , SOM_CHR2_MICE ) ) primaryCells = EXC_CELLS [ EXC_CELLS [ <str> ] . str . contains ( <str> ) ] nonPrimaryCells = EXC_CELLS [ ~ EXC_CELLS [ <str> ] . str . contains ( <str> ) ] primarySIs = primaryCells [ <str> ] nonPrimarySIs = nonPrimaryCells [ <str> ] for ind , category in enumerate ( [ primarySIs , nonPrimarySIs ] ) :      xval = ( ind + 1 ) * np . ones ( len ( category ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , category , <str> , mfc = <str> , clip_on = False ) median = np . median ( category ) plt . plot ( [ ind + 0.7 , ind + 1.3 ] , [ median , median ] , <str> , color = <str> , lw = 3 )  plt . xlim ( 0 , 3 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> ) ax = plt . gca ( ) ax . set_xticks ( range ( 1 , 3 ) ) ax . set_xticklabels ( [ <str> , <str> ] , rotation = - 45 ) plt . show ( )  