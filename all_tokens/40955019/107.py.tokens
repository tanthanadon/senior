import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import extraplots from jaratoolbox import colorpalette as cp PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 6 , 10 ] fontSizeLabels = 12 fontSizeTicks = 12 fontSizePanel = 16 fontSizeTitles = 12 fontSizeLegend = 10 labelPosX = [ 0.01 , 0.36 , 0.69 ] labelPosY = [ 0.94 ] summaryFileName = <str> PVColor = cp . TangoPalette [ <str> ] SOMColor = cp . TangoPalette [ <str> ] ExcColor = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 3 , 1 ) gs . update ( top = 0.98 , bottom = 0.05 , left = 0.16 , right = 0.97 , wspace = 0.45 , hspace = 0.3 ) if PANELS [ 0 ] :      summaryData = np . load ( summaryFileName ) PVtunedAveragePSTH = summaryData [ <str> ] SOMtunedAveragePSTH = summaryData [ <str> ] ExcTunedAveragePSTH = summaryData [ <str> ] PVtunedOffCentreAveragePSTH = summaryData [ <str> ] SOMtunedOffCentreAveragePSTH = summaryData [ <str> ] ExcTunedOffCentreAveragePSTH = summaryData [ <str> ] PVuntunedAveragePSTH = summaryData [ <str> ] SOMuntunedAveragePSTH = summaryData [ <str> ] ExcUntunedAveragePSTH = summaryData [ <str> ] binStartTimes = summaryData [ <str> ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axPSTH = plt . subplot ( gs [ 0 , 0 ] ) plt . hold ( 1 ) l4 , = plt . plot ( binStartTimes [ 1 : - 1 ] , PVuntunedAveragePSTH [ 1 : - 1 ] , color = PVColor , lw = 2 , linestyle = <str> ) l5 , = plt . plot ( binStartTimes [ 1 : - 1 ] , SOMuntunedAveragePSTH [ 1 : - 1 ] , color = SOMColor , lw = 2 , linestyle = <str> ) l6 , = plt . plot ( binStartTimes [ 1 : - 1 ] , ExcUntunedAveragePSTH [ 1 : - 1 ] , color = ExcColor , lw = 2 , linestyle = <str> ) l7 , = plt . plot ( binStartTimes [ 1 : - 1 ] , PVtunedOffCentreAveragePSTH [ 1 : - 1 ] , color = cp . TangoPalette [ <str> ] , lw = 2 ) l8 , = plt . plot ( binStartTimes [ 1 : - 1 ] , SOMtunedOffCentreAveragePSTH [ 1 : - 1 ] , color = cp . TangoPalette [ <str> ] , lw = 2 ) l9 , = plt . plot ( binStartTimes [ 1 : - 1 ] , ExcTunedOffCentreAveragePSTH [ 1 : - 1 ] , color = <str> , lw = 2 ) l1 , = plt . plot ( binStartTimes [ 1 : - 1 ] , PVtunedAveragePSTH [ 1 : - 1 ] , color = PVColor , lw = 2 ) l2 , = plt . plot ( binStartTimes [ 1 : - 1 ] , SOMtunedAveragePSTH [ 1 : - 1 ] , color = SOMColor , lw = 2 ) l3 , = plt . plot ( binStartTimes [ 1 : - 1 ] , ExcTunedAveragePSTH [ 1 : - 1 ] , color = ExcColor , lw = 2 ) plt . legend ( [ l1 , l2 , l3 ] , categoryLabels , loc = <str> , frameon = False , fontsize = fontSizeLabels ) zline = plt . axvline ( 0 , color = <str> , zorder = - 10 ) plt . ylim ( - 0.1 , 1.1 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axPSTH )  if PANELS [ 1 ] :      summaryData = np . load ( summaryFileName ) PVtunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVtunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVuntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMtunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMtunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMuntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcTunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcTunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcUntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVresponseRates = [ PVtunedHighBandRate , PVtunedOffCentreHighBandRate , PVuntunedHighBandRate ] SOMresponseRates = [ SOMtunedHighBandRate , SOMtunedOffCentreHighBandRate , SOMuntunedHighBandRate ] ExcResponseRates = [ ExcTunedHighBandRate , ExcTunedOffCentreHighBandRate , ExcUntunedHighBandRate ] responseRates = [ ExcResponseRates , PVresponseRates , SOMresponseRates ] categoryLabels = [ <str> , <str> , <str> ] cellLabels = [ <str> , <str> , <str> ] cellTypeColours = [ ExcColor , PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs [ 1 , 0 ] ) plt . hold ( 1 ) for ind , response in enumerate ( responseRates ) :          bplot = plt . boxplot ( response , positions = np . array ( xrange ( len ( response ) ) ) * 4.0 + ind , sym = <str> , widths = 0.6 ) for box in range ( len ( bplot [ <str> ] ) ) :              plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ ind ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ ind ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ ind ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )   plt . plot ( [ - 10 , 50 ] , [ 0 , 0 ] , <str> ) plt . xlim ( - 1 , len ( responseRates ) * 4 - 1 ) plt . ylim ( - 12 , 60 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) * 4 + 1 , 4 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . hold ( 0 )  if PANELS [ 2 ] :      summaryData = np . load ( summaryFileName ) PVtunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVtunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVuntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMtunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMtunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMuntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcTunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcTunedOffCentreHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] ExcUntunedHighBandRate = summaryData [ <str> ] - summaryData [ <str> ] PVresponseRates = [ PVtunedHighBandRate , PVtunedOffCentreHighBandRate , PVuntunedHighBandRate ] SOMresponseRates = [ SOMtunedHighBandRate , SOMtunedOffCentreHighBandRate , SOMuntunedHighBandRate ] ExcResponseRates = [ ExcTunedHighBandRate , ExcTunedOffCentreHighBandRate , ExcUntunedHighBandRate ] responseRates = [ ExcResponseRates , PVresponseRates , SOMresponseRates ] categoryLabels = [ <str> , <str> , <str> ] cellLabels = [ <str> , <str> , <str> ] cellTypeColours = [ ExcColor , PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs [ 2 , 0 ] ) plt . hold ( 1 ) for ind , response in enumerate ( responseRates ) :          bplot = plt . boxplot ( response , positions = np . array ( xrange ( len ( response ) ) ) * 4.0 + ind , sym = <str> , widths = 0.6 ) for box in range ( len ( bplot [ <str> ] ) ) :              plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ ind ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ ind ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ ind ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )   plt . plot ( [ - 10 , 50 ] , [ 0 , 0 ] , <str> ) plt . xlim ( - 1 , len ( responseRates ) * 4 - 1 ) plt . ylim ( - 12 , 20 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) * 4 + 1 , 4 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . hold ( 0 )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    