import os import sys import pandas as pd import numpy as np from scipy import stats from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings import database_generation_funcs as funcs import figparams dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbase = celldatabase . load_hdf ( dbPath ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , figName ) cellList = [ { <str> : <str> , <str> : <str> , <str> : 950 , <str> : 6 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1240 , <str> : 2 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1140 , <str> : 1 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 975 , <str> : 7 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1275 , <str> : 4 , <str> : 2 } ] args = sys . argv [ 1 : ] if len ( args ) :      cellsToGenerate = [ int ( x ) for x in args ]  else :      cellsToGenerate = range ( len ( cellList ) )  print cellsToGenerate for indCell in cellsToGenerate :      cellInd , dbRow = celldatabase . find_cell ( dbase , ** cellList [ indCell ] ) cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) tuningEphysData , tuningBData = cell . load ( <str> ) tuningEventOnsetTimes = tuningEphysData [ <str> ] [ <str> ] if len ( tuningEventOnsetTimes ) == 0 :          tuningEventOnsetTimes = tuningEphysData [ <str> ] [ <str> ] + 0.0095  tuningEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( tuningEventOnsetTimes , minEventOnsetDiff = 0.2 ) tuningSpikeTimestamps = tuningEphysData [ <str> ] freqEachTrial = tuningBData [ <str> ] numFreqs = np . unique ( freqEachTrial ) intEachTrial = tuningBData [ <str> ] rasterTimeRange = [ - 0.3 , 0.5 ] tuningTimeRange = dbRow [ <str> ] baselineTimeRange = [ - 0.5 , - 0.1 ] fullRange = [ min ( rasterTimeRange + tuningTimeRange + baselineTimeRange ) , max ( rasterTimeRange + tuningTimeRange + baselineTimeRange ) ] trialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , numFreqs , intEachTrial , np . unique ( intEachTrial ) ) trialsHighInt = trialsEachCond [ : , : , - 1 ] tuningSpikeTimesFromEventOnset , trialIndexForEachSpike , tuningIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( tuningSpikeTimestamps , tuningEventOnsetTimes , fullRange ) tuningSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( tuningSpikeTimesFromEventOnset , tuningIndexLimitsEachTrial , tuningTimeRange ) responseArray , errorArray = funcs . calculate_tuning_curve_inputs ( tuningSpikeCountMat , freqEachTrial , intEachTrial ) responseArray = responseArray [ : , - 1 ] / ( tuningTimeRange [ 1 ] - tuningTimeRange [ 0 ] ) errorArray = errorArray [ : , - 1 ] / ( tuningTimeRange [ 1 ] - tuningTimeRange [ 0 ] ) gaussFit = dbRow [ <str> ] x_fine = np . linspace ( np . log2 ( numFreqs ) [ 0 ] , np . log2 ( numFreqs ) [ - 1 ] , 100 ) gaussCurve = funcs . gaussian ( x_fine , gaussFit [ 0 ] , gaussFit [ 1 ] , gaussFit [ 2 ] , gaussFit [ 3 ] ) R2 = dbRow [ <str> ] baselineSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( tuningSpikeTimesFromEventOnset , tuningIndexLimitsEachTrial , baselineTimeRange ) baselineSpikeRate = np . mean ( baselineSpikeCountMat . flatten ( ) ) / ( baselineTimeRange [ 1 ] - baselineTimeRange [ 0 ] ) prefFreq = dbRow [ <str> ] outputFile = <str> . format ( dbRow [ <str> ] , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , responseArray = responseArray , SEM = errorArray , possibleFreqs = numFreqs , spikeTimesFromEventOnset = tuningSpikeTimesFromEventOnset , indexLimitsEachTrial = tuningIndexLimitsEachTrial , trialsEachCond = trialsHighInt , tuningWindow = tuningTimeRange , rasterTimeRange = rasterTimeRange , baselineSpikeRate = baselineSpikeRate , fitXVals = x_fine , fitResponse = gaussCurve , R2 = R2 , prefFreq = prefFreq ) print outputFile + <str>   