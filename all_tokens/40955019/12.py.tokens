import os import numpy as np import pandas as pd from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . lines as mlines import figparams import matplotlib . patches as mpatches FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 8 , 6 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 labelPosX = [ 0.07 , 0.45 ] labelPosY = [ 0.9 , 0.45 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.15 , right = 0.85 , wspace = 0.5 , hspace = 0.5 ) alphaLevel = 0.05 numFreqs = 6 bonferroniCorrectedAlphaLevel = alphaLevel / numFreqs summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) sessionFreqsFilename = <str> sessionFreqsFullPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , sessionFreqsFilename ) sessionFreqs = pd . read_hdf ( sessionFreqsFullPath , key = <str> ) psychometricFilePath = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) cellSelectorBoolArray = summary [ <str> ] bestFreqEachCell = summary [ <str> ] [ cellSelectorBoolArray ] maxZscoreEachCell = summary [ <str> ] [ cellSelectorBoolArray ] responseIndEachCell = summary [ <str> ] [ cellSelectorBoolArray ] sigSoundResponse = ( summary [ <str> ] [ cellSelectorBoolArray ] <= bonferroniCorrectedAlphaLevel ) freqSelective = ( summary [ <str> ] [ cellSelectorBoolArray ] <= bonferroniCorrectedAlphaLevel ) & ( summary [ <str> ] [ cellSelectorBoolArray ] <= alphaLevel ) ax1 = plt . subplot ( gs [ 0 , 0 ] ) plt . hist ( ( responseIndEachCell [ sigSoundResponse ] , responseIndEachCell [ ~ sigSoundResponse ] ) , color = [ <str> , <str> ] , bins = 20 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) sig_patch = mpatches . Patch ( color = <str> , label = <str> ) nonsig_patch = mpatches . Patch ( facecolor = <str> , edgecolor = <str> , label = <str> ) plt . legend ( handles = [ sig_patch , nonsig_patch ] , loc = <str> , fontsize = fontSizeTicks , frameon = False , labelspacing = 0.1 , handlelength = 0.2 ) ax2 = plt . subplot ( gs [ 0 , 1 ] ) freqSelectiveCells = allcells_psychometric [ cellSelectorBoolArray ] [ freqSelective ] freqSelectiveCells [ <str> ] = bestFreqEachCell [ freqSelective ] numResponsiveContra = 0 numResponsiveIpsi = 0 freqInd = np . array ( [ ] , dtype = int ) for ind , cell in freqSelectiveCells . iterrows ( ) :      animalName = cell [ <str> ] behavSession = cell [ <str> ] thisSession = sessionFreqs . loc [ ( sessionFreqs [ <str> ] == animalName ) & ( sessionFreqs [ <str> ] == behavSession ) ] freqsThisSession = thisSession . loc [ : , <str> : <str> ] . transpose ( ) . values numFreqs = len ( freqsThisSession ) boundaryThisSession = np . logspace ( np . log2 ( float ( freqsThisSession [ numFreqs / 2 - 1 ] ) ) , np . log2 ( float ( freqsThisSession [ numFreqs / 2 ] ) ) , base = 2 , num = 3 ) [ 1 ] if cell [ <str> ] <= boundaryThisSession :          numResponsiveContra += 1  elif cell [ <str> ] > boundaryThisSession :          numResponsiveIpsi += 1  freqInd = np . append ( freqInd , ( np . flatnonzero ( freqsThisSession == cell [ <str> ] ) + 1 ) )  plt . hist ( freqInd ) plt . xlim ( [ 0 , 7 ] ) plt . xticks ( range ( 1 , 7 ) , [ <str> , <str> , <str> , <str> , <str> , <str> ] ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )  numCells = sum ( cellSelectorBoolArray ) print <str> , numCells numSoundResCells = sum ( sigSoundResponse . astype ( int ) ) print 100 * float ( numSoundResCells ) / numCells , <str> numFreqSelectiveCells = sum ( freqSelective . astype ( int ) ) print 100 * float ( numFreqSelectiveCells ) / numCells , <str> print numResponsiveContra , <str> , numResponsiveIpsi , <str>  