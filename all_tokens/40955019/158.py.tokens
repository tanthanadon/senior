import numpy as np from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis import pandas as pd import figparams import matplotlib . pyplot as plt from scipy import stats dbPath = <str> database = celldatabase . load_hdf ( dbPath ) goodISI = database . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodFit = goodLaser . query ( <str> ) goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUse = goodFit . query ( <str> ) goodFitToUseNSpikes = goodFitToUse . query ( <str> ) goodPulseLatency = goodFitToUseNSpikes . query ( <str> ) dbToUse = goodPulseLatency def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  plt . clf ( ) ax = plt . subplot ( 111 ) colorATh = <str> colorAC = <str> ac = dbToUse . groupby ( <str> ) . get_group ( <str> ) thal = dbToUse . groupby ( <str> ) . get_group ( <str> ) popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) ax . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) ax . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> ) ax . set_ylabel ( <str> ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> , <str> ] ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) print pVal  