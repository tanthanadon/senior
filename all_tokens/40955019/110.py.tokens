import numpy as np import scipy . stats import matplotlib . pyplot as plt from jaratoolbox import celldatabase FONTSIZE = 14 db = celldatabase . load_hdf ( <str> ) bestCells = db . query ( <str> ) bestCells = bestCells . query ( <str> ) LASER_RESPONSE_PVAL = 0.001 EXC_LASER_RESPONSE_PVAL = 0.5 EXC_SPIKE_WIDTH = 0.0004 PV_CHR2_MICE = [ <str> , <str> , <str> , <str> ] SOM_CHR2_MICE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] PV_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , PV_CHR2_MICE ) ) SOM_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , SOM_CHR2_MICE ) ) EXC_CELLS = bestCells . query ( <str> . format ( EXC_LASER_RESPONSE_PVAL , EXC_SPIKE_WIDTH , SOM_CHR2_MICE ) ) primaryCells = EXC_CELLS [ EXC_CELLS [ <str> ] . str . contains ( <str> ) ] nonPrimaryCells = EXC_CELLS [ ~ EXC_CELLS [ <str> ] . str . contains ( <str> ) ] primarySIs = primaryCells [ <str> ] nonPrimarySIs = nonPrimaryCells [ <str> ] excCellSIs = np . array ( EXC_CELLS [ <str> ] ) excCellDepths = np . array ( EXC_CELLS [ <str> ] ) notNanInds1 = np . where ( ~ np . isnan ( excCellDepths ) ) [ 0 ] plt . figure ( ) plt . subplot ( 1 , 3 , 1 ) plt . hold ( True ) plt . plot ( excCellDepths , excCellSIs , <str> , ms = 5 ) slope , intercept , rVal , pVal , stdErr = scipy . stats . linregress ( excCellDepths [ notNanInds1 ] , excCellSIs [ notNanInds1 ] ) xvals = np . linspace ( 0 , 1 , 200 ) yvals = slope * xvals + intercept plt . plot ( xvals , yvals , <str> , zorder = - 1 ) print ( <str> . format ( rVal , pVal ) ) plt . xlim ( - 0.1 , 1.1 ) plt . ylim ( - 0.1 , 1.1 ) plt . ylabel ( <str> , fontsize = FONTSIZE ) plt . xlabel ( <str> , fontsize = FONTSIZE ) plt . subplot ( 1 , 3 , 3 ) for ind , category in enumerate ( [ primarySIs , nonPrimarySIs ] ) :      xval = ( ind + 1 ) * np . ones ( len ( category ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , category , <str> , mfc = <str> , clip_on = False ) median = np . median ( category ) plt . plot ( [ ind + 0.7 , ind + 1.3 ] , [ median , median ] , <str> , color = <str> , lw = 3 )  plt . xlim ( 0 , 3 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> , fontsize = FONTSIZE ) ax = plt . gca ( ) ax . set_xticks ( range ( 1 , 3 ) ) ax . set_xticklabels ( [ <str> , <str> ] , fontsize = FONTSIZE ) plt . show ( ) pval = scipy . stats . ranksums ( primarySIs , nonPrimarySIs ) [ 1 ] print ( <str> . format ( pval ) ) db2 = celldatabase . load_hdf ( <str> ) bestCells2 = db2 . query ( <str> ) bestCells2 = bestCells2 . query ( <str> ) PV_ARCHT_MICE = [ <str> , <str> , <str> , <str> , <str> , <str> ] SOM_ARCHT_MICE = [ <str> , <str> , <str> ] PV_INACTIVATED_CELLS = bestCells2 . query ( <str> . format ( PV_ARCHT_MICE ) ) SOM_INACTIVATED_CELLS = bestCells2 . query ( <str> . format ( SOM_ARCHT_MICE ) ) PVdepths = np . array ( PV_INACTIVATED_CELLS [ <str> ] ) SOMdepths = np . array ( SOM_INACTIVATED_CELLS [ <str> ] ) PVSI = PV_INACTIVATED_CELLS [ <str> ] SOMSI = SOM_INACTIVATED_CELLS [ <str> ] PVSILaser = PV_INACTIVATED_CELLS [ <str> ] SOMSILaser = SOM_INACTIVATED_CELLS [ <str> ] SOMSIdiff = np . array ( SOMSILaser - SOMSI ) PVSIdiff = np . array ( PVSILaser - PVSI ) plt . subplot ( 1 , 3 , 2 ) l1 , = plt . plot ( SOMdepths , SOMSIdiff , <str> , ms = 5 , mec = <str> ) l2 , = plt . plot ( PVdepths , PVSIdiff , <str> , ms = 5 , mec = <str> ) plt . legend ( [ l1 , l2 ] , [ <str> , <str> ] , loc = <str> , numpoints = 1 , handlelength = 0.3 , markerscale = 1.7 , frameon = False , ) notNanInds = np . where ( ~ np . isnan ( SOMdepths ) ) [ 0 ] slope , intercept , rVal , pVal , stdErr = scipy . stats . linregress ( SOMdepths [ notNanInds ] , SOMSIdiff [ notNanInds ] ) xvals = np . linspace ( 0 , 1 , 200 ) yvals = slope * xvals + intercept print ( <str> . format ( rVal , pVal ) ) notNanInds = np . where ( ~ np . isnan ( PVdepths ) ) [ 0 ] slope , intercept , rVal , pVal , stdErr = scipy . stats . linregress ( PVdepths [ notNanInds ] , PVSIdiff [ notNanInds ] ) xvals = np . linspace ( 0 , 1 , 200 ) yvals = slope * xvals + intercept print ( <str> . format ( rVal , pVal ) ) plt . xlim ( - 0.1 , 1.1 ) plt . ylim ( - 0.5 , 0.4 ) plt . ylabel ( <str> , fontsize = FONTSIZE ) plt . xlabel ( <str> , fontsize = FONTSIZE ) plt . show ( )   