import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 3 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.01 , 0.36 , 0.69 ] labelPosY = [ 0.94 ] summaryFileName = <str> PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 3 , width_ratios = [ 1.2 , 0.9 , 0.9 ] ) gs . update ( top = 0.95 , bottom = 0.15 , left = 0.06 , right = 0.98 , wspace = 0.45 , hspace = 0.6 ) if PANELS [ 0 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVaveragePSTH = summaryData [ <str> ] SOMaveragePSTH = summaryData [ <str> ] binStartTimes = summaryData [ <str> ] categoryLabels = [ <str> , <str> ] panelLabel = <str> axPSTH = plt . subplot ( gs [ 0 , 0 ] ) plt . hold ( 1 ) l1 , = plt . plot ( binStartTimes [ 1 : - 1 ] , PVaveragePSTH [ 1 : - 1 ] , color = PVColor , lw = 2 ) l2 , = plt . plot ( binStartTimes [ 1 : - 1 ] , SOMaveragePSTH [ 1 : - 1 ] , color = SOMColor , lw = 2 ) plt . legend ( [ l1 , l2 ] , categoryLabels , loc = <str> , frameon = False , fontsize = fontSizeLabels ) zline = plt . axvline ( 0 , color = <str> , zorder = - 10 ) plt . ylim ( - 0.1 , 1.1 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axPSTH . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( axPSTH )  if PANELS [ 1 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] responseRates = [ PVhighBandRate , SOMhighBandRate ] categoryLabels = [ <str> , <str> ] cellTypeColours = [ PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs [ 0 , 1 ] ) plt . hold ( 1 ) bplot = plt . boxplot ( responseRates , widths = 0.6 , showfliers = False ) for box in range ( len ( bplot [ <str> ] ) ) :          plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ box ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )  plt . setp ( bplot [ <str> ] , color = <str> ) plt . xlim ( 0 , len ( responseRates ) + 1 ) plt . ylim ( top = 50 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 0.98 , yLims [ 1 ] * 0.04 , gapFactor = 0.25 ) plt . hold ( 0 ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) PVSOM = stats . ranksums ( PVhighBandRate , SOMhighBandRate ) [ 1 ] print <str> . format ( PVSOM )  if PANELS [ 2 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] responseRates = [ PVhighBandRate , SOMhighBandRate ] categoryLabels = [ <str> , <str> ] cellTypeColours = [ PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs [ 0 , 2 ] ) plt . hold ( 1 ) bplot = plt . boxplot ( responseRates , widths = 0.6 , showfliers = False ) for box in range ( len ( bplot [ <str> ] ) ) :          plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ box ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )  plt . setp ( bplot [ <str> ] , color = <str> ) plt . xlim ( 0 , len ( responseRates ) + 1 ) plt . ylim ( top = 17 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 0.95 , yLims [ 1 ] * 0.04 , gapFactor = 0.25 ) plt . hold ( 0 ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) PVSOM = stats . ranksums ( PVhighBandRate , SOMhighBandRate ) [ 1 ] print <str> . format ( PVSOM )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    