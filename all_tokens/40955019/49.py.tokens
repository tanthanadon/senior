import os import numpy as np import pandas as pd from jaratoolbox import settings from jaratoolbox import behavioranalysis import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  scriptFullPath = os . path . realpath ( __file__ ) tuingFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) tuningFileName = <str> tuningFullPath = os . path . join ( tuingFilePath , tuningFileName ) tuningDf = pd . read_csv ( tuningFullPath ) resultsDict = { } for mouse in np . unique ( tuningDf . animalName ) :      resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] resultsDict [ mouse + <str> ] = [ ] dfThisMouse = tuningDf . loc [ tuningDf . animalName == mouse ] for ind , row in dfThisMouse . iterrows ( ) :          session = str ( row [ <str> ] ) + <str> stimHemi = row [ <str> ] bdata = behavioranalysis . load_many_sessions ( mouse , [ session ] ) trialType = bdata [ <str> ] stimTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] stimLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( trialType , stimTypes ) choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) if stimHemi == 1 :              validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] choiceRightControl = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRightStim = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] percentContraChoiceControl = sum ( choiceRightControl & validTrialsControl ) / float ( sum ( validTrialsControl ) ) percentContraChoiceStim = sum ( choiceRightStim & validTrialsStim ) / float ( sum ( validTrialsStim ) ) percentChangeContraChoice = percentContraChoiceStim - percentContraChoiceControl resultsDict [ mouse + <str> ] . append ( percentChangeContraChoice ) resultsDict [ mouse + <str> ] . append ( row [ <str> ] )  elif stimHemi == 2 :              validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceLeft = choice == bdata . labels [ <str> ] [ <str> ] choiceLeftControl = choiceLeft [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceLeftStim = choiceLeft [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] percentContraChoiceControl = sum ( choiceLeftControl & validTrialsControl ) / float ( sum ( validTrialsControl ) ) percentContraChoiceStim = sum ( choiceLeftStim & validTrialsStim ) / float ( sum ( validTrialsStim ) ) percentChangeContraChoice = percentContraChoiceStim - percentContraChoiceControl resultsDict [ mouse + <str> ] . append ( percentChangeContraChoice ) resultsDict [ mouse + <str> ] . append ( row [ <str> ] )    outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , script = scriptFullPath , ** resultsDict )  