import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as mpatches import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots import figparams FREQFIGNAME = <str> freqDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FREQFIGNAME ) AMFIGNAME = <str> AMDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , AMFIGNAME ) INTFIGNAME = <str> intDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , INTFIGNAME ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 6 , 9 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel ExColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] labelPosX = 0.01 labelPosY = [ 0.97 , 0.69 , 0.34 ] ExampleFileName = <str> freqFileName = <str> AMFileName = <str> intFileName = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 3 , 1 , height_ratios = [ 0.7 , 1 , 1 ] ) gs . update ( top = 0.96 , bottom = 0.08 , left = 0.1 , right = 0.96 , wspace = 0.3 , hspace = 0.4 ) if PANELS [ 0 ] :      dataFullPath = os . path . join ( freqDataDir , freqFileName ) data = np . load ( dataFullPath ) exampleDataFullPath = os . path . join ( freqDataDir , ExampleFileName ) exampleData = np . load ( exampleDataFullPath ) panelLabel = <str> ExbestFreq = np . log2 ( data [ <str> ] ) PVbestFreq = np . log2 ( data [ <str> ] ) SOMbestFreq = np . log2 ( data [ <str> ] ) ExSI = data [ <str> ] PVSI = data [ <str> ] SOMSI = data [ <str> ] possibleFreqs = exampleData [ <str> ] logFreqs = np . log2 ( possibleFreqs ) cellTypeLabels = [ <str> , <str> , <str> ] cellFreqs = [ ExbestFreq , PVbestFreq , SOMbestFreq ] cellSIs = [ ExSI , PVSI , SOMSI ] cellTypeColours = [ ExColor , PVColor , SOMColor ] axScatter = gs [ 0 , 0 ] inner = gridspec . GridSpecFromSubplotSpec ( 1 , len ( cellFreqs ) , subplot_spec = axScatter , wspace = 0.1 , hspace = 0.3 ) for cellType in range ( len ( cellFreqs ) ) :          thisAx = plt . subplot ( inner [ cellType ] ) plt . plot ( cellFreqs [ cellType ] , cellSIs [ cellType ] , <str> , mfc = cellTypeColours [ cellType ] , mec = cellTypeColours [ cellType ] , ms = 4 , zorder = cellType ) slope , intercept , rVal , pVal , stdErr = stats . linregress ( cellFreqs [ cellType ] , cellSIs [ cellType ] ) xvals = np . linspace ( 10 , 16 , 200 ) yvals = slope * xvals + intercept plt . plot ( xvals , yvals , <str> , color = cellTypeColours [ cellType ] , zorder = - 1 ) print <str> print <str> . format ( cellTypeLabels [ cellType ] , rVal , pVal ) plt . locator_params ( axis = <str> , nbins = 6 ) labels = [ <str> % freq for freq in ( 2 ** plt . xticks ( ) [ 0 ] ) / 1000 ] thisAx . set_xticks ( plt . xticks ( ) [ 0 ] ) thisAx . set_xticklabels ( labels ) plt . xlim ( 11.5 , 15.5 ) plt . ylim ( - 0.1 , 1.1 ) plt . title ( <str> . format ( cellTypeLabels [ cellType ] ) , color = cellTypeColours [ cellType ] , fontsize = fontSizeLabels ) if cellType == 0 :              plt . ylabel ( <str> , fontsize = fontSizeLabels )  else :              thisAx . set_yticklabels ( [ <str> ] )  if cellType == 1 :              plt . xlabel ( <str> , fontsize = fontSizeLabels )  extraplots . boxoff ( thisAx )  thisAx . annotate ( panelLabel , xy = ( labelPosX , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if PANELS [ 1 ] :      dataFullPath = os . path . join ( AMDataDir , AMFileName ) data = np . load ( dataFullPath ) axScatter = plt . subplot ( gs [ 1 , 0 ] ) panelLabel = <str> ExAMrate = data [ <str> ] PVAMrate = data [ <str> ] SOMAMrate = data [ <str> ] ExSI = data [ <str> ] PVSI = data [ <str> ] SOMSI = data [ <str> ] cellRates = [ ExAMrate , PVAMrate , SOMAMrate ] cellSIs = [ ExSI , PVSI , SOMSI ] cellTypeColours = [ ExColor , PVColor , SOMColor ] bar_width = 0.15 bar_spacing = 0.13 bar_loc = [ - 1 , 0 , 1 ] xticks = [ ] xticklabels = [ ] for cellType in range ( len ( cellRates ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ cellType ] , alpha = 0.5 ) thisCellTypeSIs = cellSIs [ cellType ] thisCellTypeAMrates = cellRates [ cellType ] SIs16 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates <= 16 ) [ 0 ] ] SIs32 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates == 32 ) [ 0 ] ] SIs64 = thisCellTypeSIs [ np . where ( thisCellTypeAMrates == 64 ) [ 0 ] ] allSIs = [ ] for indSI , SIs in enumerate ( [ SIs16 , SIs32 , SIs64 ] ) :              if len ( SIs ) > 0 :                  allSIs . append ( SIs ) if indSI == 0 :                      xticklabels . append ( <str> )  else :                      xticklabels . append ( 16 * ( 2 ** indSI ) )    print <str> . format ( stats . kruskal ( * allSIs ) ) for indSI , SIs in enumerate ( allSIs ) :              xval = ( cellType + 1 ) + ( bar_loc [ indSI ] * ( bar_width + bar_spacing ) ) xticks . append ( xval ) xvals = xval * np . ones ( len ( SIs ) ) jitterAmt = np . random . random ( len ( xvals ) ) xvals = xvals + ( bar_width * jitterAmt ) - bar_width / 2 plt . hold ( True ) plt . plot ( xvals , SIs , <str> , mec = edgeColour , mfc = <str> , clip_on = False , markeredgewidth = 1.3 ) median = np . median ( SIs ) plt . plot ( [ xval - bar_width / 2 , xval + bar_width / 2 ] , [ median , median ] , <str> , color = <str> , mec = edgeColour , lw = 3 )   ExPatch = mpatches . Patch ( color = ExColor , label = <str> ) PVPatch = mpatches . Patch ( color = PVColor , label = <str> ) SOMPatch = mpatches . Patch ( color = SOMColor , label = <str> ) plt . legend ( handles = [ ExPatch , PVPatch , SOMPatch ] , frameon = False , fontsize = fontSizeLabels , loc = <str> ) plt . ylim ( - 0.1 , 1.1 ) plt . xlim ( xticks [ 0 ] - bar_width , xticks [ - 1 ] + bar_width ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) axScatter . set_xticks ( xticks ) axScatter . set_xticklabels ( xticklabels ) extraplots . boxoff ( axScatter ) axScatter . annotate ( panelLabel , xy = ( labelPosX , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if PANELS [ 2 ] :      panelLabel = <str> dataFullPath = os . path . join ( intDataDir , intFileName ) data = np . load ( dataFullPath ) ExcSI = data [ <str> ] ExcDiffSumTone = np . vstack ( data [ <str> ] ) [ : , 0 ] ExcDiffSumNoise = np . vstack ( data [ <str> ] ) [ : , - 1 ] notNanInds = np . where ( ~ np . isnan ( ExcDiffSumNoise ) ) ExcSI = ExcSI [ notNanInds ] ExcDiffSumTone = ExcDiffSumTone [ notNanInds ] ExcDiffSumNoise = ExcDiffSumNoise [ notNanInds ] diffSums = [ ExcDiffSumTone , ExcDiffSumNoise ] labels = [ <str> , <str> ] axScatter = gs [ 2 , 0 ] inner = gridspec . GridSpecFromSubplotSpec ( 1 , len ( diffSums ) , subplot_spec = axScatter , wspace = 0.1 , hspace = 0.3 ) for ind , diffsum in enumerate ( diffSums ) :          thisAx = plt . subplot ( inner [ ind ] ) plt . plot ( diffsum , ExcSI , <str> , mec = ExColor , mfc = ExColor , ms = 4 ) slope , intercept , rVal , pVal , stdErr = stats . linregress ( diffsum , ExcSI ) xvals = np . linspace ( - 1 , 1 , 200 ) yvals = slope * xvals + intercept plt . plot ( xvals , yvals , <str> ) print <str> . format ( labels [ ind ] ) print <str> . format ( rVal , pVal ) if ind == 0 :              plt . ylabel ( <str> , fontsize = fontSizeLabels )  else :              thisAx . set_yticklabels ( [ <str> ] )  plt . xlabel ( <str> . format ( labels [ ind ] ) , fontsize = fontSizeLabels ) plt . xlim ( - 1.1 , 1.1 ) plt . ylim ( - 0.1 , 1.1 ) extraplots . boxoff ( thisAx )  thisAx . annotate ( panelLabel , xy = ( labelPosX , labelPosY [ 2 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    