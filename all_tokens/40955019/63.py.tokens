import os import numpy as np import pandas as pd from jaratoolbox import settings import figparams scriptFullPath = os . path . realpath ( __file__ ) qualityList = [ 1 , 6 ] maxZThreshold = 3 ISIcutoff = 0.02 removedDuplicates = True FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( dataDir ) :      os . mkdir ( dataDir )  psychometricFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) goodcells = ( allcells_psychometric . cellQuality . isin ( qualityList ) ) & ( allcells_psychometric . ISI <= ISIcutoff ) cellsInStr = allcells_psychometric . cellInStr == 1 keepAfterDupTest = allcells_psychometric . keep_after_dup_test allcells = allcells_psychometric [ goodcells & cellsInStr & keepAfterDupTest ] strongerSoundResMid1 = abs ( allcells . maxZSoundMid1 ) > abs ( allcells . maxZSoundMid2 ) modIStrongerSoundRes = np . r_ [ allcells [ <str> ] [ strongerSoundResMid1 ] . values , allcells [ <str> ] [ ~ strongerSoundResMid1 ] . values ] modSigStrongerSoundRes = np . r_ [ allcells [ <str> ] [ strongerSoundResMid1 ] . values , allcells [ <str> ] [ ~ strongerSoundResMid1 ] . values ] sigMod = np . array ( ( modSigStrongerSoundRes <= 0.05 ) , dtype = bool ) dataToPlot = { <str> : sigMod , <str> : modIStrongerSoundRes , <str> : allcells . animalName } outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , sourcePsychometric = psychometricFilePath , goodCellQuality = qualityList , ISIcutoff = ISIcutoff , removedDuplicates = removedDuplicates , script = scriptFullPath , ** dataToPlot ) responsiveMidFreqs = ( abs ( allcells_psychometric . maxZSoundMid1 ) >= maxZThreshold ) | ( abs ( allcells_psychometric . maxZSoundMid2 ) >= maxZThreshold ) allcellsResponsive = allcells_psychometric [ goodcells & cellsInStr & keepAfterDupTest & responsiveMidFreqs ] strongerSoundResMid1 = abs ( allcellsResponsive . maxZSoundMid1 ) > abs ( allcellsResponsive . maxZSoundMid2 ) modIStrongerSoundRes = np . r_ [ allcellsResponsive [ <str> ] [ strongerSoundResMid1 ] . values , allcellsResponsive [ <str> ] [ ~ strongerSoundResMid1 ] . values ] modSigStrongerSoundRes = np . r_ [ allcellsResponsive [ <str> ] [ strongerSoundResMid1 ] . values , allcellsResponsive [ <str> ] [ ~ strongerSoundResMid1 ] . values ] sigMod = np . array ( ( modSigStrongerSoundRes <= 0.05 ) , dtype = bool ) dataToPlot = { <str> : sigMod , <str> : modIStrongerSoundRes , <str> : allcellsResponsive . animalName } outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , sourcePsychometric = psychometricFilePath , maxZThreshold = maxZThreshold , goodCellQuality = qualityList , ISIcutoff = ISIcutoff , removedDuplicates = removedDuplicates , script = scriptFullPath , ** dataToPlot )  