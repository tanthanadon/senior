import os import numpy as np from jaratoolbox import histologyanalysis as ha from jaratoolbox import settings from scipy import stats dataDir = os . path . join ( settings . HISTOLOGY_PATH , <str> , <str> ) mmPerUnit = 0.000735 countWinSquareSideLenInUnit = 500 countWinSizeInMm2 = np . square ( countWinSquareSideLenInUnit * mmPerUnit ) countFiles = { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] } cellCounts = { <str> : [ ] , <str> : [ ] } cellCountsPerMm2 = { <str> : [ ] , <str> : [ ] } meanCount = { <str> : 0 , <str> : 0 } stdCount = { <str> : 0 , <str> : 0 } meanCountPerMm2 = { <str> : 0 , <str> : 0 } stdCountPerMm2 = { <str> : 0 , <str> : 0 } for brainArea , sections in countFiles . iteritems ( ) :      for oneSection in sections :          filenameCSV = os . path . join ( dataDir , oneSection ) + <str> coords = ha . get_coords_from_fiji_csv ( filenameCSV , pixelSize = 1 ) nCells = coords . shape [ 1 ] nCellsPerMm2 = nCells / countWinSizeInMm2 cellCounts [ brainArea ] . append ( nCells ) cellCountsPerMm2 [ brainArea ] . append ( nCellsPerMm2 ) print ( <str> . format ( brainArea , oneSection , nCells ) )  meanCount [ brainArea ] = np . mean ( cellCounts [ brainArea ] ) stdCount [ brainArea ] = np . std ( cellCounts [ brainArea ] ) meanCountPerMm2 [ brainArea ] = np . mean ( cellCountsPerMm2 [ brainArea ] ) stdCountPerMm2 [ brainArea ] = np . std ( cellCountsPerMm2 [ brainArea ] ) print ( <str> . format ( brainArea , meanCountPerMm2 [ brainArea ] , stdCountPerMm2 [ brainArea ] ) )  Z , pVal = stats . ranksums ( cellCountsPerMm2 . values ( ) [ 0 ] , cellCountsPerMm2 . values ( ) [ 1 ] ) print ( <str> . format ( pVal ) )  