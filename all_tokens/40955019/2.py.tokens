import os import sys import numpy as np import pandas as pd import importlib from jaratoolbox import settings import figparams from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis import scipy . stats as stats import pdb FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) dataDir = outputDir paradigm = <str> scriptFullPath = os . path . realpath ( __file__ ) qualityList = [ 1 , 6 ] ISIcutoff = 0.02 numOfFreqs = 6 maxNumOfTrials = 300 EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE if not os . path . ismount ( BEHAVIOR_PATH ) :      os . system ( <str> . format ( BEHAVIOR_PATH ) )  if not os . path . ismount ( EPHYS_PATH ) :      os . system ( <str> . format ( EPHYS_PATH ) )  psychometricFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) psychometricFileName = <str> psychometricFullPath = os . path . join ( psychometricFilePath , psychometricFileName ) allcells_psychometric = pd . read_hdf ( psychometricFullPath , key = <str> ) goodcells_psychometric = ( allcells_psychometric . cellQuality . isin ( qualityList ) ) & ( allcells_psychometric . ISI <= ISIcutoff ) cellInStr = ( allcells_psychometric . cellInStr == 1 ) keepAfterDupTest = allcells_psychometric . keep_after_dup_test cellSelector = goodcells_psychometric & cellInStr & keepAfterDupTest cellsToPlot = allcells_psychometric [ cellSelector ] responseFilename = <str> responseFullPath = os . path . join ( dataDir , responseFilename ) responseEachCellEachFreq = np . load ( responseFullPath ) cellsToPlot = cellsToPlot . reset_index ( ) responseEachFreqEachCellLeftChoice = np . ma . masked_array ( np . empty ( ( len ( cellsToPlot ) , maxNumOfTrials , numOfFreqs ) ) , mask = np . zeros ( ( len ( cellsToPlot ) , maxNumOfTrials , numOfFreqs ) ) ) responseEachFreqEachCellRightChoice = np . ma . masked_array ( np . empty ( ( len ( cellsToPlot ) , maxNumOfTrials , numOfFreqs ) ) , mask = np . zeros ( ( len ( cellsToPlot ) , maxNumOfTrials , numOfFreqs ) ) ) for indc , cell in cellsToPlot . iterrows ( ) :      print <str> , indc animalName = cell [ <str> ] allcellsFileName = <str> + animalName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) behavSession = cell [ <str> ] tetrode = cell [ <str> ] cluster = cell [ <str> ] cellIndex = allcells . cellDB . findcell ( animalName , behavSession , tetrode , cluster ) oneCell = allcells . cellDB [ cellIndex ] ephysSession = oneCell . ephysSession behavFileName = <str> . format ( animalName , paradigm , behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , animalName , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , animalName , ephysSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimes , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) possibleFreq = np . unique ( bdata [ <str> ] ) numFreqs = len ( possibleFreq ) responseEachFreqLeftChoice = [ ] responseEachFreqRightChoice = [ ] for indf , freq in enumerate ( possibleFreq ) :          rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] oneFreqTrials = ( bdata [ <str> ] == freq ) & bdata [ <str> ] . astype ( <str> ) oneFreqTrialsLeftChoice = leftward [ oneFreqTrials ] oneFreqTrialsRightChoice = rightward [ oneFreqTrials ] oneFreqResps = responseEachCellEachFreq [ indc , : , indf ] . compressed ( ) oneFreqRespsLeftChoice = oneFreqResps [ oneFreqTrialsLeftChoice ] oneFreqRespsRightChoice = oneFreqResps [ oneFreqTrialsRightChoice ] numOfTrialsLeft = len ( oneFreqRespsLeftChoice ) responseEachFreqEachCellLeftChoice [ indc , : numOfTrialsLeft , indf ] = oneFreqRespsLeftChoice responseEachFreqEachCellLeftChoice . mask [ indc , numOfTrialsLeft : , indf ] = True numOfTrialsRight = len ( oneFreqRespsRightChoice ) responseEachFreqEachCellRightChoice [ indc , : numOfTrialsRight , indf ] = oneFreqRespsRightChoice responseEachFreqEachCellRightChoice . mask [ indc , numOfTrialsRight : , indf ] = True   if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  responseEachFreqEachCellLeftChoiceFile = <str> responseEachFreqEachCellRightChoiceFile = <str> responseEachFreqEachCellLeftChoice . dump ( os . path . join ( outputDir , responseEachFreqEachCellLeftChoiceFile ) ) responseEachFreqEachCellRightChoice . dump ( os . path . join ( outputDir , responseEachFreqEachCellRightChoiceFile ) )  