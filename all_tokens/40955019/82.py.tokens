import numpy as np from scipy . special import erf import time def diff_gauss_form ( x , mExp , R0 , sigmaD , sigmaS , RD , RS ) :      return R0 + RD * ( erf ( x / ( np . sqrt ( 2 ) * sigmaD ) ) ) ** mExp - RS * erf ( x / ( np . sqrt ( 2 ) * sigmaS ) ) ** mExp  def diff_of_gauss_fit ( stimuli , responses , RFscale = None , mFixed = None ) :      from scipy . optimize import curve_fit if RFscale is None :          RFscale = stimuli [ 2 ]  MaxResp = np . max ( np . abs ( responses ) ) MaxNegResp = np . max ( - responses ) if MaxNegResp < 0 :          MaxNegResp = 0  maxM = 10 maxsigD = 3 * np . max ( stimuli ) maxsigS = 3 * np . max ( stimuli ) maxRD = 2 * MaxResp + 1 maxR0 = 3 * responses [ 0 ] + 1 Upper = np . asarray ( [ maxM , maxR0 , maxsigD , maxsigS , maxRD , maxRD ] ) Lower = np . asarray ( [ 1 , 0 , RFscale / 100. , RFscale / 100. , 0 , 0 ] ) Nparsets = 5 initpars = np . asarray ( [ [ 2.5 , responses [ 0 ] , RFscale , 2 * RFscale , MaxResp , MaxNegResp ] ] ) . T * np . ones ( ( 6 , Nparsets ) ) p = 0 initpars [ 4 , p ] *= .5 p += 1 initpars [ 0 , p ] = 2.0 initpars [ 5 , p ] = 0.01 p += 1 initpars [ 0 , p ] = 2.0 initpars [ 4 , p ] *= 2 initpars [ 5 , p ] *= 2 p += 1 initpars [ 0 , p ] = 3.0 initpars [ 2 , p ] = 4 * RFscale initpars [ 3 , p ] = RFscale curve_form = diff_gauss_form if mFixed is not None :          Upper = Upper [ 1 : ] Lower = Lower [ 1 : ] initpars = initpars [ 1 : , : ] curve_form = lambda x , R0 , sigmaD , sigmaS , RD , RS : diff_gauss_form ( x , mFixed , R0 , sigmaD , sigmaS , RD , RS )  fitParams = None fitResponses = None SSE = np . inf for p in range ( Nparsets ) :          try :              fitParams0 = curve_fit ( curve_form , stimuli , responses , p0 = initpars [ : , p ] , bounds = ( Lower , Upper ) , max_nfev = 10000 ) [ 0 ] fitResponses0 = curve_form ( stimuli , * fitParams0 ) SqErr = np . sum ( ( responses - fitResponses0 ) ** 2 ) if SqErr < SSE :                  fitParams = fitParams0 fitResponses = fitResponses0 SSE = SqErr   except RuntimeError :              print ( <str> . format ( <str> , p ) )   SStotal = np . sum ( ( responses - np . mean ( responses ) ) ** 2 ) R2 = 1 - ( SSE / SStotal ) return fitParams , R2  def extract_stats_from_fit ( fitParams , testStims ) :      testResps = diff_gauss_form ( testStims , * fitParams ) prefBW = testStims [ np . argmax ( testResps ) ] suppInd = 1 - testResps [ - 1 ] / np . max ( testResps ) return suppInd , prefBW    