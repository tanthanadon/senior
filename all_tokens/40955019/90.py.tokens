import os import pandas as pd import numpy as np from jaratoolbox import celldatabase from jaratoolbox import spikesanalysis from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings from scipy import stats import studyparams dbFilename = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbFilename ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , figName ) bestCells = db . query ( studyparams . SINGLE_UNITS ) bestCells = bestCells . query ( studyparams . GOOD_CELLS ) ExcCells = bestCells . query ( studyparams . EXC_CELLS ) SIs = np . zeros ( len ( ExcCells ) ) pVals = np . zeros ( len ( ExcCells ) ) for indCell , ( dbIndex , dbRow ) in enumerate ( ExcCells . iterrows ( ) ) :      cell = ephyscore . Cell ( dbRow ) tuningEphysData , tuningBData = cell . load ( <str> ) tuningEventOnsetTimes = tuningEphysData [ <str> ] [ <str> ] if len ( tuningEventOnsetTimes ) == 0 :          tuningEventOnsetTimes = tuningEphysData [ <str> ] [ <str> ] + 0.0095  tuningEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( tuningEventOnsetTimes , minEventOnsetDiff = 0.2 ) tuningSpikeTimestamps = tuningEphysData [ <str> ] freqEachTrial = tuningBData [ <str> ] numFreqs = np . unique ( freqEachTrial ) intEachTrial = tuningBData [ <str> ] timeRange = [ - 0.5 , 0.5 ] trialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , numFreqs , intEachTrial , np . unique ( intEachTrial ) ) trialsHighInt = trialsEachCond [ : , : , - 1 ] tuningSpikeTimesFromEventOnset , trialIndexForEachSpike , tuningIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( tuningSpikeTimestamps , tuningEventOnsetTimes , timeRange ) tuningWindow = dbRow [ <str> ] tuningSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( tuningSpikeTimesFromEventOnset , tuningIndexLimitsEachTrial , tuningWindow ) tuningSpikeArray = np . zeros ( len ( numFreqs ) ) for freq in range ( len ( numFreqs ) ) :          trialsThisFreq = trialsHighInt [ : , freq ] if tuningSpikeCountMat . shape [ 0 ] == len ( trialsThisFreq ) + 1 :              tuningSpikeCountMat = tuningSpikeCountMat [ : - 1 , : ]  spikeCountsThisFreq = tuningSpikeCountMat [ trialsThisFreq ] . flatten ( ) tuningSpikeArray [ freq ] = np . mean ( spikeCountsThisFreq ) / ( tuningWindow [ 1 ] - tuningWindow [ 0 ] )  baselineTimeRange = [ - tuningWindow [ 1 ] , - tuningWindow [ 0 ] ] baselineSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( tuningSpikeTimesFromEventOnset , tuningIndexLimitsEachTrial , baselineTimeRange ) baselineSpikeRate = np . mean ( baselineSpikeCountMat . flatten ( ) ) / ( baselineTimeRange [ 1 ] - baselineTimeRange [ 0 ] ) minpVal = np . inf maxzscore = - np . inf for freq in range ( trialsHighInt . shape [ 1 ] ) :          trialsThisCond = trialsHighInt [ : , freq ] if tuningSpikeCountMat . shape [ 0 ] == len ( trialsThisCond ) + 1 :              tuningSpikeCountMat = tuningSpikeCountMat [ : - 1 , : ]  if baselineSpikeCountMat . shape [ 0 ] == len ( trialsThisCond ) + 1 :              baselineSpikeCountMat = baselineSpikeCountMat [ : - 1 , : ]  if any ( trialsThisCond ) :              thisFirstStimCounts = tuningSpikeCountMat [ trialsThisCond ] . flatten ( ) thisStimBaseSpikeCounts = baselineSpikeCountMat [ trialsThisCond ] . flatten ( ) if all ( thisFirstStimCounts == thisStimBaseSpikeCounts ) :                  pValThisFirst = np . inf  else :                  thiszscore , pValThisFirst = stats . mannwhitneyu ( thisFirstStimCounts , thisStimBaseSpikeCounts , alternative = <str> )  if pValThisFirst < minpVal :                  minpVal = pValThisFirst    SIs [ indCell ] = dbRow [ <str> ] pVals [ indCell ] = minpVal  outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , ExcCellSIs = SIs , toneSuppPVal = pVals ) print outputFile + <str>   