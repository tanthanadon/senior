import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from scipy import stats from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 5 ] maxSamplesToInclude = 10 print <str> . format ( maxSamplesToInclude ) fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.07 , 0.36 , 0.7 ] labelPosY = [ 0.9 , 0.48 ] STIM_DURATION = 1.5 laserColor = figparams . colp [ <str> ] backStrColor = figparams . colp [ <str> ] frontStrColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 3 ) gs . update ( left = 0.15 , right = 0.98 , top = 0.95 , bottom = 0.05 , wspace = .1 , hspace = 0.3 ) gsC = gridspec . GridSpec ( 2 , 3 ) gsC . update ( left = 0.18 , right = 0.95 , top = 0.95 , bottom = 0.05 , wspace = .1 , hspace = 0.3 ) ax1 = plt . subplot ( gs [ 0 , 1 ] ) ax2 = plt . subplot ( gs [ 0 , 2 ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax1 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 0 ] :      exampleFilename = <str> exampleFullPath = os . path . join ( dataDir , exampleFilename ) exampledata = np . load ( exampleFullPath ) stimSideEachCond = exampledata [ <str> ] stimRegionEachCond = exampledata [ <str> ] headAngleEachCond = exampledata [ <str> ] stimSamples = exampledata [ <str> ] yLims = np . array ( [ - 3 , 3 ] ) xbar = ( stimSamples [ 1 ] - stimSamples [ 0 ] ) / STIM_DURATION ybar = 45 * ( np . pi / 180 ) stimYpos = 2.8 lineWidth = 2.5 plt . axes ( ax1 ) plt . hold ( True ) thisCond = np . flatnonzero ( ( stimSideEachCond == <str> ) & ( stimRegionEachCond == <str> ) ) [ 0 ] plt . plot ( headAngleEachCond [ thisCond ] , <str> , lw = lineWidth , color = frontStrColor ) thisCond = np . flatnonzero ( ( stimSideEachCond == <str> ) & ( stimRegionEachCond == <str> ) ) [ 0 ] plt . plot ( headAngleEachCond [ thisCond ] , <str> , lw = lineWidth , color = backStrColor ) plt . plot ( stimSamples , 2 * [ stimYpos ] , lw = 6 , color = laserColor , clip_on = False ) plt . text ( np . mean ( stimSamples ) , stimYpos + 0.2 , <str> , ha = <str> , va = <str> , clip_on = False , fontsize = fontSizeLabels ) plt . ylim ( yLims ) extraplots . scalebar ( 10 , - 2 , xbar , ybar , <str> , <str> , fontsize = 12 ) plt . axis ( <str> ) plt . axes ( ax2 ) plt . hold ( True ) thisCond = np . flatnonzero ( ( stimSideEachCond == <str> ) & ( stimRegionEachCond == <str> ) ) [ 0 ] plt . plot ( headAngleEachCond [ thisCond ] , <str> , lw = lineWidth , color = frontStrColor ) thisCond = np . flatnonzero ( ( stimSideEachCond == <str> ) & ( stimRegionEachCond == <str> ) ) [ 0 ] plt . plot ( headAngleEachCond [ thisCond ] , <str> , lw = lineWidth , color = backStrColor ) plt . plot ( stimSamples , 2 * [ stimYpos ] , lw = 6 , color = laserColor , clip_on = False ) plt . text ( np . mean ( stimSamples ) , stimYpos + 0.2 , <str> , ha = <str> , va = <str> , clip_on = False , fontsize = fontSizeLabels ) plt . ylim ( yLims ) plt . axis ( <str> ) leg = plt . legend ( [ <str> , <str> ] , loc = <str> , frameon = False , labelspacing = 0.2 , fontsize = 14 ) leg . set_frame_on ( False )  ax3 = plt . subplot ( gsC [ 1 , 1 : ] ) ax3 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) haFile = np . load ( summaryFullPath ) subject = haFile [ <str> ] session = haFile [ <str> ] deltaHeadAngle = haFile [ <str> ] stimSide = haFile [ <str> ] stimRegion = haFile [ <str> ] possibleSubjects = np . unique ( subject ) markerEachSubject = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stimFrontLeft = ( stimSide == <str> ) & ( stimRegion == <str> ) stimFrontRight = ( stimSide == <str> ) & ( stimRegion == <str> ) stimBackLeft = ( stimSide == <str> ) & ( stimRegion == <str> ) stimBackRight = ( stimSide == <str> ) & ( stimRegion == <str> ) eachCond = [ stimFrontLeft , stimBackLeft , stimFrontRight , stimBackRight ] xPos = np . array ( [ 0 , 1 , 2.5 , 3.5 ] ) colorEachCond = [ frontStrColor , backStrColor , frontStrColor , backStrColor ] markerEachCond = [ <str> , <str> , <str> , <str> ] meanEachCondEachSubject = [ [ ] , [ ] , [ ] , [ ] ] dataEachCondEachSubject = [ ] for inds in range ( len ( possibleSubjects ) ) :          dataEachCondEachSubject . append ( [ 0 , 0 , 0 , 0 ] )  plt . hold ( 1 ) plt . axhline ( 0 , color = <str> , ls = <str> ) for indc , sessionsThisCond in enumerate ( eachCond ) :          subjectsThisCond = np . unique ( np . array ( subject ) [ sessionsThisCond ] ) colorThisCond = colorEachCond [ indc ] markerThisCond = markerEachCond [ indc ] for indSubject , oneSubject in enumerate ( subjectsThisCond ) :              sessionsThisSubject = sessionsThisCond & ( subject == oneSubject ) samples = ( 180 / np . pi ) * np . concatenate ( deltaHeadAngle [ sessionsThisSubject ] ) samples = samples [ : maxSamplesToInclude ] xvals = np . tile ( xPos [ indc ] + 0.1 * indSubject - 0.1 , len ( samples ) ) plt . plot ( xvals , samples , <str> , marker = markerEachSubject [ indSubject ] , mfc = <str> , mec = <str> , zorder = - 1 , clip_on = False ) meanVal = np . mean ( samples ) seVal = np . std ( samples ) / np . sqrt ( len ( samples ) ) meanEachCondEachSubject [ indc ] . append ( meanVal ) subjectIndFromAll = list ( possibleSubjects ) . index ( oneSubject ) dataEachCondEachSubject [ subjectIndFromAll ] [ indc ] = samples pmark = plt . plot ( xPos [ indc ] + 0.1 * indSubject - 0.1 , meanVal , markerThisCond , mfc = colorThisCond , mec = <str> )   extraplots . boxoff ( ax3 ) plt . ylabel ( <str> ) ax3 . set_yticks ( np . arange ( - 200 , 300 , 100 ) ) plt . ylim ( 300 * np . array ( [ - 1 , 1 ] ) ) plt . xlim ( [ - 0.7 , 4.1 ] ) ax3 . axes . get_xaxis ( ) . set_visible ( False ) ax3 . spines [ <str> ] . set_visible ( False ) signifYpos = 300 extraplots . significance_stars ( [ xPos [ 0 ] , xPos [ 1 ] ] , signifYpos , 20 , starSize = 10 , gapFactor = 0.2 , color = <str> ) extraplots . significance_stars ( [ xPos [ 2 ] , xPos [ 3 ] ] , signifYpos , 20 , starSize = 10 , gapFactor = 0.2 , color = <str> ) plt . text ( np . mean ( xPos [ 0 : 2 ] ) , - signifYpos , <str> , ha = <str> , fontsize = fontSizeLabels + 2 ) plt . text ( np . mean ( xPos [ 2 : 4 ] ) , - signifYpos , <str> , ha = <str> , fontsize = fontSizeLabels + 2 ) plt . show ( ) ( st , pval ) = stats . ranksums ( meanEachCondEachSubject [ 0 ] , meanEachCondEachSubject [ 1 ] ) print <str> . format ( pval ) ( st , pval ) = stats . ranksums ( meanEachCondEachSubject [ 2 ] , meanEachCondEachSubject [ 3 ] ) print <str> . format ( pval ) ( st , pval ) = stats . ranksums ( meanEachCondEachSubject [ 0 ] , meanEachCondEachSubject [ 3 ] ) print <str> . format ( pval ) ( st , pval ) = stats . ranksums ( meanEachCondEachSubject [ 1 ] , meanEachCondEachSubject [ 3 ] ) print <str> . format ( pval ) meanContraFront = np . concatenate ( ( np . abs ( meanEachCondEachSubject [ 0 ] ) , meanEachCondEachSubject [ 2 ] ) ) meanContraBack = np . concatenate ( ( np . abs ( meanEachCondEachSubject [ 1 ] ) , meanEachCondEachSubject [ 3 ] ) ) print <str> . format ( np . mean ( meanContraFront ) , np . std ( meanContraFront ) ) print <str> . format ( np . mean ( meanContraBack ) , np . std ( meanContraBack ) ) print <str> for indSubject , oneSubject in enumerate ( possibleSubjects ) :          condThisSubject = stimRegion [ subject == oneSubject ] [ 0 ] samplesThisSubject = dataEachCondEachSubject [ indSubject ] if condThisSubject [ : 4 ] == <str> :              ( st , pval ) = stats . ranksums ( samplesThisSubject [ 1 ] , samplesThisSubject [ 3 ] )  elif condThisSubject [ : 4 ] == <str> :              ( st , pval ) = stats . ranksums ( samplesThisSubject [ 0 ] , samplesThisSubject [ 2 ] )  print <str> . format ( oneSubject , condThisSubject , pval )   if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   