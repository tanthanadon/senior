import numpy as np import scipy . stats import matplotlib . pyplot as plt import copy from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis db = celldatabase . load_hdf ( <str> ) bestCells = db . query ( <str> ) bestCells = bestCells . query ( <str> ) LASER_RESPONSE_PVAL = 0.001 EXC_LASER_RESPONSE_PVAL = 0.5 EXC_SPIKE_WIDTH = 0.0004 PV_CHR2_MICE = [ <str> , <str> , <str> , <str> ] SOM_CHR2_MICE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] PV_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , PV_CHR2_MICE ) ) SOM_CELLS = bestCells . query ( <str> . format ( LASER_RESPONSE_PVAL , SOM_CHR2_MICE ) ) EXC_CELLS = bestCells . query ( <str> . format ( EXC_LASER_RESPONSE_PVAL , EXC_SPIKE_WIDTH , SOM_CHR2_MICE ) ) freqTunedPV = PV_CELLS . query ( <str> ) freqTunedOffCentrePV = PV_CELLS . query ( <str> ) notFreqTunedPV = PV_CELLS . query ( <str> ) freqTunedSOM = SOM_CELLS . query ( <str> ) freqTunedOffCentreSOM = SOM_CELLS . query ( <str> ) notFreqTunedSOM = SOM_CELLS . query ( <str> ) freqTunedExc = EXC_CELLS . query ( <str> ) freqTunedOffCentreExc = EXC_CELLS . query ( <str> ) notFreqTunedExc = EXC_CELLS . query ( <str> ) cells = [ freqTunedPV , freqTunedOffCentrePV , notFreqTunedPV , freqTunedSOM , freqTunedOffCentreSOM , notFreqTunedSOM , freqTunedExc , freqTunedOffCentreExc , notFreqTunedExc ] baselineSpikeRates = [ np . zeros ( len ( freqTunedPV ) ) , np . zeros ( len ( freqTunedOffCentrePV ) ) , np . zeros ( len ( notFreqTunedPV ) ) , np . zeros ( len ( freqTunedSOM ) ) , np . zeros ( len ( freqTunedOffCentreSOM ) ) , np . zeros ( len ( notFreqTunedSOM ) ) , np . zeros ( len ( freqTunedExc ) ) , np . zeros ( len ( freqTunedOffCentreExc ) ) , np . zeros ( len ( notFreqTunedExc ) ) ] highBandSustainedSpikeRates = copy . deepcopy ( baselineSpikeRates ) highBandOnsetSpikeRates = copy . deepcopy ( baselineSpikeRates ) highBands = [ 5 , 6 ] onsetTimeRange = [ 0.0 , 0.05 ] sustainedTimeRange = [ 0.2 , 1.0 ] for ind , cellsThisType in enumerate ( cells ) :      for indCell in range ( len ( cellsThisType ) ) :          cell = cellsThisType . iloc [ indCell ] cellObj = ephyscore . Cell ( cell , useModifiedClusters = True ) bandEphysData , bandBData = cellObj . load_by_index ( int ( cell [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] if len ( bandEventOnsetTimes ) == 0 :              bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] + 0.0093  bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] baselineRange = [ - 1.0 , - 0.2 ] fullTimeRange = [ baselineRange [ 0 ] , sustainedTimeRange [ 1 ] ] onsetResponseDuration = onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] sustainedResponseTimeDuration = sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , fullTimeRange ) onsetSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , onsetTimeRange ) sustainedSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , sustainedTimeRange ) bandEachTrial = bandBData [ <str> ] ampEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) numAmps = np . unique ( ampEachTrial ) bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , ampEachTrial , numAmps ) trialsHighAmp = bandTrialsEachCond [ : , : , - 1 ] trialsHighBands = None for band in highBands :              if trialsHighBands is None :                  trialsHighBands = trialsHighAmp [ : , band ]  else :                  trialsHighBands = trialsHighBands | trialsHighAmp [ : , band ]   highBandOnsetSpikeCounts = onsetSpikeCountMat [ trialsHighBands ] highBandOnsetMean = np . mean ( highBandOnsetSpikeCounts ) / ( onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] ) highBandOnsetSpikeRates [ ind ] [ indCell ] = highBandOnsetMean highBandSustainedSpikeCounts = sustainedSpikeCountMat [ trialsHighBands ] highBandSustainedMean = np . mean ( highBandSustainedSpikeCounts ) / ( sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] ) highBandSustainedSpikeRates [ ind ] [ indCell ] = highBandSustainedMean baselineDuration = baselineRange [ 1 ] - baselineRange [ 0 ] baselineSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , baselineRange ) baselineMean = np . mean ( baselineSpikeCountMat ) / baselineDuration baselineSpikeRates [ ind ] [ indCell ] = baselineMean   averagePSTHs = [ ] for ind , cellsThisType in enumerate ( cells ) :      thisCellTypeAllPSTHs = None for indCell in range ( len ( cellsThisType ) ) :          cell = cellsThisType . iloc [ indCell ] cellObj = ephyscore . Cell ( cell , useModifiedClusters = True ) bandEphysData , bandBData = cellObj . load_by_index ( int ( cell [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] if len ( bandEventOnsetTimes ) == 0 :              bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] + 0.0093  bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandTimeRange = [ - 0.5 , 1.5 ] binsize = 50 bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , [ bandTimeRange [ 0 ] - binsize , bandTimeRange [ 1 ] ] ) binEdges = np . around ( np . arange ( bandTimeRange [ 0 ] - ( binsize / 1000.0 ) , bandTimeRange [ 1 ] + 2 * ( binsize / 1000.0 ) , ( binsize / 1000.0 ) ) , decimals = 2 ) if thisCellTypeAllPSTHs is None :              thisCellTypeAllPSTHs = np . zeros ( ( len ( cellsThisType ) , len ( binEdges ) - 1 ) )  spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , binEdges ) trialsEachBand = behavioranalysis . find_trials_each_type ( bandBData [ <str> ] , np . unique ( bandBData [ <str> ] ) ) trialsHighBands = None for band in highBands :              if trialsHighBands is None :                  trialsHighBands = trialsEachBand [ : , band ]  else :                  trialsHighBands = trialsHighBands | trialsEachBand [ : , band ]   highBandSpikeCounts = spikeCountMat [ trialsHighBands ] thisPSTH = np . mean ( highBandSpikeCounts , axis = 0 ) thisPSTH = ( thisPSTH - np . mean ( thisPSTH [ 1 : np . where ( binEdges == - 0.05 ) [ 0 ] [ 0 ] ] ) ) / ( thisPSTH [ np . where ( binEdges == 0 ) [ 0 ] [ 0 ] ] - np . mean ( thisPSTH [ 1 : np . where ( binEdges == - 0.05 ) [ 0 ] [ 0 ] ] ) ) thisCellTypeAllPSTHs [ indCell , : ] = thisPSTH  thisCellTypeAllPSTHs = thisCellTypeAllPSTHs [ ~ np . isnan ( thisCellTypeAllPSTHs ) . any ( axis = 1 ) ] thisCellTypePSTH = np . median ( thisCellTypeAllPSTHs , axis = 0 ) smoothWinSize = 1 winShape = np . concatenate ( ( np . zeros ( smoothWinSize ) , np . ones ( smoothWinSize ) ) ) winShape = winShape / np . sum ( winShape ) thisCellTypePSTH = np . convolve ( thisCellTypePSTH , winShape , mode = <str> ) averagePSTHs . append ( thisCellTypePSTH )  outputFile = <str> np . savez ( outputFile , PVTunedSustainedResponses = highBandSustainedSpikeRates [ 0 ] , PVTunedOffCentreSustainedResponses = highBandSustainedSpikeRates [ 1 ] , PVUntunedSustainedResponses = highBandSustainedSpikeRates [ 2 ] , SOMTunedSustainedResponses = highBandSustainedSpikeRates [ 3 ] , SOMTunedOffCentreSustainedResponses = highBandSustainedSpikeRates [ 4 ] , SOMUntunedSustainedResponses = highBandSustainedSpikeRates [ 5 ] , ExcTunedSustainedResponses = highBandSustainedSpikeRates [ 6 ] , ExcTunedOffCentreSustainedResponses = highBandSustainedSpikeRates [ 7 ] , ExcUntunedSustainedResponses = highBandSustainedSpikeRates [ 8 ] , PVTunedOnsetResponses = highBandOnsetSpikeRates [ 0 ] , PVTunedOffCentreOnsetResponses = highBandOnsetSpikeRates [ 1 ] , PVUntunedOnsetResponses = highBandOnsetSpikeRates [ 2 ] , SOMTunedOnsetResponses = highBandOnsetSpikeRates [ 3 ] , SOMTunedOffCentreOnsetResponses = highBandOnsetSpikeRates [ 4 ] , SOMUntunedOnsetResponses = highBandOnsetSpikeRates [ 5 ] , ExcTunedOnsetResponses = highBandOnsetSpikeRates [ 6 ] , ExcTunedOffCentreOnsetResponses = highBandOnsetSpikeRates [ 7 ] , ExcUntunedOnsetResponses = highBandOnsetSpikeRates [ 8 ] , PVtunedBaselines = baselineSpikeRates [ 0 ] , PVtunedOffCentreBaselines = baselineSpikeRates [ 1 ] , PVuntunedBaselines = baselineSpikeRates [ 2 ] , SOMtunedBaselines = baselineSpikeRates [ 3 ] , SOMtunedOffCentreBaselines = baselineSpikeRates [ 4 ] , SOMuntunedBaselines = baselineSpikeRates [ 5 ] , ExcTunedBaselines = baselineSpikeRates [ 6 ] , ExcTunedOffCentreBaselines = baselineSpikeRates [ 7 ] , ExcUntunedBaselines = baselineSpikeRates [ 8 ] , PVtunedAveragePSTH = averagePSTHs [ 0 ] , PVtunedOffCentreAveragePSTH = averagePSTHs [ 1 ] , PVuntunedAveragePSTH = averagePSTHs [ 2 ] , SOMtunedAveragePSTH = averagePSTHs [ 3 ] , SOMtunedOffCentreAveragePSTH = averagePSTHs [ 4 ] , SOMuntunedAveragePSTH = averagePSTHs [ 5 ] , ExcTunedAveragePSTH = averagePSTHs [ 6 ] , ExcTunedOffCentreAveragePSTH = averagePSTHs [ 7 ] , ExcUntunedAveragePSTH = averagePSTHs [ 8 ] , PSTHbinStartTimes = binEdges [ : - 1 ] ) print outputFile + <str>   