import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import figparams import matplotlib . patches as mpatches import scipy . stats as stats FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 3.5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel timeRangeMovement = [ - 0.3 , 0.5 ] msRaster = 2 msSoundStart = 3 smoothWinSizePsth = 2 lwPsth = 2 downsampleFactorPsth = 1 soundColor = figparams . colp [ <str> ] labelPosX = [ 0.015 , 0.355 , 0.68 ] labelPosY = [ 0.92 ] MOVEMENTCOLORS = [ figparams . colp [ <str> ] , figparams . colp [ <str> ] ] soundColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 3 ) gs . update ( left = 0.08 , right = 0.98 , top = 0.95 , bottom = 0.15 , wspace = 0.4 , hspace = 0.1 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 0 ] , hspace = 0.1 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 1 ] , hspace = 0.1 ) ax1 = plt . subplot ( gs00 [ 0 : 3 , : ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) trialsEachCond = rasterExample [ <str> ] colorEachCond = rasterExample [ <str> ] condLabels = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] timeRange = rasterExample [ <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRangeMovement , trialsEachCond = trialsEachCond , colorEachCond = MOVEMENTCOLORS ) plt . setp ( pRaster , ms = msRaster ) soundTimesFromEventOnset = rasterExample [ <str> ] trialsToUse = np . sum ( trialsEachCond , axis = 1 ) . astype ( <str> ) yLims = plt . gca ( ) . get_ylim ( ) plt . hold ( <str> ) bplot = plt . boxplot ( soundTimesFromEventOnset [ trialsToUse ] , sym = <str> , vert = False , positions = [ yLims [ - 1 ] + 15 ] , widths = [ 25 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . autoscale ( enable = True , axis = <str> , tight = True ) plt . axis ( <str> ) for element in [ <str> , <str> , <str> , <str> ] :      plt . setp ( bplot [ element ] , color = <str> , linewidth = 1 )  plt . setp ( bplot [ <str> ] , linestyle = <str> ) plt . setp ( bplot [ <str> ] , color = <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) ax1 . set_yticklabels ( [ ] ) ax1 . set_xticklabels ( [ ] ) ax2 = plt . subplot ( gs00 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] colorEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = MOVEMENTCOLORS , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :      plt . setp ( line , label = condLabels [ ind ] )  plt . legend ( [ <str> , <str> ] , loc = <str> , fontsize = fontSizeTicks , handlelength = 0.2 , frameon = False , handletextpad = 0.3 , labelspacing = 0 , borderaxespad = 0 ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeMovement [ 0 ] , timeRangeMovement [ 1 ] ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 35 ] plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) extraplots . boxoff ( plt . gca ( ) ) ax1 = plt . subplot ( gs01 [ 0 : 3 , : ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) trialsEachCond = rasterExample [ <str> ] colorEachCond = rasterExample [ <str> ] condLabels = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] timeRange = rasterExample [ <str> ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange = timeRangeMovement , trialsEachCond = trialsEachCond , colorEachCond = MOVEMENTCOLORS ) plt . setp ( pRaster , ms = msRaster ) soundTimesFromEventOnset = rasterExample [ <str> ] trialsToUse = np . sum ( trialsEachCond , axis = 1 ) . astype ( <str> ) yLims = plt . gca ( ) . get_ylim ( ) plt . hold ( <str> ) bplot = plt . boxplot ( soundTimesFromEventOnset [ trialsToUse ] , sym = <str> , vert = False , whis = 0.75 , positions = [ yLims [ - 1 ] + 15 ] , widths = [ 25 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . autoscale ( enable = True , axis = <str> , tight = True ) plt . axis ( <str> ) for element in [ <str> , <str> , <str> , <str> ] :      plt . setp ( bplot [ element ] , color = <str> , linewidth = 1 )  plt . setp ( bplot [ <str> ] , color = <str> ) plt . setp ( bplot [ <str> ] , linestyle = <str> ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) ax1 . set_yticklabels ( [ ] ) ax1 . set_xticklabels ( [ ] ) ax2 = plt . subplot ( gs01 [ 3 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] colorEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = MOVEMENTCOLORS , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) for ind , line in enumerate ( pPSTH ) :      plt . setp ( line , label = condLabels [ ind ] )  plt . legend ( [ <str> , <str> ] , loc = <str> , fontsize = fontSizeTicks , handlelength = 0.2 , frameon = False , handletextpad = 0.3 , labelspacing = 0 , borderaxespad = 0 ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeMovement [ 0 ] , timeRangeMovement [ 1 ] ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = [ 0 , 15 ] plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) extraplots . boxoff ( plt . gca ( ) ) ax3 = plt . subplot ( gs [ : , 2 ] ) ax3 . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) summaryFilename = <str> summaryFullPath = os . path . join ( dataDir , summaryFilename ) summary = np . load ( summaryFullPath ) sigModulated = summary [ <str> ] sigMI = summary [ <str> ] [ sigModulated ] nonsigMI = summary [ <str> ] [ ~ sigModulated ] binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . hist ( [ sigMI , nonsigMI ] , bins = binsEdges , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , rwidth = 0.8 ) yPosText = 0.95 * plt . ylim ( ) [ 1 ] plt . text ( - 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . text ( 0.5 , yPosText , <str> , ha = <str> , fontsize = fontSizeLabels ) plt . axvline ( x = 0 , linestyle = <str> , linewidth = 1.5 , color = <str> ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) ) plt . show ( ) numCells = len ( sigModulated ) numSig = len ( sigMI ) numSigNeg = sum ( sigMI < 0 ) numSigPos = sum ( sigMI > 0 ) print numSig , <str> , np . mean ( sigModulated ) * 100 , <str> , numCells , <str> print <str> , numSigNeg , <str> . format ( 100 * numSigNeg / float ( numCells ) ) print <str> , np . mean ( summary [ <str> ] ) ( T , pVal ) = stats . wilcoxon ( summary [ <str> ] ) print <str> , pVal if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   