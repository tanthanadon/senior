import pandas as pd from scipy import signal from scipy import stats import numpy as np from jaratoolbox import celldatabase from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import loadopenephys from jaratoolbox import extraplots from jaratoolbox import settings from jaratoolbox import ephyscore import figparams from matplotlib import pyplot as plt import os dbPath = <str> dataframe = celldatabase . load_hdf ( dbPath ) for indIter , ( indRow , dbRow ) in enumerate ( dataframe . iterrows ( ) ) :      if not <str> in dbRow [ <str> ] :          print <str> continue  cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) try :          ephysData , bdata = cell . load ( <str> )  except ( IndexError , ValueError ) :          failed = True print <str> . format ( indRow ) continue  spikeTimes = ephysData [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] if len ( spikeTimes ) < 100 :          print <str> continue  rateEachTrial = bdata [ <str> ] possibleRate = np . unique ( rateEachTrial ) if len ( rateEachTrial ) != len ( eventOnsetTimes ) :          eventOnsetTimes = eventOnsetTimes [ : - 1 ] if len ( rateEachTrial ) != len ( eventOnsetTimes ) :              raise ValueError ( <str> )   baseRange = [ - 0.5 , - 0.1 ] responseRange = [ 0.1 , 0.5 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ 1 ] ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) [ zScore , pVal ] = stats . ranksums ( nspkResp , nspkBase ) if pVal > 0.05 :          print <str> continue  baseRange = [ - 0.1 , - 0.05 ] responseRange = [ 0 , 0.5 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ - 1 ] ] evokedFREachRate = np . zeros ( len ( possibleRate ) ) baselineFREachRate = np . zeros ( len ( possibleRate ) ) for indRate , thisRate in enumerate ( possibleRate ) :          eventsThisRate = eventOnsetTimes [ rateEachTrial == thisRate ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventsThisRate , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResponse = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) avgResponse = nspkResponse . mean ( axis = 0 ) timeRangeResponse = responseRange [ 1 ] - responseRange [ 0 ] responseRate = avgResponse / timeRangeResponse avgBase = nspkBase . mean ( axis = 0 ) timeRangeBase = baseRange [ 1 ] - baseRange [ 0 ] baseRate = avgBase / timeRangeBase evokedFREachRate [ indRate ] = responseRate baselineFREachRate [ indRate ] = baseRate  dataframe . loc [ indRow , <str> ] = np . max ( evokedFREachRate ) dataframe . loc [ indRow , <str> ] = np . mean ( baselineFREachRate )   