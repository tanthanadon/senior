import numpy as np import pypsignifit as psi import os from jaratoolbox import behavioranalysis from jaratoolbox import settings import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  scriptFullPath = os . path . realpath ( __file__ ) animal = <str> session = <str> bdata = behavioranalysis . load_many_sessions ( animal , [ session ] ) targetFrequency = bdata [ <str> ] choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) choiceRight = choice == bdata . labels [ <str> ] [ <str> ] trialType = bdata [ <str> ] stimTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] stimLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( trialType , stimTypes ) nStimTypes = len ( stimTypes ) psycurveDict = { } for stimType in range ( nStimTypes ) :      if np . any ( trialsEachType [ : , stimType ] ) :          print <str> . format ( animal , session , stimLabels [ stimType ] ) targetFrequencyThisBlock = targetFrequency [ trialsEachType [ : , stimType ] ] validThisBlock = valid [ trialsEachType [ : , stimType ] ] choiceRightThisBlock = choiceRight [ trialsEachType [ : , stimType ] ] ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRightThisBlock , targetFrequencyThisBlock , validThisBlock ) psycurveDict [ <str> ] = possibleValues psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fractionHitsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = ciHitsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = nTrialsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = nHitsEachValue logPossibleValues = np . log2 ( possibleValues ) lowerFreqConstraint = logPossibleValues [ 0 ] upperFreqConstraint = logPossibleValues [ - 1 ] constraints = ( <str> . format ( lowerFreqConstraint , upperFreqConstraint ) , <str> , <str> , <str> ) data = np . c_ [ logPossibleValues , nHitsEachValue , nTrialsEachValue ] psyCurveInference = psi . BootstrapInference ( data , sample = False , sigmoid = <str> , core = <str> , priors = constraints , nafc = 1 ) xValues = logPossibleValues xRange = xValues [ - 1 ] - xValues [ 1 ] fitxval = np . linspace ( xValues [ 0 ] - 0.2 * xRange , xValues [ - 1 ] + 0.2 * xRange , 40 ) fityval = psyCurveInference . evaluate ( x = fitxval ) psycurveDict [ <str> ] = logPossibleValues psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fitxval psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fityval   outputFile = <str> . format ( animal , session ) outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , animal = animal , session = session , script = scriptFullPath , ** psycurveDict ) animal = <str> session = <str> bdata = behavioranalysis . load_many_sessions ( animal , [ session ] ) targetFrequency = bdata [ <str> ] choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) choiceRight = choice == bdata . labels [ <str> ] [ <str> ] trialType = bdata [ <str> ] stimTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] stimLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( trialType , stimTypes ) nStimTypes = len ( stimTypes ) psycurveDict = { } for stimType in range ( nStimTypes ) :      if np . any ( trialsEachType [ : , stimType ] ) :          print <str> . format ( animal , session , stimLabels [ stimType ] ) targetFrequencyThisBlock = targetFrequency [ trialsEachType [ : , stimType ] ] validThisBlock = valid [ trialsEachType [ : , stimType ] ] choiceRightThisBlock = choiceRight [ trialsEachType [ : , stimType ] ] ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRightThisBlock , targetFrequencyThisBlock , validThisBlock ) psycurveDict [ <str> ] = possibleValues psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fractionHitsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = ciHitsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = nTrialsEachValue psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = nHitsEachValue logPossibleValues = np . log2 ( possibleValues ) lowerFreqConstraint = logPossibleValues [ 0 ] upperFreqConstraint = logPossibleValues [ - 1 ] constraints = ( <str> . format ( lowerFreqConstraint , upperFreqConstraint ) , <str> , <str> , <str> ) data = np . c_ [ logPossibleValues , nHitsEachValue , nTrialsEachValue ] psyCurveInference = psi . BootstrapInference ( data , sample = False , sigmoid = <str> , core = <str> , priors = constraints , nafc = 1 ) xValues = logPossibleValues xRange = xValues [ - 1 ] - xValues [ 1 ] fitxval = np . linspace ( xValues [ 0 ] - 0.2 * xRange , xValues [ - 1 ] + 0.2 * xRange , 40 ) fityval = psyCurveInference . evaluate ( x = fitxval ) psycurveDict [ <str> ] = logPossibleValues psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fitxval psycurveDict [ <str> . format ( stimLabels [ stimType ] ) ] = fityval   outputFile = <str> . format ( animal , session ) outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , animal = animal , session = session , script = scriptFullPath , ** psycurveDict )  