import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as patches from mpl_toolkits . axes_grid1 . inset_locator import inset_axes from scipy import stats from jaratoolbox import settings from jaratoolbox import extraplots import figparams INACTFIGNAME = <str> inactDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , INACTFIGNAME ) CONTROLFIGNAME = <str> controlDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , CONTROLFIGNAME ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 10 , 10 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel fontSizeLegend = figparams . fontSizeLegend labelPosX = [ 0.005 , 0.36 , 0.66 , 0.42 ] labelPosY = [ 0.98 , 0.78 , 0.48 , 0.28 ] PVFileName = <str> SOMFileName = <str> summaryFileName = <str> controlFileName = <str> ExcColour = figparams . colp [ <str> ] PVColour = figparams . colp [ <str> ] SOMColour = figparams . colp [ <str> ] laserColour = figparams . colp [ <str> ] soundColour = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 4 , 3 , width_ratios = [ 1.2 , 1 , 1 ] , height_ratios = [ 0.7 , 1 , 0.7 , 1 ] ) gs . update ( top = 0.99 , bottom = 0.05 , left = 0.07 , right = 0.94 , wspace = 0.5 , hspace = 0.3 ) if PANELS [ 0 ] :      exampleCells = [ PVFileName , SOMFileName ] cellColours = [ PVColour , SOMColour ] panelLabels = [ <str> , <str> ] PSTHylims = [ ( - 1 , 47 ) , ( - 0.4 , 16 ) ] for indCell , cell in enumerate ( exampleCells ) :          axExample = gs [ 2 * indCell + 1 , 0 ] exampleDataFullPath = os . path . join ( inactDataDir , cell ) exampleData = np . load ( exampleDataFullPath ) laserTrials = exampleData [ <str> ] inner = gridspec . GridSpecFromSubplotSpec ( 3 , 1 , subplot_spec = axExample , wspace = 0.1 , hspace = 0.34 ) for laser in laserTrials :              axRaster = plt . subplot ( inner [ laser , 0 ] ) trialsEachCond = exampleData [ <str> ] [ : , laser ] trialsEachCond = np . reshape ( trialsEachCond , ( len ( trialsEachCond ) , 1 ) ) pRaster , hcond , zline = extraplots . raster_plot ( exampleData [ <str> ] , exampleData [ <str> ] , exampleData [ <str> ] , trialsEachCond = trialsEachCond ) plt . setp ( pRaster , ms = 3 ) plt . locator_params ( axis = <str> , nbins = 4 ) axRaster . set_xticklabels ( <str> ) while len ( hcond ) > 0 :                  bar = hcond . pop ( 0 ) bar . remove ( )  yLims = np . array ( plt . ylim ( ) ) rect = patches . Rectangle ( ( 0.0 , yLims [ 1 ] * 1.06 ) , 1.0 , yLims [ 1 ] * 0.05 , linewidth = 1 , edgecolor = soundColour , facecolor = soundColour , clip_on = False ) axRaster . add_patch ( rect ) if laser :                  yLims = np . array ( plt . ylim ( ) ) rect = patches . Rectangle ( ( - 0.1 , yLims [ 1 ] * 1.16 ) , 1.3 , yLims [ 1 ] * 0.05 , linewidth = 1 , edgecolor = laserColour , facecolor = laserColour , clip_on = False ) axRaster . add_patch ( rect )   axPSTH = plt . subplot ( inner [ 2 , 0 ] ) binStartTimes = exampleData [ <str> ] controlPSTH = exampleData [ <str> ] laserPSTH = exampleData [ <str> ] smoothWinSize = 2 winShape = np . concatenate ( ( np . zeros ( smoothWinSize ) , np . ones ( smoothWinSize ) ) ) winShape = winShape / np . sum ( winShape ) controlPSTHSmooth = np . convolve ( controlPSTH , winShape , mode = <str> ) laserPSTHSmooth = np . convolve ( laserPSTH , winShape , mode = <str> ) controlPSTHSmooth [ : smoothWinSize ] = controlPSTH [ : smoothWinSize ] laserPSTHSmooth [ : smoothWinSize ] = laserPSTH [ : smoothWinSize ] plt . hold ( 1 ) l1 , = plt . plot ( binStartTimes , controlPSTHSmooth , color = ExcColour , lw = 2 ) l2 , = plt . plot ( binStartTimes , laserPSTHSmooth , color = cellColours [ indCell ] , lw = 2 ) plt . legend ( [ l1 , l2 ] , [ <str> , <str> ] , bbox_to_anchor = ( 1.0 , 1.35 ) , frameon = False , fontsize = fontSizeLegend , ncol = 2 ) zline = plt . axvline ( 0 , color = <str> , zorder = - 10 ) plt . ylim ( PSTHylims [ indCell ] ) plt . locator_params ( axis = <str> , nbins = 4 ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axPSTH ) plt . gcf ( ) . add_subplot ( inner [ : - 1 , 0 ] , frameon = False ) plt . tick_params ( labelcolor = <str> , top = False , bottom = False , left = False , right = False ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axRaster . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 0 ] , labelPosY [ 2 * indCell + 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) cartoonLabels = [ <str> , <str> ] for ind , label in enumerate ( cartoonLabels ) :              axRaster . annotate ( label , xy = ( labelPosX [ 0 ] , labelPosY [ 2 * ind ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  cartoonLabels = [ <str> , <str> ] for ind , label in enumerate ( cartoonLabels ) :              axRaster . annotate ( label , xy = ( labelPosX [ 3 ] , labelPosY [ 2 * ind ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )    if PANELS [ 1 ] :      summaryDataFullPath = os . path . join ( inactDataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) cellColours = [ PVColour , SOMColour ] panelLabels = [ <str> , <str> ] PVcontrolResponses = summaryData [ <str> ] PVlaserResponses = summaryData [ <str> ] PVchangeSoundResponse = PVlaserResponses - PVcontrolResponses SOMcontrolResponses = summaryData [ <str> ] SOMlaserResponses = summaryData [ <str> ] SOMchangeSoundResponse = SOMlaserResponses - SOMcontrolResponses PVcontrolLaserOnsets = summaryData [ <str> ] PVlaserOnsets = summaryData [ <str> ] PVchangeLaserOnsetResponse = PVlaserOnsets - PVcontrolLaserOnsets SOMcontrolLaserOnsets = summaryData [ <str> ] SOMlaserOnsets = summaryData [ <str> ] SOMchangeLaserOnsetResponse = SOMlaserOnsets - SOMcontrolLaserOnsets PVpVals = summaryData [ <str> ] SOMpVals = summaryData [ <str> ] PVlaserOnsetpVals = summaryData [ <str> ] SOMlaserOnsetpVals = summaryData [ <str> ] responses = [ [ PVchangeLaserOnsetResponse , PVchangeSoundResponse ] , [ SOMchangeLaserOnsetResponse , SOMchangeSoundResponse ] ] pVals = [ PVlaserOnsetpVals , SOMlaserOnsetpVals ] xRanges = [ [ - 30 , 40 ] , [ - 20 , 30 ] ] yRanges = [ [ - 40 , 30 ] , [ - 20 , 30 ] ] for indType , cellType in enumerate ( responses ) :          axScatter = plt . subplot ( gs [ 2 * indType + 1 , 1 ] ) plt . hold ( True ) sigCells = ( pVals [ indType ] < 0.05 ) & ( cellType [ 0 ] < 0 ) print np . sum ( sigCells ) plt . scatter ( cellType [ 0 ] [ sigCells ] , cellType [ 1 ] [ sigCells ] , edgecolors = cellColours [ indType ] , facecolors = <str> , s = 15 ) plt . scatter ( cellType [ 0 ] [ ~ sigCells ] , cellType [ 1 ] [ ~ sigCells ] , edgecolors = cellColours [ indType ] , facecolors = cellColours [ indType ] , s = 15 ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . plot ( [ 0 , 0 ] , yRanges [ indType ] , <str> ) plt . plot ( xRanges [ indType ] , [ 0 , 0 ] , <str> ) plt . xlim ( xRanges [ indType ] ) plt . ylim ( yRanges [ indType ] ) axScatter . annotate ( panelLabels [ indType ] , xy = ( labelPosX [ 1 ] , labelPosY [ 2 * indType + 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( axScatter ) axScatter . set ( adjustable = <str> , aspect = <str> )   if PANELS [ 2 ] :      panelLabels = [ <str> , <str> ] cellLabels = [ <str> , <str> ] dataFullPath = os . path . join ( controlDataDir , controlFileName ) data = np . load ( dataFullPath ) PVNoLaser = data [ <str> ] PVLaser = data [ <str> ] noPVChange = 100.0 * ( PVLaser - PVNoLaser ) / PVNoLaser notNanInds = np . where ( np . isfinite ( noPVChange ) ) noPVChange = noPVChange [ notNanInds ] controlPVNoLaser = data [ <str> ] controlPVLaser = data [ <str> ] controlPVChange = 100.0 * ( controlPVLaser - controlPVNoLaser ) / controlPVNoLaser notNanInds = np . where ( np . isfinite ( controlPVChange ) ) controlPVChange = controlPVChange [ notNanInds ] SOMNoLaser = data [ <str> ] SOMLaser = data [ <str> ] noSOMChange = 100.0 * ( SOMLaser - SOMNoLaser ) / SOMNoLaser notNanInds = np . where ( np . isfinite ( noSOMChange ) ) noSOMChange = noSOMChange [ notNanInds ] controlSOMNoLaser = data [ <str> ] controlSOMLaser = data [ <str> ] controlSOMChange = 100.0 * ( controlSOMLaser - controlSOMNoLaser ) / controlSOMNoLaser notNanInds = np . where ( np . isfinite ( controlSOMChange ) ) controlSOMChange = controlSOMChange [ notNanInds ] noPVpVal = stats . ranksums ( ( PVLaser - PVNoLaser ) , ( controlPVLaser - controlPVNoLaser ) ) [ 1 ] noSOMpVal = stats . ranksums ( ( SOMLaser - SOMNoLaser ) , ( controlSOMLaser - controlSOMNoLaser ) ) [ 1 ] print <str> . format ( noPVpVal , noSOMpVal ) cellTypeData = [ [ PVNoLaser , PVLaser ] , [ SOMNoLaser , SOMLaser ] ] controlCellTypeData = [ [ controlPVNoLaser , controlPVLaser ] , [ controlSOMNoLaser , controlSOMLaser ] ] cellTypeChangeData = [ [ noPVChange , controlPVChange ] , [ noSOMChange , controlSOMChange ] ] cellTypeColours = [ PVColour , SOMColour ] yRanges = [ [ 0 , 170 ] , [ - 20 , 110 ] ] for indType in range ( 2 ) :          axScatter = plt . subplot ( gs [ 2 * indType + 1 , 2 ] ) laserData = cellTypeData [ indType ] controlData = controlCellTypeData [ indType ] changeData = cellTypeChangeData [ indType ] plt . hold ( True ) plt . scatter ( laserData [ 0 ] , laserData [ 1 ] , edgecolors = cellTypeColours [ indType ] , facecolors = <str> , s = 15 , label = cellLabels [ indType ] ) plt . scatter ( controlData [ 0 ] , controlData [ 1 ] , edgecolors = ExcColour , facecolors = ExcColour , s = 15 , label = <str> ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . legend ( scatterpoints = 1 , loc = <str> , fontsize = fontSizeLegend , numpoints = 1 , handlelength = 0.3 , markerscale = 1.5 ) axScatter . set_xscale ( <str> , basex = 10 ) axScatter . set_yscale ( <str> , basey = 10 ) plt . plot ( [ - 5 , 100 ] , [ - 5 , 100 ] , <str> ) plt . xlim ( 0.05 , 100 ) plt . ylim ( 0.05 , 100 ) axScatter . tick_params ( top = False , right = False , which = <str> ) ticks = [ 0.1 , 1 , 10 , 100 ] axScatter . set_xticks ( ticks ) axScatter . set_xticklabels ( ticks ) axScatter . set_yticks ( ticks ) axScatter . set_yticklabels ( ticks ) extraplots . boxoff ( axScatter ) axScatter . set ( adjustable = <str> , aspect = <str> ) axScatter . annotate ( panelLabels [ indType ] , xy = ( labelPosX [ 2 ] , labelPosY [ 2 * indType + 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) pControl = stats . wilcoxon ( controlData [ 0 ] , controlData [ 1 ] ) [ 1 ] pLaser = stats . wilcoxon ( laserData [ 0 ] , laserData [ 1 ] ) [ 1 ] print <str> . format ( cellLabels [ indType ] , pControl , pLaser ) axInset = inset_axes ( axScatter , width = <str> , height = <str> , loc = 4 , bbox_to_anchor = ( 0.12 , 0.02 , 1 , 1 ) , bbox_transform = axScatter . transAxes ) barWidth = 0.9 xVals = np . arange ( 2 ) means = [ np . mean ( changeData [ 0 ] ) , np . mean ( changeData [ 1 ] ) ] SEMs = [ stats . sem ( changeData [ 0 ] ) , stats . sem ( changeData [ 1 ] ) ] axInset . bar ( xVals , means , barWidth , color = <str> , edgecolor = [ cellTypeColours [ indType ] , ExcColour ] , linewidth = 2 ) plt . errorbar ( xVals [ 0 ] + barWidth / 2 , means [ 0 ] , yerr = SEMs [ 0 ] , fmt = <str> , ecolor = cellTypeColours [ indType ] , lw = 1 , capsize = 3 ) plt . errorbar ( xVals [ 1 ] + barWidth / 2 , means [ 1 ] , yerr = SEMs [ 1 ] , fmt = <str> , ecolor = ExcColour , lw = 1 , capsize = 3 ) axInset . set_xticks ( [ ] ) axInset . tick_params ( axis = <str> , labelsize = fontSizeLegend ) plt . xlim ( - 0.2 , 2.2 ) plt . ylim ( yRanges [ indType ] ) axInset . yaxis . tick_right ( ) axInset . yaxis . set_ticks_position ( <str> ) plt . locator_params ( axis = <str> , nbins = 4 ) axInset . spines [ <str> ] . set_visible ( False ) axInset . spines [ <str> ] . set_visible ( False ) plt . ylabel ( <str> , fontsize = fontSizeLegend , rotation = - 90 , labelpad = 12 ) axInset . yaxis . set_label_position ( <str> ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ barWidth / 2 , 1 + barWidth / 2 ] , yLims [ 1 ] * 1.09 , yLims [ 1 ] * 0.04 , gapFactor = 0.35 , starSize = 6 )   if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    