import os import numpy as np import matplotlib . pyplot as plt from jaratoolbox import settings from jaratoolbox import videoanalysis reload ( videoanalysis ) import figparams FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) scriptFullPath = os . path . realpath ( __file__ ) DEFINE_STIM_COORDS = 0 DETECT_STIMULUS = 0 TRACK_COLORS = DETECT_STIMULUS CALCULATE_HEAD_ANGLE = 1 SAVE_ALL_TOGETHER = 0 allSessions = [ ] oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 275 , 50 ] , [ 290 , 60 ] ] , [ [ 530 , 50 ] , [ 545 , 60 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 280 , 70 ] , [ 300 , 80 ] ] , [ [ 535 , 65 ] , [ 550 , 75 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 280 , 70 ] , [ 300 , 80 ] ] , [ [ 535 , 65 ] , [ 550 , 75 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 55 , <str> : <str> , <str> : <str> , <str> : [ [ [ 272 , 76 ] , [ 289 , 87 ] ] , [ [ 527 , 74 ] , [ 545 , 83 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 30 , <str> : <str> , <str> : <str> , <str> : [ [ [ 260 , 50 ] , [ 280 , 60 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 30 , <str> : <str> , <str> : <str> , <str> : [ [ [ 520 , 80 ] , [ 545 , 95 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 30 , <str> : <str> , <str> : <str> , <str> : [ [ [ 275 , 85 ] , [ 290 , 95 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 30 , <str> : <str> , <str> : <str> , <str> : [ [ [ 520 , 80 ] , [ 545 , 95 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 278 , 50 ] , [ 302 , 66 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 539 , 50 ] , [ 560 , 62 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 278 , 50 ] , [ 302 , 66 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 539 , 50 ] , [ 560 , 62 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 267 , 72 ] , [ 283 , 83 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 40 , <str> : <str> , <str> : <str> , <str> : [ [ [ 519 , 74 ] , [ 534 , 81 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 279 , 81 ] , [ 299 , 92 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 534 , 76 ] , [ 549 , 85 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 29 ] , [ 551 , 36 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 266 , 26 ] , [ 285 , 39 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 266 , 26 ] , [ 285 , 39 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 29 ] , [ 551 , 36 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 547 , 52 ] , [ 561 , 59 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 547 , 52 ] , [ 561 , 59 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 547 , 52 ] , [ 561 , 59 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 277 , 48 ] , [ 294 , 59 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 277 , 48 ] , [ 294 , 59 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 277 , 48 ] , [ 294 , 59 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 43 ] , [ 543 , 51 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 43 ] , [ 543 , 51 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 43 ] , [ 543 , 51 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 532 , 43 ] , [ 543 , 51 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 264 , 44 ] , [ 279 , 52 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 264 , 44 ] , [ 279 , 52 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 264 , 44 ] , [ 279 , 52 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 264 , 44 ] , [ 279 , 52 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 250 , 58 ] , [ 265 , 66 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 250 , 58 ] , [ 265 , 66 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 250 , 58 ] , [ 265 , 66 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 250 , 58 ] , [ 265 , 66 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 519 , 56 ] , [ 533 , 61 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 519 , 56 ] , [ 533 , 61 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 519 , 56 ] , [ 533 , 61 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 519 , 56 ] , [ 533 , 61 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 271 , 53 ] , [ 284 , 59 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 271 , 53 ] , [ 284 , 59 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 271 , 53 ] , [ 284 , 59 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 541 , 52 ] , [ 554 , 57 ] ] ] } oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 541 , 52 ] , [ 554 , 57 ] ] ] } allSessions . append ( oneSession ) oneSession = { <str> : <str> , <str> : <str> , <str> : 20 , <str> : <str> , <str> : <str> , <str> : [ [ [ 541 , 52 ] , [ 554 , 57 ] ] ] } allSessions . append ( oneSession ) if not SAVE_ALL_TOGETHER :      for indSession , oneSession in enumerate ( [ allSessions [ - 1 ] ] ) :          subject = oneSession [ <str> ] session = oneSession [ <str> ] stimCoords = oneSession [ <str> ] stimThreshold = oneSession [ <str> ] stimSide = oneSession [ <str> ] stimRegion = oneSession [ <str> ] print <str> . format ( subject , session , stimRegion , stimSide ) videoPath = settings . VIDEO_PATH filenameOnly = subject + <str> + session + <str> filename = os . path . join ( videoPath , subject , filenameOnly ) stimFilename = <str> . format ( subject , session ) stimFullPath = os . path . join ( outputDir , stimFilename ) ctrackFilename = <str> . format ( subject , session ) ctrackFullPath = os . path . join ( outputDir , ctrackFilename ) headangleFilename = <str> . format ( subject , session ) headangleFullPath = os . path . join ( outputDir , headangleFilename ) if DEFINE_STIM_COORDS :              vid = videoanalysis . DefineCoordinates ( filename )  if DETECT_STIMULUS :              vid = videoanalysis . StimDetector ( filename , stimCoords ) intensity = vid . measure ( ) np . savez ( stimFullPath , subject = subject , session = session , coords = stimCoords , stimIntensity = intensity , script = scriptFullPath ) print <str> . format ( stimFullPath ) plt . clf ( ) ; plt . plot ( intensity . T , <str> ) ; plt . show ( ) plt . pause ( 0.05 )  if TRACK_COLORS :              hsvLimitsG = [ [ 45 , 70 , 70 ] , [ 75 , 255 , 255 ] ] hsvLimitsR = [ [ 170 , 70 , 70 ] , [ 179 , 255 , 255 ] ] colorLimits = [ hsvLimitsG , hsvLimitsR ] minArea = 40 vid = videoanalysis . ColorTracker ( filename , colorLimits ) vid . process ( minArea = minArea , lastFrame = None ) vid . interpolate ( ) np . savez ( ctrackFullPath , subject = subject , session = session , colorLimits = colorLimits , colorCenter = vid . colorCenter , missedFrames = vid . missed , script = scriptFullPath ) print <str> . format ( ctrackFullPath ) plt . clf ( ) plt . subplot2grid ( [ 1 , 4 ] , [ 0 , 0 ] , colspan = 3 ) plt . hold ( 1 ) plt . plot ( vid . colorCenter [ 0 , : , : ] . T , <str> ) plt . plot ( vid . colorCenter [ 1 , : , : ] . T , <str> ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) plt . hold ( 0 ) plt . subplot2grid ( [ 1 , 4 ] , [ 0 , 3 ] , colspan = 1 ) plt . hold ( 1 ) plt . plot ( vid . colorCenter [ 0 , 0 , : ] , vid . colorCenter [ 0 , 1 , : ] , <str> , color = <str> ) plt . plot ( vid . colorCenter [ 1 , 0 , : ] , vid . colorCenter [ 1 , 1 , : ] , <str> , color = <str> ) plt . hold ( 0 ) plt . show ( ) plt . pause ( 0.05 )  if CALCULATE_HEAD_ANGLE :              try :                  colortrack = np . load ( ctrackFullPath )  except IOError :                  print <str> raise  try :                  stimtrack = np . load ( stimFullPath )  except IOError :                  print <str> raise  colorCenter = colortrack [ <str> ] missedFrames = colortrack [ <str> ] stimIntensity = stimtrack [ <str> ] headVector = colorCenter [ 0 , : , : ] - colorCenter [ 1 , : , : ] nSamples = headVector . shape [ 1 ] headAngleDiscont = np . arctan2 ( headVector [ 0 , : ] , headVector [ 1 , : ] ) headAngle = np . unwrap ( headAngleDiscont , discont = np . pi ) headDiff = np . concatenate ( ( np . diff ( headAngle ) , [ 0 ] ) ) stimBool = stimIntensity > stimThreshold nStim = stimBool . shape [ 0 ] if nStim == 2 :                  deltaAngleStim1 = np . mean ( headDiff [ stimBool [ 0 , : ] ] ) deltaAngleStim2 = np . mean ( headDiff [ stimBool [ 1 , : ] ] ) deltaAngleNoStim = np . mean ( headDiff [ ~ stimBool [ 0 , : ] & ~ stimBool [ 1 , : ] ] )  elif nStim == 1 :                  deltaAngleStim1 = np . mean ( headDiff [ stimBool [ 0 , : ] ] ) deltaAngleNoStim = np . mean ( headDiff [ ~ stimBool [ 0 , : ] ] )  dStim = np . diff ( stimBool . astype ( int ) , axis = 1 ) dStim = np . hstack ( ( np . zeros ( ( nStim , 1 ) ) , dStim ) ) firstFrameEachTrial = nStim * [ None ] lastFrameEachTrial = nStim * [ None ] avgDeltaAngleEachTrial = nStim * [ None ] totalDeltaAngleEachTrial = nStim * [ None ] for stimInd in range ( nStim ) :                  firstFrameEachTrial [ stimInd ] = np . flatnonzero ( dStim [ stimInd , : ] > 0 ) lastFrameEachTrial [ stimInd ] = np . flatnonzero ( dStim [ stimInd , : ] < 0 ) nTrials = len ( firstFrameEachTrial [ stimInd ] ) avgDeltaAngleEachTrial [ stimInd ] = np . empty ( nTrials ) totalDeltaAngleEachTrial [ stimInd ] = np . empty ( nTrials ) for indt in range ( nTrials ) :                      framesThisTrial = range ( firstFrameEachTrial [ stimInd ] [ indt ] , lastFrameEachTrial [ stimInd ] [ indt ] ) avgDeltaAngleEachTrial [ stimInd ] [ indt ] = np . mean ( headDiff [ framesThisTrial ] ) totalDeltaAngleEachTrial [ stimInd ] [ indt ] = np . sum ( headDiff [ framesThisTrial ] )   np . savez ( headangleFullPath , subject = subject , session = session , headAngle = headAngle , missedFrames = missedFrames , stimBool = stimBool , avgDeltaAngleEachTrial = avgDeltaAngleEachTrial , totalDeltaAngleEachTrial = totalDeltaAngleEachTrial , firstFrameEachTrial = firstFrameEachTrial , lastFrameEachTrial = lastFrameEachTrial , stimSide = stimSide , script = scriptFullPath ) print <str> . format ( headangleFullPath ) plt . clf ( ) plt . hold ( 1 ) ax1 = plt . subplot ( 2 , 1 , 1 ) plt . plot ( headAngle , <str> ) plt . ylabel ( <str> ) ax2 = plt . subplot ( 2 , 1 , 2 , sharex = ax1 ) plt . plot ( stimIntensity . T , <str> ) plt . ylabel ( <str> ) plt . show ( ) plt . pause ( 0.05 ) print <str> print deltaAngleStim1 if nStim > 1 :                  print deltaAngleStim2  print <str> print deltaAngleNoStim print <str> print avgDeltaAngleEachTrial    if SAVE_ALL_TOGETHER :      summaryFilename = <str> summaryFullPath = os . path . join ( outputDir , summaryFilename ) subjects = [ ] sessions = [ ] stimSides = [ ] stimRegions = [ ] deltaAngleEachTrialEachSession = [ ] for indSession , oneSession in enumerate ( allSessions ) :          subject = oneSession [ <str> ] session = oneSession [ <str> ] stimSide = oneSession [ <str> ] stimRegion = oneSession [ <str> ] print <str> . format ( subject , session ) headangleFilename = <str> . format ( subject , session ) headangleFullPath = os . path . join ( outputDir , headangleFilename ) haFile = np . load ( headangleFullPath ) avgDeltaAngleEachTrial = haFile [ <str> ] totalDeltaAngleEachTrial = haFile [ <str> ] stimLabels = stimSide . split ( <str> ) for indstim , oneStimLabel in enumerate ( stimLabels ) :              subjects . append ( subject ) sessions . append ( session ) stimSides . append ( oneStimLabel ) stimRegions . append ( stimRegion ) deltaAngleEachTrialEachSession . append ( totalDeltaAngleEachTrial [ indstim , : ] )   np . savez ( summaryFullPath , subject = subjects , session = sessions , stimSide = stimSides , stimRegion = stimRegions , deltaAngleEachTrial = deltaAngleEachTrialEachSession , script = scriptFullPath ) print <str> . format ( summaryFullPath )   