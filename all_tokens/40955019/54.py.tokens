import os import numpy as np from matplotlib import pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings reload ( settings ) from jaratoolbox import extraplots from jaratoolbox import extrastats import figparams from scipy import stats reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 8 , 8 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ - 0.35 ] labelPosY = [ 1 ] fontSizeLabels = 12 fontSizeTicks = 12 fontSizePanel = 16 animalNumbers = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 3 , 1 ) gs . update ( left = 0.2 , right = 0.75 , bottom = 0.05 , top = 0.95 , wspace = 0.2 , hspace = 0.4 ) ax2 = plt . subplot ( gs [ 0 , 0 ] ) numTrialsFilename = <str> numTrialsFullPath = os . path . join ( dataDir , numTrialsFilename ) numTrialsFile = np . load ( numTrialsFullPath ) totalMat = numTrialsFile [ <str> ] validMat = numTrialsFile [ <str> ] subjects = numTrialsFile [ <str> ] conditions = numTrialsFile [ <str> ] ind = np . arange ( len ( subjects ) ) width = 0.35 muscimolColor = figparams . colp [ <str> ] condColors = [ <str> , muscimolColor ] shiftAmt = width * 0.05 fontSizeLabels = 12 fontSizeTicks = 10 pointShift = np . array ( [ - shiftAmt , shiftAmt , - shiftAmt , shiftAmt ] ) starLineHeightFactor = 1 / 35. def plot_bars ( ax , dataMat , label ) :      for indSubject , subject in enumerate ( subjects ) :          for indCond , condition in enumerate ( conditions ) :              sessionsThisCondThisSubject = dataMat [ indSubject , : , indCond ] ax . plot ( np . zeros ( len ( sessionsThisCondThisSubject ) ) + ( indSubject + 0.5 * width + indCond * width ) + pointShift , sessionsThisCondThisSubject , marker = <str> , linestyle = <str> , mec = condColors [ indCond ] , mfc = <str> ) ax . hold ( 1 )   rects1 = ax . bar ( ind , dataMat [ : , : , 0 ] . mean ( 1 ) - 0.5 , width , bottom = 0.5 , edgecolor = <str> , facecolor = <str> , lw = 2 , label = <str> , align = <str> ) rects2 = ax . bar ( ind + width + 0.015 , dataMat [ : , : , 1 ] . mean ( 1 ) - 0.5 , width , bottom = 0.5 , edgecolor = muscimolColor , lw = 2 , facecolor = <str> , label = <str> , align = <str> ) ymax = 1000 ymin = 0 ax . set_ylim ( [ ymin , ymax ] ) ax . set_xticks ( ind + width ) ax . set_xticklabels ( np . arange ( 6 ) + 1 , fontsize = fontSizeLabels ) ax . set_xlabel ( <str> , fontsize = fontSizeLabels ) ax . axhline ( y = 0.5 , color = <str> , linestyle = <str> ) ax . set_xlim ( [ ind [ 0 ] - 0.5 * width , ind [ - 1 ] + 2.5 * width ] ) ax . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) extraplots . boxoff ( ax ) ax . legend ( bbox_to_anchor = ( 0.98 , 0.7 ) , loc = 3 , numpoints = 1 , fontsize = fontSizeLabels , ncol = 1 , columnspacing = 1.5 , frameon = False ) for sigSubjectInd in [ 1 , 3 , 4 ] :          extraplots . significance_stars ( [ sigSubjectInd + 0.5 * width , sigSubjectInd + 1.5 * width ] , ymax , ( ymax - ymin ) * starLineHeightFactor , starSize = 6 , gapFactor = 0.4 , color = <str> )   plot_bars ( ax2 , validMat , <str> ) plt . show ( ) print <str> dataMat = totalMat for indSubject in range ( 5 ) :      subDataSal = dataMat [ indSubject , : , 0 ] subDataMus = dataMat [ indSubject , : , 1 ] print indSubject print stats . ranksums ( subDataSal , subDataMus )  print <str> dataMat = validMat for indSubject in range ( 5 ) :      subDataSal = dataMat [ indSubject , : , 0 ] subDataMus = dataMat [ indSubject , : , 1 ] print indSubject print stats . ranksums ( subDataSal , subDataMus )  ax3 = plt . subplot ( gs [ 2 , 0 ] ) centerToSideFilename = <str> centerToSideFullPath = os . path . join ( dataDir , centerToSideFilename ) centerToSideFile = np . load ( centerToSideFullPath ) subjects = centerToSideFile [ <str> ] conditions = centerToSideFile [ <str> ] subjectMeans = np . empty ( ( len ( subjects ) , len ( conditions ) ) ) for indSubject , subject in enumerate ( subjects ) :      for indCond , condition in enumerate ( conditions ) :          thisSubjectThisCondValid = centerToSideFile [ <str> . format ( subject , condition ) ] plt . hold ( <str> ) ax3 . plot ( np . zeros ( len ( thisSubjectThisCondValid ) ) + ( indSubject + 0.5 * width + indCond * width ) + pointShift , 1000 * thisSubjectThisCondValid , marker = <str> , linestyle = <str> , mec = condColors [ indCond ] , mfc = <str> ) ax3 . hold ( 1 ) subjectMeans [ indSubject , indCond ] = np . mean ( thisSubjectThisCondValid )   rects1 = ax3 . bar ( ind , 1000 * subjectMeans [ : , 0 ] , width , bottom = 0.5 , edgecolor = <str> , facecolor = <str> , lw = 2 , label = <str> , align = <str> ) rects2 = ax3 . bar ( ind + width + 0.015 , 1000 * subjectMeans [ : , 1 ] , width , bottom = 0.5 , edgecolor = muscimolColor , lw = 2 , facecolor = <str> , label = <str> , align = <str> ) ymax = 730 ymin = 250 plt . ylim ( [ ymin , ymax ] ) xticks = range ( 5 ) xticklabels = range ( 1 , 6 ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) ax3 . set_xlim ( [ ind [ 0 ] - 0.5 * width , ind [ - 1 ] + 2.5 * width ] ) ax3 . set_xticks ( ind + width ) ax3 . set_xticklabels ( np . arange ( 6 ) + 1 , fontsize = fontSizeTicks ) extraplots . boxoff ( ax3 ) for sigSubjectInd in [ 4 ] :      extraplots . significance_stars ( [ sigSubjectInd + 0.5 * width , sigSubjectInd + 1.5 * width ] , ymax , ( ymax - ymin ) * starLineHeightFactor , starSize = 6 , gapFactor = 0.4 , color = <str> )  for inds , subject in enumerate ( subjects ) :      zScore , pVal = stats . ranksums ( centerToSideFile [ <str> . format ( subject ) ] , centerToSideFile [ <str> . format ( subject ) ] ) print <str> . format ( inds + 1 , pVal )  ax4 = plt . subplot ( gs [ 1 , 0 ] ) soundToCoutFilename = <str> soundToCoutFullPath = os . path . join ( dataDir , soundToCoutFilename ) soundToCoutFile = np . load ( soundToCoutFullPath ) subjects = soundToCoutFile [ <str> ] conditions = soundToCoutFile [ <str> ] subjectMeans = np . empty ( ( len ( subjects ) , len ( conditions ) ) ) for indSubject , subject in enumerate ( subjects ) :      for indCond , condition in enumerate ( conditions ) :          thisSubjectThisCondValid = soundToCoutFile [ <str> . format ( subject , condition ) ] plt . hold ( <str> ) ax4 . plot ( np . zeros ( len ( thisSubjectThisCondValid ) ) + ( indSubject + 0.5 * width + indCond * width ) + pointShift , 1000 * thisSubjectThisCondValid , marker = <str> , linestyle = <str> , mec = condColors [ indCond ] , mfc = <str> ) ax4 . hold ( 1 ) subjectMeans [ indSubject , indCond ] = np . mean ( thisSubjectThisCondValid )   rects1 = ax4 . bar ( ind , 1000 * subjectMeans [ : , 0 ] , width , bottom = 0.5 , edgecolor = <str> , facecolor = <str> , lw = 2 , label = <str> , align = <str> ) rects2 = ax4 . bar ( ind + width + 0.015 , 1000 * subjectMeans [ : , 1 ] , width , bottom = 0.5 , edgecolor = muscimolColor , lw = 2 , facecolor = <str> , label = <str> , align = <str> ) ymax = 250 ymin = 100 plt . ylim ( [ ymin , ymax ] ) ax4 . set_xticks ( ind + width ) ax4 . set_xticklabels ( np . arange ( 6 ) + 1 , fontsize = fontSizeTicks ) ax4 . set_ylabel ( <str> ) ax4 . set_xlabel ( <str> ) ax4 . set_xlim ( [ ind [ 0 ] - 0.5 * width , ind [ - 1 ] + 2.5 * width ] ) extraplots . boxoff ( ax4 ) for sigSubjectInd in [ 1 , 2 , 3 , 4 ] :      extraplots . significance_stars ( [ sigSubjectInd + 0.5 * width , sigSubjectInd + 1.5 * width ] , ymax , ( ymax - ymin ) * starLineHeightFactor , starSize = 6 , gapFactor = 0.4 , color = <str> )  labelPosX = [ 0.05 ] labelPosY = [ 0.95 , 0.62 , 0.28 ] ax2 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax4 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) ax3 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 2 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) for inds , subject in enumerate ( subjects ) :      zScore , pVal = stats . ranksums ( soundToCoutFile [ <str> . format ( subject ) ] , soundToCoutFile [ <str> . format ( subject ) ] ) print <str> . format ( inds + 1 , pVal )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   