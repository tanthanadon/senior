import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as mpatches from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from scipy import stats import pandas as pd import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) outputDir = <str> db = celldatabase . load_hdf ( dbPath ) goodISI = db . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodNSpikes = goodLaser . query ( <str> ) goodPulseLatency = goodNSpikes . query ( <str> ) dbToUse = goodPulseLatency ac = dbToUse . groupby ( <str> ) . get_group ( <str> ) thal = dbToUse . groupby ( <str> ) . get_group ( <str> ) np . random . seed ( 1 ) messages = [ ] def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) plt . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  PANELS = [ 1 , 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 figFilename = <str> figFormat = <str> fullPanelWidthInches = 6.9 figSizeFactor = 2 figWidth = fullPanelWidthInches * ( figSizeFactor ) figHeight = figWidth / 1.625 figSize = [ figWidth , figHeight ] thalHistColor = <str> acHistColor = <str> fontSizeLabels = figparams . fontSizeLabels * figSizeFactor fontSizeTicks = figparams . fontSizeTicks * figSizeFactor fontSizePanel = figparams . fontSizePanel * figSizeFactor fontSizeTitles = 12 fontSizeNS = figparams . fontSizeNS fontSizeStars = figparams . fontSizeStars starHeightFactor = figparams . starHeightFactor starGapFactor = figparams . starGapFactor starYfactor = figparams . starYfactor dotEdgeColor = figparams . dotEdgeColor dataMS = 6 labelPosX = [ 0.02 , 0.35 , 0.68 , 0.85 ] labelPosY = [ 0.46 , 0.96 ] laserColor = figparams . colp [ <str> ] colorATh = figparams . cp . TangoPalette [ <str> ] colorAC = figparams . cp . TangoPalette [ <str> ] fig = plt . gcf ( ) plt . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 6 ) gs . update ( left = 0.05 , right = 0.98 , top = 0.94 , bottom = 0.10 , wspace = 0.8 , hspace = 0.5 ) exampleDataPath = os . path . join ( dataDir , <str> ) exampleData = np . load ( exampleDataPath ) exampleFreqEachTrial = exampleData [ <str> ] . item ( ) exampleSpikeTimes = exampleData [ <str> ] . item ( ) exampleTrialIndexForEachSpike = exampleData [ <str> ] . item ( ) exampleIndexLimitsEachTrial = exampleData [ <str> ] . item ( ) def plot_example_with_rate ( subplotSpec , exampleName , color = <str> ) :      fig = plt . gcf ( ) gs = gridspec . GridSpecFromSubplotSpec ( 1 , 4 , subplot_spec = subplotSpec , wspace = - 0.45 , hspace = 0.0 ) specRaster = gs [ 0 : 2 ] axRaster = plt . Subplot ( fig , specRaster ) fig . add_subplot ( axRaster ) spikeTimes = exampleSpikeTimes [ exampleName ] indexLimitsEachTrial = exampleIndexLimitsEachTrial [ exampleName ] timeRange = [ - 0.2 , 0.7 ] freqEachTrial = exampleFreqEachTrial [ exampleName ] possibleFreq = np . unique ( freqEachTrial ) freqLabels = [ <str> . format ( freq ) for freq in possibleFreq ] trialsEachCondition = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) pRaster , hCond , zline = extraplots . raster_plot ( spikeTimes , indexLimitsEachTrial , timeRange , trialsEachCondition , labels = freqLabels ) plt . setp ( pRaster , ms = figparams . rasterMS ) blankLabels = [ <str> ] * 11 for labelPos in [ 0 , 5 , 10 ] :          blankLabels [ labelPos ] = freqLabels [ labelPos ]  axRaster . set_yticklabels ( blankLabels ) ax = plt . gca ( ) ax . set_xticks ( [ 0 , 0.5 ] ) ax . set_xlabel ( <str> , fontsize = fontSizeLabels , labelpad = - 1 ) ax . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 5 ) countRange = [ 0.1 , 0.5 ] spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimes , indexLimitsEachTrial , countRange ) numSpikesInTimeRangeEachTrial = np . squeeze ( spikeCountMat ) numSpikesInTimeRangeEachTrial = np . squeeze ( np . diff ( indexLimitsEachTrial , axis = 0 ) ) if len ( numSpikesInTimeRangeEachTrial ) == len ( freqEachTrial ) + 1 :          numSpikesInTimeRangeEachTrial = numSpikesInTimeRangeEachTrial [ : - 1 ]  conditionMatShape = np . shape ( trialsEachCondition ) numRepeats = np . product ( conditionMatShape [ 1 : ] ) nSpikesMat = np . reshape ( numSpikesInTimeRangeEachTrial . repeat ( numRepeats ) , conditionMatShape ) spikesFilteredByTrialType = nSpikesMat * trialsEachCondition avgSpikesArray = np . sum ( spikesFilteredByTrialType , 0 ) / np . sum ( trialsEachCondition , 0 ) . astype ( <str> ) / np . diff ( np . array ( countRange ) ) stdSpikesArray = np . std ( spikesFilteredByTrialType , 0 ) / np . diff ( np . array ( countRange ) ) specRate = gs [ 3 ] axRate = plt . Subplot ( fig , specRate ) fig . add_subplot ( axRate ) nRates = len ( possibleFreq ) plt . hold ( True ) plt . plot ( avgSpikesArray , range ( nRates ) , <str> , mec = <str> , ms = 6 , lw = 3 , color = color ) plt . plot ( avgSpikesArray - stdSpikesArray , range ( len ( possibleFreq ) ) , <str> ) plt . plot ( avgSpikesArray + stdSpikesArray , range ( len ( possibleFreq ) ) , <str> ) axRate . set_ylim ( [ - 0.5 , nRates - 0.5 ] ) axRate . set_yticks ( range ( nRates ) ) axRate . set_yticklabels ( [ ] ) axRate . set_xlabel ( <str> , fontsize = fontSizeLabels , labelpad = - 1 ) extraplots . boxoff ( axRate ) return ( axRaster , axRate )  spec = gs [ 0 , 0 : 2 ] if PANELS [ 0 ] :      ( axRaster , axRate ) = plot_example_with_rate ( spec , <str> , color = colorATh ) axRaster . set_title ( <str> , fontsize = fontSizeTitles ) axRate . set_xlim ( [ 0 , 30 ] ) axRate . set_xticks ( [ 0 , 30 ] ) extraplots . set_ticks_fontsize ( axRate , fontSizeTicks ) extraplots . set_ticks_fontsize ( axRaster , fontSizeTicks )  axRaster . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) spec = gs [ 0 , 2 : 4 ] if PANELS [ 1 ] :      ( axRaster , axRate ) = plot_example_with_rate ( spec , <str> , color = colorATh ) axRaster . set_title ( <str> , fontsize = fontSizeTitles ) axRate . set_xlim ( [ 0 , 35 ] ) axRate . set_xticks ( [ 0 , 35 ] ) extraplots . set_ticks_fontsize ( axRate , fontSizeTicks ) extraplots . set_ticks_fontsize ( axRaster , fontSizeTicks )  axRaster . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) spec = gs [ 1 , 0 : 2 ] if PANELS [ 2 ] :      ( axRaster , axRate ) = plot_example_with_rate ( spec , <str> , color = colorAC ) axRaster . set_title ( <str> , fontsize = fontSizeTitles ) axRate . set_xlim ( [ 0 , 12 ] ) axRate . set_xticks ( [ 0 , 12 ] ) extraplots . set_ticks_fontsize ( axRate , fontSizeTicks ) extraplots . set_ticks_fontsize ( axRaster , fontSizeTicks )  axRaster . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) spec = gs [ 1 , 2 : 4 ] if PANELS [ 3 ] :      ( axRaster , axRate ) = plot_example_with_rate ( spec , <str> , color = colorAC ) axRaster . set_title ( <str> , fontsize = fontSizeTitles ) axRate . set_xlim ( [ 0 , 12 ] ) axRate . set_xticks ( [ 0 , 12 ] ) extraplots . set_ticks_fontsize ( axRate , fontSizeTicks ) extraplots . set_ticks_fontsize ( axRaster , fontSizeTicks )  axRaster . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] acPopStat = acPopStat [ acPopStat > 0 ] thalPopStat = thalPopStat [ thalPopStat > 0 ] ytickLabels = [ 4 , 8 , 16 , 32 , 64 , 128 ] yticks = np . log ( ytickLabels ) acPopStat = np . log ( acPopStat ) thalPopStat = np . log ( thalPopStat ) axSummary = plt . subplot ( gs [ 0 , 5 ] ) spacing = 0.07 plt . sca ( axSummary ) plt . hold ( 1 ) markers = extraplots . spread_plot ( 0 , thalPopStat , spacing ) plt . setp ( markers , mec = colorATh , mfc = <str> ) plt . setp ( markers , ms = dataMS ) plt . hold ( 1 ) medline ( np . median ( thalPopStat ) , 0 , 0.5 ) plt . hold ( 1 ) markers = extraplots . spread_plot ( 1 , acPopStat , spacing ) plt . setp ( markers , mec = colorAC , mfc = <str> ) plt . setp ( markers , ms = dataMS ) plt . hold ( 1 ) medline ( np . median ( acPopStat ) , 1 , 0.5 ) plt . hold ( 1 ) axSummary . set_yticks ( yticks ) axSummary . set_yticklabels ( ytickLabels ) tickLabels = [ <str> , <str> ] axSummary . set_xticks ( range ( 2 ) ) axSummary . set_xticklabels ( tickLabels , rotation = 45 ) axSummary . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . set_ticks_fontsize ( axSummary , fontSizeLabels ) extraplots . boxoff ( axSummary ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor zVal , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) starString = None if pVal < 0.05 else <str> extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = fontSizeStars , starString = starString , gapFactor = starGapFactor ) axSummary . set_ylim ( [ np . log ( 3.6 ) , np . log ( 150 ) ] ) axSummary . set_ylabel ( <str> , labelpad = - 1 , fontsize = fontSizeLabels ) plt . hold ( 1 ) pieChartGS = gridspec . GridSpecFromSubplotSpec ( 2 , 1 , subplot_spec = gs [ 0 , 4 ] ) axThalPie = plt . subplot ( pieChartGS [ 0 , 0 ] ) axACPie = plt . subplot ( pieChartGS [ 1 , 0 ] ) annotateX = 0.2 annotateY = np . array ( [ - 0.3 , - 0.45 ] ) + 0.1 rectX = annotateX - 0.2 rectY = annotateY rectWidth = 0.15 rectHeight = 0.1 axACPie . annotate ( <str> , xy = ( annotateX , annotateY [ 0 ] ) , xycoords = <str> , fontsize = fontSizeTicks - 2 ) axACPie . annotate ( <str> , xy = ( annotateX , annotateY [ 1 ] ) , xycoords = <str> , fontsize = fontSizeTicks - 2 ) fig = plt . gcf ( ) rect1 = mpatches . Rectangle ( xy = ( rectX , rectY [ 0 ] ) , width = rectWidth , height = rectHeight , fc = <str> , ec = <str> , clip_on = False , transform = axACPie . transAxes ) rect2 = mpatches . Rectangle ( xy = ( rectX , rectY [ 1 ] ) , width = rectWidth , height = rectHeight , fc = <str> , ec = <str> , clip_on = False , transform = axACPie . transAxes ) axACPie . add_patch ( rect1 ) axACPie . add_patch ( rect2 ) popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] acPopStat = acPopStat [ pd . notnull ( acPopStat ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] thalPopStat = thalPopStat [ pd . notnull ( thalPopStat ) ] acSyncN = len ( acPopStat [ acPopStat > 0 ] ) acNonSyncN = len ( acPopStat [ acPopStat == 0 ] ) acSyncFrac = acSyncN / float ( acSyncN + acNonSyncN ) acNonSyncFrac = acNonSyncN / float ( acSyncN + acNonSyncN ) pieWedges = axACPie . pie ( [ acNonSyncFrac , acSyncFrac ] , colors = [ <str> , colorAC ] , shadow = False , startangle = 0 ) for wedge in pieWedges [ 0 ] :      wedge . set_edgecolor ( colorAC )  fontSizePercent = 12 axACPie . annotate ( <str> . format ( np . round ( 100 * acNonSyncFrac ) ) , xy = [ 0.48 , 0.6 ] , rotation = 0 , fontweight = <str> , textcoords = <str> , fontsize = fontSizePercent ) axACPie . annotate ( <str> . format ( np . round ( 100 * acSyncFrac ) ) , xy = [ 0.25 , 0.25 ] , rotation = 0 , fontweight = <str> , textcoords = <str> , fontsize = fontSizePercent , color = <str> ) axACPie . set_aspect ( <str> ) thalSyncN = len ( thalPopStat [ thalPopStat > 0 ] ) thalNonSyncN = len ( thalPopStat [ thalPopStat == 0 ] ) thalSyncFrac = thalSyncN / float ( thalSyncN + thalNonSyncN ) thalNonSyncFrac = thalNonSyncN / float ( thalSyncN + thalNonSyncN ) pieWedges = axThalPie . pie ( [ thalNonSyncFrac , thalSyncFrac ] , colors = [ <str> , colorATh ] , shadow = False , startangle = 0 ) for wedge in pieWedges [ 0 ] :      wedge . set_edgecolor ( colorATh )  axThalPie . annotate ( <str> . format ( np . round ( 100 * thalNonSyncFrac ) ) , xy = [ 0.57 , 0.525 ] , rotation = 0 , fontweight = <str> , textcoords = <str> , fontsize = fontSizePercent ) axThalPie . annotate ( <str> . format ( np . round ( 100 * thalSyncFrac ) ) , xy = [ 0.2 , 0.3 ] , rotation = 0 , fontweight = <str> , textcoords = <str> , fontsize = fontSizePercent , color = <str> ) axThalPie . set_aspect ( <str> ) oddsratio , pValue = stats . fisher_exact ( [ [ acSyncN , thalSyncN ] , [ acNonSyncN , thalNonSyncN ] ] ) print <str> . format ( acNonSyncN , acSyncN + acNonSyncN ) print <str> . format ( thalNonSyncN , thalSyncN + thalNonSyncN ) print <str> . format ( pValue ) if pValue < 0.05 :      starMarker = <str>  else :      starMarker = <str>  axThalPie . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axThalPie . annotate ( <str> , xy = ( labelPosX [ 3 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axThalPie . annotate ( <str> , xy = ( labelPosX [ 2 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axThalPie . annotate ( <str> , xy = ( labelPosX [ 3 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) xBar = - 2 yCircleCenters = [ 0 , 3 ] xTickWidth = 0.2 yGapWidth = 0.5 dbPathRate = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dataframeRate = celldatabase . load_hdf ( dbPathRate ) colorATh = figparams . cp . TangoPalette [ <str> ] colorAC = figparams . cp . TangoPalette [ <str> ] goodISIRate = dataframeRate . query ( <str> ) goodShapeRate = goodISIRate . query ( <str> ) goodLaserRate = goodShapeRate . query ( <str> ) goodNSpikesRate = goodLaserRate . query ( <str> ) goodPulseLatency = goodNSpikesRate . query ( <str> ) dbToUse = goodPulseLatency acRate = dbToUse . groupby ( <str> ) . get_group ( <str> ) thalRate = dbToUse . groupby ( <str> ) . get_group ( <str> ) popStatCol = <str> acPopStat = acRate [ popStatCol ] [ pd . notnull ( acRate [ popStatCol ] ) ] thalPopStat = thalRate [ popStatCol ] [ pd . notnull ( thalRate [ popStatCol ] ) ] axSummary = plt . subplot ( gs [ 1 , 4 ] ) jitterFrac = 0.2 pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , jitterFrac ) axSummary . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = 1 , ms = dataMS ) medline ( np . median ( thalPopStat ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , jitterFrac ) axSummary . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = 1 , ms = dataMS ) medline ( np . median ( acPopStat ) , 1 , 0.5 ) tickLabels = [ <str> . format ( len ( thalPopStat ) ) , <str> . format ( len ( acPopStat ) ) ] axSummary . set_xticks ( range ( 2 ) ) axSummary . set_xticklabels ( tickLabels , rotation = 45 ) extraplots . set_ticks_fontsize ( axSummary , fontSizeLabels ) axSummary . set_ylim ( [ 0.5 , 1 ] ) yticks = [ 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1 ] axSummary . set_yticks ( yticks ) ytickLabels = [ <str> , <str> , <str> , <str> , <str> , <str> ] axSummary . set_yticklabels ( ytickLabels ) axSummary . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 12 ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat ) messages . append ( <str> . format ( <str> , pVal ) ) messages . append ( <str> . format ( popStatCol , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acPopStat ) , max ( thalPopStat ) ] ) - 0.025 yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor starString = None if pVal < 0.05 else <str> extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = fontSizeStars , starString = starString , gapFactor = starGapFactor ) extraplots . boxoff ( axSummary ) plt . hold ( 1 ) dbPathPhase = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbPhase = celldatabase . load_hdf ( dbPathPhase ) goodISIPhase = dbPhase . query ( <str> ) goodShapePhase = goodISIPhase . query ( <str> ) goodLaserPhase = goodShapePhase . query ( <str> ) goodNSpikesPhase = goodLaserPhase . query ( <str> ) acPhase = goodNSpikesPhase . groupby ( <str> ) . get_group ( <str> ) thalPhase = goodNSpikesPhase . groupby ( <str> ) . get_group ( <str> ) possibleRateKeys = np . array ( [ 4 , 5 , 8 , 11 , 16 , 22 , 32 , 45 , 64 , 90 , 128 ] ) ratesToUse = possibleRateKeys keys = [ <str> . format ( rate ) for rate in ratesToUse ] acData = np . full ( ( len ( acPhase ) , len ( ratesToUse ) ) , np . nan ) thalData = np . full ( ( len ( thalPhase ) , len ( ratesToUse ) ) , np . nan ) for externalInd , ( indRow , row ) in enumerate ( acPhase . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          acData [ externalInd , indKey ] = row [ key ]   for externalInd , ( indRow , row ) in enumerate ( thalPhase . iterrows ( ) ) :      for indKey , key in enumerate ( keys ) :          thalData [ externalInd , indKey ] = row [ key ]   acMeanPerCell = np . nanmean ( acData , axis = 1 ) acMeanPerCell = acMeanPerCell [ ~ np . isnan ( acMeanPerCell ) ] thalMeanPerCell = np . nanmean ( thalData , axis = 1 ) thalMeanPerCell = thalMeanPerCell [ ~ np . isnan ( thalMeanPerCell ) ] axSummary = plt . subplot ( gs [ 1 , 5 ] ) jitterFrac = 0.2 pos = jitter ( np . ones ( len ( thalMeanPerCell ) ) * 0 , jitterFrac ) axSummary . plot ( pos , thalMeanPerCell , <str> , mec = colorATh , mfc = <str> , alpha = 1 , ms = dataMS ) medline ( np . median ( thalMeanPerCell ) , 0 , 0.5 ) pos = jitter ( np . ones ( len ( acMeanPerCell ) ) * 1 , jitterFrac ) axSummary . plot ( pos , acMeanPerCell , <str> , mec = colorAC , mfc = <str> , alpha = 1 , ms = dataMS ) medline ( np . median ( acMeanPerCell ) , 1 , 0.5 ) tickLabels = [ <str> . format ( len ( thalMeanPerCell ) ) , <str> . format ( len ( acMeanPerCell ) ) ] axSummary . set_xticks ( range ( 2 ) ) axSummary . set_xticklabels ( tickLabels , rotation = 45 ) extraplots . set_ticks_fontsize ( axSummary , fontSizeLabels ) axSummary . set_ylim ( [ 0.5 , 1 ] ) yticks = [ 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1 ] axSummary . set_yticks ( yticks ) ytickLabels = [ <str> , <str> , <str> , <str> , <str> , <str> ] axSummary . set_yticklabels ( ytickLabels ) axSummary . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 12 ) zstat , pVal = stats . mannwhitneyu ( thalMeanPerCell , acMeanPerCell ) messages . append ( <str> . format ( <str> , pVal ) ) messages . append ( <str> . format ( <str> , len ( thalPopStat ) , len ( acPopStat ) ) ) yDataMax = max ( [ max ( acMeanPerCell ) , max ( thalMeanPerCell ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor starString = None if pVal < 0.05 else <str> extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = fontSizeStars , starString = starString , gapFactor = starGapFactor ) extraplots . boxoff ( axSummary ) plt . show ( ) print <str> for message in messages :      print ( message )  print <str> if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   