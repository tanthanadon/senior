import os import numpy as np from numpy import inf from scipy import optimize from scipy import stats from scipy import signal from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import settings import figparams import pandas as pd dbPath = <str> db = pd . read_hdf ( dbPath , key = <str> ) dataframe = db latencyDataList = [ ] for indIter , ( indRow , dbRow ) in enumerate ( dataframe . iterrows ( ) ) :      cell = ephyscore . Cell ( dbRow ) try :          ephysData , _ = cell . load ( <str> )  except ( IndexError , ValueError ) :          print <str> . format ( indRow ) dataframe . loc [ indRow , <str> ] = np . nan continue  eventOnsetTimes = ephysData [ <str> ] [ <str> ] eventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( eventOnsetTimes , minEventOnsetDiff = 0.2 ) spikeTimes = ephysData [ <str> ] baseRange = [ - 0.1 , 0 ] responseRange = [ 0 , 0.1 ] alignmentRange = [ - 0.2 , 0.2 ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) timeRangeForLatency = [ - 0.1 , 0.1 ] try :          ( respLatency , interim ) = spikesanalysis . response_latency ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRangeForLatency , threshold = 0.5 )  except IndexError :          print <str> . format ( indRow ) dataframe . loc [ indRow , <str> ] = np . nan continue  dataframe . loc [ indRow , <str> ] = respLatency print <str> . format ( 1e3 * respLatency ) saveDir = plt . clf ( ) plt . title ( respLatency ) plt . subplot ( 2 , 1 , 1 ) plt . plot ( spikeTimesFromEventOnset , newTrialInds , <str> ) plt . xlim ( timeRangeForLatency ) plt . hold ( 1 ) plt . title ( <str> . format ( indRow ) ) plt . axvline ( respLatency , color = <str> ) plt . subplot ( 2 , 1 , 2 ) plt . plot ( interim [ <str> ] , interim [ <str> ] , <str> ) plt . hold ( 1 ) plt . axvline ( respLatency , color = <str> ) plt . axhline ( interim [ <str> ] , ls = <str> , color = <str> ) plt . axhline ( interim [ <str> ] , ls = <str> , color = <str> ) plt . axhline ( interim [ <str> ] , ls = <str> , color = <str> ) plt . plot ( interim [ <str> ] , interim [ <str> ] , <str> , mec = <str> , lw = 3 ) plt . xlim ( timeRangeForLatency ) plt . show ( ) plt . waitforbuttonpress ( )  dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) print <str> . format ( dbPath ) dataframe . to_hdf ( dbPath , <str> )  