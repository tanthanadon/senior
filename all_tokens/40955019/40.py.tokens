import os import numpy as np from matplotlib import pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings reload ( settings ) from jaratoolbox import extraplots from jaratoolbox import extrastats import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 2.5 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ - 0.35 ] labelPosY = [ 0.95 ] fontSizeLabels = 12 fontSizeTicks = 12 fontSizePanel = 16 muscimolColor = <str> animalNumbers = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } animalShapes = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) panelsToPlot = [ 0 , 1 ] gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.15 , right = 0.98 , top = 0.95 , bottom = 0.1 , wspace = 0.5 , hspace = 0.5 ) ax0 = plt . subplot ( gs [ 0 , 0 ] ) ax1 = plt . subplot ( gs [ 0 , 1 ] ) ax0 . set_axis_off ( ) outsideCoords = [ - 1 , - 1 ] ax0 . set_ylim ( [ 0 , 1 ] ) ax0 . set_xlim ( [ 0 , 1 ] ) ax0 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if 0 in panelsToPlot :      musFilename = <str> musFullPath = os . path . join ( dataDir , musFilename ) musData = np . load ( musFullPath ) salFilename = <str> salFullPath = os . path . join ( dataDir , salFilename ) salData = np . load ( salFullPath ) dataToPlot = [ musData , salData ] curveColors = [ muscimolColor , <str> ] plotHandles = [ ] for indCond , condData in enumerate ( dataToPlot ) :          plt . hold ( 1 ) color = curveColors [ indCond ] logPossibleValues = condData [ <str> ] estimate = condData [ <str> ] ciHitsEachValue = condData [ <str> ] fractionHitsEachValue = condData [ <str> ] possibleValues = condData [ <str> ] xRange = logPossibleValues [ - 1 ] - logPossibleValues [ 1 ] fitxvals = np . linspace ( logPossibleValues [ 0 ] - 0.1 * xRange , logPossibleValues [ - 1 ] + 0.1 * xRange , 40 ) fityvals = extrastats . psychfun ( fitxvals , * estimate ) upperWhisker = ciHitsEachValue [ 1 , : ] - fractionHitsEachValue lowerWhisker = fractionHitsEachValue - ciHitsEachValue [ 0 , : ] ( pline , pcaps , pbars ) = ax1 . errorbar ( logPossibleValues , 100 * fractionHitsEachValue , yerr = [ 100 * lowerWhisker , 100 * upperWhisker ] , ecolor = color , fmt = None , clip_on = False ) pdots = ax1 . plot ( logPossibleValues , 100 * fractionHitsEachValue , <str> , ms = 6 , mec = <str> , mfc = color , clip_on = False ) pfit , = ax1 . plot ( fitxvals , 100 * fityvals , color = color , lw = 2 , clip_on = False ) plotHandles . append ( pfit )  ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( ax1 ) xTicks = np . array ( [ 6 , 11 , 19 ] ) ax1 . set_xticks ( np . log2 ( xTicks * 1000 ) ) freqLabels = [ <str> . format ( x ) for x in xTicks ] ax1 . set_xticklabels ( freqLabels ) ax1 . set_xlabel ( <str> , fontsize = fontSizeLabels ) ax1 . set_xlim ( [ fitxvals [ 0 ] , fitxvals [ - 1 ] ] ) ax1 . set_ylim ( [ 0 , 100 ] ) ax1 . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) ax1 . set_yticks ( [ 0 , 50 , 100 ] ) leg = ax1 . legend ( [ plotHandles [ 1 ] , plotHandles [ 0 ] ] , [ <str> , <str> ] , loc = <str> , frameon = False , labelspacing = 0.1 , handlelength = 1.5 , handletextpad = 0.2 , borderaxespad = 0.1 , fontsize = 12 )  plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   