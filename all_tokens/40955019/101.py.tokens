import os import pandas as pd import numpy as np import scipy . stats from jaratoolbox import celldatabase from jaratoolbox import spikesanalysis from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings import figparams import studyparams dbFilename = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = celldatabase . load_hdf ( dbFilename ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , <str> , figName ) bestCells = db . query ( studyparams . SINGLE_UNITS ) bestCells = bestCells . query ( studyparams . GOOD_CELLS ) PVCells = bestCells . query ( studyparams . PV_CELLS ) SOMCells = bestCells . query ( studyparams . SOM_CELLS ) ExCells = bestCells . query ( <str> ) ExCells = ExCells . loc [ ExCells [ <str> ] . isin ( studyparams . SOM_CHR2_MICE ) ] PVpeaks = PVCells [ <str> ] SOMpeaks = SOMCells [ <str> ] ExPeaks = ExCells [ <str> ] PVnormSpikeShapes = np . stack ( PVCells [ <str> ] / np . abs ( PVpeaks . str [ 1 ] ) ) SOMnormSpikeShapes = np . stack ( SOMCells [ <str> ] / np . abs ( SOMpeaks . str [ 1 ] ) ) ExNormSpikeShapes = np . stack ( ExCells [ <str> ] / np . abs ( ExPeaks . str [ 1 ] ) ) PVmedianSpikeShape = np . median ( PVnormSpikeShapes , axis = 0 ) SOMmedianSpikeShape = np . median ( SOMnormSpikeShapes , axis = 0 ) ExMedianSpikeShape = np . median ( ExNormSpikeShapes , axis = 0 ) PVspikeWidths = PVCells [ <str> ] SOMspikeWidths = SOMCells [ <str> ] ExcSpikeWidths = ExCells [ <str> ] SAMPLING_RATE = 30000.0 timestamps = 1.0 * np . arange ( PVnormSpikeShapes . shape [ 1 ] ) / SAMPLING_RATE outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , PVnormSpikeShapes = PVnormSpikeShapes , SOMnormSpikeShapes = SOMnormSpikeShapes , ExcNormSpikeShapes = ExNormSpikeShapes , PVmedianSpikeShape = PVmedianSpikeShape , SOMmedianSpikeShape = SOMmedianSpikeShape , ExcMedianSpikeShape = ExMedianSpikeShape , timestamps = timestamps , PVspikeWidths = PVspikeWidths , SOMspikeWidths = SOMspikeWidths , ExcSpikeWidths = ExcSpikeWidths ) print outputFile + <str> bestCellsPVmice = bestCells . loc [ bestCells [ <str> ] . isin ( studyparams . PV_CHR2_MICE ) ] bestCellsSOMmice = bestCells . loc [ bestCells [ <str> ] . isin ( studyparams . SOM_CHR2_MICE ) ] PVlaserChangeFR = bestCellsPVmice [ <str> ] SOMlaserChangeFR = bestCellsSOMmice [ <str> ] PVlaserPVal = bestCellsPVmice [ <str> ] SOMlaserPVal = bestCellsSOMmice [ <str> ] PVlaserUStat = bestCellsPVmice [ <str> ] SOMlaserUStat = bestCellsSOMmice [ <str> ] PVspikeWidths = bestCellsPVmice [ <str> ] SOMspikeWidths = bestCellsSOMmice [ <str> ] outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , laserChangePVmice = PVlaserChangeFR , laserChangeSOMmice = SOMlaserChangeFR , laserPValPVmice = PVlaserPVal , laserPValSOMmice = SOMlaserPVal , laserUStatPVmice = PVlaserUStat , laserUStatSOMmice = SOMlaserUStat , spikeWidthPVmice = PVspikeWidths , spikeWidthSOMmice = SOMspikeWidths ) print outputFile + <str> cellList = [ { <str> : <str> , <str> : <str> , <str> : 950 , <str> : 6 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1240 , <str> : 2 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1140 , <str> : 1 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 975 , <str> : 7 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1275 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1350 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1470 , <str> : 4 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 1200 , <str> : 6 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1700 , <str> : 4 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 1000 , <str> : 8 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1320 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1280 , <str> : 1 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1225 , <str> : 3 , <str> : 4 } ] cellTypes = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for indCell , thisCell in enumerate ( cellList ) :      cellInd , dbRow = celldatabase . find_cell ( db , ** thisCell ) cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) laserEphysData , noBehav = cell . load ( <str> ) laserEventOnsetTimes = laserEphysData [ <str> ] [ <str> ] laserSpikeTimestamps = laserEphysData [ <str> ] timeRange = [ - 0.1 , 0.3 ] laserSpikeTimesFromEventOnset , trialIndexForEachSpike , laserIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( laserSpikeTimestamps , laserEventOnsetTimes , timeRange ) peaks = dbRow [ <str> ] normSpikeShape = np . array ( dbRow [ <str> ] / np . abs ( peaks [ 1 ] ) ) outputFile = <str> . format ( cellTypes [ indCell ] , dbRow [ <str> ] , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , spikeTimesFromEventOnset = laserSpikeTimesFromEventOnset , indexLimitsEachTrial = laserIndexLimitsEachTrial , rasterTimeRange = timeRange , normSpikeShape = normSpikeShape ) print outputFile + <str>   