import os import sys import pandas as pd import numpy as np from scipy import stats from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import behavioranalysis from jaratoolbox import settings import database_bandwidth_tuning_fit_funcs as fitfuncs import figparams dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dbase = celldatabase . load_hdf ( dbPath ) figName = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , figName ) cellList = [ { <str> : <str> , <str> : <str> , <str> : 950 , <str> : 6 , <str> : 6 } , { <str> : <str> , <str> : <str> , <str> : 1240 , <str> : 2 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1140 , <str> : 1 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 975 , <str> : 7 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1275 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1350 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1470 , <str> : 4 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 1200 , <str> : 6 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1700 , <str> : 4 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 1000 , <str> : 8 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1320 , <str> : 4 , <str> : 2 } , { <str> : <str> , <str> : <str> , <str> : 1280 , <str> : 1 , <str> : 4 } , { <str> : <str> , <str> : <str> , <str> : 1225 , <str> : 3 , <str> : 4 } ] cellTypes = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] args = sys . argv [ 1 : ] if len ( args ) :      cellsToGenerate = [ int ( x ) for x in args ]  else :      cellsToGenerate = range ( len ( cellList ) )  print cellsToGenerate for indCell in cellsToGenerate :      cellInd , dbRow = celldatabase . find_cell ( dbase , ** cellList [ indCell ] ) cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) bandEphysData , bandBData = cell . load_by_index ( int ( dbRow [ <str> ] ) ) bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] if len ( bandEventOnsetTimes ) == 0 :          bandEventOnsetTimes = bandEphysData [ <str> ] [ <str> ] + 0.0093  bandEventOnsetTimes = spikesanalysis . minimum_event_onset_diff ( bandEventOnsetTimes , minEventOnsetDiff = 0.2 ) bandSpikeTimestamps = bandEphysData [ <str> ] bandEachTrial = bandBData [ <str> ] numBands = np . unique ( bandEachTrial ) secondSort = bandBData [ <str> ] numSec = np . unique ( secondSort ) rasterTimeRange = [ - 0.5 , 1.5 ] baselineRange = [ - 1.0 , - 0.2 ] fullTimeRange = [ baselineRange [ 0 ] , rasterTimeRange [ 1 ] ] bandTrialsEachCond = behavioranalysis . find_trials_each_combination ( bandEachTrial , numBands , secondSort , numSec ) bandSpikeTimesFromEventOnset , trialIndexForEachSpike , bandIndexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( bandSpikeTimestamps , bandEventOnsetTimes , fullTimeRange ) soundDuration = bandBData [ <str> ] [ - 1 ] print ( <str> . format ( soundDuration ) ) onsetTimeRange = [ 0.0 , 0.05 ] onsetDuration = onsetTimeRange [ 1 ] - onsetTimeRange [ 0 ] sustainedTimeRange = [ 0.2 , soundDuration ] sustainedDuration = sustainedTimeRange [ 1 ] - sustainedTimeRange [ 0 ] onsetSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , onsetTimeRange ) sustainedSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , sustainedTimeRange ) onsetResponseArray = np . zeros ( len ( numBands ) ) onsetSEM = np . zeros_like ( onsetResponseArray ) sustainedResponseArray = np . zeros_like ( onsetResponseArray ) sustainedSEM = np . zeros_like ( onsetResponseArray ) trialsHighAmp = bandTrialsEachCond [ : , : , - 1 ] for band in range ( len ( numBands ) ) :          trialsThisBand = trialsHighAmp [ : , band ] if onsetSpikeCountMat . shape [ 0 ] != len ( trialsThisBand ) :              onsetSpikeCountMat = onsetSpikeCountMat [ : - 1 , : ] sustainedSpikeCountMat = sustainedSpikeCountMat [ : - 1 , : ]  if any ( trialsThisBand ) :              thisBandOnsetCounts = onsetSpikeCountMat [ trialsThisBand ] . flatten ( ) thisBandSustainedCounts = sustainedSpikeCountMat [ trialsThisBand ] . flatten ( ) onsetResponseArray [ band ] = np . mean ( thisBandOnsetCounts ) / onsetDuration sustainedResponseArray [ band ] = np . mean ( thisBandSustainedCounts ) / sustainedDuration onsetSEM [ band ] = stats . sem ( thisBandOnsetCounts ) / onsetDuration sustainedSEM [ band ] = stats . sem ( thisBandSustainedCounts ) / sustainedDuration   baselineDuration = baselineRange [ 1 ] - baselineRange [ 0 ] baselineSpikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , baselineRange ) baselineMean = baselineSpikeCountMat . mean ( ) / baselineDuration baselineSEM = stats . sem ( baselineSpikeCountMat ) / baselineDuration onsetResponseArrayPureTone = onsetResponseArray . copy ( ) sustainedResponseArrayPureTone = sustainedResponseArray . copy ( ) onsetSEMPureTone = onsetSEM . copy ( ) sustainedSEMPureTone = sustainedSEM . copy ( ) onsetResponseArray [ 0 ] = baselineMean sustainedResponseArray [ 0 ] = baselineMean onsetSEM [ 0 ] = baselineSEM sustainedSEM [ 0 ] = baselineSEM numBands [ - 1 ] = 6 testBands = np . linspace ( numBands [ 0 ] , numBands [ - 1 ] , 500 ) testResps = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testRespsPureTone = fitfuncs . diff_gauss_form ( testBands , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) testBandsNoZero = np . linspace ( numBands [ 1 ] , numBands [ - 1 ] , 500 ) testRespsNoZero = fitfuncs . diff_gauss_form ( testBandsNoZero , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) sustainedSI = dbRow [ <str> ] sustainedSIPureTone = dbRow [ <str> ] sustainedSINoZero = dbRow [ <str> ] outputFile = <str> . format ( cellTypes [ indCell ] , dbRow [ <str> ] , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , onsetResponseArray = onsetResponseArray , onsetSEM = onsetSEM , sustainedResponseArray = sustainedResponseArray , sustainedSEM = sustainedSEM , onsetResponseArrayPureTone = onsetResponseArrayPureTone , onsetSEMPureTone = onsetSEMPureTone , sustainedResponseArrayPureTone = sustainedResponseArrayPureTone , sustainedSEMPureTone = sustainedSEMPureTone , possibleBands = numBands , spikeTimesFromEventOnset = bandSpikeTimesFromEventOnset , indexLimitsEachTrial = bandIndexLimitsEachTrial , trialsEachCond = trialsHighAmp , onsetTimeRange = onsetTimeRange , sustainedTimeRange = sustainedTimeRange , rasterTimeRange = rasterTimeRange , fitBands = testBands , fitResponse = testResps , fitResponsePureTone = testRespsPureTone , fitBandsNoZero = testBandsNoZero , fitResponseNoZero = testRespsNoZero , SI = sustainedSI , SIPureTone = sustainedSIPureTone , SINoZero = sustainedSINoZero ) print outputFile + <str>   