import os import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors import matplotlib . patches as patches from scipy import stats from jaratoolbox import settings from jaratoolbox import extraplots import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 5 , 6 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelPosX = [ 0.02 , 0.53 ] labelPosY = [ 0.96 , 0.48 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 2 , width_ratios = [ 1 , 0.7 ] ) gs . update ( top = 0.95 , left = 0.1 , right = 0.95 , wspace = 0.6 , hspace = 0.2 ) exampleNoSOM = <str> exampleNoPV = <str> summaryFileName = <str> if PANELS [ 0 ] :      exampleCells = [ exampleNoPV , exampleNoSOM ] figLegends = [ <str> , <str> ] excColour = figparams . colp [ <str> ] PVcolour = figparams . colp [ <str> ] SOMcolour = figparams . colp [ <str> ] colours = [ [ excColour , PVcolour ] , [ excColour , SOMcolour ] ] lineType = [ <str> , <str> ] panelLabels = [ <str> , <str> ] for indCell , cell in enumerate ( exampleCells ) :          exampleDataFullPath = os . path . join ( dataDir , cell ) exampleData = np . load ( exampleDataFullPath ) sustainedResponseArray = exampleData [ <str> ] sustainedSEM = exampleData [ <str> ] baseline = sustainedResponseArray [ 0 ] bands = exampleData [ <str> ] laserTrials = exampleData [ <str> ] bandLabels = [ <str> . format ( band ) for band in np . unique ( bands ) ] fitBands = exampleData [ <str> ] fitResponseNoLaser = exampleData [ <str> ] fitResponseLaser = exampleData [ <str> ] fits = [ fitResponseNoLaser , fitResponseLaser ] lines = [ ] SIs = [ float ( exampleData [ <str> ] ) , float ( exampleData [ <str> ] ) ] plt . hold ( 1 ) axCurve = plt . subplot ( gs [ indCell , 0 ] ) axCurve . set_xscale ( <str> , basex = 2 , linthreshx = 0.25 , linscalex = 0.5 ) for laser in laserTrials :              thisResponse = sustainedResponseArray [ : , laser ] . flatten ( ) thisSEM = sustainedSEM [ : , laser ] . flatten ( ) plt . plot ( bands , thisResponse , <str> , ms = 5 , color = colours [ indCell ] [ laser ] , mec = colours [ indCell ] [ laser ] , clip_on = False ) plt . errorbar ( bands , thisResponse , yerr = [ thisSEM , thisSEM ] , fmt = <str> , ecolor = colours [ indCell ] [ laser ] ) line , = plt . plot ( fitBands , fits [ laser ] , lineType [ laser ] , lw = 1.5 , color = colours [ indCell ] [ laser ] ) lines . append ( line )  plt . legend ( [ lines [ - 1 ] , lines [ 0 ] ] , [ figLegends [ indCell ] , <str> ] , loc = <str> , frameon = False , fontsize = fontSizeLabels ) axCurve . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 0 ] , labelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axCurve . set_ylim ( bottom = 0 ) axCurve . set_xticks ( bands [ 1 : ] ) axCurve . tick_params ( top = False , right = False , which = <str> ) extraplots . boxoff ( axCurve ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) if not indCell :              axCurve . set_xticklabels ( <str> )  if indCell :              axCurve . set_xticks ( bands ) bands = bands . tolist ( ) bands [ - 1 ] = <str> bands [ 1 : : 2 ] = [ <str> ] * len ( bands [ 1 : : 2 ] ) axCurve . set_xticklabels ( bands ) plt . xlabel ( <str> , fontsize = fontSizeLabels )  plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( - 0.1 , 7 )   if PANELS [ 1 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedSuppressionNoLaser = summaryData [ <str> ] PVsustainedSuppressionLaser = summaryData [ <str> ] SOMsustainedSuppressionNoLaser = summaryData [ <str> ] SOMsustainedSuppressionLaser = summaryData [ <str> ] noPVsupDiff = PVsustainedSuppressionLaser - PVsustainedSuppressionNoLaser noSOMsupDiff = SOMsustainedSuppressionLaser - SOMsustainedSuppressionNoLaser panelLabel = <str> cellLabels = [ <str> , <str> ] PVcolour = figparams . colp [ <str> ] SOMcolour = figparams . colp [ <str> ] cellTypeColours = [ PVcolour , SOMcolour ] supDiffs = [ noPVsupDiff , noSOMsupDiff ] axBar = plt . subplot ( gs [ 0 , 1 ] ) width = 0.7 ind = np . arange ( 2 ) SIMeans = [ np . mean ( noPVsupDiff ) , np . mean ( noSOMsupDiff ) ] SISEMs = [ stats . sem ( noPVsupDiff ) , stats . sem ( noSOMsupDiff ) ] barPlot = axBar . bar ( ind , SIMeans , width , edgecolor = [ PVcolour , SOMcolour ] , color = <str> , linewidth = 3 ) plt . plot ( [ - 5 , 5 ] , [ 0 , 0 ] , <str> , zorder = - 10 ) plt . errorbar ( ind + width / 2 , SIMeans , yerr = [ SISEMs , SISEMs ] , fmt = <str> , ecolor = PVcolour , lw = 1.5 , capsize = 5 ) plt . xlim ( - 0.2 , 1.9 ) axBar . set_xticks ( ind + width / 2 ) axBar . set_xticklabels ( cellLabels ) yLims = ( - 0.15 , 0.1 ) plt . ylim ( yLims ) extraplots . significance_stars ( [ width / 2 , 1 + width / 2 ] , yLims [ 1 ] * 0.92 , yLims [ 1 ] * 0.07 , gapFactor = 0.2 ) extraplots . boxoff ( axBar ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axBar . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if PANELS [ 2 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVpeakChange = summaryData [ <str> ] PVWNChange = summaryData [ <str> ] semPVpeakChange = summaryData [ <str> ] semPVWNChange = summaryData [ <str> ] SOMpeakChange = summaryData [ <str> ] SOMWNChange = summaryData [ <str> ] semSOMpeakChange = summaryData [ <str> ] semSOMWNChange = summaryData [ <str> ] cellLabels = [ <str> , <str> ] cellColours = [ PVcolour , SOMcolour ] panelLabel = <str> axBar = plt . subplot ( gs [ 1 , 1 ] ) plt . hold ( True ) ind = np . arange ( 2 ) width = 0.4 peakMeans = [ PVpeakChange , SOMpeakChange ] peakSEMs = [ semPVpeakChange , semSOMpeakChange ] peakPlot = axBar . bar ( ind , peakMeans , width , color = cellColours , edgecolor = <str> ) plt . errorbar ( ind + width / 2 , peakMeans , yerr = [ peakSEMs , peakSEMs ] , fmt = <str> , ecolor = PVcolour , lw = 1.5 , capsize = 5 ) WNMeans = [ PVWNChange , SOMWNChange ] WNSEMs = [ semPVWNChange , semSOMWNChange ] WNPlot = axBar . bar ( ind + width , WNMeans , width , edgecolor = cellColours , color = <str> , linewidth = 3 ) plt . errorbar ( ind + 3 * width / 2 , WNMeans , yerr = [ WNSEMs , WNSEMs ] , fmt = <str> , ecolor = PVcolour , lw = 1.5 , capsize = 5 ) axBar . set_xticks ( ind + width ) axBar . set_xticklabels ( cellLabels ) extraplots . boxoff ( axBar ) axBar . legend ( ( peakPlot , WNPlot ) , ( <str> , <str> ) , loc = <str> , frameon = False , fontsize = fontSizeLabels , handlelength = 0.6 ) plt . ylabel ( <str> ) plt . xlim ( - 0.1 , 1.9 ) yLims = ( 0 , 3.5 ) plt . ylim ( yLims ) extraplots . new_significance_stars ( [ width / 2 , 3 * width / 2 ] , yLims [ 1 ] * 0.5 , yLims [ 1 ] * 0.03 , starMarker = <str> , fontSize = 10 , gapFactor = 0.3 ) extraplots . significance_stars ( [ 1 + width / 2 , 1 + 3 * width / 2 ] , yLims [ 1 ] * 0.92 , yLims [ 1 ] * 0.03 , gapFactor = 0.2 ) axBar . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    