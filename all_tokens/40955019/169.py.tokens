import os import numpy as np from collections import Counter import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import colorpalette from scipy import stats import copy import pandas as pd import figparams reload ( figparams ) import fnmatch dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) dataframe = pd . read_hdf ( dbPath , key = <str> ) taggedCond = np . full ( len ( dataframe ) , np . nan ) cellInds = np . full ( len ( dataframe ) , np . nan ) allTaggedCells = [ ] for indIter , ( indCell , cell ) in enumerate ( dataframe . iterrows ( ) ) :      subject = cell [ <str> ] date = cell [ <str> ] depth = cell [ <str> ] tetrode = cell [ <str> ] cluster = int ( cell [ <str> ] ) cellName = <str> . format ( subject , date , depth , tetrode , cluster ) if cell [ <str> ] == 1 :          taggedCond [ indIter ] = 0 cellInds [ indIter ] = indCell allTaggedCells . append ( cellName ) print <str> . format ( indCell )   taggedBool = ( taggedCond == 0 ) sameShankAs = { 1 : 2 , 2 : 1 , 3 : 4 , 4 : 3 , 5 : 6 , 6 : 5 , 7 : 8 , 8 : 7 } for indIter , ( indCell , cell ) in enumerate ( dataframe . iterrows ( ) ) :      if taggedCond [ indIter ] != 0 :          subject = cell [ <str> ] date = cell [ <str> ] depth = cell [ <str> ] tetrode = cell [ <str> ] pattern = <str> . format ( subject , date , depth , tetrode ) patternSSA = <str> . format ( subject , date , depth , sameShankAs [ tetrode ] ) matches = fnmatch . filter ( allTaggedCells , pattern ) matchesSSA = fnmatch . filter ( allTaggedCells , patternSSA ) if ( len ( matches ) > 0 ) | ( len ( matchesSSA ) > 0 ) :              taggedCond [ indIter ] = 1 cellInds [ indIter ] = indCell  else :              taggedCond [ indIter ] = 2 cellInds [ indIter ] = indCell    dataframe [ <str> ] = taggedCond print <str> . format ( dbPath ) dataframe . to_hdf ( dbPath , key = <str> )  