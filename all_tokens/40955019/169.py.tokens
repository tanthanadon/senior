import os import numpy as np from numpy import inf from scipy import optimize from scipy import stats from scipy import signal from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import settings from sklearn import metrics from matplotlib import pyplot as plt import figparams def xtab ( cols , apply_wt = False ) :      if not all ( len ( col ) == len ( cols [ 0 ] ) for col in cols [ 1 : ] ) :          raise ValueError ( <str> )  if len ( cols ) == 0 :          raise TypeError ( <str> )  fnx1 = lambda q : len ( q . squeeze ( ) . shape ) if not all ( [ fnx1 ( col ) == 1 for col in cols ] ) :          raise ValueError ( <str> )  if apply_wt :          cols , wt = cols [ : - 1 ] , cols [ - 1 ]  else :          wt = 1  uniq_vals_all_cols , idx = zip ( * ( np . unique ( col , return_inverse = True ) for col in cols ) ) shape_xt = [ uniq_vals_col . size for uniq_vals_col in uniq_vals_all_cols ] dtype_xt = <str> if apply_wt else <str> xt = np . zeros ( shape_xt , dtype = dtype_xt ) np . add . at ( xt , idx , wt ) return uniq_vals_all_cols , xt  import pandas as pd FIGNAME = <str> dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = pd . read_hdf ( dbPath , key = <str> ) numIntensities = 12 allMI = np . empty ( ( len ( db ) , numIntensities ) ) allMIperSpike = np . empty ( ( len ( db ) , numIntensities ) ) allCellInds = np . empty ( len ( db ) ) for indIter , ( indRow , dbRow ) in enumerate ( db . iterrows ( ) ) :      print <str> . format ( indIter , len ( db ) ) cell = ephyscore . Cell ( dbRow ) try :          ephysData , bdata = cell . load ( <str> )  except ( IndexError , ValueError ) :          failed = True print <str> . format ( indRow )  eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimes = ephysData [ <str> ] baseRange = [ - 0.1 , 0 ] responseRange = [ 0 , 0.1 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ 1 ] ] freqEachTrial = bdata [ <str> ] if len ( freqEachTrial ) == len ( eventOnsetTimes ) - 1 :          eventOnsetTimes = eventOnsetTimes [ : - 1 ]  possibleFreq = np . unique ( freqEachTrial ) intensityEachTrial = bdata [ <str> ] possibleIntensity = np . unique ( intensityEachTrial ) for indinten , inten in enumerate ( possibleIntensity ) :          selectinds = np . flatnonzero ( intensityEachTrial == inten ) selectedOnsetTimes = eventOnsetTimes [ selectinds ] selectedFreqEachTrial = freqEachTrial [ selectinds ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , selectedOnsetTimes , alignmentRange ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) spikeCountEachTrial = spikeCountMat . flatten ( ) uv , xt = xtab ( [ spikeCountEachTrial , selectedFreqEachTrial ] ) mutualInfo = metrics . mutual_info_score ( None , None , contingency = xt ) randomMIs = np . empty ( 500 ) for randomIter in range ( 500 ) :              randomFreqs = np . random . permutation ( selectedFreqEachTrial ) uv , xt = xtab ( [ spikeCountEachTrial , randomFreqs ] ) mutualInfoRandom = metrics . mutual_info_score ( None , None , contingency = xt ) randomMIs [ randomIter ] = mutualInfoRandom  mutualInfoBC = mutualInfo - np . mean ( randomMIs ) mutualInfoBCBits = mutualInfoBC / np . log ( 2 ) allMI [ indIter , indinten ] = mutualInfoBCBits mutualInfoPerSpikeBits = mutualInfoBCBits / np . mean ( spikeCountEachTrial ) allMIperSpike [ indIter , indinten ] = mutualInfoPerSpikeBits allCellInds [ indIter ] = indRow   laserCells = db . query ( <str> ) laserThal = laserCells . groupby ( <str> ) . get_group ( <str> ) laserAC = laserCells . groupby ( <str> ) . get_group ( <str> ) laserThalInds = np . flatnonzero ( np . in1d ( allCellInds , laserThal . index . values ) ) laserACInds = np . flatnonzero ( np . in1d ( allCellInds , laserAC . index . values ) ) laserThalMI = allMI [ laserThalInds , : ] laserACMI = allMI [ laserACInds , : ] laserThalMIperSpike = allMIperSpike [ laserThalInds , : ] laserACMIperSpike = allMIperSpike [ laserACInds , : ]  