import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . patches as patches import matplotlib . colors from jaratoolbox import settings from jaratoolbox import extraplots import figparams import studyparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 6 , 6 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel ExColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] soundColor = figparams . colp [ <str> ] labelPosX = [ 0.01 , 0.55 ] labelPosY = [ 0.97 , 0.44 ] ExampleFileName = <str> toneSupFileName = <str> fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 2 , height_ratios = [ 1.0 , 0.8 ] , width_ratios = [ 1.0 , 0.8 ] ) gs . update ( top = 0.97 , bottom = 0.11 , left = 0.11 , right = 0.98 , wspace = 0.4 , hspace = 0.4 ) if PANELS [ 0 ] :      ExampleFile = <str> + ExampleFileName ExampleDataFullPath = os . path . join ( dataDir , ExampleFile ) ExampleData = np . load ( ExampleDataFullPath ) panelLabel = <str> axRaster = plt . subplot ( gs [ 0 , 0 ] ) plt . cla ( ) spikeTimesFromEventOnset = ExampleData [ <str> ] indexLimitsEachTrial = ExampleData [ <str> ] rasterTimeRange = ExampleData [ <str> ] trialsEachCond = ExampleData [ <str> ] possibleFreqs = ExampleData [ <str> ] labels = [ <str> % f for f in possibleFreqs / 1000 ] labels [ 1 : : 2 ] = [ <str> ] * len ( labels [ 1 : : 2 ] ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , rasterTimeRange , trialsEachCond = trialsEachCond , labels = labels ) axRaster . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . setp ( pRaster , ms = 3 , color = <str> ) plt . locator_params ( axis = <str> , nbins = 5 ) extraplots . boxoff ( axRaster ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) yLims = np . array ( plt . ylim ( ) ) rect = patches . Rectangle ( ( 0 , yLims [ 1 ] * 1.02 ) , 0.1 , yLims [ 1 ] * 0.03 , linewidth = 1 , edgecolor = soundColor , facecolor = soundColor , clip_on = False ) axRaster . add_patch ( rect )  if PANELS [ 1 ] :      ExampleFile = <str> + ExampleFileName ExampleDataFullPath = os . path . join ( dataDir , ExampleFile ) ExampleData = np . load ( ExampleDataFullPath ) responseArray = ExampleData [ <str> ] SEM = ExampleData [ <str> ] possibleFreqs = ExampleData [ <str> ] baselineSpikeRate = ExampleData [ <str> ] fitFreqs = ExampleData [ <str> ] fitResponse = ExampleData [ <str> ] prefFreq = ExampleData [ <str> ] cellColour = figparams . colp [ <str> ] fitColour = figparams . colp [ <str> ] panelLabel = <str> plt . hold ( True ) axCurve = plt . subplot ( gs [ 1 , 0 ] ) l1 , = plt . plot ( np . log2 ( possibleFreqs ) , responseArray , <str> , ms = 5 , color = cellColour , mec = cellColour , clip_on = False , zorder = 4 ) plt . errorbar ( np . log2 ( possibleFreqs ) , responseArray , yerr = [ SEM , SEM ] , fmt = <str> , ecolor = cellColour , zorder = 3 ) l3 , = plt . plot ( [ fitFreqs [ 0 ] , fitFreqs [ - 1 ] ] , np . tile ( baselineSpikeRate , 2 ) , <str> , color = <str> , lw = 1.5 , zorder = 1 ) l2 , = plt . plot ( fitFreqs , fitResponse , <str> , lw = 1.5 , color = fitColour , zorder = 2 ) axCurve . annotate ( panelLabel , xy = ( labelPosX [ 0 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) labels = [ <str> % f for f in possibleFreqs / 1000 ] labels [ 1 : : 3 ] = [ <str> ] * len ( labels [ 1 : : 3 ] ) labels [ 2 : : 3 ] = [ <str> ] * len ( labels [ 2 : : 3 ] ) axCurve . set_xticks ( np . log2 ( possibleFreqs ) ) axCurve . set_xticklabels ( labels ) axCurve . set_ylim ( bottom = 0 ) extraplots . boxoff ( axCurve ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( fitFreqs [ 0 ] - 0.2 , fitFreqs [ - 1 ] + 0.1 ) yLims = np . array ( plt . ylim ( ) ) xValsPointer = [ np . log2 ( prefFreq ) - 0.5 , np . log2 ( prefFreq ) - 0.5 , np . log2 ( prefFreq ) + 0.5 , np . log2 ( prefFreq ) + 0.5 ] yValsPointer = [ yLims [ 1 ] * 0.92 , yLims [ 1 ] * 0.96 , yLims [ 1 ] * 0.96 , yLims [ 1 ] * 0.92 ] axCurve . plot ( xValsPointer , yValsPointer , color = <str> ) axCurve . annotate ( <str> , xy = ( np . log2 ( prefFreq ) - 0.6 , yLims [ 1 ] * 0.98 ) , xycoords = <str> , fontsize = fontSizeLabels )  if PANELS [ 2 ] :      dataFullPath = os . path . join ( dataDir , toneSupFileName ) data = np . load ( dataFullPath ) axScatter = plt . subplot ( gs [ : , 1 ] ) SIs = data [ <str> ] pVals = data [ <str> ] panelLabel = <str> sigSIs = SIs [ pVals < 0.05 ] notSigSIs = SIs [ pVals >= 0.05 ] for ind , category in enumerate ( [ sigSIs , notSigSIs ] ) :          xval = ( ind + 1 ) * np . ones ( len ( category ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , category , <str> , mfc = <str> , clip_on = False ) median = np . median ( category ) plt . plot ( [ ind + 0.7 , ind + 1.3 ] , [ median , median ] , <str> , color = <str> , lw = 3 )  plt . xlim ( 0 , 3 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> ) axScatter . set_xticks ( range ( 1 , 3 ) ) axScatter . set_xticklabels ( [ <str> , <str> ] ) plt . xlabel ( <str> ) extraplots . boxoff ( axScatter ) axCurve . annotate ( panelLabel , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) pVal = stats . ranksums ( sigSIs , notSigSIs ) [ 1 ] print <str> . format ( pVal ) pVal = stats . ranksums ( SIs , notSigSIs ) [ 1 ] print <str> . format ( pVal )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    