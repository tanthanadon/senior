import os import numpy as np import pandas as pd from jaratoolbox import settings from jaratoolbox import behavioranalysis import figparams import pdb FIGNAME = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) if not os . path . exists ( outputDir ) :      os . mkdir ( outputDir )  scriptFullPath = os . path . realpath ( __file__ ) sessionsDict = { <str> : { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] } , <str> : { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] } } resultsDict = { } for mouse , sessionsEachMouse in sessionsDict . items ( ) :      for stimHemi , sessions in sessionsEachMouse . items ( ) :          resultsDict [ mouse + stimHemi + <str> ] = sessions resultsDict [ mouse + stimHemi ] = [ ] for session in sessions :              bdata = behavioranalysis . load_many_sessions ( mouse , [ session ] ) trialType = bdata [ <str> ] stimTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] stimLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( trialType , stimTypes ) choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) if stimHemi == <str> :                  validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] choiceRightControl = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRightControl = choiceRightControl & validTrialsControl choiceRightStim = choiceRight [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceRightStim = choiceRightStim & validTrialsStim percentContraChoiceControl = sum ( choiceRightControl ) / float ( sum ( validTrialsControl ) ) percentContraChoiceStim = sum ( choiceRightStim ) / float ( sum ( validTrialsStim ) ) percentChangeContraChoice = percentContraChoiceStim - percentContraChoiceControl  elif stimHemi == <str> :                  validTrialsControl = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] validTrialsStim = valid [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceLeft = choice == bdata . labels [ <str> ] [ <str> ] choiceLeftControl = choiceLeft [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceLeftControl = choiceLeftControl & validTrialsControl choiceLeftStim = choiceLeft [ trialsEachType [ : , stimLabels . index ( <str> ) ] ] choiceLeftStim = choiceLeftStim & validTrialsStim percentContraChoiceControl = sum ( choiceLeftControl ) / float ( sum ( validTrialsControl ) ) percentContraChoiceStim = sum ( choiceLeftStim ) / float ( sum ( validTrialsStim ) ) percentChangeContraChoice = percentContraChoiceStim - percentContraChoiceControl  resultsDict [ mouse + stimHemi ] . append ( percentChangeContraChoice )    outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , script = scriptFullPath , ** resultsDict )  