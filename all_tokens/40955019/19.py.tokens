import os import numpy as np import pandas as pd from jaratoolbox import settings import figparams scriptFullPath = os . path . realpath ( __file__ ) goodQualityList = [ 1 , 6 ] maxZthreshold = 3 EPHYS_MOUNTED = settings . EPHYS_PATH_REMOTE class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    def read_sound_maxZ_file_psychometric_return_Df ( maxZFilename ) :      import pandas as pd maxZFile = open ( maxZFilename , <str> ) behavSessionCount = 0 maxZDict = nestedDict ( ) behavName = <str> for line in maxZFile :          behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :              behavName = behavLine [ 1 ] [ : - 1 ]  else :              maxZDict [ behavName ] [ freqLine [ 0 ] ] = freqLine [ 1 ] . split ( <str> ) [ 0 : - 1 ]   maxZFile . close ( ) maxZDf = pd . DataFrame ( ) numCellsPerSession = 96 for behavSession in maxZDict . keys ( ) :          thisSessionDf = pd . DataFrame ( { <str> : np . tile ( behavSession , numCellsPerSession ) , <str> : np . repeat ( range ( 1 , 9 ) , 12 ) , <str> : np . tile ( range ( 1 , 13 ) , 8 ) } ) allFreqsSorted = sorted ( int ( freq ) for freq in maxZDict [ behavSession ] . keys ( ) ) for indf , freq in enumerate ( allFreqsSorted ) :              maxZThisFreq = maxZDict [ behavSession ] [ str ( freq ) ] thisSessionDf [ <str> . format ( indf + 1 ) ] = maxZThisFreq  maxZDf = maxZDf . append ( thisSessionDf , ignore_index = True )  return maxZDf  def read_allcells_quality_depth ( allcellsFilename ) :      import sys import importlib import pandas as pd sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellsThisAnimal = allcells . cellDB cellQualityDf = pd . DataFrame ( columns = [ <str> , <str> , <str> , <str> , <str> , <str> ] ) for oneCell in cellsThisAnimal :          cellQualityDf = cellQualityDf . append ( { <str> : oneCell . animalName , <str> : oneCell . depth , <str> : oneCell . quality [ oneCell . cluster - 1 ] , <str> : oneCell . tetrode , <str> : oneCell . cluster , <str> : oneCell . behavSession } , ignore_index = True )  return cellQualityDf  psychometricMice = [ <str> , <str> , <str> , <str> , <str> ] allMiceDfs = [ ] for mouseName in psychometricMice :      allcellsFileName = <str> + mouseName + <str> cellQualityDf = read_allcells_quality_depth ( allcellsFileName ) processedDir = os . path . join ( EPHYS_MOUNTED , mouseName + <str> ) dfs = [ ] dfs . append ( cellQualityDf ) maxZFilename = os . path . join ( processedDir , <str> ) maxZsoundDf = read_sound_maxZ_file_psychometric_return_Df ( maxZFilename ) dfs . append ( maxZsoundDf ) dfThisMouse = reduce ( lambda left , right : pd . merge ( left , right , on = [ <str> , <str> , <str> ] , how = <str> ) , dfs ) allMiceDfs . append ( dfThisMouse )  dfAllPsychometricMouseSound = pd . concat ( allMiceDfs , ignore_index = True ) dfAllPsychometricMouseSound [ <str> ] = scriptFullPath outputDir = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) dfAllPsychometricMouseSound . to_hdf ( outputFullPath , key = <str> ) maxNumOfFreqs = 6 allMiceFreqSelDict = { } for thisMouseDf in allMiceDfs :      goodCells = thisMouseDf . loc [ thisMouseDf . cellQuality . isin ( goodQualityList ) ] maxZcolnames = sorted ( [ col for col in goodCells . columns if <str> in col ] ) numOfFreqs = len ( maxZcolnames ) if numOfFreqs > maxNumOfFreqs :          maxNumOfFreqs = numOfFreqs  numResponsiveCellsAllFreqs = [ ] for colname in maxZcolnames :          numResponsiveCells = sum ( np . abs ( goodCells [ colname ] . astype ( <str> ) ) > maxZthreshold ) numResponsiveCellsAllFreqs . append ( numResponsiveCells )  allMiceFreqSelDict [ thisMouseDf . animalName [ 0 ] ] = numResponsiveCellsAllFreqs  outputDir = os . path . join ( settings . FIGURESDATA , figparams . STUDY_NAME ) outputFile = <str> outputFullPath = os . path . join ( outputDir , outputFile ) np . savez ( outputFullPath , script = scriptFullPath , maxZthreshold = maxZthreshold , goodCellQuality = goodQualityList , numOfFreqs = maxNumOfFreqs , psychometricMice = psychometricMice , ** allMiceFreqSelDict )  