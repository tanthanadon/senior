import os import random import numpy as np from matplotlib import pyplot as plt from jaratoolbox import extraplots from jaratoolbox import settings from jaratoolbox import behavioranalysis from scipy import stats import matplotlib import figparams import pdb subsample = False fraction = 1 / 3.0 np . random . seed ( 0 ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) responseEachFreqEachCellLeftChoiceFile = <str> responseEachFreqEachCellRightChoiceFile = <str> responseLeftFullPath = os . path . join ( dataDir , responseEachFreqEachCellLeftChoiceFile ) responseEachCellEachFreqLeftChoice = np . load ( responseLeftFullPath ) responseRightFullPath = os . path . join ( dataDir , responseEachFreqEachCellRightChoiceFile ) responseEachCellEachFreqRightChoice = np . load ( responseRightFullPath ) numCells = responseEachCellEachFreqLeftChoice . shape [ 0 ] numFreqs = responseEachCellEachFreqLeftChoice . shape [ - 1 ] if subsample :      repeatedSamples = 100  else :      repeatedSamples = 1  percentFreqSelLeftSamples = np . zeros ( repeatedSamples ) percentFreqSelRightSamples = np . zeros ( repeatedSamples ) for inds in range ( repeatedSamples ) :      selectivityIndsLeft = np . array ( [ ] ) pValsLeft = np . array ( [ ] ) selectivityIndsRight = np . array ( [ ] ) pValsRight = np . array ( [ ] ) for cellInd in range ( numCells ) :          if not subsample :              fLowLeft = responseEachCellEachFreqLeftChoice [ cellInd , : , : 3 ] . compressed ( ) fHighLeft = responseEachCellEachFreqLeftChoice [ cellInd , : , 3 : ] . compressed ( )  else :              fLowLeft = np . array ( [ ] ) fHighLeft = np . array ( [ ] ) fLowTrialNumsLeft = [ responseEachCellEachFreqLeftChoice [ cellInd , : , indf ] . compressed ( ) . shape [ 0 ] for indf in range ( numFreqs / 2 ) ] fHighTrialNumsLeft = [ responseEachCellEachFreqLeftChoice [ cellInd , : , indf ] . compressed ( ) . shape [ 0 ] for indf in range ( numFreqs / 2 , numFreqs ) ] fLowNewTrialNumsLeft = behavioranalysis . equalized_trial_count ( np . array ( fLowTrialNumsLeft ) , fraction ) fHighNewTrialNumsLeft = behavioranalysis . equalized_trial_count ( np . array ( fHighTrialNumsLeft ) , fraction ) for indf in range ( numFreqs / 2 ) :                  fLowLeftThisFreqAllTrials = responseEachCellEachFreqLeftChoice [ cellInd , : , indf ] . compressed ( ) random . shuffle ( fLowLeftThisFreqAllTrials ) fLowLeftThisFreqSampled = fLowLeftThisFreqAllTrials [ : fLowNewTrialNumsLeft [ indf ] ] fLowLeft = np . append ( fLowLeft , fLowLeftThisFreqSampled ) fHighLeftThisFreqAllTrials = responseEachCellEachFreqLeftChoice [ cellInd , : , indf + numFreqs / 2 ] . compressed ( ) random . shuffle ( fHighLeftThisFreqAllTrials ) fHighLeftThisFreqSampled = fHighLeftThisFreqAllTrials [ : fHighNewTrialNumsLeft [ indf ] ] fHighLeft = np . append ( fHighLeft , fHighLeftThisFreqSampled )   zScoreLeft , pValLeft = stats . ranksums ( fLowLeft , fHighLeft ) pValsLeft = np . append ( pValsLeft , pValLeft ) if ( np . mean ( fHighLeft ) + np . mean ( fLowLeft ) ) == 0 :              selectivityIndexThisCell = 0  else :              selectivityIndexThisCell = ( np . mean ( fHighLeft ) - np . mean ( fLowLeft ) ) / ( np . mean ( fHighLeft ) + np . mean ( fLowLeft ) )  selectivityIndsLeft = np . append ( selectivityIndsLeft , selectivityIndexThisCell ) if not subsample :              fLowRight = responseEachCellEachFreqRightChoice [ cellInd , : , : 3 ] . compressed ( ) fHighRight = responseEachCellEachFreqRightChoice [ cellInd , : , 3 : ] . compressed ( )  else :              fLowRight = np . array ( [ ] ) fHighRight = np . array ( [ ] ) fLowTrialNumsRight = [ responseEachCellEachFreqRightChoice [ cellInd , : , indf ] . compressed ( ) . shape [ 0 ] for indf in range ( numFreqs / 2 ) ] fHighTrialNumsRight = [ responseEachCellEachFreqRightChoice [ cellInd , : , indf ] . compressed ( ) . shape [ 0 ] for indf in range ( numFreqs / 2 , numFreqs ) ] fLowNewTrialNumsRight = behavioranalysis . equalized_trial_count ( np . array ( fLowTrialNumsRight ) , fraction ) fHighNewTrialNumsRight = behavioranalysis . equalized_trial_count ( np . array ( fHighTrialNumsRight ) , fraction ) for indf in range ( numFreqs / 2 ) :                  fLowRightThisFreqAllTrials = responseEachCellEachFreqRightChoice [ cellInd , : , indf ] . compressed ( ) random . shuffle ( fLowRightThisFreqAllTrials ) fLowRightThisFreqSampled = fLowRightThisFreqAllTrials [ : fLowNewTrialNumsRight [ indf ] ] fLowRight = np . append ( fLowRight , fLowRightThisFreqSampled ) fHighRightThisFreqAllTrials = responseEachCellEachFreqRightChoice [ cellInd , : , indf + numFreqs / 2 ] . compressed ( ) random . shuffle ( fHighRightThisFreqAllTrials ) fHighRightThisFreqSampled = fHighRightThisFreqAllTrials [ : fHighNewTrialNumsRight [ indf ] ] fHighRight = np . append ( fHighRight , fHighRightThisFreqSampled )   zScoreRight , pValRight = stats . ranksums ( fLowRight , fHighRight ) pValsRight = np . append ( pValsRight , pValRight ) if ( np . mean ( fHighRight ) + np . mean ( fLowRight ) ) == 0 :              selectivityIndexThisCell = 0  else :              selectivityIndexThisCell = ( np . mean ( fHighRight ) - np . mean ( fLowRight ) ) / ( np . mean ( fHighRight ) + np . mean ( fLowRight ) )  selectivityIndsRight = np . append ( selectivityIndsRight , selectivityIndexThisCell )  nansInData = np . isnan ( selectivityIndsLeft ) if np . any ( nansInData ) :          print <str> selectivityIndsLeft [ nansInData ] = 0  print ( <str> . format ( np . mean ( selectivityIndsLeft ) , np . std ( selectivityIndsLeft ) ) ) freqSelectiveLeftChoice = ( pValsLeft <= 0.05 ) nansInData = np . isnan ( selectivityIndsRight ) if np . any ( nansInData ) :          print <str> selectivityIndsRight [ nansInData ] = 0  print ( <str> . format ( np . mean ( selectivityIndsRight ) , np . std ( selectivityIndsRight ) ) ) freqSelectiveRightChoice = ( pValsRight <= 0.05 ) if not subsample :          FIGNAME = <str> choiceModDataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) choiceModsummaryFilename = <str> choiceModsummaryFullPath = os . path . join ( choiceModDataDir , choiceModsummaryFilename ) choiceModsummary = np . load ( choiceModsummaryFullPath ) choiceModI = choiceModsummary [ <str> ] choiceModulated = choiceModsummary [ <str> ] if np . any ( np . isnan ( choiceModI ) ) :              print <str> choiceModI [ np . isnan ( choiceModI ) ] = 0  print ( <str> . format ( np . mean ( choiceModI ) , np . std ( choiceModI ) ) ) Zscore , pValSvC = stats . kruskal ( choiceModI , selectivityIndsLeft , selectivityIndsRight ) ZscoreLvC , pValSvCLeft = stats . ranksums ( choiceModI , selectivityIndsLeft ) ZscoreRvC , pValSvCRight = stats . ranksums ( choiceModI , selectivityIndsRight ) print ( <str> . format ( pValSvC ) ) print ( <str> . format ( pValSvCLeft , pValSvCRight ) )  numFreqSelCellsLeft = sum ( freqSelectiveLeftChoice . astype ( int ) ) percentFreqSelLeft = 100 * float ( numFreqSelCellsLeft ) / numCells if not subsample :          print <str> , percentFreqSelLeft , <str> , numFreqSelCellsLeft , <str> , numCells , <str>  else :         print <str> . format ( fraction * 100 ) , percentFreqSelLeft , <str> , numFreqSelCellsLeft , <str> , numCells , <str>  numFreqSelCellsRight = sum ( freqSelectiveRightChoice . astype ( int ) ) percentFreqSelRight = 100 * float ( numFreqSelCellsRight ) / numCells if not subsample :          print <str> , percentFreqSelRight , <str> , numFreqSelCellsRight , <str> , numCells , <str>  else :          print <str> . format ( fraction * 100 ) , percentFreqSelRight , <str> , numFreqSelCellsRight , <str> , numCells , <str>  percentFreqSelLeftSamples [ inds ] = percentFreqSelLeft percentFreqSelRightSamples [ inds ] = percentFreqSelRight  if subsample :      avePercentFreqSelLeft = np . mean ( percentFreqSelLeftSamples ) avePercentFreqSelRight = np . mean ( percentFreqSelRightSamples ) print ( <str> . format ( repeatedSamples , avePercentFreqSelLeft , 100 * fraction , avePercentFreqSelRight , 100 * fraction ) )  if not subsample :      binsEdges = np . linspace ( - 1 , 1 , 20 ) plt . clf ( ) plt . subplot ( 1 , 3 , 1 ) plt . hist ( [ selectivityIndsLeft [ freqSelectiveLeftChoice ] , selectivityIndsLeft [ ~ freqSelectiveLeftChoice ] ] , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , bins = binsEdges ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) if not subsample :          plt . title ( <str> )  else :          plt . title ( <str> . format ( fraction * 100 ) )  plt . subplot ( 1 , 3 , 2 ) plt . hist ( [ selectivityIndsRight [ freqSelectiveRightChoice ] , selectivityIndsRight [ ~ freqSelectiveRightChoice ] ] , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , bins = binsEdges ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) if not subsample :          plt . title ( <str> )  else :          plt . title ( <str> . format ( fraction * 100 ) )  plt . subplot ( 1 , 3 , 3 ) plt . hist ( [ choiceModI [ choiceModulated ] , choiceModI [ ~ choiceModulated ] ] , color = [ <str> , <str> ] , edgecolor = <str> , stacked = True , bins = binsEdges ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) plt . show ( )   