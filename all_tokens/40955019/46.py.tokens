import os import numpy as np import pandas as pd from jaratoolbox import settings reload ( settings ) import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) scriptFullPath = os . path . realpath ( __file__ ) numFreqs = 6 freqs014 = np . logspace ( np . log2 ( 7.3 ) , np . log2 ( 16.3 ) , base = 2 , num = numFreqs ) freqs015 = np . logspace ( np . log2 ( 6.2 ) , np . log2 ( 19.2 ) , base = 2 , num = numFreqs ) freqs016 = np . logspace ( np . log2 ( 7 ) , np . log2 ( 22 ) , base = 2 , num = numFreqs ) boundary014 = np . logspace ( np . log2 ( freqs014 [ numFreqs / 2 - 1 ] ) , np . log2 ( freqs014 [ numFreqs / 2 ] ) , base = 2 , num = 3 ) [ 1 ] boundary015 = np . logspace ( np . log2 ( freqs015 [ numFreqs / 2 - 1 ] ) , np . log2 ( freqs015 [ numFreqs / 2 ] ) , base = 2 , num = 3 ) [ 1 ] boundary016 = np . logspace ( np . log2 ( freqs016 [ numFreqs / 2 - 1 ] ) , np . log2 ( freqs016 [ numFreqs / 2 ] ) , base = 2 , num = 3 ) [ 1 ] freqBoundaryEachAnimal = { <str> : boundary014 , <str> : boundary015 , <str> : boundary016 } tuingFilePath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME ) tuningFileName = <str> tuningFullPath = os . path . join ( tuingFilePath , tuningFileName ) tuning_df = pd . read_csv ( tuningFullPath ) resultsDict = dict ( freqs014 = freqs014 , freqs015 = freqs015 , freqs016 = freqs015 , boundary014 = boundary014 , boundary015 = boundary015 , boundary016 = boundary016 , tuningDatabase = tuningFileName , script = scriptFullPath ) for animal in freqBoundaryEachAnimal . keys ( ) :      tuning_df . loc [ tuning_df [ <str> ] == animal , <str> ] = np . log2 ( tuning_df . loc [ tuning_df [ <str> ] == animal , <str> ] ) - np . log2 ( freqBoundaryEachAnimal [ animal ] ) resultsDict [ <str> . format ( animal ) ] = tuning_df . loc [ ( tuning_df [ <str> ] == animal ) & ( tuning_df [ <str> ] == 1 ) , <str> ] . values resultsDict [ <str> . format ( animal ) ] = tuning_df . loc [ ( tuning_df [ <str> ] == animal ) & ( tuning_df [ <str> ] == 1 ) , <str> ] . values resultsDict [ <str> . format ( animal ) ] = tuning_df . loc [ ( tuning_df [ <str> ] == animal ) & ( tuning_df [ <str> ] == 2 ) , <str> ] . values resultsDict [ <str> . format ( animal ) ] = tuning_df . loc [ ( tuning_df [ <str> ] == animal ) & ( tuning_df [ <str> ] == 2 ) , <str> ] . values  outputFile = <str> outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , ** resultsDict )  