import os import numpy as np from scipy import stats import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import matplotlib . colors import matplotlib . patches as patches from jaratoolbox import settings from jaratoolbox import extraplots reload ( extraplots ) import figparams reload ( figparams ) FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 12 , 7 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel fontSizeLegend = figparams . fontSizeLegend labelPosX = [ 0.01 , 0.16 , 0.37 , 0.57 , 0.76 ] labelPosY = [ 0.96 , 0.65 , 0.34 , 0.47 ] PVFileName = <str> SOMFileName = <str> ExcFileName = <str> summaryFileName = <str> ExColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] ExLight = matplotlib . colors . colorConverter . to_rgba ( ExColor , alpha = 0.5 ) PVlight = matplotlib . colors . colorConverter . to_rgba ( PVColor , alpha = 0.5 ) SOMlight = matplotlib . colors . colorConverter . to_rgba ( SOMColor , alpha = 0.5 ) soundColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 6 , 5 , width_ratios = [ 1 , 1.2 , 1.2 , 1.3 , 1.3 ] ) gs . update ( top = 0.95 , bottom = 0.08 , left = 0.05 , right = 0.95 , wspace = 0.7 , hspace = 0.6 ) if PANELS [ 0 ] :      axCartoon = plt . subplot ( gs [ : 2 , 0 ] ) plt . axis ( <str> ) cartoonPanels = [ <str> , <str> , <str> ] for indPanel , panel in enumerate ( cartoonPanels ) :          axCartoon . annotate ( panel , xy = ( labelPosX [ 0 ] , labelPosY [ indPanel ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> )   if PANELS [ 1 ] :      ExcFile = <str> + ExcFileName ExcDataFullPath = os . path . join ( dataDir , ExcFile ) ExcData = np . load ( ExcDataFullPath ) PVFile = <str> + PVFileName PVDataFullPath = os . path . join ( dataDir , PVFile ) PVData = np . load ( PVDataFullPath ) SOMFile = <str> + SOMFileName SOMDataFullPath = os . path . join ( dataDir , SOMFile ) SOMData = np . load ( SOMDataFullPath ) cellData = [ ExcData , PVData , SOMData ] panelLabels = [ <str> , <str> , <str> ] colours = [ [ ExColor , ExLight ] , [ PVColor , PVlight ] , [ SOMColor , SOMlight ] ] for indCell , cell in enumerate ( cellData ) :          axRaster = plt . subplot ( gs [ 2 * indCell : 2 * indCell + 2 , 1 ] ) plt . cla ( ) bandSpikeTimesFromEventOnset = cell [ <str> ] bandIndexLimitsEachTrial = cell [ <str> ] rasterTimeRange = cell [ <str> ] trialsEachCond = cell [ <str> ] trialsEachCond = trialsEachCond [ : , 1 : ] trialsEachCond = trialsEachCond [ : - 70 , : ] possibleBands = cell [ <str> ] possibleBands = possibleBands [ 1 : ] bandLabels = possibleBands . tolist ( ) bandLabels [ - 1 ] = <str> colorEachCond = colours [ indCell ] * ( len ( possibleBands ) / 2 + 1 ) pRaster , hcond , zline = extraplots . raster_plot ( bandSpikeTimesFromEventOnset , bandIndexLimitsEachTrial , rasterTimeRange , trialsEachCond = trialsEachCond , labels = bandLabels , colorEachCond = colorEachCond ) axRaster . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 1 ] , labelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . setp ( pRaster , ms = 3 , color = <str> ) extraplots . boxoff ( axRaster ) if indCell != 2 :              axRaster . set_xticklabels ( <str> )  plt . ylabel ( <str> , fontsize = fontSizeLabels ) yLims = np . array ( plt . ylim ( ) ) rect = patches . Rectangle ( ( 0.0 , yLims [ 1 ] * 1.02 ) , 1.0 , yLims [ 1 ] * 0.04 , linewidth = 1 , edgecolor = soundColor , facecolor = soundColor , clip_on = False ) axRaster . add_patch ( rect )  extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . xlabel ( <str> , fontsize = fontSizeLabels )  if PANELS [ 2 ] :      SIlabelPosX = [ 0.47 , 0.47 , 0.44 ] SIlabelPosY = [ 0.87 , 0.45 , 0.31 ] calcInd = 2 ExcFile = <str> + ExcFileName ExcDataFullPath = os . path . join ( dataDir , ExcFile ) ExcData = np . load ( ExcDataFullPath ) ExcSustainedResponseArray = ExcData [ <str> ] ExcSustainedError = ExcData [ <str> ] ExcFitCurve = ExcData [ <str> ] ExcSI = ExcData [ <str> ] . tolist ( ) PVFile = <str> + PVFileName PVDataFullPath = os . path . join ( dataDir , PVFile ) PVData = np . load ( PVDataFullPath ) PVsustainedResponseArray = PVData [ <str> ] PVsustainedError = PVData [ <str> ] PVFitCurve = PVData [ <str> ] PVSI = PVData [ <str> ] . tolist ( ) SOMFile = <str> + SOMFileName SOMDataFullPath = os . path . join ( dataDir , SOMFile ) SOMData = np . load ( SOMDataFullPath ) SOMsustainedResponseArray = SOMData [ <str> ] SOMsustainedError = SOMData [ <str> ] SOMFitCurve = SOMData [ <str> ] SOMSI = SOMData [ <str> ] . tolist ( ) bands = PVData [ <str> ] [ 1 : ] fitBands = PVData [ <str> ] sustainedResponses = [ ExcSustainedResponseArray , PVsustainedResponseArray , SOMsustainedResponseArray ] sustainedErrors = [ ExcSustainedError , PVsustainedError , SOMsustainedError ] fitResponses = [ ExcFitCurve , PVFitCurve , SOMFitCurve ] SIs = [ ExcSI , PVSI , SOMSI ] cellTypeColours = [ ExColor , PVColor , SOMColor ] panelLabels = [ <str> , <str> , <str> ] panelTitles = [ <str> , <str> , <str> ] for indCell , responseByCell in enumerate ( sustainedResponses ) :          plt . hold ( 1 ) axCurve = plt . subplot ( gs [ 2 * indCell : 2 * indCell + 2 , 2 ] ) axCurve . set_xscale ( <str> , basex = 2 ) plt . plot ( bands , responseByCell [ 1 : ] , <str> , ms = 5 , color = cellTypeColours [ indCell ] , mec = cellTypeColours [ indCell ] , clip_on = False ) plt . errorbar ( bands , responseByCell [ 1 : ] , yerr = [ sustainedErrors [ indCell ] [ 1 : ] , sustainedErrors [ indCell ] [ 1 : ] ] , fmt = <str> , ecolor = cellTypeColours [ indCell ] , lw = 1.5 , capsize = 5 ) plt . plot ( [ bands [ 0 ] , bands [ - 1 ] ] , np . tile ( responseByCell [ 0 ] , 2 ) , <str> , color = <str> , lw = 2 ) plt . plot ( fitBands , fitResponses [ indCell ] , <str> , lw = 1.5 , color = cellTypeColours [ indCell ] ) axCurve . annotate ( panelLabels [ indCell ] , xy = ( labelPosX [ 2 ] , labelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) axCurve . set_xticks ( bands ) axCurve . set_ylim ( bottom = 0 ) extraplots . boxoff ( axCurve ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) axCurve . tick_params ( top = False , right = False , which = <str> ) if indCell == calcInd :              axCurve . annotate ( <str> % ( SIs [ indCell ] , ) , xy = ( SIlabelPosX [ indCell ] , SIlabelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizeLabels , color = cellTypeColours [ indCell ] ) bandMax = fitBands [ np . argmax ( fitResponses [ indCell ] ) ] respMax = np . max ( fitResponses [ indCell ] ) bandWN = fitBands [ - 1 ] respWN = fitResponses [ indCell ] [ - 1 ] axCurve . annotate ( <str> , xy = ( bandMax , respMax ) , xycoords = <str> , xytext = ( bandMax , 0 ) , textcoords = <str> , arrowprops = dict ( arrowstyle = <str> , connectionstyle = <str> , color = <str> ) ) axCurve . annotate ( <str> , xy = ( bandMax / 1.35 , respMax / 3 ) , xycoords = <str> , fontsize = fontSizeLabels , color = <str> ) axCurve . annotate ( <str> , xy = ( bandWN , respWN ) , xycoords = <str> , xytext = ( bandWN , 0 ) , textcoords = <str> , arrowprops = dict ( arrowstyle = <str> , connectionstyle = <str> , color = <str> ) ) axCurve . annotate ( <str> , xy = ( bandWN / 1.35 , respWN / 3 ) , xycoords = <str> , fontsize = fontSizeLabels , color = <str> )  else :              axCurve . annotate ( <str> % ( SIs [ indCell ] , ) , xy = ( SIlabelPosX [ indCell ] , SIlabelPosY [ indCell ] ) , xycoords = <str> , fontsize = fontSizeLabels , color = cellTypeColours [ indCell ] )  if indCell != 2 :              axCurve . set_xticklabels ( <str> )  else :              bandLabels = bands . tolist ( ) bandLabels [ - 1 ] = <str> bandLabels [ 1 : : 2 ] = [ <str> ] * len ( bands [ 1 : : 2 ] ) axCurve . set_xticklabels ( bandLabels ) plt . xlabel ( <str> , fontsize = fontSizeLabels )  plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( 0.2 , 7 ) plt . title ( panelTitles [ indCell ] , fontsize = fontSizeLabels , y = 1.02 )   axSummaries = gs [ : , 3 ] gs2 = gridspec . GridSpecFromSubplotSpec ( 2 , 1 , subplot_spec = axSummaries , hspace = 0.3 ) if PANELS [ 3 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedSuppression = summaryData [ <str> ] SOMsustainedSuppression = summaryData [ <str> ] ACsustainedSuppression = summaryData [ <str> ] sustainedSuppressionVals = [ ACsustainedSuppression , PVsustainedSuppression , SOMsustainedSuppression ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs2 [ 0 , 0 ] ) plt . hold ( 1 ) for category in range ( len ( sustainedSuppressionVals ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( sustainedSuppressionVals [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . hold ( True ) plt . plot ( xval , sustainedSuppressionVals [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( sustainedSuppressionVals [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 3 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( sustainedSuppressionVals ) + 1 ) plt . ylim ( - 0.05 , 1.05 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( sustainedSuppressionVals ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels , rotation = - 45 ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 3 ] , yLims [ 1 ] * 1.07 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 1.03 , yLims [ 1 ] * 0.02 , gapFactor = 0.25 ) plt . hold ( 0 ) ExcPV = stats . ranksums ( ACsustainedSuppression , PVsustainedSuppression ) [ 1 ] ExcSOM = stats . ranksums ( ACsustainedSuppression , SOMsustainedSuppression ) [ 1 ] PVSOM = stats . ranksums ( PVsustainedSuppression , SOMsustainedSuppression ) [ 1 ] print <str> . format ( ExcPV , ExcSOM , PVSOM )  if PANELS [ 4 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVsustainedPrefBW = summaryData [ <str> ] SOMsustainedPrefBW = summaryData [ <str> ] ACsustainedPrefBW = summaryData [ <str> ] prefBandwidths = [ ACsustainedPrefBW , PVsustainedPrefBW , SOMsustainedPrefBW ] possibleBands = summaryData [ <str> ] [ 1 : ] excitatoryColor = figparams . colp [ <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ excitatoryColor , PVColor , SOMColor ] categoryLabels = [ <str> , <str> , <str> ] panelLabel = <str> axScatter = plt . subplot ( gs2 [ 1 , 0 ] ) plt . hold ( 1 ) axScatter . set_yscale ( <str> , basey = 2 ) plt . hold ( True ) for category in range ( len ( prefBandwidths ) ) :          edgeColour = matplotlib . colors . colorConverter . to_rgba ( cellTypeColours [ category ] , alpha = 0.5 ) xval = ( category + 1 ) * np . ones ( len ( prefBandwidths [ category ] ) ) jitterAmt = np . random . random ( len ( xval ) ) xval = xval + ( 0.4 * jitterAmt ) - 0.2 plt . plot ( xval , prefBandwidths [ category ] , <str> , mec = edgeColour , mfc = <str> , clip_on = False ) median = np . median ( prefBandwidths [ category ] ) plt . plot ( [ category + 0.7 , category + 1.3 ] , [ median , median ] , <str> , color = <str> , mec = cellTypeColours [ category ] , lw = 3 )  axScatter . annotate ( panelLabel , xy = ( labelPosX [ 3 ] , labelPosY [ 3 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) plt . xlim ( 0 , len ( prefBandwidths ) + 1 ) plt . ylim ( 0.2 , 7 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axScatter . set_xticks ( range ( 1 , len ( prefBandwidths ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels , rotation = - 45 ) axScatter . set_yticks ( possibleBands ) bandLabels = possibleBands . tolist ( ) bandLabels [ - 1 ] = <str> axScatter . set_yticklabels ( bandLabels ) axScatter . tick_params ( top = False , right = False , which = <str> ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 3 ] , yLims [ 1 ] * 1.05 , yLims [ 1 ] * 0.1 , gapFactor = 0.25 ) plt . hold ( 0 ) ExcPV = stats . ranksums ( ACsustainedPrefBW , PVsustainedPrefBW ) [ 1 ] ExcSOM = stats . ranksums ( ACsustainedPrefBW , SOMsustainedPrefBW ) [ 1 ] PVSOM = stats . ranksums ( PVsustainedPrefBW , SOMsustainedPrefBW ) [ 1 ] print <str> . format ( ExcPV , ExcSOM , PVSOM )  axSummaries = gs [ : , 4 ] gs3 = gridspec . GridSpecFromSubplotSpec ( 3 , 1 , subplot_spec = axSummaries , hspace = 0.3 ) if PANELS [ 5 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVaveragePSTH = summaryData [ <str> ] SOMaveragePSTH = summaryData [ <str> ] binStartTimes = summaryData [ <str> ] categoryLabels = [ <str> , <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ PVColor , SOMColor ] panelLabel = <str> axPSTH = plt . subplot ( gs3 [ 0 , 0 ] ) plt . hold ( 1 ) l1 , = plt . plot ( binStartTimes [ 1 : - 1 ] , PVaveragePSTH [ 1 : - 1 ] , color = PVColor , lw = 2 ) l2 , = plt . plot ( binStartTimes [ 1 : - 1 ] , SOMaveragePSTH [ 1 : - 1 ] , color = SOMColor , lw = 2 ) plt . legend ( [ l1 , l2 ] , categoryLabels , loc = <str> , frameon = False , fontsize = fontSizeLegend ) zline = plt . axvline ( 0 , color = <str> , zorder = - 10 ) plt . ylim ( - 0.1 , 1.1 ) plt . xlabel ( <str> , fontsize = fontSizeLabels , labelpad = - 0.5 ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) axPSTH . annotate ( panelLabel , xy = ( labelPosX [ 4 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) extraplots . boxoff ( axPSTH )  if PANELS [ 6 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] responseRates = [ PVhighBandRate , SOMhighBandRate ] categoryLabels = [ <str> , <str> ] cellTypeColours = [ PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs3 [ 1 , 0 ] ) plt . hold ( 1 ) bplot = plt . boxplot ( responseRates , widths = 0.6 , showfliers = False ) for box in range ( len ( bplot [ <str> ] ) ) :          plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ box ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )  plt . setp ( bplot [ <str> ] , color = <str> ) plt . xlim ( 0.2 , len ( responseRates ) + 0.8 ) plt . ylim ( - 5 , 55 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 0.98 , yLims [ 1 ] * 0.04 , gapFactor = 0.25 ) plt . hold ( 0 ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 4 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) PVSOM = stats . ranksums ( PVhighBandRate , SOMhighBandRate ) [ 1 ] print <str> . format ( PVSOM )  if PANELS [ 7 ] :      summaryDataFullPath = os . path . join ( dataDir , summaryFileName ) summaryData = np . load ( summaryDataFullPath ) PVhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] SOMhighBandRate = summaryData [ <str> ] - summaryData [ <str> ] responseRates = [ PVhighBandRate , SOMhighBandRate ] categoryLabels = [ <str> , <str> ] PVColor = figparams . colp [ <str> ] SOMColor = figparams . colp [ <str> ] cellTypeColours = [ PVColor , SOMColor ] panelLabel = <str> axScatter = plt . subplot ( gs3 [ 2 , 0 ] ) plt . hold ( 1 ) bplot = plt . boxplot ( responseRates , widths = 0.6 , showfliers = False ) for box in range ( len ( bplot [ <str> ] ) ) :          plt . setp ( bplot [ <str> ] [ box ] , color = cellTypeColours [ box ] , linewidth = 2 ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , linestyle = <str> , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ 2 * box : 2 * ( box + 1 ) ] , color = cellTypeColours [ box ] ) plt . setp ( bplot [ <str> ] [ box ] , color = <str> , linewidth = 3 )  plt . setp ( bplot [ <str> ] , color = <str> ) plt . xlim ( 0.2 , len ( responseRates ) + 0.8 ) plt . ylim ( top = 17 ) axScatter . set_xticks ( range ( 1 , len ( responseRates ) + 1 ) ) axScatter . set_xticklabels ( categoryLabels , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) plt . ylabel ( <str> <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( axScatter ) yLims = np . array ( plt . ylim ( ) ) extraplots . significance_stars ( [ 1 , 2 ] , yLims [ 1 ] * 0.95 , yLims [ 1 ] * 0.04 , gapFactor = 0.25 ) plt . hold ( 0 ) axScatter . annotate ( panelLabel , xy = ( labelPosX [ 4 ] , labelPosY [ 2 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) PVSOM = stats . ranksums ( PVhighBandRate , SOMhighBandRate ) [ 1 ] print <str> . format ( PVSOM )  if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )    