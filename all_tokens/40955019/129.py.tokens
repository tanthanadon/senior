import numpy as np from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis import pandas as pd import figparams import matplotlib . pyplot as plt from scipy import stats db = celldatabase . load_hdf ( <str> ) db [ <str> ] = ( db [ <str> ] - db [ <str> ] ) / ( db [ <str> ] + db [ <str> ] ) plt . clf ( ) def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( ax , yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) ax . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  goodFit = db . query ( <str> ) goodFit [ <str> ] = np . sqrt ( goodFit [ <str> ] * goodFit [ <str> ] ) goodFitToUse = goodFit . query ( <str> ) goodFitToUseNSpikes = goodFitToUse . query ( <str> ) dataframe = goodFitToUseNSpikes ac = dataframe . groupby ( <str> ) . get_group ( <str> ) thal = dataframe . groupby ( <str> ) . get_group ( <str> ) colorATh = figparams . cp . TangoPalette [ <str> ] colorAC = figparams . cp . TangoPalette [ <str> ] popStatCol = <str> acPopStat = ac [ popStatCol ] [ pd . notnull ( ac [ popStatCol ] ) ] thalPopStat = thal [ popStatCol ] [ pd . notnull ( thal [ popStatCol ] ) ] markerAlpha = 1 ax = plt . subplot ( 111 ) pos = jitter ( np . ones ( len ( thalPopStat ) ) * 0 , 0.20 ) ax . plot ( pos , thalPopStat , <str> , mec = colorATh , mfc = <str> , alpha = markerAlpha ) pos = jitter ( np . ones ( len ( acPopStat ) ) * 1 , 0.20 ) ax . plot ( pos , acPopStat , <str> , mec = colorAC , mfc = <str> , alpha = markerAlpha ) medline ( ax , np . nanmedian ( thalPopStat ) , 0 , 0.4 ) medline ( ax , np . nanmedian ( acPopStat ) , 1 , 0.4 ) ax . set_ylabel ( <str> ) ax . set_xticks ( [ 0 , 1 ] ) ax . set_xticklabels ( [ <str> , <str> ] ) plt . show ( ) zstat , pVal = stats . mannwhitneyu ( thalPopStat , acPopStat )  