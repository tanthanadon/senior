import os import sys import importlib import numpy as np from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import behavioranalysis from jaratoolbox import settings import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 timeRange = [ - 0.5 , 0.8 ] binWidth = 0.010 scriptFullPath = os . path . realpath ( __file__ ) paradigm = <str> if not os . path . exists ( dataDir ) :      os . mkdir ( dataDir )  BEHAVIOR_PATH = settings . BEHAVIOR_PATH_REMOTE EPHYS_PATH = settings . EPHYS_PATH_REMOTE cellParamsList = [ { <str> : <str> , <str> : <str> , <str> : 5 , <str> : 7 } , { <str> : <str> , <str> : <str> , <str> : 3 , <str> : 7 } , { <str> : <str> , <str> : <str> , <str> : 4 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 5 , <str> : 3 } , { <str> : <str> , <str> : <str> , <str> : 6 , <str> : 5 } , { <str> : <str> , <str> : <str> , <str> : 7 , <str> : 9 } ] for cellParams in cellParamsList :      mouseName = cellParams [ <str> ] allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellIndex = allcells . cellDB . findcell ( ** cellParams ) oneCell = allcells . cellDB [ cellIndex ] behavFileName = <str> . format ( oneCell . animalName , paradigm , oneCell . behavSession ) behavFile = os . path . join ( BEHAVIOR_PATH , oneCell . animalName , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) fullEventFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE spikeFilename = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession , <str> . format ( oneCell . tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , oneCell . animalName , oneCell . ephysSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( oneCell . tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == oneCell . cluster ] spikeData . samples = spikeData . samples [ clusters == oneCell . cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventOnsetTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] diffTimes = bdata [ <str> ] - bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) freqEachTrial = bdata [ <str> ] valid = bdata [ <str> ] . astype ( <str> ) possibleFreq = np . unique ( freqEachTrial ) trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) trialsEachFreq = trialsEachFreq & valid [ : , np . newaxis ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , soundOnsetTimeEphys , timeRange ) outputFile = <str> . format ( oneCell . animalName , oneCell . behavSession , oneCell . tetrode , oneCell . cluster ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , spikeTimestamps = spikeTimestamps , eventOnsetTimes = eventOnsetTimes , possibleFreq = possibleFreq , spikeTimesFromEventOnset = spikeTimesFromEventOnset , movementTimesFromEventOnset = diffTimes , indexLimitsEachTrial = indexLimitsEachTrial , timeRange = timeRange , trialsEachFreq = trialsEachFreq , script = scriptFullPath , ** cellParams ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) outputFile = <str> . format ( oneCell . animalName , oneCell . behavSession , oneCell . tetrode , oneCell . cluster ) outputFullPath = os . path . join ( dataDir , outputFile ) np . savez ( outputFullPath , possibleFreq = possibleFreq , spikeCountMat = spikeCountMat , timeVec = timeVec , trialsEachFreq = trialsEachFreq , timeRange = timeRange , binWidth = binWidth , script = scriptFullPath , ** cellParams )   