import os import Image import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import celldatabase from scipy import stats import pandas as pd import xml . etree . ElementTree as ETree import re import figparams from jaratoolbox import histologyanalysis as ha def tract_fraction ( tipCoords , brainSurfCoords , fractionFromSurface ) :      refVec = [ tipCoords [ 0 ] - brainSurfCoords [ 0 ] , tipCoords [ 1 ] - brainSurfCoords [ 1 ] ] vecToAdd = fractionFromSurface * np . array ( refVec ) coordsAtFraction = [ brainSurfCoords [ 0 ] + vecToAdd [ 0 ] , brainSurfCoords [ 1 ] + vecToAdd [ 1 ] ] return coordsAtFraction  tractsDBPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) tractsDB = pd . read_hdf ( tractsDBPath , key = <str> ) dbPath = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , <str> ) db = pd . read_hdf ( dbPath , key = <str> ) goodISI = db . query ( <str> ) goodShape = goodISI . query ( <str> ) goodLaser = goodShape . query ( <str> ) goodNSpikes = goodLaser . query ( <str> ) dataframe = goodNSpikes shankNum = { 1 : 1 , 2 : 1 , 3 : 2 , 4 : 2 , 5 : 3 , 6 : 3 , 7 : 4 , 8 : 4 } allFiles = [ ] for indRow , dbRow in dataframe . iterrows ( ) :      info = dbRow [ <str> ] if isinstance ( info , list ) :          shankName = info [ 0 ]  else :          shankName = info  brainArea = dbRow [ <str> ] if brainArea == <str> :          registrationFolder = <str> shanksFolder = <str>  elif brainArea == <str> :          registrationFolder = <str> shanksFolder = <str>  subject = dbRow [ <str> ] histFullPath = os . path . join ( settings . HISTOLOGY_PATH , subject , registrationFolder ) tetrode = int ( dbRow [ <str> ] ) fullFn = os . path . join ( histFullPath , <str> . format ( shankName , shankNum [ tetrode ] ) ) allFiles . append ( fullFn ) fullShankName = <str> . format ( shankName , shankNum [ tetrode ] ) tract = tractsDB . query ( <str> ) filenameSlice = os . path . join ( settings . HISTOLOGY_PATH , subject , shanksFolder , <str> . format ( fullShankName ) ) if len ( tract ) == 0 :          image = Image . open ( filenameSlice ) image . show ( ) print fullShankName atlasZ = input ( <str> ) image . close ( ) shankDict = { <str> : subject , <str> : dbRow [ <str> ] , <str> : fullShankName , <str> : atlasZ , <str> : dbRow [ <str> ] } print shankDict tractsDB = tractsDB . append ( shankDict , ignore_index = True )  else :          filenameAtlas = <str> . format ( tract [ <str> ] . values [ 0 ] ) filenameSVGpre = os . path . join ( settings . HISTOLOGY_PATH , tract [ <str> ] . values [ 0 ] , registrationFolder , <str> . format ( tract [ <str> ] . values [ 0 ] ) ) filenameSVG = os . path . join ( settings . HISTOLOGY_PATH , tract [ <str> ] . values [ 0 ] , registrationFolder , <str> . format ( tract [ <str> ] . values [ 0 ] ) ) if not os . path . exists ( filenameSVGpre ) :              print <str> . format ( filenameSVGpre ) atlasZ = input ( <str> ) filenameAtlas = <str> . format ( atlasZ ) ( atlasSize , sliceSize ) = ha . save_svg_for_registration ( filenameSVGpre , filenameAtlas , filenameSlice )  if not os . path . exists ( filenameSVG ) :              print <str> . format ( filenameSVGpre ) continue  else :              tree = ETree . parse ( filenameSVG ) root = tree . getroot ( ) paths = root . findall ( <str> ) if len ( paths ) != 1 :                  raise ValueError ( <str> )  pathCoords = paths [ 0 ] . attrib [ <str> ] reString = <str> coordStrings = re . findall ( reString , pathCoords , flags = re . IGNORECASE ) tractCoords = map ( float , coordStrings [ 0 ] ) tipCoords = [ tractCoords [ 0 ] , tractCoords [ 1 ] ] brainSurfCoords = [ tractCoords [ 2 ] , tractCoords [ 3 ] ] import ipdb if any ( np . array ( tipCoords ) < 1 ) :                  ipdb . set_trace ( )  if any ( np . array ( brainSurfCoords ) < 1 ) :                  ipdb . set_trace ( )  if tipCoords [ 1 ] < brainSurfCoords [ 1 ] :                  print <str> . format ( tract ) continue  cellFracFromSurface = np . array ( dbRow [ <str> ] ) / float ( dbRow [ <str> ] ) cellCoords = tract_fraction ( tipCoords , brainSurfCoords , cellFracFromSurface ) print <str> db . loc [ indRow , <str> ] = cellCoords [ 0 ] db . loc [ indRow , <str> ] = cellCoords [ 1 ] db . loc [ indRow , <str> ] = tract [ <str> ] . values [ 0 ]    db . to_hdf ( dbPath , key = <str> )  