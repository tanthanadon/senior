import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec from scipy import stats import matplotlib import figparams FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) matplotlib . rcParams [ <str> ] = <str> matplotlib . rcParams [ <str> ] = <str> soundColor = figparams . colp [ <str> ] PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 4 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel timeRangeSound = [ - 0.2 , 0.4 ] msRaster = 2 smoothWinSizePsth = 2 lwPsth = 2 downsampleFactorPsth = 1 colormapTuning = matplotlib . cm . winter labelPosX = [ 0.02 , 0.52 ] labelPosY = [ 0.92 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.1 , right = 0.98 , top = 0.9 , bottom = 0.05 , wspace = 0.4 , hspace = 0.2 ) gs00 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 0 ] , hspace = 0.15 ) gs01 = gridspec . GridSpecFromSubplotSpec ( 4 , 1 , subplot_spec = gs [ : , 1 ] , hspace = 0.15 ) ax1 = plt . subplot ( gs00 [ 0 : 2 , : ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 0 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] timeRange = timeRangeSound labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] cm_subsection = np . linspace ( 1.0 , 0.0 , len ( possibleFreq ) ) colorEachFreq = [ colormapTuning ( x ) for x in cm_subsection ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) locs , labels = plt . yticks ( ) plt . yticks ( [ locs [ 0 ] , locs [ - 1 ] ] , [ labels [ 0 ] , labels [ - 1 ] ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) plt . gca ( ) . set_xticklabels ( <str> ) ax2 = plt . subplot ( gs00 [ 2 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) yLims = [ 0 , 90 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) )  ax3 = plt . subplot ( gs01 [ 0 : 2 , : ] ) ax3 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) if PANELS [ 1 ] :      rasterFilename = <str> rasterFullPath = os . path . join ( dataDir , rasterFilename ) rasterExample = np . load ( rasterFullPath ) possibleFreq = rasterExample [ <str> ] trialsEachCond = rasterExample [ <str> ] spikeTimesFromEventOnset = rasterExample [ <str> ] indexLimitsEachTrial = rasterExample [ <str> ] timeRange = timeRangeSound labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] cm_subsection = np . linspace ( 1.0 , 0.0 , len ( possibleFreq ) ) colorEachFreq = [ colormapTuning ( x ) for x in cm_subsection ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , labels = labels ) plt . setp ( pRaster , ms = msRaster ) locs , labels = plt . yticks ( ) plt . yticks ( [ locs [ 0 ] , locs [ - 1 ] ] , [ labels [ 0 ] , labels [ - 1 ] ] ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) plt . gca ( ) . set_xticklabels ( <str> ) ax2 = plt . subplot ( gs01 [ 2 , : ] ) psthFilename = <str> psthFullPath = os . path . join ( dataDir , psthFilename ) psthExample = np . load ( psthFullPath ) trialsEachCond = psthExample [ <str> ] spikeCountMat = psthExample [ <str> ] timeVec = psthExample [ <str> ] binWidth = psthExample [ <str> ] timeRange = psthExample [ <str> ] possibleFreq = psthExample [ <str> ] numFreqs = len ( possibleFreq ) labels = [ <str> % f for f in np . unique ( possibleFreq ) / 1000.0 ] pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachFreq , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlim ( timeRangeSound [ 0 ] , timeRangeSound [ 1 ] ) yLims = [ 0 , 80 ] soundBarHeight = 0.1 * yLims [ - 1 ] plt . fill ( [ 0 , 0.1 , 0.1 , 0 ] , yLims [ - 1 ] + np . array ( [ 0 , 0 , soundBarHeight , soundBarHeight ] ) , ec = <str> , fc = soundColor , clip_on = False ) plt . ylim ( yLims ) plt . yticks ( yLims ) plt . xticks ( np . arange ( - 0.2 , 0.6 , 0.2 ) ) plt . xlabel ( <str> , fontsize = fontSizeLabels ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( plt . gca ( ) )  plt . show ( ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   