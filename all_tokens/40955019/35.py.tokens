import os import numpy as np from matplotlib import pyplot as plt from jaratoolbox import colorpalette as cp from jaratoolbox import extraplots from jaratoolbox import settings import matplotlib . gridspec as gridspec import matplotlib import matplotlib . lines as mlines import scipy . stats as stats import figparams reload ( figparams ) STUDY_NAME = <str> FIGNAME = <str> dataDir = os . path . join ( settings . FIGURES_DATA_PATH , figparams . STUDY_NAME , FIGNAME ) PANELS = [ 1 , 1 ] SAVE_FIGURE = 1 outputDir = <str> figFilename = <str> figFormat = <str> figSize = [ 7 , 4 ] fontSizeLabels = figparams . fontSizeLabels fontSizeTicks = figparams . fontSizeTicks fontSizePanel = figparams . fontSizePanel labelDis = 0.1 labelPosX = [ 0.02 , 0.48 ] labelPosY = [ 0.95 , 0.95 ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 1 , 2 ) gs . update ( left = 0.15 , right = 0.95 , top = 0.95 , bottom = 0.12 , wspace = 0.25 , hspace = 0.15 ) PHOTOSTIMCOLORS = { <str> : <str> , <str> : figparams . colp [ <str> ] , <str> : figparams . colp [ <str> ] } ax1 = plt . subplot ( gs [ 0 , 0 ] ) ax1 . annotate ( <str> , xy = ( labelPosX [ 0 ] , labelPosY [ 0 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) FIGNAME_tuning = <str> dataDir_tuning = os . path . join ( settings . FIGURES_DATA_PATH , STUDY_NAME , FIGNAME_tuning ) summaryFilename_tuning = <str> summaryFullPath_tuning = os . path . join ( dataDir_tuning , summaryFilename_tuning ) summary_tuning = np . load ( summaryFullPath_tuning ) left014Freqs = summary_tuning [ <str> ] left015Freqs = summary_tuning [ <str> ] left016Freqs = summary_tuning [ <str> ] right014Freqs = summary_tuning [ <str> ] right015Freqs = summary_tuning [ <str> ] right016Freqs = summary_tuning [ <str> ] left014FreqsSessions = summary_tuning [ <str> ] left015FreqsSessions = summary_tuning [ <str> ] left016FreqsSessions = summary_tuning [ <str> ] right014FreqsSessions = summary_tuning [ <str> ] right015FreqsSessions = summary_tuning [ <str> ] right016FreqsSessions = summary_tuning [ <str> ] allLeftFreqs = np . concatenate ( [ left014Freqs , left015Freqs ] ) allRightFreqs = np . concatenate ( [ right015Freqs , right016Freqs ] ) plt . hold ( <str> ) randOffset = 0.3 * ( np . random . rand ( len ( allLeftFreqs ) ) - 0.5 ) ax1 . plot ( 1 + randOffset , allLeftFreqs , <str> , mec = <str> , mfc = <str> ) randOffset = 0.3 * ( np . random . rand ( len ( allRightFreqs ) ) - 0.5 ) ax1 . plot ( 2 + randOffset , allRightFreqs , <str> , mec = <str> , mfc = <str> ) meanLeftFreq = np . mean ( allLeftFreqs ) meanRightFreq = np . mean ( allRightFreqs ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 1 , 100 * np . tile ( meanLeftFreq , 2 ) , lw = 3 , color = <str> ) ax1 . plot ( 0.3 * np . array ( [ - 1 , 1 ] ) + 2 , 100 * np . tile ( meanRightFreq , 2 ) , lw = 3 , color = <str> ) xlim = [ 0 , 3 ] ylim = [ - 1 , 1 ] plt . xlim ( xlim ) plt . ylim ( ylim ) xticks = [ 1 , 2 ] xticklabels = [ <str> , <str> ] plt . xticks ( xticks , xticklabels , fontsize = fontSizeTicks ) plt . ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . boxoff ( ax1 ) z , pVal = stats . ranksums ( allLeftFreqs , allRightFreqs ) print <str> . format ( pVal ) ax1 . text ( 1 , 0.9 , <str> . format ( pVal ) ) ax2 = plt . subplot ( gs [ 0 , 1 ] ) extraplots . boxoff ( ax2 ) ax2 . annotate ( <str> , xy = ( labelPosX [ 1 ] , labelPosY [ 1 ] ) , xycoords = <str> , fontsize = fontSizePanel , fontweight = <str> ) FIGNAME_behav = <str> dataDir_behav = os . path . join ( settings . FIGURES_DATA_PATH , STUDY_NAME , FIGNAME_behav ) summaryFilename_behav = <str> summaryFullPath_behav = os . path . join ( dataDir_behav , summaryFilename_behav ) summary_behav = np . load ( summaryFullPath_behav ) left014 = summary_behav [ <str> ] left015 = summary_behav [ <str> ] left016 = summary_behav [ <str> ] right014 = summary_behav [ <str> ] right015 = summary_behav [ <str> ] right016 = summary_behav [ <str> ] left014sessions = summary_behav [ <str> ] left015sessions = summary_behav [ <str> ] left016sessions = summary_behav [ <str> ] right014sessions = summary_behav [ <str> ] right015sessions = summary_behav [ <str> ] right016sessions = summary_behav [ <str> ] allFreqSessions = np . concatenate ( [ left014FreqsSessions , left015FreqsSessions , left016FreqsSessions , right014FreqsSessions , right015FreqsSessions , right016FreqsSessions ] ) allBehavSessions = np . concatenate ( [ left014sessions , left015sessions , left016sessions , right014sessions , right015sessions , right016sessions ] ) assert np . all ( allFreqSessions == allBehavSessions ) , <str> plt . hold ( <str> ) allBiasLeftStim = 100 * np . concatenate ( [ left014 , left015 ] ) allBiasRightStim = 100 * np . concatenate ( [ right015 , right016 ] ) ax2 . plot ( allLeftFreqs , allBiasLeftStim , <str> , mec = <str> , mfc = <str> ) slopeLeft , interceptLeft , rValLeft , pValLeft , stdErrorLeft = stats . linregress ( allLeftFreqs [ ~ np . isnan ( allLeftFreqs ) ] , allBiasLeftStim [ ~ np . isnan ( allLeftFreqs ) ] ) xlLeft = np . linspace ( min ( allLeftFreqs ) , max ( allLeftFreqs ) , 20 ) ylLeft = [ slopeLeft * xx + interceptLeft for xx in xlLeft ] ax2 . plot ( allRightFreqs , allBiasRightStim , <str> , mec = <str> , mfc = <str> ) slopeRight , interceptRight , rValRight , pValRight , stdErrorRight = stats . linregress ( allRightFreqs [ ~ np . isnan ( allRightFreqs ) ] , allBiasRightStim [ ~ np . isnan ( allRightFreqs ) ] ) xlRight = np . linspace ( min ( allRightFreqs ) , max ( allRightFreqs ) , 20 ) ylRight = [ slopeRight * xx + interceptRight for xx in xlRight ] ax2 . set_xlabel ( <str> ) ax2 . set_ylabel ( <str> ) allFreqs = np . concatenate ( [ allLeftFreqs , allRightFreqs ] ) allBias = np . concatenate ( [ allBiasLeftStim , allBiasRightStim ] ) allCellsWTuning = ~ np . isnan ( allFreqs ) slopeAll , interceptAll , rValAll , pValAll , stdErrorAll = stats . linregress ( allFreqs [ allCellsWTuning ] , allBias [ allCellsWTuning ] ) print <str> . format ( rValAll , pValAll ) xlAll = np . linspace ( min ( allFreqs ) , max ( allFreqs ) , 20 ) ylAll = [ slopeAll * xx + interceptAll for xx in xlAll ] ax2 . plot ( xlAll , ylAll , <str> ) rValLeft , pValLeft = stats . spearmanr ( allLeftFreqs [ ~ np . isnan ( allLeftFreqs ) ] , allBiasLeftStim [ ~ np . isnan ( allLeftFreqs ) ] ) rValRight , pValRight = stats . spearmanr ( allRightFreqs [ ~ np . isnan ( allRightFreqs ) ] , allBiasRightStim [ ~ np . isnan ( allRightFreqs ) ] ) rValAll , pValAll = stats . spearmanr ( allFreqs [ ~ np . isnan ( allFreqs ) ] , allBias [ ~ np . isnan ( allFreqs ) ] ) print <str> . format ( rValAll , pValAll , rValLeft , pValLeft , rValRight , pValRight ) ax2 . set_xlim ( [ - 1 , 1 ] ) ax2 . set_ylim ( [ - 50 , 55 ] ) ax2 . text ( - 0.2 , 45 , <str> . format ( rValAll , pValAll ) ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontSizeTicks ) if SAVE_FIGURE :      extraplots . save_figure ( figFilename , figFormat , figSize , outputDir )   