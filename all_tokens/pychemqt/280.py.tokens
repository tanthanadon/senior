from configparser import ConfigParser from PyQt5 import QtWidgets from UI . widgets import Entrada_con_unidades from lib . config import conf_dir class UI_confResolution_widget ( QtWidgets . QWidget ) :      def __init__ ( self , config = None , parent = None ) :          self . standards = [ ( 600 , 400 ) , ( 640 , 480 ) , ( 720 , 400 ) , ( 800 , 600 ) , ( 832 , 624 ) , ( 1024 , 768 ) , ( 1152 , 864 ) , ( 1280 , 1024 ) , ( 1700 , 1250 ) , ( 1900 , 1425 ) , ( 2400 , 1800 ) , ( 4000 , 3000 ) ] super ( UI_confResolution_widget , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 0 , 0 ) self . standard = QtWidgets . QComboBox ( ) self . standard . addItem ( <str> ) for resolucion in self . standards :              self . standard . addItem ( <str> % resolucion )  self . standard . currentIndexChanged . connect ( self . changeResolution ) layout . addWidget ( self . standard , 0 , 1 ) self . checkCustom = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkCustom , 1 , 0 , 1 , 2 ) label = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) label . setIndent ( 50 ) layout . addWidget ( label , 2 , 0 ) self . x = Entrada_con_unidades ( int , width = 60 , spinbox = True , step = 1 ) layout . addWidget ( self . x , 2 , 1 ) label = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) label . setIndent ( 50 ) layout . addWidget ( label , 3 , 0 ) self . y = Entrada_con_unidades ( int , width = 60 , spinbox = True , step = 1 ) layout . addWidget ( self . y , 3 , 1 ) self . checkCustom . toggled . connect ( self . x . setEnabled ) self . checkCustom . toggled . connect ( self . y . setEnabled ) if config and config . has_section ( <str> ) :              x = config . getint ( <str> , <str> ) y = config . getint ( <str> , <str> ) self . x . setValue ( x ) self . y . setValue ( y ) if ( x , y ) in self . standards :                  self . standard . setCurrentIndex ( self . standards . index ( ( x , y ) ) + 1 ) self . checkCustom . setChecked ( False ) self . x . setEnabled ( False ) self . y . setEnabled ( False )  else :                  self . standard . setCurrentIndex ( 0 ) self . checkCustom . setChecked ( True )    def changeResolution ( self ) :          x , y = self . standard . currentText ( ) . split ( <str> ) self . x . setValue ( int ( x ) ) self . y . setValue ( int ( y ) )  def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , str ( self . x . value ) ) config . set ( <str> , <str> , str ( self . y . value ) ) return config  @ classmethod def default ( cls , config ) :          config . add_section ( <str> ) Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) ) return config   class Dialog ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Dialog , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) self . datos = UI_confResolution_widget ( config ) layout . addWidget ( self . datos ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )  def value ( self , config ) :          config = self . datos . value ( config ) return config   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) Dialog = Dialog ( ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   