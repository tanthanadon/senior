import os import string try :      import ezodf import openpyxl  except :      pass  from PyQt5 . QtWidgets import QApplication from . parents import equipment class Spreadsheet ( equipment ) :      title = QApplication . translate ( <str> , <str> ) help = <str> kwargs = { <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ ] } kwargs_forbidden = [ <str> , ] @ property def isCalculable ( self ) :          self . msg = <str> self . status = 1 if not self . kwargs [ <str> ] or not os . path . isfile ( self . kwargs [ <str> ] ) :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  if not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 3  return True  def cleanOldValues ( self , ** kwargs ) :          if kwargs . get ( <str> , <str> ) and kwargs . get ( <str> , <str> ) != self . kwargs [ <str> ] :              self . kwargs [ <str> ] = [ ]  self . kwargs . update ( kwargs )  def calculo ( self ) :          ext = self . kwargs [ <str> ] . split ( <str> ) [ - 1 ] if ext == <str> :              self . _dependence = <str> spreadsheet = ezodf . opendoc ( self . kwargs [ <str> ] ) self . sheets = [ name for name in spreadsheet . sheets . names ( ) ] if self . kwargs [ <str> ] :                  for data in self . kwargs [ <str> ] :                      entity = self . kwargs [ <str> ] . getObject ( data [ <str> ] ) sheet = spreadsheet . sheets [ data [ <str> ] ] indProp = entity . propertiesTitle ( ) . index ( data [ <str> ] ) if entity . propertiesUnit ( ) [ indProp ] == str :                          value = entity . __getattribute__ ( entity . propertiesAttribute ( ) [ indProp ] )  else :                          indUnit = entity . propertiesUnit ( ) [ indProp ] . __text__ . index ( data [ <str> ] ) units = entity . propertiesUnit ( ) [ indProp ] . __units__ value = entity . __getattribute__ ( entity . propertiesAttribute ( ) [ indProp ] ) . __getattribute__ ( units [ indUnit ] )  celda = list ( data [ <str> ] ) column = [ ] while celda [ 0 ] in string . ascii_uppercase :                          column . append ( celda . pop ( 0 ) )  base = len ( string . ascii_uppercase ) exponente = 0 columna = 0 while column :                          ordinal = ord ( column . pop ( ) ) - 64 columna += ordinal * base ** exponente exponente += 1  fila = int ( <str> . join ( celda ) ) if fila > sheet . nrows ( ) :                          sheet . append_rows ( fila - sheet . nrows ( ) )  if columna > sheet . ncols ( ) :                          sheet . append_columns ( columna - sheet . ncols ( ) )  sheet [ data [ <str> ] ] . set_value ( value )  spreadsheet . save ( )   elif ext == <str> :              self . _dependence = <str> spreadsheet = openpyxl . load_workbook ( self . kwargs [ <str> ] ) self . sheets = spreadsheet . get_sheet_names ( ) if self . kwargs [ <str> ] :                  for data in self . kwargs [ <str> ] :                      entity = self . kwargs [ <str> ] . getObject ( data [ <str> ] ) sheet = spreadsheet [ data [ <str> ] ] indProp = entity . propertiesTitle ( ) . index ( data [ <str> ] ) if entity . propertiesUnit ( ) [ indProp ] == str :                          value = entity . __getattribute__ ( entity . propertiesAttribute ( ) [ indProp ] )  else :                          indUnit = entity . propertiesUnit ( ) [ indProp ] . __text__ . index ( data [ <str> ] ) units = entity . propertiesUnit ( ) [ indProp ] . __units__ value = entity . __getattribute__ ( entity . propertiesAttribute ( ) [ indProp ] ) . __getattribute__ ( units [ indUnit ] )  sheet [ data [ <str> ] ] = value comentario = openpyxl . comments . Comment ( <str> . format ( data ) , <str> ) sheet [ data [ <str> ] ] . comment = comentario  spreadsheet . save ( <str> . join ( self . kwargs [ <str> ] . split ( <str> ) [ : - 1 ] ) + <str> + <str> )  elif ext == <str> :                  pass   self . salida = [ ]  def writeListtoJSON ( self , kwarg , key , value ) :          kwarg_list = { } if key == <str> :              for i , data in enumerate ( value ) :                  kwarg_list [ i ] = data   kwarg [ key ] = kwarg_list  def readListFromJSON ( self , data , key ) :          kwarg = [ ] if key == <str> :              for i , data in data [ key ] . items ( ) :                  kwarg . append ( data )   return kwarg  def propTxt ( self ) :          txt = <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( 0 ) if self . kwargs [ <str> ] :              for data in self . kwargs [ <str> ] :                  txt += <str> . format ( data ) + os . linesep   else :              txt += QApplication . translate ( <str> , <str> ) + os . linesep  return txt  @ classmethod def propertiesEquipment ( cls ) :          l = [ ( QApplication . translate ( <str> , <str> ) , <str> , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , None ) ] return l  def propertiesListTitle ( self , index ) :          lista = [ ] for data in self . kwargs [ <str> ] :              lista . append ( <str> . format ( data ) )  return lista  def writeStatetoJSON ( self , state ) :          state [ <str> ] = self . sheets  def readStatefromJSON ( self , state ) :          self . sheets = state [ <str> ] self . salida = [ None ]   if __name__ == <str> :      spreadsheet = Spreadsheet ( filename = <str> )   