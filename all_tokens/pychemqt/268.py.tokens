import os from PyQt5 . QtWidgets import QApplication from scipy . constants import g , pi from lib import unidades from lib . friction import f_friccion from lib . adimensional import Re from equipment . parents import equipment from equipment . heatExchanger import Heat_Exchanger class Pipe ( equipment ) :      title = QApplication . translate ( <str> , <str> ) help = <str> kwargs = { <str> : None , <str> : 0 , <str> : 0 , <str> : [ ] , <str> : [ ] , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 100. , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 2.8 , <str> : 0.0 , <str> : 0.0 } kwargsInput = ( <str> , ) kwargsValue = ( <str> , <str> , <str> ) kwargsList = ( <str> , <str> ) calculateValue = ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) calculateCostos = ( <str> , <str> ) indiceCostos = 5 salida = [ None ] TEXT_METODO = ( QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ) TEXT_THERMAL = ( QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ) @ property def isCalculable ( self ) :          materialCoste = [ <str> , <str> , <str> ] if self . kwargs [ <str> ] and self . kwargs [ <str> ] and self . kwargs [ <str> ] and self . kwargs [ <str> ] and self . kwargs [ <str> ] [ 0 ] in materialCoste :              self . statusCoste = True  else :              self . statusCoste = False self . C_adq = unidades . Currency ( None ) self . C_inst = unidades . Currency ( None )  if not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  if not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  if not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  if self . kwargs [ <str> ] == 1 and not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  elif self . kwargs [ <str> ] == 2 and ( not self . kwargs [ <str> ] or not self . kwargs [ <str> ] ) :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  if self . kwargs [ <str> ] == 1 and not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0 return  self . msg = <str> self . status = 1 return True  def calculo ( self ) :          self . L = unidades . Length ( self . kwargs [ <str> ] ) if self . kwargs [ <str> ] . x == 0 :              self . rho = self . kwargs [ <str> ] . Liquido . rho self . mu = self . kwargs [ <str> ] . Liquido . mu  else :              self . rho = self . kwargs [ <str> ] . Gas . rho self . mu = self . kwargs [ <str> ] . Gas . mu  self . material = self . kwargs [ <str> ] [ 0 ] + <str> + self . kwargs [ <str> ] [ 1 ] self . Dn = self . kwargs [ <str> ] [ 3 ] self . rugosidad = unidades . Length ( self . kwargs [ <str> ] [ 2 ] , <str> ) self . De = unidades . Length ( self . kwargs [ <str> ] [ 6 ] , <str> ) self . w = unidades . Length ( self . kwargs [ <str> ] [ 5 ] , <str> ) self . Di = unidades . Length ( ( self . De - 2 * self . w ) ) self . eD = unidades . Dimensionless ( self . rugosidad / self . Di ) self . seccion = unidades . Area ( pi / 4 * self . Di ** 2 ) self . A = unidades . Area ( pi * self . De * self . L ) self . V = unidades . Speed ( self . kwargs [ <str> ] . Q / self . seccion ) self . Re = Re ( self . Di , self . V , self . rho , self . mu ) K = 0 for accesorio in self . kwargs [ <str> ] :              K += accesorio [ 2 ] * accesorio [ 3 ]  self . K = unidades . Dimensionless ( K ) self . DeltaP_h = unidades . Pressure ( g * self . kwargs [ <str> ] * self . rho ) self . DeltaP_ac = unidades . Pressure ( self . K * self . V ** 2 / 2 * self . rho ) self . f = f_friccion ( self . Re , self . eD ) self . DeltaP_f = self . __DeltaP_friccion ( ) self . DeltaP_v = unidades . Pressure ( 0 ) self . DeltaP = unidades . Pressure ( self . DeltaP_h + self . DeltaP_ac + self . DeltaP_f + self . DeltaP_v ) self . DeltaP_100ft = self . DeltaP * 100 / self . L . ft self . Pout = unidades . Pressure ( self . kwargs [ <str> ] . P - self . DeltaP ) if self . kwargs [ <str> ] == 0 :              self . Tout = self . kwargs [ <str> ] . T self . Heat = unidades . Power ( 0 )  else :              ch = Heat_Exchanger ( ) ch ( entrada = self . kwargs [ <str> ] , modo = self . kwargs [ <str> ] , Heat = self . kwargs [ <str> ] , deltaP = self . DeltaP , A = self . A , U = self . kwargs [ <str> ] , Text = self . kwargs [ <str> ] ) self . Tout = ch . salida [ 0 ] . T self . Heat = ch . Heat  self . salida = [ self . kwargs [ <str> ] . clone ( T = self . Tout , P = self . Pout ) ] self . Pin = self . kwargs [ <str> ] . P self . Pout = self . salida [ 0 ] . P  def __DeltaP_friccion ( self ) :          if self . kwargs [ <str> ] == 0 :              dp = unidades . DeltaP ( self . L * self . V ** 2 / self . Di * self . f * self . rho / 2 )  elif self . kwargs [ <str> ] == 1 :              p = ( self . kwargs [ <str> ] . Q . galUSmin * self . L . ft ** 0.54 / 0.442 / self . Di . inch ** 2.63 / self . kwargs [ <str> ] ) ** ( 1. / 0.54 ) dp = unidades . DeltaP ( p , <str> )  elif self . kwargs [ <str> ] == 2 :              q = self . kwargs [ <str> ] . caudalmasico . lbh p = 2.1082 * self . L . ft * q ** 1.85 / self . rho . lbft3 / 1e7 / self . Di . inch ** 4.97 dp = unidades . Pressure ( p , <str> )  elif self . kwargs [ <str> ] == 3 :              pass  elif self . kwargs [ <str> ] == 4 :              pass  elif self . kwargs [ <str> ] == 5 :              pass  return dp  def coste ( self ) :          CI = self . kwargs [ <str> ] BI = self . kwargs [ <str> ] codigo = str ( self . kwargs [ <str> ] [ 1 ] ) if codigo in ( <str> , <str> ) :              a = 30. p = 1.31  elif codigo in ( <str> , <str> ) :              a = 38.1 p = 1.35  elif codigo in ( <str> , <str> ) :              a = 55.3 p = 1.39  else :              a = 0 p = 1  self . C_adq = unidades . Currency ( a * self . Di . ft ** p * self . L * CI / BI ) self . C_inst = unidades . Currency ( self . C_adq * self . kwargs [ <str> ] )  def writeListtoJSON ( self , kwarg , key , value ) :          kwarg_list = { } if key == <str> :              kwarg_list [ <str> ] = value [ 0 ] kwarg_list [ <str> ] = value [ 1 ] kwarg_list [ <str> ] = value [ 2 ] kwarg_list [ <str> ] = value [ 3 ] kwarg_list [ <str> ] = value [ 4 ] kwarg_list [ <str> ] = value [ 5 ] kwarg_list [ <str> ] = value [ 6 ] kwarg_list [ <str> ] = value [ 7 ] kwarg_list [ <str> ] = value [ 8 ] kwarg_list [ <str> ] = value [ 9 ] kwarg_list [ <str> ] = value [ 10 ] kwarg_list [ <str> ] = value [ 11 ]  elif key == <str> :              for i , accesorio in enumerate ( value ) :                  ac = { } ac [ <str> ] = value [ i ] [ 0 ] ac [ <str> ] = value [ i ] [ 1 ] ac [ <str> ] = value [ i ] [ 2 ] ac [ <str> ] = value [ i ] [ 3 ] ac [ <str> ] = value [ i ] [ 4 ] ac [ <str> ] = value [ i ] [ 5 ] ac [ <str> ] = value [ i ] [ 6 ] ac [ <str> ] = value [ i ] [ 7 ] kwarg_list [ i ] = ac   kwarg [ key ] = kwarg_list  def readListFromJSON ( self , data , key ) :          kwarg = [ ] if key == <str> :              kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] ) kwarg . append ( data [ key ] [ <str> ] )  elif key == <str> :              for i , accesorio in data [ key ] . items ( ) :                  ac = [ ] ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) ac . append ( accesorio [ <str> ] ) kwarg . append ( ac )   return kwarg  def writeStatetoJSON ( self , state ) :          state [ <str> ] = self . L state [ <str> ] = self . rho state [ <str> ] = self . mu state [ <str> ] = self . material state [ <str> ] = self . Dn state [ <str> ] = self . rugosidad state [ <str> ] = self . De state [ <str> ] = self . w state [ <str> ] = self . Di state [ <str> ] = self . eD state [ <str> ] = self . seccion state [ <str> ] = self . A state [ <str> ] = self . V state [ <str> ] = self . Re state [ <str> ] = self . K state [ <str> ] = self . DeltaP_h state [ <str> ] = self . DeltaP_ac state [ <str> ] = self . f state [ <str> ] = self . DeltaP_f state [ <str> ] = self . DeltaP_v state [ <str> ] = self . DeltaP state [ <str> ] = self . DeltaP_100ft state [ <str> ] = self . Pout state [ <str> ] = self . Tout state [ <str> ] = self . Heat state [ <str> ] = self . Pin state [ <str> ] = self . Pout state [ <str> ] = self . statusCoste if self . statusCoste :              state [ <str> ] = self . C_adq state [ <str> ] = self . C_inst   def readStatefromJSON ( self , state ) :          self . L = unidades . Length ( state [ <str> ] ) self . rho = unidades . Density ( state [ <str> ] ) self . mu = unidades . Viscosity ( state [ <str> ] ) self . material = state [ <str> ] self . Dn = state [ <str> ] self . rugosidad = unidades . Length ( state [ <str> ] ) self . De = unidades . Length ( state [ <str> ] ) self . w = unidades . Length ( state [ <str> ] ) self . Di = unidades . Length ( state [ <str> ] ) self . eD = unidades . Dimensionless ( state [ <str> ] ) self . seccion = unidades . Area ( state [ <str> ] ) self . A = unidades . Area ( state [ <str> ] ) self . V = unidades . Speed ( state [ <str> ] ) self . Re = unidades . Dimensionless ( state [ <str> ] ) self . K = unidades . Dimensionless ( state [ <str> ] ) self . DeltaP_h = unidades . DeltaP ( state [ <str> ] ) self . DeltaP_ac = unidades . DeltaP ( state [ <str> ] ) self . f = unidades . Dimensionless ( state [ <str> ] ) self . DeltaP_f = unidades . DeltaP ( state [ <str> ] ) self . DeltaP_v = unidades . DeltaP ( state [ <str> ] ) self . DeltaP = unidades . DeltaP ( state [ <str> ] ) self . DeltaP_100ft = unidades . Dimensionless ( state [ <str> ] ) self . Tout = unidades . Temperature ( state [ <str> ] ) self . Heat = unidades . Power ( state [ <str> ] ) self . Pin = unidades . Pressure ( state [ <str> ] ) self . Pout = unidades . Pressure ( state [ <str> ] ) self . statusCoste = state [ <str> ] if self . statusCoste :              self . C_adq = unidades . Currency ( state [ <str> ] ) self . C_inst = unidades . Currency ( state [ <str> ] )  self . salida = [ None ]  def propTxt ( self ) :          txt = <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 9 ) ) if self . kwargs [ <str> ] :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( 9 ) for accesorio in self . kwargs [ <str> ] :                  txt += <str> % ( accesorio [ 3 ] , accesorio [ 7 ] , accesorio [ 2 ] ) + os . linesep   txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 11 , 24 ) ) if self . kwargs [ <str> ] :              txt += self . propertiesToText ( range ( 24 , 26 ) )  if self . statusCoste :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 26 , 31 ) )  return txt  @ classmethod def propertiesEquipment ( cls ) :          l = [ ( QApplication . translate ( <str> , <str> ) , <str> , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Length ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Length ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Length ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Length ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Length ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Area ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Area ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , None ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . DeltaP ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Speed ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Power ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Currency ) ] return l  def propertiesListTitle ( self , index ) :          lista = [ ] for accesorio in self . kwargs [ <str> ] :              lista . append ( <str> % ( accesorio [ 3 ] , accesorio [ 7 ] ) )  return lista   if __name__ == <str> :      import doctest doctest . testmod ( )   