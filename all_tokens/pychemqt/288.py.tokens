import os import sys from PyQt5 import QtGui , QtWidgets try :      from PyQt5 . Qsci import QsciScintilla , QsciLexerPython  except :      pass  if os . environ [ <str> ] == <str> :      class SimplePythonEditor ( QsciScintilla ) :          ARROW_MARKER_NUM = 8 def __init__ ( self , parent = None ) :              super ( SimplePythonEditor , self ) . __init__ ( parent ) font = QtGui . QFont ( ) font . setFamily ( <str> ) font . setFixedPitch ( True ) font . setPointSize ( 10 ) self . setFont ( font ) self . setMarginsFont ( font ) fontmetrics = QtGui . QFontMetrics ( font ) self . setMarginsFont ( font ) self . setMarginWidth ( 0 , fontmetrics . width ( <str> ) + 6 ) self . setMarginLineNumbers ( 0 , True ) self . setMarginsBackgroundColor ( QtGui . QColor ( <str> ) ) self . setMarginSensitivity ( 1 , True ) self . marginClicked . connect ( self . on_margin_clicked ) self . markerDefine ( QsciScintilla . RightArrow , self . ARROW_MARKER_NUM ) self . setMarkerBackgroundColor ( QtGui . QColor ( <str> ) , self . ARROW_MARKER_NUM ) self . setBraceMatching ( QsciScintilla . SloppyBraceMatch ) self . setCaretLineVisible ( True ) self . setCaretLineBackgroundColor ( QtGui . QColor ( <str> ) ) lexer = QsciLexerPython ( ) lexer . setDefaultFont ( font ) self . setLexer ( lexer ) self . SendScintilla ( QsciScintilla . SCI_SETHSCROLLBAR , 0 )  def on_margin_clicked ( self , nmargin , nline , modifiers ) :              if self . markersAtLine ( nline ) != 0 :                  self . markerDelete ( nline , self . ARROW_MARKER_NUM )  else :                  self . markerAdd ( nline , self . ARROW_MARKER_NUM )     else :      class SimplePythonEditor ( QtWidgets . QPlainTextEdit ) :          def setText ( self , txt ) :              self . setPlainText ( txt )    if __name__ == <str> :      app = QtWidgets . QApplication ( sys . argv ) editor = SimplePythonEditor ( ) editor . show ( ) editor . setText ( open ( sys . argv [ 0 ] ) . read ( ) ) app . exec_ ( )   