from unittest import TestCase from scipy import log , exp from lib import unidades from lib . meos import MEoS class nC4 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 228. ) Tc = unidades . Temperature ( 425.125 ) Pc = unidades . Pressure ( 3796.0 , <str> ) M = 58.1222 Tt = unidades . Temperature ( 134.895 ) Tb = unidades . Temperature ( 272.660 ) f_acent = 0.201 momentoDipolar = unidades . DipoleMoment ( 0.05 , <str> ) id = 6 _Tr = unidades . Temperature ( 406.785141 ) _rhor = unidades . Density ( 230.384826 ) _w = 0.194240287 Fi1 = { <str> : [ 1 , 3.24680487 ] , <str> : [ 0 , 1 ] , <str> : [ 12.54882924 , - 5.46976878 ] , <str> : [ 5.54913289 , 11.4648996 , 7.59987584 , 9.66033239 ] , <str> : [ 0.7748404445 , 3.3406025522 , 4.9705130961 , 9.9755537783 ] } Fi2 = { <str> : [ 1 , 3.33944 ] , <str> : [ 0 , 1 ] , <str> : [ 20.884143364 , - 91.638478026 ] , <str> : [ ] , <str> : [ ] , <str> : [ 9.44893 , 24.4618 ] , <str> : [ 468.27 / Tc , 1914.1 / Tc ] , <str> : [ 6.89406 , 14.7824 ] , <str> : [ 183.636 / Tc , 903.185 / Tc ] } Fi3 = { <str> : [ 1 , 3.240207 ] , <str> : [ 0 , 1 ] , <str> : [ - 5.404217 , 4.91136 ] , <str> : [ 5.513671 , 7.388450 , 10.250630 , 11.061010 ] , <str> : [ 327.55988 / Tc , 1319.06935 / Tc , 4138.63184 / Tc , 1864.36783 / Tc ] } CP4 = { <str> : - 1.3491511376e1 , <str> : [ 3.8802310194e5 , - 1.5444296890e5 , 2.8455082239e3 , 6.6142595353e-2 , - 2.4307965028e-5 , 1.5044248429e-10 ] , <str> : [ - 3 , - 2 , - 1 , 1 , 2 , 3 ] , <str> : [ - 8.3933423467 ] , <str> : [ 3000 ] } CP6 = { <str> : 0.801601 / 8.3143 * 58.124 , <str> : [ 0.655936e-3 / 8.3143 * 58.124 , 0.12277e-4 / 8.3143 * 58.124 , - 0.165626e-7 / 8.3143 * 58.124 , 0.67736e-11 / 8.3143 * 58.124 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : [ ] , <str> : [ ] } buecker = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 750. , <str> : 200000.0 , <str> : 13.86 , <str> : [ 0.25536998241635e1 , - 0.44585951806696e1 , 0.82425886369063 , 0.11215007011442 , - 0.35910933680333e-1 , 0.16790508518103e-1 , 0.32734072508724e-1 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 4 , 4 ] , <str> : [ 0.50 , 1.00 , 1.50 , 0.00 , 0.50 , 0.50 , 0.75 ] , <str> : [ 0.95571232982005 , - 0.10003385753419e1 , 0.85581548803855e-1 , - 0.025147918369616 , - 0.15202958578918e-2 , 0.47060682326420e-2 , - 0.97845414174006e-1 , - 0.48317904158760e-1 , 0.17841271865468 , 0.18173836739334e-1 , - 0.11399068074953 , 0.19329896666669e-1 , 0.11575877401010e-2 , 0.15253808698116e-3 , - 0.43688558458471e-1 , - 0.82403190629989e-2 ] , <str> : [ 1 , 1 , 2 , 7 , 8 , 8 , 1 , 2 , 3 , 3 , 4 , 5 , 5 , 10 , 2 , 6 ] , <str> : [ 2.00 , 2.50 , 2.50 , 1.50 , 1.00 , 1.50 , 4.00 , 7.00 , 3.00 , 7.00 , 3.00 , 1.00 , 6.00 , 0.00 , 6.00 , 13.00 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 16 , <str> : [ - 0.28390056949441e-1 , 0.14904666224681e-2 ] , <str> : [ 1 , 2 ] , <str> : [ 2. , 0. ] , <str> : [ 10 , 10 ] , <str> : [ 150 , 200 ] , <str> : [ 1.16 , 1.13 ] , <str> : [ 0.85 , 1. ] } younglove = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31434 , <str> : 58.125 , <str> : 134.86 , <str> : 425.16 , <str> : 3796 , <str> : 3.92 , <str> : CP4 , <str> : { <str> : 300 , <str> : 101.325 , <str> : 19208.9 , <str> : 309.95 } , <str> : 134.86 , <str> : 600. , <str> : 70000.0 , <str> : 13.2 , <str> : [ None , 0.153740104603e-1 , - 0.160980034611 , - 0.979782459010e1 , 0.499660674504e3 , - 0.102115607687e7 , 0.236032147756e-2 , - 0.137475757093e1 , - 0.907038733865e3 , 0.385421748213e6 , - 0.349453710700e-4 , 0.157361122714 , 0.102301474068e3 , 0.182335737331e-1 , - 0.404114307787e1 , 0.187979855783e1 , 0.362088795040 , - 0.738762248266e-2 , - 0.218618590563e1 , 0.118802729027 , 0.706854198713e6 , - 0.219469885796e9 , - 0.182454361268e5 , 0.206790377277e10 , 0.111757550145e3 , 0.558779925986e5 , - 0.159579054026e2 , - 0.148034214622e7 , - 0.245206328201 , 0.218305259309e3 , - 0.923990627338e-4 , - 0.205267776639e1 , 0.387639044820e2 ] } GERG = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : Tt , <str> : 575. , <str> : 69000.0 , <str> : 13.2 , <str> : [ 0.10626277411455e1 , - 0.28620951828350e1 , 0.88738233403777 , - 0.12570581155345 , 0.10286308708106 , 0.25358040602654e-3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.25 , 1.125 , 1.5 , 1.375 , 0.25 , 0.875 ] , <str> : [ 0.32325200233982 , - 0.037950761057432 , - 0.32534802014452 , - 0.079050969051011 , - 0.020636720547775 , 0.57053809334750e-2 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.625 , 1.75 , 3.625 , 3.625 , 14.5 , 12. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } miyamoto = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi3 , <str> : <str> , <str> : 134.87 , <str> : 589. , <str> : 69000.0 , <str> : 13.15 , <str> : [ 2.952054e-1 , - 1.32636 , - 2.031317e-3 , 2.240301e-1 , - 3.635425e-2 , 1.905841e-3 , 7.409154e-5 , - 1.401175e-6 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 5 , 8 , 8 ] , <str> : [ - 0.25 , 1.5 , - 0.75 , 0 , 1.25 , 1.5 , 0.5 , 2.5 ] , <str> : [ - 2.492172 , 2.386920 , 1.424009e-3 , - 9.393388e-3 , 2.616590e-3 , - 1.977323e-1 , - 3.809534e-2 , 1.523948e-3 , - 2.391345e-2 , - 9.535229e-3 , 3.928384e-5 ] , <str> : [ 3 , 3 , 8 , 5 , 6 , 1 , 5 , 7 , 2 , 3 , 15 ] , <str> : [ 1.5 , 1.75 , - 0.25 , 3 , 3 , 4 , 2 , - 1 , 2 , 19 , 5 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] , <str> : [ 1 ] * 11 } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi2 , <str> : <str> , <str> : 58.123 , <str> : 227.84 / 58.123 , <str> : 134.86 , <str> : 750. , <str> : 100000.0 , <str> : 13.20 , <str> : [ 0.10626277e1 , - 0.28620952e1 , 0.88738233 , - 0.12570581 , 0.10286309 , 0.25358041e-3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.25 , 1.125 , 1.5 , 1.375 , 0.25 , 0.875 ] , <str> : [ 0.323252 , - 0.37950761e-1 , - 0.32534802 , - 0.79050969e-1 , - 0.20636721e-1 , 0.57053809e-2 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.625 , 1.75 , 3.625 , 3.625 , 14.5 , 12. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } polt = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.3143 , <str> : CP6 , <str> : <str> , <str> : 140.0 , <str> : 589. , <str> : 30000.0 , <str> : 12.81 , <str> : [ - 0.504188295325 , 0.541067401063 , - 0.760421383062e-1 , 0.846035653528 , - 0.191317317203e1 , 0.521441860186 , - 0.783511318207 , 0.689697797175e-1 , 0.947825461055e-1 , - 0.141401831669 , 0.382675021672 , - 0.423893176684e-1 , 0.677591792029e-1 , 0.567943363340e-1 , - 0.131517698401 , 0.221136942526e-1 ] , <str> : [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 5 ] , <str> : [ 3 , 4 , 5 , 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 0 , 1 , 0 , 1 , 1 ] , <str> : [ 0.504188295325 , - 0.541067401063 , 0.760421383062e-1 , - 0.619109535460e-1 , 0.423035373804 , - 0.390505508895 ] , <str> : [ 0 , 0 , 0 , 2 , 2 , 2 ] , <str> : [ 3 , 4 , 5 , 3 , 4 , 5 ] , <str> : [ 2 ] * 6 , <str> : [ 1.08974964 ] * 6 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 1.18936994 , 1.05407451 , - 3.24964532 , 8.25263908e-2 , 2.76467405e-4 , - 8.09869214e-2 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ - 9.38097492e-2 , 1.46213532e-1 , 4.01168502e-1 , - 1.28716120e-2 , - 0.275191070 , - 1.62708971e-2 , - 7.04082962e-2 , - 2.32871995e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } eq = buecker , younglove , GERG , miyamoto , shortSpan , polt , sun _PR = [ - 0.1332 , - 15.8278 ] _surface = { <str> : [ 0.05138 ] , <str> : [ 1.209 ] } _dielectric = { <str> : 1 , <str> : [ 20.611 , 0.020 ] , <str> : [ 66.64 , 24.44 ] , <str> : [ - 7461.2 , - 1983.6 ] , <str> : 15.23 , <str> : 2 } _melting = { <str> : 1 , <str> : buecker [ <str> ] , <str> : 134.895 , <str> : 575.0 , <str> : Tt , <str> : 0.653 , <str> : 1 , <str> : [ 5.585582364e8 ] , <str> : [ 2.206 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.71897e1 , 0.26122e1 , - 0.21729e1 , - 0.27230e1 ] , <str> : [ 1 , 1.5 , 2. , 4.5 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.52341e1 , - 0.62011e1 , 0.36063e1 , 0.22137 ] , <str> : [ 0.44 , 0.6 , 0.76 , 5.0 ] } _vapor_Density = { <str> : 2 , <str> : [ - 0.27390e1 , - 0.57347e1 , - 0.16408e2 , - 0.46986e2 , - 0.10090e3 ] , <str> : [ 0.39 , 1.14 , 3.0 , 6.5 , 14.0 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 0 , <str> : <str> , <str> : 425.125 , <str> : 4.89736312734e-1 / 228 * M / 1e3 , <str> : [ - 1.9572881000e1 , 1.98887362343e2 , - 8.3176420912e2 , 1.83218450345e3 , - 2.26510439059e3 , 1.51348864395e3 , - 4.32819866497e2 , 5.19698852489 , - 3.86579291550e-2 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 425.125 , <str> : 228 , <str> : [ 2.3460864383872 , 7.8632175809804e-1 , 1.5823593499816e1 , - 9.4670516989296 , 1.0511496276340 , - 1.9355799491084e-2 , 1.4895031937816e-4 ] , <str> : [ 2 , 5 , 0 , 0 , 0 , 4 , 5 ] , <str> : [ 2 , 2 , 2.5 , 3 , 5 , 7.5 , 10 ] , <str> : [ 1.2790911462043 , 2.5581822924086e-1 ] , <str> : [ 30 , 5 ] , <str> : [ 220 , 400 ] , <str> : <str> } def _mu0 ( self , T ) :          tau = self . Tc / T no = [ 4.6147656002208 , 4.574318591039e-1 , 3.0851104723224e-2 ] suma = 0 for i , n in enumerate ( no ) :              suma += n * log ( tau ) ** i  muo = 1.0546549635209e3 / tau ** 0.5 / exp ( suma ) return muo  def _mur ( self , rho , T , fase ) :          tau = self . Tc / T delta = rho / self . rhoc mur = tau ** 0.5 / delta ** ( 2 / 3 ) * 1.2280342363570e-3 * ( delta ** 5.7 * tau ) ** 2 return mur  visco1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 280.51 , <str> : 0.57335 , <str> : 0.021357 , <str> : [ 0.17067154 , - 0.48879666 , 0.039038856 ] , <str> : 280.51 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.01251 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 425.125 , <str> : 3.92 * M , <str> : [ - 54.7737770846 , 58.0898623034 , 35.2658446259 , - 39.6682203832 , - 1.83729542151 , - 0.833262985358 , 1.93837020663 ] , <str> : [ 0 , 1 , 0 , 1 , 0 , 0 , 1 ] , <str> : [ 2 , 2 , 3 , 3 , 4 , 5 , 5 ] , <str> : 188.075903903 , <str> : 2.30873963359 , <str> : [ 0.88101765264 ] , <str> : [ - 0.5 ] } visco2 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 2 , <str> : 2 , <str> : 440. , <str> : 0.503103 , <str> : [ 0.1630521851e1 , 0.0 , 1.40 , 425.16 ] , <str> : [ - 0.2724386845e2 , 0.8012766611e3 , 0.2503978646e2 , - 0.1309704275e5 , - 0.8313305258e-1 , 0.6636975027e2 , 0.9849317662e4 ] , <str> : 3.920 } visco3 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 4 , <str> : 0 , <str> : 425.125 , <str> : [ 18.3983 , - 57.1255 , 49.3197 ] , <str> : [ 0 , 0.25 , 0.5 ] , <str> : [ - 1.34111e-5 , - 8.56588e-5 , 0 ] , <str> : [ 1.49860e-4 , - 1.71134e-4 , 0 ] , <str> : [ 3.53018e-7 , - 1.93040e-5 , 0 ] , <str> : [ - 3.63389e-9 , - 7.73717e-10 , 0 ] , <str> : [ 3.70980e-8 , 2.07659e-9 , 0 ] , <str> : [ - 1.12496e-7 , 7.66906e-8 , 0 ] } _viscosity = visco0 , visco1 , visco2 , visco3 thermo0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 425.16 , <str> : 1. , <str> : [ 1.62676e-3 , 9.75703e-4 , 2.89887e-2 ] , <str> : [ 0 , 1 , 2 ] , <str> : 425.16 , <str> : 3.92 * M , <str> : 1. , <str> : [ - 3.04337e-2 , 4.18357e-2 , 1.65820e-1 , - 1.47163e-1 , - 1.48144e-1 , 1.33542e-1 , 5.25500e-2 , - 4.85489e-2 , - 6.29367e-3 , 6.44307e-3 ] , <str> : [ 0 , - 1 , 0 , - 1 , 0 , - 1 , 0 , - 1 , 0 , - 1 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.03 , <str> : 0.194e-9 , <str> : 0.0496 , <str> : 0.875350e-9 , <str> : 637.68 } thermo1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 3 , <str> : 440. , <str> : [ 0.1530992335e1 , - 0.2114511021 ] , <str> : [ 0.4024170074e-2 , 0.1561435847e1 , - 0.6004381127e3 , - 0.7547260841e-3 , - 0.2069676662e-1 , 0.9382534978e2 , - 0.1711371457 , 0.3647724935e2 ] , <str> : 2 , <str> : 425.16 , <str> : 3.92 * 58.125 , <str> : [ 0.000769608 , 13.2533 , 0.485554 , 1.01021 ] , <str> : 9.10218e-10 } _thermal = thermo0 , thermo1  class Test ( TestCase ) :      def test_buecker ( self ) :          st = nC4 ( T = 136 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 8 ) , 0.00000082 ) self . assertEqual ( round ( st . Liquido . rho , 4 ) , 733.9269 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 719.46 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , - 3.020 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.442 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.974 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 1819.41 ) self . assertEqual ( round ( st . Gas . rho , 6 ) , 0.000042 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , - 224.49 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , 0.619 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 0.967 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.110 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 149.44 ) st = nC4 ( T = 220 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 0.007805 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 654.775 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 549.07 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , - 2.047 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.505 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.113 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 1326.20 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.24959 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , - 120.52 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , - 0.099 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.244 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.392 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 186.44 ) st = nC4 ( T = 300 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.25760 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 570.68 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 367.83 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , - 1.349 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.729 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.451 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 890.88 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 6.5164 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , - 8.24 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , - 0.150 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.602 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.811 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 202.15 ) st = nC4 ( T = 400 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 2.4954 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 408.48 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 80.60 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , - 0.542 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 2.173 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 3.838 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 318.35 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 73.077 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 113.39 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , - 0.057 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 2.210 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 3.623 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 154.77 ) st = nC4 ( T = 425 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 3.7881 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 250.17 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 50.78 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , - 0.235 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 2.534 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 2 ) , 375.35 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 114.85 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 205.54 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 73.93 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , - 0.180 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 2.589 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 2 ) , 460.13 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 112.63 ) st = nC4 ( T = 135 , P = 1e5 ) self . assertEqual ( round ( st . rho , 2 ) , 734.90 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 721.46 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 721.32 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 3.0349 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.4416 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.9729 ) self . assertEqual ( round ( st . w , 2 ) , 1826.47 ) st = nC4 ( T = 320 , P = 5e5 ) self . assertEqual ( round ( st . rho , 2 ) , 546.46 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 318.37 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 317.45 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 1.1876 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.8027 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.5760 ) self . assertEqual ( round ( st . w , 2 ) , 784.25 ) st = nC4 ( T = 360 , P = 1e6 ) self . assertEqual ( round ( st . rho , 3 ) , 23.804 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 39.201 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 81.210 ) self . assertEqual ( round ( st . s . kJkgK , 6 ) , - 0.048237 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.9129 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.2666 ) self . assertEqual ( round ( st . w , 2 ) , 197.12 ) st = nC4 ( T = 575 , P = 2e6 ) self . assertEqual ( round ( st . rho , 3 ) , 25.876 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 535.89 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 613.18 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.0083 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.7050 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.9097 ) self . assertEqual ( round ( st . w , 2 ) , 279.37 ) st = nC4 ( T = 330 , P = 5e6 ) self . assertEqual ( round ( st . rho , 2 ) , 544.15 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 298.77 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 289.58 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 1.1272 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.8433 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.5833 ) self . assertEqual ( round ( st . w , 2 ) , 793.83 ) st = nC4 ( T = 140 , P = 1e7 ) self . assertEqual ( round ( st . rho , 2 ) , 734.35 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 713.92 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 700.30 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 2.9800 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.4519 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.9720 ) self . assertEqual ( round ( st . w , 2 ) , 1829.40 ) st = nC4 ( T = 475 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 501.63 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 35.722 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 135.40 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , - 0.28209 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.4314 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.9384 ) self . assertEqual ( round ( st . w , 2 ) , 826.87 )  def test_younglove ( self ) :          kw = { <str> : <str> , <str> : 2 , <str> : 1 } st = nC4 ( T = 220 , P = 1e4 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 654.6 ) self . assertEqual ( round ( st . rhoM , 2 ) , 11.26 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 12630 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 12630 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 191.0 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 87.11 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 121.7 ) self . assertEqual ( round ( st . w , 0 ) , 1306 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 367 ) self . assertEqual ( round ( st . k , 3 ) , 0.141 ) st = nC4 ( T = 260 , P = 5e4 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 1.377 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.02369 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 13410 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 15520 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 302.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 81.74 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 91.07 ) self . assertEqual ( round ( st . w , 1 ) , 198.7 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 6.56 ) self . assertEqual ( round ( st . k , 4 ) , 0.0125 ) st = nC4 ( T = 600 , P = 1e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 1.168 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.02010 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 55190 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 60160 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 401.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 161.0 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 169.4 ) self . assertEqual ( round ( st . w , 1 ) , 299.8 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 14.6 ) self . assertEqual ( round ( st . k , 4 ) , 0.0591 ) st = nC4 ( T = 300 , P = 101325 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 2.433 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.04186 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 16790 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 19210 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 309.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 91.64 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 101.2 ) self . assertEqual ( round ( st . w , 1 ) , 211.2 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 7.55 ) self . assertEqual ( round ( st . k , 4 ) , 0.0164 ) st = nC4 ( T = 160 , P = 2e5 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 711.7 ) self . assertEqual ( round ( st . rhoM , 2 ) , 12.24 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 19720 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 19700 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 153.4 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 87.36 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 116.9 ) self . assertEqual ( round ( st . w , 0 ) , 1562 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 1060 ) self . assertEqual ( round ( st . k , 3 ) , 0.182 ) st = nC4 ( T = 520 , P = 3e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 4.088 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.07033 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 42850 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 47110 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 369.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 144.7 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 153.6 ) self . assertEqual ( round ( st . w , 1 ) , 277.2 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 12.9 ) self . assertEqual ( round ( st . k , 4 ) , 0.0463 ) st = nC4 ( T = 320 , P = 4e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 9.720 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.1672 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 18190 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 20580 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 303.6 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 98.83 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 112.4 ) self . assertEqual ( round ( st . w , 1 ) , 203.9 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 8.24 ) self . assertEqual ( round ( st . k , 4 ) , 0.0190 ) st = nC4 ( T = 300 , P = 5e5 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 570.9 ) self . assertEqual ( round ( st . rhoM , 3 ) , 9.822 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , - 2145 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , - 2094 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 231.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 101.3 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 142.9 ) self . assertEqual ( round ( st . w , 1 ) , 888.9 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 157 ) self . assertEqual ( round ( st . k , 3 ) , 0.106 ) st = nC4 ( T = 160 , P = 6e5 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 712.0 ) self . assertEqual ( round ( st . rhoM , 2 ) , 12.25 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 19730 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 19680 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 153.3 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 87.37 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 116.8 ) self . assertEqual ( round ( st . w , 0 ) , 1564 ) self . assertEqual ( round ( st . mu . muPas , - 1 ) , 1060 ) self . assertEqual ( round ( st . k , 3 ) , 0.182 ) st = nC4 ( T = 345 , P = 8e5 , ** kw ) self . assertEqual ( round ( st . rho , 2 ) , 19.48 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.3351 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 20160 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 22550 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 304.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 107.1 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 126.0 ) self . assertEqual ( round ( st . w , 1 ) , 197.0 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 9.14 ) self . assertEqual ( round ( st . k , 4 ) , 0.0225 ) st = nC4 ( T = 340 , P = 1e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 520.3 ) self . assertEqual ( round ( st . rhoM , 3 ) , 8.951 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 3818 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 3930 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 250.1 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 110.6 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 158.6 ) self . assertEqual ( round ( st . w , 1 ) , 669.6 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 108 ) self . assertEqual ( round ( st . k , 4 ) , 0.0915 ) st = nC4 ( T = 385 , P = 2e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 444.5 ) self . assertEqual ( round ( st . rhoM , 3 ) , 7.648 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 11390 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 11650 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 271.1 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 122.6 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 192.5 ) self . assertEqual ( round ( st . w , 1 ) , 410.9 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 67.2 ) self . assertEqual ( round ( st . k , 4 ) , 0.0757 ) st = nC4 ( T = 415 , P = 3e6 , ** kw ) self . assertEqual ( round ( st . rho , 2 ) , 89.39 ) self . assertEqual ( round ( st . rhoM , 3 ) , 1.538 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 25160 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 27110 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 308.8 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 132.2 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 231.4 ) self . assertEqual ( round ( st . w , 1 ) , 151.2 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 13.2 ) self . assertEqual ( round ( st . k , 4 ) , 0.0381 ) st = nC4 ( T = 160 , P = 4e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 713.8 ) self . assertEqual ( round ( st . rhoM , 2 ) , 12.28 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 19780 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 19460 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 153.0 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 87.41 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 116.7 ) self . assertEqual ( round ( st . w , 0 ) , 1579 ) self . assertEqual ( round ( st . mu . muPas , - 1 ) , 1100 ) self . assertEqual ( round ( st . k , 3 ) , 0.183 ) st = nC4 ( T = 468 , P = 5e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 130.0 ) self . assertEqual ( round ( st . rhoM , 3 ) , 2.237 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 31000 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 33240 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 320.2 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 143.3 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 222.4 ) self . assertEqual ( round ( st . w , 1 ) , 173.5 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 16.3 ) self . assertEqual ( round ( st . k , 4 ) , 0.0525 ) st = nC4 ( T = 600 , P = 6e6 , ** kw ) self . assertEqual ( round ( st . rho , 2 ) , 82.44 ) self . assertEqual ( round ( st . rhoM , 3 ) , 1.418 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 52680 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 56910 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 363.7 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 163.8 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 184.0 ) self . assertEqual ( round ( st . w , 1 ) , 266.2 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 17.3 ) self . assertEqual ( round ( st . k , 4 ) , 0.0664 ) st = nC4 ( T = 400 , P = 8e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 457.7 ) self . assertEqual ( round ( st . rhoM , 3 ) , 7.874 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 12860 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 13870 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 274.8 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 125.0 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 177.2 ) self . assertEqual ( round ( st . w , 1 ) , 506.4 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 73.9 ) self . assertEqual ( round ( st . k , 4 ) , 0.0802 ) st = nC4 ( T = 555 , P = 1e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 183.3 ) self . assertEqual ( round ( st . rhoM , 3 ) , 3.154 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 42540 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 45720 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 341.0 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 158.1 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 203.8 ) self . assertEqual ( round ( st . w , 1 ) , 244.0 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 21.8 ) self . assertEqual ( round ( st . k , 4 ) , 0.0730 ) st = nC4 ( T = 200 , P = 2e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 686.9 ) self . assertEqual ( round ( st . rhoM , 2 ) , 11.82 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 15470 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 13780 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 177.3 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 86.14 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 117.2 ) self . assertEqual ( round ( st . w , 0 ) , 1501 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 578 ) self . assertEqual ( round ( st . k , 3 ) , 0.158 ) st = nC4 ( T = 500 , P = 3e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 434.0 ) self . assertEqual ( round ( st . rhoM , 3 ) , 7.466 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 27120 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 31140 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 306.8 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 145.5 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 181.6 ) self . assertEqual ( round ( st . w , 1 ) , 601.2 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 67.5 ) self . assertEqual ( round ( st . k , 4 ) , 0.0877 ) st = nC4 ( T = 300 , P = 5e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 627.2 ) self . assertEqual ( round ( st . rhoM , 2 ) , 10.79 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , - 4102 ) self . assertEqual ( round ( st . hM . kJkmol , 1 ) , 531.8 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 224.3 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 103.3 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 133.7 ) self . assertEqual ( round ( st . w , 0 ) , 1271 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 251 ) self . assertEqual ( round ( st . k , 3 ) , 0.130 ) st = nC4 ( T = 600 , P = 7e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 460.9 ) self . assertEqual ( round ( st . rhoM , 3 ) , 7.930 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 41790 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 50620 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 332.8 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 164.5 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 190.6 ) self . assertEqual ( round ( st . w , 1 ) , 823.3 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 79.6 ) self . assertEqual ( round ( st . k , 3 ) , 0.108 )  def test_shortSpan ( self ) :          st = nC4 ( T = 700 , rho = 200 , eq = <str> ) self . assertEqual ( round ( st . cp0 . kJkgK , 4 ) , 3.2176 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 18.416 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.5758 ) st2 = nC4 ( T = 750 , rho = 100 , eq = <str> ) self . assertEqual ( round ( st2 . h . kJkg - st . h . kJkg , 2 ) , 213.78 ) self . assertEqual ( round ( st2 . s . kJkgK - st . s . kJkgK , 5 ) , 0.37465 )  def test_herrmann ( self ) :          self . assertEqual ( round ( nC4 ( T = 136 , rho = 735 ) . mu . muPas , 3 ) , 2310.306 ) self . assertEqual ( round ( nC4 ( T = 300 , rho = 1 ) . mu . muPas , 6 ) , 7.440574 ) self . assertEqual ( round ( nC4 ( T = 300 , rho = 6 ) . mu . muPas , 6 ) , 7.382406 ) self . assertEqual ( round ( nC4 ( T = 300 , rho = 575 ) . mu . muPas , 4 ) , 162.2565 ) self . assertEqual ( round ( nC4 ( T = 300 , rho = 640 ) . mu . muPas , 4 ) , 290.5562 ) self . assertEqual ( round ( nC4 ( T = 400 , rho = 1 ) . mu . muPas , 6 ) , 9.860115 ) self . assertEqual ( round ( nC4 ( T = 400 , rho = 70 ) . mu . muPas , 5 ) , 11.25890 ) self . assertEqual ( round ( nC4 ( T = 400 , rho = 410 ) . mu . muPas , 5 ) , 56.96791 ) self . assertEqual ( round ( nC4 ( T = 400 , rho = 570 ) . mu . muPas , 4 ) , 153.0508 ) self . assertEqual ( round ( nC4 ( T = 425.125 , rho = 228 ) . mu . muPas , 5 ) , 24.84327 ) self . assertEqual ( round ( nC4 ( T = 500 , rho = 1 ) . mu . muPas , 5 ) , 12.20820 ) self . assertEqual ( round ( nC4 ( T = 500 , rho = 100 ) . mu . muPas , 5 ) , 15.51795 ) self . assertEqual ( round ( nC4 ( T = 500 , rho = 500 ) . mu . muPas , 5 ) , 96.94796 ) self . assertEqual ( round ( nC4 ( T = 650 , rho = 1 ) . mu . muPas , 5 ) , 15.62218 ) self . assertEqual ( round ( nC4 ( T = 650 , rho = 100 ) . mu . muPas , 5 ) , 19.43536 ) self . assertEqual ( round ( nC4 ( T = 650 , rho = 475 ) . mu . muPas , 5 ) , 86.78013 )    