from numpy import zeros from lib import config from lib . sql import databank EoSBIP = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] def Kij ( ids , EOS = None ) :      if EOS is None or EOS not in EoSBIP :          kij = zeros ( ( len ( ids ) , len ( ids ) ) ) return kij  if EOS in [ <str> , <str> , <str> , <str> ] :          kij = [ ] query = <str> % EOS for i in ids :              kiji = [ ] for j in ids :                  i_ = min ( i , j ) j_ = max ( i , j ) databank . execute ( query , ( i_ , j_ ) ) k = databank . fetchone ( ) if k :                      kiji . append ( float ( k [ 0 ] ) )  else :                      kiji . append ( 0 )   kij . append ( kiji )  return kij  else :          kij = [ ] query = <str> % EOS for i in ids :              kiji = [ ] for j in ids :                  i_ = min ( i , j ) j_ = max ( i , j ) databank . execute ( query , ( i_ , j_ ) ) k = databank . fetchone ( ) if i == i_ and k :                      kiji . append ( float ( k [ 3 ] ) )  elif k :                      kiji . append ( float ( k [ 4 ] ) )  else :                      kiji . append ( 0 )   kij . append ( kiji )  if EOS == <str> :              alpha = [ ] query = <str> for i in ids :                  alphai = [ ] for j in ids :                      i_ = min ( i , j ) j_ = max ( i , j ) databank . execute ( query , ( i_ , j_ ) ) a = databank . fetchone ( ) if a :                          alphai . append ( float ( a [ 0 ] ) )  else :                          alphai . append ( 0 )   alpha . append ( alphai )  return kij , alpha  else :              return kij    def Mix_vdW1f ( xi , parameters , kij ) :      ai = parameters [ 0 ] bi = parameters [ 1 : ] a = 0 for x_i , a_i , kiji in zip ( xi , ai , kij ) :          for x_j , a_j , k in zip ( xi , ai , kiji ) :              a += x_i * x_j * ( a_i * a_j ) ** 0.5 * ( 1 - k )   b = [ ] for b_i in bi :          suma = 0 for x_i , bii in zip ( xi , b_i ) :              suma += x_i * bii  b . append ( suma )  return tuple ( [ a ] + b )  def Mix_Stryjek_Vera ( self , parameters , kij ) :      ai = parameters [ 0 ] bi = parameters [ 1 : ] b = [ 0 ] * len ( bi ) a = 0 for i in range ( len ( self . componente ) ) :          for j in range ( len ( bi ) ) :              b [ j ] += self . fraccion [ i ] * bi [ j ] [ i ]  for j in range ( len ( self . componente ) ) :              if kij [ i ] [ j ] == 0 and kij [ j ] [ i ] == 0 :                  k = 0.  else :                  k = kij [ i ] [ j ] * kij [ j ] [ i ] / ( self . fraccion [ i ] * kij [ i ] [ j ] + self . fraccion [ j ] * kij [ j ] [ i ] )  a += self . fraccion [ i ] * self . fraccion [ j ] * ( ai [ i ] * ai [ j ] ) ** 0.5 * ( 1 - k )   return tuple ( [ a ] + b )  def Mix_Panagiotopoulos ( parameters , kij ) :      ai = parameters [ 0 ] bi = parameters [ 1 : ] b = [ 0 ] * len ( bi ) a = 0 for i in range ( len ( self . componente ) ) :          for j in range ( len ( bi ) ) :              b [ j ] += self . fraccion [ i ] * bi [ j ] [ i ]  for j in range ( len ( self . componente ) ) :              a += self . fraccion [ i ] * self . fraccion [ j ] * ( ai [ i ] * ai [ j ] ) ** 0.5 * ( 1 - kij [ i ] [ j ] + ( kij [ i ] [ j ] - kij [ j ] [ i ] ) * self . fraccion [ i ] )   return tuple ( [ a ] + b )  def Mix_Melhem ( parameters , kij ) :      ai = parameters [ 0 ] bi = parameters [ 1 : ] b = [ 0 ] * len ( bi ) a = 0 for i in range ( len ( self . componente ) ) :          for j in range ( len ( bi ) ) :              b [ j ] += self . fraccion [ i ] * bi [ j ] [ i ]  for j in range ( len ( self . componente ) ) :              a += self . fraccion [ i ] * self . fraccion [ j ] * ( ai [ i ] * ai [ j ] ) ** 0.5 * ( 1 - kij [ i ] [ j ] + ( kij [ i ] [ j ] - kij [ j ] [ i ] ) * self . fraccion [ i ] / ( self . fraccion [ i ] + self . fraccion [ j ] ) )   return tuple ( [ a ] + b )  mixing = [ Mix_vdW1f , Mix_Stryjek_Vera , Mix_Panagiotopoulos , Mix_Melhem ] conf = config . getMainWindowConfig ( ) . getint ( <str> , <str> ) Mixing_Rule = mixing [ conf ]  