import os from PyQt5 import QtCore , QtGui , QtWidgets from UI . widgets import createAction class TextEditor ( QtWidgets . QWidget ) :      textChanged = QtCore . pyqtSignal ( str , str ) def __init__ ( self , texto = <str> , parent = None ) :          super ( TextEditor , self ) . __init__ ( parent ) self . texto = texto self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout = QtWidgets . QVBoxLayout ( self ) toolbar = QtWidgets . QToolBar ( ) toolbar . setIconSize ( QtCore . QSize ( 16 , 16 ) ) gridLayout . addWidget ( toolbar ) self . fontComboBox = QtWidgets . QFontComboBox ( ) self . fontComboBox . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . fontComboBox . activated [ str ] . connect ( self . font ) toolbar . addWidget ( self . fontComboBox ) self . FontColor = QtWidgets . QPushButton ( ) self . FontColor . setFixedSize ( 22 , 22 ) self . FontColor . setPalette ( QtGui . QPalette ( QtGui . QColor ( <str> ) ) ) self . FontColor . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . FontColor . clicked . connect ( self . colordialog ) toolbar . addWidget ( self . FontColor ) self . FontSize = QtWidgets . QComboBox ( ) for i in QtGui . QFontDatabase . standardSizes ( ) :              self . FontSize . addItem ( str ( i ) )  self . FontSize . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . FontSize . activated [ str ] . connect ( self . PointSize ) toolbar . addWidget ( self . FontSize ) self . actionNegrita = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Negrita , checkable = True ) toolbar . addAction ( self . actionNegrita ) self . actionCursiva = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Cursiva , checkable = True ) toolbar . addAction ( self . actionCursiva ) self . actionSubrayado = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Subrayado , checkable = True ) toolbar . addAction ( self . actionSubrayado ) self . actionTachado = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Tachado , checkable = True ) toolbar . addAction ( self . actionTachado ) self . actionSuperScript = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Superindice , checkable = True ) toolbar . addAction ( self . actionSuperScript ) self . actionSubScript = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Subindice , checkable = True ) toolbar . addAction ( self . actionSubScript ) toolbar . addSeparator ( ) self . actionAlinearIzquierda = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . izquierda , checkable = True ) toolbar . addAction ( self . actionAlinearIzquierda ) self . actionCentrar = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . centrar , checkable = True ) toolbar . addAction ( self . actionCentrar ) self . actionJustificar = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . justificar , checkable = True ) toolbar . addAction ( self . actionJustificar ) self . actionAlinearDerecha = createAction ( icon = os . path . join ( <str> , <str> ) , text = QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . derecha , checkable = True ) toolbar . addAction ( self . actionAlinearDerecha ) self . notas = QtWidgets . QTextEdit ( texto ) self . notas . setMinimumWidth ( 450 ) self . notas . textChanged . connect ( self . setText ) self . notas . cursorPositionChanged . connect ( self . updateUI ) gridLayout . addWidget ( self . notas ) group = QtWidgets . QActionGroup ( self ) group . addAction ( self . actionAlinearIzquierda ) group . addAction ( self . actionCentrar ) group . addAction ( self . actionJustificar ) group . addAction ( self . actionAlinearDerecha ) self . notas . setFocus ( ) self . PointSize ( <str> ) self . FontSize . setCurrentIndex ( self . FontSize . findText ( <str> ) ) self . font ( self . fontComboBox . currentFont ( ) . family ( ) )  def setText ( self , texto = None ) :          if texto :              self . notas . setHtml ( texto )  else :              texto = self . notas . toHtml ( ) self . textChanged . emit ( texto , self . notas . toPlainText ( ) )  self . texto = texto  def MergeFormat ( self , format ) :          cursor = self . notas . textCursor ( ) if not cursor . hasSelection ( ) :              cursor . select ( QtGui . QTextCursor . Document )  cursor . mergeCharFormat ( format ) self . notas . mergeCurrentCharFormat ( format )  def font ( self , family ) :          format = QtGui . QTextCharFormat ( ) format . setFontFamily ( family ) self . MergeFormat ( format )  def izquierda ( self ) :          self . notas . setAlignment ( QtCore . Qt . AlignLeft | QtCore . Qt . AlignAbsolute )  def centrar ( self ) :          self . notas . setAlignment ( QtCore . Qt . AlignHCenter )  def derecha ( self ) :          self . notas . setAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignAbsolute )  def justificar ( self ) :          self . notas . setAlignment ( QtCore . Qt . AlignJustify )  def PointSize ( self , size ) :          puntos = int ( size ) if puntos > 0 :              format = QtGui . QTextCharFormat ( ) format . setFontPointSize ( puntos ) self . MergeFormat ( format )   def Negrita ( self ) :          format = QtGui . QTextCharFormat ( ) if self . actionNegrita . isChecked ( ) :              format . setFontWeight ( QtGui . QFont . Bold )  else :              format . setFontWeight ( QtGui . QFont . Normal )  self . MergeFormat ( format )  def Cursiva ( self ) :          format = QtGui . QTextCharFormat ( ) format . setFontItalic ( self . actionCursiva . isChecked ( ) ) self . MergeFormat ( format )  def Subrayado ( self ) :          format = QtGui . QTextCharFormat ( ) format . setFontUnderline ( self . actionSubrayado . isChecked ( ) ) self . MergeFormat ( format )  def Tachado ( self ) :          format = QtGui . QTextCharFormat ( ) format . setFontStrikeOut ( self . actionTachado . isChecked ( ) ) self . MergeFormat ( format )  def Superindice ( self ) :          if self . actionSubScript . isChecked ( ) :              self . actionSubScript . blockSignals ( True ) self . actionSubScript . setChecked ( False ) self . actionSubScript . blockSignals ( False )  format = QtGui . QTextCharFormat ( ) if self . actionSuperScript . isChecked ( ) :              format . setVerticalAlignment ( QtGui . QTextCharFormat . AlignSuperScript )  else :              format . setVerticalAlignment ( QtGui . QTextCharFormat . AlignNormal )  self . MergeFormat ( format )  def Subindice ( self ) :          if self . actionSuperScript . isChecked ( ) :              self . actionSuperScript . blockSignals ( True ) self . actionSuperScript . setChecked ( False ) self . actionSuperScript . blockSignals ( False )  format = QtGui . QTextCharFormat ( ) if self . actionSubScript . isChecked ( ) :              format . setVerticalAlignment ( QtGui . QTextCharFormat . AlignSubScript )  else :              format . setVerticalAlignment ( QtGui . QTextCharFormat . AlignNormal )  self . MergeFormat ( format )  def updateUI ( self ) :          self . fontComboBox . setCurrentIndex ( self . fontComboBox . findText ( self . notas . fontFamily ( ) ) ) self . FontColor . setPalette ( QtGui . QPalette ( self . notas . textColor ( ) ) ) self . FontSize . setCurrentIndex ( self . FontSize . findText ( str ( int ( self . notas . fontPointSize ( ) ) ) ) ) self . actionNegrita . setChecked ( self . notas . fontWeight ( ) == QtGui . QFont . Bold ) self . actionCursiva . setChecked ( self . notas . fontItalic ( ) ) self . actionSubrayado . setChecked ( self . notas . fontUnderline ( ) ) format = self . notas . currentCharFormat ( ) self . actionTachado . setChecked ( format . fontStrikeOut ( ) ) self . actionSuperScript . setChecked ( False ) self . actionSubScript . setChecked ( False ) if format . verticalAlignment ( ) == QtGui . QTextCharFormat . AlignSuperScript :              self . actionSuperScript . setChecked ( True )  elif format . verticalAlignment ( ) == QtGui . QTextCharFormat . AlignSubScript :              self . actionSubScript . setChecked ( True )  self . actionAlinearIzquierda . setChecked ( self . notas . alignment ( ) == QtCore . Qt . AlignLeft ) self . actionCentrar . setChecked ( self . notas . alignment ( ) == QtCore . Qt . AlignHCenter ) self . actionJustificar . setChecked ( self . notas . alignment ( ) == QtCore . Qt . AlignJustify ) self . actionAlinearDerecha . setChecked ( self . notas . alignment ( ) == QtCore . Qt . AlignRight )  def colordialog ( self ) :          dialog = QtWidgets . QColorDialog ( self . notas . textColor ( ) , self ) if dialog . exec_ ( ) :              self . FontColor . setPalette ( QtGui . QPalette ( dialog . currentColor ( ) ) ) self . notas . setTextColor ( dialog . currentColor ( ) ) format = QtGui . QTextCharFormat ( ) format . setForeground ( dialog . currentColor ( ) ) self . MergeFormat ( format )    if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) Form = TextEditor ( <str> ) Form . show ( ) sys . exit ( app . exec_ ( ) )   