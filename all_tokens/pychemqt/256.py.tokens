import os from PyQt5 import QtCore , QtGui , QtWidgets try :      import ezodf  except :      pass  from UI . widgets import PathConfig , Tabla from equipment . parents import UI_equip from equipment . spreadsheet import Spreadsheet class TableDelegate ( QtWidgets . QItemDelegate ) :      def __init__ ( self , owner , items = None ) :          super ( TableDelegate , self ) . __init__ ( owner ) if not items :              items = { } for ind in range ( 4 ) :                  items [ ind ] = [ ]   self . setItems ( items )  def setItems ( self , items ) :          self . items = items  def setItemsByIndex ( self , index , items ) :          self . items [ index ] = items  def createEditor ( self , parent , option , index ) :          if index . column ( ) < 4 :              self . editor = QtWidgets . QComboBox ( parent ) self . editor . addItems ( self . items [ index . column ( ) ] )  else :              self . editor = QtWidgets . QLineEdit ( parent ) regExp = QtCore . QRegExp ( <str> ) validator = QtGui . QRegExpValidator ( regExp ) self . editor . setValidator ( validator )  return self . editor  def setEditorData ( self , editor , index ) :          value = index . data ( QtCore . Qt . DisplayRole ) if index . column ( ) < 4 :              try :                  num = self . items [ index . column ( ) ] . index ( value )  except ValueError :                  num = - 1  editor . setCurrentIndex ( num )  else :              editor . setText ( value )   def setModelData ( self , editor , model , index ) :          if index . column ( ) < 4 :              value = editor . currentText ( )  else :              value = editor . text ( ) . upper ( )  model . setData ( index , QtCore . QVariant ( value ) , QtCore . Qt . DisplayRole )   class UI_equipment ( UI_equip ) :      Equipment = Spreadsheet ( ) def __init__ ( self , equipment = None , project = None , parent = None ) :          super ( ) . __init__ ( Spreadsheet , entrada = True , salida = True , calculo = False , parent = parent ) self . project = project layout = QtWidgets . QGridLayout ( self . Entrada ) label = QtWidgets . QApplication . translate ( <str> , <str> ) + <str> msg = QtWidgets . QApplication . translate ( <str> , <str> ) patrones = [ ] if os . environ [ <str> ] :              patrones . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  if os . environ [ <str> ] :              patrones . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  if os . environ [ <str> ] :              patrones . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  patron = <str> . join ( patrones ) self . filename = PathConfig ( label , msg = msg , patron = patron ) self . filename . valueChanged . connect ( self . changeSpreadsheet ) layout . addWidget ( self . filename , 1 , 1 ) header = [ QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] self . datamap = Tabla ( 5 , filas = 1 , dinamica = True , horizontalHeader = header , verticalHeader = False , orientacion = QtCore . Qt . AlignLeft , delegate = None , delegateforRow = TableDelegate , parent = self ) self . datamap . setEnabled ( False ) self . datamap . cellChanged . connect ( self . cellChanged ) self . datamap . rowFinished . connect ( self . addRow ) layout . addWidget ( self . datamap , 2 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 1 ) entitys = [ ] for stream in list ( self . project . streams . keys ( ) ) :              entitys . append ( <str> % stream )  for equip in list ( self . project . items . keys ( ) ) :              if equip [ 0 ] == <str> :                  entitys . append ( equip )   self . datamap . itemDelegateForRow ( 0 ) . setItemsByIndex ( 0 , entitys ) self . entitys = entitys if equipment :              self . setEquipment ( equipment )   def changeSpreadsheet ( self , path ) :          self . datamap . setEnabled ( bool ( path ) ) self . changeParams ( <str> , str ( path ) ) self . datamap . blockSignals ( True ) self . datamap . clear ( ) self . datamap . blockSignals ( False ) spreadsheet = ezodf . opendoc ( path ) sheets = [ name for name in spreadsheet . sheets . names ( ) ] self . datamap . itemDelegateForRow ( 0 ) . setItemsByIndex ( 3 , sheets )  def rellenarInput ( self ) :          self . blockSignals ( True ) self . datamap . itemDelegateForRow ( self . datamap . rowCount ( ) - 1 ) . setItemsByIndex ( 0 , self . entitys ) if self . Equipment . status :              self . datamap . setEnabled ( True ) self . filename . setText ( self . Equipment . kwargs [ <str> ] ) self . datamap . itemDelegateForRow ( 0 ) . setItemsByIndex ( 3 , self . Equipment . sheets )  self . datamap . blockSignals ( True ) self . datamap . clear ( ) if self . Equipment . kwargs [ <str> ] :              for i , data in enumerate ( self . Equipment . kwargs [ <str> ] ) :                  self . datamap . addRow ( ) self . datamap . itemDelegateForRow ( i ) . setItemsByIndex ( 0 , self . entitys ) self . datamap . itemDelegateForRow ( i ) . setItemsByIndex ( 3 , self . Equipment . sheets ) self . datamap . setItem ( i , 0 , QtWidgets . QTableWidgetItem ( data [ <str> ] ) ) self . datamap . setItem ( i , 1 , QtWidgets . QTableWidgetItem ( data [ <str> ] ) ) self . datamap . setItem ( i , 2 , QtWidgets . QTableWidgetItem ( data [ <str> ] ) ) self . datamap . setItem ( i , 3 , QtWidgets . QTableWidgetItem ( data [ <str> ] ) ) self . datamap . setItem ( i , 4 , QtWidgets . QTableWidgetItem ( data [ <str> ] ) )  self . datamap . itemDelegateForRow ( self . datamap . rowCount ( ) - 1 ) . setItemsByIndex ( 0 , self . entitys ) self . datamap . itemDelegateForRow ( self . datamap . rowCount ( ) - 1 ) . setItemsByIndex ( 3 , self . Equipment . sheets )  self . datamap . blockSignals ( False ) self . blockSignals ( False )  def rellenar ( self ) :          self . rellenarInput ( ) self . status . setState ( self . Equipment . status , self . Equipment . msg )  def cellChanged ( self , i , j ) :          obj = self . project . getObject ( str ( self . datamap . item ( i , 0 ) . text ( ) ) ) properties = [ prop [ 0 ] for prop in obj . propertiesNames ( ) ] if j == 0 :              self . datamap . itemDelegateForRow ( i ) . setItemsByIndex ( 1 , properties ) editor = QtWidgets . QComboBox ( ) editor . addItems ( self . datamap . itemDelegateForRow ( i ) . items [ 1 ] ) self . datamap . setColumnWidth ( 1 , editor . sizeHint ( ) . width ( ) )  elif j == 1 :              value = self . datamap . item ( i , 1 ) . text ( ) ind = properties . index ( value ) if obj . propertiesUnit ( ) [ ind ] == str :                  self . datamap . itemDelegateForRow ( i ) . setItemsByIndex ( 2 , [ <str> ] ) self . datamap . item ( i , 2 ) . setText ( <str> )  else :                  self . datamap . itemDelegateForRow ( i ) . setItemsByIndex ( 2 , obj . propertiesNames ( ) [ ind ] [ 2 ] . __text__ )   elif j == 3 :              self . datamap . item ( i , 4 ) . setText ( <str> )   def addRow ( self , fila ) :          datamap = self . Equipment . kwargs [ <str> ] [ : ] data = { } data [ <str> ] = str ( fila [ 0 ] ) data [ <str> ] = str ( fila [ 1 ] ) data [ <str> ] = str ( fila [ 2 ] ) data [ <str> ] = str ( fila [ 3 ] ) data [ <str> ] = str ( fila [ 4 ] ) datamap . append ( data ) self . changeParams ( <str> , datamap )   if __name__ == <str> :      import sys from lib . corriente import Corriente from lib . project import Project from equipment . heatExchanger import Hairpin project = Project ( ) project . addItem ( <str> , Corriente ( ) ) project . addItem ( <str> , Corriente ( ) ) Cambiador = Hairpin ( ) project . addItem ( <str> , Cambiador ) project . addStream ( 1 , <str> , <str> , ind_down = 0 ) project . addStream ( 2 , <str> , <str> , ind_down = 1 ) project . addItem ( <str> , Corriente ( ) ) project . addStream ( 3 , <str> , <str> , ind_up = 0 ) project . addItem ( <str> , Corriente ( ) ) project . addStream ( 4 , <str> , <str> , ind_up = 1 ) caliente = Corriente ( T = 140 + 273.15 , P = 361540. , caudalMasico = 1.36 , ids = [ 62 ] , fraccionMolar = [ 1. ] ) project . setInput ( 1 , caliente ) spreadsheet = Spreadsheet ( filename = <str> , project = project ) app = QtWidgets . QApplication ( sys . argv ) dialogo = UI_equipment ( spreadsheet , project = project ) dialogo . show ( ) sys . exit ( app . exec_ ( ) )   