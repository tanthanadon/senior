import atexit from PyQt5 import QtCore , QtWidgets from tools . firstrun import which class XTerm ( QtCore . QProcess ) :      def __init__ ( self , config , parent = None ) :          super ( XTerm , self ) . __init__ ( parent ) self . config = config atexit . register ( self . kill ) self . show_term ( )  def sizeHint ( self ) :          size = QtCore . QSize ( 400 , 300 ) return size . expandedTo ( QtWidgets . QApplication . globalStrut ( ) )  def show_term ( self ) :          term = self . config . get ( <str> , <str> ) args = [ <str> , self . config . get ( <str> , <str> ) , <str> , self . config . get ( <str> , <str> ) , <str> , <str> , QtWidgets . QApplication . translate ( <str> , <str> ) ] if self . config . getboolean ( <str> , <str> ) :              args . append ( <str> )  if self . config . getboolean ( <str> , <str> ) and which ( <str> ) :              args . append ( <str> )  else :              args . append ( <str> )  self . start ( term , args ) if self . error ( ) == QtCore . QProcess . FailedToStart :              print ( <str> )    if __name__ == <str> :      import sys from configparser import ConfigParser import os app = QtWidgets . QApplication ( sys . argv ) conf_dir = os . path . expanduser ( <str> ) + <str> pychemqt_dir = os . environ [ <str> ] + <str> preferences = ConfigParser ( ) preferences . read ( conf_dir + <str> ) terminal = XTerm ( preferences ) app . exec_ ( )   