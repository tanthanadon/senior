from unittest import TestCase from lib import unidades from lib . meos import MEoS class R143a ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 431.00006645 ) Tc = unidades . Temperature ( 345.857 ) Pc = unidades . Pressure ( 3761.0 , <str> ) M = 84.041 Tt = unidades . Temperature ( 161.34 ) Tb = unidades . Temperature ( 225.909 ) f_acent = 0.2615 momentoDipolar = unidades . DipoleMoment ( 2.34 , <str> ) id = 243 Fi1 = { <str> : [ 1 , - 1 ] , <str> : [ 0 , 1 , - 0.33 ] , <str> : [ 5.903087 , 7.307253 , - 16.59105 ] , <str> : [ 4.4402 , 3.7515 ] , <str> : [ 1791 / Tc , 823 / Tc ] } Fi2 = { <str> : 8.31451 , <str> : [ 1 , - 0.8999794 ] , <str> : [ 0 , 1 , - 1.5 , 1.25 , - 1 ] , <str> : [ - 5.556942 , 8.93748 , 1.652398 , - 0.6827433 , - 8.113464 ] , <str> : [ ] , <str> : [ ] } CP1 = { <str> : 1.838736 , <str> : [ 3.01994e-2 , - 1.78455e-5 , 4.42442e-9 ] , <str> : [ 1 , 2 , 3 ] , <str> : [ ] , <str> : [ ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : { <str> : 273.15 , <str> : 1. , <str> : 33936.4 , <str> : 198.961 } , <str> : Tt , <str> : 650.0 , <str> : 100000.0 , <str> : 15.85 , <str> : [ .77736443e1 , - .870185e1 , - .27779799 , .1460922 , .89581616e-2 ] , <str> : [ 1 , 1 , 1 , 2 , 5 ] , <str> : [ 0.67 , 0.833 , 1.7 , 1.82 , 0.35 ] , <str> : [ - 0.20552116 , 0.10653258 , 0.23270816e-1 , - 0.13247542e-1 , - 0.42793870e-1 , 0.36221685 , - 0.25671899 , - 0.92326113e-1 , 0.83774837e-1 , 0.17128445e-1 , - 0.17256110e-1 , 0.49080492e-2 ] , <str> : [ 1 , 3 , 5 , 7 , 1 , 2 , 2 , 3 , 4 , 2 , 3 , 5 ] , <str> : [ 3.9 , 0.95 , 0 , 1.19 , 7.2 , 5.9 , 7.65 , 7.5 , 7.45 , 15.5 , 22 , 19 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 ] , <str> : [ 1 ] * 12 } outcalt = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : 84.041 , <str> : 346.04 , <str> : 3775.6 , <str> : 5.151118 , <str> : CP1 , <str> : <str> , <str> : Tt , <str> : 500.0 , <str> : 60000.0 , <str> : 15.84 , <str> : [ None , - 0.240561786316e-1 , 0.262345913719e1 , - 0.650858041394e2 , 0.995952053681e4 , - 0.147536464961e7 , 0.135498153308e-2 , - 0.281726617426e1 , 0.134371062574e4 , 0.850286316514e6 , - 0.180516636446e-3 , 0.618889066246 , - 0.223083798271e3 , - 0.119095922349e-1 , - 0.173933336877e1 , - 0.420847601180e3 , 0.213502079796 , - 0.565708555185e-2 , 0.185442296800e1 , - 0.520377059921e-1 , - 0.846735696108e6 , - 0.207964483848e8 , - 0.349977290513e5 , 0.576427827667e9 , - 0.389131863941e3 , 0.103074054089e5 , - 0.447627052215e1 , - 0.106673161101e6 , - 0.219511369081e-1 , 0.642186519493e1 , - 0.938317030843e-4 , - 0.478594713528e-1 , - 0.206555883874e1 ] } li = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi2 , <str> : <str> , <str> : 345.86 , <str> : 434 / M , <str> : Tt , <str> : 650.0 , <str> : 50000.0 , <str> : 15.84 , <str> : [ 0.01606645 , 4.163515 , - 5.031058 , - 0.01920208 , 0.001470093 ] , <str> : [ 5 , 1 , 1 , 2 , 4 ] , <str> : [ 0 , 0.5 , 0.75 , 2.5 , 2.5 ] , <str> : [ 0.1775429 , - 0.7316069e-2 , - 0.9555916e-1 , - 0.5822518 , - 0.4211022e-3 , - 0.2059847e-1 , 0.3711325e-1 , 0.1799723e-3 , - 0.4145922e-1 , 0.7682566e-4 , - 0.2089695e-2 , 0.1958633e-2 , - 0.3198325e-5 , - 0.5376561e-2 ] , <str> : [ 3 , 8 , 3 , 1 , 10 , 1 , 4 , 8 , 2 , 12 , 8 , 2 , 5 , 3 ] , <str> : [ 0.25 , 0.25 , 2 , 3 , 3 , 8 , 8 , 8 , 10 , 8 , 17 , 20 , 35 , 27 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 ] , <str> : [ 1 ] * 14 } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi2 , <str> : <str> , <str> : 80.04 , <str> : 345.86 , <str> : 3764 , <str> : 434.1 / 80.04 , <str> : Tt , <str> : 600.0 , <str> : 100000.0 , <str> : 15.82 , <str> : [ 1.0306886 , - 2.9497307 , 0.6943523 , 0.071552102 , 1.9155982e-4 ] , <str> : [ 1 , 1 , 1 , 3 , 7 ] , <str> : [ 0.25 , 1.25 , 1.5 , 0.25 , 0.875 ] , <str> : [ 0.79764936e-1 , 0.56859424 , - 0.90946566e-2 , - 0.24199452 , - 0.70610813e-1 , - 0.75041709e-1 , - 0.16411241e-1 ] , <str> : [ 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 2.375 , 2 , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 7 } eq = lemmon , outcalt , li , shortSpan _PR = [ 0.0889 , - 22.5000 ] _surface = { <str> : [ 0.05416 ] , <str> : [ 1.255 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.73938e1 , 0.19948e1 , - 0.18487e1 , - 0.41927e1 , 0.14862e1 ] , <str> : [ 1.0 , 1.5 , 2.2 , 4.8 , 6.2 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.21135e1 , 0.10200e2 , - 0.30836e2 , 0.39909e2 , - 0.18557e2 ] , <str> : [ 0.348 , 1.6 , 2.0 , 2.4 , 2.7 ] } _vapor_Density = { <str> : 2 , <str> : [ - 2.8673 , - 6.3818 , - 16.314 , - 45.947 , - 1.3956 , - 246.71 ] , <str> : [ 0.384 , 1.17 , 3.0 , 6.2 , 7.0 , 15.0 ] }  class Test ( TestCase ) :      def test_lemmon ( self ) :          st = R143a ( T = R143a . Tt , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.00107 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1330.5 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 52.520 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 5 ) , 0.31417 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8138 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.211 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1058.1 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.06754 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 319.59 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.9695 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.5283 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.6299 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 137.6 ) st = R143a ( T = - 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.08874 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1173.9 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 130.05 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 5 ) , 0.71968 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8608 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.318 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 763.9 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 4.2098 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 358.58 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7438 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.7046 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.8331 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 154.2 ) st = R143a ( T = 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.61967 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1024.3 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 200.00 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.0000 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.9408 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.495 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 524.3 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 27.306 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 387.81 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6876 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.8756 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.109 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 153.1 ) st = R143a ( T = 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 2.30735 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 802.97 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 283.90 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.2748 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.051 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.118 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 262.7 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 120.31 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 402.43 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6416 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.093 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 2.070 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 127.9 ) st = R143a ( T = 70 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 3.55268 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 600.85 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 333.20 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.4172 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.198 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 7.720 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 122.4 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 270.10 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 385.42 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.5694 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.272 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 2 ) , 11.50 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 104.2 ) st = R143a ( P = 1e5 , x = 0.5 ) self . assertEqual ( round ( st . T . C , 3 ) , - 47.518 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1167.1 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 133.33 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 5 ) , 0.73426 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8644 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.324 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 752.1 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 4.7099 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 360.15 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7395 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.7123 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.8433 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 154.5 ) st = R143a ( P = 3.6e6 , x = 0.5 ) self . assertEqual ( round ( st . T . C , 3 ) , 70.629 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 585.69 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 335.85 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.4247 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.213 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 9.788 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 116.5 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 283.61 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 383.21 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.5624 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.284 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 2 ) , 14.81 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 103.0 ) st = R143a ( T = - 100 + 273.15 , P = 1e5 ) self . assertEqual ( round ( st . rho , 1 ) , 1302.0 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 66.841 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 66.918 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , 0.39984 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8116 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.220 ) self . assertEqual ( round ( st . w , 1 ) , 1002.1 ) st = R143a ( T = - 30 + 273.15 , P = 2e5 ) self . assertEqual ( round ( st . rho , 4 ) , 8.9809 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 349.27 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 371.54 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.7237 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.7650 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 0.9139 ) self . assertEqual ( round ( st . w , 1 ) , 156.6 ) st = R143a ( T = 300 + 273.15 , P = 5e5 ) self . assertEqual ( round ( st . rho , 4 ) , 8.8753 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 690.02 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 746.36 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.5782 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 1.274 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.378 ) self . assertEqual ( round ( st . w , 1 ) , 246.1 ) st = R143a ( T = 10 + 273.15 , P = 1e6 ) self . assertEqual ( round ( st . rho , 2 ) , 990.23 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 214.20 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 215.21 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.0533 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.9584 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.548 ) self . assertEqual ( round ( st . w , 1 ) , 477.5 ) st = R143a ( T = 50 + 273.15 , P = 2e6 ) self . assertEqual ( round ( st . rho , 3 ) , 91.768 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 391.16 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 412.95 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.6833 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 1.030 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.565 ) self . assertEqual ( round ( st . w , 1 ) , 140.6 ) st = R143a ( T = - 100 + 273.15 , P = 3e6 ) self . assertEqual ( round ( st . rho , 1 ) , 1306.3 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 66.129 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 68.426 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , 0.39571 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8137 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.216 ) self . assertEqual ( round ( st . w , 1 ) , 1013.2 ) st = R143a ( T = 300 + 273.15 , P = 5e6 ) self . assertEqual ( round ( st . rho , 3 ) , 93.689 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 675.52 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 728.89 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.3254 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 1.289 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.452 ) self . assertEqual ( round ( st . w , 1 ) , 238.9 ) st = R143a ( T = 273.15 , P = 1e7 ) self . assertEqual ( round ( st . rho , 1 ) , 1068.3 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 192.37 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 201.73 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , 0.97356 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.9401 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.411 ) self . assertEqual ( round ( st . w , 1 ) , 620.1 ) st = R143a ( T = - 100 + 273.15 , P = 2e7 ) self . assertEqual ( round ( st . rho , 1 ) , 1329.3 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 62.387 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 77.432 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , 0.37323 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8229 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.199 ) self . assertEqual ( round ( st . w , 1 ) , 1074.5 ) st = R143a ( T = 40 + 273.15 , P = 5e7 ) self . assertEqual ( round ( st . rho , 1 ) , 1098.8 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 226.53 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 272.04 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.0876 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 1.013 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.373 ) self . assertEqual ( round ( st . w , 1 ) , 761.6 ) st = R143a ( T = 300 + 273.15 , P = 1e8 ) self . assertEqual ( round ( st . rho , 2 ) , 890.50 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 569.53 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 681.83 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.9149 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 1.368 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.595 ) self . assertEqual ( round ( st . w , 1 ) , 671.2 )  def test_shortSpan ( self ) :          pass    