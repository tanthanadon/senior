import logging import os from PyQt5 import QtCore , QtGui , QtWidgets from lib . unidades import Currency , getrates , _all from lib . config import conf_dir from UI . delegate import CellEditor class UI_conversorUnidades ( QtWidgets . QDialog ) :      def __init__ ( self , unidad , valor = None , parent = None ) :          super ( UI_conversorUnidades , self ) . __init__ ( parent ) self . setWindowTitle ( unidad . __title__ ) self . mutex = QtCore . QMutex ( ) self . unidad = unidad if unidad . __tooltip__ :              self . tooltip = unidad . __tooltip__  else :              self . tooltip = unidad . __text__  self . value = self . unidad ( valor ) lyt = QtWidgets . QGridLayout ( self ) self . tabla = QtWidgets . QTableWidget ( ) self . tabla . setRowCount ( len ( unidad . __text__ ) ) self . tabla . setColumnCount ( 1 ) self . tabla . setItemDelegateForColumn ( 0 , CellEditor ( self ) ) self . tabla . horizontalHeader ( ) . setVisible ( False ) self . tabla . horizontalHeader ( ) . setStretchLastSection ( True ) self . tabla . setMaximumHeight ( len ( unidad . __text__ ) * 24 + 4 ) for i , txt in enumerate ( unidad . __text__ ) :              item = QtWidgets . QTableWidgetItem ( txt ) self . tabla . setVerticalHeaderItem ( i , item ) self . tabla . setRowHeight ( i , 24 ) self . tabla . setItem ( i , 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . tabla . item ( i , 0 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter )  for i , tip in enumerate ( self . tooltip ) :              self . tabla . item ( i , 0 ) . setToolTip ( tip )  self . tabla . cellChanged . connect ( self . update ) lyt . addWidget ( self . tabla , 2 , 1 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . setCenterButtons ( True ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) lyt . addWidget ( self . buttonBox , 3 , 0 , 1 , 3 ) if valor :              self . fill ( self . value )   def fill ( self , valor ) :          for i , key in enumerate ( self . unidad . __units__ ) :              self . tabla . item ( i , 0 ) . setText ( valor . format ( key ) )   def update ( self , fila , columna ) :          if self . mutex . tryLock ( ) :              new = self . tabla . item ( fila , columna ) . text ( ) self . value = self . unidad ( float ( new ) , self . unidad . __units__ [ fila ] ) self . fill ( self . value ) self . mutex . unlock ( )    class moneda ( UI_conversorUnidades ) :      def __init__ ( self , valor = None , parent = None ) :          super ( moneda , self ) . __init__ ( Currency , valor = valor , parent = parent ) self . fecha = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + self . value . fecha ) self . layout ( ) . addWidget ( self . fecha , 0 , 1 ) self . botonActualizar = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonActualizar . clicked . connect ( self . getrates ) self . layout ( ) . addWidget ( self . botonActualizar , 1 , 1 ) for i in range ( len ( Currency . __units__ ) ) :              header = self . tabla . verticalHeaderItem ( i ) header . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> % Currency . __units__ [ i ] ) ) ) main = len ( Currency . _uMain ) Europe = main + len ( Currency . _uEurope ) America = Europe + len ( Currency . _uAmerica ) Africa = America + len ( Currency . _uAfrica ) Asia = Africa + len ( Currency . _uAsia ) if i < main :                  color = <str>  elif i < Europe :                  color = <str>  elif i < America :                  color = <str>  elif i < Africa :                  color = <str>  elif i < Asia :                  color = <str>  else :                  color = <str>  header . setBackground ( QtGui . QBrush ( QtGui . QColor ( color ) ) )   def getrates ( self ) :          filename = conf_dir + <str> getrates ( filename ) self . value = self . unidad ( self . value ) self . fecha . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + self . value . fecha ) if self . value != 0 :              self . update ( 0 , 0 )    class UI_unitConverter ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( UI_unitConverter , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . verticalLayout = QtWidgets . QVBoxLayout ( self ) self . lista = QtWidgets . QListWidget ( ) self . lista . itemDoubleClicked . connect ( self . showChildWindow ) self . verticalLayout . addWidget ( self . lista ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) self . buttonBox . rejected . connect ( self . reject ) self . verticalLayout . addWidget ( self . buttonBox ) for unidad in _all :              self . lista . addItem ( unidad . __title__ )  self . lista . setCurrentRow ( - 1 ) logging . info ( QtWidgets . QApplication . translate ( <str> , <str> ) )  def showChildWindow ( self ) :          indice = self . lista . currentRow ( ) if _all [ indice ] . __name__ == <str> :              dialog = moneda ( )  else :              dialog = UI_conversorUnidades ( _all [ indice ] )  dialog . exec_ ( )   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) conversion_unidades = moneda ( ) conversion_unidades . show ( ) sys . exit ( app . exec_ ( ) )   