from unittest import TestCase from lib import unidades from lib . meos import MEoS class nC12 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 226.5453372 ) Tc = unidades . Temperature ( 658.1 ) Pc = unidades . Pressure ( 1817.0 , <str> ) M = 170.33484 Tt = unidades . Temperature ( 263.6 ) Tb = unidades . Temperature ( 489.3 ) f_acent = 0.574 momentoDipolar = unidades . DipoleMoment ( 0.0 , <str> ) id = 16 CP1 = { <str> : 23.085 , <str> : [ ] , <str> : [ ] , <str> : [ 37.776 , 29.369 , 12.461 , 7.7733 ] , <str> : [ 1280 , 2399 , 5700 , 13869 ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : CP1 , <str> : <str> , <str> : Tt , <str> : 700. , <str> : 700000.0 , <str> : 4.53 , <str> : [ 1.38031 , - 2.85352 , .288897 , - 0.165993 , .0923993 , .000282772 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.32 , 1.23 , 1.5 , 1.4 , 0.07 , 0.8 ] , <str> : [ .956627 , .0353076 , - 0.445008 , - 0.118911 , - 0.0366475 , .0184223 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 2.16 , 1.1 , 4.1 , 5.6 , 14.5 , 12. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } eq = lemmon , _PR = [ 0.1099 , - 26.8035 ] _surface = { <str> : [ 0.0154 , 0.0480 ] , <str> : [ 4.18 , 1.17 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.94217e1 , - 0.41890e1 , 0.54999e1 , - 0.67789e1 , - 0.17161e1 ] , <str> : [ 1.0 , 1.5 , 1.359 , 3.56 , 9.2 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.92236 , 0.92047 , 0.55713e1 , - 0.92253e1 , 0.51763e1 ] , <str> : [ 0.21 , 0.49 , 1.08 , 1.49 , 1.9 ] } _vapor_Density = { <str> : 2 , <str> : [ - 1.7859 , - 7.5436 , - 22.848 , - 81.355 , 92.283 , - 217.25 ] , <str> : [ 0.298 , 0.91 , 2.8 , 6. , 9. , 11. ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 522.592 , <str> : 0.735639 , <str> : 0.021357 , <str> : [ 0.382987 , - 0.561050 , 0.0313962 ] , <str> : 522.592 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.0125 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 658.1 , <str> : 1.33 * M , <str> : 1000 , <str> : [ - 0.0471703 , 0.00827816 , 0.0298429 , - 0.0134156 ] , <str> : [ 1 , 1 , 2 , 2 ] , <str> : [ 2 , 3 , 2 , 3 ] , <str> : 503.109 , <str> : 2.32661 , <str> : [ 2.23089 / 2.32661 ] , <str> : [ - 0.5 ] } _viscosity = visco0 , thermo0 = { <str> : 1 , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 658.1 , <str> : 1. , <str> : [ 0.436343e-2 , - 0.264054e-1 , 0.922394e-1 , - 0.291756e-1 ] , <str> : [ 0 , 1 , 2 , 3 ] , <str> : 658.1 , <str> : 1.33 * M , <str> : 1. , <str> : [ 0.693347e-1 , - 0.280792e-1 , - 0.331695e-1 , 0.173922e-2 , 0.676165e-2 , 0.309558e-2 ] , <str> : [ 0 , - 1 , 0 , - 1 , 0 , - 1 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.03 , <str> : 0.194e-9 , <str> : 0.0496 , <str> : 1.52e-9 , <str> : 987.15 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_lemmon ( self ) :          st = nC12 ( T = 300 , rho = 0 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 0 ) self . assertEqual ( round ( st . cvM . JmolK , 4 ) , 271.3952 ) self . assertEqual ( round ( st . cpM . JmolK , 4 ) , 279.7096 ) self . assertEqual ( round ( st . w , 4 ) , 122.8511 ) st = nC12 ( T = 300 , rhom = 4.4 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 7.161946 ) self . assertEqual ( round ( st . cvM . JmolK , 4 ) , 311.1937 ) self . assertEqual ( round ( st . cpM . JmolK , 4 ) , 377.1307 ) self . assertEqual ( round ( st . w , 3 ) , 1316.614 ) st = nC12 ( T = 600 , rhom = 0.2 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 0.7228018 ) self . assertEqual ( round ( st . cvM . JmolK , 4 ) , 488.1173 ) self . assertEqual ( round ( st . cpM . JmolK , 4 ) , 526.2322 ) self . assertEqual ( round ( st . w , 4 ) , 123.5851 ) st = nC12 ( T = 600 , rhom = 4.0 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 120.2532 ) self . assertEqual ( round ( st . cvM . JmolK , 4 ) , 499.9857 ) self . assertEqual ( round ( st . cpM . JmolK , 4 ) , 539.3864 ) self . assertEqual ( round ( st . w , 3 ) , 1255.247 ) st = nC12 ( T = 658.2 , rhom = 1.33 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 1.820055 ) self . assertEqual ( round ( st . cvM . JmolK , 4 ) , 547.6852 ) self . assertEqual ( round ( st . cpM . JmolK , 1 ) , 128753.9 ) self . assertEqual ( round ( st . w , 5 ) , 49.76424 )  def test_Huber ( self ) :          self . assertEqual ( round ( nC12 ( T = 300 , rhom = 4.4115 ) . mu . muPas , 1 ) , 1484.8 ) self . assertEqual ( round ( nC12 ( T = 500 , P = 1e6 ) . mu . muPas , 2 ) , 183.76 ) self . assertEqual ( round ( nC12 ( T = 300 , P = 1e7 ) . k . mWmK , 2 ) , 138.29 ) self . assertEqual ( round ( nC12 ( T = 500 , P = 1e6 ) . k . mWmK , 2 ) , 93.84 ) self . assertEqual ( round ( nC12 ( T = 660 , P = 1.8714e6 ) . k . mWmK , 3 ) , 90.346 )    