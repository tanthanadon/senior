from unittest import TestCase from lib import unidades from lib . meos import MEoS class R134a ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> rhoc = unidades . Density ( 511.9 ) Tc = unidades . Temperature ( 374.21 ) Pc = unidades . Pressure ( 4059.28 , <str> ) M = 102.032 Tt = unidades . Temperature ( 169.85 ) Tb = unidades . Temperature ( 247.076 ) f_acent = 0.32684 momentoDipolar = unidades . DipoleMoment ( 2.058 , <str> ) id = 1235 Fi1 = { <str> : 8.314471 , <str> : [ 1 , - 1.629789 ] , <str> : [ 0 , 1 , - 0.5 , - 0.75 ] , <str> : [ - 1.019535 , 9.047135 , - 9.723916 , - 3.92717 ] , <str> : [ ] , <str> : [ ] } Fi2 = { <str> : [ 1 , - 1 ] , <str> : [ 0 , 1 , - 0.25 ] , <str> : [ 10.78497786 , 8.612977410 , - 24.37548384 ] , <str> : [ 7.451784998 , - 4.239239505 , 6.445739825 ] , <str> : [ - 4.103830338 , - 2.561528683 , - 2.084607363 ] } CP1 = { <str> : 19.4006 / 8.314471 , <str> : [ 0.258531 / 8.314471 , - 1.29665e-4 / 8.314471 ] , <str> : [ 1 , 2 ] , <str> : [ ] , <str> : [ ] } tillner = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : Fi1 , <str> : <str> , <str> : 374.18 , <str> : 508 / M , <str> : Tt , <str> : 465.0 , <str> : 70000.0 , <str> : 15.60 , <str> : [ 0.5586817e-1 , 0.498223 , 0.2458698e-1 , 0.8570145e-3 , 0.4788584e-3 , - 0.1800808e1 , 0.2671641 , - 0.4781652e-1 ] , <str> : [ 2 , 1 , 3 , 6 , 6 , 1 , 1 , 2 ] , <str> : [ - 0.5 , 0 , 0 , 0 , 1.5 , 1.5 , 2 , 2 ] , <str> : [ 0.1423987e-1 , 0.3324062 , - 0.7485907e-2 , 0.1017263e-3 , - 0.5184567 , - 0.8692288e-1 , 0.2057144 , - 0.5000457e-2 , 0.4603262e-3 , - 0.3497836e-2 , 0.6995038e-2 , - 0.1452184e-1 , - 0.1285458e-3 ] , <str> : [ 5 , 2 , 2 , 4 , 1 , 4 , 1 , 2 , 4 , 1 , 5 , 3 , 10 ] , <str> : [ 1 , 3 , 5 , 1 , 5 , 5 , 6 , 10 , 10 , 10 , 18 , 22 , 50 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 4 ] , <str> : [ 1 ] * 13 } MBWR = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> <str> , <str> : <str> } , <str> : 8.314471 , <str> : 102.032 , <str> : 374.179 , <str> : 4056 , <str> : 5.0308 , <str> : CP1 , <str> : <str> , <str> : Tt , <str> : 600.0 , <str> : 70000.0 , <str> : 15.60 , <str> : [ None , 0.965209362217e-1 , - 0.401824768889e1 , 0.395239532858e2 , 0.134532868960e4 , - 0.139439741347e7 , - 0.309281355175e-2 , 0.292381512283e1 , - 0.165146613555e4 , 0.150706003118e7 , 0.534973948313e-4 , 0.543933317622 , - 0.211326049762e3 , - 0.268191203847e-1 , - 0.541067125950 , - 0.851731779398e3 , 0.205188253646 , - 0.733050188093e-2 , 0.380655963862e1 , - 0.105832087589 , - 0.679243084424e6 , - 0.126998378601e9 , - 0.426234431829e5 , 0.101973338234e10 , - 0.186699526782e3 , - 0.933426323419e5 , - 0.571735208963e1 , - 0.176762738787e6 , - 0.397282752308e-1 , 0.143016844796e2 , 0.803085294260e-4 , - 0.171959073552 , 0.226238385661e1 ] } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : <str> , <str> : 374.18 , <str> : 508 / M , <str> : Tt , <str> : 600.0 , <str> : 100000.0 , <str> : 15.6 , <str> : [ 0.106631890000e1 , - 0.244959700000e1 , 0.446457180000e-1 , 0.756568840000e-1 , 0.206520890000e-3 ] , <str> : [ 1 , 1 , 1 , 3 , 7 ] , <str> : [ 0.25 , 1.25 , 1.5 , 0.25 , 0.875 ] , <str> : [ 0.42006912 , 0.76739111 , 0.17897427e-2 , - 0.36219746 , - 0.6780937e-1 , - 0.10616419 , - 0.18185791e-1 ] , <str> : [ 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 2.375 , 2 , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 7 } astina = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : Tt , <str> : 460.0 , <str> : 70000.0 , <str> : 15.58 , <str> : [ 1.832124209 , - 2.940698861 , 5.156071823e-1 , 2.756965911e-1 , 1.225264939 , - 6.486749497e-1 , - 9.286738053e-1 , 3.920381291e-1 , 1.056692108e-1 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 ] , <str> : [ 0.5 , 1.125 , 3.25 , 0.5 , 1.875 , 2.75 , 1.625 , 2.125 , 1.125 ] , <str> : [ - 7.586523371e-1 , - 1.198140136 , - 2.878260390e-1 , - 9.723032379e-2 , 5.307113358e-2 , - 4.681610582e-2 , - 9.604697902e-3 , 6.668035048e-3 , 2.361266290e-3 ] , <str> : [ 1 , 2 , 3 , 2 , 3 , 4 , 4 , 5 , 6 ] , <str> : [ 3.75 , 1.5 , 0.75 , 9 , 8.5 , 5.5 , 32 , 23 , 31 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] , <str> : [ 1 ] * 9 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 1.08605179 , 1.03772416 , - 2.92069735 , 9.15573346e-2 , 2.40541430e-4 , - 2.00239570e-1 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ - 1.61424796e-2 , - 2.15499979e-1 , 3.11819936e-1 , 1.12867938e-3 , - 0.283454532 , - 4.21157950e-2 , - 8.08314045e-2 , - 1.59762784e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } huber = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : 374.179 , <str> : 5.0308 , <str> : 4058.59 , <str> : CP1 , <str> : <str> , <str> : Tt , <str> : 465.0 , <str> : 70000.0 , <str> : 15.60 , <str> : [ 6.81716385385e-1 , - 2.35124614105 , 6.70216482859e-1 , - 3.07204611902e-2 , 3.74529023556e-1 , - 1.57205367415e-1 , 6.52988383109e-2 , - 5.10116156742e-2 , - 5.69183659026e-2 , 6.45310700471e-4 , 1.02593424592e-3 , 6.77375367275e-7 , - 1.92870222869e-4 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 6 , 7 , 7 , 8 ] , <str> : [ 0 , 1.5 , 2.5 , - 0.5 , 1.5 , 2 , 0 , 1 , 2.5 , 0 , 2 , 5 , 2 ] , <str> : [ - 4.95254825047e-1 , 1.28070070661e-1 , 2.76305386558e-1 , - 1.53983381830e-1 , - 2.11838190838e-1 , - 2.39896004684e-2 , - 3.27379569918e-3 , - 9.27516738026e-4 , - 2.09645193939e-2 , 2.14330093737e-3 , - 5.41732277806e-4 , 3.47165872395e-3 , 4.91210193371e-2 , - 3.69286578727e-2 , - 6.94084047023e-2 , 4.73399474790e-2 , 6.55276251860e-1 , - 6.87628059906e-1 , 4.30311999742e-2 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 , 5 , 6 , 7 , 8 , 10 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 5 ] , <str> : [ 5 , 6 , 3.5 , 5.5 , 3 , 7 , 6 , 8.5 , 4 , 6.5 , 5.5 , 22 , 11 , 18 , 11 , 23 , 17 , 18 , 23 ] , <str> : [ 2 ] * 11 + [ 4 ] * 8 , <str> : [ 1 ] * 19 } eq = tillner , MBWR , shortSpan , astina , sun , huber _PR = [ 0.0336 , - 21.3339 ] _surface = { <str> : [ 0.05801 ] , <str> : [ 1.241 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.77513e1 , 0.29263e1 , - 0.26622e1 , - 0.39711e1 ] , <str> : [ 1.0 , 1.5 , 1.9 , 4.25 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.12449e2 , - 0.41023e2 , 0.73641e2 , - 0.64635e2 , 0.22551e2 ] , <str> : [ 0.5 , 0.7 , 0.9 , 1.1 , 1.3 ] } _vapor_Density = { <str> : 2 , <str> : [ - 0.29174e1 , - 0.72542e1 , - 0.23306e2 , 0.59840e1 , - 0.71821e2 ] , <str> : [ 0.383 , 1.21 , 3.3 , 5.6 , 7.0 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 102.031 , <str> : 299.363 , <str> : 0.46893 , <str> : 0.021357 , <str> : [ 0.355404 , - 0.464337 , 0.257353e-1 ] , <str> : 299.363 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.0125 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 374.21 , <str> : 511.9 , <str> : 1000 , <str> : [ - 0.206900719e-1 , 0.356029549e-3 , 0.211101816e-2 , 0.139601415e-1 , - 0.456435020e-2 , - 0.351593275e-2 ] , <str> : [ 0 , 6 , 2 , 0.5 , - 2 , 0 ] , <str> : [ 1 , 2 , 2 , 2 , 2 , 3 ] , <str> : <str> } def _closePacked ( self , rho , T , fase ) :          c10 = 3.163695636 c9 = 0.100035295 c8 = - 0.890173375e-1 c7 = 0.214763320 tau = T / 374.21 delta = rho / 511.9 delta0 = c10 / ( 1 + c8 * tau + c9 * tau ** 2 ) muCP = c7 / ( delta0 - delta ) - c7 / delta0 return muCP * 1000  visco1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 4 , <str> : 0 , <str> : 374.21 , <str> : [ 31.2515 , - 89.6122 , 73.0823 ] , <str> : [ 0 , 0.25 , 0.5 ] , <str> : [ 1.07271e-4 , - 4.41655e-5 , 0.0 ] , <str> : [ 1.66457e-4 , - 4.80293e-5 , 0.0 ] , <str> : [ 8.08333e-5 , - 4.90360e-5 , 0.0 ] , <str> : [ - 2.12476e-8 , 2.81647e-9 , 0.0 ] , <str> : [ 1.35594e-8 , 0.0 , 3.17550e-10 ] , <str> : [ 0.0 , 4.81769e-7 , - 1.17149e-7 ] } _viscosity = visco0 , visco1 , thermo0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1. , <str> : 1. , <str> : [ - 1.05248e-2 , 8.00982e-5 ] , <str> : [ 0 , 1 ] , <str> : 5.049886 * M , <str> : 2.055e-3 , <str> : [ 1.836526 , 5.126143 , - 1.436883 , 6.261441e-1 ] , <str> : [ 0 , 0 , 0 , 0 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.03 , <str> : 0.194e-9 , <str> : 0.0496 , <str> : 5.285356e-10 , <str> : 561.411 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_tillner ( self ) :          st = R134a ( T = 169.85 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.00039 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1591.1 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 71.455 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.4126 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.7922 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.1838 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1120.0 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.02817 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 334.94 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.9639 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.5030 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.5853 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 126.79 ) st = R134a ( T = 200 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.00631 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1510.5 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 107.39 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.6073 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8016 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.2058 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 967.61 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.38977 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 353.06 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.8356 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.5732 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.6586 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 135.98 ) st = R134a ( T = 250 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.11561 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1367.9 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 169.57 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.8841 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8515 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.2865 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 728.39 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 5.9546 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 384.60 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7443 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.6962 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.8044 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 145.98 ) st = R134a ( P = 1e5 , x = 0.5 ) self . assertEqual ( round ( st . T , 2 ) , 246.79 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1377.5 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 165.44 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.8676 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.8478 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.2800 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 743.31 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 5.1932 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 382.60 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7475 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.6876 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 0.7932 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 145.63 ) st = R134a ( T = 300 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.70282 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1199.7 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 237.19 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.1287 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 0.9144 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.4324 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 497.89 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 34.193 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 413.27 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7156 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.8426 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.0438 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 143.88 ) st = R134a ( T = 350 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 2.4611 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 951.32 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 316.50 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.3674 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 1.0037 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.9614 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 254.06 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 140.99 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 429.03 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6889 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.0301 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.8494 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 120.33 ) st = R134a ( T = 374 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 4.0416 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 587.91 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 380.86 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.5387 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 1.2121 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 2 ) , 101.66 ) self . assertEqual ( round ( st . Liquido . w , 3 ) , 92.401 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 434.06 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 399.51 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.5886 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.2409 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 2 ) , 137.24 ) self . assertEqual ( round ( st . Gas . w , 3 ) , 91.390 ) st = R134a ( T = 205 , P = 1e4 ) self . assertEqual ( round ( st . rho , 1 ) , 1496.8 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 113.44 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.6372 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8055 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.2120 ) self . assertEqual ( round ( st . w , 2 ) , 942.87 ) st = R134a ( T = 325 , P = 2e4 ) self . assertEqual ( round ( st . rho , 5 ) , 0.75738 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 449.09 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.1106 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8000 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 0.8828 ) self . assertEqual ( round ( st . w , 2 ) , 170.45 ) st = R134a ( T = 460 , P = 6e4 ) self . assertEqual ( round ( st . rho , 4 ) , 1.6045 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 582.87 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.3634 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.0172 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.0998 ) self . assertEqual ( round ( st . w , 2 ) , 200.83 ) st = R134a ( T = 170 , P = 1e5 ) self . assertEqual ( round ( st . rho , 1 ) , 1590.8 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 71.678 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.4136 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.7922 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.1837 ) self . assertEqual ( round ( st . w , 1 ) , 1119.6 ) st = R134a ( T = 265 , P = 2e5 ) self . assertEqual ( round ( st . rho , 4 ) , 9.9171 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 394.26 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.7396 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.7324 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 0.8523 ) self . assertEqual ( round ( st . w , 2 ) , 147.61 ) st = R134a ( T = 240 , P = 5e5 ) self . assertEqual ( round ( st . rho , 1 ) , 1398.8 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 156.94 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.8314 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8403 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.2659 ) self . assertEqual ( round ( st . w , 2 ) , 777.64 ) st = R134a ( T = 310 , P = 1e6 ) self . assertEqual ( round ( st . rho , 1 ) , 1160.4 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 251.72 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.1755 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.9288 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.4795 ) self . assertEqual ( round ( st . w , 2 ) , 452.15 ) st = R134a ( T = 345 , P = 2e6 ) self . assertEqual ( round ( st . rho , 2 ) , 102.38 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 434.73 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.7164 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.9701 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.4224 ) self . assertEqual ( round ( st . w , 2 ) , 131.78 ) st = R134a ( T = 460 , P = 5e6 ) self . assertEqual ( round ( st . rho , 2 ) , 169.51 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 549.57 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.9474 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.0760 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.3429 ) self . assertEqual ( round ( st . w , 2 ) , 169.93 ) st = R134a ( T = 270 , P = 1e7 ) self . assertEqual ( round ( st . rho , 1 ) , 1337.4 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 198.54 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.9675 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8750 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.2947 ) self . assertEqual ( round ( st . w , 2 ) , 707.43 ) st = R134a ( T = 460 , P = 2e7 ) self . assertEqual ( round ( st . rho , 2 ) , 767.68 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 475.99 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.7125 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.1073 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.6079 ) self . assertEqual ( round ( st . w , 2 ) , 281.20 ) st = R134a ( T = 185 , P = 5e7 ) self . assertEqual ( round ( st . rho , 1 ) , 1608.6 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 112.12 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.4657 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 0.8100 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.1623 ) self . assertEqual ( round ( st . w , 1 ) , 1208.3 )  def test_MBWR ( self ) :          st = R134a ( T = - 100 + 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.00056 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1581.9 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 0.040 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 75.71 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 337.00 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.4366 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.9456 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.168 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.592 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 1111 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 128 ) st = R134a ( T = - 50 + 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.02948 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1443.1 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 1.651 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 136.21 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 367.83 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.7432 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7812 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.229 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.712 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 858 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 142 ) st = R134a ( T = 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.29269 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1293.7 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 14.420 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 200 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 398.68 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.0000 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7274 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.335 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.883 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 626 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 147 ) st = R134a ( T = 50 + 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.3177 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1102.0 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 66.165 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 271.59 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 423.62 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.2373 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.7078 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.569 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.218 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 387 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 137 ) st = R134a ( T = 90 + 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 4 ) , 3.2445 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 836.9 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 216.81 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 343.01 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 425.48 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.4392 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6663 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.766 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 3.064 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 178 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 108 ) st = R134a ( T = 100 + 273.15 , x = 0.5 , eq = <str> ) self . assertEqual ( round ( st . P . MPa , 4 ) , 3.9721 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 646.7 ) self . assertEqual ( round ( st . Gas . rho , 1 ) , 377.3 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 374.02 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 407.07 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.5207 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6093 ) self . assertEqual ( round ( st . Liquido . w , 0 ) , 105 ) self . assertEqual ( round ( st . Gas . w , 0 ) , 94 )  def test_shortSpan ( self ) :          st = R134a ( T = 500 , rho = 500 , eq = <str> ) self . assertEqual ( round ( st . cp0 . kJkgK , 4 ) , 1.1577 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 14.656 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.6129 ) st2 = R134a ( T = 600 , rho = 100 , eq = <str> ) self . assertEqual ( round ( st2 . h . kJkg - st . h . kJkg , 2 ) , 181.97 ) self . assertEqual ( round ( st2 . s . kJkgK - st . s . kJkgK , 5 ) , 0.41386 )    