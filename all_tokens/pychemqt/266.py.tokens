from functools import partial import logging import os from PyQt5 import QtCore , QtGui , QtWidgets from lib . config import Entity , IMAGE_PATH from lib . thread import Evaluate from tools . costIndex import indiceBase , indiceActual from UI . texteditor import TextEditor from UI . UI_corriente import Ui_corriente from UI . widgets import Status class equipment ( Entity ) :      status = 0 msg = <str> title = <str> help = <str> kwargs = { } kwargsInput = ( ) kwargsValue = ( ) kwargsList = ( ) kwargsCheck = ( ) calculateValue = ( ) statusCoste = False indiceCostos = None calculateCostos = ( ) __doi__ = [ ] salida = [ None ] def __init__ ( self , ** kwargs ) :          self . kwargs = self . __class__ . kwargs . copy ( ) self . kwargs [ <str> ] = <str> self . kwargs_forbidden = self . kwargs_forbidden + list ( self . kwargsInput ) self . kwargsInteger = [ ] for key , value in list ( self . kwargs . items ( ) ) :              if isinstance ( value , int ) :                  self . kwargsInteger . append ( key )   self . cleanOldValues ( ** equipment . kwargs ) if self . indiceCostos :              self . kwargs [ <str> ] = indiceBase [ self . indiceCostos ] self . kwargs [ <str> ] = indiceActual [ self . indiceCostos ]  letter = 0 for name in self . propertiesTitle ( ) :              if len ( name ) > letter :                  letter = len ( name )   self . TEXT_FORMATING_LENG = ( letter // 4 + 1 ) * 4 if kwargs :              self . __call__ ( ** kwargs )   def __call__ ( self , ** kwargs ) :          Entity . __call__ ( self , ** kwargs ) input = False for key in kwargs :              if key in self . kwargsInput :                  input = True break   if self . isCalculable and ( self . _oldkwargs != self . kwargs or input ) :              logging . info ( <str> % self . __class__ . __name__ ) kw_new = { } for key , value in list ( kwargs . items ( ) ) :                  if self . kwargs [ key ] != value :                      kw_new [ key ] = value   logging . debug ( <str> % kw_new ) QtWidgets . QApplication . processEvents ( ) self . calculo ( ) if self . statusCoste :                  self . coste ( )    @ property def isCalculable ( self ) :          pass  def calculo ( self ) :          pass  def cleanOldValues ( self , ** kwargs ) :          self . kwargs . update ( kwargs )  def clear ( self ) :          self . kwargs = self . __class__ . kwargs self . kwargs . update ( equipment . kwargs ) self . __dict__ . clear ( ) self . _bool = False  def txt ( self ) :          txt = str ( self . notasPlain ) + os . linesep + os . linesep txt += <str> txt += QtWidgets . QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep mask = <str> % ( <str> , self . TEXT_FORMATING_LENG + 1 , <str> ) for key , val in list ( self . kwargs . items ( ) ) :              if val and key not in [ <str> , <str> , <str> ] :                  txt += mask % ( key , val ) + os . linesep   txt += os . linesep txt += self . propTxt ( ) return txt  def propTxt ( self ) :          pass  @ classmethod def propertiesNames ( cls ) :          p = cls . propertiesEquipment ( ) p . append ( ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> , str ) ) p . append ( ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> , str ) ) return p  @ classmethod def propertiesEquipment ( cls ) :          return [ ]   class UI_equip ( QtWidgets . QDialog ) :      def __init__ ( self , equipment , entrada = True , salida = True , calculo = True , parent = None ) :          super ( UI_equip , self ) . __init__ ( parent ) self . setWindowTitle ( equipment . title ) icono = os . path . join ( IMAGE_PATH , <str> , <str> % equipment . __name__ . lower ( ) ) self . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( icono ) ) ) self . evaluate = Evaluate ( ) self . evaluate . finished . connect ( self . rellenar ) layout = QtWidgets . QGridLayout ( self ) self . tabWidget = QtWidgets . QTabWidget ( ) layout . addWidget ( self . tabWidget , 0 , 0 , 1 , 3 ) self . status = Status ( ) layout . addWidget ( self . status , 1 , 0 , 1 , 1 ) self . checkIgnorar = QtWidgets . QCheckBox ( ) self . checkIgnorar . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkIgnorar . toggled . connect ( self . ignorar ) layout . addWidget ( self . checkIgnorar , 1 , 1 , 1 , 1 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Help ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) self . buttonBox . helpRequested . connect ( self . ayuda ) layout . addWidget ( self . buttonBox , 1 , 2 , 1 , 1 ) if not equipment . help :              button = self . buttonBox . button ( QtWidgets . QDialogButtonBox . Help ) button . setVisible ( False )  if entrada :              self . Entrada = QtWidgets . QTabWidget ( ) self . tabWidget . addTab ( self . Entrada , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  elif entrada is None :              pass  else :              self . Entrada = Ui_corriente ( ) self . Entrada . Changed . connect ( partial ( self . changeParams , <str> ) ) self . tabWidget . addTab ( self . Entrada , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  if calculo :              self . tabCalculo = QtWidgets . QWidget ( ) self . tabWidget . addTab ( self . tabCalculo , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  if equipment . indiceCostos is not None :              self . tabCostos = QtWidgets . QWidget ( ) self . tabWidget . addTab ( self . tabCostos , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  if salida :              self . Salida = QtWidgets . QTabWidget ( ) self . tabWidget . addTab ( self . Salida , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  elif salida is None :              pass  else :              self . Salida = Ui_corriente ( readOnly = True ) self . tabWidget . addTab ( self . Salida , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  self . tabNotas = TextEditor ( ) self . tabWidget . addTab ( self . tabNotas , QtGui . QIcon ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . tabNotas . notas . textChanged . connect ( self . cambiar_notas )  def addSalida ( self , title , ** kw ) :          widget = Ui_corriente ( readOnly = True , ** kw ) self . Salida . addTab ( widget , title )  def addEntrada ( self , title , key , ** kw ) :          widget = Ui_corriente ( ** kw ) widget . Changed . connect ( partial ( self . changeParams , key ) ) self . Entrada . addTab ( widget , title )  def ignorar ( self , bool ) :          if bool :              self . status . setState ( 2 )  else :              self . status . restaurar ( )  self . tabWidget . setEnabled ( not bool )  def cambiar_notas ( self ) :          htm = self . tabNotas . notas . toHtml ( ) txt = self . tabNotas . notas . toPlainText ( ) self . Equipment . setNotas ( htm , txt )  def ayuda ( self ) :          url = QtCore . QUrl ( self . Equipment . help ) QtGui . QDesktopServices . openUrl ( url )  def setEquipment ( self , equipment ) :          self . Equipment = equipment self . rellenar ( )  def changeParams ( self , key , value ) :          self . calculo ( ** { key : value } )  def changeParamsCoste ( self , parametro , valor ) :          self . Equipment . cleanOldValues ( ** { str ( parametro ) : valor } ) if self . Equipment . status :              self . Equipment . coste ( ) self . rellenar ( )   def calculo ( self , ** kwargs ) :          self . status . setState ( 4 ) self . evaluate . start ( self . Equipment , kwargs )  def rellenar ( self ) :          self . rellenarInput ( ) if self . Equipment . status in [ 1 , 3 ] :              self . tabNotas . setText ( self . Equipment . notas ) for variable in self . Equipment . calculateValue :                  self . __getattribute__ ( variable ) . setValue ( self . Equipment . __getattribute__ ( variable ) )  if len ( self . Equipment . salida ) == 1 :                  self . Salida . setCorriente ( self . Equipment . salida [ 0 ] )  else :                  for i , salida in enumerate ( self . Equipment . salida ) :                      self . Salida . widget ( i ) . setCorriente ( salida )   if self . Equipment . indiceCostos is not None and self . Equipment . statusCoste :                  for variable in self . Equipment . calculateCostos :                      self . __getattribute__ ( variable ) . setValue ( self . Equipment . __getattribute__ ( variable ) )    self . status . setState ( self . Equipment . status , self . Equipment . msg )  def rellenarInput ( self ) :          self . blockSignals ( True ) if len ( self . Equipment . kwargsInput ) == 1 :              self . Entrada . blockSignals ( True ) entrada = self . Equipment . kwargsInput [ 0 ] self . Entrada . setCorriente ( self . Equipment . kwargs [ entrada ] ) self . Entrada . blockSignals ( False )  else :              for i , entrada in enumerate ( self . Equipment . kwargsInput ) :                  widget = self . Entrada . widget ( i ) widget . blockSignals ( True ) widget . setCorriente ( self . Equipment . kwargs [ entrada ] ) widget . blockSignals ( False )   for variable in self . Equipment . kwargsValue :              self . __getattribute__ ( variable ) . setValue ( self . Equipment . kwargs [ variable ] )  for combo in self . Equipment . kwargsList :              self . __getattribute__ ( combo ) . setCurrentIndex ( self . Equipment . kwargs [ combo ] )  for chck in self . Equipment . kwargsCheck :              self . __getattribute__ ( chck ) . setChecked ( self . Equipment . kwargs [ chck ] )  if self . Equipment . indiceCostos is not None :              self . Costos . setFactor ( self . Equipment . kwargs [ <str> ] ) self . Costos . setBase ( self . Equipment . kwargs [ <str> ] ) self . Costos . setActual ( self . Equipment . kwargs [ <str> ] )  self . blockSignals ( False )    