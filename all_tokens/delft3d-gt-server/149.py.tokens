from django . core . management import BaseCommand from delft3dworker . models import Scene from delft3dworker . models import Workflow import logging logging . getLogger ( ) . setLevel ( logging . INFO ) class Command ( BaseCommand ) :      help = <str> def handle ( self , * args , ** options ) :          legacy_scenes = Scene . objects . filter ( workflow = None ) for scene in legacy_scenes :              if scene . scenario . first ( ) is None :                  logging . warning ( <str> . format ( scene . id ) ) continue  scene . info = scene . scenario . first ( ) . template . info scene . _local_scan_files ( ) scene . info . update ( { <str> : True } ) scene . save ( ) logging . info ( <str> . format ( scene . id ) ) workflow = Workflow . objects . create ( scene = scene , name = <str> . format ( scene . scenario . first ( ) . template . shortname , scene . suid ) , progress = scene . progress , version = scene . scenario . first ( ) . template . versions . first ( ) ) workflow . save ( )  for scene in Scene . objects . all ( ) :              if scene . phase not in Scene . phases :                  logging . info ( <str> . format ( scene . id ) ) scene . shift_to_phase ( Scene . phases . idle )      