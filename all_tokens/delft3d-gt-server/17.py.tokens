from __future__ import absolute_import from django . core . management import call_command from django . test import TestCase from fakeredis import FakeStrictRedis from mock import patch , PropertyMock , call from io import StringIO from delft3dworker . models import Scenario from delft3dworker . models import Scene from delft3dworker . models import Template from delft3dworker . models import Workflow class ManagementTest ( TestCase ) :      mock_options = { <str> : True , } def setUp ( self ) :          self . template = Template . objects . create ( name = <str> , ) self . scenario = Scenario . objects . create ( name = <str> , template = self . template ) self . scene = Scene . objects . create ( name = <str> , id = <str> , phase = Scene . phases . new ) self . scene . scenario . set ( [ self . scenario ] ) self . workflow_1_1 = Workflow . objects . create ( scene = self . scene , name = <str> ) self . scene_new = Scene . objects . create ( name = <str> , id = <str> , phase = Scene . phases . fin ) self . scene_new . scenario . set ( [ self . scenario ] ) self . workflow_1_1_new = Workflow . objects . create ( scene = self . scene_new , name = <str> , ) self . get_redis = patch ( <str> ) self . mocked_redis = self . get_redis . start ( ) self . redis = FakeStrictRedis ( ) self . mocked_redis . return_value = self . redis  @ patch ( <str> <str> ) def test_scanbucket_command ( self , mocklocalscan ) :          call_command ( <str> ) self . assertEqual ( mocklocalscan . call_count , 1 )  @ patch ( <str> <str> ) @ patch ( <str> <str> , ** mock_options ) @ patch ( <str> <str> , ** mock_options ) def test_sync_cluster_state ( self , mockWorkflowremove , mockWorkflows , mockWorkflowupdate ) :          mockWorkflows . apply_async ( ) . result = { <str> : } out = StringIO ( ) call_command ( <str> , stderr = out ) self . assertIn ( <str> , out . getvalue ( ) ) self . assertEqual ( mockWorkflowupdate . call_count , 2 ) mockWorkflowupdate . assert_has_calls ( [ call ( { <str> : { <str> : <str> , <str> : { <str> : <str> } } } ) , call ( None ) ] , any_order = True ) self . assertEqual ( mockWorkflowremove . delay . call_count , 1 )  def tearDown ( self ) :          self . redis . flushall ( ) self . get_redis . stop ( )    