def install ( job ) :      service = job . service snapshot_action = service . model . actions [ <str> ] snapshot_action . period = j . data . types . duration . convertToSeconds ( service . model . data . snapshotInterval ) snapshot_action . log = True snapshot_action . lastRun = 0 snapshot_action = service . model . actions [ <str> ] snapshot_action . period = j . data . types . duration . convertToSeconds ( service . model . data . cleanupInterval ) snapshot_action . log = True snapshot_action . lastRun = 0 service . saveAll ( )  def snapshot ( job ) :      from dateutil import parser import datetime service = job . service START_DATE = parser . parse ( service . model . data . startDate ) if service . model . data . endDate != <str> else <str> END_DATE = parser . parse ( service . model . data . endDate ) if service . model . data . endDate != <str> else <str> start_date_valid = START_DATE == <str> or START_DATE < datetime . datetime . now ( ) end_date_valid = END_DATE == <str> or END_DATE > datetime . datetime . now ( ) vdc = service . producers [ <str> ] [ 0 ] g8client = vdc . producers [ <str> ] [ 0 ] cl = j . clients . openvcloud . getFromService ( g8client ) cl = cl . account_get ( vdc . model . data . account ) space = cl . space_get ( vdc . name , vdc . model . data . location ) now = int ( time . time ( ) ) period = j . data . types . duration . convertToSeconds ( service . model . data . snapshotInterval ) if not ( start_date_valid and end_date_valid ) :          return  for name , machine in space . machines . items ( ) :          for snapshot in machine . list_snapshots ( ) :              delta = now - snapshot [ <str> ] if delta < period :                  break  machine . create_snapshot ( name = <str> )    def cleanup ( job ) :      import time service = job . service RETENTION = j . data . types . duration . convertToSeconds ( service . model . data . retention ) vdc = service . producers [ <str> ] [ 0 ] g8client = vdc . producers [ <str> ] [ 0 ] cl = j . clients . openvcloud . getFromService ( g8client ) cl = cl . account_get ( vdc . model . data . account ) space = cl . space_get ( vdc . name , vdc . model . data . location ) now = int ( time . time ( ) ) for name , machine in space . machines . items ( ) :          for snapshot in machine . list_snapshots ( ) :              delta = now - snapshot [ <str> ] if delta >= RETENTION :                  machine . delete_snapshot ( snapshot [ <str> ] )      