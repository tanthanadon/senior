def init_actions_ ( service , args ) :      return { <str> : [ <str> ] }  def test ( job ) :      import sys RESULT_OK = <str> RESULT_FAILED = <str> RESULT_ERROR = <str> % job . service . name model = job . service . model model . data . result = RESULT_OK % job . service . name failures = [ ] blueprints = { <str> : True , <str> : True , <str> : True , <str> : False , } repo = None try :          j . atyourservice . reposDiscover ( ) repo = j . atyourservice . repoGet ( j . sal . fs . joinPaths ( j . dirs . codeDir , <str> ) ) for bp_name , should_success in blueprints . items ( ) :              bp = repo . blueprintGet ( bp_name ) try :                  repo . blueprintExecute ( content = bp . content ) if not should_success :                      failures . append ( <str> % bp_name )   except Exception as e :                  if should_success :                      failures . append ( <str> % ( bp_name , str ( e ) ) )    if failures :              model . data . result = RESULT_FAILED % <str> . join ( failures )   except :          model . data . result = RESULT_ERROR % str ( sys . exc_info ( ) [ : 2 ] )  finally :          job . service . save ( ) if repo :              repo . destroy ( )     