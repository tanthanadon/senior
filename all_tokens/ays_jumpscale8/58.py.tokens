def input ( job ) :      service = job . service repo = service . aysrepo if job . model . args . get ( <str> , <str> ) == <str> :          g8clients = repo . servicesFind ( actor = <str> ) if g8clients :              g8client = g8clients [ 0 ] cl = j . clients . openvcloud . getFromService ( g8client ) if cl . locations :                  location = cl . locations [ 0 ] [ <str> ]  else :                  raise j . exceptions . Input ( <str> )  vdc_info = { <str> : location , <str> : g8client . model . name , } vdc = repo . actorGet ( <str> ) . serviceCreate ( service . name , vdc_info ) args = job . model . args args [ <str> ] = service . name return args  else :              raise j . exceptions . Input ( <str> % service )    def init ( job ) :      service = job . service repo = service . aysrepo vm = { <str> : service . model . data . image , <str> : 10 , <str> : service . parent . name , <str> : 4 , <str> : [ <str> , <str> , <str> , <str> ] , <str> : list ( service . model . data . disk ) } nodevm = repo . actorGet ( <str> ) . serviceCreate ( service . name , vm ) repo . actorGet ( <str> ) . serviceCreate ( service . name , { <str> : nodevm . name } ) service . consume ( nodevm ) fuse_cfg = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : False , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 24 , <str> : <str> } repo . actorGet ( <str> ) . serviceCreate ( <str> , fuse_cfg ) fuse = { <str> : service . name , <str> : [ <str> ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , fuse ) btrfs = { <str> : service . name , <str> : <str> } repo . actorGet ( <str> ) . serviceCreate ( <str> , btrfs ) repo . actorGet ( <str> ) . serviceCreate ( <str> ) docker = { <str> : <str> , <str> : <str> , <str> : service . model . data . fqdn , <str> : [ <str> , <str> ] , <str> : service . name , <str> : [ <str> , <str> ] , <str> : [ <str> , <str> ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , docker ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> } ) app = { <str> : <str> , <str> : service . model . data . fqdn , <str> : <str> , <str> : <str> , <str> : service . model . data . keyAccess , <str> : service . model . data . keySecret , } repo . actorGet ( <str> ) . serviceCreate ( <str> , app ) caddy = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : service . name , <str> : [ <str> , <str> ] , <str> : [ <str> , ] } repo . actorGet ( <str> ) . serviceCreate ( <str> , caddy ) repo . actorGet ( <str> ) . serviceCreate ( <str> , { <str> : <str> } ) proxy = { <str> : <str> , <str> : [ <str> ] , <str> : True , } repo . actorGet ( <str> ) . serviceCreate ( <str> , proxy ) caddy_service = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : True , } repo . actorGet ( <str> ) . serviceCreate ( <str> , caddy_service )  def install ( job ) :      service = job . service repo = service . aysrepo nodevm = repo . serviceGet ( role = <str> , instance = service . name ) machineip = nodevm . model . data . ipPublic machineuniquenumber = j . sal . nettools . ip_to_num ( machineip ) fqdn = <str> . format ( appname = service . model . data . hostprefix , num = machineuniquenumber ) httpdomain = <str> . format ( appname = service . model . data . hostprefix , num = machineuniquenumber ) if service . model . data . enablehttps is False :          httpdomain = httpdomain . replace ( <str> , <str> )  else :          httpdomain = httpdomain . replace ( <str> , <str> )  service . model . data . fqdn = fqdn service . saveAll ( ) scalityconf = repo . serviceGet ( role = <str> , instance = <str> ) scalityconf . model . data . domain = fqdn scalityconf . saveAll ( ) caddyconf = repo . serviceGet ( role = <str> , instance = <str> ) caddyconf . model . data . hostname = httpdomain caddyconf . saveAll ( )   