from scipy . constants import g from lib . unidades import Dimensionless from lib . utilities import refDoc __doi__ = { 1 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 2 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } @ refDoc ( __doi__ , [ 1 ] ) def Ar ( L , rho_p , rho , mu = None , nu = None , g = g ) :      <str> if rho and mu :          nu = mu / rho  elif not nu :          raise Exception ( <str> )  deltarho = abs ( rho_p - rho ) return Dimensionless ( g * L ** 3 * deltarho / ( rho * nu ** 2 ) )  @ refDoc ( __doi__ , [ 1 ] ) def Bi ( h , L , k ) :      <str> return Dimensionless ( h * L / k )  @ refDoc ( __doi__ , [ 2 ] ) def Bo ( rhol , rhog , sigma , L ) :      <str> return ( g * ( rhol - rhog ) * L ** 2 / sigma )  @ refDoc ( __doi__ , [ 2 ] ) def Eu ( dP , rho , V ) :      <str> Eu = dP / ( rho * V ** 2 ) return Eu  @ refDoc ( __doi__ , [ 1 ] ) def Fo ( k , L , t ) :      <str> return Dimensionless ( k * t / L ** 2 )  @ refDoc ( __doi__ , [ 1 ] ) def Fr ( V , L , g = g ) :      <str> return Dimensionless ( V ** 2 / ( L * g ) )  @ refDoc ( __doi__ , [ 1 ] ) def Ga ( L , rho = None , mu = None , nu = None , g = g ) :      <str> if rho and mu :          nu = mu / rho  elif not nu :          raise Exception ( <str> )  return Dimensionless ( g * L ** 3 / nu ** 2 )  @ refDoc ( __doi__ , [ 1 ] ) def Gr ( L , beta , T1 , T2 = 0 , rho = None , mu = None , nu = None , g = g ) :      <str> if rho and mu :          nu = mu / rho  elif not nu :          raise Exception ( <str> )  Gr = g * beta * abs ( T2 - T1 ) * L ** 3 / nu ** 2 return Dimensionless ( Gr )  @ refDoc ( __doi__ , [ 1 ] ) def Gz ( k , D , t = None , L = None , V = None ) :      <str> if V and L :          t = L / V  elif not t :          raise Exception ( <str> )  return Dimensionless ( D ** 2 / k / t )  @ refDoc ( __doi__ , [ 2 ] ) def Kn ( path , L ) :      <str> Kn = path / L return Kn  @ refDoc ( __doi__ , [ 2 ] ) def Le ( D = None , alpha = None , Cp = None , k = None , rho = None ) :      <str> if k and Cp and rho :          alpha = k / ( rho * Cp )  elif alpha :          pass  else :          raise Exception ( <str> )  Le = alpha / D return Le  @ refDoc ( __doi__ , [ 2 ] ) def Ma ( V , c ) :      <str> return V / c  @ refDoc ( __doi__ , [ 1 ] ) def Nu ( alfa , L , k ) :      <str> return Dimensionless ( alfa * L / k )  @ refDoc ( __doi__ , [ 2 ] ) def Pe ( V , L , rho = None , Cp = None , k = None , alpha = None ) :      <str> if rho and Cp and k :          alpha = k / ( rho * Cp )  elif not alpha :          raise Exception ( <str> )  Pe = V * L / alpha return Pe  @ refDoc ( __doi__ , [ 1 ] ) def Pr ( cp = None , k = None , mu = None , nu = None , rho = None , alpha = None ) :      <str> if k and cp and mu :          Pr = cp * mu / k  elif nu and rho and cp and k :          Pr = nu * rho * cp / k  elif nu and alpha :          Pr = nu / alpha  else :          raise Exception ( <str> )  return Dimensionless ( Pr )  @ refDoc ( __doi__ , [ 1 ] ) def Ra ( Pr , Gr ) :      <str> return Dimensionless ( Pr * Gr )  @ refDoc ( __doi__ , [ 1 ] ) def Re ( D , V , rho = None , mu = None , nu = None ) :      <str> if rho and mu :          nu = mu / rho  elif not nu :          raise Exception ( <str> )  return Dimensionless ( V * D / nu )  @ refDoc ( __doi__ , [ 2 ] ) def Sh ( K , L , D ) :      <str> Sh = K * L / D return Sh  @ refDoc ( __doi__ , [ 2 ] ) def Sc ( D , mu = None , nu = None , rho = None ) :      <str> if rho and mu :          Sc = mu / ( rho * D )  elif nu :          Sc = nu / D  else :          raise Exception ( <str> )  return Sc  @ refDoc ( __doi__ , [ 2 ] ) def St ( Nu = None , Pe = None , alfa = None , rho = None , cp = None , V = None ) :      <str> if Nu and Pe :          st = Nu / Pe  elif alfa and rho and cp and V :          st = alfa / ( rho * cp * V )  else :          raise Exception ( <str> )  return Dimensionless ( st )  @ refDoc ( __doi__ , [ 1 ] ) def We ( V , L , rho , sigma ) :      <str> return Dimensionless ( V ** 2 * L * rho / sigma )  if __name__ == <str> :      import doctest doctest . testmod ( )   