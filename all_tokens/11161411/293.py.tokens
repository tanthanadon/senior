from unittest import TestCase from lib import unidades from lib . meos import MEoSBlend class R410a ( MEoSBlend ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 459.0300696 ) Tc = unidades . Temperature ( 344.494 ) Pc = unidades . Pressure ( 4901.2 , <str> ) M = 72.5854 Tt = unidades . Temperature ( 200.0 ) Tb = unidades . Temperature ( 221.71 ) f_acent = 0.296 momentoDipolar = unidades . DipoleMoment ( 0.0 , <str> ) Fi1 = { <str> : [ 1 , - 1 ] , <str> : [ 0 , 1 , - 0.1 ] , <str> : [ 36.8871 , 7.15807 , - 46.87575 ] , <str> : [ 2.0623 , 5.9751 , 1.5612 ] , <str> : [ 697 / Tc , 1723 / Tc , 3875 / Tc ] } lemmon = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 500.0 , <str> : 50000.0 , <str> : 19.51 , <str> : 344.494 , <str> : 4.9012 , <str> : { <str> : [ 1 * 2 , 1.6 * 2 , 2.4 * 2 , 5 * 2 ] , <str> : [ - 7.4411 , 1.9883 , - 2.4925 , - 3.2633 ] } , <str> : { <str> : [ 1 * 2 , 1.8 * 2 , 2.4 * 2 , 4.9 * 2 ] , <str> : [ - 7.2818 , 2.5093 , - 3.2695 , - 2.8022 ] } , <str> : [ 0.987252 , - 0.103017e1 , 0.117666e1 , - 0.138991 , 0.302373e-2 ] , <str> : [ 1 , 1 , 1 , 2 , 5 ] , <str> : [ 0.44 , 1.2 , 2.97 , 2.95 , 0.2 ] , <str> : [ - 0.253639e1 , - 0.196680e1 , - 0.830480 , 0.172477 , - 0.261116 , - 0.745473e-1 , 0.679757 , - 0.652431 , 0.553849e-1 , - 0.710970e-1 , - 0.875332e-3 , 0.200760e-1 , - 0.139761e-1 , - 0.185110e-1 , 0.171939e-1 , - 0.482049e-2 ] , <str> : [ 1 , 2 , 3 , 5 , 5 , 5 , 1 , 1 , 4 , 4 , 9 , 2 , 2 , 4 , 5 , 6 ] , <str> : [ 1.93 , 1.78 , 3. , 0.2 , 0.74 , 3 , 2.1 , 4.3 , 0.25 , 7 , 4.7 , 13 , 16 , 25 , 17 , 7.4 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 ] , <str> : [ 1 ] * 16 } eq = lemmon , _surface = { <str> : [ 0.06443 ] , <str> : [ 1.245 ] } _liquid_Density = { <str> : 1 , <str> : [ 17.62376356934577 , - 34.49248423230781 , 229.4790425881445 , - 332.5139608181856 , 23058076.978355706 , - 31889422.797179773 ] , <str> : [ 0.732 , 1.165 , 2.775 , 3.462 , 15.531 , 15.944 ] } _vapor_Density = { <str> : 3 , <str> : [ - 25.00709732482156 , 34.83593078562833 , - 33.0203056956001 , 61.19129776625034 , - 63.32155175461899 , 149.8912653231937 ] , <str> : [ 0.676 , 0.844 , 1.394 , 2.411 , 3.149 , 7.808 ] } thermo0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 1e-3 , <str> : [ - 8.872 , 7.410e-2 ] , <str> : [ 0 , 1 ] , <str> : 1 , <str> : 1e-3 , <str> : [ 3.576e-2 , - 9.045e-6 , 4.343e-8 , - 3.705e-12 ] , <str> : [ 0 , 0 , 0 , 0 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : 0 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_lemmon ( self ) :          st = R410a ( T = 300 , rhom = 0 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 0 ) self . assertEqual ( round ( st . cvM . JmolK , 3 ) , 50.400 ) self . assertEqual ( round ( st . cpM . JmolK , 3 ) , 58.714 ) self . assertEqual ( round ( st . w , 2 ) , 200.08 ) st = R410a ( T = 300 , P = R410a . _bubbleP ( 300 ) ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.7404 ) self . assertEqual ( round ( st . rhoM , 5 ) , 14.45917 ) self . assertEqual ( round ( st . cvM . JmolK , 3 ) , 67.147 ) self . assertEqual ( round ( st . cpM . JmolK , 2 ) , 125.50 ) self . assertEqual ( round ( st . w , 2 ) , 418.60 ) st = R410a ( T = 300 , P = R410a . _dewP ( 300 ) ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.7351 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.95997 ) self . assertEqual ( round ( st . cvM . JmolK , 3 ) , 67.335 ) self . assertEqual ( round ( st . cpM . JmolK , 2 ) , 107.60 ) self . assertEqual ( round ( st . w , 2 ) , 160.94 ) st = R410a ( T = 250 , rhom = 18 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 17.651 ) self . assertEqual ( round ( st . cvM . JmolK , 3 ) , 62.521 ) self . assertEqual ( round ( st . cpM . JmolK , 3 ) , 98.401 ) self . assertEqual ( round ( st . w , 2 ) , 800.83 )    