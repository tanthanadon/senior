from unittest import TestCase from lib import unidades from lib . meos import MEoS class iButene ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 233.9633544 ) Tc = unidades . Temperature ( 418.09 ) Pc = unidades . Pressure ( 4009.8 , <str> ) M = 56.10632 Tt = unidades . Temperature ( 132.4 ) Tb = unidades . Temperature ( 266.15 ) f_acent = 0.193 momentoDipolar = unidades . DipoleMoment ( 0.5 , <str> ) id = 27 Fi1 = { <str> : [ 1 , 3. ] , <str> : [ 0 , 1 ] , <str> : [ - 0.12737888 , 2.3125128 ] , <str> : [ 4.8924 , 7.832 , 7.2867 , 8.7293 ] , <str> : [ 399 / Tc , 1270 / Tc , 2005 / Tc , 4017 / Tc ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 550.0 , <str> : 50000.0 , <str> : 13.67 , <str> : [ 0.77111 , - 2.7971 , 1.0118 , 0.02073 , 0.085086 , 0.00021968 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.12 , 1.3 , 1.74 , 2.1 , 0.28 , 0.69 ] , <str> : [ 0.20633 , - 0.078843 , - 0.23726 , - 0.080211 , - 0.027001 , 0.013072 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.75 , 2. , 4.4 , 4.7 , 15. , 14. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } eq = lemmon , _PR = [ - 0.1815 , - 16.3103 ] _surface = { <str> : [ 0.0545 ] , <str> : [ 1.23 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.68973e1 , 0.12475e1 , - 0.25441e1 , - 0.29282e1 , 0.15778e1 ] , <str> : [ 1. , 1.5 , 3.16 , 6.2 , 7.0 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.62591e2 , - 0.20805e3 , 0.33243e3 , - 0.29555e3 , 0.11148e3 ] , <str> : [ 0.65 , 0.8 , 0.98 , 1.16 , 1.3 ] } _vapor_Density = { <str> : 2 , <str> : [ - 3.1841 , - 6.4014 , - 9.3817 , - 0.11160e2 , - 0.52298e2 , - 0.12195e3 ] , <str> : [ 0.431 , 1.29 , 3.3 , 3.54 , 7.3 , 15.8 ] }  class Test ( TestCase ) :      def test_shortLemmon ( self ) :          st = iButene ( T = 350 , rho = 0 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 0 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 29966 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 92.121 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 100.44 ) self . assertEqual ( round ( st . w , 2 ) , 237.80 ) st = iButene ( T = 350 , rho = 0.3 * iButene . M ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.75754 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 28666 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 88.966 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 96.794 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 112.57 ) self . assertEqual ( round ( st . w , 2 ) , 211.02 ) st = iButene ( T = 350 , rho = 10 * iButene . M ) self . assertEqual ( round ( st . P . MPa , 3 ) , 17.776 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 11782 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 32.951 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 101.72 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 139.45 ) self . assertEqual ( round ( st . w , 2 ) , 838.25 ) st = iButene ( T = 440 , rho = 4 * iButene . M ) self . assertEqual ( round ( st . P . MPa , 4 ) , 5.4086 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 30169 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 82.345 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 127.28 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 407.00 ) self . assertEqual ( round ( st . w , 2 ) , 151.13 )    