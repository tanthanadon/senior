from unittest import TestCase from lib import unidades from lib . meos import MEoS class Toluene ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 291.98665298 ) Tc = unidades . Temperature ( 591.75 ) Pc = unidades . Pressure ( 4126.3 , <str> ) M = 92.13842 Tt = unidades . Temperature ( 178.0 ) Tb = unidades . Temperature ( 383.75 ) f_acent = 0.2657 momentoDipolar = unidades . DipoleMoment ( 0.36 , <str> ) id = 41 Fi1 = { <str> : [ 1 , 3. ] , <str> : [ 0 , 1 ] , <str> : [ 3.5241174832 , 1.1360823464 ] , <str> : [ 1.6994 , 8.0577 , 17.059 , 8.4567 , 8.6423 ] , <str> : [ 190 / Tc , 797 / Tc , 1619 / Tc , 3072 / Tc , 7915 / Tc ] } CP1 = { <str> : 4. , <str> : [ ] , <str> : [ ] , <str> : [ 1.6994 , 8.0577 , 17.059 , 8.4567 , 8.6423 ] , <str> : [ 190 , 797 , 1619 , 3072 , 7915 ] } CP2 = { <str> : - 0.321892 / 8.3143 * 92.142 , <str> : [ 0.579338e-2 / 8.3143 * 92.142 , - 0.348446e-5 / 8.3143 * 92.142 , 0.143577e-8 / 8.3143 * 92.142 , - 0.71935e-12 / 8.3143 * 92.142 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : [ ] , <str> : [ ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 700.0 , <str> : 500000.0 , <str> : 10.581 , <str> : [ 0.96464 , - 2.7855 , 0.86712 , - 0.18860 , 0.11804 , 0.00025181 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.25 , 1.125 , 1.5 , 1.375 , 0.25 , 0.875 ] , <str> : [ 0.57196 , - 0.029287 , - 0.43351 , - 0.12540 , - 0.028207 , 0.014076 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.625 , 1.75 , 3.625 , 3.625 , 14.5 , 12 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } polt = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.3143 , <str> : Fi1 , <str> : <str> , <str> : 298.0 , <str> : 673.0 , <str> : 25000.0 , <str> : 9.7242 , <str> : [ - 0.343905499875 , 0.737562743137 , - 0.158601557810 , 0.113243121503e1 , - 0.253681929563e1 , 0.104584338973e1 , - 0.115732119380e1 , 0.176205273278 , - 0.242942016719 , 0.398925293195 , 0.193881828889 , 0.199426230143 , - .306598708746 , - 0.114697533947e-1 , 0.230068676459e-1 , 0.658341220591e-2 ] , <str> : [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 5 ] , <str> : [ 3 , 4 , 5 , 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 0 , 1 , 0 , 1 , 1 ] , <str> : [ 0.343905499875 , - 0.737562743137 , 0.15860155781 , 0.40707928397 , - 0.68140614165 , 0.110425925004 ] , <str> : [ 0 , 0 , 0 , 2 , 2 , 2 ] , <str> : [ 3 , 4 , 5 , 3 , 4 , 5 ] , <str> : [ 2 ] * 6 , <str> : [ 0.841 ] * 6 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 1.34060172 , 1.01624262 , - 3.27810202 , 9.69209624e-2 , 2.61950176e-4 , - 1.58891991e-1 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ 6.28559812e-2 , - 8.42364946e-2 , 4.49701117e-1 , - 1.08658876e-2 , - 3.83733669e-1 , 2.21127543e-2 , - 9.54658223e-2 , - 1.77905259e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } eq = lemmon , polt , sun _surface = { <str> : [ 0.06897 ] , <str> : [ 1.291 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 7.45201 , 2.03681 , - 1.43777 , - 3.51652 , - 1.75818 ] , <str> : [ 1.0 , 1.5 , 2.13 , 4.0 , 12.0 ] } _liquid_Density = { <str> : 1 , <str> : [ 14.0531 , - 32.5072 , 35.1091 , - 16.0694 , 2.38699 ] , <str> : [ 0.54 , 0.72 , 0.93 , 1.2 , 2.0 ] } _vapor_Density = { <str> : 2 , <str> : [ - 2.97587 , - 5.34939 , - 19.1781 , - 24.0058 , - 32.4034 , - 140.645 ] , <str> : [ 0.425 , 1.06 , 3.0 , 6.3 , 7.0 , 15.0 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 472 , <str> : 0.524 , <str> : 0.021357 , <str> : [ 0.401080 , - 0.476409 , 0 , 0.069442 ] , <str> : 472 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.0125 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 591.75 , <str> : 291.987 , <str> : [ 19.919216 , - 2.6557905 , - 10.113817 ] , <str> : [ 0.5 , 0.5 , - 0.5 ] , <str> : [ 5 / 3 , 14 / 3 , 5 / 3 ] , <str> : [ - 135.904211 ] , <str> : [ - 0.5 ] , <str> : [ 11 / 3 ] , <str> : [ 1 , - 7.9962719 , - 11.014795 ] , <str> : [ 0 , 0 , - 1 ] , <str> : [ 2 , 0 , 0 ] } _viscosity = visco0 , thermo0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 1e-3 , <str> : [ 5.8808 , - 6.1693e-2 , 3.4151e-4 , - 3.042e-7 , 1.2868e-10 , - 2.1303e-14 ] , <str> : [ 0 , 1 , 2 , 3 , 4 , 5 ] , <str> : 591.75 , <str> : 291.992 , <str> : 1 , <str> : [ - 5.18530e-2 , 1.33846e-1 , - 1.20446e-1 , 5.30211e-2 , - 1.00604e-2 , 6.33457e-4 , 5.17449e-2 , - 1.21902e-1 , 1.37748e-1 , - 7.32792e-2 , 1.72914e-2 , - 1.38585e-3 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] , <str> : [ 1 , 2 , 3 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 6 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.02 , <str> : 0.22e-9 , <str> : 0.05 , <str> : 0.62e-9 , <str> : 887.625 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_shortLemmon ( self ) :          st = Toluene ( T = 593 , rhom = 3 ) self . assertEqual ( round ( st . P . kPa , 3 ) , 4186.620 ) self . assertEqual ( round ( st . hM . kJkmol , 3 ) , 52937.550 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 105.422 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 214.488 ) self . assertEqual ( round ( st . cpM . kJkmolK , 3 ) , 7705.723 ) self . assertEqual ( round ( st . w , 3 ) , 89.464 )  def test_Avgeri ( self ) :          st = Toluene ( T = 200 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 10 ) , 0.0000010833 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 953.54 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 0 ) , 4583 ) self . assertEqual ( round ( st . Gas . rho , 9 ) , 0.000060025 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 4.91 ) st = Toluene ( T = 300 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 0.0041774 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 860.44 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 539.7 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.15493 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 7.01 ) st = Toluene ( T = 400 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.15731 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 762.19 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 221.3 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 4.6125 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 9.14 ) st = Toluene ( T = 500 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.1766 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 638.14 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 116.0 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 33.644 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 11.55 ) st = Toluene ( T = 580 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 3.5688 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 446.99 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 53.0 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 153.00 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 17.17 ) self . assertEqual ( round ( Toluene ( T = 300 , rho = 0 ) . mu . muPas , 3 ) , 7.023 ) self . assertEqual ( round ( Toluene ( T = 400 , rho = 0 ) . mu . muPas , 3 ) , 9.243 ) self . assertEqual ( round ( Toluene ( T = 550 , rho = 0 ) . mu . muPas , 3 ) , 12.607 ) self . assertEqual ( round ( Toluene ( T = 300 , rho = 865 ) . mu . muPas , 2 ) , 566.78 ) self . assertEqual ( round ( Toluene ( T = 400 , rho = 770 ) . mu . muPas , 2 ) , 232.75 ) self . assertEqual ( round ( Toluene ( T = 550 , rho = 550 ) . mu . muPas , 3 ) , 80.267 )  def test_Assael ( self ) :          self . assertEqual ( round ( Toluene ( T = 298.15 , rho = 0 ) . k . mWmK , 3 ) , 10.749 ) self . assertEqual ( round ( Toluene ( T = 298.15 , rho = 862.948 ) . k . mWmK , 2 ) , 130.65 ) self . assertEqual ( round ( Toluene ( T = 298.15 , rho = 876.804 ) . k . mWmK , 2 ) , 136.69 ) self . assertEqual ( round ( Toluene ( T = 595 , rho = 0 ) . k . mWmK , 3 ) , 40.538 ) self . assertEqual ( round ( Toluene ( T = 595 , rho = 46.512 ) . k . mWmK , 3 ) , 41.619 ) self . assertEqual ( round ( Toluene ( T = 185 , rho = 0 ) . k . mWmK , 4 ) , 4.3758 ) self . assertEqual ( round ( Toluene ( T = 185 , rho = 968.821 ) . k . mWmK , 2 ) , 158.23 )    