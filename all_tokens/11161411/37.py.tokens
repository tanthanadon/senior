import os from PyQt5 import QtCore , QtGui , QtWidgets from UI . widgets import ColorSelector , Entrada_con_unidades , PFDLineCombo from tools import UI_confResolution class Widget ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Widget , self ) . __init__ ( parent ) lyt = QtWidgets . QGridLayout ( self ) lyt . setContentsMargins ( 0 , 0 , 0 , 0 ) scroll = QtWidgets . QScrollArea ( ) scroll . setFrameStyle ( QtWidgets . QFrame . NoFrame ) lyt . addWidget ( scroll ) dlg = QtWidgets . QWidget ( ) layout = QtWidgets . QGridLayout ( dlg ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . ColorButtonEntrada = ColorSelector ( ) layout . addWidget ( self . ColorButtonEntrada , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . ColorButtonSalida = ColorSelector ( ) layout . addWidget ( self . ColorButtonSalida , 2 , 2 ) group = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group , 3 , 1 , 1 , 3 ) lyt = QtWidgets . QHBoxLayout ( group ) self . lineFormat = ConfLine ( ) lyt . addWidget ( self . lineFormat ) group = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group , 4 , 1 , 1 , 3 ) lyt = QtWidgets . QHBoxLayout ( group ) self . resolution = UI_confResolution . UI_confResolution_widget ( config ) lyt . addWidget ( self . resolution ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 14 , 1 , 1 , 4 ) scroll . setWidget ( dlg ) if config and config . has_section ( <str> ) :              self . ColorButtonEntrada . setColor ( config . get ( <str> , <str> ) ) self . ColorButtonSalida . setColor ( config . get ( <str> , <str> ) ) self . lineFormat . ColorButtonLine . setColor ( config . get ( <str> , <str> ) ) self . lineFormat . groupJoint . button ( ( config . getint ( <str> , <str> ) + 2 ) * - 1 ) . setChecked ( True ) self . lineFormat . mitterLimit . setValue ( config . getfloat ( <str> , <str> ) ) self . lineFormat . groupCap . button ( ( config . getint ( <str> , <str> ) + 2 ) * - 1 ) . setChecked ( True ) self . lineFormat . guion . setCurrentIndex ( config . getint ( <str> , <str> ) ) self . lineFormat . dashOffset . setValue ( config . getfloat ( <str> , <str> ) ) self . lineFormat . width . setValue ( config . getfloat ( <str> , <str> ) )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config = self . resolution . value ( config ) config . set ( <str> , <str> , self . ColorButtonEntrada . color . name ( ) ) config . set ( <str> , <str> , self . ColorButtonSalida . color . name ( ) ) config . set ( <str> , <str> , self . lineFormat . ColorButtonLine . color . name ( ) ) config . set ( <str> , <str> , str ( self . lineFormat . width . value ) ) config . set ( <str> , <str> , str ( abs ( self . lineFormat . groupJoint . checkedId ( ) ) - 2 ) ) config . set ( <str> , <str> , str ( self . lineFormat . mitterLimit . value ) ) config . set ( <str> , <str> , str ( abs ( self . lineFormat . groupCap . checkedId ( ) ) - 2 ) ) config . set ( <str> , <str> , str ( self . lineFormat . guion . currentIndex ( ) ) ) config . set ( <str> , <str> , str ( self . lineFormat . dashOffset . value ) ) return config   class Dialog ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Dialog , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) self . widget = Widget ( config ) layout . addWidget ( self . widget ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )  def value ( self , config ) :          config = self . widget . value ( config ) return config   class ConfLine ( QtWidgets . QWidget ) :      join = [ QtCore . Qt . MiterJoin , QtCore . Qt . BevelJoin , QtCore . Qt . RoundJoin ] cap = [ QtCore . Qt . FlatCap , QtCore . Qt . RoundCap , QtCore . Qt . SquareCap ] line = [ QtCore . Qt . SolidLine , QtCore . Qt . DashLine , QtCore . Qt . DotLine , QtCore . Qt . DashDotLine , QtCore . Qt . DashDotDotLine ] def __init__ ( self , pen = None , parent = None ) :          super ( ConfLine , self ) . __init__ ( parent ) lyt = QtWidgets . QVBoxLayout ( self ) lyt1 = QtWidgets . QHBoxLayout ( ) lyt1 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . ColorButtonLine = ColorSelector ( ) self . ColorButtonLine . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt1 . addWidget ( self . ColorButtonLine ) self . width = Entrada_con_unidades ( float , width = 50 , decimales = 1 , spinbox = True , step = 0.1 , textounidad = <str> ) self . width . entrada . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt1 . addWidget ( self . width ) lyt . addLayout ( lyt1 ) lyt2 = QtWidgets . QHBoxLayout ( ) lyt2 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . mitterLimit = Entrada_con_unidades ( float , width = 50 , decimales = 1 , spinbox = True , step = 0.1 ) self . mitterLimit . entrada . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt2 . addWidget ( self . mitterLimit ) toolJoinMitter = QtWidgets . QToolButton ( ) toolJoinMitter . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolJoinMitter . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolJoinMitter . setCheckable ( True ) toolJoinMitter . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> <str> ) ) lyt2 . addWidget ( toolJoinMitter ) toolJoinBevel = QtWidgets . QToolButton ( ) toolJoinBevel . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolJoinBevel . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolJoinBevel . setCheckable ( True ) toolJoinBevel . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> <str> ) ) lyt2 . addWidget ( toolJoinBevel ) toolJoinRound = QtWidgets . QToolButton ( ) toolJoinRound . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolJoinRound . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolJoinRound . setCheckable ( True ) toolJoinRound . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt2 . addWidget ( toolJoinRound ) self . groupJoint = QtWidgets . QButtonGroup ( ) self . groupJoint . addButton ( toolJoinMitter ) self . groupJoint . addButton ( toolJoinBevel ) self . groupJoint . addButton ( toolJoinRound ) self . groupJoint . buttonClicked [ <str> ] . connect ( self . mitterlimitEnabled ) lyt . addLayout ( lyt2 ) lyt3 = QtWidgets . QHBoxLayout ( ) lyt3 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) toolCapFlat = QtWidgets . QToolButton ( ) toolCapFlat . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolCapFlat . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolCapFlat . setCheckable ( True ) toolCapFlat . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> <str> ) ) lyt3 . addWidget ( toolCapFlat ) toolCapRound = QtWidgets . QToolButton ( ) toolCapRound . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolCapRound . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolCapRound . setCheckable ( True ) toolCapRound . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt3 . addWidget ( toolCapRound ) toolCapSquare = QtWidgets . QToolButton ( ) toolCapSquare . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) toolCapSquare . setIconSize ( QtCore . QSize ( 24 , 24 ) ) toolCapSquare . setCheckable ( True ) toolCapSquare . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> <str> ) ) lyt3 . addWidget ( toolCapSquare ) self . groupCap = QtWidgets . QButtonGroup ( ) self . groupCap . addButton ( toolCapFlat ) self . groupCap . addButton ( toolCapRound ) self . groupCap . addButton ( toolCapSquare ) lyt . addLayout ( lyt3 ) lyt4 = QtWidgets . QHBoxLayout ( ) lyt4 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . guion = PFDLineCombo ( ) lyt4 . addWidget ( self . guion ) self . dashOffset = Entrada_con_unidades ( float , width = 50 , decimales = 1 , spinbox = True , step = 0.1 ) self . dashOffset . entrada . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt4 . addWidget ( self . dashOffset ) lyt . addLayout ( lyt4 ) lyt . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) ) if pen :              self . ColorButtonLine . setColor ( pen . color ( ) . name ( ) ) self . groupJoint . button ( ( self . join . index ( pen . joinStyle ( ) ) + 2 ) * - 1 ) . setChecked ( True ) self . mitterLimit . setValue ( pen . miterLimit ( ) ) self . groupCap . button ( ( self . cap . index ( pen . capStyle ( ) ) + 2 ) * - 1 ) . setChecked ( True ) self . guion . setCurrentIndex ( self . line . index ( pen . style ( ) ) ) self . dashOffset . setValue ( pen . dashOffset ( ) ) self . width . setValue ( pen . widthF ( ) )   def mitterlimitEnabled ( self , id ) :          self . mitterLimit . setEnabled ( id == - 2 )  def pen ( self ) :          pen = QtGui . QPen ( QtGui . QColor ( self . ColorButtonLine . color . name ( ) ) ) pen . setWidthF ( self . width . value ) pen . setJoinStyle ( self . join [ abs ( self . groupJoint . checkedId ( ) ) - 2 ] ) pen . setMiterLimit ( self . mitterLimit . value ) pen . setCapStyle ( self . cap [ abs ( self . groupCap . checkedId ( ) ) - 2 ] ) pen . setStyle ( self . line [ self . guion . currentIndex ( ) ] ) pen . setDashOffset ( self . dashOffset . value ) return pen   class ConfLineDialog ( QtWidgets . QDialog , ConfLine ) :      def __init__ ( self , pen = None , parent = None ) :          super ( ConfLineDialog , self ) . __init__ ( pen ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) buttonBox . accepted . connect ( self . accept ) buttonBox . rejected . connect ( self . reject ) self . layout ( ) . addWidget ( buttonBox )   if __name__ == <str> :      import sys from configparser import ConfigParser app = QtWidgets . QApplication ( sys . argv ) conf_dir = os . path . expanduser ( <str> ) + <str> config = ConfigParser ( ) config . read ( conf_dir + <str> ) Dialog = Dialog ( config ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   