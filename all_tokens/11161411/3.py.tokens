import os from matplotlib import image from PyQt5 import QtGui , QtWidgets from scipy import arange , arctan , logspace , pi from lib . plot import mpl from lib . heatTransfer import ( efectividad , TemperatureEffectiveness , CorrectionFactor , Fi , NTU_fPR ) class Chart ( QtWidgets . QDialog ) :      PosImage = None def __init__ ( self , parent = None ) :          super ( Chart , self ) . __init__ ( parent ) self . setWindowTitle ( self . title ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . flow = QtWidgets . QComboBox ( ) for text , flow in self . flujo :              self . flow . addItem ( text )  self . flow . currentIndexChanged . connect ( self . plot ) layout . addWidget ( self . flow , 1 , 2 ) self . mixed = QtWidgets . QComboBox ( ) for text in self . mezclado :              self . mixed . addItem ( text )  self . mixed . currentIndexChanged . connect ( self . changeMixed ) layout . addWidget ( self . mixed , 1 , 3 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 1 , 4 ) self . diagrama = mpl ( self , width = 10 , height = 10 ) self . image = self . diagrama . fig . figimage ( [ [ 0 ] ] , 0 , 0 , zorder = 1 ) logo = image . imread ( <str> ) self . logo = self . diagrama . fig . figimage ( logo , 0 , 0 , zorder = 1 ) self . botonGuardar = QtWidgets . QToolButton ( ) icon = os . environ [ <str> ] + <str> self . botonGuardar . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( icon ) ) ) self . botonGuardar . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonGuardar . clicked . connect ( self . save ) layout . addWidget ( self . botonGuardar , 5 , 1 ) layout . addWidget ( self . diagrama , 2 , 1 , 1 , 6 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 5 , 2 , 1 , 5 ) self . plot ( 0 ) self . showMaximized ( ) self . refixImage ( )  def resizeEvent ( self , event ) :          self . refixImage ( ) QtWidgets . QDialog . resizeEvent ( self , event )  def changeMixed ( self , indice ) :          modelo = self . flow . currentIndex ( ) self . plot ( modelo )  def refixImage ( self , event = None ) :          xmin , xmax = self . diagrama . ax . get_xlim ( ) ymin , ymax = self . diagrama . ax . get_ylim ( ) a = self . PosLogo [ 0 ] * xmax + ( 1 - self . PosLogo [ 0 ] ) * xmin b = self . PosLogo [ 1 ] * ymax + ( 1 - self . PosLogo [ 1 ] ) * ymin x , y = self . diagrama . ax . transData . transform_point ( ( a , b ) ) hlogo , wlogo = self . logo . get_size ( ) himage , wimage = self . image . get_size ( ) if self . PosLogo [ 0 ] == 1 :              x -= wlogo xi = x - wimage - 20  else :              xi = x + wlogo + 20  if self . PosLogo [ 1 ] == 1 :              yi = y - himage - 10 y -= hlogo  else :              yi = y + 10  self . logo . ox = x self . logo . oy = y if self . PosImage :              a = self . PosImage [ 0 ] * xmax + ( 1 - self . PosImage [ 0 ] ) * xmin b = self . PosImage [ 1 ] * ymax + ( 1 - self . PosImage [ 1 ] ) * ymin xi , yi = self . diagrama . ax . transData . transform_point ( ( a , b ) ) if self . PosImage [ 0 ] == 1 :                  xi -= wimage + 10  else :                  xi += 10  if self . PosImage [ 1 ] == 1 :                  yi -= himage + 10  else :                  yi += 10   self . image . ox = xi self . image . oy = yi self . diagrama . draw ( )  def save ( self ) :          fname = str ( QtWidgets [ 0 ] . QFileDialog . getSaveFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , <str> , <str> ) ) self . diagrama . fig . savefig ( fname , facecolor = <str> )   class Efectividad ( Chart ) :      title = QtWidgets . QApplication . translate ( <str> , <str> ) flujo = [ ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) ] mezclado = ( <str> , <str> ) PosLogo = ( 0 , 1 ) PosImage = ( 1 , 0 ) def plot ( self , indice ) :          self . diagrama . ax . clear ( ) self . diagrama . ax . set_xlim ( 0 , 6 ) self . diagrama . ax . set_ylim ( 0 , 1 ) title = QtWidgets . QApplication . translate ( <str> , <str> ) self . diagrama . ax . set_title ( title , size = <str> ) self . diagrama . ax . set_xlabel ( <str> , size = <str> ) self . diagrama . ax . set_ylabel ( <str> , size = <str> ) flujo = self . flujo [ indice ] [ 1 ] self . mixed . setVisible ( flujo == <str> ) kw = { } if flujo == <str> :              kw [ <str> ] = str ( self . mixed . currentText ( ) )  C = [ 0 , 0.2 , 0.4 , 0.6 , 0.8 , 1. ] NTU = arange ( 0 , 6.1 , 0.1 ) for ci in C :              e = [ 0 ] for N in NTU [ 1 : ] :                  e . append ( efectividad ( N , ci , flujo , ** kw ) )  self . diagrama . plot ( NTU , e , <str> ) fraccionx = ( NTU [ 40 ] - NTU [ 30 ] ) / 6 fracciony = ( e [ 40 ] - e [ 30 ] ) try :                  angle = arctan ( fracciony / fraccionx ) * 360 / 2 / pi  except ZeroDivisionError :                  angle = 90  self . diagrama . ax . annotate ( <str> % ci , ( NTU [ 29 ] , e [ 30 ] ) , rotation = angle , size = <str> , ha = <str> , va = <str> )  self . diagrama . draw ( ) img = image . imread ( <str> % flujo ) self . image . set_data ( img ) self . refixImage ( )   class TemperatureEfectividad ( Chart ) :      title = QtWidgets . QApplication . translate ( <str> , <str> ) flujo = [ ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) ] mezclado = ( <str> , <str> ) PosLogo = ( 0 , 1 ) def plot ( self , indice ) :          self . diagrama . ax . clear ( ) self . diagrama . ax . set_xlim ( 0.1 , 10 ) self . diagrama . ax . set_ylim ( 0 , 1 ) self . diagrama . ax . set_xscale ( <str> ) self . diagrama . ax . set_title ( QtWidgets . QApplication . translate ( <str> , <str> ) , size = <str> ) self . diagrama . ax . set_xlabel ( <str> , size = <str> ) self . diagrama . ax . set_ylabel ( <str> , size = <str> ) self . diagrama . ax . set_xticklabels ( [ <str> , <str> , <str> ] ) xticklabels = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . diagrama . ax . set_xticklabels ( xticklabels , minor = True ) flujo = self . flujo [ indice ] [ 1 ] self . mixed . setVisible ( flujo == <str> ) kwargs = { } if flujo == <str> :              kwargs [ <str> ] = str ( self . mixed . currentText ( ) )  R = [ 0.2 , 0.3 , 0.4 , 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1. , 1.2 , 1.4 , 1.6 , 1.8 , 2. , 2.5 , 3. , 4. , 6. , 8. , 10. , 15. ] NTU = logspace ( - 1.5 , 1 , 100 ) for ri in R :              e = [ 0 ] + [ TemperatureEffectiveness ( N , ri , flujo , ** kwargs ) for N in NTU [ 1 : ] ] self . diagrama . plot ( NTU , e , <str> ) self . diagrama . ax . annotate ( <str> % ri , ( NTU [ - 1 ] , e [ - 1 ] ) , size = <str> , ha = <str> , va = <str> )  self . diagrama . draw ( ) if flujo == <str> and self . mixed . currentIndex ( ) :              img = image . imread ( <str> % flujo )  else :              img = image . imread ( <str> % flujo )  self . image . set_data ( img ) self . refixImage ( )   class F ( Chart ) :      title = QtWidgets . QApplication . translate ( <str> , <str> ) flujo = [ ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) ] mezclado = ( <str> , <str> ) PosLogo = ( 1 , 1 ) PosImage = ( 0 , 0 ) def plot ( self , indice ) :          self . diagrama . ax . clear ( ) self . diagrama . ax . set_xlim ( 0 , 1 ) self . diagrama . ax . set_ylim ( 0 , 1 ) self . diagrama . ax . set_title ( QtWidgets . QApplication . translate ( <str> , <str> , None ) , size = <str> ) self . diagrama . ax . set_xlabel ( <str> , size = <str> ) self . diagrama . ax . set_ylabel ( <str> , size = <str> ) flujo = self . flujo [ indice ] [ 1 ] kwargs = { } if flujo == <str> :              kwargs [ <str> ] = str ( self . mixed . currentText ( ) )  R = [ 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1. , 1.2 , 1.4 , 1.6 , 1.8 , 2 , 2.5 , 3 , 4 , 6 , 8 , 10 , 15 , 20 ] P = arange ( 0 , 1.01 , 0.01 ) for ri in R :              f = [ CorrectionFactor ( p , ri , flujo , ** kwargs ) for p in P ] self . diagrama . plot ( P , f , <str> )  self . diagrama . draw ( ) img = image . imread ( <str> % flujo ) self . image . set_data ( img ) self . refixImage ( )   class Phi ( Chart ) :      title = QtWidgets . QApplication . translate ( <str> , <str> , None ) flujo = [ ( QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) ] mezclado = ( <str> , <str> ) PosLogo = ( 1 , 1 ) def plot ( self , indice ) :          self . diagrama . ax . clear ( ) self . diagrama . ax . set_xlim ( 0 , 1 ) self . diagrama . ax . set_ylim ( 0 , 1 ) self . diagrama . ax . set_title ( QtWidgets . QApplication . translate ( <str> , <str> , None ) , size = <str> ) self . diagrama . ax . set_xlabel ( <str> , size = <str> ) self . diagrama . ax . set_ylabel ( <str> , size = <str> ) flujo = self . flujo [ indice ] [ 1 ] kwargs = { } if flujo == <str> :              kwargs [ <str> ] = str ( self . mixed . currentText ( ) )  R = [ 0 , 0.1 , 0.2 , 0.3 , 0.4 , 0.5 , 0.6 , 0.7 , 0.8 , 0.9 , 1. , 1.2 , 1.4 , 1.6 , 1.8 , 2 , 2.5 , 3 , 4 , 6 , 8 , 10 ] P = arange ( 0 , 1.01 , 0.01 ) for ri in R :              f = [ Fi ( p , ri , flujo , ** kwargs ) for p in P ] self . diagrama . plot ( P , f , <str> )  NTU = [ 0.2 , 0.4 , 0.6 , 0.8 , 1. , 1.2 , 1.4 , 1.6 , 1.8 , 2.0 , 2.5 , 3. ] for ntu in NTU :              self . diagrama . plot ( [ 0 , 1 ] , [ 0 , 1. / ntu ] , <str> , linestyle = <str> )  self . diagrama . draw ( ) img = image . imread ( <str> % flujo ) self . image . set_data ( img ) self . refixImage ( )   chartHE = ( Efectividad , TemperatureEfectividad , F , Phi ) if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) dialogo = Fi ( ) dialogo . show ( ) sys . exit ( app . exec_ ( ) )   