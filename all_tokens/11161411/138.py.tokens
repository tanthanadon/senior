from configparser import ConfigParser import json import logging import os import time from PyQt5 . QtWidgets import QApplication from PyQt5 import QtCore import scipy . constants as k from lib . config import conf_dir , getMainWindowConfig from lib . utilities import representacion from tools . firstrun import getrates k . tonUS = 2000 * k . lb k . tonUK = 2240 * k . lb k . TNT = 4.184e12 k . BarrilOil = 5.8e6 * k . Btu k . TmOil = 4.1868e10 k . TmCoal = 2.93e10 k . slug = k . lb * k . g / k . foot k . debye = 1. / k . c * k . zepto k . pdl = k . foot * k . lb k . Rankine = 1 / 1.8 k . Reaumur = 1 / 0.8 k . milla = 1609.344 k . milla_nau = 1852 k . acre = 4840 * k . yard ** 2 k . qtUSliq = 0.25 * k . gallon k . qtUSdry = 67.2 * k . inch ** 3 k . qtUK = 0.25 * k . gallon_imp k . cwtUS = 112 * k . lb k . cwtUK = 100 * k . lb k . CV = k . kgf * 75 k . ozf = k . oz * k . g k . TonfUK = k . g * k . tonUK k . TonfUS = k . g * k . tonUS k . statV = 300 def C2K ( C ) :      return C + 273.15  def K2C ( K ) :      return K - 273.15  def K2R ( K ) :      return K * 1.8  def R2K ( K ) :      return K / 1.8  def F2K ( F ) :      return ( ( F - 32 ) / 1.8 ) + 273.15  def K2F ( K ) :      return 1.8 * ( K - 273.15 ) + 32  def Re2K ( Re ) :      return ( Re * 1.25 ) + 273.15  def K2Re ( K ) :      return ( K - 273.15 ) / 1.25  class unidad ( float ) :      __title__ = <str> rates = { } __text__ = [ ] __units__ = [ ] __tooltip__ = [ ] _magnitudes = [ ] __units_set__ = [ ] def __init__ ( self , data , unit = <str> , magnitud = <str> ) :          if not magnitud :              magnitud = self . __class__ . __name__  self . magnitud = magnitud if data is None :              self . _data = 0 self . code = <str>  else :              self . _data = float ( data ) self . code = <str>  if unit == <str> :              Config = getMainWindowConfig ( ) unit = self . __units__ [ Config . getint ( <str> , magnitud ) ]  elif not unit :              unit = self . __units__ [ 0 ]  self . _data = self . _getBaseValue ( data , unit , magnitud ) for key in self . __class__ . rates :              self . __setattr__ ( key , self . _data / self . __class__ . rates [ key ] )  logging . debug ( <str> % ( self . __class__ . __name__ , self . _data ) )  def __new__ ( cls , data , unit = <str> , magnitud = <str> ) :          if not magnitud :              magnitud = cls . __name__  if data is None :              data = 0  elif unit :              data = cls . _getBaseValue ( data , unit , magnitud )  return float . __new__ ( cls , data )  @ classmethod def _getBaseValue ( cls , data , unit , magnitud ) :          if data is None :              data = 0  else :              data = float ( data )  if unit == <str> :              Config = getMainWindowConfig ( ) unit = cls . __units__ [ Config . getint ( <str> , magnitud ) ]  elif not unit :              unit = cls . __units__ [ 0 ]  try :              conversion = cls . rates [ unit ]  except KeyError :              raise ValueError ( QApplication . translate ( <str> , <str> ) )  data *= conversion return data  def __add__ ( self , other ) :          return self . __class__ ( self . _data + other )  def __sub__ ( self , other ) :          return self . __class__ ( self . _data - other )  def config ( self , magnitud = <str> ) :          if not magnitud :              magnitud = self . __class__ . __name__  Config = getMainWindowConfig ( ) value = Config . getint ( <str> , magnitud ) return self . __getattribute__ ( self . __units__ [ value ] )  @ classmethod def text ( cls , magnitud = <str> ) :          if not magnitud :              magnitud = cls . __name__  Config = getMainWindowConfig ( ) return cls . __text__ [ Config . getint ( <str> , magnitud ) ]  @ classmethod def func ( cls , magnitud = <str> ) :          if not magnitud :              magnitud = cls . __name__  Config = getMainWindowConfig ( ) return cls . __units__ [ Config . getint ( <str> , magnitud ) ]  @ classmethod def magnitudes ( cls ) :          if cls . _magnitudes :              return cls . _magnitudes  else :              return [ ( cls . __name__ , cls . __title__ ) ]   def format ( self , unit = <str> , magnitud = <str> ) :          if not magnitud :              magnitud = self . __class__ . __name__  if not unit :              unit = self . func ( magnitud )  Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) kwargs = eval ( Preferences . get ( <str> , magnitud ) ) value = self . __getattribute__ ( unit ) return representacion ( value , ** kwargs )  def get_str ( self , conf = None ) :          if self . code :              return self . code  else :              if not conf :                  conf = self . func ( self . magnitud ) txt = self . text ( self . magnitud )  else :                  txt = self . __text__ [ self . __units__ . index ( conf ) ]  num = self . format ( conf , self . magnitud ) return num + <str> + txt   str = property ( get_str )  class Dimensionless ( float ) :      __title__ = QApplication . translate ( <str> , <str> ) __text__ = [ ] _magnitudes = [ ] def __init__ ( self , data , txt = <str> ) :          self . txt = txt if data is None :              self . _data = 0 self . code = <str>  else :              self . _data = data self . code = <str>  logging . debug ( <str> % ( self . __class__ . __name__ , self . _data ) )  def __new__ ( cls , data , txt = <str> ) :          if data is None :              data = 0  return float . __new__ ( cls , data )  @ classmethod def text ( cls ) :          return <str>  @ classmethod def func ( cls ) :          return <str>  def config ( self ) :          return self  def format ( self , unit ) :          Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) kwargs = eval ( Preferences . get ( <str> , <str> ) ) return representacion ( self , ** kwargs )  @ property def str ( self ) :          num = self . format ( self ) if self . txt :              num += <str> + self . txt  return num   class Temperature ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) __text__ = [ <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 25 , <str> : <str> } , <str> : { <str> : 298.15 , <str> : 25 , <str> : 77 } } ] def __init__ ( self , data , unit = <str> , magnitud = <str> ) :          if not magnitud :              magnitud = self . __class__ . __name__  self . magnitud = magnitud if data is None :              data = 0 self . code = <str>  else :              data = float ( data ) self . code = <str>  if unit == <str> :              Config = getMainWindowConfig ( ) unit = self . __units__ [ Config . getint ( <str> , magnitud ) ]  if unit == <str> :              self . _data = data  elif unit == <str> :              self . _data = C2K ( data )  elif unit == <str> :              self . _data = F2K ( data )  elif unit == <str> :              self . _data = R2K ( data )  elif unit == <str> :              self . _data = Re2K ( data )  else :              raise ValueError ( QApplication . translate ( <str> , <str> ) )  self . K = self . _data self . C = K2C ( self . _data ) self . F = K2F ( self . _data ) self . R = K2R ( self . _data ) self . Re = K2Re ( self . _data ) logging . debug ( <str> % ( self . __class__ . __name__ , self . _data ) )  @ classmethod def _getBaseValue ( cls , data , unit , magnitud ) :          if data is None :              data = 0  if not magnitud :              magnitud = cls . __name__  if unit == <str> :              Config = getMainWindowConfig ( ) unit = cls . __units__ [ Config . getint ( <str> , magnitud ) ]  elif not unit :              unit = <str>  if unit == <str> :              data = C2K ( data )  elif unit == <str> :              data = F2K ( data )  elif unit == <str> :              data = R2K ( data )  elif unit == <str> :              data = Re2K ( data )  elif unit != <str> :              raise ValueError ( QApplication . translate ( <str> , <str> ) )  return data   class DeltaT ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : k . Rankine , <str> : k . Rankine , <str> : k . Reaumur } __text__ = [ <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 25 , <str> : <str> } , <str> : { <str> : 25 , <str> : 45 } } ]  class Angle ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 2 * k . pi / 360 , <str> : 2 * k . pi / 360 / 60 , <str> : 2 * k . pi / 360 / 3600 , <str> : 2 * k . pi / 400 } __text__ = [ <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 25 , <str> : <str> } , <str> : { <str> : 0.436332312999 } } ]  class Length ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi , <str> : k . milli , <str> : k . micro , <str> : k . kilo , <str> : k . inch , <str> : k . foot , <str> : k . yard , <str> : k . milla , <str> : k . milla_nau , <str> : k . pico , <str> : 1e-10 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 12 , <str> : <str> } , <str> : { <str> : 0.3048 , <str> : 12 , <str> : 1 } } ]  class Area ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi ** 2 , <str> : k . milli ** 2 , <str> : k . kilo ** 2 , <str> : k . inch ** 2 , <str> : k . foot ** 2 , <str> : k . yard ** 2 , <str> : k . hecto ** 2 , <str> : k . acre } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.09290304 , <str> : 144 } } ]  class Volume ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi ** 3 , <str> : k . deci ** 3 , <str> : k . deci ** 3 * k . milli , <str> : k . kilo ** 3 , <str> : k . inch ** 3 , <str> : k . foot ** 3 , <str> : k . yard ** 3 , <str> : k . gallon , <str> : k . gallon_imp , <str> : k . qtUSliq , <str> : k . qtUSdry , <str> : k . qtUK , <str> : k . bbl , <str> : k . fluid_ounce , <str> : k . fluid_ounce_imp , <str> : 36 * k . gallon_imp , <str> : 31.5 * k . gallon } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , QApplication . translate ( <str> , <str> ) , <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 158.987294928 , <str> : 5.61458333333 , <str> : 42 } } ]  class Time ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . minute , <str> : k . hour , <str> : k . day , <str> : k . year } __text__ = [ <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 1440 , <str> : 24 } } ]  class Frequency ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / 60 , <str> : 60. , <str> : 60. , <str> : 30. / k . pi , <str> : 30 * 60. / k . pi , <str> : 30 * 3600. / k . pi } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 9.54929658551 } } ]  class Speed ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi , <str> : k . milli , <str> : k . kilo , <str> : 1. / k . minute , <str> : k . kilo / k . minute , <str> : k . kilo / k . hour , <str> : 1. / k . day , <str> : k . kilo / k . day , <str> : k . foot , <str> : k . foot / k . minute , <str> : k . foot / k . hour , <str> : k . foot / k . day , <str> : k . inch , <str> : k . inch / k . minute , <str> : k . mile / k . hour , <str> : k . nautical_mile / k . hour } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 60 , <str> : 3.6 , <str> : 3.28083989501 } } ]  class Acceleration ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi , <str> : k . foot , <str> : k . inch , <str> : k . yard , <str> : 1. / k . minute ** 2 , <str> : k . centi / k . minute ** 2 , <str> : k . foot / k . minute ** 2 , <str> : k . inch / k . minute ** 2 , <str> : k . yard / k . minute ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 9.81 , <str> : <str> } , <str> : { <str> : 32.1850393701 } } ]  class Mass ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . kilo , <str> : 1. / k . mega , <str> : k . kilo , <str> : k . pound , <str> : k . grain , <str> : k . oz , <str> : k . slug , <str> : k . cwtUK , <str> : k . cwtUS , <str> : k . tonUK , <str> : k . tonUS } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.45359237 , <str> : 453.59237 , <str> : 16 } } ]  class Mol ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . kilo , <str> : 1. / k . mega , <str> : k . pound } __text__ = [ <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 1000 , <str> : 2.20462262185 } } ]  class SpecificVolume ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : k . liter , <str> : k . liter , <str> : k . liter , <str> : 1 / k . gram , <str> : k . micro , <str> : k . foot ** 3 / k . pound , <str> : k . inch ** 3 / k . pound , <str> : k . gallon_imp / k . pound , <str> : k . gallon / k . pound , <str> : k . bbl / k . pound , <str> : k . foot ** 3 / k . tonUK , <str> : k . foot ** 3 / k . tonUS , <str> : k . foot ** 3 / k . slug , <str> : k . foot ** 3 / k . oz , <str> : k . inch ** 3 / k . oz , <str> : k . gallon_imp / k . oz , <str> : k . gallon / k . oz } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 50 , <str> : <str> } , <str> : { <str> : 0.05 , <str> : 0.800923168698 } } ]  class SpecificVolume_square ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : k . liter ** 2 , <str> : k . liter ** 2 , <str> : k . liter ** 2 , <str> : 1 / k . gram ** 2 , <str> : k . micro ** 2 , <str> : k . foot ** 6 / k . pound ** 2 , <str> : k . inch ** 6 / k . pound ** 2 , <str> : k . gallon_imp ** 2 / k . pound ** 2 , <str> : k . gallon ** 2 / k . pound ** 2 , <str> : k . bbl ** 2 / k . pound ** 2 , <str> : k . foot ** 6 / k . tonUK ** 2 , <str> : k . foot ** 6 / k . tonUS ** 2 , <str> : k . foot ** 6 / k . slug ** 2 , <str> : k . foot ** 6 / k . oz ** 2 , <str> : k . inch ** 6 / k . oz ** 2 , <str> : k . gallon_imp ** 2 / k . oz ** 2 , <str> : k . gallon ** 2 / k . oz ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 50 , <str> : <str> } , <str> : { <str> : 5e-5 , <str> : 0.0128295584431 } } ]  class MolarVolume ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : k . liter , <str> : k . liter , <str> : k . liter , <str> : 1 / k . gram , <str> : k . micro , <str> : k . foot ** 3 / k . pound , <str> : k . inch ** 3 / k . pound } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 50 , <str> : <str> } , <str> : { <str> : 0.05 , <str> : 0.800923168698 } } ]  class Density ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : 1. / k . liter , <str> : 1. / k . liter , <str> : 1. / k . liter , <str> : k . gram , <str> : 1. / k . micro , <str> : k . pound / k . foot ** 3 , <str> : k . pound / k . inch ** 3 , <str> : k . pound / k . gallon_imp , <str> : k . pound / k . gallon , <str> : k . pound / k . bbl , <str> : k . tonUK / k . foot ** 3 , <str> : k . tonUS / k . foot ** 3 , <str> : k . slug / k . foot ** 3 , <str> : k . oz / k . foot ** 3 , <str> : k . oz / k . inch ** 3 , <str> : k . oz / k . gallon_imp , <str> : k . oz / k . gallon } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 1000 , <str> : 62.4279605761 } } ]  class MolarDensity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : 1. / k . liter , <str> : 1. / k . liter , <str> : k . gram , <str> : 1. / k . micro , <str> : k . pound / k . foot ** 3 , <str> : k . pound / k . inch ** 3 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.001 , <str> : 0.0624279605761 } } ]  class Force ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . dyn , <str> : k . kgf , <str> : k . kgf / k . kilo , <str> : k . lbf , <str> : k . ozf , <str> : k . pdl , <str> : k . TonfUK , <str> : k . TonfUS } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.138254954376 , <str> : 0.0140980818502 , <str> : 13825.4954376 } } ]  class Pressure ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . mega , <str> : k . hecto , <str> : k . kilo , <str> : k . bar , <str> : 0.1 , <str> : k . bar / k . kilo , <str> : k . psi , <str> : k . atm , <str> : k . g / k . centi ** 2 , <str> : k . g , <str> : k . g * k . kilo , <str> : k . g * 10 , <str> : k . g * k . kilo * k . inch , <str> : k . g * k . kilo * k . foot , <str> : k . torr , <str> : k . torr * 10 , <str> : k . torr * k . inch * k . kilo , <str> : k . torr * k . foot * k . kilo , <str> : k . torr , <str> : k . g * k . pound / k . centi ** 2 , <str> : k . g * k . pound / k . foot ** 2 , <str> : k . dyn / k . centi ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 760 , <str> : <str> } , <str> : { <str> : 1.01325 , <str> : 1 , <str> : 14.6959487755 , <str> : 0 } } ] def __init__ ( self , data , unit = <str> , magnitud = <str> ) :          if data is None :              data = 0 self . code = <str>  else :              self . code = <str>  if not magnitud :              magnitud = self . __class__ . __name__  self . magnitud = magnitud if unit == <str> :              Config = getMainWindowConfig ( ) unit = self . __units__ [ Config . getint ( <str> , magnitud ) ]  if unit == <str> :              self . _data = data * k . bar + k . atm  elif unit == <str> :              self . _data = data * k . psi + k . atm  elif unit == <str> :              self . _data = data * k . g / k . centi ** 2 + k . atm  else :              self . _data = data * self . __class__ . rates [ unit ]  for key in self . __class__ . rates :              self . __setattr__ ( key , self . _data / self . __class__ . rates [ key ] )  self . barg = ( self . Pa - k . atm ) / k . bar self . psig = ( self . Pa - k . atm ) / k . psi self . kgcm2g = ( self . Pa - k . atm ) * k . centi ** 2 / k . g logging . debug ( <str> % ( self . __class__ . __name__ , self . _data ) )  @ classmethod def _getBaseValue ( cls , data , unit , magnitud ) :          if data is None :              data = 0  if not magnitud :              magnitud = cls . __name__  if unit == <str> :              Config = getMainWindowConfig ( ) unit = cls . __units__ [ Config . getint ( <str> , magnitud ) ]  elif not unit :              unit = <str>  if unit == <str> :              data = data * k . bar + k . atm  elif unit == <str> :              data = data * k . psi + k . atm  elif unit == <str> :              data = data * k . g / k . centi ** 2 + k . atm  elif unit in cls . rates :              data = data * cls . rates [ unit ]  else :              raise ValueError ( QApplication . translate ( <str> , <str> ) )  return data   class DeltaP ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . mega , <str> : k . hecto , <str> : k . kilo , <str> : k . bar , <str> : k . bar , <str> : 0.1 , <str> : k . bar / k . kilo , <str> : k . psi , <str> : k . psi , <str> : k . atm , <str> : k . g / k . centi ** 2 , <str> : k . g / k . centi ** 2 , <str> : k . g , <str> : k . g * k . kilo , <str> : k . g * 10 , <str> : k . g * k . kilo * k . inch , <str> : k . g * k . kilo * k . foot , <str> : k . torr , <str> : k . torr * 10 , <str> : k . torr * k . inch * k . kilo , <str> : k . torr * k . foot * k . kilo , <str> : k . torr , <str> : k . g * k . pound / k . centi ** 2 , <str> : k . g * k . pound / k . foot ** 2 , <str> : k . dyn / k . centi ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 760 , <str> : <str> } , <str> : { <str> : 1.01325 , <str> : 1 , <str> : 14.6959487755 , <str> : 1.03323 } } ]  class Energy ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . mega , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . calorie_IT , <str> : k . erg , <str> : k . Btu , <str> : k . Btu * k . kilo , <str> : k . Btu * k . mega , <str> : k . hour , <str> : k . hour * k . kilo , <str> : k . hour * k . mega , <str> : k . TNT , <str> : k . hp * k . hour , <str> : k . CV * k . hour , <str> : k . kgf , <str> : k . lbf * k . foot , <str> : k . eV * k . giga , <str> : k . BarrilOil , <str> : k . TmOil , <str> : k . TmCoal } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , <str> , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 4184 , <str> : 3.96566683139 , <str> : 1.162222 } } ]  class Enthalpy ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . kilo , <str> : k . mega , <str> : k . mega , <str> : k . hour * k . kilo , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie / k . lb , <str> : k . calorie * k . mega , <str> : k . Btu / k . lb } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : - 5 , <str> : <str> } , <str> : { <str> : - 11.63 , <str> : - 2.77963671128 } } ]  class MolarEnthalpy ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . kilo , <str> : k . mega , <str> : k . mega , <str> : k . hour * k . kilo , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie / k . lb , <str> : k . calorie * k . mega , <str> : k . Btu / k . lb } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : - 5 , <str> : <str> } , <str> : { <str> : - 11.63 , <str> : - 2.77963671128 } } ]  class Entropy ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . mega , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . calorie * k . mega , <str> : k . hour , <str> : k . hour * k . kilo , <str> : k . hour / k . mega , <str> : k . hour * k . hp / k . Rankine , <str> : k . Btu / k . Rankine , <str> : k . Btu * k . kilo / k . Rankine , <str> : k . Btu * k . mega / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 30 , <str> : <str> } , <str> : { <str> : 56.9730160415 , <str> : 13.616877639 } } ]  class SpecificHeat ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo ** 2 , <str> : k . kilo * k . hour , <str> : k . Btu / k . lb / k . Rankine } _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 4.1868 , <str> : 1.00066921606 } } ]  class MolarSpecificHeat ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . kilo * k . kilo , <str> : k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo , <str> : k . calorie * k . kilo ** 2 , <str> : k . kilo * k . hour , <str> : k . Btu / k . lb / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 4.1868 , <str> : 1.00066921606 } } ]  class Power ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . mega , <str> : k . hp , <str> : k . CV , <str> : k . calorie , <str> : k . calorie * k . kilo / k . hour , <str> : 1 / k . hour , <str> : k . kilo / k . hour , <str> : k . mega / k . hour , <str> : k . erg , <str> : k . Btu , <str> : k . Btu / k . minute , <str> : k . Btu / k . hour , <str> : k . Btu / k . hour * k . mega , <str> : k . foot * k . lb * k . g , <str> : k . foot * k . lb * k . g / k . minute , <str> : k . foot * k . lb * k . g / k . hour } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , <str> , <str> , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 5 , <str> : <str> } , <str> : { <str> : 0.00146535535086 , <str> : 0.00196507389461 , <str> : 1.26082200361 } } ]  class MassFlow ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . minute , <str> : 1. / k . hour , <str> : k . milli , <str> : k . milli / k . minute , <str> : k . milli / k . hour , <str> : k . kilo , <str> : k . kilo / k . minute , <str> : k . kilo / k . hour , <str> : k . lb , <str> : k . lb / k . minute , <str> : k . lb / k . hour , <str> : k . tonUK , <str> : k . tonUS , <str> : k . tonUK / k . minute , <str> : k . tonUS / k . minute , <str> : k . tonUK / k . hour , <str> : k . tonUS / k . hour , <str> : k . tonUK / k . day , <str> : k . tonUS / k . day } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 3.6 , <str> : 7.93664143866 , <str> : 60 } } ]  class MolarFlow ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . minute , <str> : 1. / k . hour , <str> : k . milli , <str> : k . milli / k . minute , <str> : k . milli / k . hour , <str> : k . lb , <str> : k . lb / k . minute , <str> : k . lb / k . hour } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 3.6 , <str> : 7.93664143866 , <str> : 60 } } ]  class VolFlow ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . minute , <str> : 1. / k . hour , <str> : k . liter , <str> : k . liter / k . minute , <str> : k . liter / k . hour , <str> : k . micro , <str> : k . micro , <str> : k . micro / k . minute , <str> : k . micro / k . hour , <str> : k . foot ** 3 , <str> : k . foot ** 3 / k . minute , <str> : k . foot ** 3 * k . kilo / k . minute , <str> : k . foot ** 3 / k . hour , <str> : k . foot ** 3 * k . mega / k . day , <str> : k . gallon_imp / k . hour , <str> : k . gallon / k . hour , <str> : k . gallon_imp / k . minute , <str> : k . gallon / k . minute , <str> : k . gallon_imp , <str> : k . gallon , <str> : k . bbl , <str> : k . bbl / k . minute , <str> : k . bbl / k . hour , <str> : k . bbl / k . day } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.06 , <str> : 0.0353146667215 , <str> : 16.6666666667 } } ]  class Diffusivity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi ** 2 , <str> : k . milli ** 2 , <str> : k . foot ** 2 , <str> : k . inch ** 2 , <str> : 1. / k . hour , <str> : k . foot ** 2 / k . hour , <str> : k . inch ** 2 / k . hour , <str> : k . centi ** 2 , <str> : k . milli ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] _magnitudes = [ ( <str> , QApplication . translate ( <str> , <str> ) ) , ( <str> , QApplication . translate ( <str> , <str> ) ) ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } __test__ = [ { <str> : { <str> : 5 , <str> : <str> } , <str> : { <str> : 0.0005 , <str> : 0.00538195520835 } } ]  class HeatFlux ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . calorie / k . hour , <str> : k . calorie , <str> : k . calorie / k . centi ** 2 , <str> : k . kilo * k . calorie / k . hour , <str> : k . Btu / k . hour / k . foot ** 2 , <str> : k . Btu / k . foot ** 2 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 3.15459074506 , <str> : 2.71427501965 } } ]  class ThermalConductivity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . kilo , <str> : k . kilo , <str> : 1. / k . hour , <str> : k . kilo / k . hour , <str> : k . calorie / k . centi , <str> : k . calorie / k . centi / k . hour , <str> : k . calorie / k . milli / k . hour , <str> : k . calorie * k . kilo / k . hour , <str> : k . lbf / k . Rankine , <str> : k . lb * k . foot / k . Rankine , <str> : k . Btu / k . hour / k . foot / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 50 , <str> : <str> } , <str> : { <str> : 28.8894658271 , <str> : 43.0210325048 } } ]  class UA ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . milli , <str> : 1. / k . hour , <str> : k . kilo / k . hour , <str> : k . calorie / k . hour , <str> : k . calorie * k . kilo / k . hour , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . Btu / k . hour / k . foot ** 2 / k . Rankine , <str> : k . Btu / k . foot ** 2 / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 5.67826334111 , <str> : 4.88569503537 } } ]  class HeatTransfCoef ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : 1. / k . hour , <str> : k . kilo / k . hour , <str> : k . calorie / k . hour , <str> : k . calorie * k . kilo / k . hour , <str> : k . calorie , <str> : k . calorie * k . kilo , <str> : k . lbf / k . Rankine , <str> : k . calorie * k . kilo / k . centi ** 2 , <str> : k . Btu / k . hour / k . foot ** 2 / k . Rankine , <str> : k . Btu / k . foot ** 2 / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 5.67826334111 , <str> : 4.88569503537 } } ]  class Fouling ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . kilo , <str> : k . hour , <str> : k . hour / k . kilo , <str> : k . hour / k . calorie , <str> : k . hour / k . kilo / k . calorie , <str> : 1. / k . calorie , <str> : 1. / k . calorie / k . kilo , <str> : k . Rankine / k . lbf , <str> : k . centi ** 2 / k . calorie / k . kilo , <str> : k . hour * k . foot ** 2 * k . Rankine / k . Btu , <str> : k . foot ** 2 * k . Rankine / k . Btu } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.176110183682 , <str> : 0.204679169035 } } ]  class Tension ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . milli , <str> : k . dyn / k . centi , <str> : k . lbf / k . foot } __text__ = [ <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 14.5939029372 , <str> : 14593.9029372 } } ]  class Viscosity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . milli , <str> : k . micro , <str> : 0.1 , <str> : k . milli , <str> : 0.1 * k . micro , <str> : k . milli , <str> : k . g * k . pound / k . inch ** 2 , <str> : k . lbf , <str> : k . pound / k . foot , <str> : k . g * k . pound / k . inch ** 2 , <str> : k . pound / k . foot / k . hour } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 100 , <str> : 0.1 , <str> : 241.90883105 } } ]  class SolubilityParameter ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : ( k . calorie * k . mega ) ** 0.5 , <str> : ( k . Btu * k . foot ** - 3 ) ** 0.5 } __text__ = [ <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 193.025764622 , <str> : 0.0943668467764 } } ]  class PotencialElectric ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . mega , <str> : k . centi , <str> : k . kilo / k . centi , <str> : k . mega / k . centi , <str> : k . statV , <str> : k . statV / k . centi } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 3 , <str> : <str> } , <str> : { <str> : 90000 } } ]  class DipoleMoment ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . debye } __text__ = [ <str> , <str> ] __units__ = [ <str> , <str> ] __tooltip__ = [ QApplication . translate ( <str> , <str> ) , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 3.33564095198e-30 , <str> : 1 } } ]  class CakeResistance ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . centi / k . kilo , <str> : k . foot / k . pound } __text__ = [ <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.67196897514 } } ]  class PackingDP ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . inch / k . milli / k . foot } __text__ = [ <str> , <str> ] __units__ = [ <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 83.3333333333 } } ]  class V2V ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : 1. , <str> : k . foot ** 3 / k . bbl } __text__ = [ <str> , <str> ] __units__ = [ <str> , <str> ] __tooltip__ = [ <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 0.178107606679 } } ]  class InvTemperature ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : 1. / k . Rankine , <str> : 1. / k . Rankine , <str> : 1. / k . Reaumur } __text__ = [ <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 25 , <str> : <str> } , <str> : { <str> : 25 , <str> : 13.888888889 } } ]  class InvPressure ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . mega , <str> : 1. / k . hecto , <str> : 1. / k . kilo , <str> : 1. / k . bar , <str> : 1. / k . bar , <str> : 10. , <str> : k . kilo / k . bar , <str> : 1. / k . psi , <str> : 1. / k . psi , <str> : 1. / k . atm , <str> : 1. / k . g * k . centi ** 2 , <str> : 1. / k . g * k . centi ** 2 , <str> : 1. / k . g , <str> : 1. / k . g / k . kilo , <str> : 1. / k . g / 10 , <str> : 1. / k . g / k . kilo / k . inch , <str> : 1 / k . g / k . kilo / k . foot , <str> : 1. / k . torr , <str> : 1. / k . torr / 10 , <str> : 1. / k . torr / k . inch / k . kilo , <str> : 1. / k . torr / k . foot / k . kilo , <str> : 1. / k . torr , <str> : 1. / k . g / k . pound * k . centi ** 2 , <str> : k . foot ** 2 / k . g / k . pound , <str> : k . centi ** 2 / k . dyn } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __tooltip__ = [ <str> , <str> , <str> , <str> , <str> , QApplication . translate ( <str> , <str> ) , <str> , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 750.062 , <str> : 760 , <str> : 51.7149 } } ]  class EnthalpyPressure ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. , <str> : k . milli , <str> : 1. / 101325 , <str> : 1. / 101.325 , <str> : k . Btu / k . lb / k . psi } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 5 , <str> : <str> } , <str> : { <str> : 5 , <str> : 5000 } } ]  class EnthalpyDensity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : k . Btu / k . pound ** 2 * k . foot ** 3 } __text__ = [ <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 5 , <str> : <str> } , <str> : { <str> : 0.005 } } ]  class TemperaturePressure ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . milli , <str> : 1e-5 , <str> : k . micro , <str> : 1 / 101325. , <str> : k . Rankine / k . psi } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 1 , <str> : 1000 } } ]  class PressureTemperature ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : 1e5 , <str> : k . mega , <str> : 101325. , <str> : k . psi / k . Rankine } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1000 , <str> : <str> } , <str> : { <str> : 1 , <str> : 0.00986923266716 } } ]  class PressureDensity ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . kilo , <str> : 1e5 , <str> : k . liter , <str> : k . mega , <str> : 101325. , <str> : k . psi / k . pound * k . foot ** 3 } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1e3 , <str> : <str> } , <str> : { <str> : 1 , <str> : 0.00986923266716 } } ]  class DensityPressure ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : k . milli , <str> : 1 / 1e5 , <str> : 1. / k . liter , <str> : k . micro , <str> : 1 / 101325. , <str> : k . pound / k . foot ** 3 / k . psi } __text__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 5 , <str> : <str> } , <str> : { <str> : 0.0116164084484 , <str> : 1177.03258603 } } ]  class DensityTemperature ( unidad ) :      __title__ = QApplication . translate ( <str> , <str> ) rates = { <str> : 1. , <str> : 1. / k . liter , <str> : k . pound / k . foot ** 3 / k . Rankine } __text__ = [ <str> , <str> , <str> ] __units__ = [ <str> , <str> , <str> ] __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } __test__ = [ { <str> : { <str> : 1 , <str> : <str> } , <str> : { <str> : 1000 , <str> : 34.6822003201 } } ]  class Currency ( unidad ) :      filename = conf_dir + <str> try :          archivo = open ( filename , <str> ) rates = json . load ( archivo )  except ( FileNotFoundError , TypeError ) :          getrates ( filename ) archivo = open ( filename , <str> ) rates = json . load ( archivo )  archivo . close date = rates . pop ( <str> ) fecha = time . strftime ( <str> , time . gmtime ( time . time ( ) ) ) __title__ = QApplication . translate ( <str> , <str> ) _uMain = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uEurope = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uAmerica = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uAsia = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uAfrica = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uOceania = [ ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) , ( <str> , QApplication . translate ( <str> , <str> ) , <str> ) ] _uTotal = _uMain + _uEurope + _uAmerica + _uAfrica + _uAsia + _uOceania __text__ = [ ] __units__ = [ ] __tooltip__ = [ ] for unit , tip , txt in _uTotal :          __units__ . append ( unit ) __tooltip__ . append ( tip ) __text__ . append ( txt )  __units_set__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } @ property def str ( self ) :          if self . code :              return self . code  else :              conf = self . func ( self . magnitud ) num = self . format ( conf , self . magnitud ) txt = self . text ( self . magnitud ) return <str> + txt + num    if os . environ [ <str> ] == <str> :      import icu locale = QtCore . QLocale . system ( ) . name ( ) subclasses = unidad . __subclasses__ ( ) names = [ unit . __title__ for unit in subclasses ] collator = icu . Collator . createInstance ( icu . Locale ( locale ) ) sortfunc = collator . getSortKey title_sorted = sorted ( names , key = sortfunc ) _all = [ 0 ] * len ( names ) for unit in subclasses :          i = title_sorted . index ( unit . __title__ ) _all [ i ] = unit   else :      _all = sorted ( unidad . __subclasses__ ( ) , key = lambda item : item . __title__ )  for _clas in _all :      if _clas . __doc__ :          continue  doc = QApplication . translate ( <str> , <str> % _clas . __title__ ) doc += os . linesep + os . linesep doc += QApplication . translate ( <str> , <str> ) + <str> doc += os . linesep default = True for i , key in enumerate ( _clas . __units__ ) :          if _clas . __tooltip__ :              name = _clas . __tooltip__ [ i ]  else :              name = _clas . __text__ [ i ]  doc += <str> % ( name , key ) if default :              doc += <str> % QApplication . translate ( <str> , <str> ) default = False  doc += os . linesep + os . linesep  doc += <str> + os . linesep doc += <str> + os . linesep + os . linesep title = _clas . __name__ for test in _clas . __test__ :          doc += <str> % ( title [ 0 ] , title , test [ <str> ] [ <str> ] , test [ <str> ] [ <str> ] ) doc += os . linesep + <str> template = [ ] values = [ ] for key in test [ <str> ] . keys ( ) :              template . append ( <str> ) values . append ( <str> % ( title [ 0 ] , key ) )  doc += <str> % <str> . join ( template ) doc += <str> + <str> . join ( values ) doc += <str> + os . linesep values = [ ] for value in test [ <str> ] . values ( ) :              values . append ( <str> % value )  doc += <str> + <str> . join ( values ) + <str> + os . linesep  doc += os . linesep + os . linesep _clas . __doc__ = doc  _magnitudes = [ ] for unit in _all :      for magnitud in unit . magnitudes ( ) :          _magnitudes . append ( magnitud + ( unit , ) )   _magnitudes . append ( ( <str> , QApplication . translate ( <str> , <str> ) , Dimensionless ) ) unit_set = { } for unit in _all :      if unit . _magnitudes :          unit_set . update ( unit . __units_set__ )  else :          unit_set [ unit . __name__ ] = unit . __units_set__   units_set = { } for set in ( <str> , <str> , <str> , <str> , <str> ) :      units_set [ set ] = [ ] for magnitud , titulo , unit in _magnitudes [ : - 1 ] :          units_set [ set ] . append ( unit . __units__ . index ( unit_set [ magnitud ] [ set ] ) )    