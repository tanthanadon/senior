from math import exp , log , log10 , sqrt , sin , pi from scipy . optimize import fsolve from lib . unidades import Dimensionless from lib . utilities import refDoc __doi__ = { 1 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 2 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 3 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 4 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 5 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 6 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 7 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 8 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 9 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 10 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 11 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 12 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 13 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 14 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 15 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 16 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 17 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 18 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 19 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 20 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 21 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 22 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 23 : { <str> : <str> , <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> } , 24 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 25 : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , 26 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 27 : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , 28 : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , 29 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , 30 : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , } @ refDoc ( __doi__ , [ 1 ] ) def f_colebrook ( Re , eD ) :      <str> fo = f_chen ( Re , eD ) if eD :          f = fsolve ( lambda x : 1 / x ** 0.5 + 2.0 * log10 ( eD / 3.7 + 2.51 / Re / x ** 0.5 ) , fo )  else :          f = fsolve ( lambda x : 1 / x ** 0.5 - 2.0 * log10 ( Re * x ** 0.5 ) + 0.8 , fo )  return Dimensionless ( f [ 0 ] )  @ refDoc ( __doi__ , [ 2 ] ) def f_chen1979 ( Re , eD ) :      <str> A = eD ** 1.1098 / 2.8257 + 5.8506 / Re ** 0.8981 f = 1 / ( - 2 * log10 ( eD / 3.7065 - 5.0452 / Re * log10 ( A ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 3 ] ) def f_chen ( Re , eD ) :      <str> A = eD / 3.7 + ( 6.7 / Re ) ** 0.9 f = 1 / ( - 2 * log10 ( eD / 3.7 - 5.02 / Re * log10 ( A ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 4 ] ) def f_moody ( Re , eD ) :      <str> f = 5.5e-3 * ( 1 + ( 2e4 * eD + 1e6 / Re ) ** ( 1. / 3 ) ) return Dimensionless ( f )  @ refDoc ( __doi__ , [ 5 ] ) def f_churchill ( Re , eD ) :      <str> A = ( 2.457 * log ( 1 / ( 0.27 * eD + ( 7. / Re ) ** 0.9 ) ) ) ** 16 B = ( 37530. / Re ) ** 16 f = 8. * ( ( 8. / Re ) ** 12 + ( A + B ) ** - 1.5 ) ** ( 1. / 12 ) return Dimensionless ( f )  @ refDoc ( __doi__ , [ 6 ] ) def f_wood ( Re , eD ) :      <str> a = 0.094 * eD ** 0.225 + 0.53 * eD b = 88 * eD ** 0.44 c = - 1.62 * eD ** 0.134 f = a + b * Re ** c return Dimensionless ( f )  @ refDoc ( __doi__ , [ 7 ] ) def f_haaland ( Re , eD ) :      <str> f = 1 / ( - 1.8 * log10 ( ( eD / 3.75 ) ** 1.11 + 6.9 / Re ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 8 ] ) def f_serghides ( Re , eD ) :      <str> A = - 2 * log10 ( eD / 3.7 + 12 / Re ) B = - 2 * log10 ( eD / 3.7 + 2.51 * A / Re ) C = - 2 * log10 ( eD / 3.7 + 2.51 * B / Re ) f = ( A - ( B - A ) ** 2 / ( C - 2 * B + A ) ) ** - 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 9 ] ) def f_round ( Re , eD ) :      <str> f = 1 / ( 1.8 * log10 ( Re / ( 0.135 * Re * eD + 6.5 ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 10 ] ) def f_swamee ( Re , eD ) :      <str> f = 1 / ( - 2 * log10 ( eD / 3.7 + ( 6.97 / Re ) ** 0.9 ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 11 ] ) def f_jain ( Re , eD ) :      <str> f = 1 / ( 1.14 - 2 * log10 ( eD + ( 29.843 / Re ) ** 0.9 ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 12 ] ) def f_barr ( Re , eD ) :      <str> f = 1 / ( 2 * log10 ( eD / 3.7 + 4.518 * log10 ( Re / 7 ) / Re / ( 1 + Re ** 0.52 / 29 * eD ** 0.7 ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 13 ] ) def f_zigrang ( Re , eD ) :      <str> A = log10 ( eD / 3.7 - 5.02 / Re * log10 ( eD / 3.7 + 13. / Re ) ) f = 1 / ( - 2 * log10 ( eD / 3.7 - 5.02 * A / Re ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 14 ] ) def f_altshul ( Re , eD ) :      <str> f = 0.11 * ( eD + 68 / Re ) ** 0.25 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 14 ] ) def f_tsal ( Re , eD ) :      <str> f = 0.11 * ( 68 / Re + eD ) ** 0.25 if f < 0.018 :          f = 0.0028 + 0.85 * f  return f  @ refDoc ( __doi__ , [ 15 ] ) def f_eck ( Re , eD ) :      <str> f = 1 / ( - 2 * log10 ( eD / 3.71 + 15 / Re ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 16 ] ) def f_shacham ( Re , eD ) :      <str> f = 1 / ( - 2 * log10 ( eD / 3.7 - 5.02 / Re * log10 ( eD / 3.7 + 14.5 / Re ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 17 ] ) def f_manadilli ( Re , eD ) :      <str> f = 1 / ( - 2 * log10 ( eD / 3.7 + 95. / Re ** 0.983 - 96.82 / Re ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 18 ] ) def f_romeo ( Re , eD ) :      <str> A = log10 ( ( eD / 7.7918 ) ** 0.9924 + ( 5.3326 / ( 208.815 + Re ) ) ** 0.9345 ) B = log10 ( eD / 3.827 - 4.567 / Re * A ) f = 1 / ( - 2 * log10 ( eD / 3.7065 - 5.0272 * B / Re ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 19 ] ) def f_goudar2007 ( Re , eD ) :      <str> C = 0.124 * Re * eD + log ( 0.4587 * Re ) f = 1 / ( 0.8686 * log ( 0.4587 * Re / ( C - 0.31 ) ** ( C / ( C + 1 ) ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 27 ] ) def f_goudar ( Re , eD ) :      <str> a = 2 / log ( 10 ) b = eD / 3.7 d = log ( 10 ) * Re / 5.2 s = b * d + log ( d ) q = s ** ( s / ( s + 1 ) ) g = b * d + log ( d / q ) z = log ( q / g ) Dla = g / ( g + 1 ) * z Dcfa = Dla * ( 1 + z / 2 / ( ( g + 1 ) ** 2 + z / 3 * ( 2 * g - 1 ) ) ) f = ( a * ( log ( d / q ) + Dcfa ) ) ** - 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 20 ] ) def f_buzzelli ( Re , eD ) :      <str> A = ( 0.744 * log ( Re ) - 1.41 ) / ( 1 + 1.32 * eD ** 0.5 ) B = eD / 3.7 * Re + 2.51 * A f = 1 / ( A - ( ( A + 2 * log10 ( B / Re ) ) / ( 1 + 2.18 / B ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 21 ] ) def f_Vatankhah ( Re , eD ) :      <str> S = 0.124 * Re * eD + log ( 0.4587 * Re ) f = 1 / ( 0.8686 * log ( 0.4587 * Re / ( S - 0.31 ) ** ( S / ( S + 0.9633 ) ) ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 22 ] ) def f_avci ( Re , eD ) :      <str> f = 6.4 / ( log ( Re ) - log ( 1 + 0.01 * Re * eD * ( 1 + 10 * eD ** 0.5 ) ) ) ** 2.4 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 23 ] ) def f_papaevangelou ( Re , eD ) :      <str> f = ( 0.2479 - 9.47e-5 * ( 7 - log10 ( Re ) ) ** 4 ) / log10 ( eD / 3.615 + 7.366 / Re ** 0.9142 ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 24 ] ) def f_brkic ( Re , eD , alternate = False ) :      <str> S = log ( Re / 1.816 / log ( 1.1 * Re / log ( 1 + 1.1 * Re ) ) ) if alternate :          f = 1 / ( - 2 * log10 ( 2.18 * S / Re + eD / 3.71 ) ) ** 2  else :          f = 1 / ( - 2 * log10 ( 10 ** ( - 0.4343 * S ) + eD / 3.71 ) ) ** 2  return Dimensionless ( f )  @ refDoc ( __doi__ , [ 25 ] ) def f_fang ( Re , eD ) :      <str> f = 1.613 / ( log ( 0.234 * eD ** 1.1007 - 60.525 / Re ** 1.1105 + 56.291 / Re ** 1.0712 ) ) ** 2 return Dimensionless ( f )  @ refDoc ( __doi__ , [ 26 ] ) def f_ghanbari ( Re , eD ) :      <str> return ( - 1.52 * log10 ( ( eD / 7.21 ) ** 1.042 + ( 2.731 / Re ) ** 0.9152 ) ) ** - 2.169  @ refDoc ( __doi__ , [ 28 ] ) def f_Samadianfard ( Re , eD ) :      <str> f = ( Re ** eD - 0.6315093 ) / ( Re ** ( 1 / 3 ) + Re * eD ) + 0.0275308 * ( 6.929841 / Re + eD ) ** ( 1 / 9 ) + 10 ** eD / ( eD + 4.481616 ) * ( eD ** 0.5 + 9.99701 / Re ) return f  f_list = ( f_colebrook , f_chen , f_Vatankhah , f_buzzelli , f_romeo , f_serghides , f_zigrang , f_Samadianfard , f_brkic , f_fang , f_ghanbari , f_haaland , f_round , f_swamee , f_jain , f_barr , f_shacham , f_tsal , f_manadilli , f_goudar , f_goudar2007 , f_avci , f_papaevangelou , f_churchill , f_chen1979 , f_moody , f_wood , f_eck , f_altshul ) def f_blasius ( Re ) :      return 0.079 / Re ** 0.25  def f_Gnielinsky ( Re ) :      return ( 1.8 * log ( Re ) - 1.5 ) ** - 2.  @ refDoc ( __doi__ , [ 29 ] ) def f_friccion ( Re , eD = 0 , method = 0 , geometry = 0 , * args ) :      if Re < 2100 :          if geometry == 0 :              f_friccion = 16. / Re  elif geometry == 1 :              f_friccion = 14.2 / Re  elif geometry == 2 :              pass  elif geometry == 3 :              D , d = args [ 1 ] , args [ 0 ] f_friccion = 16 / ( 2 / 3 + 11 / 24 * d / D * ( 2 - d / D ) ) / Re  elif geometry == 4 :              D , d = args [ 1 ] , args [ 0 ] c = ( D - d ) / ( D + d ) Dh = 4 * d * D * ( 64 - 16 * c ** 2 ) / ( ( d + D ) * ( 64 - 3 * c ** 4 ) ) f_friccion = 2 * Dh ** 2 * ( D ** 2 + d ** 2 ) / D ** 2 / d ** 2 / Re  elif geometry == 5 :              pass  elif geometry == 6 :              Di , Do = args alpha = ( Do - Di ) ** 2 / ( Do ** 2 + Di ** 2 - ( Do ** 2 - Di ** 2 ) / log ( Do / Di ) ) f_friccion = 16 * alpha / Re   else :          if geometry == 6 :              f_friccion = f_Gnielinsky ( Re )  else :              f_friccion = f_list [ method ] ( Re , eD )   return Dimensionless ( f_friccion )  @ refDoc ( __doi__ , [ 1 ] ) def eD ( Re , f ) :      eD = ( 10 ** ( - 0.5 / f ** 0.5 ) - 2.51 / Re / f ** 0.5 ) * 3.7 return eD  def K_contraction ( tita , beta ) :      if tita < 45. :          K = 0.8 * sin ( tita * pi / 360 ) * ( 1 - beta ** 2 ) / beta ** 4  else :          K = 0.5 * sqrt ( sin ( tita * pi / 360 ) ) * ( 1. - beta ** 2 ) / beta ** 4  return K  def K_enlargement ( tita , beta ) :      if tita < 45. :          K = 2.6 * sin ( tita * pi / 360 ) * ( 1. - beta ** 2 ) ** 2 / beta ** 4  else :          K = ( 1. - beta ** 2 ) ** 2 / beta ** 4  return K  def K_flush ( rd ) :      if rd <= 1e-4 :          K = 0.5  elif rd >= 0.15 :          K = 0.04  else :          K = 0.038756579558111 + 0.45581466480399 * exp ( - rd / 0.041195038092995 )  return K  def K_MitreBend ( tita ) :      return - 0.31591884532927 + 29830.477527796 * sqrt ( 2 / pi ) / 122.94894071438 * exp ( - 2 * ( ( tita - 183.88854928482 ) / 122.94894071438 ) ** 2 )  def K_longBend ( rD ) :      if rD <= 1.2 :          K = 20  elif rD <= 1.7 :          K = 14  elif rD <= 3.5 :          K = 12  elif rD <= 5 :          K = 14  elif rD <= 7 :          K = 17  elif rD <= 9 :          K = 24  elif rD <= 11 :          K = 30  elif rD <= 13 :          K = 34  elif rD <= 15 :          K = 38  elif rD <= 18 :          K = 42  else :          K = 50  return K  def Ft ( D ) :      if D <= 15 :          ft = 0.027  elif D <= 20 :          ft = 0.025  elif D <= 25 :          ft = 0.023  elif D <= 32 :          ft = 0.022  elif D <= 40 :          ft = 0.021  elif D <= 50 :          ft = 0.019  elif D <= 80 :          ft = 0.018  elif D <= 100 :          ft = 0.017  elif D <= 125 :          ft = 0.016  elif D <= 150 :          ft = 0.015  elif D <= 250 :          ft = 0.014  elif D <= 400 :          ft = 0.013  else :          ft = 0.012  return ft  if __name__ == <str> :      for f in f_list :          line = f . __doc__ . split ( <str> ) [ 1 ] year = line . split ( <str> ) [ - 1 ] name = line . split ( <str> ) [ - 3 ] doc = name + <str> + year print ( f ( 1e7 , 0.0002 ) , doc )    