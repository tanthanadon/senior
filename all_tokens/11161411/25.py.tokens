from configparser import ConfigParser from functools import partial import logging import os import json from PyQt5 import QtCore , QtGui , QtWidgets from scipy import pi , arctan from lib . psycrometry import PsyState , PsychroState , _Pbar , _height from lib . config import conf_dir from lib . plot import mpl from lib . unidades import ( Temperature , Pressure , Length , Mass , SpecificVolume , Enthalpy ) from lib . utilities import formatLine from UI . widgets import Entrada_con_unidades class PsychroPlot ( mpl ) :      def __init__ ( self , * args , ** kwargs ) :          mpl . __init__ ( self , * args , ** kwargs ) self . state = None  def config ( self , config ) :          self . ax . set_autoscale_on ( False ) chart = config . getboolean ( <str> , <str> ) xlabel = <str> + Temperature . text ( ) ylabel = <str> % ( QtWidgets . QApplication . translate ( <str> , <str> ) , Mass . text ( ) , Mass . text ( ) ) tmin = Temperature ( config . getfloat ( <str> , <str> ) ) . config ( ) tmax = Temperature ( config . getfloat ( <str> , <str> ) ) . config ( ) wmin = config . getfloat ( <str> , <str> ) wmax = config . getfloat ( <str> , <str> ) if chart :              self . ax . set_xlabel ( xlabel , size = <str> ) self . ax . set_ylabel ( ylabel , size = <str> ) self . ax . set_xlim ( tmin , tmax ) self . ax . set_ylim ( wmin , wmax ) self . ax . yaxis . set_ticks_position ( <str> ) self . ax . yaxis . set_label_position ( <str> ) self . ax . figure . subplots_adjust ( left = 0.05 , top = 0.95 )  else :              self . ax . set_xlabel ( ylabel , size = <str> ) self . ax . set_ylabel ( xlabel , size = <str> ) self . ax . set_xlim ( wmin , wmax ) self . ax . set_ylim ( tmin , tmax ) self . ax . xaxis . set_ticks_position ( <str> ) self . ax . xaxis . set_label_position ( <str> ) self . ax . figure . subplots_adjust ( right = 0.95 , bottom = 0.05 )  kw = formatLine ( config , <str> , <str> ) self . lx = self . ax . axhline ( ** kw ) self . ly = self . ax . axvline ( ** kw )  def createCrux ( self , state , chart ) :          self . state = state if chart :              self . lx . set_ydata ( state . w ) self . ly . set_xdata ( state . tdb . config ( ) )  else :              self . lx . set_ydata ( state . tdb . config ( ) ) self . ly . set_xdata ( state . w )  self . showPointData ( state , chart )  def clearCrux ( self ) :          self . lx . set_ydata ( 0 ) self . ly . set_xdata ( 0 )  def showPointData ( self , state , chart = True ) :          self . clearPointData ( ) txt = [ ] for key in ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) :              txt . append ( ( <str> % ( key , state . __getattribute__ ( key ) . str ) , ) )  if chart :              loc = <str>  else :              loc = <str>  self . ax . table ( cellText = txt , loc = loc , cellLoc = <str> , colLoc = <str> ) self . ax . tables [ 0 ] . auto_set_column_width ( 0 ) self . draw ( )  def clearPointData ( self ) :          while self . ax . tables :              self . ax . tables . pop ( )  self . draw ( )   class PsychroInput ( QtWidgets . QWidget ) :      parameters = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stateChanged = QtCore . pyqtSignal ( PsyState ) pressureChanged = QtCore . pyqtSignal ( ) def __init__ ( self , state = None , readOnly = False , parent = None ) :          super ( PsychroInput , self ) . __init__ ( parent ) self . state = PsychroState ( P = 101325 ) layout = QtWidgets . QGridLayout ( self ) self . checkPresion = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkPresion , 1 , 1 , 1 , 1 ) self . P = Entrada_con_unidades ( Pressure , value = 101325 ) self . P . valueChanged . connect ( self . changePressure ) layout . addWidget ( self . P , 1 , 2 , 1 , 1 ) self . checkAltitud = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkAltitud , 2 , 1 , 1 , 1 ) self . z = Entrada_con_unidades ( Length , value = 0 ) self . checkPresion . toggled . connect ( self . P . setEnabled ) self . checkAltitud . toggled . connect ( self . z . setEnabled ) self . z . valueChanged . connect ( self . changeAltitude ) self . checkPresion . setChecked ( True ) self . z . setEnabled ( False ) layout . addWidget ( self . z , 2 , 2 , 1 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 3 , 1 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 , 1 , 2 ) self . variables = QtWidgets . QComboBox ( ) for txt in PsyState . TEXT_MODE :              self . variables . addItem ( txt )  self . variables . currentIndexChanged . connect ( self . updateInputs ) layout . addWidget ( self . variables , 5 , 1 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 6 , 1 , 1 , 1 ) self . tdb = Entrada_con_unidades ( Temperature ) self . tdb . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . tdb , 6 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 7 , 1 , 1 , 1 ) self . twb = Entrada_con_unidades ( Temperature ) self . twb . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . twb , 7 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 8 , 1 , 1 , 1 ) self . tdp = Entrada_con_unidades ( Temperature ) self . tdp . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . tdp , 8 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 9 , 1 , 1 , 1 ) self . w = Entrada_con_unidades ( float , textounidad = <str> ) self . w . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . w , 9 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 10 , 1 , 1 , 1 ) self . HR = Entrada_con_unidades ( float , textounidad = <str> ) self . HR . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . HR , 10 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 11 , 1 , 1 , 1 ) self . v = Entrada_con_unidades ( SpecificVolume ) self . v . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . v , 11 , 2 , 1 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 12 , 1 , 1 , 1 ) self . h = Entrada_con_unidades ( Enthalpy ) self . h . valueChanged . connect ( partial ( self . updateKwargs , <str> ) ) layout . addWidget ( self . h , 12 , 2 , 1 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 13 , 1 , 1 , 2 ) self . setReadOnly ( readOnly ) self . updateInputs ( 0 ) if state :              self . setState ( state )   def updateInputs ( self , index ) :          for par in self . parameters :              self . __getattribute__ ( par ) . setReadOnly ( True ) self . __getattribute__ ( par ) . setResaltado ( False )  for par in PsyState . VAR_NAME [ index ] :              self . __getattribute__ ( par ) . setReadOnly ( False ) self . __getattribute__ ( par ) . setResaltado ( True )  index = self . variables . currentIndex ( ) kwargs = { <str> : self . P . value } for par in PsyState . VAR_NAME [ index ] :              if self . __getattribute__ ( par ) . value :                  kwargs [ par ] = self . state . __getattribute__ ( par )   self . state = PsychroState ( ** kwargs )  def setReadOnly ( self , readOnly ) :          self . checkPresion . setEnabled ( not readOnly ) self . checkAltitud . setEnabled ( not readOnly ) self . P . setReadOnly ( readOnly ) self . z . setReadOnly ( readOnly ) self . variables . setEnabled ( not readOnly ) for par in self . parameters :              self . __getattribute__ ( par ) . setReadOnly ( True ) self . __getattribute__ ( par ) . setResaltado ( False )   def updateKwargs ( self , key , value ) :          kwargs = { key : value } self . state ( ** kwargs ) if self . state . status :              self . setState ( self . state ) self . stateChanged . emit ( self . state )   def setState ( self , state ) :          self . state = state if state . w < state . ws :              for p in self . parameters :                  self . __getattribute__ ( p ) . setValue ( state . __getattribute__ ( p ) )    def changePressure ( self , value ) :          self . z . setValue ( _height ( value ) ) self . state = PsychroState ( P = value ) self . pressureChanged . emit ( )  def changeAltitude ( self , value ) :          presion = _Pbar ( value ) self . P . setValue ( presion ) self . state = PsychroState ( P = value ) self . pressureChanged . emit ( )   class UI_Psychrometry ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( UI_Psychrometry , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) ) self . showMaximized ( ) layout = QtWidgets . QGridLayout ( self ) self . plt = PsychroPlot ( self , width = 100 , height = 1 , dpi = 90 ) self . plt . fig . canvas . mpl_connect ( <str> , self . click ) layout . addWidget ( self . plt , 1 , 3 , 2 , 2 ) self . inputs = PsychroInput ( ) self . inputs . stateChanged . connect ( self . plt . createCrux ) self . inputs . pressureChanged . connect ( self . plot ) layout . addWidget ( self . inputs , 1 , 1 , 1 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 ) self . buttonShowToolbox = QtWidgets . QToolButton ( ) self . buttonShowToolbox . setCheckable ( True ) self . buttonShowToolbox . toggled . connect ( self . showToolBar ) layout . addWidget ( self . buttonShowToolbox , 1 , 2 , 2 , 1 ) self . line = QtWidgets . QFrame ( ) self . line . setFrameShape ( QtWidgets . QFrame . VLine ) self . line . setFrameShadow ( QtWidgets . QFrame . Sunken ) layout . addWidget ( self . line , 1 , 3 , 3 , 1 ) self . progressBar = QtWidgets . QProgressBar ( ) self . progressBar . setVisible ( False ) layout . addWidget ( self . progressBar , 3 , 3 ) self . status = QtWidgets . QLabel ( ) layout . addWidget ( self . status , 3 , 3 ) btBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) butonPNG = QtWidgets . QPushButton ( QtGui . QIcon ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) butonPNG . clicked . connect ( self . plt . savePNG ) butonConfig = QtWidgets . QPushButton ( QtGui . QIcon ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) butonConfig . clicked . connect ( self . configure ) btBox . rejected . connect ( self . reject ) layout . addWidget ( btBox , 3 , 4 ) btBox . layout ( ) . insertWidget ( 0 , butonPNG ) btBox . layout ( ) . insertWidget ( 0 , butonConfig ) self . showToolBar ( False ) self . Preferences = ConfigParser ( ) self . Preferences . read ( conf_dir + <str> ) self . plot ( ) logging . info ( QtWidgets . QApplication . translate ( <str> , <str> ) )  def configure ( self ) :          from UI . prefPsychrometric import Dialog dlg = Dialog ( self . Preferences ) if dlg . exec_ ( ) :              self . Preferences = dlg . value ( self . Preferences ) self . Preferences . write ( open ( conf_dir + <str> , <str> ) ) self . plot ( )   def showToolBar ( self , checked ) :          self . inputs . setVisible ( checked ) if checked :              image = <str>  else :              image = <str>  self . buttonShowToolbox . setIcon ( QtGui . QIcon ( os . environ [ <str> ] + os . path . join ( <str> , <str> , image ) ) )  def drawlabel ( self , name , t , W , label , unit ) :          if self . Preferences . getboolean ( <str> , name + <str> ) :              TMIN = self . Preferences . getfloat ( <str> , <str> ) TMAX = self . Preferences . getfloat ( <str> , <str> ) tmin = Temperature ( TMIN ) . config ( ) tmax = Temperature ( TMAX ) . config ( ) wmin = self . Preferences . getfloat ( <str> , <str> ) wmax = self . Preferences . getfloat ( <str> , <str> ) if self . Preferences . getboolean ( <str> , <str> ) :                  x = tmax - tmin y = wmax - wmin i = 0 for ti , wi in zip ( t , W ) :                      if tmin <= ti <= tmax and wmin <= wi <= wmax :                          i += 1    else :                  x = wmax - wmin y = tmax - tmin i = 0 for ti , wi in zip ( t , W ) :                      if tmin <= wi <= tmax and wmin <= ti <= wmax :                          i += 1    if isinstance ( label , float ) :                  label = <str> % label  if self . Preferences . getboolean ( <str> , name + <str> ) :                  label += unit  pos = self . Preferences . getfloat ( <str> , name + <str> ) p = int ( i * pos / 100 - 1 ) rot = arctan ( ( W [ p ] - W [ p - 1 ] ) / y / ( t [ p ] - t [ p - 1 ] ) * x ) * 360 / 2 / pi self . plt . ax . annotate ( label , ( t [ p ] , W [ p ] ) , rotation = rot , size = <str> , ha = <str> , va = <str> )   def plot ( self ) :          self . plt . clearPointData ( ) self . plt . ax . clear ( ) chart = self . Preferences . getboolean ( <str> , <str> ) self . plt . config ( self . Preferences ) filename = conf_dir + <str> % ( PsychroState ( ) . __class__ . __name__ , self . inputs . P . value ) if os . path . isfile ( filename ) :              with open ( filename , <str> ) as archivo :                  data = json . load ( archivo ) self . status . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( )   else :              self . progressBar . setVisible ( True ) self . status . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) data = PsychroState . calculatePlot ( self ) with open ( filename , <str> ) as file :                  json . dump ( data , file , indent = 4 )  self . progressBar . setVisible ( False )  self . status . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) t = [ Temperature ( ti ) . config ( ) for ti in data [ <str> ] ] Hs = data [ <str> ] format = formatLine ( self . Preferences , <str> , <str> ) if chart :              self . plt . plot ( t , Hs , ** format )  else :              self . plt . plot ( Hs , t , ** format )  format = formatLine ( self . Preferences , <str> , <str> ) for i , T in enumerate ( t ) :              if chart :                  self . plt . plot ( [ T , T ] , [ 0 , Hs [ i ] ] , ** format )  else :                  self . plt . plot ( [ 0 , Hs [ i ] ] , [ T , T ] , ** format )   H = data [ <str> ] th = data [ <str> ] tm = Temperature ( self . Preferences . getfloat ( <str> , <str> ) ) format = formatLine ( self . Preferences , <str> , <str> ) for i , H in enumerate ( H ) :              ts = Temperature ( th [ i ] ) . config ( ) if chart :                  self . plt . plot ( [ ts , tm . config ( ) ] , [ H , H ] , ** format )  else :                  self . plt . plot ( [ H , H ] , [ ts , tm . config ( ) ] , ** format )   format = formatLine ( self . Preferences , <str> , <str> ) for Hr , H0 in list ( data [ <str> ] . items ( ) ) :              if chart :                  self . plt . plot ( t , H0 , ** format ) self . drawlabel ( <str> , t , H0 , Hr , <str> )  else :                  self . plt . plot ( H0 , t , ** format ) self . drawlabel ( <str> , H0 , t , Hr , <str> )   format = formatLine ( self . Preferences , <str> , <str> ) for T , ( H , Tw ) in list ( data [ <str> ] . items ( ) ) :              value = Temperature ( T ) . config ( ) Tw_conf = [ Temperature ( Twi ) . config ( ) for Twi in Tw ] txt = Temperature . text ( ) if chart :                  self . plt . plot ( Tw_conf , H , ** format ) self . drawlabel ( <str> , Tw_conf , H , value , txt )  else :                  self . plt . plot ( H , Tw_conf , ** format ) self . drawlabel ( <str> , H , Tw_conf , value , txt )   format = formatLine ( self . Preferences , <str> , <str> ) for v , ( Td , H ) in list ( data [ <str> ] . items ( ) ) :              value = SpecificVolume ( v ) . config ( ) Td_conf = [ Temperature ( Tdi ) . config ( ) for Tdi in Td ] txt = SpecificVolume . text ( ) if chart :                  self . plt . plot ( Td_conf , H , ** format ) self . drawlabel ( <str> , Td_conf , H , value , txt )  else :                  self . plt . plot ( H , Td_conf , ** format ) self . drawlabel ( <str> , H , Td_conf , value , txt )   if self . plt . state :              self . plt . createCrux ( self . plt . state , chart )  self . plt . draw ( ) self . status . setText ( <str> % ( QtWidgets . QApplication . translate ( <str> , <str> ) , PsychroState ( ) . __class__ . __name__ [ 3 : ] ) )  def click ( self , event ) :          if event . xdata and event . ydata :              chart = self . Preferences . getboolean ( <str> , <str> ) if chart :                  state = self . createState ( event . xdata , event . ydata )  else :                  state = self . createState ( event . ydata , event . xdata )  if state . w <= state . ws :                  self . inputs . setState ( state ) self . plt . createCrux ( state , chart )  else :                  self . plt . clearCrux ( ) self . plt . clearPointData ( )    def createState ( self , x , y ) :          tdb = Temperature ( x , <str> ) punto = PsychroState ( P = self . inputs . P . value , tdb = tdb , w = y ) return punto  def setProgressValue ( self , value ) :          self . progressBar . setValue ( value ) QtWidgets . QApplication . processEvents ( )   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) aireHumedo = UI_Psychrometry ( ) sys . exit ( app . exec_ ( ) )   