import os import subprocess from PyQt5 import QtCore , QtGui , QtWidgets import lib from lib . config import IMAGE_PATH from equipment import equipments class ShowReference ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( ShowReference , self ) . __init__ ( parent ) self . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . tree = QtWidgets . QTreeWidget ( ) header = QtWidgets . QTreeWidgetItem ( [ <str> , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] ) self . tree . setHeaderItem ( header ) layout . addWidget ( self . tree , 1 , 1 , 2 , 2 ) self . searchWidget = QtWidgets . QWidget ( ) self . searchWidget . setMaximumSize ( 200 , 25 ) searchlayout = QtWidgets . QHBoxLayout ( self . searchWidget ) searchlayout . setSpacing ( 0 ) searchlayout . setContentsMargins ( 0 , 0 , 0 , 0 ) self . searchTxt = QtWidgets . QLineEdit ( ) self . searchTxt . textChanged . connect ( self . search ) searchlayout . addWidget ( self . searchTxt ) self . btnPrevious = QtWidgets . QToolButton ( ) self . btnPrevious . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) ) self . btnPrevious . setEnabled ( False ) self . btnPrevious . clicked . connect ( self . searchPrevious ) searchlayout . addWidget ( self . btnPrevious ) self . btnNext = QtWidgets . QToolButton ( ) self . btnNext . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) ) self . btnNext . setEnabled ( False ) self . btnNext . clicked . connect ( self . searchNext ) searchlayout . addWidget ( self . btnNext ) self . searchWidget . hide ( ) layout . addWidget ( self . searchWidget , 2 , 2 ) bttBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) bttBox . rejected . connect ( self . reject ) layout . addWidget ( bttBox , 3 , 1 , 1 , 2 ) shSearch = QtWidgets . QShortcut ( QtGui . QKeySequence . Find , self ) shSearch . activated . connect ( self . enableSearch ) shHide = QtWidgets . QShortcut ( QtGui . QKeySequence . Cancel , self ) shHide . activated . connect ( self . disableSearch ) self . shNext = QtWidgets . QShortcut ( QtGui . QKeySequence . FindNext , self ) self . shNext . activated . connect ( self . searchNext ) self . shNext . setEnabled ( False ) self . shPrevious = QtWidgets . QShortcut ( QtGui . QKeySequence . FindPrevious , self ) self . shPrevious . activated . connect ( self . searchPrevious ) self . shPrevious . setEnabled ( False ) self . fill ( ) self . tree . sortItems ( 0 , QtCore . Qt . AscendingOrder ) self . tree . itemDoubleClicked . connect ( self . open ) self . tree . setColumnWidth ( 0 , 200 ) self . tree . setColumnWidth ( 1 , 200 ) self . tree . setColumnWidth ( 2 , 200 ) self . tree . setColumnWidth ( 3 , 200 )  def enableSearch ( self ) :          self . searchWidget . show ( ) self . searchTxt . setFocus ( QtCore . Qt . ShortcutFocusReason )  def disableSearch ( self ) :          self . searchWidget . hide ( ) self . searchIndex = - 1 self . searchResults = [ ] self . shNext . setEnabled ( False ) self . shPrevious . setEnabled ( False )  def search ( self , txt ) :          self . searchIndex = - 1 self . searchResults = [ ] for col in range ( 3 ) :              self . searchResults += self . tree . findItems ( txt , QtCore . Qt . MatchContains | QtCore . Qt . MatchRecursive , col )  if self . searchResults :              self . searchNext ( )  if len ( self . searchResults ) > 1 :              self . shNext . setEnabled ( True ) self . shPrevious . setEnabled ( True ) self . searchNext ( ) self . btnPrevious . setEnabled ( True ) self . btnNext . setEnabled ( True )  else :              self . shNext . setEnabled ( False ) self . shPrevious . setEnabled ( False ) self . btnPrevious . setEnabled ( False ) self . btnNext . setEnabled ( False )   def searchPrevious ( self ) :          self . searchIndex -= 1 if self . searchIndex < 0 :              self . searchIndex = len ( self . searchResults ) - 1  self . tree . setCurrentItem ( self . searchResults [ self . searchIndex ] )  def searchNext ( self ) :          self . searchIndex += 1 if self . searchIndex >= len ( self . searchResults ) :              self . searchIndex = 0  self . tree . setCurrentItem ( self . searchResults [ self . searchIndex ] )  def fill ( self ) :          for library in lib . __all__ :              __import__ ( <str> % library ) module = lib . __getattribute__ ( library ) if hasattr ( module , <str> ) and module . __doi__ :                  itemModule = QtWidgets . QTreeWidgetItem ( [ <str> + library ] ) self . tree . addTopLevelItem ( itemModule ) for key in sorted ( module . __doi__ . keys ( ) ) :                      if <str> in library :                          itemSubModule = QtWidgets . QTreeWidgetItem ( [ key ] ) itemModule . addChildren ( [ itemSubModule ] ) for key2 in sorted ( module . __doi__ [ key ] . keys ( ) ) :                              link = module . __doi__ [ key ] [ key2 ] if library == <str> :                                  title = <str>  else :                                  title = key2 . replace ( <str> , <str> )  item = QtWidgets . QTreeWidgetItem ( [ title , link [ <str> ] , link [ <str> ] , link [ <str> ] , link [ <str> ] ] ) if findFile ( link ) :                                  icon = QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) item . setIcon ( 0 , icon )  itemSubModule . addChild ( item )   else :                          link = module . __doi__ [ key ] if isinstance ( key , int ) :                              header = <str>  else :                              header = key  item = QtWidgets . QTreeWidgetItem ( [ header , link [ <str> ] , link [ <str> ] , link [ <str> ] , link [ <str> ] ] ) if findFile ( link ) :                              icon = QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) item . setIcon ( 0 , icon )  itemModule . addChild ( item )   if <str> not in library :                      itemModule . sortChildren ( 1 , QtCore . Qt . AscendingOrder )    itemEquipment = QtWidgets . QTreeWidgetItem ( [ QtWidgets . QApplication . translate ( <str> , <str> ) ] ) self . tree . addTopLevelItem ( itemEquipment ) for equip in equipments :              itemequip = QtWidgets . QTreeWidgetItem ( [ equip . __name__ ] ) itemEquipment . addChild ( itemequip ) for link in equip . __doi__ :                  item = QtWidgets . QTreeWidgetItem ( [ <str> , link [ <str> ] , link [ <str> ] , link [ <str> ] , link [ <str> ] ] ) if findFile ( link ) :                      icon = QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) item . setIcon ( 0 , icon )  itemequip . addChild ( item )    def open ( self , item , int ) :          if item . parent ( ) and not item . icon ( 0 ) . isNull ( ) :              title = item . text ( 2 ) text = item . text ( 4 ) code = str ( text ) . replace ( <str> , <str> ) . replace ( <str> , <str> ) file = os . path . join ( <str> , code ) + <str> file2 = os . path . join ( <str> , title ) + <str> print ( file2 , os . path . isfile ( file2 ) ) if os . path . isfile ( file ) :                  subprocess . Popen ( [ <str> , file ] )  elif os . path . isfile ( file2 ) :                  subprocess . Popen ( [ <str> , file2 ] )   elif item . parent ( ) :              url = QtCore . QUrl ( <str> % item . text ( 4 ) ) QtGui . QDesktopServices . openUrl ( url )    def findFile ( ref ) :      code = ref [ <str> ] . replace ( <str> , <str> ) . replace ( <str> , <str> ) file = os . path . join ( <str> , code ) + <str> file2 = os . path . join ( <str> , ref [ <str> ] ) + <str> return os . path . isfile ( file ) or os . path . isfile ( file2 )  if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) dialog = ShowReference ( ) dialog . show ( ) sys . exit ( app . exec_ ( ) )   