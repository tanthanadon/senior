from unittest import TestCase from lib import unidades from lib . meos import MEoS class Butene_1 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 237.8907968 ) Tc = unidades . Temperature ( 419.29 ) Pc = unidades . Pressure ( 4005.1 , <str> ) M = 56.10632 Tt = unidades . Temperature ( 87.8 ) Tb = unidades . Temperature ( 266.84 ) f_acent = 0.192 momentoDipolar = unidades . DipoleMoment ( 0.339 , <str> ) id = 24 Fi1 = { <str> : [ 1 , 2.9197 ] , <str> : [ 0 , 1 ] , <str> : [ - 0.00101126 , 2.3869174 ] , <str> : [ 2.9406 , 6.5395 , 14.535 , 5.8971 ] , <str> : [ 274 / Tc , 951 / Tc , 2127 / Tc , 5752 / Tc ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 525. , <str> : 70000.0 , <str> : 14.59 , <str> : [ 0.78084 , - 2.8258 , 0.99403 , 0.017951 , 0.088889 , 0.00024673 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.12 , 1.3 , 1.74 , 2.1 , 0.28 , 0.69 ] , <str> : [ 0.22846 , - 0.074009 , - 0.22913 , - 0.062334 , - 0.025385 , 0.011040 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.75 , 2. , 4.4 , 4.7 , 15. , 14. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } eq = lemmon , _PR = [ - 0.2050 , - 16.0087 ] _surface = { <str> : [ 0.05644 ] , <str> : [ 1.248 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.71727e1 , 0.26360e1 , - 0.20781e1 , - 0.28860e1 , - 0.13041e1 ] , <str> : [ 1 , 1.5 , 2 , 4.35 , 16. ] } _liquid_Density = { <str> : 1 , <str> : [ 0.16857e2 , - 0.46280e2 , 0.53727e2 , - 0.23314e2 , 0.18889e1 ] , <str> : [ 0.547 , 0.73 , 0.92 , 1.14 , 2.1 ] } _vapor_Density = { <str> : 2 , <str> : [ - 3.1106 , - 6.3103 , - 19.272 , - 48.739 , - 99.898 , - 190.01 ] , <str> : [ 0.415 , 1.27 , 3.34 , 7.0 , 14.5 , 28.0 ] }  class Test ( TestCase ) :      def test_shortLemmon ( self ) :          st = Butene_1 ( T = 350 , rho = 0 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 0 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 29617 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 88.208 ) self . assertEqual ( round ( st . cpM . kJkmolK , 3 ) , 96.522 ) self . assertEqual ( round ( st . w , 2 ) , 238.24 ) st = Butene_1 ( T = 350 , rho = 0.3 * Butene_1 . M ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.75679 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 28321 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 87.626 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 92.719 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 108.45 ) self . assertEqual ( round ( st . w , 2 ) , 211.38 ) st = Butene_1 ( T = 350 , rho = 10 * Butene_1 . M ) self . assertEqual ( round ( st . P . MPa , 3 ) , 17.864 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 11377 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 31.563 ) self . assertEqual ( round ( st . cvM . kJkmolK , 3 ) , 97.760 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 135.36 ) self . assertEqual ( round ( st . w , 2 ) , 843.31 ) st = Butene_1 ( T = 440 , rho = 4 * Butene_1 . M ) self . assertEqual ( round ( st . P . MPa , 4 ) , 5.3245 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 29454 ) self . assertEqual ( round ( st . sM . kJkmolK , 3 ) , 80.191 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 124.13 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 416.03 ) self . assertEqual ( round ( st . w , 2 ) , 151.49 )    