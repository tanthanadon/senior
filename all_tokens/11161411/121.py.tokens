import logging import os from PyQt5 . QtWidgets import QApplication from lib . physics import R_atml , R from lib import unidades , config from lib import EoS , mEoS , gerg , iapws97 , freeSteam , refProp , coolProp from lib . solids import Solid from lib . mezcla import Mezcla , mix_molarflow_molarfraction from lib . psycrometry import PsychroState from lib . thermo import ThermoWater , ThermoAdvanced , ThermoRefProp class Corriente ( config . Entity ) :      kwargs = { <str> : 0.0 , <str> : 0.0 , <str> : None , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : None , <str> : None , <str> : [ ] , <str> : 0.0 , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None } status = 0 msg = QApplication . translate ( <str> , <str> ) kwargs_forbidden = [ <str> , <str> , <str> ] solido = None def __init__ ( self , ** kwargs ) :          self . kwargs = Corriente . kwargs . copy ( ) self . __call__ ( ** kwargs )  def __call__ ( self , ** kwargs ) :          if kwargs . get ( <str> , None ) :              kwargs . update ( kwargs [ <str> ] . kwargs )  if kwargs . get ( <str> , None ) :              kwargs . update ( kwargs [ <str> ] . kwargs )  if kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None  elif kwargs . get ( <str> ) and kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , None ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = None  elif kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ]  elif kwargs . get ( <str> , [ ] ) :              self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ] self . kwargs [ <str> ] = [ ]  elif kwargs . get ( <str> , None ) and self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . kwargs [ <str> ] = 0.0  elif kwargs . get ( <str> , 0.0 ) and self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . kwargs [ <str> ] = 0.0  elif kwargs . get ( <str> , 0.0 ) and self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . kwargs [ <str> ] = None  self . kwargs . update ( kwargs ) for key , value in list ( self . kwargs . items ( ) ) :              if value :                  self . _bool = True break   logging . info ( <str> ) kw_new = { } for key , value in list ( kwargs . items ( ) ) :              if self . __class__ . kwargs [ key ] != value :                  kw_new [ key ] = value   logging . debug ( <str> % kw_new ) if self . calculable :              statusmsg = ( QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ) status = statusmsg [ self . status ] logging . debug ( <str> % ( status , self . msg ) ) QApplication . processEvents ( ) self . status = 1 self . calculo ( ) self . msg = <str>  elif self . tipoFlujo :              if self . kwargs [ <str> ] :                  self . mezcla = self . kwargs [ <str> ]  else :                  self . mezcla = Mezcla ( self . tipoFlujo , ** self . kwargs )   elif self . tipoSolido :              if self . kwargs [ <str> ] :                  self . solido = self . kwargs [ <str> ]  else :                  self . solido = Solid ( ** self . kwargs )  if self . solido :                  self . solido . RhoS ( self . kwargs [ <str> ] )    @ property def calculable ( self ) :          self . tipoTermodinamica = <str> if self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoTermodinamica = <str>  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoTermodinamica = <str>  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoTermodinamica = <str>  self . tipoFlujo = 0 if self . kwargs [ <str> ] :              self . tipoFlujo = 1  elif self . kwargs [ <str> ] :              self . tipoFlujo = 2  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoFlujo = 3  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoFlujo = 4  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoFlujo = 5  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . tipoFlujo = 6  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . kwargs [ <str> ] = 1 self . tipoFlujo = 5  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . kwargs [ <str> ] = 1 self . tipoFlujo = 6  elif self . kwargs [ <str> ] :              self . tipoFlujo = 7  self . tipoSolido = 0 if sum ( self . kwargs [ <str> ] ) > 0 :              if self . kwargs [ <str> ] and self . kwargs [ <str> ] :                  self . tipoSolido = 2  elif self . kwargs [ <str> ] :                  self . tipoSolido = 1   if self . kwargs [ <str> ] :              self . tipoSolido = self . kwargs [ <str> ] . status  return self . tipoTermodinamica and self . tipoFlujo  def calculo ( self ) :          Config = config . getMainWindowConfig ( ) if self . kwargs [ <str> ] :              self . mezcla = self . kwargs [ <str> ]  else :              self . mezcla = Mezcla ( self . tipoFlujo , ** self . kwargs )  self . ids = self . mezcla . ids self . componente = self . mezcla . componente self . fraccion = self . mezcla . fraccion self . caudalmasico = self . mezcla . caudalmasico self . caudalmolar = self . mezcla . caudalmolar self . fraccion_masica = self . mezcla . fraccion_masica self . caudalunitariomasico = self . mezcla . caudalunitariomasico self . caudalunitariomolar = self . mezcla . caudalunitariomolar T = unidades . Temperature ( self . kwargs . get ( <str> , None ) ) P = unidades . Pressure ( self . kwargs . get ( <str> , None ) ) x = self . kwargs . get ( <str> , None ) self . _method ( ) setData = True if self . _thermo == <str> :              compuesto = freeSteam . Freesteam ( ** self . kwargs )  elif self . _thermo == <str> :              compuesto = iapws97 . IAPWS97 ( ** self . kwargs )  elif self . _thermo == <str> :              if not self . kwargs [ <str> ] :                  self . kwargs [ <str> ] = self . ids  kwargs = self . kwargs . copy ( ) del kwargs [ <str> ] compuesto = refProp . RefProp ( ** kwargs )  elif self . _thermo == <str> :              ids = [ ] for id in self . ids :                  ids . append ( gerg . id_GERG . index ( id ) )  kwargs = self . kwargs kwargs [ <str> ] = self . mezcla compuesto = gerg . GERG ( componente = ids , fraccion = self . fraccion , ** kwargs )  elif self . _thermo == <str> :              if not self . kwargs [ <str> ] :                  self . kwargs [ <str> ] = self . ids  compuesto = coolProp . CoolProp ( ** self . kwargs )  elif self . _thermo == <str> :              if self . tipoTermodinamica == <str> :                  compuesto = mEoS . __all__ [ mEoS . id_mEoS . index ( self . ids [ 0 ] ) ] ( T = T , P = P )  elif self . tipoTermodinamica == <str> :                  compuesto = mEoS . __all__ [ mEoS . id_mEoS . index ( self . ids [ 0 ] ) ] ( T = T , x = x )  elif self . tipoTermodinamica == <str> :                  compuesto = mEoS . __all__ [ mEoS . id_mEoS . index ( self . ids [ 0 ] ) ] ( P = P , x = x )   elif self . _thermo == <str> :              if self . kwargs [ <str> ] :                  index = K_name . index ( self . kwargs [ <str> ] ) K = EoS . K [ index ] print ( K )  else :                  K = EoS . K [ Config . getint ( <str> , <str> ) ]  if self . kwargs [ <str> ] :                  index = H_name . index ( self . kwargs [ <str> ] ) H = EoS . H [ index ] print ( H )  else :                  H = EoS . H [ Config . getint ( <str> , <str> ) ]  setData = False self . M = unidades . Dimensionless ( self . mezcla . M ) self . Tc = self . mezcla . Tc self . Pc = self . mezcla . Pc self . SG = unidades . Dimensionless ( self . mezcla . SG ) if self . tipoTermodinamica == <str> :                  self . T = unidades . Temperature ( T ) self . P = unidades . Pressure ( P ) eos = K ( self . T , self . P . atm , self . mezcla ) self . eos = eos self . x = unidades . Dimensionless ( eos . x )  else :                  self . x = unidades . Dimensionless ( x )  if 0. < self . x < 1. :                  self . Liquido = Mezcla ( tipo = 5 , fraccionMolar = eos . xi , caudalMolar = self . caudalmolar * ( 1 - self . x ) ) self . Gas = Mezcla ( tipo = 5 , fraccionMolar = eos . yi , caudalMolar = self . caudalmolar * self . x )  elif self . x <= 0 :                  self . Liquido = self . mezcla self . Gas = Mezcla ( )  else :                  self . Liquido = Mezcla ( ) self . Gas = self . mezcla  self . Gas . Z = unidades . Dimensionless ( float ( eos . Z [ 0 ] ) ) self . Liquido . Z = unidades . Dimensionless ( float ( eos . Z [ 1 ] ) ) if H == K :                  eosH = eos  else :                  eosH = H ( self . T , self . P . atm , self . mezcla )  self . H_exc = eosH . H_exc self . Liquido . Q = unidades . VolFlow ( 0 ) self . Gas . Q = unidades . VolFlow ( 0 ) self . Liquido . h = unidades . Power ( 0 ) self . Gas . h = unidades . Power ( 0 ) if self . x < 1 :                  Hl = ( self . Liquido . _Ho ( self . T ) . Jg - self . Liquido . Hv_DIPPR ( self . T ) . Jg ) * self . Liquido . caudalmasico . gh self . Liquido . h = unidades . Power ( Hl - R * self . T / self . M * self . H_exc [ 1 ] * ( 1 - self . x ) * self . Liquido . caudalmasico . gh , <str> ) self . Liquido . cp = self . Liquido . Cp_Liquido ( T ) self . Liquido . rho = self . Liquido . RhoL ( T , self . P ) self . Liquido . mu = self . Liquido . Mu_Liquido ( T , self . P . atm ) self . Liquido . k = self . Liquido . ThCond_Liquido ( T , self . P . atm , self . Liquido . rho ) self . Liquido . sigma = self . Liquido . Tension ( T ) self . Liquido . Q = unidades . VolFlow ( self . Liquido . caudalmasico / self . Liquido . rho ) self . Liquido . Prandt = self . Liquido . cp * self . Liquido . mu / self . Liquido . k  if self . x > 0 :                  Hg = self . Gas . _Ho ( self . T ) . Jg * self . Gas . caudalmasico . gh self . Gas . h = unidades . Power ( Hg - R * self . T / self . M * self . H_exc [ 0 ] * self . x * self . Gas . caudalmasico . gh , <str> ) self . Gas . cp = self . Gas . Cp_Gas ( T , self . P . atm ) self . Gas . rho = unidades . Density ( self . P . atm / self . Gas . Z / R_atml / self . T * self . M , <str> ) self . Gas . rhoSd = unidades . Density ( 1. / self . Gas . Z / R_atml / 298.15 * self . M , <str> ) self . Gas . mu = self . Gas . Mu_Gas ( T , self . P . atm , self . Gas . rho ) self . Gas . k = self . Gas . ThCond_Gas ( T , self . P . atm , self . Gas . rho ) self . Gas . Q = unidades . VolFlow ( self . Gas . caudalmasico / self . Gas . rho ) self . Gas . Prandt = self . Gas . cp * self . Gas . mu / self . Gas . k  self . Q = unidades . VolFlow ( self . Liquido . Q + self . Gas . Q ) self . h = unidades . Power ( self . Liquido . h + self . Gas . h ) self . Molaridad = [ caudal / self . Q . m3h for caudal in self . caudalunitariomolar ] self . cp_cv = 0.5 self . cp_cv_ideal = 0.5 self . s = 0 self . rho = 0  if setData :              self . cmp = compuesto self . T = compuesto . T self . P = compuesto . P self . x = compuesto . x self . M = unidades . Dimensionless ( compuesto . M ) self . Tc = compuesto . Tc self . Pc = compuesto . Pc self . h = unidades . Power ( compuesto . h * self . caudalmasico ) self . s = unidades . Entropy ( compuesto . s * self . caudalmasico ) self . rho = compuesto . rho self . Q = unidades . VolFlow ( compuesto . v * self . caudalmasico ) if self . _thermo != <str> :                  compuesto . _fillCorriente ( self )  self . SG = unidades . Dimensionless ( 1. ) self . Liquido = compuesto . Liquido self . Gas = compuesto . Gas if self . x > 0 :                  self . Gas . Q = unidades . VolFlow ( self . Q * ( 1 - self . x ) ) self . Gas . caudalmasico = unidades . MassFlow ( self . caudalmasico * self . x ) self . Gas . caudalmolar = unidades . MolarFlow ( self . caudalmolar * self . x ) kw = mix_molarflow_molarfraction ( self . Gas . caudalmolar , self . Gas . fraccion , self . componente ) self . Gas . caudalunitariomasico = [ unidades . MassFlow ( f ) for f in kw [ <str> ] ] self . Gas . caudalunitariomolar = [ unidades . MolarFlow ( f ) for f in kw [ <str> ] ] self . Gas . ids = self . ids  if self . x < 1 :                  self . Liquido . Q = unidades . VolFlow ( self . Q * ( 1 - self . x ) ) self . Liquido . caudalmasico = unidades . MassFlow ( self . caudalmasico * ( 1 - self . x ) ) self . Liquido . caudalmolar = unidades . MolarFlow ( self . caudalmolar * ( 1 - self . x ) ) kw = mix_molarflow_molarfraction ( self . Liquido . caudalmolar , self . Liquido . fraccion , self . componente ) self . Liquido . caudalunitariomasico = [ unidades . MassFlow ( f ) for f in kw [ <str> ] ] self . Liquido . caudalunitariomolar = [ unidades . MolarFlow ( f ) for f in kw [ <str> ] ] self . Liquido . sigma = compuesto . sigma self . Liquido . ids = self . ids   if Config . get ( <str> , <str> ) :              if self . kwargs [ <str> ] :                  self . solido = self . kwargs [ <str> ]  else :                  self . solido = Solid ( ** self . kwargs )  if self . solido . status :                  self . solido . RhoS ( T )   else :              self . solido = None  if self . kwargs [ <str> ] :              self . kwargs [ <str> ] *= self . kwargs [ <str> ] / self . Q Q = self . kwargs [ <str> ] self . kwargs [ <str> ] = None self . calculo ( ) self . kwargs [ <str> ] = Q self . kwargs [ <str> ] = None   def _method ( self ) :          Config = config . getMainWindowConfig ( ) if self . kwargs [ <str> ] is not None :              _meos = self . kwargs [ <str> ]  else :              _meos = Config . getboolean ( <str> , <str> )  mEoS_available = self . ids [ 0 ] in mEoS . id_mEoS MEoS = _meos and len ( self . ids ) == 1 and mEoS_available if self . kwargs [ <str> ] is not None :              _iapws = self . kwargs [ <str> ]  else :              _iapws = Config . getboolean ( <str> , <str> )  IAPWS = _iapws and len ( self . ids ) == 1 and self . ids [ 0 ] == 62 if self . kwargs [ <str> ] is not None :              _freesteam = self . kwargs [ <str> ]  else :              _freesteam = Config . getboolean ( <str> , <str> )  FREESTEAM = _freesteam and len ( self . ids ) == 1 and self . ids [ 0 ] == 62 and os . environ [ <str> ] COOLPROP_available = True GERG_available = True REFPROP_available = True for id in self . ids :              if id not in coolProp . __all__ :                  COOLPROP_available = False  if id not in refProp . __all__ :                  REFPROP_available = False  if id not in gerg . id_GERG :                  GERG_available = False   if self . kwargs [ <str> ] is not None :              _coolprop = self . kwargs [ <str> ]  else :              _coolprop = Config . getboolean ( <str> , <str> )  COOLPROP = _coolprop and os . environ [ <str> ] and COOLPROP_available if self . kwargs [ <str> ] is not None :              _refprop = self . kwargs [ <str> ]  else :              _refprop = Config . getboolean ( <str> , <str> )  REFPROP = _refprop and os . environ [ <str> ] and REFPROP_available if self . kwargs [ <str> ] is not None :              _gerg = self . kwargs [ <str> ]  else :              _gerg = Config . getboolean ( <str> , <str> )  GERG = _gerg and GERG_available if IAPWS and FREESTEAM :              self . _thermo = <str> self . _dependence = <str>  elif IAPWS :              self . _thermo = <str>  elif _meos and REFPROP :              self . _thermo = <str> self . _dependence = <str>  elif _meos and COOLPROP :              self . _thermo = <str> self . _dependence = <str>  elif MEoS and GERG :              self . _thermo = <str>  elif MEoS :              self . _thermo = <str>  else :              self . _thermo = <str>   def setSolid ( self , solid ) :          self . solido = solid  @ property def psystream ( self ) :          xw = self . fraccion_masica [ self . ids . index ( 62 ) ] xa = self . fraccion_masica [ self . ids . index ( 475 ) ] psystream = PsyStream ( caudalMasico = self . caudalMasico , P = self . P , tdb = self . T , w = xw / xa ) return psystream  def clone ( self , ** kwargs ) :          old_kwargs = self . kwargs . copy ( ) if <str> in kwargs :              split = kwargs [ <str> ] del kwargs [ <str> ] if self . kwargs [ <str> ] :                  kwargs [ <str> ] = [ ] for caudal in self . kwargs [ <str> ] :                      kwargs [ <str> ] . append ( split * caudal )   if self . kwargs [ <str> ] :                  kwargs [ <str> ] = [ ] for caudal in self . kwargs [ <str> ] :                      kwargs [ <str> ] . append ( split * caudal )   if self . kwargs [ <str> ] :                  kwargs [ <str> ] = split * self . kwargs [ <str> ]  if self . kwargs [ <str> ] :                  kwargs [ <str> ] = split * self . kwargs [ <str> ]   if <str> in kwargs :              del old_kwargs [ <str> ]  if <str> in kwargs :              old_kwargs . update ( kwargs [ <str> ] . kwargs ) del kwargs [ <str> ]  old_kwargs . update ( kwargs ) return Corriente ( ** old_kwargs )  def __repr__ ( self ) :          if self . status :              return <str> % ( self . T , self . P . atm )  else :              return <str> % ( self . __class__ )   def txt ( self ) :          txt = str ( self . notasPlain ) + os . linesep + os . linesep txt += <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep for key , value in list ( self . kwargs . items ( ) ) :              if value :                  txt += key + <str> + str ( value ) + os . linesep   if self . calculable :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . T . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . P . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . x . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . caudalmasico . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . caudalmolar . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Q . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . h . str ) + os . linesep txt += <str> % ( <str> , self . Tc . str ) + os . linesep txt += <str> % ( <str> , self . Pc . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . SG . str ) + os . linesep txt += os . linesep + <str> % ( QApplication . translate ( <str> , <str> ) , self . M . str ) + os . linesep txt += <str> + QApplication . translate ( <str> , <str> ) txt += os . linesep for cmp , xi in zip ( self . componente , self . fraccion ) :                  txt += <str> % ( cmp . nombre , xi ) + os . linesep  if self . x > 0 :                  txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . caudalmasico . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . caudalmolar . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . Q . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . M . str ) + os . linesep txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += os . linesep for cmp , xi in zip ( self . componente , self . Gas . fraccion ) :                      txt += <str> % ( cmp . nombre , xi ) + os . linesep  txt += os . linesep + <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . rho . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . Z . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . h . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . cp . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . mu . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Gas . k . str ) + os . linesep  if self . x < 1 :                  txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . caudalmasico . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . caudalmolar . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . Q . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . M . str ) + os . linesep txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += os . linesep for cmp , xi in zip ( self . componente , self . Liquido . fraccion ) :                      txt += <str> % ( cmp . nombre , xi ) + os . linesep  txt += os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . rho . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . Z . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . h . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . cp . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . mu . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . k . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . Liquido . sigma . str ) + os . linesep   else :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep  if self . solido . status :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep for cmp , G in zip ( self . solido . componente , self . solido . caudalUnitario ) :                  txt += <str> % ( cmp . nombre , G . str ) + os . linesep  txt += os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . solido . rho . str ) + os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , self . solido . diametro_medio . str ) + os . linesep if self . solido . diametros :                  txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += os . linesep txt += <str> % ( QApplication . translate ( <str> , <str> ) , unidades . Length . text ( <str> ) , QApplication . translate ( <str> , <str> ) ) + os . linesep for di , xi in zip ( self . solido . diametros , self . solido . fracciones ) :                      txt += <str> % ( di . config ( <str> ) , xi ) + os . linesep    if self . calculable and self . _thermo != <str> :              doc = self . _doc ( ) if 0 < self . x < 1 :                  param = <str>  else :                  param = <str>  if self . x == 0 :                  txtphases = <str> % QApplication . translate ( <str> , <str> ) + os . linesep phases = [ self . Liquido ]  elif self . x == 1 :                  txtphases = <str> % QApplication . translate ( <str> , <str> ) + os . linesep phases = [ self . Gas ]  else :                  txtphases = <str> % ( QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ) + os . linesep phases = [ self . Liquido , self . Gas ]  complejos = <str> data = self . cmp . properties ( ) for propiedad , key , unit in data :                  if key == <str> :                      if self . x < 1 :                          complejos += <str> % ( propiedad , self . Liquido . sigma . str ) complejos += os . linesep   elif key in [ <str> , <str> ] :                      complejos += propiedad + os . linesep for i , cmp in enumerate ( self . componente ) :                          values = [ <str> + cmp . nombre ] for phase in phases :                              values . append ( phase . __getattribute__ ( key ) [ i ] . str )  complejos += param % tuple ( values ) + os . linesep   elif key in [ <str> , <str> , <str> , <str> , <str> ] :                      complejos += propiedad + os . linesep for i , cmp in enumerate ( self . componente ) :                          values = [ <str> + cmp . nombre ] values . append ( self . __getattribute__ ( key ) [ i ] . str ) complejos += <str> % tuple ( values ) complejos += os . linesep   elif key in self . Gas . __dict__ or key in self . Liquido . __dict__ :                      values = [ propiedad ] for phase in phases :                          values . append ( phase . __getattribute__ ( key ) . str )  complejos += param % tuple ( values ) + os . linesep  else :                      complejos += <str> % ( propiedad , self . __getattribute__ ( key ) . str ) complejos += os . linesep   txt += doc + os . linesep + txtphases + complejos  return txt  def _doc ( self ) :          if self . _thermo == <str> :              title = QApplication . translate ( <str> , <str> ) doc_param = [ self . cmp . _constants [ <str> ] ]  else :              title = QApplication . translate ( <str> , <str> ) doc_param = self . cmp . __doi__  doc = <str> for doi in doc_param :              doc += doi [ <str> ] + <str> + doi [ <str> ] + <str> + doi [ <str> ] doc += os . linesep  txt = os . linesep + os . linesep + <str> txt += title + <str> + os . linesep txt += doc return txt  @ classmethod def propertiesNames ( cls ) :          list = [ ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarFlow ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MassFlow ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . VolFlow ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarFlow ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MassFlow ) , ( QApplication . translate ( <str> , <str> ) , <str> , str ) ] return list  def propertiesListTitle ( self , index ) :          lista = [ comp . nombre for comp in self . componente ] return lista  def writeToJSON ( self , data ) :          config . Entity . writeToJSON ( self , data ) solid = { } if self . solido is not None :              self . solido . writeStatetoJSON ( solid )  data [ <str> ] = solid  def writeStatetoJSON ( self , state ) :          state [ <str> ] = self . _thermo state [ <str> ] = self . _bool state [ <str> ] = self . tipoTermodinamica state [ <str> ] = self . T state [ <str> ] = self . P state [ <str> ] = self . x state [ <str> ] = self . M state [ <str> ] = self . Tc state [ <str> ] = self . Pc state [ <str> ] = self . h state [ <str> ] = self . s state [ <str> ] = self . rho state [ <str> ] = self . Q state [ <str> ] = self . SG if self . _thermo != <str> :              self . cmp . _writeGlobalState ( self , state )  state [ <str> ] = self . tipoFlujo self . mezcla . writeStatetoJSON ( state ) self . Liquido . writeStatetoJSON ( state , <str> ) self . Gas . writeStatetoJSON ( state , <str> ) if state [ <str> ] :              state [ <str> ] [ <str> ] = self . Liquido . sigma  if self . _thermo == <str> :              state [ <str> ] = self . cmp . kwargs [ <str> ]   def readFromJSON ( self , data ) :          config . Entity . readFromJSON ( self , data ) self . solido = Solid ( ) self . solido . readStatefromJSON ( data [ <str> ] )  def readStatefromJSON ( self , state ) :          self . _thermo = state [ <str> ] self . _bool = state [ <str> ] self . tipoTermodinamica = state [ <str> ] self . T = unidades . Temperature ( state [ <str> ] ) self . P = unidades . Pressure ( state [ <str> ] ) self . x = unidades . Dimensionless ( state [ <str> ] ) self . M = unidades . Dimensionless ( state [ <str> ] ) self . Tc = unidades . Temperature ( state [ <str> ] ) self . Pc = unidades . Pressure ( state [ <str> ] ) self . h = unidades . Power ( state [ <str> ] ) self . s = unidades . Entropy ( state [ <str> ] ) self . rho = unidades . Density ( state [ <str> ] ) self . Q = unidades . VolFlow ( state [ <str> ] ) self . SG = unidades . Dimensionless ( state [ <str> ] ) self . tipoFlujo = state [ <str> ] self . mezcla = Mezcla ( ) self . mezcla . readStatefromJSON ( state [ <str> ] ) self . ids = self . mezcla . ids self . componente = self . mezcla . componente self . fraccion = self . mezcla . fraccion self . caudalmasico = self . mezcla . caudalmasico self . caudalmolar = self . mezcla . caudalmolar self . fraccion_masica = self . mezcla . fraccion_masica self . caudalunitariomasico = self . mezcla . caudalunitariomasico self . caudalunitariomolar = self . mezcla . caudalunitariomolar if self . _thermo == <str> :              self . cmp = freeSteam . Freesteam ( )  elif self . _thermo == <str> :              self . cmp = iapws97 . IAPWS97 ( )  elif self . _thermo == <str> :              self . cmp = refProp . RefProp ( ids = self . ids )  elif self . _thermo == <str> :              self . cmp = coolProp . CoolProp ( ids = self . ids )  elif self . _thermo == <str> :              eq = state [ <str> ] self . cmp = mEoS . __all__ [ mEoS . id_mEoS . index ( self . ids [ 0 ] ) ] ( eq = eq )  if self . _thermo != <str> :              self . cmp . _readGlobalState ( self , state )  if self . _thermo in [ <str> , <str> ] :              self . Liquido = ThermoWater ( ) self . Gas = ThermoWater ( )  elif self . _thermo in [ <str> , <str> ] :              self . Liquido = ThermoAdvanced ( ) self . Gas = ThermoAdvanced ( )  elif self . _thermo == <str> :              self . Liquido = ThermoRefProp ( ) self . Gas = ThermoRefProp ( )  else :              self . Liquido = Mezcla ( ) self . Gas = Mezcla ( )  self . Liquido . readStatefromJSON ( state [ <str> ] ) self . Gas . readStatefromJSON ( state [ <str> ] ) if state [ <str> ] :              self . Liquido . sigma = unidades . Tension ( state [ <str> ] [ <str> ] )    class PsyStream ( config . Entity ) :      kwargs = { <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : None , <str> : None , <str> : None , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : None } status = 0 msg = <str> def __init__ ( self , ** kwargs ) :          self . kwargs = PsyStream . kwargs . copy ( ) self . __call__ ( ** kwargs )  def __call__ ( self , ** kwargs ) :          if kwargs . get ( <str> , None ) :              kwargs . update ( kwargs [ <str> ] . kwargs )  self . kwargs . update ( kwargs ) for key , value in list ( self . kwargs . items ( ) ) :              if value :                  self . _bool = True break   if self . calculable :              self . status = 1 self . calculo ( ) self . msg = <str>   @ property def calculable ( self ) :          tdp = self . kwargs . get ( <str> , 0 ) tdb = self . kwargs . get ( <str> , 0 ) twb = self . kwargs . get ( <str> , 0 ) w = self . kwargs . get ( <str> , None ) HR = self . kwargs . get ( <str> , None ) h = self . kwargs . get ( <str> , None ) v = self . kwargs . get ( <str> , 0 ) self . mode = - 1 if tdb and w is not None :              self . mode = 0  elif tdb and HR is not None :              self . mode = 1  elif tdb and twb :              self . mode = 2  elif tdb and tdp :              self . mode = 3  elif tdp and HR is not None :              self . mode = 4  elif self . kwargs [ <str> ] :              self . mode = 5  caudal = self . kwargs [ <str> ] or self . kwargs [ <str> ] or self . kwargs [ <str> ] return bool ( self . mode + 1 ) and caudal  def calculo ( self ) :          if self . kwargs [ <str> ] :              self . state = self . kwargs [ <str> ]  else :              self . state = PsychroState ( ** self . kwargs )  kwargs = self . kwargs self . __dict__ . update ( self . state . __dict__ ) self . kwargs = kwargs self . updateFlow ( )  def updatekwargsFlow ( self , key , value ) :          self . kwargs [ key ] = value if key == <str> and value :              self . kwargs [ <str> ] = 0.0 self . kwargs [ <str> ] = 0.0  elif key == <str> and value :              self . kwargs [ <str> ] = 0.0 self . kwargs [ <str> ] = 0.0  elif key == <str> and value :              self . kwargs [ <str> ] = 0.0 self . kwargs [ <str> ] = 0.0  if self . status :              self . updateFlow ( )  elif self . calculable :              self . status = 1 self . calculo ( ) self . msg = <str>   def updateFlow ( self ) :          if self . kwargs [ <str> ] :              G = self . kwargs [ <str> ] M = G / ( self . Xw * 18.01528 + self . Xa * 28.9645 ) Q = G * self . v  elif self . kwargs [ <str> ] :              M = self . kwargs [ <str> ] G = M * self . Xw * 18.01528 + M * self . Xa * 28.9645 Q = G * self . v  elif self . kwargs [ <str> ] :              Q = self . kwargs [ <str> ] G = Q * self . rho M = G / ( self . Xw * 18.01528 + self . Xa * 28.9645 )  self . caudalMasico = unidades . MassFlow ( G ) self . caudalVolumetrico = unidades . VolFlow ( Q ) self . caudalMolar = unidades . MolarFlow ( M )  @ property def corriente ( self ) :          corriente = Corriente ( T = self . state . twb , P = self . state . P , caudalMasico = self . caudalMasico , ids = [ 62 , 475 ] , fraccionMolar = [ self . state . Xw , self . state . Xa ] ) return corriente   if __name__ == <str> :      agua = Corriente ( T = 300 , P = 101325 , caudalMasico = 1. , ids = [ 62 ] , fraccionMolar = [ 1. ] , MEoS = True ) agua2 = Corriente ( T = 300 , P = 101325 , caudalMasico = 1. , ids = [ 62 ] , fraccionMolar = [ 1. ] , iapws = True ) from pprint import pprint pprint ( agua . __dict__ ) pprint ( agua2 . __dict__ ) print ( agua . rho , agua2 . rho )   