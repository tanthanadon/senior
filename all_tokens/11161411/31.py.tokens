from PyQt5 import QtWidgets from lib . friction import f_list from UI . widgets import LineConfig class Widget ( QtWidgets . QWidget ) :      def __init__ ( self , config = None , parent = None ) :          super ( Widget , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . metodos = QtWidgets . QComboBox ( ) for f in f_list :              line = f . __doc__ . split ( <str> ) [ 0 ] year = line . split ( <str> ) [ - 1 ] name = line . split ( <str> ) [ - 3 ] doc = name + <str> + year self . metodos . addItem ( doc )  layout . addWidget ( self . metodos , 1 , 2 ) self . fanning = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . fanning , 2 , 1 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 1 ) self . ed = QtWidgets . QLineEdit ( ) layout . addWidget ( self . ed , 3 , 2 ) self . lineconfig = LineConfig ( <str> , QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . lineconfig , 4 , 1 , 1 , 2 ) self . cruxconfig = LineConfig ( <str> , QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . cruxconfig , 5 , 1 , 1 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 1 , 1 , 3 ) if config and config . has_section ( <str> ) :              self . metodos . setCurrentIndex ( config . getint ( <str> , <str> ) ) self . fanning . setChecked ( config . getboolean ( <str> , <str> ) ) self . ed . setText ( config . get ( <str> , <str> ) ) self . lineconfig . setConfig ( config , <str> ) self . cruxconfig . setConfig ( config , <str> )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , str ( self . metodos . currentIndex ( ) ) ) config . set ( <str> , <str> , str ( self . fanning . isChecked ( ) ) ) config . set ( <str> , <str> , self . ed . text ( ) ) config = self . lineconfig . value ( config , <str> ) config = self . cruxconfig . value ( config , <str> ) return config   class ConfigDialog ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( ConfigDialog , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) self . widget = Widget ( config ) layout . addWidget ( self . widget ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )  def value ( self , config ) :          config = self . widget . value ( config ) return config   if __name__ == <str> :      import os import sys from configparser import ConfigParser app = QtWidgets . QApplication ( sys . argv ) conf_dir = os . path . expanduser ( <str> ) + <str> config = ConfigParser ( ) config . read ( conf_dir + <str> ) Dialog = ConfigDialog ( config ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   