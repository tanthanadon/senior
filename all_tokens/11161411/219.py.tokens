from unittest import TestCase from lib import unidades from lib . meos import MEoS from lib . mEoS import C3 class R32 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 424. ) Tc = unidades . Temperature ( 351.255 ) Pc = unidades . Pressure ( 5782. , <str> ) M = 52.024 Tt = unidades . Temperature ( 136.34 ) Tb = unidades . Temperature ( 221.499 ) f_acent = 0.2769 momentoDipolar = unidades . DipoleMoment ( 1.978 , <str> ) id = 645 Fi1 = { <str> : 8.314471 , <str> : [ 1 , 3.004486 ] , <str> : [ 0 , 1 ] , <str> : [ - 8.258096 , 6.353098 ] , <str> : [ 1.160761 , 2.645151 , 5.794987 , 1.129475 ] , <str> : [ 2.2718538 , 11.9144210 , 5.1415638 , 32.7682170 ] } Fi2 = { <str> : [ 1 , 2.999660 ] , <str> : [ 0 , 1 ] , <str> : [ - 8.253834 , 6.351918 ] , <str> : [ 3.12115 , 0.9994221 , 2.412721 , 3.055435 ] , <str> : [ 4.559777 , 2.164788 , 1.234687e1 , 5.877902 ] } CP2 = { <str> : 36.79959 / 8.314471 , <str> : [ - 0.06304821 / 8.314471 , 3.757936e-4 / 8.314471 , - 3.219812e-7 / 8.314471 ] , <str> : [ 1 , 2 , 3 ] , <str> : [ ] , <str> : [ ] } CP3 = { <str> : 4.3914 , <str> : [ - 2.5143 / 351.35 , 5.3885 / 351.35 ** 2 , - 1.6057 / 351.35 * 3 ] , <str> : [ 1 , 2 , 3 ] , <str> : [ ] , <str> : [ ] } tillner = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 435.0 , <str> : 70000.0 , <str> : 27.4734 , <str> : [ 0.1046634e1 , - 0.5451165 , - 0.2448595e-2 , - 0.4877002e-1 , 0.3520158e-1 , 0.1622750e-2 , 0.2377225e-4 , 0.2914900e-1 ] , <str> : [ 1 , 2 , 5 , 1 , 1 , 3 , 8 , 4 ] , <str> : [ 0.25 , 1. , - 0.25 , - 1. , 2. , 2. , 0.75 , 0.25 ] , <str> : [ 0.3386203e-2 , - 0.4202444e-2 , 0.4782025e-3 , - 0.5504323e-2 , - 0.2418396e-1 , 0.4209034 , - 0.4616537 , - 0.1200513e1 , - 0.2591550e1 , - 0.1400145e1 , 0.8263017 ] , <str> : [ 4 , 4 , 8 , 3 , 5 , 1 , 1 , 3 , 1 , 2 , 3 ] , <str> : [ 18. , 26. , - 1. , 25. , 1.75 , 4. , 5. , 1. , 1.5 , 1. , 0.5 ] , <str> : [ 4 , 3 , 1 , 4 , 1 , 2 , 2 , 1 , 1 , 1 , 1 ] , <str> : [ 1 ] * 11 } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : <str> , <str> : 351.35 , <str> : 427 / M , <str> : 5795 , <str> : Tt , <str> : 600.0 , <str> : 100000.0 , <str> : 27.41 , <str> : [ 0.92876414 , - 2.4673952 , 0.40129043 , 0.055101049 , 1.1559754e-4 ] , <str> : [ 1 , 1 , 1 , 3 , 7 ] , <str> : [ 0.25 , 1.25 , 1.5 , 0.25 , 0.875 ] , <str> : [ - 0.25209758 , 0.42091879 , 0.0037071833 , - 0.10308607 , - 0.11592089 , - 0.044350855 , - 0.012788805 ] , <str> : [ 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 2.375 , 2 , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 7 } astina = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : Tt , <str> : 450.0 , <str> : 72000.0 , <str> : 27.48 , <str> : [ 2.118688 , - 4.531096 , 1.442456 , 2.053906e-1 , - 1.311675e-1 , 1.022272e-2 ] , <str> : [ 1 , 1 , 1 , 3 , 3 , 4 ] , <str> : [ 0.5 , 1.125 , 1.625 , 0.875 , 1.5 , 1.75 ] , <str> : [ 4.873982e-1 , - 1.062213 , - 4.542051e-3 , - 6.933347e-4 , - 3.510307e-2 , - 5.606161e-2 , 8.849625e-2 , - 1.850758e-2 , 7.878071e-3 , - 3.384115e-2 , 1.641979e-4 , - 1.459172e-3 ] , <str> : [ 1 , 1 , 5 , 5 , 6 , 1 , 2 , 5 , 6 , 2 , 2 , 8 ] , <str> : [ 1.75 , 2.75 , 0.25 , 3.75 , 1 , 6.5 , 2.5 , 7.5 , 7.5 , 11 , 16 , 13 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 ] , <str> : [ 1 ] * 12 } outcalt = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : 351.35 , <str> : 5795 , <str> : 8.2078 , <str> : CP2 , <str> : <str> , <str> : Tt , <str> : 500.0 , <str> : 60000.0 , <str> : 27.48 , <str> : [ None , - 0.131275405202e-3 , 0.899927934911 , - 0.281400805178e2 , 0.436091182784e4 , - 0.837235280004e6 , - 0.782176408963e-6 , - 0.111226606825e1 , 0.539331431878e3 , 0.288600276863e6 , - 0.352264609289e-4 , 0.189661830119 , - 0.686549003993e2 , - 0.349007064245e-2 , - 0.749983559476e-1 , - 0.321524283063e2 , 0.913057921906e-2 , - 0.171082181849e-3 , 0.503986984347e-1 , - 0.830354867752e-3 , - 0.245522676708e6 , - 0.107859056038e8 , - 0.429514279646e4 , 0.808724729567e8 , - 0.125945229993e2 , - 0.105735009761e4 , - 0.904064745354e-1 , - 0.183578733048e4 , - 0.169690612464e-3 , 0.639250820631e-1 , - 0.204925767440e-6 , - 0.165629700870e-3 , - 0.932607493424e-2 ] } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314471 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 2.75866232e-1 , 9.26526641e-1 , - 2.44296579 , 5.34289357e-2 , 1.06739638e-4 , 3.46487335e-2 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ 9.07435007e-2 , - 1.93104843e-1 , 5.11370826e-1 , 3.09453923e-3 , - 1.53328967e-1 , - 1.03816916e-1 , - 3.8066998e-2 , - 1.16075825e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } vasserman = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 0.159821 * M , <str> : 351.35 , <str> : 427 / M , <str> : CP3 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 1.183486 , - 2.430934 , - 1.472179e-2 , - 4.506743e-1 , 1.721527 , - 1.349166 , - 6.052212e-1 , 9.265910e-1 , 8.081905e-2 , - 1.999587e-1 , 3.655934e-3 , 8.217181e-3 , - 3.230880e-3 , 5.778584e-3 , - 2.536027e-6 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 4 , 5 , 6 , 6 , 10 ] , <str> : [ 0 , 1 , 4 , 0 , 1 , 2 , 1 , 2 , 0 , 2 , 3 , 2 , 0 , 1 , 0 ] , <str> : [ - 6.546357e-2 , - 2.784785e-1 , 1.113400 , - 2.954417 , 4.898234 , - 2.354906 , - 7.709682e-1 , 6.502963e-1 , 2.168338e-1 , - 5.499117e-1 , 1.978099e-2 , 9.535163e-2 , - 1.425744e-2 , 3.921874e-3 ] , <str> : [ 1 , 1 , 2 , 2 , 2 , 2 , 3 , 4 , 5 , 5 , 6 , 6 , 8 , 9 ] , <str> : [ 4 , 5 , 1 , 2 , 4 , 5 , 5 , 5 , 3 , 4 , 3 , 5 , 4 , 2 ] , <str> : [ 2 ] * 14 , <str> : [ 1 ] * 14 } eq = tillner , outcalt , shortSpan , astina , vasserman , sun _PR = 0.00585 _surface = { <str> : [ 0.07147 ] , <str> : [ 1.246 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 0.74883e1 , 0.19697e1 , - 0.17496e1 , - 0.40224e1 , 0.15209e1 ] , <str> : [ 1.0 , 1.5 , 2.2 , 4.8 , 6.2 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.12584e1 , 0.46410e1 , - 0.54870e1 , 0.33115e1 , - 0.61370 ] , <str> : [ 0.27 , 0.8 , 1.1 , 1.5 , 1.8 ] } _vapor_Density = { <str> : 2 , <str> : [ - .22002e1 , - .5972e1 , - .14571e2 , - .42598e2 , .42686e1 , - .73373e2 ] , <str> : [ 0.336 , 0.98 , 2.7 , 5.7 , 6.5 , 11.0 ] } trnECS = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : <str> , <str> : C3 , <str> : <str> , <str> : <str> , <str> : 289.65 , <str> : 0.4098 , <str> : 5 , <str> : [ 0.7954 , 5.42658e-2 ] , <str> : [ 0 , 1 ] , <str> : [ 4.36654e-4 , 1.78134e-6 ] , <str> : [ 0 , 1 ] , <str> : [ 1.2942 , - 9.24549e-2 ] , <str> : [ 0 , 1 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.03 , <str> : 0.194e-9 , <str> : 0.0496 , <str> : 5e-10 , <str> : 1.5 * Tc } _viscosity = trnECS , _thermal = trnECS ,  class Test ( TestCase ) :      def test_tillner ( self ) :          st = R32 ( T = R32 . Tt , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 2 ) , 0.05 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1429.3 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 0.0022 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 19.07 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 463.38 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 444.31 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 0.105 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 3.2937 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.592 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.660 ) st = R32 ( T = - 100 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 2 ) , 3.81 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1339.0 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 0.1385 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 38.83 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 429.48 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 468.31 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.2711 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 2.7515 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.560 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.703 ) st = R32 ( T = - 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 2 ) , 110.14 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1208.4 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 3.2316 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 117.22 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 380.06 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 497.27 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.6683 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 2.3714 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.589 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.883 ) st = R32 ( T = 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 2 ) , 813.10 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1055.3 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 22.091 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 200.00 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 315.30 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 515.30 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.0000 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 2.1543 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.745 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.251 ) st = R32 ( T = 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 1 ) , 3141.2 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 839.26 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 98.550 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 297.49 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 209.62 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 507.10 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.3183 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.9670 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.439 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 2.477 ) st = R32 ( T = 74 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 1 ) , 5304.6 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 624.57 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 240.12 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 367.53 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 98.88 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 466.41 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.5179 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.8027 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 8.052 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 12.094 ) st = R32 ( T = 78 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . kPa , 1 ) , 5769.7 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 484.61 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 367.24 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 400.38 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 28.52 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 428.90 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.6095 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.6907 ) st = R32 ( P = 100e3 , x = 0.5 ) self . assertEqual ( round ( st . T . C , 2 ) , - 51.91 ) self . assertEqual ( round ( st . Liquido . rho , 1 ) , 1213.6 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 2.9512 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 114.18 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 382.14 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 496.32 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.6546 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 2.3819 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 1.587 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 0.873 ) st = R32 ( P = 5000e3 , x = 0.5 ) self . assertEqual ( round ( st . T . C , 2 ) , 71.18 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 666.31 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 207.51 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 356.00 ) self . assertEqual ( round ( st . Hvap . kJkg , 2 ) , 120.27 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 476.27 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.4859 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 1.8352 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 5.428 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 7.607 ) st = R32 ( T = - 85 + 273.15 , P = 10e3 ) self . assertEqual ( round ( st . rho , 4 ) , 0.3354 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 478.09 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.6526 ) st = R32 ( T = - 75 + 273.15 , P = 20e3 ) self . assertEqual ( round ( st . rho , 4 ) , 0.6401 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 484.34 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.5754 ) st = R32 ( T = 160 + 273.15 , P = 50e3 ) self . assertEqual ( round ( st . rho , 4 ) , 0.7234 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 687.70 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 3.0905 ) st = R32 ( T = - 55 + 273.15 , P = 100e3 ) self . assertEqual ( round ( st . rho , 1 ) , 1222.2 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 109.29 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.6324 ) st = R32 ( T = 273.15 , P = 200e3 ) self . assertEqual ( round ( st . rho , 4 ) , 4.7455 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 536.37 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.4378 ) st = R32 ( T = - 25 + 273.15 , P = 300e3 ) self . assertEqual ( round ( st . rho , 4 ) , 8.2165 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 509.91 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.2747 ) st = R32 ( T = 105 + 273.15 , P = 500e3 ) self . assertEqual ( round ( st . rho , 4 ) , 8.4945 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 627.61 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.5771 ) st = R32 ( T = 5 + 273.15 , P = 1000e3 ) self . assertEqual ( round ( st . rho , 1 ) , 1038.0 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 208.80 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.0313 ) st = R32 ( T = - 85 + 273.15 , P = 2000e3 ) self . assertEqual ( round ( st . rho , 1 ) , 1303.6 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 63.18 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.3976 ) st = R32 ( T = 160 + 273.15 , P = 3000e3 ) self . assertEqual ( round ( st . rho , 3 ) , 47.926 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 662.45 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.3927 ) st = R32 ( T = 70 + 273.15 , P = 5000e3 ) self . assertEqual ( round ( st . rho , 2 ) , 689.76 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 350.24 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.4692 ) st = R32 ( T = 45 + 273.15 , P = 10000e3 ) self . assertEqual ( round ( st . rho , 2 ) , 930.32 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 280.50 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.2414 ) st = R32 ( T = - 85 + 273.15 , P = 20000e3 ) self . assertEqual ( round ( st . rho , 1 ) , 1323.9 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 72.12 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.3723 ) st = R32 ( T = 160 + 273.15 , P = 40000e3 ) self . assertEqual ( round ( st . rho , 2 ) , 760.12 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 475.86 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.6700 ) st = R32 ( T = - 85 + 273.15 , P = 20e3 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.559 ) st = R32 ( T = 160 + 273.15 , P = 6000e3 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.412 ) st = R32 ( T = 273.15 , P = 50000e3 ) self . assertEqual ( round ( st . cp . kJkgK , 3 ) , 1.518 ) st = R32 ( T = - 85 + 273.15 , P = 20e3 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 0.970 ) st = R32 ( T = 160 + 273.15 , P = 6000e3 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 0.976 ) st = R32 ( T = 273.15 , P = 50000e3 ) self . assertEqual ( round ( st . cv . kJkgK , 3 ) , 0.949 ) st = R32 ( T = - 85 + 273.15 , P = 20e3 ) self . assertEqual ( round ( st . w , 1 ) , 1143.4 ) st = R32 ( T = 160 + 273.15 , P = 6000e3 ) self . assertEqual ( round ( st . w , 2 ) , 254.16 ) st = R32 ( T = 273.15 , P = 50000e3 ) self . assertEqual ( round ( st . w , 2 ) , 989.78 )  def test_shortSpan ( self ) :          st = R32 ( T = 500 , rho = 500 , eq = <str> ) self . assertEqual ( round ( st . cp0 . kJkgK , 4 ) , 1.1419 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 30.358 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.8390 ) st2 = R32 ( T = 600 , rho = 100 , eq = <str> ) self . assertEqual ( round ( st2 . h . kJkg - st . h . kJkg , 2 ) , 235.82 ) self . assertEqual ( round ( st2 . s . kJkgK - st . s . kJkgK , 5 ) , 0.59788 )    