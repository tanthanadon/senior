from functools import partial import os from PyQt5 import QtCore , QtGui , QtWidgets from numpy import loadtxt from lib . unidades import Temperature from UI . widgets import Entrada_con_unidades , Tabla class eqDIPPR ( QtWidgets . QWidget ) :      def __init__ ( self , value , parent = None ) :          super ( eqDIPPR , self ) . __init__ ( parent ) layout = QtWidgets . QHBoxLayout ( self ) layout . setContentsMargins ( 0 , 0 , 0 , 0 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) ) self . eqDIPPR = QtWidgets . QSpinBox ( ) self . eqDIPPR . setValue ( value ) self . eqDIPPR . setRange ( 1 , 9 ) self . eqDIPPR . setAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) self . eqDIPPR . setFixedWidth ( 50 ) txt = QtWidgets . QApplication . translate ( <str> , <str> ) + <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += <str> txt += QtWidgets . QApplication . translate ( <str> , <str> ) + <str> txt += <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str> txt += <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str> txt += <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str> txt += <str> + QtWidgets . QApplication . translate ( <str> , <str> ) self . eqDIPPR . setToolTip ( txt ) layout . addWidget ( self . eqDIPPR ) layout . addStretch ( )  @ property def value ( self ) :          return self . eqDIPPR . value  def setValue ( self , value ) :          self . eqDIPPR . setValue ( value )  def clear ( self ) :          self . eqDIPPR . clear ( )   class InputTableWidget ( QtWidgets . QWidget ) :      def __init__ ( self , columnas , data = None , t = [ ] , property = [ ] , horizontalHeader = [ ] , title = <str> , DIPPR = False , hasTc = 0 , Tc = None , eq = 1 , unit = [ ] , parent = None ) :          super ( InputTableWidget , self ) . __init__ ( parent ) self . columnas = columnas self . title = title self . unit = unit gridLayout = QtWidgets . QGridLayout ( self ) gridLayout . setContentsMargins ( 0 , 0 , 0 , 0 ) openButton = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , <str> ) openButton . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) openButton . clicked . connect ( self . open ) gridLayout . addWidget ( openButton , 1 , 1 ) saveButton = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , <str> ) saveButton . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) saveButton . clicked . connect ( self . save ) gridLayout . addWidget ( saveButton , 1 , 2 ) clearButton = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , <str> ) clearButton . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) clearButton . clicked . connect ( self . delete ) gridLayout . addWidget ( clearButton , 1 , 3 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 1 , 4 ) self . tabla = Tabla ( self . columnas , horizontalHeader = horizontalHeader , verticalHeader = False , stretch = False ) self . tabla . setConnected ( ) if unit :              hHeader = [ ] for unit , title in zip ( self . unit , horizontalHeader ) :                  hHeader . append ( <str> % ( title , unit . text ( ) ) )  self . tabla . setHorizontalHeaderLabels ( hHeader ) self . tabla . horizontalHeader ( ) . sectionClicked . connect ( self . editUnit )  if data :              self . tabla . setData ( data ) self . tabla . addRow ( )  elif t and property :              self . tabla . setColumn ( 0 , t ) self . tabla . setColumn ( 1 , property )  gridLayout . addWidget ( self . tabla , 2 , 1 , 1 , 4 ) if DIPPR :              self . eqDIPPR = eqDIPPR ( eq ) gridLayout . addWidget ( self . eqDIPPR , 3 , 1 , 1 , 4 ) self . eqDIPPR . eqDIPPR . valueChanged . connect ( self . showTc ) self . labelTc = QtWidgets . QLabel ( <str> , self ) gridLayout . addWidget ( self . labelTc , 4 , 1 ) self . tc = Entrada_con_unidades ( Temperature , value = Tc ) gridLayout . addWidget ( self . tc , 4 , 2 , 1 , 3 ) self . showTc ( 1 )   def showTc ( self , value ) :          self . labelTc . setVisible ( value in ( 7 , 9 ) ) self . tc . setVisible ( value in ( 7 , 9 ) )  def open ( self ) :          fname , ext = QtWidgets . QFileDialog . getOpenFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) if fname :              try :                  with open ( fname , <str> ) as file :                      data = loadtxt ( file )  self . delete ( ) self . tabla . setData ( data )  except ValueError as er :                  title = QtWidgets . QApplication . translate ( <str> , <str> ) msg = fname + <str> + er . args [ 0 ] QtWidgets . QMessageBox . critical ( self , title , msg )    def save ( self ) :          fname , ext = QtWidgets . QFileDialog . getSaveFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , <str> ) if fname :              with open ( fname , <str> ) as file :                  file . write ( <str> + self . title + <str> ) file . write ( <str> ) for i in range ( self . tabla . columnCount ( ) ) :                      item = self . tabla . horizontalHeaderItem ( i ) file . write ( item . text ( ) + <str> )  file . write ( <str> ) data = self . data for fila in range ( len ( data ) ) :                      for columna in range ( self . tabla . columnCount ( ) ) :                          file . write ( str ( data [ fila ] [ columna ] ) + <str> )  file . write ( <str> )     def delete ( self ) :          self . tabla . setRowCount ( 0 ) self . tabla . clearContents ( ) self . tabla . addRow ( )  @ property def data ( self ) :          return self . tabla . getData ( )  def column ( self , column , magnitud = None , unit = <str> ) :          data = self . tabla . getColumn ( column ) if self . unit :              magnitud = self . unit [ column ] tx = self . tabla . horizontalHeaderItem ( column ) . text ( ) . split ( <str> ) [ - 1 ] unit = magnitud . __units__ [ magnitud . __text__ . index ( tx ) ]  if magnitud is not None :              data = [ magnitud ( x , unit ) for x in data ]  return data  def editUnit ( self , col ) :          unit = self . unit [ col ] widget = QtWidgets . QComboBox ( self . tabla ) for txt in unit . __text__ :              widget . addItem ( txt )  txt = self . tabla . horizontalHeaderItem ( col ) . text ( ) . split ( <str> ) [ - 1 ] widget . setCurrentText ( txt ) size = self . tabla . horizontalHeader ( ) . sectionSize ( col ) pos = self . tabla . horizontalHeader ( ) . sectionPosition ( col ) h = self . tabla . horizontalHeader ( ) . height ( ) geometry = QtCore . QRect ( pos , 0 , size , h ) widget . setGeometry ( geometry ) widget . currentIndexChanged [ <str> ] . connect ( partial ( self . updateHeader , col ) ) widget . show ( ) widget . showPopup ( )  def updateHeader ( self , col , index ) :          widget = self . sender ( ) txt = self . tabla . horizontalHeaderItem ( col ) . text ( ) newtxt = <str> % ( txt . split ( <str> ) [ 0 ] , widget . currentText ( ) ) self . tabla . setHorizontalHeaderItem ( col , QtWidgets . QTableWidgetItem ( newtxt ) ) widget . close ( )   class InputTableDialog ( QtWidgets . QDialog ) :      def __init__ ( self , columnas = 2 , help = False , helpFile = <str> , ** kwargs ) :          parent = kwargs . get ( <str> , None ) super ( InputTableDialog , self ) . __init__ ( parent ) title = kwargs . get ( <str> , <str> ) self . setWindowTitle ( title ) self . helpFile = helpFile layout = QtWidgets . QVBoxLayout ( self ) self . widget = InputTableWidget ( columnas , ** kwargs ) layout . addWidget ( self . widget ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) if help :              self . buttonBox . addButton ( QtWidgets . QDialogButtonBox . Help ) self . buttonBox . helpRequested . connect ( self . ayuda )  self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )  def ayuda ( self ) :          url = QtCore . QUrl ( self . helpFile ) QtGui . QDesktopServices . openUrl ( url )   if __name__ == <str> :      import sys from lib import unidades app = QtWidgets . QApplication ( sys . argv ) hHeader = [ <str> , <str> ] ui = InputTableDialog ( title = <str> , horizontalHeader = hHeader , unit = [ unidades . Temperature , unidades . Viscosity ] ) ui . show ( ) sys . exit ( app . exec_ ( ) )   