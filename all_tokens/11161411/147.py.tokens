<str> from scipy . constants import R from lib . EoS . cubic import Cubic class ALS1983 ( Cubic ) :      <str> __title__ = <str> __status__ = <str> __doi__ = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , def __init__ ( self , T , P , mezcla ) :          self . T = T self . P = P self . mezcla = mezcla ai = [ ] b1i = [ ] b2i = [ ] b3i = [ ] for cmp in mezcla . componente :              B1 = 0.08974 - 0.03452 * cmp . f_acent + 0.0033 * cmp . f_acent ** 2 B2 = 0.03686 + 0.00405 * cmp . f_acent - 0.01073 * cmp . f_acent ** 2 + 0.00157 * cmp . f_acent ** 3 B3 = 0.154 + 0.14122 * cmp . f_acent - 0.00272 * cmp . f_acent ** 2 - 0.00484 * cmp . f_acent ** 3 A = 0.44869 + 0.04024 * cmp . f_acent + 0.01111 * cmp . f_acent ** 2 - 0.00576 * cmp . f_acent ** 3 m = 0.4070 + 1.3787 * cmp . f_acent - 0.2933 * cmp . f_acent ** 2 alfa = 1 + m * ( 1 - ( T / cmp . Tc ) ** 0.5 ) ** 2 ai . append ( A * alfa * R ** 2 * cmp . Tc ** 2 / cmp . Pc ) b1i . append ( B1 * R * cmp . Tc / cmp . Pc ) b2i . append ( B2 * R * cmp . Tc / cmp . Pc ) b3i . append ( B3 * R * cmp . Tc / cmp . Pc )  am , b1m , b2m , b3m = self . _mixture ( None , mezcla . ids , [ ai , b1i , b2i , b3i ] ) self . ai = ai self . bi = b1i self . b = b1m self . tita = am self . delta = b3m - b2m self . epsilon = - b2m * b3m super ( ALS1983 , self ) . __init__ ( T , P , mezcla )   if __name__ == <str> :      from lib . mezcla import Mezcla mix = Mezcla ( 5 , ids = [ 4 ] , caudalMolar = 1 , fraccionMolar = [ 1 ] ) eq = ALS1983 ( 300 , 9.9742e5 , mix ) print ( <str> % ( eq . Vg . ccmol , eq . Vl . ccmol ) ) eq = ALS1983 ( 300 , 42.477e5 , mix ) print ( <str> % ( eq . Vl . ccmol ) )   