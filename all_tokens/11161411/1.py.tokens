import argparse from configparser import ConfigParser import json import logging import os import shutil import sys import urllib . error desc = further = parser = argparse . ArgumentParser ( description = desc , epilog = further ) parser . add_argument ( <str> , <str> , dest = <str> , default = <str> , help = <str> ) parser . add_argument ( <str> , action = <str> , help = <str> ) parser . add_argument ( <str> , <str> , action = <str> , help = <str> ) parser . add_argument ( <str> , help = <str> ) parser . add_argument ( <str> , nargs = <str> , help = <str> ) args = parser . parse_args ( ) path = os . path . dirname ( os . path . realpath ( sys . argv [ 0 ] ) ) sys . path . append ( path ) os . environ [ <str> ] = path + os . sep conf_dir = os . path . expanduser ( <str> ) + os . sep + <str> + os . sep try :      from PyQt5 import QtCore , QtGui , QtWidgets  except ImportError as err :      print ( <str> ) raise err  app = QtWidgets . QApplication ( sys . argv ) app . setOrganizationName ( <str> ) app . setOrganizationDomain ( <str> ) app . setApplicationName ( <str> ) if args . style is not None :      style = QtWidgets . QStyleFactory . create ( args . style ) if style :          app . setStyle ( style )  else :          print ( <str> % QtWidgets . QStyleFactory . keys ( ) )   app . setStyleSheet ( <str> ) settings = QtCore . QSettings ( ) if not settings . contains ( <str> ) :      filename = QtCore . QVariant ( ) settings . setValue ( <str> , filename ) recentFiles = QtCore . QVariant ( ) settings . setValue ( <str> , recentFiles ) settings . setValue ( <str> , QtCore . QVariant ( ) ) settings . setValue ( <str> , QtCore . QVariant ( ) )  locale = QtCore . QLocale . system ( ) . name ( ) myTranslator = QtCore . QTranslator ( ) if myTranslator . load ( <str> + locale , os . environ [ <str> ] + <str> ) :      app . installTranslator ( myTranslator )  qtTranslator = QtCore . QTranslator ( ) path = QtCore . QLibraryInfo . location ( QtCore . QLibraryInfo . TranslationsPath ) if qtTranslator . load ( <str> + locale , path ) :      app . installTranslator ( qtTranslator )  try :      import scipy  except ImportError as err :      msg = QtWidgets . QApplication . translate ( <str> , <str> ) print ( msg ) raise err  else :      mayor , minor , corr = map ( int , scipy . version . version . split ( <str> ) ) if mayor == 0 and minor < 14 :          msg = QtWidgets . QApplication . translate ( <str> , <str> ) raise ImportError ( msg )   try :      import numpy  except ImportError as err :      msg = QtWidgets . QApplication . translate ( <str> , <str> ) print ( msg ) raise err  else :      mayor , minor , corr = map ( int , numpy . version . version . split ( <str> ) ) if mayor < 1 or minor < 8 :          msg = QtWidgets . QApplication . translate ( <str> , <str> ) raise ImportError ( msg )   try :      import matplotlib  except ImportError as err :      msg = QtWidgets . QApplication . translate ( <str> , <str> ) print ( msg ) raise err  else :      mayor , minor , corr = map ( int , matplotlib . __version__ . split ( <str> ) ) if mayor < 1 or ( mayor == 1 and minor < 4 ) :          msg = QtWidgets . QApplication . translate ( <str> , <str> ) raise ImportError ( msg )   try :      import iapws  except ImportError as err :      msg = QtWidgets . QApplication . translate ( <str> , <str> ) print ( msg ) raise err  else :      if iapws . __version__ != <str> :          msg = QtWidgets . QApplication . translate ( <str> , <str> ) raise ImportError ( msg )   from tools . dependences import optional_modules for module , use in optional_modules :      try :          __import__ ( module ) os . environ [ module ] = <str>  except ImportError :          print ( <str> % ( module , use ) ) os . environ [ module ] = <str>  else :          if module == <str> :              import CoolProp . CoolProp as CP version = CP . get_global_param_string ( <str> ) mayor , minor , rev = map ( int , version . split ( <str> ) ) if mayor < 6 :                  print ( <str> % version ) os . environ [ module ] = <str>     if args . debug :      loglevel = <str>  else :      loglevel = args . loglevel  loglevel = getattr ( logging , loglevel . upper ( ) ) if not os . path . isdir ( conf_dir ) :      os . mkdir ( conf_dir )  try :      open ( conf_dir + <str> , <str> )  except FileExistsError :      pass  fmt = <str> logging . basicConfig ( filename = conf_dir + <str> , filemode = <str> , level = loglevel , datefmt = <str> , format = fmt ) logging . info ( QtWidgets . QApplication . translate ( <str> , <str> ) ) class NumpyErrorLog ( object ) :      @ staticmethod def write ( msg ) :          logging . debug ( msg )   from numpy import seterr , seterrcall seterrcall ( NumpyErrorLog ) seterr ( all = <str> ) class SplashScreen ( QtWidgets . QSplashScreen ) :      def __init__ ( self ) :          QtWidgets . QSplashScreen . __init__ ( self , QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) QtWidgets . QApplication . flush ( )  def showMessage ( self , msg ) :          align = QtCore . Qt . Alignment ( QtCore . Qt . AlignBottom | QtCore . Qt . AlignRight | QtCore . Qt . AlignAbsolute ) color = QtGui . QColor ( QtCore . Qt . white ) QtWidgets . QSplashScreen . showMessage ( self , msg , align , color ) QtWidgets . QApplication . processEvents ( )  def clearMessage ( self ) :          QtWidgets . QSplashScreen . clearMessage ( self ) QtWidgets . QApplication . processEvents ( )   splash = SplashScreen ( ) if not args . nosplash :      splash . show ( )  from tools import firstrun splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) default_Preferences = firstrun . Preferences ( ) change = False if not os . path . isfile ( conf_dir + <str> ) :      default_Preferences . write ( open ( conf_dir + <str> , <str> ) ) Preferences = default_Preferences change = True  else :      Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) for section in default_Preferences . sections ( ) :          if not Preferences . has_section ( section ) :              Preferences . add_section ( section ) change = True  for option in default_Preferences . options ( section ) :              if not Preferences . has_option ( section , option ) :                  value = default_Preferences . get ( section , option ) Preferences . set ( section , option , value ) change = True logging . warning ( <str> + <str> % ( section , option ) + <str> )    if change :          Preferences . write ( open ( conf_dir + <str> , <str> ) )   if not os . path . isfile ( conf_dir + <str> ) :      Config = firstrun . config ( ) Config . write ( open ( conf_dir + <str> , <str> ) )  splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) if not os . path . isfile ( conf_dir + <str> ) :          orig = os . path . join ( os . environ [ <str> ] , <str> , <str> ) with open ( orig ) as cost_index :              lista = cost_index . readlines ( ) [ - 1 ] . split ( <str> ) with open ( conf_dir + <str> , <str> ) as archivo :                  for data in lista :                      archivo . write ( data . replace ( os . linesep , <str> ) + os . linesep )     splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) currency = False if not os . path . isfile ( conf_dir + <str> ) :      currency = True  else :      filename = conf_dir + <str> try :          archivo = open ( filename , <str> ) rates = json . load ( archivo )  except urllib . error . URLError :          currency = True  if not isinstance ( rates [ <str> ] , int ) :          currency = True   if currency :      try :          firstrun . getrates ( conf_dir + <str> )  except ( urllib . error . URLError , urllib . error . HTTPError ) as e :          origen = os . path . join ( os . environ [ <str> ] , <str> , <str> ) shutil . copy ( origen , conf_dir + <str> ) print ( QtWidgets . QApplication . translate ( <str> , <str> ) )   splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) if not os . path . isfile ( conf_dir + <str> ) :      firstrun . createDatabase ( conf_dir + <str> )  splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) from lib import * from UI import * from equipment import UI_equipments , equipments from tools import * from plots import * splash . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) from UI . mainWindow import UI_pychemqt pychemqt = UI_pychemqt ( ) msg = QtWidgets . QApplication . translate ( <str> , <str> ) splash . showMessage ( msg + <str> ) logging . info ( msg ) if change :      config . Preferences = Preferences  filename = [ ] if config . Preferences . getboolean ( <str> , <str> ) :      filename = pychemqt . lastFile if filename is None :          filename = [ ]   for file in args . projectFile :      filename . append ( file )  for fname in filename :      if fname and QtCore . QFile . exists ( fname ) :          msg = QtWidgets . QApplication . translate ( <str> , <str> ) splash . showMessage ( msg + <str> + fname ) logging . info ( msg + <str> + fname ) pychemqt . fileOpen ( fname )   def exceptfunction ( error , msg , traceback ) :      sys . __excepthook__ ( error , msg , traceback )  sys . excepthook = exceptfunction pychemqt . show ( ) splash . finish ( pychemqt ) sys . exit ( app . exec_ ( ) )  