from PyQt5 . QtWidgets import QApplication from iapws . _utils import getphase from lib import unidades class Thermo ( object ) :      _bool = False status = 0 msg = <str> kwargs = { } h = 0 s = 0 u = 0 a = 0 g = 0 def __init__ ( self , ** kwargs ) :          self . kwargs = self . __class__ . kwargs . copy ( ) self . __call__ ( ** kwargs )  def _new ( self , ** kw ) :          return self . __class__ ( ** kw )  def __call__ ( self , ** kwargs ) :          self . kwargs . update ( kwargs ) if self . calculable :              self . status = 1 self . calculo ( ) self . msg = <str>   def calculable ( self ) :          pass  def calculo ( self ) :          pass  def _cp0 ( self , cp0 ) :          <str> <str> self . v0 = unidades . SpecificVolume ( cp0 [ <str> ] ) self . rho0 = unidades . Density ( 1. / cp0 [ <str> ] ) self . h0 = unidades . Enthalpy ( cp0 [ <str> ] ) self . u0 = unidades . Enthalpy ( self . h0 - self . P * self . v0 ) self . s0 = unidades . SpecificHeat ( cp0 [ <str> ] ) self . a0 = unidades . Enthalpy ( self . u0 - self . T * self . s0 ) self . g0 = unidades . Enthalpy ( self . h0 - self . T * self . s0 ) self . cp0 = unidades . SpecificHeat ( cp0 [ <str> ] ) self . cv0 = unidades . SpecificHeat ( cp0 [ <str> ] ) self . cp0_cv = unidades . Dimensionless ( self . cp0 / self . cv0 ) self . w0 = unidades . Speed ( cp0 [ <str> ] ) self . gamma0 = self . cp0_cv self . rhoM0 = unidades . MolarDensity ( self . rho0 / self . M ) self . hM0 = unidades . MolarEnthalpy ( self . h0 * self . M ) self . uM0 = unidades . MolarEnthalpy ( self . u0 * self . M ) self . sM0 = unidades . MolarSpecificHeat ( self . s0 * self . M ) self . aM0 = unidades . MolarEnthalpy ( self . a0 * self . M ) self . gM0 = unidades . MolarEnthalpy ( self . g0 * self . M ) self . cpM0 = unidades . MolarSpecificHeat ( self . cp0 * self . M ) self . cvM0 = unidades . MolarSpecificHeat ( self . cv0 * self . M )  def derivative ( self , z , x , y , fase ) :          dT = { <str> : 0 , <str> : 1 , <str> : fase . v * fase . alfav , <str> : fase . cp - self . P * fase . v * fase . alfav , <str> : fase . cp , <str> : fase . cp / self . T , <str> : - fase . s , <str> : - self . P * fase . v * fase . alfav - fase . s } dP = { <str> : 1 , <str> : 0 , <str> : - fase . v * fase . kappa , <str> : fase . v * ( self . P * fase . kappa - self . T * fase . alfav ) , <str> : fase . v * ( 1 - self . T * fase . alfav ) , <str> : - fase . v * fase . alfav , <str> : fase . v , <str> : self . P * fase . v * fase . kappa } return ( dP [ z ] * dT [ y ] - dT [ z ] * dP [ y ] ) / ( dP [ x ] * dT [ y ] - dT [ x ] * dP [ y ] )  def getphase ( self , ** kwargs ) :          data = { <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) , <str> : QApplication . translate ( <str> , <str> ) } if <str> in kwargs :              phase = kwargs [ <str> ]  else :              phase = getphase ( ** kwargs )  return data [ phase ]  @ classmethod def properties ( cls ) :          l = [ ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Density ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarDensity ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarEnthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarSpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarEnthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarEnthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarEnthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarSpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . MolarSpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Speed ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . InvTemperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . InvPressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . InvPressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . InvTemperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Density ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . TemperaturePressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . EnthalpyPressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Viscosity ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . ThermalConductivity ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Diffusivity ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Diffusivity ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Tension ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Density ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) ] return l  @ classmethod def propertiesName ( cls ) :          return [ prop [ 0 ] for prop in cls . properties ( ) ]  @ classmethod def propertiesKey ( cls ) :          return [ prop [ 1 ] for prop in cls . properties ( ) ]  @ classmethod def propertiesUnit ( cls ) :          return [ prop [ 2 ] for prop in cls . properties ( ) ]  @ classmethod def _dictUnit ( cls ) :          d = { } for name , key , unit in cls . properties ( ) :              d [ key ] = unit  return d  @ classmethod def propertiesGlobal ( cls ) :          prop = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] return prop  @ classmethod def propertiesPhase ( cls ) :          single = cls . propertiesGlobal ( ) total = cls . propertiesKey ( ) prop = [ ] for p in total :              if p not in single :                  prop . append ( p )   return prop  def _fillCorriente ( self , corriente ) :          for prop in self . propertiesGlobal ( ) :              corriente . __setattr__ ( prop , self . __getattribute__ ( prop ) )   def _writeGlobalState ( self , corriente , state ) :          for prop in self . propertiesGlobal ( ) :              state [ prop ] = corriente . __getattribute__ ( prop )   def _readGlobalState ( self , corriente , state ) :          units = self . _dictUnit ( ) for prop in self . propertiesGlobal ( ) :              if prop in [ <str> , <str> , <str> , <str> , <str> ] :                  value = [ units [ prop ] ( p ) for p in state [ prop ] ]  else :                  value = units [ prop ] ( state [ prop ] )  corriente . __setattr__ ( prop , value )   def fillNone ( self , fase ) :          fase . _bool = False if self . x == 0 :              txt = QApplication . translate ( <str> , <str> )  elif self . Tr < 1 and self . Pr < 1 :              txt = QApplication . translate ( <str> , <str> )  elif self . Tr == 1 and self . Pr == 1 :              txt = QApplication . translate ( <str> , <str> )  else :              txt = QApplication . translate ( <str> , <str> )  for key in self . propertiesPhase ( ) :              fase . __setattr__ ( key , txt )   def writeStatetoJSON ( self , state , fase ) :          fluid = { } if self . _bool :              fluid [ <str> ] = self . M fluid [ <str> ] = self . v fluid [ <str> ] = self . h fluid [ <str> ] = self . s fluid [ <str> ] = self . u fluid [ <str> ] = self . a fluid [ <str> ] = self . g fluid [ <str> ] = self . cv fluid [ <str> ] = self . cp fluid [ <str> ] = self . cp_cv fluid [ <str> ] = self . w fluid [ <str> ] = self . Z fluid [ <str> ] = self . alfav fluid [ <str> ] = self . kappa fluid [ <str> ] = self . kappas fluid [ <str> ] = self . mu fluid [ <str> ] = self . k fluid [ <str> ] = self . nu fluid [ <str> ] = self . Prandt fluid [ <str> ] = self . alfa fluid [ <str> ] = self . joule fluid [ <str> ] = self . deltat fluid [ <str> ] = self . gamma fluid [ <str> ] = self . alfap fluid [ <str> ] = self . betap fluid [ <str> ] = self . fi fluid [ <str> ] = self . f fluid [ <str> ] = self . Q fluid [ <str> ] = self . caudalmasico fluid [ <str> ] = self . caudalmolar fluid [ <str> ] = self . fraccion fluid [ <str> ] = self . fraccion_masica fluid [ <str> ] = self . caudalunitariomasico fluid [ <str> ] = self . caudalunitariomolar  state [ fase ] = fluid  def readStatefromJSON ( self , fluid ) :          if fluid :              self . _bool = True self . M = unidades . Dimensionless ( fluid [ <str> ] ) self . v = unidades . SpecificVolume ( fluid [ <str> ] ) self . rho = unidades . Density ( 1 / self . v ) self . h = unidades . Enthalpy ( fluid [ <str> ] ) self . s = unidades . SpecificHeat ( fluid [ <str> ] ) self . u = unidades . Enthalpy ( fluid [ <str> ] ) self . a = unidades . Enthalpy ( fluid [ <str> ] ) self . g = unidades . Enthalpy ( fluid [ <str> ] ) self . cv = unidades . SpecificHeat ( fluid [ <str> ] ) self . cp = unidades . SpecificHeat ( fluid [ <str> ] ) self . cp_cv = unidades . Dimensionless ( fluid [ <str> ] ) self . w = unidades . Speed ( fluid [ <str> ] ) self . Z = unidades . Dimensionless ( fluid [ <str> ] ) self . alfav = unidades . InvTemperature ( fluid [ <str> ] ) self . kappa = unidades . InvPressure ( fluid [ <str> ] ) self . kappas = unidades . InvPressure ( fluid [ <str> ] ) self . mu = unidades . Viscosity ( fluid [ <str> ] ) self . k = unidades . ThermalConductivity ( fluid [ <str> ] ) self . nu = unidades . Diffusivity ( fluid [ <str> ] ) self . Prandt = unidades . Dimensionless ( fluid [ <str> ] ) self . alfa = unidades . Diffusivity ( fluid [ <str> ] ) self . joule = unidades . TemperaturePressure ( fluid [ <str> ] ) self . deltat = unidades . EnthalpyPressure ( fluid [ <str> ] ) self . gamma = unidades . Dimensionless ( fluid [ <str> ] ) self . alfap = unidades . Dimensionless ( fluid [ <str> ] ) self . betap = unidades . Dimensionless ( fluid [ <str> ] ) self . fi = [ unidades . Dimensionless ( f ) for f in fluid [ <str> ] ] self . f = [ unidades . Pressure ( f ) for f in fluid [ <str> ] ] self . Q = unidades . VolFlow ( fluid [ <str> ] ) self . caudalmasico = unidades . MassFlow ( fluid [ <str> ] ) self . caudalmolar = unidades . MolarFlow ( fluid [ <str> ] ) self . fraccion = [ unidades . Dimensionless ( x ) for x in fluid [ <str> ] ] self . fraccion_masica = [ unidades . Dimensionless ( x ) for x in fluid [ <str> ] ] self . caudalunitariomasico = [ unidades . MassFlow ( x ) for x in fluid [ <str> ] ] self . caudalunitariomolar = [ unidades . MolarFlow ( x ) for x in fluid [ <str> ] ] self . rhoM = unidades . MolarDensity ( self . rho / self . M ) self . hM = unidades . MolarEnthalpy ( self . h / self . M ) self . sM = unidades . MolarSpecificHeat ( self . s / self . M ) self . uM = unidades . MolarEnthalpy ( self . u / self . M ) self . aM = unidades . MolarEnthalpy ( self . a / self . M ) self . gM = unidades . MolarEnthalpy ( self . g / self . M ) self . cvM = unidades . MolarSpecificHeat ( self . cv / self . M ) self . cpM = unidades . MolarSpecificHeat ( self . cp / self . M )    class ThermoWater ( Thermo ) :      @ classmethod def properties ( cls ) :          prop = Thermo . properties ( ) [ : ] l = [ ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) ] for p in l :              prop . insert ( - 11 , p )  return prop  def writeStatetoJSON ( self , state , fase ) :          Thermo . writeStatetoJSON ( self , state , fase ) if self . _bool :              state [ fase ] [ <str> ] = self . n state [ fase ] [ <str> ] = self . epsilon   def readStatefromJSON ( self , fluid ) :          Thermo . readStatefromJSON ( self , fluid ) if fluid :              self . epsilon = unidades . Dimensionless ( fluid [ <str> ] ) self . n = unidades . Dimensionless ( fluid [ <str> ] )    class ThermoAdvanced ( Thermo ) :      @ classmethod def properties ( cls ) :          prop = Thermo . properties ( ) [ : ] l = [ ( QApplication . translate ( <str> , <str> ) , <str> , unidades . TemperaturePressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume_square ) , ( <str> , <str> , unidades . PressureTemperature ) , ( <str> , <str> , unidades . PressureDensity ) , ( <str> , <str> , unidades . DensityTemperature ) , ( <str> , <str> , unidades . DensityPressure ) , ( <str> , <str> , unidades . SpecificHeat ) , ( <str> , <str> , unidades . EnthalpyPressure ) , ( <str> , <str> , unidades . SpecificHeat ) , ( <str> , <str> , unidades . EnthalpyDensity ) , ( <str> , <str> , unidades . EnthalpyPressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . InvTemperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) ] for p in l :              prop . insert ( 34 , p )  return prop  @ classmethod def propertiesGlobal ( cls ) :          prop = Thermo . propertiesGlobal ( ) prop . append ( <str> ) return prop  def writeStatetoJSON ( self , state , fase ) :          Thermo . writeStatetoJSON ( self , state , fase ) if self . _bool :              state [ fase ] [ <str> ] = self . betas state [ fase ] [ <str> ] = self . Gruneisen state [ fase ] [ <str> ] = self . virialB state [ fase ] [ <str> ] = self . virialC state [ fase ] [ <str> ] = self . dpdT_rho state [ fase ] [ <str> ] = self . dpdrho_T state [ fase ] [ <str> ] = self . drhodT_P state [ fase ] [ <str> ] = self . drhodP_T state [ fase ] [ <str> ] = self . dhdT_rho state [ fase ] [ <str> ] = self . dhdP_T state [ fase ] [ <str> ] = self . dhdT_P state [ fase ] [ <str> ] = self . dhdrho_T state [ fase ] [ <str> ] = self . dhdP_rho state [ fase ] [ <str> ] = self . kt state [ fase ] [ <str> ] = self . ks state [ fase ] [ <str> ] = self . Ks state [ fase ] [ <str> ] = self . Kt state [ fase ] [ <str> ] = self . IntP state [ fase ] [ <str> ] = self . invT state [ fase ] [ <str> ] = self . hInput state [ fase ] [ <str> ] = self . epsilon   def readStatefromJSON ( self , fluid ) :          Thermo . readStatefromJSON ( self , fluid ) if fluid :              self . betas = unidades . TemperaturePressure ( fluid [ <str> ] ) self . Gruneisen = unidades . Dimensionless ( fluid [ <str> ] ) self . virialB = unidades . SpecificVolume ( fluid [ <str> ] ) self . virialC = unidades . SpecificVolume_square ( fluid [ <str> ] ) self . dpdT_rho = unidades . PressureTemperature ( fluid [ <str> ] ) self . dpdrho_T = unidades . PressureDensity ( fluid [ <str> ] ) self . drhodT_P = unidades . DensityTemperature ( fluid [ <str> ] ) self . drhodP_T = unidades . DensityPressure ( fluid [ <str> ] ) self . dhdT_rho = unidades . SpecificHeat ( fluid [ <str> ] ) self . dhdP_T = unidades . EnthalpyPressure ( fluid [ <str> ] ) self . dhdT_P = unidades . SpecificHeat ( fluid [ <str> ] ) self . dhdrho_T = unidades . EnthalpyDensity ( fluid [ <str> ] ) self . dhdP_rho = unidades . EnthalpyPressure ( fluid [ <str> ] ) self . kt = unidades . Dimensionless ( fluid [ <str> ] ) self . ks = unidades . InvPressure ( fluid [ <str> ] ) self . Ks = unidades . Pressure ( fluid [ <str> ] ) self . Kt = unidades . Pressure ( fluid [ <str> ] ) self . IntP = unidades . Pressure ( fluid [ <str> ] ) self . invT = unidades . InvTemperature ( fluid [ <str> ] ) self . hInput = unidades . Enthalpy ( fluid [ <str> ] ) self . epsilon = unidades . Dimensionless ( fluid [ <str> ] )    class ThermoRefProp ( ThermoAdvanced ) :      @ classmethod def properties ( cls ) :          prop = ThermoAdvanced . properties ( ) [ : ] l = [ ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( <str> , <str> , unidades . PressureTemperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificHeat ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Enthalpy ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . SpecificVolume_square ) , ( <str> , <str> , unidades . Dimensionless ) , ( <str> , <str> , unidades . Dimensionless ) , ( <str> , <str> , unidades . Dimensionless ) , ( <str> , <str> , unidades . SpecificVolume ) , ( QApplication . translate ( <str> , <str> ) , <str> , unidades . Dimensionless ) ] for p in l :              prop . append ( p )  return prop  @ classmethod def propertiesGlobal ( cls ) :          prop = ThermoAdvanced . propertiesGlobal ( ) new = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for p in new :              prop . append ( p )  return prop  def writeStatetoJSON ( self , state , fase ) :          ThermoAdvanced . writeStatetoJSON ( self , state , fase ) if self . _bool :              state [ fase ] [ <str> ] = self . virialD state [ fase ] [ <str> ] = self . virialBa state [ fase ] [ <str> ] = self . virialCa state [ fase ] [ <str> ] = self . dCdt state [ fase ] [ <str> ] = self . dCdt2 state [ fase ] [ <str> ] = self . dBdt   def readStatefromJSON ( self , fluid ) :          ThermoAdvanced . readStatefromJSON ( self , fluid ) if fluid :              self . virialD = unidades . Dimensionless ( fluid [ <str> ] ) self . virialBa = unidades . SpecificVolume ( fluid [ <str> ] ) self . virialCa = unidades . SpecificVolume_square ( fluid [ <str> ] ) self . dCdt = unidades . Dimensionless ( fluid [ <str> ] ) self . dCdt2 = unidades . Dimensionless ( fluid [ <str> ] ) self . dBdt = unidades . Dimensionless ( fluid [ <str> ] )     