from time import sleep from PyQt5 . QtCore import QThread , QMutex class WaitforClick ( QThread ) :      def __init__ ( self , num , parent = None ) :          super ( WaitforClick , self ) . __init__ ( parent ) self . setTerminationEnabled ( True ) self . num = num  def run ( self ) :          while True :              sleep ( 0.1 ) if len ( self . parent ( ) . Pos ) >= self . num :                  break     class Evaluate ( QThread ) :      def __init__ ( self , parent = None ) :          super ( Evaluate , self ) . __init__ ( parent ) self . mutex = QMutex ( )  def start ( self , entity , kwargs ) :          self . entity = entity self . kwargs = kwargs QThread . start ( self )  def run ( self ) :          self . mutex . lock ( ) self . entity ( ** self . kwargs ) self . mutex . unlock ( )    