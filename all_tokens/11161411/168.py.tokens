from unittest import TestCase from lib import unidades from lib . meos import MEoS class DEE ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 264 ) Tc = unidades . Temperature ( 466.7 ) Pc = unidades . Pressure ( 3720.238 , <str> ) M = 74.1216 Tt = unidades . Temperature ( 156.92 ) Tb = unidades . Temperature ( 307.604 ) f_acent = 0.282 momentoDipolar = unidades . DipoleMoment ( 1.151 , <str> ) id = 162 Fi1 = { <str> : [ 1 , 3.36281 ] , <str> : [ 0 , 1 , - 1 , - 2 , - 3 ] , <str> : [ 17.099494 , - 6.160844 , - 8.943822 , 0.54621 , - 0.016604 ] , <str> : [ ] , <str> : [ ] } thol = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : 270.0 , <str> : 500.0 , <str> : 40000.0 , <str> : 10.6851 , <str> : [ 0.376700499 , - 0.116630334 , - 0.73801498 , - 0.2725701 , - 0.04979231 , 0.172267029 , 0.0044161891 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 3 , 5 ] , <str> : [ - 0.75 , - 0.25 , 1.25 , 0.75 , - 1.0 , - 0.375 , 1.25 ] , <str> : [ - 1.53951612 , 1.15606052 , - 0.0184504019 , - 0.101800599 , - 0.403598704 , 0.00213055571 , - 0.154741976 , 0.0120950552 , - 0.0143106371 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 3 , 4 , 5 , 2 ] , <str> : [ 2.375 , 3.0 , 2.625 , 1.875 , 4.5 , 5.75 , 5.375 , 2.75 , 14.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 9 } eq = thol , _vapor_Pressure = { <str> : 3 , <str> : [ - 7.3059 , 1.1734 , 0.7142 , - 4.3219 ] , <str> : [ 1.0 , 1.5 , 2.2 , 3.0 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.3275 , 3.1842 , - 2.1407 , 1.4376 ] , <str> : [ 0.12 , 0.55 , 1.0 , 1.4 ] } _vapor_Density = { <str> : 2 , <str> : [ - 0.35858 , - 16.843 , 32.476 , - 33.444 , - 48.036 ] , <str> : [ 0.06 , 0.87 , 1.3 , 1.7 , 5.3 ] }  class Test ( TestCase ) :      def test_thol ( self ) :          st = DEE ( T = 280 , rho = 0.1 ) self . assertEqual ( round ( st . P . MPa , 9 ) , 0.003134775 ) self . assertEqual ( round ( st . h . kJkg , 5 ) , - 29.23155 ) self . assertEqual ( round ( st . s . kJkgK , 7 ) , 0.2889437 ) self . assertEqual ( round ( st . cv . kJkgK , 7 ) , 1.4556700 ) self . assertEqual ( round ( st . cp . kJkgK , 7 ) , 1.5692554 ) self . assertEqual ( round ( st . w , 5 ) , 183.65191 ) st = DEE ( T = 280 , rho = 750 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 20.77428 ) self . assertEqual ( round ( st . h . kJkg , 4 ) , - 396.0712 ) self . assertEqual ( round ( st . s . kJkgK , 6 ) , - 1.386035 ) self . assertEqual ( round ( st . cv . kJkgK , 7 ) , 1.7323676 ) self . assertEqual ( round ( st . cp . kJkgK , 7 ) , 2.2263812 ) self . assertEqual ( round ( st . w , 5 ) , 1190.89218 ) st = DEE ( T = 400 , rho = 0.1 ) self . assertEqual ( round ( st . P . MPa , 9 ) , 0.004483768 ) self . assertEqual ( round ( st . h . kJkg , 4 ) , 182.4662 ) self . assertEqual ( round ( st . s . kJkgK , 6 ) , 0.873989 ) self . assertEqual ( round ( st . cv . kJkgK , 6 ) , 1.841364 ) self . assertEqual ( round ( st . cp . kJkgK , 6 ) , 1.953942 ) self . assertEqual ( round ( st . w , 4 ) , 218.0490 ) st = DEE ( T = 400 , rho = 650 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 33.84722 ) self . assertEqual ( round ( st . h . kJkg , 4 ) , - 101.4186 ) self . assertEqual ( round ( st . s . kJkgK , 6 ) , - 0.568534 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 1.94956 ) self . assertEqual ( round ( st . cp . kJkgK , 6 ) , 2.520106 ) self . assertEqual ( round ( st . w , 4 ) , 919.5757 )    