from configparser import ConfigParser from functools import partial from math import pi import os import sys from PyQt5 import QtCore , QtGui , QtWidgets from lib import unidades , corriente from lib . utilities import representacion from equipment import equipments from tools . firstrun import which from UI import prefElemental , prefMEOS , prefPFD , prefPsychrometric , prefPetro from UI import prefMoody , prefStandingKatz from UI . delegate import CheckEditor from UI . widgets import ColorSelector , NumericFactor , PathConfig class ConfGeneral ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( ConfGeneral , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . ColorButtonResaltado = ColorSelector ( ) layout . addWidget ( self . ColorButtonResaltado , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . ColorButtonReadOnly = ColorSelector ( ) layout . addWidget ( self . ColorButtonReadOnly , 2 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 3 , 1 ) group = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group , 4 , 1 , 1 , 4 ) lyt = QtWidgets . QHBoxLayout ( group ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . recentFiles = QtWidgets . QSpinBox ( ) self . recentFiles . setRange ( 1 , 20 ) lyt . addWidget ( self . recentFiles ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) ) self . loadLastProject = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . loadLastProject , 5 , 1 ) self . showTrayIcon = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . showTrayIcon , 6 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 14 , 1 , 1 , 4 ) if config and config . has_section ( <str> ) :              self . ColorButtonResaltado . setColor ( config . get ( <str> , <str> ) ) self . ColorButtonReadOnly . setColor ( config . get ( <str> , <str> ) ) self . recentFiles . setValue ( config . getint ( <str> , <str> ) ) self . loadLastProject . setChecked ( config . getboolean ( <str> , <str> ) ) self . showTrayIcon . setChecked ( config . getboolean ( <str> , <str> ) )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , self . ColorButtonResaltado . color . name ( ) ) config . set ( <str> , <str> , self . ColorButtonReadOnly . color . name ( ) ) config . set ( <str> , <str> , str ( self . recentFiles . value ( ) ) ) config . set ( <str> , <str> , str ( self . loadLastProject . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . showTrayIcon . isChecked ( ) ) ) return config   class ConfTooltipUnit ( QtWidgets . QDialog ) :      def __init__ ( self , config , parent = None ) :          super ( ConfTooltipUnit , self ) . __init__ ( parent ) layout = QtWidgets . QVBoxLayout ( self ) self . checkShow = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkShow . toggled . connect ( self . checkShow_Toggled ) layout . addWidget ( self . checkShow ) self . groupsystems = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . groupsystems ) lytSystems = QtWidgets . QHBoxLayout ( self . groupsystems ) self . SI = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . SI . toggled . connect ( partial ( self . systems , <str> ) ) lytSystems . addWidget ( self . SI ) self . AltSI = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . AltSI . toggled . connect ( partial ( self . systems , <str> ) ) lytSystems . addWidget ( self . AltSI ) self . English = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . English . toggled . connect ( partial ( self . systems , <str> ) ) lytSystems . addWidget ( self . English ) self . Metric = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Metric . toggled . connect ( partial ( self . systems , <str> ) ) lytSystems . addWidget ( self . Metric ) self . CGS = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . CGS . toggled . connect ( partial ( self . systems , <str> ) ) lytSystems . addWidget ( self . CGS ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) ) self . eleccion = QtWidgets . QComboBox ( ) layout . addWidget ( self . eleccion ) self . stacked = QtWidgets . QStackedWidget ( ) self . eleccion . currentIndexChanged . connect ( self . stacked . setCurrentIndex ) layout . addWidget ( self . stacked ) self . tabla = [ ] for i , magnitud in enumerate ( unidades . _magnitudes [ : - 1 ] ) :              textos = magnitud [ 2 ] . __text__ self . tabla . append ( QtWidgets . QTableWidget ( ) ) self . stacked . addWidget ( self . tabla [ i ] ) self . tabla [ i ] . setRowCount ( len ( textos ) ) self . tabla [ i ] . setColumnCount ( 1 ) self . tabla [ i ] . setColumnWidth ( 0 , 16 ) self . tabla [ i ] . setItemDelegateForColumn ( 0 , CheckEditor ( self ) ) self . tabla [ i ] . horizontalHeader ( ) . setVisible ( False ) for j in range ( len ( textos ) ) :                  item = QtWidgets . QTableWidgetItem ( textos [ j ] ) self . tabla [ i ] . setVerticalHeaderItem ( j , item ) self . tabla [ i ] . setRowHeight ( j , 24 ) self . tabla [ i ] . setItem ( j , 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . tabla [ i ] . item ( j , 0 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) self . tabla [ i ] . openPersistentEditor ( self . tabla [ i ] . item ( j , 0 ) )  self . rellenar ( magnitud [ 0 ] , i , config ) self . eleccion . addItem ( magnitud [ 1 ] )  if config . has_section ( <str> ) :              self . checkShow . setChecked ( config . getboolean ( <str> , <str> ) ) self . SI . setChecked ( config . getboolean ( <str> , <str> ) ) self . AltSI . setChecked ( config . getboolean ( <str> , <str> ) ) self . English . setChecked ( config . getboolean ( <str> , <str> ) ) self . Metric . setChecked ( config . getboolean ( <str> , <str> ) ) self . CGS . setChecked ( config . getboolean ( <str> , <str> ) )   def rellenar ( self , magnitud , tabla , config ) :          if config . has_section ( <str> ) :              lista = eval ( config . get ( <str> , magnitud ) ) for i in lista :                  self . tabla [ tabla ] . item ( i , 0 ) . setText ( <str> )    def checkShow_Toggled ( self , bool ) :          self . eleccion . setEnabled ( bool ) self . groupsystems . setEnabled ( bool ) for tabla in self . tabla :              tabla . setEnabled ( bool )   def systems ( self , set , bool ) :          if bool :              txt = <str>  else :              txt = <str>  for tabla , value in enumerate ( unidades . units_set [ set ] [ : - 1 ] ) :              self . tabla [ tabla ] . item ( value , 0 ) . setText ( txt )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , str ( self . checkShow . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . SI . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . CGS . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . AltSI . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . English . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . Metric . isChecked ( ) ) ) for i , tabla in enumerate ( self . tabla ) :              lista = [ ] for j in range ( tabla . rowCount ( ) ) :                  if tabla . item ( j , 0 ) . text ( ) == <str> :                      lista . append ( j )   config . set ( <str> , unidades . _magnitudes [ i ] [ 0 ] , str ( lista ) )  return config   class ConfTooltipEntity ( QtWidgets . QDialog ) :      def __init__ ( self , config , parent = None ) :          super ( ConfTooltipEntity , self ) . __init__ ( parent ) layout = QtWidgets . QVBoxLayout ( self ) self . eleccion = QtWidgets . QComboBox ( ) layout . addWidget ( self . eleccion ) self . stacked = QtWidgets . QStackedWidget ( ) self . eleccion . currentIndexChanged . connect ( self . stacked . setCurrentIndex ) layout . addWidget ( self . stacked ) self . tabla = [ QtWidgets . QTableWidget ( ) ] self . tabla [ 0 ] . setRowCount ( len ( corriente . Corriente . propertiesNames ( ) ) ) self . tabla [ 0 ] . setColumnCount ( 1 ) self . tabla [ 0 ] . setColumnWidth ( 0 , 16 ) self . tabla [ 0 ] . setItemDelegateForColumn ( 0 , CheckEditor ( self ) ) self . tabla [ 0 ] . horizontalHeader ( ) . setVisible ( False ) self . stacked . addWidget ( self . tabla [ 0 ] ) self . eleccion . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) for i , propiedad in enumerate ( corriente . Corriente . propertiesNames ( ) ) :              item = QtWidgets . QTableWidgetItem ( propiedad [ 0 ] ) self . tabla [ 0 ] . setVerticalHeaderItem ( i , item ) self . tabla [ 0 ] . setRowHeight ( i , 24 ) self . tabla [ 0 ] . setItem ( i , 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . tabla [ 0 ] . item ( i , 0 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) self . tabla [ 0 ] . openPersistentEditor ( self . tabla [ 0 ] . item ( i , 0 ) )  if config . has_option ( <str> , <str> ) :              lista = eval ( config . get ( <str> , <str> ) ) for i in lista :                  self . tabla [ 0 ] . item ( i , 0 ) . setText ( <str> )   for i , equipo in enumerate ( equipments ) :              propiedades = [ prop [ 0 ] for prop in equipo . propertiesNames ( ) ] self . tabla . append ( QtWidgets . QTableWidget ( ) ) self . stacked . addWidget ( self . tabla [ - 1 ] ) self . tabla [ - 1 ] . setRowCount ( len ( propiedades ) ) self . tabla [ - 1 ] . setColumnCount ( 1 ) self . tabla [ - 1 ] . setColumnWidth ( 0 , 16 ) self . tabla [ - 1 ] . setItemDelegateForColumn ( 0 , CheckEditor ( self ) ) self . tabla [ - 1 ] . horizontalHeader ( ) . setVisible ( False ) for j , propiedad in enumerate ( propiedades ) :                  item = QtWidgets . QTableWidgetItem ( propiedad ) self . tabla [ - 1 ] . setVerticalHeaderItem ( j , item ) self . tabla [ - 1 ] . setRowHeight ( j , 24 ) self . tabla [ - 1 ] . setItem ( j , 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . tabla [ - 1 ] . item ( j , 0 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) self . tabla [ - 1 ] . openPersistentEditor ( self . tabla [ - 1 ] . item ( j , 0 ) )  self . rellenar ( equipo . __name__ , i + 1 , config ) self . eleccion . addItem ( equipo . title )   def rellenar ( self , equipo , tabla , config ) :          if config . has_section ( <str> ) :              lista = eval ( config . get ( <str> , equipo ) ) for i in lista :                  self . tabla [ tabla ] . item ( i , 0 ) . setText ( <str> )    def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  lista = [ ] for j in range ( self . tabla [ 0 ] . rowCount ( ) ) :              if self . tabla [ 0 ] . item ( j , 0 ) . text ( ) == <str> :                  lista . append ( j )   config . set ( <str> , <str> , str ( lista ) ) for i , tabla in enumerate ( self . tabla [ 1 : ] ) :              lista = [ ] for j in range ( tabla . rowCount ( ) ) :                  if tabla . item ( j , 0 ) . text ( ) == <str> :                      lista . append ( j )   config . set ( <str> , equipments [ i ] . __name__ , str ( lista ) )  return config   class ConfFormat ( QtWidgets . QTableWidget ) :      def __init__ ( self , config = None , parent = None ) :          super ( ConfFormat , self ) . __init__ ( parent ) self . setColumnCount ( 2 ) self . setRowCount ( len ( unidades . _magnitudes ) ) labels = [ QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] self . setHorizontalHeaderLabels ( labels ) self . config = [ ] for i in range ( self . rowCount ( ) ) :              item = QtWidgets . QTableWidgetItem ( unidades . _magnitudes [ i ] [ 1 ] ) self . setVerticalHeaderItem ( i , item ) self . setRowHeight ( i , 22 ) self . setItem ( i , 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . item ( i , 0 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) self . setItem ( i , 1 , QtWidgets . QTableWidgetItem ( <str> ) ) self . item ( i , 1 ) . setTextAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter )  if config . has_section ( <str> ) :              for i , magnitud in enumerate ( unidades . _magnitudes ) :                  formato = eval ( config . get ( <str> , magnitud [ 0 ] ) ) self . config . append ( formato ) self . item ( i , 0 ) . setText ( self . txt ( formato ) ) self . item ( i , 1 ) . setText ( representacion ( pi , ** formato ) )   self . setEditTriggers ( QtWidgets . QAbstractItemView . NoEditTriggers ) self . cellDoubleClicked . connect ( self . showConfDialog )  def showConfDialog ( self , fila , columna ) :          dialog = NumericFactor ( self . config [ fila ] , parent = self ) if dialog . exec_ ( ) :              config = dialog . args ( ) self . config [ fila ] = config self . item ( fila , 0 ) . setText ( self . txt ( config ) ) self . item ( fila , 1 ) . setText ( representacion ( pi , ** config ) )   def txt ( self , formato ) :          if formato [ <str> ] :              txt = <str>  else :              txt = <str>  if formato [ <str> ] == 0 :              txt += <str> . format ( ** formato )  elif formato [ <str> ] == 1 :              txt += <str> . format ( ** formato )  elif formato [ <str> ] == 2 :              txt += <str> . format ( ** formato )  if formato . get ( <str> , False ) :              txt += <str> . format ( ** formato )  return txt  def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  for i , magnitud in enumerate ( unidades . _magnitudes ) :              config . set ( <str> , magnitud [ 0 ] , str ( self . config [ i ] ) )  return config   class ConfApplications ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( ConfApplications , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) l = QtWidgets . QApplication . translate ( <str> , <str> ) msg = QtWidgets . QApplication . translate ( <str> , <str> ) self . calculadora = PathConfig ( l + <str> , msg = msg , patron = <str> ) layout . addWidget ( self . calculadora , 1 , 1 ) l = QtWidgets . QApplication . translate ( <str> , <str> ) msg = QtWidgets . QApplication . translate ( <str> , <str> ) self . textViewer = PathConfig ( l + <str> , msg = msg , patron = <str> ) layout . addWidget ( self . textViewer , 2 , 1 ) terminal = QtWidgets . QGroupBox ( ) layout . addWidget ( terminal , 3 , 1 ) layoutTerminal = QtWidgets . QGridLayout ( terminal ) msg = QtWidgets . QApplication . translate ( <str> , <str> ) self . terminal = PathConfig ( <str> , msg = msg , patron = <str> ) layoutTerminal . addWidget ( self . terminal , 1 , 1 , 1 , 3 ) layoutTerminal . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . ForegroundColor = ColorSelector ( ) layoutTerminal . addWidget ( self . ForegroundColor , 2 , 2 , 1 , 2 ) layoutTerminal . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . BackgroundColor = ColorSelector ( ) layoutTerminal . addWidget ( self . BackgroundColor , 3 , 2 , 1 , 2 ) self . ipython = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layoutTerminal . addWidget ( self . ipython , 4 , 1 , 1 , 3 ) self . maximized = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layoutTerminal . addWidget ( self . maximized , 5 , 1 , 1 , 3 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 1 ) terminalTitle = QtWidgets . QApplication . translate ( <str> , <str> ) if sys . platform == <str> :              terminal . setEnabled ( False ) terminalTitle += <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str>  terminal . setTitle ( terminalTitle ) if config . has_section ( <str> ) :              self . calculadora . setText ( config . get ( <str> , <str> ) ) self . textViewer . setText ( config . get ( <str> , <str> ) ) self . terminal . setText ( config . get ( <str> , <str> ) ) self . ipython . setChecked ( config . getboolean ( <str> , <str> ) ) self . maximized . setChecked ( config . getboolean ( <str> , <str> ) ) self . ForegroundColor . setColor ( config . get ( <str> , <str> ) ) self . BackgroundColor . setColor ( config . get ( <str> , <str> ) )  self . ipython . setEnabled ( bool ( which ( <str> ) ) ) self . terminal . setEnabled ( False )  def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , self . calculadora . text ( ) ) config . set ( <str> , <str> , self . textViewer . text ( ) ) config . set ( <str> , <str> , self . terminal . text ( ) ) config . set ( <str> , <str> , str ( self . ipython . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . maximized . isChecked ( ) ) ) config . set ( <str> , <str> , self . ForegroundColor . color . name ( ) ) config . set ( <str> , <str> , self . BackgroundColor . color . name ( ) ) return config   class ConfBabel ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( ConfBabel , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . BondColor = ColorSelector ( ) layout . addWidget ( self . BondColor , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . BackgroundColor = ColorSelector ( isAlpha = True ) layout . addWidget ( self . BackgroundColor , 2 , 2 ) self . checkColor = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkColor , 3 , 1 , 1 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 4 , 1 , 1 , 2 ) group = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group , 5 , 1 , 1 , 2 ) lyt = QtWidgets . QVBoxLayout ( group ) self . radioAll = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt . addWidget ( self . radioAll ) self . radioEnd = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt . addWidget ( self . radioEnd ) self . radioNone = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt . addWidget ( self . radioNone ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 6 , 1 , 1 , 2 ) self . checkTighBond = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkTighBond , 7 , 1 , 1 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 14 , 1 , 1 , 4 ) if config and config . has_section ( <str> ) :              self . BondColor . setColor ( config . get ( <str> , <str> ) ) alpha = config . getfloat ( <str> , <str> ) self . BackgroundColor . setColor ( config . get ( <str> , <str> ) , alpha ) self . checkColor . setChecked ( config . getboolean ( <str> , <str> ) ) self . radioAll . setChecked ( config . getboolean ( <str> , <str> ) ) self . radioEnd . setChecked ( config . getboolean ( <str> , <str> ) ) self . radioNone . setChecked ( config . getboolean ( <str> , <str> ) ) self . checkTighBond . setChecked ( config . getboolean ( <str> , <str> ) )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  config . set ( <str> , <str> , self . BondColor . color . name ( ) ) config . set ( <str> , <str> , str ( self . BackgroundColor . color . name ( ) ) ) config . set ( <str> , <str> , str ( self . BackgroundColor . color . alpha ( ) ) ) config . set ( <str> , <str> , str ( self . checkColor . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . radioAll . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . radioEnd . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . radioNone . isChecked ( ) ) ) config . set ( <str> , <str> , str ( self . checkTighBond . isChecked ( ) ) ) return config   class Preferences ( QtWidgets . QDialog ) :      classes = [ ( <str> , ConfGeneral , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefPFD . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , ConfTooltipEntity , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , ConfTooltipUnit , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , ConfFormat , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefPetro . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , ConfApplications , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefElemental . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefMEOS . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefPsychrometric . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefMoody . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , prefStandingKatz . Widget , QtWidgets . QApplication . translate ( <str> , <str> ) ) , ( <str> , ConfBabel , QtWidgets . QApplication . translate ( <str> , <str> ) ) ] def __init__ ( self , config , parent = None ) :          super ( Preferences , self ) . __init__ ( parent ) self . config = config self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . lista = QtWidgets . QListWidget ( ) self . lista . setIconSize ( QtCore . QSize ( 20 , 20 ) ) self . lista . setSizePolicy ( QtWidgets . QSizePolicy . Maximum , QtWidgets . QSizePolicy . Preferred ) layout . addWidget ( self . lista , 1 , 1 ) self . stacked = QtWidgets . QStackedWidget ( ) layout . addWidget ( self . stacked , 1 , 2 ) for icon , dialog , title in self . classes :              self . stacked . addWidget ( dialog ( config ) ) icon = QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> % icon ) ) self . lista . addItem ( QtWidgets . QListWidgetItem ( icon , title ) )  self . lista . currentRowChanged . connect ( self . stacked . setCurrentIndex ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 2 , 2 )  def value ( self ) :          config = self . config for indice in range ( self . stacked . count ( ) ) :              config = self . stacked . widget ( indice ) . value ( config )  return config   if __name__ == <str> :      conf_dir = os . path . expanduser ( <str> ) + <str> pychemqt_dir = os . environ [ <str> ] + <str> app = QtWidgets . QApplication ( sys . argv ) config = ConfigParser ( ) config . read ( conf_dir + <str> ) dialogo = Preferences ( config ) dialogo . show ( ) sys . exit ( app . exec_ ( ) )   