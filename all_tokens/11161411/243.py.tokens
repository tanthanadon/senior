from unittest import TestCase from scipy import exp , arccosh from lib import unidades from lib . meos import MEoS class CO2 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 467.6 ) Tc = unidades . Temperature ( 304.1282 ) Pc = unidades . Pressure ( 7.3773 , <str> ) M = 44.0098 Tt = unidades . Temperature ( 216.592 ) Tb = unidades . Temperature ( 194.686 ) f_acent = 0.22394 momentoDipolar = unidades . DipoleMoment ( 0.0 , <str> ) id = 49 Fi1 = { <str> : [ 1 , 2.5 ] , <str> : [ 0 , 1 ] , <str> : [ 8.37304456 , - 3.70454304 ] , <str> : [ 1.99427042 , .62105248 , .41195293 , 1.04028922 , .08327678 ] , <str> : [ 3.15163 , 6.11190 , 6.77708 , 11.32384 , 27.08792 ] } Fi2 = { <str> : [ 1 , 2.50002 ] , <str> : [ 0 , 1 ] , <str> : [ 11.925152758 , - 16.118762264 ] , <str> : [ ] , <str> : [ ] , <str> : [ 2.04452 , 2.03366 ] , <str> : [ 3.022758166 , 1.589964364 ] , <str> : [ - 1.06044 , 0.01393 ] , <str> : [ - 2.844425476 , 1.12159609 ] } CP3 = { <str> : 3.5 , <str> : [ ] , <str> : [ ] , <str> : [ 2 , 1 , 1 ] , <str> : [ 960.11 , 1932 , 3380.2 ] } span = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 2000. , <str> : 800000.0 , <str> : 37.24 , <str> : [ 0.38856823203161 , 0.29385475942740e1 , - 0.55867188534934e1 , - 0.76753199592477 , 0.31729005580416 , 0.54803315897767 , 0.12279411220335 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 3 ] , <str> : [ 0.0 , 0.75 , 1.0 , 2.0 , 0.75 , 2.0 , 0.75 ] , <str> : [ 0.21658961543220e1 , 0.15841735109724e1 , - 0.23132705405503 , 0.58116916431436e-1 , - 0.55369137205382 , 0.48946615909422 , - 0.24275739843501e-1 , 0.62494790501678e-1 , - 0.12175860225246 , - 0.37055685270086 , - 0.16775879700426e-1 , - 0.11960736637987 , - 0.045619362508778 , 0.35612789270346e-1 , - 0.74427727132052e-2 , - 0.17395704902432e-2 , - 0.021810121289527 , 0.24332166559236e-1 , - 0.37440133423463e-1 , 0.14338715756878 , - 0.13491969083286 , - 0.23151225053480e-1 , 0.12363125492901e-1 , 0.21058321972940e-2 , - 0.33958519026368e-3 , 0.0055993651771592 , - .30335118055646e-3 ] , <str> : [ 1 , 2 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 1 , 1 , 4 , 4 , 4 , 7 , 8 , 2 , 3 , 3 , 5 , 5 , 6 , 7 , 8 , 10 , 4 , 8 ] , <str> : [ 1.5 , 1.5 , 2.5 , 0 , 1.5 , 2 , 0 , 1 , 2 , 3 , 6 , 3 , 6 , 8 , 6 , 0 , 7 , 12 , 16 , 22 , 24 , 16 , 24 , 8 , 2 , 28 , 14 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 6 ] , <str> : [ 1 ] * 27 , <str> : [ - 0.21365488688320e3 , 0.26641569149272e5 , - 0.24027212204557e5 , - 0.28341603423999e3 , 0.21247284400179e3 ] , <str> : [ 2 , 2 , 2 , 3 , 3 ] , <str> : [ 1. , 0. , 1. , 3. , 3. ] , <str> : [ 25 , 25 , 25 , 15 , 20 ] , <str> : [ 325 , 300 , 300 , 275 , 275 ] , <str> : [ 1.16 , 1.19 , 1.19 , 1.25 , 1.22 ] , <str> : [ 1. ] * 5 , <str> : [ - 0.66642276540751 , 0.72608632349897 , 0.55068668612842e-1 ] , <str> : [ 3.5 , 3.5 , 3. ] , <str> : [ 0.875 , 0.925 , 0.875 ] , <str> : [ 0.3 ] * 3 , <str> : [ 0.7 ] * 3 , <str> : [ 0.3 , 0.3 , 1. ] , <str> : [ 10. , 10. , 12.5 ] , <str> : [ 275 ] * 3 } MBWR = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> <str> , <str> : <str> } , <str> : 8.31434 , <str> : 304.21 , <str> : 7384.325 , <str> : 10.6 , <str> : CP3 , <str> : <str> , <str> : 440.1 , <str> : 40000.0 , <str> : 27.778 , <str> : [ None , - 0.981851065838e-2 , 0.995062267309 , - 0.228380160313e2 , 0.281827634529e4 , - 0.347001262699e6 , 0.394706709102e-3 , - 0.325550000110 , 0.484320083063e1 , - 0.352181542995e6 , - 0.324053603343e-4 , 0.468596684665e-1 , - 0.754547012075e1 , - 0.381894354016e-4 , - 0.442192933859e-1 , 0.516925168095e2 , 0.212450985237e-2 , - 0.261009474785e-4 , - 0.888533388977e-1 , 0.155226179403e-2 , 0.415091004940e6 , - 0.110173967489e8 , 0.291990583344e4 , 0.143254606508e8 , 0.108574207533e2 , - 0.247799657039e3 , 0.199293590763e-1 , 0.102749908059e3 , 0.377618865158e-4 , - 0.332276512346e-2 , 0.179196707121e-7 , 0.945076627807e-5 , - 0.123400943061e-2 ] } GERG = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : Tt , <str> : 1100. , <str> : 800000.0 , <str> : 37.24 , <str> : [ 0.52646564804653 , - 0.14995725042592e1 , 0.27329786733782 , 0.12949500022786 ] , <str> : [ 1 , 1 , 2 , 3 ] , <str> : [ 0 , 1.25 , 1.625 , 0.375 ] , <str> : [ 0.15404088341841 , - 0.58186950946814 , - 0.18022494838296 , - 0.095389904072812 , - 0.80486819317679e-2 , - 0.03554775127309 , - 0.28079014882405 , - 0.82435890081677e-1 , 0.10832427979006e-1 , - 0.67073993161097e-2 , - 0.46827907600524e-2 , - 0.028359911832177 , 0.19500174744098e-1 , - 0.21609137507166 , 0.43772794926972 , - 0.22130790113593 , 0.15190189957331e-1 , - 0.15380948953300e-1 ] , <str> : [ 3 , 3 , 4 , 5 , 6 , 6 , 1 , 4 , 1 , 1 , 3 , 3 , 4 , 5 , 5 , 5 , 5 , 5 ] , <str> : [ 0.375 , 1.375 , 1.125 , 1.375 , 0.125 , 1.625 , 3.75 , 3.5 , 7.5 , 8 , 6 , 16 , 11 , 24 , 26 , 28 , 24 , 26 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 5 , 5 , 5 , 6 , 6 ] , <str> : [ 1 ] * 18 } ely = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> <str> , <str> : <str> } , <str> : 8.31434 , <str> : 44.0098 , <str> : 304.13 , <str> : 10.63 , <str> : CP3 , <str> : <str> , <str> : 216.58 , <str> : 1000. , <str> : 100000.0 , <str> : 26.776 , <str> : [ 0.485497428986 , - 0.191900462349e1 , 0.451739876847 , 0.838475229022e-2 , 0.310719428397 , - 0.183619563850 , 0.448878785519e-1 , - 0.362211893044e-1 , - 0.169827491865e-1 , 0.803504394396e-3 , 0.320223641512e-3 , - 0.658956249553e-5 , - 0.461991678692e-4 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 6 , 7 , 7 , 8 ] , <str> : [ 0 , 1.5 , 2.5 , - 0.5 , 1.5 , 2 , 0 , 1 , 2.5 , 0 , 2 , 5 , 2 ] , <str> : [ - 0.385989029443 , 0.131878614095 , 0.109639470331 , - 0.310044422115e-1 , - 0.989797992915e-1 , - 0.222934996927e-1 , - 0.225488505376e-1 , - 0.595661202393e-2 , - 0.219959964099e-1 , 0.140330955537e-1 , - 0.315424157971e-2 , 0.443394060420e-3 , - 0.487628903103e-2 , - 0.311643343682e-1 , 0.226083669848e-1 , 0.186651858191e-1 , - 0.399277963883 , 0.464945130861 , - 0.817090055061e-1 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 , 5 , 6 , 7 , 8 , 10 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 5 , ] , <str> : [ 5 , 6 , 3.5 , 5.5 , 3 , 7 , 6 , 8.5 , 4 , 6.5 , 5.5 , 22 , 11 , 18 , 11 , 23 , 17 , 18 , 23 ] , <str> : [ 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ] , <str> : [ 1 ] * 19 } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 600. , <str> : 100000.0 , <str> : 37.24 , <str> : [ 0.89875108 , - 0.21281985e1 , - 0.6819032e-1 , 0.76355306e-1 , 0.22053253e-3 ] , <str> : [ 1 , 1 , 1 , 3 , 7 ] , <str> : [ .25 , 1.25 , 1.5 , 0.25 , 0.875 ] , <str> : [ 0.41541823 , 0.71335657 , 0.30354234e-3 , - 0.36643143 , - 0.14407781e-2 , - 0.89166707e-1 , - 0.23699887e-1 ] , <str> : [ 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 2.375 , 2 , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 7 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ - 4.71122371e-1 , 9.13375599e-1 , - 1.96793707 , 6.89687161e-2 , 2.15658922e-4 , 9.51876380e-2 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ - 4.91366518e-3 , 7.32487713e-1 , 8.70918629e-1 , - 5.35917679e-3 , - 0.403818537 , - 2.40820897e-2 , - 1.04239403e-1 , - 2.16335828e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } eq = span , MBWR , GERG , ely , shortSpan , sun _surface = { <str> : [ 0.07863 ] , <str> : [ 1.254 ] } _dielectric = { <str> : 1 , <str> : [ 7.3455 , 0.00335 ] , <str> : [ 83.93 , 145.1 ] , <str> : [ - 578.8 , - 1012. ] , <str> : 0 , <str> : 1.55 } _melting = { <str> : 1 , <str> : span [ <str> ] , <str> : Tt , <str> : 1100.0 , <str> : Tt , <str> : 5.1795e5 , <str> : 1 , <str> : [ 1955.539 , 2055.4593 ] , <str> : [ 1 , 2 ] } _sublimation = { <str> : 3 , <str> : span [ <str> ] , <str> : Tt , <str> : 5.1795e5 , <str> : Tt , <str> : Tt , <str> : [ - 14.740846 , 2.4327015 , - 5.3061778 ] , <str> : [ 1 , 1.9 , 2.9 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 7.0602087 , 1.9391218 , - 1.6463597 , - 3.2995634 ] , <str> : [ 1 , 1.5 , 2. , 4. ] } _liquid_Density = { <str> : 2 , <str> : [ 1.92451080 , - 0.62385555 , - 0.32731127 , 0.39245142 ] , <str> : [ 0.34 , 0.5 , 10 / 6 , 11 / 6 ] } _vapor_Density = { <str> : 2 , <str> : [ - 1.7074879 , - 0.8227467 , - 4.6008549 , - 10.111178 , - 29.742252 ] , <str> : [ 0.34 , 0.5 , 1 , 7 / 3 , 14 / 3 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 0 , <str> : 44.0095 , <str> : 200.76 , <str> : 0.378421 , <str> : <str> , <str> : 200.76 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.0125 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 216.592 , <str> : 1178.53 , <str> : 94.36 , <str> : [ 0.360603235428487 ] , <str> : [ - 1 ] , <str> : [ 3 ] , <str> : [ 1 , 1 ] , <str> : [ 0 , 0 ] , <str> : [ 2 , 8.06282737481277 ] , <str> : [ 1 , - 0.121550806591497 ] , <str> : [ - 1 , 0 ] , <str> : [ 0 , 0 ] } def _mu0 ( self , T ) :          a = [ 1749.354893188350 , - 369.069300007128 , 5423856.34887691 , - 2.21283852168356 , - 269503.247933569 , 73145.021531826 , 5.34368649509278 ] muo = 1.0055 * T ** 0.5 / ( a [ 0 ] + a [ 1 ] * T ** ( 1 / 6 ) + a [ 2 ] * exp ( a [ 3 ] * T ** ( 1 / 3 ) ) + ( a [ 4 ] + a [ 5 ] * T ** ( 1 / 3 ) ) / exp ( T ** ( 1 / 3 ) ) + a [ 6 ] * T ** 0.5 ) return muo * 1e3  visco1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 251.196 , <str> : 1. , <str> : 1.00697 / M ** 0.5 , <str> : [ 0.235156 , - 0.491266 , 5.211155e-2 , 5.347906e-2 , - 1.537102e-2 ] , <str> : 251.196 , <str> : 1 , <str> : [ 0.4071119e-2 , 0.7198037e-4 , 0.2411697e-16 , 0.2971072e-22 , - 0.1627888e-22 ] , <str> : [ 0 , 0 , 3 , 0 , 1 ] , <str> : [ 1 , 2 , 6 , 8 , 8 ] , <str> : [ 0 , 0 , 0 , 0 , 0 ] , <str> : [ 0 , 0 , 0 , 0 , 0 ] } visco2 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 4 , <str> : 0 , <str> : 304.1282 , <str> : [ 69.18424 , - 215.8618 , 210.94362 , - 49.0494 ] , <str> : [ 0 , 0.25 , 0.5 , 0.75 ] , <str> : [ 1.19805e-4 , - 1.25861e-4 , 5.48871e-5 ] , <str> : [ 3.15921e-5 , - 2.60469e-5 , 7.09199e-6 ] , <str> : [ 1.80689e-5 , - 7.41742e-6 , 0.0 ] , <str> : [ - 2.31066e-9 , 0.0 , 5.42486e-10 ] , <str> : [ 1.04558e-8 , - 2.20758e-9 , 0.0 ] , <str> : [ 1.03255e-6 , - 8.56207e-7 , 3.84384e-7 ] } visco3 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 0 , <str> : <str> , <str> : 1 , <str> : 251.196 , <str> : 0.3751 , <str> : 1.00697 / M ** 0.5 * 0.3751 ** 2 , <str> : [ 0.235156 , - 0.491266 , 5.211155e-2 , 5.347906e-2 , - 1.537102e-2 ] } def _visco3 ( self , rho , T , fase = None ) :          muo = self . _Visco0 ( T ) ti = [ 1 , 2 , 7 ] ei = [ 3.6350734e-3 , 7.209997e-5 , 3.00306e-20 ] mug = 0 for t , e in zip ( ti , ei ) :              mug += e * rho ** t  B = 18.56 + 0.014 * T Vo = 7.41e-4 - 3.3e-7 * T mul = 1 / B / ( 1 / rho - Vo ) muc = 0 rhos = 467.689 Ts = 302 Z = 1 mu = muo + mug / ( 1 + exp ( - Z * ( T - Ts ) ) ) + mug / ( 1 + exp ( Z * ( T - Ts ) ) ) / ( 1 + exp ( Z * ( rho - rhos ) ) ) + ( mul - muo ) / ( 1 + exp ( Z * ( T - Ts ) ) ) / ( 1 + exp ( - Z * ( rho - rhos ) ) ) + muc return unidades . Viscosity ( mu , <str> )  _viscosity = visco0 , visco1 , visco2 , visco3 thermo0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : <str> , <str> : 304.1282 , <str> : 467.6 , <str> : 1 , <str> : [ 1.00128e-2 , 5.60488e-2 , - 8.11620e-2 , 6.24337e-2 , - 2.06336e-2 , 2.53248e-3 , 4.30829e-3 , - 3.58563e-2 , 6.71480e-2 , - 5.22855e-2 , 1.74571e-2 , - 1.96414e-3 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] , <str> : [ 1 , 2 , 3 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 6 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.02 , <str> : 1.5e-10 , <str> : 0.052 , <str> : 0.4e-9 , <str> : 456.19 } def _Thermo0 ( self , rho , T , fase ) :          Tr = T / 304.1282 no = [ 1.51874307e-2 , 2.80674040e-2 , 2.28564190e-2 , - 7.41624210e-3 ] ko = Tr ** 0.5 / sum ( [ n / Tr ** i for i , n in enumerate ( no ) ] ) return ko * 1e-3  thermo1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 304.1282 , <str> : 467.6 , <str> : 4.81384e-3 , <str> : [ 7.69857587 , 0.159885811 , 1.56918621 , - 6.73400790 , 16.3890156 , 3.69415242 , 22.3205514 , 66.1420950 , - 0.171779133 , 0.00433043347 ] , <str> : [ 0 , 0 , - 1.5 , 0 , - 1 , - 1.5 , - 1.5 , - 1.5 , - 3.5 , - 5.5 ] , <str> : [ 1 , 5 , 1 , 1 , 2 , 0 , 5 , 9 , 0 , 0 ] , <str> : [ 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 ] , <str> : [ 0 , 0 , 0 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] , <str> : <str> } def _tc ( self , rho , T , fase ) :          Tr = T / 304.1282 rhor = rho / 467.6 nc = 0.775547504 a = [ 0 , 3 , 6.70697 , 0.94604 , 0.3 , 0.3 , 0.39751 , 0.33791 , 0.77963 , 0.79857 , 0.9 , 0.02 , 0.2 ] alfa = 1 - a [ 10 ] * arccosh ( 1 + a [ 11 ] * ( ( 1 - Tr ) ** 2 ) ** a [ 12 ] ) num = rhor * exp ( - rhor ** a [ 1 ] / a [ 1 ] - ( a [ 2 ] * ( Tr - 1 ) ) ** 2 - ( a [ 3 ] * ( rhor - 1 ) ) ** 2 ) den1 = pow ( pow ( 1 - 1 / Tr + a [ 4 ] * pow ( pow ( rhor - 1 , 2 ) , 0.5 / a [ 5 ] ) , 2 ) , a [ 6 ] ) den2 = pow ( pow ( a [ 7 ] * ( rhor - alfa ) , 2 ) , a [ 8 ] ) lc = num / ( den1 + den2 ) ** a [ 9 ] return lc * nc * 4.81384e-3  thermo2 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : <str> , <str> : 1 , <str> : 1e-3 , <str> : [ 2.447164e-2 , 8.705605e-5 , - 6.547950e-8 , 6.594919e-11 ] , <str> : [ 0 , 0 , 0 , 0 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : 3 , <str> : 0.63 , <str> : 1.2415 , <str> : 1.01 , <str> : 1.5e-10 , <str> : 0.052 , <str> : 0.4e-9 , <str> : 450. } def _thermo20 ( self , rho , T , fase ) :          T_ = T / 251.196 bi = [ 0.4226159 , 0.6280115 , - 0.5387661 , 0.6735941 , 0 , 0 , - 0.4362677 , 0.2255388 ] den = 0 for i , b in enumerate ( bi ) :              den += b / T_ ** i  ci = [ 0 , 2.387869e-2 , 4.350794 , - 10.33404 , 7.981590 , - 1.940558 ] suma = 0 for i , c in enumerate ( ci ) :              suma += c * ( T / 100 ) ** ( 2 - i )  cint = 1 + exp ( - 183.5 / T ) * suma r = ( 2 / 5 * cint ) ** 0.5 ko = 0.475598 * T ** 0.5 * ( 1 + r ** 2 ) / den return ko * 1e-3  _thermal = thermo0 , thermo1 , thermo2  class Test ( TestCase ) :      def test_span ( self ) :          st = CO2 ( T = 216.592 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.51796 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 1178.46 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 426.74 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 2.2177 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 5 ) , 0.97466 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 1.9532 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 975.85 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 13.761 ) self . assertEqual ( round ( st . Gas . h . kJkg , 3 ) , - 76.364 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 5 ) , - 0.59999 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 0.6292 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 5 ) , 0.90872 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 222.78 ) st = CO2 ( T = 240 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.2825 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 1088.87 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 379.94 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 2.0155 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 5 ) , 0.94535 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 2.0510 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 806.38 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 33.295 ) self . assertEqual ( round ( st . Gas . h . kJkg , 3 ) , - 70.293 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 5 ) , - 0.72532 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 5 ) , 0.70534 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.1033 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 222.96 ) st = CO2 ( T = 260 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 2.4188 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 998.89 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 337.34 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 1.8495 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 5 ) , 0.93227 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 2.2554 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 652.58 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 64.417 ) self . assertEqual ( round ( st . Gas . h . kJkg , 3 ) , - 70.862 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 5 ) , - 0.82456 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 5 ) , 0.79426 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.4295 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 218.19 ) st = CO2 ( T = 280 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 4.1607 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 883.58 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 289.48 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 1.6792 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 5 ) , 0.96046 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 2.8141 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 471.54 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 121.74 ) self . assertEqual ( round ( st . Gas . h . kJkg , 3 ) , - 80.840 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 5 ) , - 0.93401 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 5 ) , 0.92316 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 2.2769 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 207.72 ) st = CO2 ( T = 300 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 6.7131 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 679.24 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 223.40 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 1.4631 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 1.1199 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 8.6979 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 245.67 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 268.58 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , - 119.70 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , - 1.1175 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.2476 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 11.921 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 185.33 ) st = CO2 ( T = 304 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 7.3555 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 530.30 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , - 188.42 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , - 1.3509 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 2.0531 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 2 ) , 386.88 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 134.14 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 406.42 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , - 158.84 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , - 1.2536 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 2.0679 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 2 ) , 555.58 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 147.62 ) st = CO2 ( T = 240 , P = 5e4 ) self . assertEqual ( round ( st . rho , 4 ) , 1.1084 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , - 93.125 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , - 48.014 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , - 0.04483 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.59473 ) self . assertEqual ( round ( st . cp . kJkgK , 5 ) , 0.78815 ) self . assertEqual ( round ( st . w , 2 ) , 243.88 ) st = CO2 ( T = 1100 , P = 1e5 ) self . assertEqual ( round ( st . rho , 5 ) , 0.48109 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 675.83 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 883.69 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.3827 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.0702 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.2593 ) self . assertEqual ( round ( st . w , 2 ) , 494.61 ) st = CO2 ( T = 280 , P = 5e5 ) self . assertEqual ( round ( st . rho , 4 ) , 9.7568 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , - 71.840 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , - 20.594 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , - 0.36761 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.65255 ) self . assertEqual ( round ( st . cp . kJkgK , 5 ) , 0.87063 ) self . assertEqual ( round ( st . w , 2 ) , 257.27 ) st = CO2 ( T = 230 , P = 1e6 ) self . assertEqual ( round ( st . rho , 2 ) , 1128.97 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 401.07 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 400.19 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 2.1006 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.95680 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.9959 ) self . assertEqual ( round ( st . w , 2 ) , 879.82 ) st = CO2 ( T = 290 , P = 5e6 ) self . assertEqual ( round ( st . rho , 2 ) , 148.41 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 115.58 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , - 81.892 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , - 0.95959 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.94334 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.5783 ) self . assertEqual ( round ( st . w , 2 ) , 207.56 ) st = CO2 ( T = 480 , P = 1e7 ) self . assertEqual ( round ( st . rho , 2 ) , 119.65 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 50.083 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 133.66 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , - 0.48595 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.84672 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.1732 ) self . assertEqual ( round ( st . w , 2 ) , 328.74 ) st = CO2 ( T = 226.679 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 1229.78 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 430.79 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , - 390.13 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 2.2377 ) self . assertEqual ( round ( st . cv . kJkgK , 5 ) , 0.99951 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.7735 ) self . assertEqual ( round ( st . w , 1 ) , 1146.9 ) st = CO2 ( T = 1100 , P = 1e8 ) self . assertEqual ( round ( st . rho , 2 ) , 371.36 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 617.86 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 887.14 ) self . assertEqual ( round ( st . s . kJkgK , 5 ) , 0.03152 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.0931 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.3544 ) self . assertEqual ( round ( st . w , 2 ) , 675.48 ) st = CO2 ( T = 327.673 , P = 8e8 ) self . assertEqual ( round ( st . rho , 2 ) , 1495.70 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , - 369.91 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 164.96 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , - 2.1926 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.1961 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.5477 ) self . assertEqual ( round ( st . w , 1 ) , 2052.8 )  def test_shortSpan ( self ) :          st = CO2 ( T = 500 , rho = 500 , eq = <str> ) self . assertEqual ( round ( st . cp0 . kJkgK , 4 ) , 1.0141 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 45.164 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 1.4994 ) st2 = CO2 ( T = 600 , rho = 100 , eq = <str> ) self . assertEqual ( round ( st2 . h . kJkg - st . h . kJkg , 2 ) , 191.33 ) self . assertEqual ( round ( st2 . s . kJkgK - st . s . kJkgK , 5 ) , 0.60315 )  def test_fenghour ( self ) :          k = { <str> : 1 } self . assertEqual ( round ( CO2 ( T = 220 , rho = 2.440 , ** k ) . mu . muPas , 2 ) , 11.06 ) self . assertEqual ( round ( CO2 ( T = 300 , rho = 1.773 , ** k ) . mu . muPas , 2 ) , 15.02 ) self . assertEqual ( round ( CO2 ( T = 800 , rho = 0.662 , ** k ) . mu . muPas , 2 ) , 35.09 ) self . assertEqual ( round ( CO2 ( T = 304 , rho = 254.32 , ** k ) . mu . muPas , 2 ) , 20.90 ) self . assertEqual ( round ( CO2 ( T = 220 , rho = 1194.86 , ** k ) . mu . muPas , 2 ) , 269.37 ) self . assertEqual ( round ( CO2 ( T = 300 , rho = 1029.27 , ** k ) . mu . muPas , 2 ) , 132.55 ) self . assertEqual ( round ( CO2 ( T = 800 , rho = 407.828 , ** k ) . mu . muPas , 2 ) , 48.74 )  def test_Huber ( self ) :          self . assertEqual ( round ( CO2 ( T = 250 , rho = 0 ) . k . mWmK , 2 ) , 12.99 ) self . assertEqual ( round ( CO2 ( T = 250 , rho = 2 ) . k . mWmK , 2 ) , 13.05 ) self . assertEqual ( round ( CO2 ( T = 250 , rho = 1058 ) . k . mWmK , 2 ) , 140.00 ) self . assertEqual ( round ( CO2 ( T = 310 , rho = 400 ) . k . mWmK , 2 ) , 73.04 ) self . assertEqual ( round ( CO2 ( T = 310 , rho = 400 , visco = 1 ) . k . mWmK , 2 ) , 72.28 )  def test_Scalabrin ( self ) :          st = CO2 ( T = 218 , x = 0.5 , thermal = 1 ) self . assertEqual ( round ( st . Liquido . k . mWmK , 2 ) , 181.09 ) self . assertEqual ( round ( st . Gas . k . mWmK , 3 ) , 10.837 ) st = CO2 ( T = 250 , x = 0.5 , thermal = 1 ) self . assertEqual ( round ( st . Liquido . k . mWmK , 2 ) , 138.61 ) self . assertEqual ( round ( st . Gas . k . mWmK , 3 ) , 14.227 ) st = CO2 ( T = 274 , x = 0.5 , thermal = 1 ) self . assertEqual ( round ( st . Liquido . k . mWmK , 2 ) , 109.11 ) self . assertEqual ( round ( st . Gas . k . mWmK , 3 ) , 19.417 ) st = CO2 ( T = 284 , x = 0.5 , thermal = 1 ) self . assertEqual ( round ( st . Liquido . k . mWmK , 3 ) , 96.920 ) self . assertEqual ( round ( st . Gas . k . mWmK , 3 ) , 24.059 ) st = CO2 ( T = 304 , x = 0.5 , thermal = 1 ) self . assertEqual ( round ( st . Liquido . k . mWmK , 2 ) , 140.30 ) self . assertEqual ( round ( st . Gas . k . mWmK , 2 ) , 217.95 ) self . assertEqual ( round ( CO2 ( T = 225 , P = 1e4 , thermal = 1 ) . k . mWmK , 3 ) , 11.037 ) self . assertEqual ( round ( CO2 ( T = 300 , P = 1e6 , thermal = 1 ) . k . mWmK , 3 ) , 17.248 ) self . assertEqual ( round ( CO2 ( T = 300 , P = 2e8 , thermal = 1 ) . k . mWmK , 2 ) , 219.64 ) self . assertEqual ( round ( CO2 ( T = 400 , P = 1e7 , thermal = 1 ) . k . mWmK , 3 ) , 31.504 ) self . assertEqual ( round ( CO2 ( T = 500 , P = 1e5 , thermal = 1 ) . k . mWmK , 3 ) , 33.143 ) self . assertEqual ( round ( CO2 ( T = 700 , P = 8e6 , thermal = 1 ) . k . mWmK , 3 ) , 52.078 ) self . assertEqual ( round ( CO2 ( T = 1000 , P = 2e8 , thermal = 1 ) . k . mWmK , 2 ) , 116.65 )  def test_vesovic ( self ) :          st = CO2 ( T = 220 , P = 1e5 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 3 ) , 2.440 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 10.90 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 11.06 ) st = CO2 ( T = 300 , P = 1e5 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 3 ) , 1.773 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 16.77 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 15.02 ) st = CO2 ( T = 800 , P = 1e5 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 3 ) , 0.662 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 56.65 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 35.09 ) st = CO2 ( T = 304 , P = 7e6 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 4 ) , 254.3587 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 43.11 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 20.80 ) st = CO2 ( T = 220 , P = 1.5e7 , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 2 ) , 1194.96 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 187.31 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 274.33 ) st = CO2 ( T = 300 , P = 5e7 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 2 ) , 1029.29 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 137.32 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 133.15 ) st = CO2 ( T = 800 , P = 7.5e7 , eq = <str> , visco = 3 , thermal = 2 ) self . assertEqual ( round ( st . rho , 3 ) , 407.908 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 78.48 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 48.62 )  def test_Laesecke ( self ) :          self . assertEqual ( round ( CO2 ( T = 100 , rho = 0 ) . mu . mPas , 7 ) , 0.0053757 ) self . assertEqual ( round ( CO2 ( ) . _Visco0 ( 2000 ) * 1e-3 , 6 ) , 0.066079 ) self . assertEqual ( round ( CO2 ( ) . _Visco0 ( 10000 ) * 1e-3 , 5 ) , 0.17620 ) self . assertEqual ( round ( CO2 ( T = 220 , rho = 3 ) . mu . mPas , 6 ) , 0.011104 ) self . assertEqual ( round ( CO2 ( T = 225 , rho = 1150 ) . mu . mPas , 5 ) , 0.22218 ) self . assertEqual ( round ( CO2 ( T = 300 , rho = 65 ) . mu . mPas , 6 ) , 0.015563 ) self . assertEqual ( round ( CO2 ( T = 300 , rho = 1400 ) . mu . mPas , 5 ) , 0.50594 ) self . assertEqual ( round ( CO2 ( T = 700 , rho = 100 ) . mu . mPas , 6 ) , 0.033112 ) self . assertEqual ( round ( CO2 ( T = 700 , rho = 1200 ) . mu . mPas , 5 ) , 0.22980 )    