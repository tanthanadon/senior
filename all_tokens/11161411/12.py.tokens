from configparser import ConfigParser from functools import partial import gzip import inspect from math import ceil , floor , log10 , atan , pi import os import pickle from PyQt5 import QtCore , QtGui , QtWidgets from numpy import ( arange , append , concatenate , linspace , logspace , transpose , delete , insert , log , nan ) from scipy . optimize import fsolve from matplotlib . font_manager import FontProperties from lib import meos , mEoS , coolProp , refProp , unidades , plot , config from lib . thermo import ThermoAdvanced from lib . utilities import representacion , exportTable , formatLine from tools . codeEditor import SimplePythonEditor from UI . delegate import CheckEditor from UI . prefMEOS import Dialog as ConfDialog from UI . widgets import ( Entrada_con_unidades , createAction , LineStyleCombo , MarkerCombo , ColorSelector , InputFont , Status , Tabla , NumericFactor , QLabelMath ) N_PROP = len ( ThermoAdvanced . properties ( ) ) KEYS = ThermoAdvanced . propertiesKey ( ) UNITS = ThermoAdvanced . propertiesUnit ( ) def getClassFluid ( conf ) :      pref = ConfigParser ( ) pref . read ( config . conf_dir + <str> ) if pref . getboolean ( <str> , <str> ) and pref . getboolean ( <str> , <str> ) :          id = mEoS . __all__ [ conf . getint ( <str> , <str> ) ] . id fluid = refProp . RefProp ( ids = [ id ] )  elif pref . getboolean ( <str> , <str> ) :          id = mEoS . __all__ [ conf . getint ( <str> , <str> ) ] . id fluid = coolProp . CoolProp ( ids = [ id ] )  else :          fluid = mEoS . __all__ [ conf . getint ( <str> , <str> ) ] ( )  return fluid  def getMethod ( ) :      pref = ConfigParser ( ) pref . read ( config . conf_dir + <str> ) if pref . getboolean ( <str> , <str> ) and pref . getboolean ( <str> , <str> ) :          txt = <str>  elif pref . getboolean ( <str> , <str> ) :          txt = <str>  else :          txt = <str>  return txt  class plugin ( object ) :      def _txt ( self ) :          if self . config . has_option ( <str> , <str> ) :              fTxt = mEoS . __all__ [ self . config . getint ( <str> , <str> ) ] . name  else :              fTxt = QtWidgets . QApplication . translate ( <str> , <str> )  if self . config . has_option ( <str> , <str> ) :              refTxt = self . config . get ( <str> , <str> )  else :              refTxt = QtWidgets . QApplication . translate ( <str> , <str> )  propTxt = QtWidgets . QApplication . translate ( <str> , <str> ) confTxt = QtWidgets . QApplication . translate ( <str> , <str> ) return fTxt , refTxt , propTxt , confTxt  def _menuCalculate ( self ) :          menu = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) saturationAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . showSaturation , parent = self ) menu . addAction ( saturationAction ) IsopropertyAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . showIsoproperty , parent = self ) menu . addAction ( IsopropertyAction ) menu . addSeparator ( ) SpecifyAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . addTableSpecified , parent = self ) menu . addAction ( SpecifyAction ) return menu  def _menuPlot ( self ) :          menu = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) Plot_T_s_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_T_s_Action ) Plot_T_rho_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_T_rho_Action ) Plot_P_h_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_P_h_Action ) Plot_P_v_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_P_v_Action ) Plot_P_T_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_P_T_Action ) Plot_h_s_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_h_s_Action ) Plot_v_u_Action = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . plot , <str> , <str> ) , parent = self ) menu . addAction ( Plot_v_u_Action ) Plot2DAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . plot2D , parent = self ) menu . addAction ( Plot2DAction ) menu . addSeparator ( ) Plot3DAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . plot3D , parent = self ) menu . addAction ( Plot3DAction ) return menu  def showChooseFluid ( self ) :          dlg = Ui_ChooseFluid ( self . config ) if dlg . exec_ ( ) :              if not self . config . has_section ( <str> ) :                  self . config . add_section ( <str> )  self . config . set ( <str> , <str> , str ( dlg . id ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . eq . currentIndex ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . radioPR . isChecked ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . generalized . isChecked ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . visco . currentIndex ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . thermal . currentIndex ( ) ) ) self . checkProperties ( ) self . parent ( ) . dirty [ self . parent ( ) . idTab ] = True self . parent ( ) . saveControl ( ) if self . __class__ . __name__ == <str> :                  fTxt = mEoS . __all__ [ dlg . lista . currentRow ( ) ] . name self . fluido . setText ( fTxt )    def showReference ( self ) :          dlg = Ui_ReferenceState ( self . config ) if dlg . exec_ ( ) :              if not self . config . has_section ( <str> ) :                  self . config . add_section ( <str> )  if dlg . OTO . isChecked ( ) :                  refName , refT , refP , refH , refS = <str> , 298.15 , 101325 , 0 , 0  elif dlg . NBP . isChecked ( ) :                  Tb = mEoS . __all__ [ self . config . getint ( <str> , <str> ) ] . Tb refName , refT , refP , refH , refS = <str> , Tb , 101325 , 0 , 0  elif dlg . IIR . isChecked ( ) :                  refName , refT , refP , refH , refS = <str> , 273.15 , 101325 , 200 , 1  elif dlg . ASHRAE . isChecked ( ) :                  refName , refT , refP , refH , refS = <str> , 233.15 , 101325 , refH , refS = 0 , 0  else :                  refName = <str> refT = dlg . T . value refP = dlg . P . value refH = dlg . h . value refS = dlg . s . value  self . config . set ( <str> , <str> , refName ) self . config . set ( <str> , <str> , str ( refT ) ) self . config . set ( <str> , <str> , str ( refP ) ) self . config . set ( <str> , <str> , str ( refH ) ) self . config . set ( <str> , <str> , str ( refS ) ) self . checkProperties ( ) self . parent ( ) . dirty [ self . parent ( ) . idTab ] = True self . parent ( ) . saveControl ( ) if self . __class__ . __name__ == <str> :                  self . reference . setText ( refName )    def checkProperties ( self ) :          if not self . config . has_option ( <str> , <str> ) :              self . config . set ( <str> , <str> , str ( Ui_Properties . _default ) ) self . config . set ( <str> , <str> , <str> ) self . config . set ( <str> , <str> , str ( list ( range ( N_PROP ) ) ) )   def showProperties ( self ) :          dlg = Ui_Properties ( self . config ) if dlg . exec_ ( ) :              if not self . config . has_section ( <str> ) :                  self . config . add_section ( <str> )  self . config . set ( <str> , <str> , str ( dlg . properties ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . checkFase . isChecked ( ) ) ) self . config . set ( <str> , <str> , str ( dlg . order ) ) self . parent ( ) . dirty [ self . parent ( ) . idTab ] = True self . parent ( ) . saveControl ( )   def configure ( self ) :          Config = ConfigParser ( ) Config . read ( config . conf_dir + <str> ) dlg = ConfDialog ( Config ) if dlg . exec_ ( ) :              Config = dlg . value ( Config ) Config . write ( open ( config . conf_dir + <str> , <str> ) )   def showSaturation ( self ) :          dlg = Ui_Saturation ( self . config ) if dlg . exec_ ( ) :              start = dlg . Inicial . value end = dlg . Final . value incr = dlg . Incremento . value fix = dlg . variableFix . value value = arange ( start , end , incr ) if ( end - start ) % incr == 0 :                  value = append ( value , end )  fluid = getClassFluid ( self . config ) method = getMethod ( ) fluidos = [ ] if dlg . VL . isChecked ( ) :                  txt = QtWidgets . QApplication . translate ( <str> , <str> ) if dlg . VariarTemperatura . isChecked ( ) :                      for val in value :                          vconfig = unidades . Temperature ( val ) . str self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , <str> , vconfig , txt ) ) fluidos . append ( fluid . _new ( T = val , x = 0.5 ) )   elif dlg . VariarPresion . isChecked ( ) :                      for val in value :                          vconfig = unidades . Temperature ( val ) . str self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , <str> , vconfig , txt ) ) fluidos . append ( fluid . _new ( P = val , x = 0.5 ) )   elif dlg . VariarXconT . isChecked ( ) :                      fconfig = unidades . Temperature ( fix ) . str for val in value :                          self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , fconfig , val , txt ) ) fluidos . append ( fluid . _new ( T = fix , x = val ) )   elif dlg . VariarXconP . isChecked ( ) :                      fconfig = unidades . Temperature ( fix ) . str for val in value :                          self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , fconfig , val , txt ) ) fluidos . append ( fluid . _new ( P = fix , x = val ) )    else :                  if dlg . SL . isChecked ( ) :                      func = fluid . _Melting_Pressure txt = QtWidgets . QApplication . translate ( <str> , <str> )  elif dlg . SV . isChecked ( ) :                      func = fluid . _Sublimation_Pressure txt = QtWidgets . QApplication . translate ( <str> , <str> )  if dlg . VariarTemperatura . isChecked ( ) :                      for val in value :                          p = func ( val ) fluidos . append ( fluid . _new ( T = val , P = p ) ) self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , <str> , val , txt ) )   else :                      for p in value :                          T = fsolve ( lambda T : p - func ( T ) , fluid . Tt ) fluidos . append ( fluid . _new ( T = T , P = p ) ) self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , <str> , p , txt ) )    title = QtWidgets . QApplication . translate ( <str> , <str> % ( fluid . name , txt , <str> , method ) ) self . addTable ( fluidos , title ) self . parent ( ) . statusbar . clearMessage ( )   def showIsoproperty ( self ) :          dlg = Ui_Isoproperty ( self . parent ( ) ) if dlg . exec_ ( ) :              self . parent ( ) . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) i = dlg . fix . currentIndex ( ) j = dlg . vary . currentIndex ( ) if j >= i :                  j += 1  X = dlg . keys [ i ] keys = dlg . keys [ : ] Y = keys [ j ] value1 = dlg . variableFix . value start = dlg . Inicial . value end = dlg . Final . value incr = dlg . Incremento . value value2 = arange ( start , end , incr ) if ( end - start ) % incr == 0 :                  value2 = append ( value2 , end )  v1conf = dlg . unidades [ i ] ( value1 ) . str fluid = getClassFluid ( self . config ) method = getMethod ( ) kwarg = { } if method == <str> :                  for key in ( <str> , <str> , <str> ) :                      kwarg [ key ] = self . config . getint ( <str> , key )   fluidos = [ ] for v2 in value2 :                  kwarg [ X ] = value1 kwarg [ Y ] = v2 if dlg . unidades [ j ] == float :                      v2conf = v2  else :                      v2conf = dlg . unidades [ j ] ( v2 ) . str  self . parent ( ) . statusbar . showMessage ( <str> % ( fluid . name , X , v1conf , Y , v2conf ) ) fluidos . append ( fluid . _new ( ** kwarg ) )  unitX = dlg . unidades [ i ] . text ( ) title = QtWidgets . QApplication . translate ( <str> , <str> % ( fluid . name , X , v1conf , unitX , meos . propiedades [ j ] , method ) ) self . addTable ( fluidos , title )   def addTable ( self , fluidos , title ) :          tabla = createTabla ( self . config , title , fluidos , self . parent ( ) ) self . parent ( ) . centralwidget . currentWidget ( ) . addSubWindow ( tabla ) wdg = self . parent ( ) . centralwidget . currentWidget ( ) . subWindowList ( ) [ - 1 ] wdg . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( tabla . icon ) ) ) tabla . show ( )  def addTableSpecified ( self ) :          fluid = getClassFluid ( self . config ) name = fluid . name method = getMethod ( ) title = <str> % ( name , QtWidgets . QApplication . translate ( <str> , <str> ) , method ) tabla = createTabla ( self . config , title , None , self . parent ( ) ) tabla . Point = fluid self . parent ( ) . centralwidget . currentWidget ( ) . addSubWindow ( tabla ) wdg = self . parent ( ) . centralwidget . currentWidget ( ) . subWindowList ( ) [ - 1 ] wdg . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( tabla . icon ) ) ) tabla . show ( )  def plot2D ( self ) :          dlg = Plot2D ( self . parent ( ) ) if dlg . exec_ ( ) :              i = dlg . ejeX . currentIndex ( ) j = dlg . ejeY . currentIndex ( ) if j >= i :                  j += 1  x = ThermoAdvanced . propertiesKey ( ) [ i ] y = ThermoAdvanced . propertiesKey ( ) [ j ] if dlg . Xscale . isChecked ( ) :                  xscale = <str>  else :                  xscale = <str>  if dlg . Yscale . isChecked ( ) :                  yscale = <str>  else :                  yscale = <str>  self . plot ( x , y , xscale , yscale )   def plot3D ( self ) :          dlg = Plot3D ( self . parent ( ) ) if dlg . exec_ ( ) :              i = dlg . ejeX . currentIndex ( ) j = dlg . ejeY . currentIndex ( ) k = dlg . ejeZ . currentIndex ( ) if k >= i :                  k += 1  if k >= j :                  k += 1  if j >= i :                  j += 1  x = ThermoAdvanced . propertiesKey ( ) [ i ] y = ThermoAdvanced . propertiesKey ( ) [ j ] z = ThermoAdvanced . propertiesKey ( ) [ k ] self . plot ( x , y , z = z )   def plot ( self , x , y , xscale = None , yscale = None , z = <str> ) :          index = self . config . getint ( <str> , <str> ) fluid = mEoS . __all__ [ index ] filename = <str> % ( fluid . formula ) if z :              title = QtWidgets . QApplication . translate ( <str> , <str> % ( fluid . formula , z , y , x ) ) dim = 3  else :              title = QtWidgets . QApplication . translate ( <str> , <str> % ( fluid . formula , y , x ) ) dim = 2  grafico = PlotMEoS ( dim = dim , parent = self . parent ( ) , filename = filename ) grafico . setWindowTitle ( title ) grafico . x = x grafico . y = y grafico . z = z unitx = meos . units [ meos . keys . index ( x ) ] . magnitudes ( ) [ 0 ] [ 0 ] unity = meos . units [ meos . keys . index ( y ) ] . magnitudes ( ) [ 0 ] [ 0 ] i = self . config . getint ( <str> , unitx ) j = self . config . getint ( <str> , unity ) xtxt = <str> % ( x , meos . units [ meos . keys . index ( x ) ] . __text__ [ i ] ) ytxt = <str> % ( y , meos . units [ meos . keys . index ( y ) ] . __text__ [ j ] ) grafico . plot . ax . set_xlabel ( xtxt ) grafico . plot . ax . set_ylabel ( ytxt ) if z :              grafico . z = z unitz = meos . units [ meos . keys . index ( z ) ] . magnitudes ( ) [ 0 ] [ 0 ] k = self . config . getint ( <str> , unitz ) ztxt = <str> % ( z , meos . units [ meos . keys . index ( z ) ] . __text__ [ k ] ) grafico . plot . ax . set_zlabel ( ztxt )  self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) data = grafico . _getData ( ) if not data :              self . parent ( ) . progressBar . setValue ( 0 ) self . parent ( ) . progressBar . setVisible ( True ) self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) data = self . calculatePlot ( fluid ) conf = { } conf [ <str> ] = index conf [ <str> ] = self . config . getint ( <str> , <str> ) conf [ <str> ] = self . config . getint ( <str> , <str> ) conf [ <str> ] = self . config . getint ( <str> , <str> ) data [ <str> ] = conf grafico . _saveData ( data ) self . parent ( ) . progressBar . setVisible ( False )  self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) grafico . config = data [ <str> ] if z :              plot2D3D ( grafico , data , self . parent ( ) . Preferences , x , y , z )  else :              plot2D3D ( grafico , data , self . parent ( ) . Preferences , x , y ) if not xscale :                  if x in [ <str> , <str> , <str> ] :                      xscale = <str>  else :                      xscale = <str>   grafico . plot . ax . set_xscale ( xscale ) if not yscale :                  if y in [ <str> , <str> , <str> ] :                      yscale = <str>  else :                      yscale = <str>   grafico . plot . ax . set_yscale ( yscale )  grid = self . parent ( ) . Preferences . getboolean ( <str> , <str> ) grafico . plot . ax . _gridOn = grid grafico . plot . ax . grid ( grid ) self . parent ( ) . centralwidget . currentWidget ( ) . addSubWindow ( grafico ) grafico . show ( ) self . parent ( ) . statusbar . clearMessage ( )  def calculatePlot ( self , fluid ) :          data = { } points = get_points ( self . parent ( ) . Preferences ) if fluid . _melting :              self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) T = linspace ( fluid . _melting [ <str> ] , fluid . _melting [ <str> ] , points ) fluidos = [ ] for Ti in T :                  P = fluid . _Melting_Pressure ( Ti ) fluido = calcPoint ( fluid , self . config , T = Ti , P = P ) if fluido :                      fluidos . append ( fluido )  self . parent ( ) . progressBar . setValue ( 5 * len ( fluidos ) / len ( T ) ) QtWidgets . QApplication . processEvents ( )  if fluidos :                  data [ <str> ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                      dat_propiedad = [ ] for fluido in fluidos :                          num = fluido . __getattribute__ ( x ) if num is not None :                              dat_propiedad . append ( num . _data )  else :                              dat_propiedad . append ( None )   data [ <str> ] [ x ] = dat_propiedad    if fluid . _sublimation :              self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) T = linspace ( fluid . _sublimation [ <str> ] , fluid . _sublimation [ <str> ] , points ) fluidos = [ ] for Ti in T :                  P = fluid . _Sublimation_Pressure ( Ti ) fluido = calcPoint ( fluid , self . config , T = Ti , P = P ) if fluido :                      fluidos . append ( fluido )  self . parent ( ) . progressBar . setValue ( 5 + 5 * len ( fluidos ) / len ( T ) ) QtWidgets . QApplication . processEvents ( )  if fluidos :                  data [ <str> ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                      dat_propiedad = [ ] for fluido in fluidos :                          num = fluido . __getattribute__ ( x ) if num is not None :                              dat_propiedad . append ( num . _data )  else :                              dat_propiedad . append ( None )   data [ <str> ] [ x ] = dat_propiedad    T = list ( concatenate ( [ linspace ( fluid . Tt , 0.9 * fluid . Tc , points ) , linspace ( 0.9 * fluid . Tc , 0.99 * fluid . Tc , points ) , linspace ( 0.99 * fluid . Tc , fluid . Tc , points ) ] ) ) for i in range ( 2 , 0 , - 1 ) :              del T [ points * i ]  self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fases = [ 0 , 1 ] for fase in fases :              fluidos = [ ] for Ti in T :                  fluidos . append ( fluid ( T = Ti , x = fase ) ) self . parent ( ) . progressBar . setValue ( 10 + 5 * fase + 5 * len ( fluidos ) / len ( T ) ) QtWidgets . QApplication . processEvents ( )  data [ <str> % fase ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> % fase ] [ x ] = dat_propiedad   data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) values = self . LineList ( <str> , self . parent ( ) . Preferences ) for i , value in enumerate ( values ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , T , value , 20 , i , 20 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ value ] [ x ] = dat_propiedad   eq = fluid . eq [ self . parent ( ) . currentConfig . getint ( <str> , <str> ) ] T = list ( concatenate ( [ linspace ( eq [ <str> ] , 0.9 * fluid . Tc , points ) , linspace ( 0.9 * fluid . Tc , 0.99 * fluid . Tc , points ) , linspace ( 0.99 * fluid . Tc , fluid . Tc , points ) , linspace ( fluid . Tc , 1.01 * fluid . Tc , points ) , linspace ( 1.01 * fluid . Tc , 1.1 * fluid . Tc , points ) , linspace ( 1.1 * fluid . Tc , eq [ <str> ] , points ) ] ) ) Pmin = eq [ <str> ] * 1000 Pmax = eq [ <str> ] * 1000 P = list ( concatenate ( [ logspace ( log10 ( Pmin ) , log10 ( 0.9 * fluid . Pc ) , points ) , linspace ( 0.9 * fluid . Pc , 0.99 * fluid . Pc , points ) , linspace ( 0.99 * fluid . Pc , fluid . Pc , points ) , linspace ( fluid . Pc , 1.01 * fluid . Pc , points ) , linspace ( 1.01 * fluid . Pc , 1.1 * fluid . Pc , points ) , logspace ( log10 ( 1.1 * fluid . Pc ) , log10 ( Pmax ) , points ) ] ) ) for i in range ( 5 , 0 , - 1 ) :              del T [ points * i ] del P [ points * i ]  data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) values = self . LineList ( <str> , self . parent ( ) . Preferences , fluid ) for i , value in enumerate ( values ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , P , value , 40 , i , 10 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ value ] [ x ] = dat_propiedad   data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) values = self . LineList ( <str> , self . parent ( ) . Preferences , fluid ) for i , value in enumerate ( values ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , T , value , 50 , i , 10 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ value ] [ x ] = dat_propiedad   data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) values = self . LineList ( <str> , self . parent ( ) . Preferences , fluid ) for i , value in enumerate ( values ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , T , value , 60 , i , 10 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ value ] [ x ] = dat_propiedad   data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) vals = self . LineList ( <str> , self . parent ( ) . Preferences , fluid ) for i , value in enumerate ( vals ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , T , value , 70 , i , 10 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ value ] [ x ] = dat_propiedad   data [ <str> ] = { } self . parent ( ) . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) values = self . LineList ( <str> , self . parent ( ) . Preferences , fluid ) for i , value in enumerate ( values ) :              fluidos = calcIsoline ( fluid , self . config , <str> , <str> , T , value , 80 , i , 20 , len ( values ) , self . parent ( ) . progressBar ) data [ <str> ] [ value ] = { } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   data [ <str> ] [ num ] [ x ] = dat_propiedad   return data  @ staticmethod def LineList ( name , Preferences , fluid = None ) :          if Preferences . getboolean ( <str> , name + <str> ) :              t = [ ] for i in Preferences . get ( <str> , name + <str> ) . split ( <str> ) :                  if i :                      t . append ( float ( i ) )    else :              start = Preferences . getfloat ( <str> , name + <str> ) end = Preferences . getfloat ( <str> , name + <str> ) step = Preferences . getfloat ( <str> , name + <str> ) t = list ( arange ( start , end + step , step ) )  if fluid is not None and Preferences . getboolean ( <str> , name + <str> ) :              if name == <str> :                  t . append ( fluid . Tc )  elif name == <str> :                  t . append ( fluid . Pc )  elif name == <str> :                  t . append ( 1. / fluid . rhoc )  else :                  prop = { <str> : <str> , <str> : <str> } fc = fluid ( T = fluid . Tc , rho = fluid . rhoc ) t . append ( fc . __getattribute__ ( prop [ name ] ) )   return t   class Menu ( QtWidgets . QMenu , plugin ) :      def __init__ ( self , parent = None ) :          title = QtWidgets . QApplication . translate ( <str> , <str> ) super ( Menu , self ) . __init__ ( title , parent ) self . aboutToShow . connect ( self . aboutToShow_menu )  def aboutToShow_menu ( self ) :          self . clear ( ) self . config = self . parent ( ) . currentConfig fTxt , refTxt , propTxt , confTxt = self . _txt ( ) flAction = createAction ( fTxt , slot = self . showChooseFluid , parent = self ) refAction = createAction ( refTxt , slot = self . showReference , parent = self ) pAction = createAction ( propTxt , slot = self . showProperties , parent = self ) confAction = createAction ( confTxt , slot = self . configure , parent = self ) menuCalculate = self . _menuCalculate ( ) menuPlot = self . _menuPlot ( ) self . addAction ( flAction ) self . addAction ( refAction ) self . addAction ( pAction ) self . addAction ( confAction ) self . addSeparator ( ) self . addAction ( menuCalculate . menuAction ( ) ) self . addAction ( menuPlot . menuAction ( ) ) self . addSeparator ( ) if not ( self . config . has_option ( <str> , <str> ) and self . config . has_option ( <str> , <str> ) ) :              menuCalculate . setEnabled ( False ) menuPlot . setEnabled ( False )    class Dialog ( QtWidgets . QDialog , plugin ) :      def __init__ ( self , config = None , parent = None ) :          super ( Dialog , self ) . __init__ ( parent ) if config is None :              config = parent . currentConfig  self . config = config self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) fTxt , refTxt , propTxt , confTxt = self . _txt ( ) fluid = QtWidgets . QPushButton ( fTxt ) fluid . clicked . connect ( self . showChooseFluid ) layout . addWidget ( fluid , 1 , 1 ) ref = QtWidgets . QPushButton ( refTxt ) ref . clicked . connect ( self . showReference ) layout . addWidget ( ref , 2 , 1 ) prop = QtWidgets . QPushButton ( propTxt ) prop . clicked . connect ( self . showProperties ) layout . addWidget ( prop , 3 , 1 ) conf = QtWidgets . QPushButton ( confTxt ) conf . clicked . connect ( self . configure ) layout . addWidget ( conf , 4 , 1 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 5 , 1 ) menuCalculate = self . _menuCalculate ( ) calculate = QtWidgets . QPushButton ( menuCalculate . title ( ) ) calculate . setMenu ( menuCalculate ) layout . addWidget ( calculate , 6 , 1 ) menuPlot = self . _menuPlot ( ) plot = QtWidgets . QPushButton ( menuPlot . title ( ) ) plot . setMenu ( menuPlot ) layout . addWidget ( plot , 6 , 2 ) if not ( self . config . has_option ( <str> , <str> ) and self . config . has_option ( <str> , <str> ) ) :              calculate . setEnabled ( False ) plot . setEnabled ( False )  layout . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 7 , 1 , 1 , 3 ) btBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) btBox . clicked . connect ( self . reject ) layout . addWidget ( btBox , 8 , 1 , 1 , 3 )   class Ui_ChooseFluid ( QtWidgets . QDialog ) :      all = True group = None def __init__ ( self , config = None , parent = None ) :          super ( Ui_ChooseFluid , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . lista = QtWidgets . QListWidget ( ) self . fill ( mEoS . __all__ ) self . lista . itemDoubleClicked . connect ( self . accept ) layout . addWidget ( self . lista , 1 , 1 , 5 , 1 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel , QtCore . Qt . Vertical ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) self . buttonBox . helpRequested . connect ( self . info ) layout . addWidget ( self . buttonBox , 1 , 2 ) self . widget = QtWidgets . QWidget ( self ) self . widget . setVisible ( False ) layout . addWidget ( self . widget , 6 , 1 , 1 , 2 ) gridLayout = QtWidgets . QGridLayout ( self . widget ) self . radioMEoS = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . radioMEoS . setChecked ( True ) gridLayout . addWidget ( self . radioMEoS , 1 , 1 , 1 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 2 , 1 ) self . eq = QtWidgets . QComboBox ( ) gridLayout . addWidget ( self . eq , 2 , 2 ) self . generalized = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout . addWidget ( self . generalized , 3 , 1 , 1 , 2 ) self . radioPR = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout . addWidget ( self . radioPR , 4 , 1 , 1 , 2 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 5 , 1 ) gridLayout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 1 ) self . visco = QtWidgets . QComboBox ( ) gridLayout . addWidget ( self . visco , 6 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 7 , 1 ) self . thermal = QtWidgets . QComboBox ( ) gridLayout . addWidget ( self . thermal , 7 , 2 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Maximum ) , 8 , 2 ) botonFilter = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) botonFilter . clicked . connect ( self . filter ) layout . addWidget ( botonFilter , 3 , 2 , 1 , 1 ) botonInfo = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) botonInfo . clicked . connect ( self . info ) layout . addWidget ( botonInfo , 4 , 2 , 1 , 1 ) self . botonMore = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonMore . setCheckable ( True ) self . botonMore . clicked . connect ( self . widget . setVisible ) layout . addWidget ( self . botonMore , 5 , 2 , 1 , 1 ) self . lista . currentRowChanged . connect ( self . update ) self . radioMEoS . toggled . connect ( self . eq . setEnabled ) if config and config . has_option ( <str> , <str> ) :              self . lista . setCurrentRow ( config . getint ( <str> , <str> ) ) self . eq . setCurrentIndex ( config . getint ( <str> , <str> ) ) self . radioPR . setChecked ( config . getboolean ( <str> , <str> ) ) self . generalized . setChecked ( config . getboolean ( <str> , <str> ) ) self . visco . setCurrentIndex ( config . getint ( <str> , <str> ) ) self . thermal . setCurrentIndex ( config . getint ( <str> , <str> ) )   def id ( self ) :          id = self . lista . currentRow ( ) if not self . all :              hiden = 0 visible = 0 for grp , boolean in zip ( DialogFilterFluid . classOrder , self . group ) :                  module = mEoS . __getattribute__ ( grp ) if boolean :                      visible += len ( module )  else :                      hiden += len ( module )  if visible >= id :                      break   id += hiden  return id  def fill ( self , compounds ) :          self . lista . clear ( ) for fluido in compounds :              txt = fluido . name if fluido . synonym :                  txt += <str> + fluido . synonym + <str>  self . lista . addItem ( txt )   def filter ( self ) :          dlg = DialogFilterFluid ( self . all , self . group ) if dlg . exec_ ( ) :              if dlg . showAll . isChecked ( ) :                  cmps = mEoS . __all__ self . all = True  else :                  self . all = False self . group = [ ] cmps = [ ] for i , key in enumerate ( dlg . classOrder ) :                      if dlg . groups [ i ] . isChecked ( ) :                          cmps += mEoS . __getattribute__ ( key ) self . group . append ( True )  else :                          self . group . append ( False )    self . fill ( cmps )   def info ( self ) :          dialog = Dialog_InfoFluid ( mEoS . __all__ [ self . lista . currentRow ( ) ] ) dialog . exec_ ( )  def update ( self , indice ) :          fluido = mEoS . __all__ [ indice ] self . eq . clear ( ) for eq in fluido . eq :              self . eq . addItem ( eq [ <str> ] )  self . visco . clear ( ) if fluido . _viscosity is not None :              self . visco . setEnabled ( True ) for eq in fluido . _viscosity :                  self . visco . addItem ( eq [ <str> ] )   else :              self . visco . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . visco . setEnabled ( False )  self . thermal . clear ( ) if fluido . _thermal is not None :              self . thermal . setEnabled ( True ) for eq in fluido . _thermal :                  self . thermal . addItem ( eq [ <str> ] )   else :              self . thermal . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . thermal . setEnabled ( False )    class DialogFilterFluid ( QtWidgets . QDialog ) :      text = { <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) , <str> : QtWidgets . QApplication . translate ( <str> , <str> ) } classOrder = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] def __init__ ( self , all = True , group = None , parent = None ) :          super ( DialogFilterFluid , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . showAll = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . showAll , 1 , 1 ) widget = QtWidgets . QWidget ( ) layout . addWidget ( widget , 2 , 1 ) lyt = QtWidgets . QVBoxLayout ( widget ) self . groups = [ ] for name in self . classOrder :              checkBox = QtWidgets . QCheckBox ( self . text [ name ] ) lyt . addWidget ( checkBox ) self . groups . append ( checkBox )  self . showAll . toggled . connect ( widget . setDisabled ) self . showAll . setChecked ( all ) if group is not None :              for boolean , checkBox in zip ( group , self . groups ) :                  checkBox . setChecked ( boolean )   self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 3 , 1 )   class Ui_ReferenceState ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Ui_ReferenceState , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . OTO = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . OTO , 0 , 1 , 1 , 7 ) self . NBP = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . NBP , 1 , 1 , 1 , 7 ) self . IIR = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . IIR , 2 , 1 , 1 , 7 ) self . ASHRAE = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . ASHRAE , 3 , 1 , 1 , 7 ) self . personalizado = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . personalizado . toggled . connect ( self . setEnabled ) layout . addWidget ( self . personalizado , 4 , 1 , 1 , 7 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 5 , 1 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 2 ) self . T = Entrada_con_unidades ( unidades . Temperature , value = 298.15 ) layout . addWidget ( self . T , 5 , 3 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 6 , 2 ) self . P = Entrada_con_unidades ( unidades . Pressure , value = 101325 ) layout . addWidget ( self . P , 6 , 3 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 5 , 4 , 2 , 1 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 5 ) self . h = Entrada_con_unidades ( unidades . Enthalpy , value = 0 ) layout . addWidget ( self . h , 5 , 6 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 6 , 5 ) self . s = Entrada_con_unidades ( unidades . SpecificHeat , value = 0 ) layout . addWidget ( self . s , 6 , 6 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 7 , 7 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 8 , 1 , 1 , 7 ) if config and config . has_option ( <str> , <str> ) :              self . setEnabled ( False ) if config . get ( <str> , <str> ) == <str> :                  self . OTO . setChecked ( True )  elif config . get ( <str> , <str> ) == <str> :                  self . NBP . setChecked ( True )  elif config . get ( <str> , <str> ) == <str> :                  self . IIR . setChecked ( True )  elif config . get ( <str> , <str> ) == <str> :                  self . ASHRAE . setChecked ( True )  else :                  self . personalizado . setChecked ( True ) self . setEnabled ( True ) self . T . setValue ( config . getfloat ( <str> , <str> ) ) self . P . setValue ( config . getfloat ( <str> , <str> ) ) self . h . setValue ( config . getfloat ( <str> , <str> ) ) self . s . setValue ( config . getfloat ( <str> , <str> ) )   else :              self . OTO . setChecked ( True ) self . setEnabled ( False )   def setEnabled ( self , bool ) :          self . T . setEnabled ( bool ) self . P . setEnabled ( bool ) self . h . setEnabled ( bool ) self . s . setEnabled ( bool )   class Dialog_InfoFluid ( QtWidgets . QDialog ) :      def __init__ ( self , element , parent = None ) :          super ( Dialog_InfoFluid , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) self . element = element layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 1 ) self . name = QtWidgets . QLabel ( ) layout . addWidget ( self . name , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 2 , 1 ) self . r_name = QtWidgets . QLabel ( ) layout . addWidget ( self . r_name , 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 3 , 1 ) self . formula = QtWidgets . QLabel ( ) layout . addWidget ( self . formula , 3 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 4 , 1 ) self . CAS = QtWidgets . QLabel ( ) layout . addWidget ( self . CAS , 4 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 30 , 30 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 1 , 3 , 3 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 4 ) self . M = Entrada_con_unidades ( float , textounidad = <str> , readOnly = True ) layout . addWidget ( self . M , 1 , 5 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 2 , 4 ) self . Tc = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) layout . addWidget ( self . Tc , 2 , 5 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 3 , 4 ) self . Pc = Entrada_con_unidades ( unidades . Pressure , readOnly = True ) layout . addWidget ( self . Pc , 3 , 5 ) layout . addWidget ( QtWidgets . QLabel ( <str> + <str> ) , 4 , 4 ) self . rhoc = Entrada_con_unidades ( unidades . Density , <str> , readOnly = True ) layout . addWidget ( self . rhoc , 4 , 5 ) layout . addItem ( QtWidgets . QSpacerItem ( 30 , 30 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 1 , 6 , 3 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 7 ) self . Tt = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) layout . addWidget ( self . Tt , 1 , 8 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 2 , 7 ) self . Tb = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) layout . addWidget ( self . Tb , 2 , 8 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 3 , 7 ) self . momento = Entrada_con_unidades ( unidades . DipoleMoment , readOnly = True ) layout . addWidget ( self . momento , 3 , 8 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 4 , 7 ) self . f_acent = Entrada_con_unidades ( float , readOnly = True ) layout . addWidget ( self . f_acent , 4 , 8 ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 5 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 6 , 1 ) self . eq = QtWidgets . QComboBox ( ) layout . addWidget ( self . eq , 6 , 2 , 1 , 7 ) self . stacked = QtWidgets . QStackedWidget ( ) layout . addWidget ( self . stacked , 7 , 1 , 1 , 8 ) self . eq . currentIndexChanged . connect ( self . stacked . setCurrentIndex ) self . moreButton = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . moreButton . clicked . connect ( self . more ) layout . addWidget ( self . moreButton , 9 , 1 ) btBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) btBox . clicked . connect ( self . reject ) layout . addWidget ( btBox , 9 , 2 , 1 , 7 ) self . fill ( element )  def fill ( self , element ) :          self . name . setText ( element . name ) self . r_name . setText ( element . synonym ) self . formula . setText ( element . formula ) self . CAS . setText ( element . CASNumber ) self . M . setValue ( element . M ) self . Tc . setValue ( element . Tc ) self . Pc . setValue ( element . Pc ) self . rhoc . setValue ( element . rhoc ) self . Tb . setValue ( element . Tb ) self . Tt . setValue ( element . Tt ) self . momento . setValue ( element . momentoDipolar ) self . f_acent . setValue ( element . f_acent ) for eq in element . eq :              widget = Widget_MEoS_Data ( eq ) self . stacked . addWidget ( widget ) self . eq . addItem ( eq [ <str> ] )   def more ( self ) :          dialog = transportDialog ( self . element , parent = self ) dialog . show ( )   class Widget_MEoS_Data ( QtWidgets . QWidget ) :      def __init__ ( self , eq , parent = None ) :          super ( Widget_MEoS_Data , self ) . __init__ ( parent ) gridLayout = QtWidgets . QGridLayout ( self ) txt = <str> . join ( ( eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] ) ) ref = QtWidgets . QLabel ( txt ) ref . setWordWrap ( True ) gridLayout . addWidget ( ref , 1 , 1 ) tabWidget = QtWidgets . QTabWidget ( ) gridLayout . addWidget ( tabWidget , 3 , 1 ) if <str> in eq [ <str> ] :              tab1 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab1 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Ideal = QtWidgets . QGridLayout ( tab1 ) mathTex = <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_Ideal . addWidget ( label , 1 , 1 , 1 , 3 ) self . Tabla_Cp_poly = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_poly , 2 , 1 ) self . Tabla_Cp_exp = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_exp , 2 , 2 ) self . Tabla_Cp_hyp = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_hyp , 2 , 3 )  else :              tab1 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab1 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Ideal = QtWidgets . QGridLayout ( tab1 ) mathTex = <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_Ideal . addWidget ( label , 1 , 1 , 1 , 3 ) self . Tabla_Cp_poly = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_poly , 2 , 1 ) self . Tabla_Cp_exp = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_exp , 2 , 2 ) self . Tabla_Cp_hyp = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Ideal . addWidget ( self . Tabla_Cp_hyp , 2 , 3 )  if eq [ <str> ] == <str> :              mathTex = <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout . addWidget ( label , 2 , 1 ) tab2 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab2 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_pol = QtWidgets . QGridLayout ( tab2 ) mathTex = <str> label = QLabelMath ( mathTex ) gridLayout_pol . addWidget ( label , 1 , 1 ) self . Tabla_lineal = Tabla ( 3 , horizontalHeader = [ <str> , <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_pol . addWidget ( self . Tabla_lineal , 2 , 1 ) tab3 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab3 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Exp = QtWidgets . QGridLayout ( tab3 ) mathTex = <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_Exp . addWidget ( label , 1 , 1 ) self . Tabla_exponential = Tabla ( 5 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_Exp . addWidget ( self . Tabla_exponential , 2 , 1 ) tab4 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab4 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_gauss = QtWidgets . QGridLayout ( tab4 ) mathTex = <str> mathTex += <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_gauss . addWidget ( label , 1 , 1 ) self . Tabla_gauss = Tabla ( 7 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_gauss . addWidget ( self . Tabla_gauss , 2 , 1 ) tab5 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab5 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_NA = QtWidgets . QGridLayout ( tab5 ) mathTex = <str> mathTex += <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_NA . addWidget ( label , 1 , 1 ) mathTex = <str> mathTex += <str> mathTex += <str> label2 = QLabelMath ( mathTex ) gridLayout_NA . addWidget ( label2 , 2 , 1 ) self . Tabla_noanalytic = Tabla ( 8 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) gridLayout_NA . addWidget ( self . Tabla_noanalytic , 3 , 1 ) tab6 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab6 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_HE = QtWidgets . QGridLayout ( tab6 ) mathTex = <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_HE . addWidget ( label , 1 , 1 , 1 , 2 ) gridLayout_HE . addWidget ( QtWidgets . QLabel ( <str> ) , 2 , 1 ) self . fi = Entrada_con_unidades ( float , readOnly = True ) gridLayout_HE . addWidget ( self . fi , 2 , 2 ) gridLayout_HE . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 3 , 1 , 1 , 2 )  elif eq [ <str> ] == <str> :              tab2 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab2 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_MBWR = QtWidgets . QGridLayout ( tab2 ) mathTex = <str> mathTex += <str> mathTex += <str> label = QLabelMath ( mathTex ) gridLayout_MBWR . addWidget ( label , 1 , 1 ) self . Tabla_MBWR = Tabla ( 1 , horizontalHeader = [ <str> ] , stretch = False , readOnly = True ) gridLayout_MBWR . addWidget ( self . Tabla_MBWR , 2 , 1 )  self . fill ( eq )  def fill ( self , eq ) :          format = { <str> : 1 , <str> : 5 } if <str> in eq [ <str> ] :              self . Tabla_Cp_poly . setColumn ( 0 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_poly . setColumn ( 1 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_poly . resizeColumnsToContents ( ) self . Tabla_Cp_exp . setColumn ( 0 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_exp . setColumn ( 1 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_exp . resizeColumnsToContents ( ) if <str> in eq [ <str> ] :                  self . Tabla_Cp_hyp . setColumn ( 0 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_hyp . setColumn ( 1 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_hyp . resizeColumnsToContents ( )   else :              self . Tabla_Cp_poly . setColumn ( 0 , [ eq [ <str> ] [ <str> ] ] + eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_poly . setColumn ( 1 , [ 0 ] + eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_poly . resizeColumnsToContents ( ) self . Tabla_Cp_exp . setColumn ( 0 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_exp . setColumn ( 1 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_exp . resizeColumnsToContents ( ) self . Tabla_Cp_hyp . setColumn ( 0 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_hyp . setColumn ( 1 , eq [ <str> ] [ <str> ] , ** format ) self . Tabla_Cp_hyp . resizeColumnsToContents ( )  if eq [ <str> ] == <str> :              if eq . get ( <str> , [ ] ) :                  self . Tabla_lineal . setColumn ( 0 , eq [ <str> ] , ** format ) self . Tabla_lineal . setColumn ( 1 , eq [ <str> ] , ** format ) self . Tabla_lineal . setColumn ( 2 , eq [ <str> ] , ** format )  if eq . get ( <str> , [ ] ) :                  self . Tabla_exponential . setColumn ( 0 , eq [ <str> ] , ** format ) self . Tabla_exponential . setColumn ( 1 , eq [ <str> ] , ** format ) self . Tabla_exponential . setColumn ( 2 , eq [ <str> ] , ** format ) self . Tabla_exponential . setColumn ( 3 , eq [ <str> ] , ** format ) self . Tabla_exponential . setColumn ( 4 , eq [ <str> ] , ** format )  if eq . get ( <str> , [ ] ) :                  self . Tabla_gauss . setColumn ( 0 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 1 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 2 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 3 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 4 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 5 , eq [ <str> ] , ** format ) self . Tabla_gauss . setColumn ( 6 , eq [ <str> ] , ** format )  if eq . get ( <str> , [ ] ) :                  self . Tabla_noanalytic . setColumn ( 0 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 1 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 2 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 3 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 4 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 5 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 6 , eq [ <str> ] , ** format ) self . Tabla_noanalytic . setColumn ( 7 , eq [ <str> ] , ** format )  self . Tabla_lineal . resizeColumnsToContents ( ) self . Tabla_exponential . resizeColumnsToContents ( ) self . Tabla_gauss . resizeColumnsToContents ( ) self . Tabla_noanalytic . resizeColumnsToContents ( )  elif eq [ <str> ] == <str> :              self . Tabla_MBWR . setColumn ( 0 , eq [ <str> ] [ 1 : ] , ** format ) self . Tabla_MBWR . resizeColumnsToContents ( )    class transportDialog ( QtWidgets . QDialog ) :      def __init__ ( self , element , parent = None ) :          super ( transportDialog , self ) . __init__ ( parent ) gridLayout = QtWidgets . QGridLayout ( self ) self . element = element tabWidget = QtWidgets . QTabWidget ( ) gridLayout . addWidget ( tabWidget , 1 , 1 ) tab3 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab3 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_viscosity = QtWidgets . QGridLayout ( tab3 ) gridLayout_viscosity . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 1 ) self . eqVisco = QtWidgets . QComboBox ( ) gridLayout_viscosity . addWidget ( self . eqVisco , 1 , 2 ) gridLayout_viscosity . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 1 , 3 ) self . stackedVisco = QtWidgets . QStackedWidget ( ) gridLayout_viscosity . addWidget ( self . stackedVisco , 2 , 1 , 1 , 3 ) self . eqVisco . currentIndexChanged . connect ( self . stackedVisco . setCurrentIndex ) if element . _viscosity is not None :              for eq in element . _viscosity :                  widget = Widget_Viscosity_Data ( element , eq ) self . stackedVisco . addWidget ( widget ) self . eqVisco . addItem ( eq [ <str> ] )   else :              self . eqVisco . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) )  tab4 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab4 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_conductivity = QtWidgets . QGridLayout ( tab4 ) gridLayout_conductivity . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 1 ) self . eqThermo = QtWidgets . QComboBox ( ) gridLayout_conductivity . addWidget ( self . eqThermo , 1 , 2 ) gridLayout_conductivity . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 1 , 3 ) self . stackedThermo = QtWidgets . QStackedWidget ( ) gridLayout_conductivity . addWidget ( self . stackedThermo , 2 , 1 , 1 , 3 ) self . eqThermo . currentIndexChanged . connect ( self . stackedThermo . setCurrentIndex ) if element . _thermal is not None :              for eq in element . _thermal :                  widget = Widget_Conductivity_Data ( element , eq ) self . stackedThermo . addWidget ( widget ) self . eqThermo . addItem ( eq [ <str> ] )   else :              self . eqThermo . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) )  tab1 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab1 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_dielectric = QtWidgets . QGridLayout ( tab1 ) if element . _Dielectric != meos . MEoS . _Dielectric :              label = QtWidgets . QLabel ( element . _Dielectric . __doc__ ) label . setWordWrap ( True ) gridLayout_dielectric . addWidget ( label , 1 , 1 ) self . codigo_Dielectric = SimplePythonEditor ( ) self . codigo_Dielectric . setText ( inspect . getsource ( element . _Dielectric ) ) gridLayout_dielectric . addWidget ( self . codigo_Dielectric , 2 , 1 )  elif element . _dielectric :              label = QtWidgets . QLabel ( element . _Dielectric . __doc__ ) label . setWordWrap ( True ) gridLayout_dielectric . addWidget ( label , 1 , 1 ) self . Table_Dielectric = Tabla ( 1 , verticalHeader = True , filas = 5 , stretch = False , readOnly = True ) gridLayout_dielectric . addWidget ( self . Table_Dielectric , 2 , 1 ) i = 0 for key , valor in element . _dielectric . items ( ) :                  self . Table_Dielectric . setVerticalHeaderItem ( i , QtWidgets . QTableWidgetItem ( key ) ) self . Table_Dielectric . setItem ( 0 , i , QtWidgets . QTableWidgetItem ( str ( valor ) ) ) i += 1  self . Table_Dielectric . resizeColumnsToContents ( )  else :              gridLayout_dielectric . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_dielectric . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab2 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab2 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_surface = QtWidgets . QGridLayout ( tab2 ) if element . _Surface != meos . MEoS . _Surface :              label = QtWidgets . QLabel ( element . _Surface . __doc__ ) label . setWordWrap ( True ) gridLayout_surface . addWidget ( label , 1 , 1 ) self . codigo_Surface = SimplePythonEditor ( ) self . codigo_Surface . setText ( inspect . getsource ( element . _Surface ) ) gridLayout_surface . addWidget ( self . codigo_Surface , 2 , 1 )  elif element . _surface :              label = QtWidgets . QLabel ( element . _Surface . __doc__ ) label . setWordWrap ( True ) gridLayout_surface . addWidget ( label , 1 , 1 ) self . Table_Surface = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Surface . setColumn ( 0 , element . _surface [ <str> ] ) self . Table_Surface . setColumn ( 1 , element . _surface [ <str> ] ) gridLayout_surface . addWidget ( self . Table_Surface , 2 , 1 ) self . Table_Surface . resizeColumnsToContents ( )  else :              gridLayout_surface . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_surface . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab5 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab5 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_liquid_density = QtWidgets . QGridLayout ( tab5 ) if element . _Liquid_Density != meos . MEoS . _Liquid_Density :              label = QtWidgets . QLabel ( element . _Liquid_Density . __doc__ ) label . setWordWrap ( True ) gridLayout_liquid_density . addWidget ( label , 1 , 1 ) self . codigo_Liquid_Density = SimplePythonEditor ( ) self . codigo_Liquid_Density . setText ( inspect . getsource ( element . _Liquid_Density ) ) gridLayout_liquid_density . addWidget ( self . codigo_Liquid_Density , 2 , 1 )  elif element . _liquid_Density :              label = QtWidgets . QLabel ( element . _Liquid_Density . __doc__ ) label . setWordWrap ( True ) gridLayout_liquid_density . addWidget ( label , 1 , 1 ) self . Table_Liquid_Density = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Liquid_Density . setColumn ( 0 , element . _liquid_Density [ <str> ] ) self . Table_Liquid_Density . setColumn ( 1 , element . _liquid_Density [ <str> ] ) gridLayout_liquid_density . addWidget ( self . Table_Liquid_Density , 2 , 1 ) self . Table_Liquid_Density . resizeColumnsToContents ( )  else :              gridLayout_liquid_density . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_liquid_density . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab6 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab6 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_vapor_density = QtWidgets . QGridLayout ( tab6 ) if element . _Vapor_Density != meos . MEoS . _Vapor_Density :              label = QtWidgets . QLabel ( element . _Vapor_Density . __doc__ ) label . setWordWrap ( True ) gridLayout_vapor_density . addWidget ( label , 1 , 1 ) self . codigo_Vapor_Density = SimplePythonEditor ( ) self . codigo_Vapor_Density . setText ( inspect . getsource ( element . _Vapor_Density ) ) gridLayout_vapor_density . addWidget ( self . codigo_Vapor_Density , 2 , 1 )  elif element . _vapor_Density :              label = QtWidgets . QLabel ( element . _Vapor_Density . __doc__ ) label . setWordWrap ( True ) gridLayout_vapor_density . addWidget ( label , 1 , 1 ) self . Table_Vapor_Density = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Vapor_Density . setColumn ( 0 , element . _vapor_Density [ <str> ] ) self . Table_Vapor_Density . setColumn ( 1 , element . _vapor_Density [ <str> ] ) gridLayout_vapor_density . addWidget ( self . Table_Vapor_Density , 2 , 1 ) self . Table_Vapor_Density . resizeColumnsToContents ( )  else :              gridLayout_vapor_density . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_vapor_density . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab7 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab7 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_vapor_pressure = QtWidgets . QGridLayout ( tab7 ) if element . _Vapor_Pressure != meos . MEoS . _Vapor_Pressure :              label = QtWidgets . QLabel ( element . _Vapor_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout_vapor_pressure . addWidget ( label , 1 , 1 ) self . codigo_Vapor_Pressure = SimplePythonEditor ( ) self . codigo_Vapor_Pressure . setText ( inspect . getsource ( element . _Vapor_Pressure ) ) gridLayout_vapor_pressure . addWidget ( self . codigo_Vapor_Pressure , 2 , 1 )  elif element . _vapor_Pressure :              label = QtWidgets . QLabel ( element . _Vapor_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout_vapor_pressure . addWidget ( label , 1 , 1 ) self . Table_Vapor_Pressure = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Vapor_Pressure . setColumn ( 0 , element . _vapor_Pressure [ <str> ] ) self . Table_Vapor_Pressure . setColumn ( 1 , element . _vapor_Pressure [ <str> ] ) gridLayout_vapor_pressure . addWidget ( self . Table_Vapor_Pressure , 2 , 1 ) self . Table_Vapor_Pressure . resizeColumnsToContents ( )  else :              gridLayout_vapor_pressure . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_vapor_pressure . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab8 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab8 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_melting_pressure = QtWidgets . QGridLayout ( tab8 ) if element . _Melting_Pressure != meos . MEoS . _Melting_Pressure :              label = QtWidgets . QLabel ( element . _Melting_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout_melting_pressure . addWidget ( label , 1 , 1 ) self . codigo_Melting_Pressure = SimplePythonEditor ( ) self . codigo_Melting_Pressure . setText ( inspect . getsource ( element . _Melting_Pressure ) ) gridLayout_melting_pressure . addWidget ( self . codigo_Melting_Pressure , 2 , 1 )  elif element . _melting :              label = QtWidgets . QLabel ( element . _Melting_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout_melting_pressure . addWidget ( label , 1 , 1 ) self . Table_Melting_Pressure = Tabla ( 6 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Melting_Pressure . setColumn ( 0 , element . _melting [ <str> ] ) self . Table_Melting_Pressure . setColumn ( 1 , element . _melting [ <str> ] ) self . Table_Melting_Pressure . setColumn ( 2 , element . _melting [ <str> ] ) self . Table_Melting_Pressure . setColumn ( 3 , element . _melting [ <str> ] ) self . Table_Melting_Pressure . setColumn ( 4 , element . _melting [ <str> ] ) self . Table_Melting_Pressure . setColumn ( 5 , element . _melting [ <str> ] ) gridLayout_melting_pressure . addWidget ( self . Table_Melting_Pressure , 2 , 1 ) self . Table_Melting_Pressure . resizeColumnsToContents ( )  else :              gridLayout_melting_pressure . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_melting_pressure . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab9 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab9 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout__sublimation_pressure = QtWidgets . QGridLayout ( tab9 ) if element . _Sublimation_Pressure != meos . MEoS . _Sublimation_Pressure :              label = QtWidgets . QLabel ( element . _Sublimation_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout__sublimation_pressure . addWidget ( label , 1 , 1 ) self . codigo_Sublimation_Pressure = SimplePythonEditor ( ) self . codigo_Sublimation_Pressure . setText ( inspect . getsource ( element . _Sublimation_Pressure ) ) gridLayout__sublimation_pressure . addWidget ( self . codigo_Sublimation_Pressure , 2 , 1 )  elif element . _sublimation :              label = QtWidgets . QLabel ( element . _Melting_Pressure . __doc__ ) label . setWordWrap ( True ) gridLayout__sublimation_pressure . addWidget ( label , 1 , 1 ) self . Table_Sublimation_Pressure = Tabla ( 6 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> ] , verticalHeader = True , stretch = False , readOnly = True ) self . Table_Sublimation_Pressure . setColumn ( 0 , element . _sublimation [ <str> ] ) self . Table_Sublimation_Pressure . setColumn ( 1 , element . _sublimation [ <str> ] ) self . Table_Sublimation_Pressure . setColumn ( 2 , element . _sublimation [ <str> ] ) self . Table_Sublimation_Pressure . setColumn ( 3 , element . _sublimation [ <str> ] ) self . Table_Sublimation_Pressure . setColumn ( 4 , element . _sublimation [ <str> ] ) self . Table_Sublimation_Pressure . setColumn ( 5 , element . _sublimation [ <str> ] ) gridLayout__sublimation_pressure . addWidget ( self . Table_Sublimation_Pressure , 2 , 1 ) self . Table_Sublimation_Pressure . resizeColumnsToContents ( )  else :              gridLayout__sublimation_pressure . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout__sublimation_pressure . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  tab10 = QtWidgets . QWidget ( ) tabWidget . addTab ( tab10 , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_PengRobinson = QtWidgets . QGridLayout ( tab10 ) if element . _PR :              label = QtWidgets . QLabel ( element . _PengRobinson . __doc__ ) label . setWordWrap ( True ) gridLayout_PengRobinson . addWidget ( label , 1 , 1 , 1 , 3 ) gridLayout_PengRobinson . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 2 , 1 , 1 , 3 ) gridLayout_PengRobinson . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 1 ) self . PR = Entrada_con_unidades ( float , decimales = 6 , value = element . _PR , readOnly = True ) gridLayout_PengRobinson . addWidget ( self . PR , 3 , 2 ) gridLayout_PengRobinson . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 4 , 1 , 1 , 3 )  else :              gridLayout_PengRobinson . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) gridLayout_PengRobinson . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 2 , 1 )  self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) self . buttonBox . clicked . connect ( self . reject ) gridLayout . addWidget ( self . buttonBox , 2 , 1 )   class Widget_Viscosity_Data ( QtWidgets . QWidget ) :      def __init__ ( self , element , eq , parent = None ) :          super ( Widget_Viscosity_Data , self ) . __init__ ( parent ) gridLayout = QtWidgets . QGridLayout ( self ) if eq [ <str> ] == 0 :              txt = element . __getattribute__ ( element , eq [ <str> ] ) . __doc__  else :              txt = <str> . join ( ( eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] ) )  ref = QtWidgets . QLabel ( txt ) ref . setWordWrap ( True ) gridLayout . addWidget ( ref , 1 , 1 , 1 , 3 ) if eq [ <str> ] == 0 :              self . codigo_Viscosity = SimplePythonEditor ( ) code = <str> for method in eq . get ( <str> , ( ) ) :                  code += inspect . getsource ( method ) code += os . linesep  code += inspect . getsource ( element . __getattribute__ ( element , eq [ <str> ] ) ) self . codigo_Viscosity . setText ( code ) gridLayout . addWidget ( self . codigo_Viscosity , 2 , 1 , 1 , 3 )  elif eq [ <str> ] == 1 :              gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . ek = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . ek , 4 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 1 ) self . sigma = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . sigma , 5 , 2 ) tab = QtWidgets . QTabWidget ( ) gridLayout . addWidget ( tab , 6 , 1 , 1 , 3 ) self . Tabla_Collision = Tabla ( 1 , horizontalHeader = [ <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_Collision . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Collision . resizeColumnsToContents ( )  else :                  self . Tabla_Collision . setDisabled ( True )  tab . addTab ( self . Tabla_Collision , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Tabla_Virial = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_Virial . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Virial . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Virial . resizeColumnsToContents ( )  else :                  self . Tabla_Virial . setDisabled ( True )  tab . addTab ( self . Tabla_Virial , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Tabla_Packed = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_Packed . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Packed . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Packed . resizeColumnsToContents ( )  else :                  self . Tabla_Packed . setDisabled ( True )  tab . addTab ( self . Tabla_Packed , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Tabla_Visco1 = Tabla ( 5 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_Visco1 . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Visco1 . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Visco1 . setColumn ( 2 , eq [ <str> ] ) self . Tabla_Visco1 . setColumn ( 3 , eq [ <str> ] ) self . Tabla_Visco1 . setColumn ( 4 , eq [ <str> ] ) self . Tabla_Visco1 . resizeColumnsToContents ( )  else :                  self . Tabla_Visco1 . setDisabled ( True )  tab . addTab ( self . Tabla_Visco1 , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Tabla_numerator = Tabla ( 5 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_numerator . setColumn ( 0 , eq [ <str> ] ) self . Tabla_numerator . setColumn ( 1 , eq [ <str> ] ) self . Tabla_numerator . setColumn ( 2 , eq [ <str> ] ) self . Tabla_numerator . setColumn ( 3 , eq [ <str> ] ) self . Tabla_numerator . setColumn ( 4 , eq [ <str> ] ) self . Tabla_numerator . resizeColumnsToContents ( )  else :                  self . Tabla_numerator . setDisabled ( True )  tab . addTab ( self . Tabla_numerator , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Tabla_denominator = Tabla ( 5 , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_denominator . setColumn ( 0 , eq [ <str> ] ) self . Tabla_denominator . setColumn ( 1 , eq [ <str> ] ) self . Tabla_denominator . setColumn ( 2 , eq [ <str> ] ) self . Tabla_denominator . setColumn ( 3 , eq [ <str> ] ) self . Tabla_denominator . setColumn ( 4 , eq [ <str> ] ) self . Tabla_denominator . resizeColumnsToContents ( )  else :                  self . Tabla_denominator . setDisabled ( True )  tab . addTab ( self . Tabla_denominator , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 3 )  elif eq [ <str> ] == 2 :              gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . ek = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . ek , 4 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 1 ) self . sigma = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . sigma , 5 , 2 ) self . Tabla_Visco2 = Tabla ( 3 , horizontalHeader = [ <str> , <str> , <str> ] , stretch = False , readOnly = True ) if <str> in eq :                  self . Tabla_Visco2 . setColumn ( 0 , eq [ <str> ] )  self . Tabla_Visco2 . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Visco2 . setColumn ( 2 , eq [ <str> ] ) self . Tabla_Visco2 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Visco2 , 6 , 1 , 1 , 3 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 3 )  elif eq [ <str> ] == 3 :              self . Tabla_Visco3 = Tabla ( 8 , stretch = False , readOnly = True , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) if <str> in eq :                  self . Tabla_Visco3 . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Visco3 . setColumn ( 1 , eq [ <str> ] )  if <str> in eq :                  self . Tabla_Visco3 . setColumn ( 2 , eq [ <str> ] ) self . Tabla_Visco3 . setColumn ( 3 , eq [ <str> ] ) self . Tabla_Visco3 . setColumn ( 4 , eq [ <str> ] )  if <str> in eq :                  self . Tabla_Visco3 . setColumn ( 5 , eq [ <str> ] ) self . Tabla_Visco3 . setColumn ( 6 , eq [ <str> ] ) self . Tabla_Visco3 . setColumn ( 7 , eq [ <str> ] )  self . Tabla_Visco3 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Visco3 , 4 , 1 , 1 , 3 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 3 )  elif eq [ <str> ] == 4 :              gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . ek = Entrada_con_unidades ( float , value = eq . get ( <str> , None ) , readOnly = True ) gridLayout . addWidget ( self . ek , 4 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 1 ) self . sigma = Entrada_con_unidades ( float , value = eq . get ( <str> , None ) , readOnly = True ) gridLayout . addWidget ( self . sigma , 5 , 2 ) self . Tabla_Visco4 = Tabla ( 7 , stretch = False , readOnly = True , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) format = { <str> : 1 , <str> : 10 } self . Tabla_Visco4 . setColumn ( 0 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . setColumn ( 1 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . setColumn ( 2 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . setColumn ( 3 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . setColumn ( 4 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . setColumn ( 5 , eq [ <str> ] , ** format ) self . Tabla_Visco4 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Visco4 , 6 , 1 , 1 , 3 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 3 )  elif eq [ <str> ] == 5 :              gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . w = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . w , 4 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 5 , 1 ) self . mur = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . mur , 5 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 6 , 1 ) self . k = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . k , 6 , 2 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 3 )    class Widget_Conductivity_Data ( QtWidgets . QWidget ) :      def __init__ ( self , element , eq , parent = None ) :          super ( Widget_Conductivity_Data , self ) . __init__ ( parent ) gridLayout = QtWidgets . QGridLayout ( self ) if eq [ <str> ] == 0 :              txt = element . __getattribute__ ( element , eq [ <str> ] ) . __doc__  else :              txt = <str> . join ( ( eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] , eq [ <str> ] [ <str> ] ) )  ref = QtWidgets . QLabel ( txt ) ref . setWordWrap ( True ) gridLayout . addWidget ( ref , 1 , 1 , 1 , 3 ) if eq [ <str> ] == 0 :              self . code = SimplePythonEditor ( ) code = <str> for method in eq . get ( <str> , ( ) ) :                  code += inspect . getsource ( method ) code += os . linesep  code += inspect . getsource ( element . __getattribute__ ( element , eq [ <str> ] ) ) self . code . setText ( code ) gridLayout . addWidget ( self . code , 2 , 1 , 1 , 3 )  elif eq [ <str> ] == 1 :              self . Tabla_Therm1 = Tabla ( 11 , stretch = False , readOnly = True , horizontalHeader = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) if <str> in eq :                  self . Tabla_Therm1 . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 1 , eq [ <str> ] )  if <str> in eq :                  self . Tabla_Therm1 . setColumn ( 2 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 3 , eq [ <str> ] )  if <str> in eq :                  self . Tabla_Therm1 . setColumn ( 4 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 5 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 6 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 7 , eq [ <str> ] )  if <str> in eq :                  self . Tabla_Therm1 . setColumn ( 8 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 9 , eq [ <str> ] ) self . Tabla_Therm1 . setColumn ( 10 , eq [ <str> ] )  self . Tabla_Therm1 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Therm1 , 3 , 1 , 1 , 3 )  elif eq [ <str> ] == 2 :              self . Tabla_Therm2 = Tabla ( 2 , horizontalHeader = [ <str> , <str> ] , stretch = False , readOnly = True ) self . Tabla_Therm2 . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Therm2 . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Therm2 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Therm2 , 3 , 1 , 1 , 3 )  elif eq [ <str> ] == 3 :              self . Tabla_Therm3 = Tabla ( 3 , horizontalHeader = [ <str> , <str> , <str> ] , stretch = False , readOnly = True ) self . Tabla_Therm3 . setColumn ( 0 , eq [ <str> ] ) self . Tabla_Therm3 . setColumn ( 1 , eq [ <str> ] ) self . Tabla_Therm3 . setColumn ( 2 , eq [ <str> ] ) self . Tabla_Therm3 . resizeColumnsToContents ( ) gridLayout . addWidget ( self . Tabla_Therm3 , 3 , 1 , 1 , 3 ) parameter = QtWidgets . QWidget ( ) gridLayout . addWidget ( parameter , 4 , 1 , 1 , 3 ) lyt = QtWidgets . QGridLayout ( parameter ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 1 , 1 ) self . ek = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . ek , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 2 , 1 ) self . sigma = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . sigma , 2 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 1 ) self . Nchapman = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . Nchapman , 3 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . tchapman = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . tchapman , 4 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 1 , 4 ) self . rhoc = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . rhoc , 1 , 5 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 2 , 4 ) self . ff = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . ff , 2 , 5 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 4 ) self . rm = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) lyt . addWidget ( self . rm , 3 , 5 )  if <str> in eq and eq [ <str> ] :              gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 5 , 3 ) gridLayout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 1 , 1 , 2 ) if eq [ <str> ] == 3 :                  gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 7 , 1 ) self . gnu = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . gnu , 7 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 8 , 1 ) self . gamma = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . gamma , 8 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 9 , 1 ) self . R0 = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . R0 , 9 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 10 , 1 ) self . Xio = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . Xio , 10 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 11 , 1 ) self . gam0 = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . gam0 , 11 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 12 , 1 ) self . qd = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . qd , 12 , 2 )  elif eq [ <str> ] == 4 :                  gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 7 , 1 ) self . gamma = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . gamma , 7 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 8 , 1 ) self . v = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . v , 8 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 9 , 1 ) self . alfa = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . alfa , 9 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 10 , 1 ) self . beta = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . beta , 10 , 2 ) gridLayout . addWidget ( QtWidgets . QLabel ( <str> ) , 11 , 1 ) self . Xio = Entrada_con_unidades ( float , value = eq [ <str> ] , readOnly = True ) gridLayout . addWidget ( self . Xio , 11 , 2 )  gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 15 , 3 )    class Ui_Properties ( QtWidgets . QDialog ) :      _default = [ 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] + [ 0 ] * ( N_PROP - 9 ) def __init__ ( self , config = None , parent = None ) :          super ( Ui_Properties , self ) . __init__ ( parent ) if config and config . has_option ( <str> , <str> ) :              values = config . get ( <str> , <str> ) if isinstance ( values , str ) :                  values = eval ( values )  fase = config . getboolean ( <str> , <str> ) self . order = config . get ( <str> , <str> ) if isinstance ( self . order , str ) :                  self . order = eval ( self . order )   else :              values = self . _default fase = False self . order = list ( range ( N_PROP ) )  self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . prop = QtWidgets . QTableWidget ( len ( ThermoAdvanced . properties ( ) ) , 2 ) self . prop . verticalHeader ( ) . hide ( ) self . prop . horizontalHeader ( ) . hide ( ) self . prop . horizontalHeader ( ) . setStretchLastSection ( True ) self . prop . setGridStyle ( QtCore . Qt . NoPen ) self . prop . setColumnWidth ( 0 , 18 ) self . prop . setSelectionBehavior ( QtWidgets . QAbstractItemView . SelectRows ) self . prop . setEditTriggers ( QtWidgets . QAbstractItemView . NoEditTriggers ) self . prop . setItemDelegateForColumn ( 0 , CheckEditor ( self ) ) for i , value in enumerate ( values ) :              if value == 1 :                  val = <str>  else :                  val = <str>  self . prop . setItem ( i , 0 , QtWidgets . QTableWidgetItem ( val ) ) name = ThermoAdvanced . propertiesName ( ) [ self . order [ i ] ] self . prop . setItem ( i , 1 , QtWidgets . QTableWidgetItem ( name ) ) self . prop . setRowHeight ( i , 20 ) self . prop . openPersistentEditor ( self . prop . item ( i , 0 ) )  self . prop . currentCellChanged . connect ( self . comprobarBotones ) self . prop . cellDoubleClicked . connect ( self . toggleCheck ) layout . addWidget ( self . prop , 1 , 1 , 6 , 1 ) self . ButtonArriba = QtWidgets . QToolButton ( ) self . ButtonArriba . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) self . ButtonArriba . clicked . connect ( self . Up ) layout . addWidget ( self . ButtonArriba , 3 , 2 , 1 , 1 ) self . ButtonAbajo = QtWidgets . QToolButton ( ) self . ButtonAbajo . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) ) self . ButtonAbajo . clicked . connect ( self . Down ) layout . addWidget ( self . ButtonAbajo , 4 , 2 , 1 , 1 ) self . checkFase = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkFase . setChecked ( fase ) layout . addWidget ( self . checkFase , 7 , 1 , 1 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Reset | QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . addButton ( QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QDialogButtonBox . ResetRole ) self . buttonBox . addButton ( QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QDialogButtonBox . ResetRole ) self . btYes = QtWidgets . QPushButton self . buttonBox . clicked . connect ( self . buttonClicked ) layout . addWidget ( self . buttonBox , 8 , 1 , 1 , 2 )  def toggleCheck ( self , fila , columna ) :          txt = self . prop . item ( fila , 0 ) . text ( ) if txt == <str> :              newtxt = <str>  else :              newtxt = <str>  self . prop . item ( fila , 0 ) . setText ( newtxt )  def Down ( self ) :          i = self . prop . currentRow ( ) txt = self . prop . item ( i , 0 ) . text ( ) self . prop . item ( i , 0 ) . setText ( self . prop . item ( i + 1 , 0 ) . text ( ) ) self . prop . item ( i + 1 , 0 ) . setText ( txt ) item = self . prop . takeItem ( i , 1 ) self . prop . setItem ( i , 1 , self . prop . takeItem ( i + 1 , 1 ) ) self . prop . setItem ( i + 1 , 1 , item ) self . prop . setCurrentCell ( i + 1 , 0 ) self . order [ i ] , self . order [ i + 1 ] = self . order [ i + 1 ] , self . order [ i ]  def Up ( self ) :          i = self . prop . currentRow ( ) txt = self . prop . item ( i , 0 ) . text ( ) self . prop . item ( i , 0 ) . setText ( self . prop . item ( i - 1 , 0 ) . text ( ) ) self . prop . item ( i - 1 , 0 ) . setText ( txt ) item = self . prop . takeItem ( i , 1 ) self . prop . setItem ( i , 1 , self . prop . takeItem ( i - 1 , 1 ) ) self . prop . setItem ( i - 1 , 1 , item ) self . prop . setCurrentCell ( i - 1 , 0 ) self . order [ i ] , self . order [ i - 1 ] = self . order [ i - 1 ] , self . order [ i ]  def buttonClicked ( self , boton ) :          if self . buttonBox . buttonRole ( boton ) == QtWidgets . QDialogButtonBox . AcceptRole :              self . accept ( )  elif self . buttonBox . buttonRole ( boton ) == QtWidgets . QDialogButtonBox . RejectRole :              self . reject ( )  else :              if boton == self . buttonBox . button ( QtWidgets . QDialogButtonBox . Reset ) :                  values = self . _default  elif boton . text ( ) == QtWidgets . QApplication . translate ( <str> , <str> ) :                  values = [ 0 ] * N_PROP  else :                  values = [ 1 ] * N_PROP  for i , propiedad in enumerate ( values ) :                  if propiedad == 1 :                      val = <str>  else :                      val = <str>  self . prop . item ( i , 0 ) . setText ( val )    def properties ( self ) :          value = [ ] for i in range ( self . prop . rowCount ( ) ) :              value . append ( self . prop . cellWidget ( i , 0 ) . isChecked ( ) )  return value  def comprobarBotones ( self , fila ) :          self . ButtonArriba . setEnabled ( fila >= 1 ) self . ButtonAbajo . setEnabled ( fila < self . prop . rowCount ( ) - 1 )   def createTabla ( config , title , fluidos = None , parent = None ) :      propiedades , keys , units = get_propiedades ( config ) for i , unit in enumerate ( units ) :          sufx = unit . text ( ) if not sufx :              sufx = <str>  propiedades [ i ] = propiedades [ i ] + os . linesep + sufx  if config . getboolean ( <str> , <str> ) :          for i in range ( len ( propiedades ) - 1 , - 1 , - 1 ) :              if keys [ i ] in ThermoAdvanced . propertiesPhase ( ) :                  txt = [ propiedades [ i ] ] prefix = QtWidgets . QApplication . translate ( <str> , <str> ) txt . append ( prefix + os . linesep + propiedades [ i ] ) prefix = QtWidgets . QApplication . translate ( <str> , <str> ) txt . append ( prefix + os . linesep + propiedades [ i ] ) propiedades [ i : i + 1 ] = txt units [ i : i + 1 ] = [ units [ i ] ] * 3    kw = { } kw [ <str> ] = propiedades kw [ <str> ] = False kw [ <str> ] = units kw [ <str> ] = parent if fluidos :          tabla = TablaMEoS ( len ( propiedades ) , readOnly = True , ** kw ) data = [ ] for fluido in fluidos :              fila = _getData ( fluido , keys , config . getboolean ( <str> , <str> ) ) data . append ( fila )  tabla . setData ( data )  else :          columnInput = [ ] for key in keys :              if key in [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] :                  columnInput . append ( False )  else :                  columnInput . append ( True )  if config . getboolean ( <str> , <str> ) and key in ThermoAdvanced . propertiesPhase ( ) :                  columnInput . append ( True ) columnInput . append ( True )   kw [ <str> ] = columnInput if config . getboolean ( <str> , <str> ) :              for i in range ( len ( keys ) - 1 , - 1 , - 1 ) :                  if keys [ i ] in ThermoAdvanced . propertiesPhase ( ) :                      keys [ i : i + 1 ] = [ keys [ i ] , <str> , <str> ]    kw [ <str> ] = keys tabla = TablaMEoS ( len ( propiedades ) , filas = 1 , ** kw )  prefix = QtWidgets . QApplication . translate ( <str> , <str> ) tabla . setWindowTitle ( prefix + <str> + title ) tabla . resizeColumnsToContents ( ) return tabla  def get_propiedades ( config ) :      booleanos = config . get ( <str> , <str> ) order = config . get ( <str> , <str> ) if isinstance ( booleanos , str ) :          booleanos = eval ( booleanos )  if isinstance ( order , str ) :          order = eval ( order )  propiedades = [ ] keys = [ ] units = [ ] for indice , bool in zip ( order , booleanos ) :          if bool :              name , key , unit = ThermoAdvanced . properties ( ) [ indice ] propiedades . append ( name ) keys . append ( key ) units . append ( unit )   return propiedades , keys , units  def _getData ( fluid , keys , phase = True , unit = None , table = True ) :      if table :          undef = QtWidgets . QApplication . translate ( <str> , <str> )  else :          undef = None  fila = [ ] for i , key in enumerate ( keys ) :          if not key :              continue  p = fluid . __getattribute__ ( key ) if p is None :              txt = undef  else :              if unit and unit [ i ] :                  txt = p . __getattribute__ ( unit [ i ] )  else :                  txt = p . config ( )   fila . append ( txt ) if phase and key in ThermoAdvanced . propertiesPhase ( ) :              p = fluid . Liquido . __getattribute__ ( key ) if p is None :                  txt = undef  elif isinstance ( p , unidades . unidad ) :                  if unit and unit [ i ] :                      txt = p . __getattribute__ ( unit [ i ] )  else :                      txt = p . config ( )   else :                  txt = p  fila . append ( txt ) p = fluid . Gas . __getattribute__ ( key ) if p is None :                  txt = undef  elif isinstance ( p , unidades . unidad ) :                  if unit and unit [ i ] :                      txt = p . __getattribute__ ( unit [ i ] )  else :                      txt = p . config ( )   else :                  txt = p  fila . append ( txt )   return fila  class TablaMEoS ( Tabla ) :      Plot = None icon = os . path . join ( config . IMAGE_PATH , <str> , <str> ) def __init__ ( self , * args , ** kwargs ) :          self . parent = kwargs . get ( <str> , None ) if <str> in kwargs :              self . keys = kwargs [ <str> ] del kwargs [ <str> ]  self . units = kwargs [ <str> ] del kwargs [ <str> ] if <str> in kwargs :              self . orderUnit = kwargs [ <str> ] del kwargs [ <str> ]  else :              self . orderUnit = [ ] for unit in self . units :                  if unit == unidades . Dimensionless :                      self . orderUnit . append ( 0 )  else :                      conf = self . parent . currentConfig self . orderUnit . append ( conf . getint ( <str> , unit . __name__ ) )    if <str> in kwargs :              self . format = kwargs [ <str> ] del kwargs [ <str> ]  else :              self . format = [ { <str> : 1 , <str> : 6 , <str> : False } ] * args [ 0 ]  super ( TablaMEoS , self ) . __init__ ( * args , ** kwargs ) self . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( self . icon ) ) ) self . horizontalHeader ( ) . setContextMenuPolicy ( QtCore . Qt . CustomContextMenu ) self . horizontalHeader ( ) . customContextMenuRequested . connect ( self . hHeaderClicked ) self . verticalHeader ( ) . setContextMenuPolicy ( QtCore . Qt . CustomContextMenu ) self . verticalHeader ( ) . customContextMenuRequested . connect ( self . vHeaderClicked ) self . itemSelectionChanged . connect ( self . selectPoint ) self . data = [ ] if not self . readOnly :              self . cellChanged . connect ( self . calculatePoint )   def _getPlot ( self ) :          if not self . Plot :              windows = self . parent . centralwidget . currentWidget ( ) . subWindowList ( ) for window in windows :                  widget = window . widget ( ) if isinstance ( widget , PlotMEoS ) :                      self . Plot = widget break    return self . Plot  def hHeaderClicked ( self , event ) :          col = self . horizontalHeader ( ) . logicalIndexAt ( event ) unit = self . units [ col ] dialog = NumericFactor ( self . format [ col ] , unit , self . orderUnit [ col ] ) if dialog . exec_ ( ) :              if unit != unidades . Dimensionless and dialog . unit . currentIndex ( ) != self . orderUnit [ col ] :                  for i , fila in enumerate ( self . data ) :                      conf = unit . __units__ [ self . orderUnit [ col ] ] key = unit . __units__ [ dialog . unit . currentIndex ( ) ] value = unit ( fila [ col ] , conf ) . __getattribute__ ( key ) self . data [ i ] [ col ] = value  self . orderUnit [ col ] = dialog . unit . currentIndex ( ) txt = self . horizontalHeaderItem ( col ) . text ( ) . split ( os . linesep ) [ 0 ] txt += os . linesep + unit . __text__ [ dialog . unit . currentIndex ( ) ] self . setHorizontalHeaderItem ( col , QtWidgets . QTableWidgetItem ( txt ) )  self . format [ col ] = dialog . args ( ) self . setStr ( ) self . resizeColumnToContents ( col )  range = QtWidgets . QTableWidgetSelectionRange ( 0 , col , self . rowCount ( ) - 1 , col ) self . setRangeSelected ( range , True )  def vHeaderClicked ( self , position ) :          row = self . verticalHeader ( ) . logicalIndexAt ( position ) rows = [ ] for item in self . selectedItems ( ) :              if item . row ( ) not in rows :                  rows . append ( item . row ( ) )   rows . sort ( reverse = True ) actionCopy = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . copy , shortcut = QtGui . QKeySequence . Copy , icon = os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) , parent = self ) if not self . selectedItems ( ) :              actionCopy . setEnabled ( False )  actionDelete = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = os . environ [ <str> ] + <str> , slot = partial ( self . delete , rows ) , parent = self ) if not rows :              actionDelete . setEnabled ( False )  actionInsert = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = os . environ [ <str> ] + <str> , slot = partial ( self . add , row ) , parent = self ) menu = QtWidgets . QMenu ( ) menu . addAction ( actionCopy ) menu . addSeparator ( ) menu . addAction ( actionDelete ) menu . addAction ( actionInsert ) menu . exec_ ( self . mapToGlobal ( position ) )  def delete ( self , rows ) :          self . parent . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) for row in rows :              self . removeRow ( row ) delete ( self . data , row )  for row in range ( self . rowCount ( ) ) :              self . setVHeader ( row )  plot = self . _getPlot ( ) if plot :              data = plot . _getData ( ) pref = QtWidgets . QApplication . translate ( <str> , <str> ) title = self . windowTitle ( ) . split ( pref ) [ 1 ] for row in rows :                  if title == QtWidgets . QApplication . translate ( <str> , <str> ) :                      for x in ThermoAdvanced . propertiesKey ( ) :                          del data [ <str> ] [ x ] [ row ]   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) :                      for x in ThermoAdvanced . propertiesKey ( ) :                          del data [ <str> ] [ x ] [ row ]   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) or title == QtWidgets . QApplication . translate ( <str> , <str> ) :                      for x in ThermoAdvanced . propertiesKey ( ) :                          del data [ <str> ] [ x ] [ row ]   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) :                      for x in ThermoAdvanced . propertiesKey ( ) :                          del data [ <str> ] [ x ] [ row ]   else :                      units = { <str> : unidades . Pressure , <str> : unidades . Temperature , <str> : unidades . Enthalpy , <str> : unidades . Enthalpy , <str> : unidades . SpecificVolume , <str> : unidades . Density } var = str ( title . split ( <str> ) [ 0 ] ) txt = title . split ( <str> ) [ 1 ] unit = units [ var ] value = float ( txt . split ( <str> ) [ 0 ] ) stdValue = unit ( value , <str> ) for x in ThermoAdvanced . propertiesKey ( ) :                          del data [ var ] [ stdValue ] [ x ] [ row ]    plot . _saveData ( data ) for line in plot . plot . ax . lines :                  if str ( line . get_label ( ) ) == str ( title ) :                      xdata = line . _x ydata = line . _y for row in rows :                          xdata = delete ( xdata , row ) ydata = delete ( ydata , row )  line . set_xdata ( xdata ) line . set_ydata ( ydata ) plot . plot . draw ( ) break    self . parent . statusbar . clearMessage ( )  def add ( self , row ) :          pref = QtWidgets . QApplication . translate ( <str> , <str> ) if pref in self . windowTitle ( ) :              title = self . windowTitle ( ) . split ( pref ) [ 1 ] melting = title == QtWidgets . QApplication . translate ( <str> , <str> )  else :              melting = False  dlg = AddPoint ( self . Point . _new ( ) , melting , self . parent ) if dlg . exec_ ( ) :              self . blockSignals ( True ) if dlg . checkBelow . isChecked ( ) :                  row += 1  plot = self . Plot if plot is None :                  plot = self . _getPlot ( )  if plot is None :                  units = [ ] for ui , order in zip ( self . units , self . orderUnit ) :                      if ui is unidades . Dimensionless :                          units . append ( <str> )  else :                          units . append ( ui . __units__ [ order ] )   phase = self . parent . currentConfig . getboolean ( <str> , <str> ) datatoTable = _getData ( dlg . fluid , self . keys , phase , units )  else :                  datatoTable = [ ] datatoTable . append ( dlg . fluid . __getattribute__ ( plot . x ) . config ( ) ) datatoTable . append ( dlg . fluid . __getattribute__ ( plot . y ) . config ( ) )  self . addRow ( index = row ) self . setRow ( row , datatoTable ) for row in range ( self . rowCount ( ) ) :                  self . setVHeader ( row )  if plot is None :                  return  data = plot . _getData ( ) if title == QtWidgets . QApplication . translate ( <str> , <str> ) :                  for x in ThermoAdvanced . propertiesKey ( ) :                      data [ <str> ] [ x ] . insert ( row , dlg . fluid . __getattribute__ ( x ) )   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) :                  for x in ThermoAdvanced . propertiesKey ( ) :                      data [ <str> ] . insert ( row , dlg . fluid . __getattribute__ ( x ) )   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) or title == QtWidgets . QApplication . translate ( <str> , <str> ) :                  for x in ThermoAdvanced . propertiesKey ( ) :                      data [ <str> ] . insert ( row , dlg . fluid . __getattribute__ ( x ) )   elif title == QtWidgets . QApplication . translate ( <str> , <str> ) :                  for x in ThermoAdvanced . propertiesKey ( ) :                      data [ <str> ] . insert ( row , dlg . fluid . __getattribute__ ( x ) )   else :                  units = { <str> : unidades . Pressure , <str> : unidades . Temperature , <str> : unidades . Enthalpy , <str> : unidades . Enthalpy , <str> : unidades . SpecificVolume , <str> : unidades . Density } var = str ( title . split ( <str> ) [ 0 ] ) txt = title . split ( <str> ) [ 1 ] unit = units [ var ] value = float ( txt . split ( <str> ) [ 0 ] ) stdValue = unit ( value , <str> ) for x in ThermoAdvanced . propertiesKey ( ) :                      data [ var ] [ stdValue ] [ x ] . insert ( row , dlg . fluid . __getattribute__ ( x ) )   plot . _saveData ( data ) for line in plot . plot . ax . lines :                  if str ( line . get_label ( ) ) == str ( title ) :                      xdata = insert ( line . _x , row , datatoTable [ 0 ] ) ydata = insert ( line . _y , row , datatoTable [ 1 ] ) line . set_xdata ( xdata ) line . set_ydata ( ydata ) plot . plot . draw ( ) break   self . blockSignals ( False )   def selectPoint ( self ) :          plot = self . _getPlot ( ) if plot :              for i , line in enumerate ( plot . plot . ax . lines ) :                  if line . get_label ( ) == QtWidgets . QApplication . translate ( <str> , <str> ) :                      del line del plot . plot . ax . lines [ i ]   x = [ ] y = [ ] for item in self . selectedItems ( ) :                  if item . column ( ) :                      y . append ( float ( item . text ( ) ) )  else :                      x . append ( float ( item . text ( ) ) )   label = QtWidgets . QApplication . translate ( <str> , <str> ) plot . plot . ax . plot ( x , y , <str> , label = label ) plot . plot . draw ( )   def calculatePoint ( self , row , column ) :          txt = self . item ( row , column ) . text ( ) if not txt :              return  key = self . keys [ column ] unit = self . units [ column ] if unit is unidades . Dimensionless :              value = float ( self . item ( row , column ) . text ( ) )  else :              data = float ( self . item ( row , column ) . text ( ) ) value = unit ( data , unit . __units__ [ self . orderUnit [ column ] ] )  self . Point ( ** { key : value } ) if self . Point . status :              units = [ ] for ui , order in zip ( self . units , self . orderUnit ) :                  if ui is unidades . Dimensionless :                      units . append ( <str> )  else :                      units . append ( ui . __units__ [ order ] )   phase = self . parent . currentConfig . getboolean ( <str> , <str> ) data = _getData ( self . Point , self . keys , phase , units ) self . setRow ( row , data ) self . Point = self . Point . _new ( ) self . addRow ( ) self . setCurrentCell ( row + 1 , column )   def setData ( self , data ) :          if self . readOnly :              self . data = data self . setStr ( )  else :              for i , row in enumerate ( data ) :                  self . setRow ( i , row )   self . resizeColumnsToContents ( )  def setStr ( self ) :          for fila , array in enumerate ( self . data ) :              if fila >= self . rowCount ( ) :                  self . addRow ( )  for columna , data in enumerate ( array ) :                  if isinstance ( data , str ) :                      txt = data  else :                      txt = representacion ( data , ** self . format [ columna ] )  self . setValue ( fila , columna , txt )    def setRow ( self , row , data ) :          self . blockSignals ( True ) self . data . insert ( row , data ) for column , data in enumerate ( data ) :              if isinstance ( data , str ) :                  txt = data  else :                  txt = representacion ( data , ** self . format [ column ] )  self . setValue ( row , column , txt )  self . resizeColumnsToContents ( ) if not self . readOnly :              flags = QtCore . Qt . ItemIsEnabled | QtCore . Qt . ItemIsSelectable color = self . parent . Preferences . get ( <str> , <str> ) for i , bool in enumerate ( self . columnReadOnly ) :                  if not bool :                      self . item ( row , i ) . setFlags ( flags ) self . item ( row , i ) . setBackground ( QtGui . QColor ( color ) )    self . blockSignals ( False )  def contextMenuEvent ( self , event ) :          menu = QtWidgets . QMenu ( ) actionCopy = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . copy , event ) , shortcut = QtGui . QKeySequence . Copy , icon = os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) , parent = self ) export = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . exportCSV , icon = os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) menu . addAction ( actionCopy ) menu . addSeparator ( ) menu . addAction ( export ) menu . exec_ ( event . globalPos ( ) )  def copy ( self , event = None ) :          txt = [ w . text ( ) for w in self . selectedItems ( ) ] QtWidgets . QApplication . clipboard ( ) . setText ( <str> . join ( txt ) )  def exportCSV ( self ) :          if self . parent . currentFilename :              dir = os . path . dirname ( str ( self . parent . currentFilename ) )  else :              dir = <str>  pat = [ ] pat . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) if os . environ [ <str> ] == <str> :              pat . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  if os . environ [ <str> ] == <str> :              pat . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  if os . environ [ <str> ] == <str> :              pat . append ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> )  patron = <str> . join ( pat ) fname , ext = QtWidgets . QFileDialog . getSaveFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , dir , patron ) if fname and ext :              ext = ext . split ( <str> ) [ - 1 ] [ : - 1 ] exportTable ( self . data , fname , ext , self . horizontalHeaderLabel )   def writeToJSON ( self , data ) :          data [ <str> ] = self . columnCount ( ) data [ <str> ] = self . windowTitle ( ) data [ <str> ] = [ ] for column in range ( data [ <str> ] ) :              data [ <str> ] . append ( self . horizontalHeaderItem ( column ) . text ( ) )  all = unidades . _all all . append ( unidades . Dimensionless ) data [ <str> ] = [ all . index ( unit ) for unit in self . units ] data [ <str> ] = self . readOnly if not self . readOnly :              if isinstance ( self . Point , meos . MEoS ) :                  data [ <str> ] = <str> data [ <str> ] = mEoS . __all__ . index ( self . Point . __class__ ) data [ <str> ] = <str>  elif isinstance ( self . Point , coolProp . CoolProp ) :                  data [ <str> ] = <str> data [ <str> ] = self . Point . kwargs [ <str> ] [ 0 ] data [ <str> ] = <str>  else :                  data [ <str> ] = <str> data [ <str> ] = self . Point . kwargs [ <str> ] [ 0 ] data [ <str> ] = <str>  data [ <str> ] = self . keys data [ <str> ] = self . columnReadOnly  data [ <str> ] = self . orderUnit data [ <str> ] = self . format data [ <str> ] = self . data  @ classmethod def readFromJSON ( self , data , parent ) :          all = unidades . _all all . append ( unidades . Dimensionless ) units = [ all [ i ] for i in data [ <str> ] ] kwargs = { } kwargs [ <str> ] = data [ <str> ] kwargs [ <str> ] = data [ <str> ] kwargs [ <str> ] = False kwargs [ <str> ] = parent kwargs [ <str> ] = units kwargs [ <str> ] = data [ <str> ] if data [ <str> ] :              kwargs [ <str> ] = True  else :              kwargs [ <str> ] = len ( data [ <str> ] ) + 1 kwargs [ <str> ] = data [ <str> ] kwargs [ <str> ] = data [ <str> ]  tabla = TablaMEoS ( data [ <str> ] , ** kwargs ) tabla . setWindowTitle ( data [ <str> ] ) tabla . setData ( data [ <str> ] ) if not data [ <str> ] :              if data [ <str> ] == <str> :                  fluid = mEoS . __all__ [ data [ <str> ] ] ( )  elif data [ <str> ] == <str> :                  fluid = coolProp . CoolProp ( ids = [ data [ <str> ] ] )  elif data [ <str> ] == <str> :                  fluid = refProp . RefProp ( ids = [ data [ <str> ] ] )  tabla . Point = fluid  return tabla   class Ui_Saturation ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Ui_Saturation , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) gboxType = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( gboxType , 1 , 1 , 1 , 2 ) layoutg1 = QtWidgets . QGridLayout ( gboxType ) self . VL = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layoutg1 . addWidget ( self . VL , 1 , 1 ) self . SL = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layoutg1 . addWidget ( self . SL , 2 , 1 ) self . SV = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layoutg1 . addWidget ( self . SV , 3 , 1 ) groupboxVariar = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( groupboxVariar , 1 , 3 , 1 , 2 ) layoutg2 = QtWidgets . QGridLayout ( groupboxVariar ) self . VariarTemperatura = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . VariarTemperatura . toggled . connect ( self . updateVar ) layoutg2 . addWidget ( self . VariarTemperatura , 1 , 1 ) self . VariarPresion = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . VariarPresion . toggled . connect ( self . updateVar ) layoutg2 . addWidget ( self . VariarPresion , 2 , 1 ) self . VariarXconT = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . VariarXconT . toggled . connect ( self . updateVar ) layoutg2 . addWidget ( self . VariarXconT , 3 , 1 ) self . VariarXconP = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . VariarXconP . toggled . connect ( self . updateVar ) layoutg2 . addWidget ( self . VariarXconP , 4 , 1 ) line = QtWidgets . QFrame ( ) line . setFrameShape ( QtWidgets . QFrame . HLine ) line . setFrameShadow ( QtWidgets . QFrame . Sunken ) layout . addWidget ( line , 2 , 1 , 1 , 4 ) self . labelFix = QtWidgets . QLabel ( ) layout . addWidget ( self . labelFix , 4 , 3 ) self . variableFix = Entrada_con_unidades ( float ) layout . addWidget ( self . variableFix , 4 , 4 ) self . labelinicial = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelinicial , 4 , 1 ) self . Inicial = Entrada_con_unidades ( float ) layout . addWidget ( self . Inicial , 4 , 2 ) self . labelfinal = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelfinal , 5 , 1 ) self . Final = Entrada_con_unidades ( float ) layout . addWidget ( self . Final , 5 , 2 ) self . labelincremento = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelincremento , 6 , 1 ) self . Incremento = Entrada_con_unidades ( float ) layout . addWidget ( self . Incremento , 6 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 10 , 1 , 1 , 4 ) if config :              self . fluido = getClassFluid ( config ) if isinstance ( self . fluido , meos . MEoS ) and ( self . fluido . _Melting_Pressure != meos . MEoS . _Melting_Pressure or self . fluido . _melting ) :                  self . SL . setEnabled ( True )  else :                  self . SL . setEnabled ( False )  if isinstance ( self . fluido , meos . MEoS ) and ( self . fluido . _sublimation or self . fluido . _Sublimation_Pressure != meos . MEoS . _Sublimation_Pressure ) :                  self . SV . setEnabled ( True )  else :                  self . SV . setEnabled ( False )   self . VL . setChecked ( True ) self . VariarTemperatura . setChecked ( True ) self . updateVary ( ) self . VL . toggled . connect ( self . updateVary )  def updateVary ( self ) :          self . VariarXconP . setEnabled ( self . VL . isChecked ( ) ) self . VariarXconT . setEnabled ( self . VL . isChecked ( ) ) self . VariarTemperatura . setChecked ( not self . VL . isChecked ( ) )  def updateVar ( self , bool ) :          if bool :              fix , inicial , final , step = 0 , 0 , 0 , 0 if self . VL . isChecked ( ) :                  if self . sender ( ) == self . VariarXconT :                      fix = ceil ( ( self . fluido . Tc - self . fluido . Tt ) / 2 ) inicial = 0 final = 1 step = 0.1  elif self . sender ( ) == self . VariarXconP :                      fix = ceil ( self . fluido . Pc / 2 ) inicial = 0 final = 1 step = 0.1  elif self . sender ( ) == self . VariarTemperatura :                      inicial = ceil ( self . fluido . Tt ) final = floor ( self . fluido . Tc ) step = 1.   self . Inicial . deleteLater ( ) self . Final . deleteLater ( ) self . Incremento . deleteLater ( ) if self . sender ( ) == self . VariarXconT :                  self . labelFix . setVisible ( True ) self . labelFix . setText ( unidades . Temperature . __title__ ) self . variableFix . deleteLater ( ) self . variableFix = Entrada_con_unidades ( unidades . Temperature , value = fix ) self . layout ( ) . addWidget ( self . variableFix , 4 , 4 ) unidadVariable = float self . labelinicial . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . labelfinal . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) )  elif self . sender ( ) == self . VariarXconP :                  self . labelFix . setVisible ( True ) self . labelFix . setText ( unidades . Pressure . __title__ ) self . variableFix . deleteLater ( ) self . variableFix = Entrada_con_unidades ( unidades . Pressure , value = fix ) self . layout ( ) . addWidget ( self . variableFix , 4 , 4 ) unidadVariable = float self . labelinicial . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . labelfinal . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) )  elif self . sender ( ) == self . VariarTemperatura :                  self . labelFix . setVisible ( False ) self . variableFix . setVisible ( False ) unidadVariable = unidades . Temperature self . labelinicial . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . labelfinal . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) )  else :                  self . labelFix . setVisible ( False ) self . variableFix . setVisible ( False ) unidadVariable = unidades . Pressure self . labelinicial . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . labelfinal . setText ( QtWidgets . QApplication . translate ( <str> , <str> ) )  self . Inicial = Entrada_con_unidades ( unidadVariable , value = inicial ) self . Final = Entrada_con_unidades ( unidadVariable , value = final ) if unidadVariable == unidades . Temperature :                  unidadDelta = unidades . DeltaT  elif unidadVariable == unidades . Pressure :                  unidadDelta = unidades . DeltaP  else :                  unidadDelta = unidadVariable  self . Incremento = Entrada_con_unidades ( unidadDelta , value = step ) self . layout ( ) . addWidget ( self . Inicial , 4 , 2 ) self . layout ( ) . addWidget ( self . Final , 5 , 2 ) self . layout ( ) . addWidget ( self . Incremento , 6 , 2 )    class Ui_Isoproperty ( QtWidgets . QDialog ) :      propiedades = [ QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] unidades = [ unidades . Temperature , unidades . Pressure , unidades . Density , unidades . SpecificVolume , unidades . Enthalpy , unidades . SpecificHeat , unidades . Enthalpy , float ] keys = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] def __init__ ( self , parent = None ) :          super ( Ui_Isoproperty , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . fix = QtWidgets . QComboBox ( ) for propiedad in self . propiedades :              self . fix . addItem ( propiedad )  self . fix . currentIndexChanged . connect ( self . actualizarUI ) layout . addWidget ( self . fix , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . vary = QtWidgets . QComboBox ( ) self . vary . currentIndexChanged . connect ( self . actualizarVariable ) layout . addWidget ( self . vary , 2 , 2 ) line = QtWidgets . QFrame ( ) line . setFrameShape ( QtWidgets . QFrame . HLine ) line . setFrameShadow ( QtWidgets . QFrame . Sunken ) layout . addWidget ( line , 3 , 1 , 1 , 2 ) self . labelFix = QtWidgets . QLabel ( ) layout . addWidget ( self . labelFix , 4 , 1 ) self . variableFix = Entrada_con_unidades ( float ) layout . addWidget ( self . variableFix , 4 , 2 ) self . labelinicial = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelinicial , 5 , 1 ) self . Inicial = Entrada_con_unidades ( float ) layout . addWidget ( self . Inicial , 5 , 2 ) self . labelfinal = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelfinal , 6 , 1 ) self . Final = Entrada_con_unidades ( float ) layout . addWidget ( self . Final , 6 , 2 ) self . labelincremento = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . labelincremento , 7 , 1 ) self . Incremento = Entrada_con_unidades ( float ) layout . addWidget ( self . Incremento , 7 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 10 , 1 , 1 , 2 ) self . actualizarUI ( 0 )  def actualizarUI ( self , indice ) :          self . vary . clear ( ) propiedades = self . propiedades [ : ] if indice <= 1 :              propiedades . append ( QtWidgets . QApplication . translate ( <str> , <str> ) )  del propiedades [ indice ] for propiedad in propiedades :              self . vary . addItem ( propiedad )  self . labelFix . setText ( self . propiedades [ indice ] ) self . variableFix . deleteLater ( ) self . variableFix = Entrada_con_unidades ( self . unidades [ indice ] ) self . layout ( ) . addWidget ( self . variableFix , 4 , 2 )  def actualizarVariable ( self , indice ) :          self . Inicial . deleteLater ( ) self . Final . deleteLater ( ) self . Incremento . deleteLater ( ) if indice >= self . fix . currentIndex ( ) :              indice += 1  self . Inicial = Entrada_con_unidades ( self . unidades [ indice ] ) self . Final = Entrada_con_unidades ( self . unidades [ indice ] ) self . Incremento = Entrada_con_unidades ( self . unidades [ indice ] ) self . layout ( ) . addWidget ( self . Inicial , 5 , 2 ) self . layout ( ) . addWidget ( self . Final , 6 , 2 ) self . layout ( ) . addWidget ( self . Incremento , 7 , 2 )   class AddPoint ( QtWidgets . QDialog ) :      keys = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] def __init__ ( self , fluid , melting = False , parent = None ) :          super ( AddPoint , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . fluid = fluid self . Inputs = [ ] for i , ( title , key , unit ) in enumerate ( meos . inputData ) :              layout . addWidget ( QtWidgets . QLabel ( title ) , i , 1 ) if unit is unidades . Dimensionless :                  entrada = Entrada_con_unidades ( float )  else :                  entrada = Entrada_con_unidades ( unit )  entrada . valueChanged . connect ( partial ( self . update , key ) ) self . Inputs . append ( entrada ) layout . addWidget ( entrada , i , 2 )  self . status = Status ( self . fluid . status , self . fluid . msg ) layout . addWidget ( self . status , i + 1 , 1 , 1 , 2 ) if isinstance ( fluid , meos . MEoS ) and fluid . _melting :              self . checkMelting = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkMelting . setChecked ( melting ) layout . addWidget ( self . checkMelting , i + 2 , 1 , 1 , 2 ) i += 1  layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , i + 2 , 1 ) self . To = Entrada_con_unidades ( unidades . Temperature ) self . To . valueChanged . connect ( partial ( self . update , <str> ) ) layout . addWidget ( self . To , i + 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , i + 3 , 1 ) self . rhoo = Entrada_con_unidades ( unidades . Density ) self . rhoo . valueChanged . connect ( partial ( self . update , <str> ) ) layout . addWidget ( self . rhoo , i + 3 , 2 ) self . checkBelow = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . checkBelow , i + 4 , 1 , 1 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Reset | QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . clicked . connect ( self . click ) layout . addWidget ( self . buttonBox , i + 5 , 1 , 1 , 2 )  def click ( self , button ) :          if QtWidgets . QDialogButtonBox . Reset == self . buttonBox . standardButton ( button ) :              self . reset ( )  elif QtWidgets . QDialogButtonBox . Ok == self . buttonBox . standardButton ( button ) :              self . accept ( )  elif QtWidgets . QDialogButtonBox . Cancel == self . buttonBox . standardButton ( button ) :              self . reject ( )   def update ( self , key , value ) :          self . status . setState ( 4 ) QtWidgets . QApplication . processEvents ( ) if isinstance ( self . fluid , meos . MEoS ) and self . fluid . _melting and self . checkMelting . isChecked ( ) and key == <str> :              P = self . fluid . _Melting_Pressure ( value ) self . fluid ( ** { key : value , <str> : P } )  else :              self . fluid ( ** { key : value } )  if self . fluid . status in ( 1 , 3 ) :              self . fill ( self . fluid )  self . status . setState ( self . fluid . status , self . fluid . msg )  def fill ( self , fluid ) :          self . blockSignals ( True ) Config = ConfigParser ( ) Config . read ( config . conf_dir + <str> ) for key , input in zip ( self . keys , self . Inputs ) :              input . setValue ( fluid . __getattribute__ ( key ) ) if fluid . kwargs [ key ] :                  input . setResaltado ( True )  else :                  input . setResaltado ( False )   self . blockSignals ( False )  def reset ( self ) :          self . fluid = self . fluid . __class__ ( ) self . status . setState ( self . fluid . status , self . fluid . msg ) self . rhoo . clear ( ) self . To . clear ( ) for input in self . Inputs :              input . clear ( ) input . setResaltado ( False )    class PlotMEoS ( QtWidgets . QWidget ) :      def __init__ ( self , dim , toolbar = False , filename = <str> , parent = None ) :          super ( PlotMEoS , self ) . __init__ ( parent ) self . parent = parent self . dim = dim self . filename = filename self . notes = [ ] layout = QtWidgets . QVBoxLayout ( self ) self . plot = plot . matplotlib ( dim ) self . plot . lx = self . plot . ax . axhline ( c = <str> , ls = <str> ) self . plot . ly = self . plot . ax . axvline ( c = <str> , ls = <str> ) self . plot . lx . set_visible ( False ) self . plot . ly . set_visible ( False ) layout . addWidget ( self . plot ) self . toolbar = plot . NavigationToolbar2QT ( self . plot , self . plot ) self . toolbar . setVisible ( toolbar ) layout . addWidget ( self . toolbar ) self . editAxesAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = os . environ [ <str> ] + <str> , slot = self . editAxis , parent = self ) self . editAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . edit , icon = os . environ [ <str> ] + <str> , parent = self ) self . editMarginAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . toolbar . configure_subplots , parent = self ) self . saveAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . toolbar . save_figure , icon = os . environ [ <str> ] + <str> , parent = self ) self . toolbarVisibleAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . toolbar . setVisible , checkable = True , parent = self ) self . gridToggleAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . grid , checkable = True , parent = self ) grid = self . parent . Preferences . getboolean ( <str> , <str> ) self . gridToggleAction . setChecked ( grid ) if dim == 2 :              self . plot . fig . canvas . mpl_connect ( <str> , self . click )  else :              self . editMarginAction . setEnabled ( False )   def contextMenuEvent ( self , event ) :          menuTable = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) menuTable . setIcon ( QtGui . QIcon ( os . environ [ <str> ] + <str> ) ) for linea in self . plot . ax . lines :              action = createAction ( linea . get_label ( ) , slot = partial ( self . table , linea ) , parent = self ) menuTable . addAction ( action )  menu = QtWidgets . QMenu ( ) menu . addAction ( self . editAxesAction ) menu . addAction ( self . editAction ) menu . addAction ( self . editMarginAction ) menu . addSeparator ( ) menu . addAction ( self . saveAction ) menu . addAction ( menuTable . menuAction ( ) ) menu . addSeparator ( ) menu . addAction ( self . toolbarVisibleAction ) menu . addAction ( self . gridToggleAction ) menu . exec_ ( event . globalPos ( ) ) if self . plot . ax . _gridOn :              self . gridToggleAction . setChecked ( True )   def grid ( self , bool ) :          self . plot . ax . grid ( bool ) self . plot . ax . _gridOn = bool self . plot . draw ( )  def edit ( self ) :          dialog = EditPlot ( self , self . parent ) dialog . show ( )  def editAxis ( self ) :          dialog = EditAxis ( self . plot ) dialog . exec_ ( )  def table ( self , obj ) :          xtxt = meos . propiedades [ meos . keys . index ( self . x ) ] ytxt = meos . propiedades [ meos . keys . index ( self . y ) ] xunit = meos . units [ meos . keys . index ( self . x ) ] yunit = meos . units [ meos . keys . index ( self . y ) ] HHeader = [ xtxt + os . linesep + xunit . text ( ) , ytxt + os . linesep + yunit . text ( ) ] units = [ xunit , yunit ] if self . dim == 3 :              ztxt = meos . propiedades [ meos . keys . index ( self . z ) ] zunit = meos . units [ meos . keys . index ( self . z ) ] HHeader . append ( ztxt + os . linesep + zunit . text ( ) ) units . append ( zunit ) data = obj . _verts3d  else :              data = obj . get_data ( orig = True )  tabla = TablaMEoS ( self . dim , horizontalHeader = HHeader , units = units , stretch = False , readOnly = True , parent = self . parent ) tabla . setData ( transpose ( data ) ) tabla . verticalHeader ( ) . setContextMenuPolicy ( QtCore . Qt . CustomContextMenu ) title = QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + obj . get_label ( ) tabla . setWindowTitle ( title ) self . parent . centralwidget . currentWidget ( ) . addSubWindow ( tabla ) tabla . show ( )  def _getData ( self ) :          filenameHard = os . environ [ <str> ] + <str> + os . sep + <str> + os . sep + self . filename + <str> filenameSoft = config . conf_dir + self . filename if os . path . isfile ( filenameSoft ) :              print ( filenameSoft ) with open ( filenameSoft , <str> ) as archivo :                  data = pickle . load ( archivo , fix_imports = False , errors = <str> )  return data  elif os . path . isfile ( filenameHard ) :              print ( filenameHard ) with gzip . GzipFile ( filenameHard , <str> ) as archivo :                  data = pickle . load ( archivo , encoding = <str> )  self . _saveData ( data ) return data   def _saveData ( self , data ) :          with open ( config . conf_dir + self . filename , <str> ) as file :              pickle . dump ( data , file )   def click ( self , event ) :          if event . button != 1 :              return  units = { <str> : unidades . Dimensionless , <str> : unidades . Temperature , <str> : unidades . Pressure , <str> : unidades . Enthalpy , <str> : unidades . Enthalpy , <str> : unidades . SpecificHeat , <str> : unidades . SpecificVolume , <str> : unidades . Density } if self . x in units and self . y in units :              x = units [ self . x ] ( event . xdata , <str> ) y = units [ self . y ] ( event . ydata , <str> ) fluid = mEoS . __all__ [ self . config [ <str> ] ] kwargs = { self . x : x , self . y : y } fluido = calcPoint ( fluid , self . config , ** kwargs ) if fluido and fluido . status and fluido . _constants [ <str> ] <= fluido . T and fluido . T <= fluido . _constants [ <str> ] and fluido . _constants [ <str> ] <= fluido . P . kPa and fluido . P . kPa <= fluido . _constants [ <str> ] :                  self . plot . lx . set_ydata ( event . ydata ) self . plot . ly . set_xdata ( event . xdata ) self . plot . lx . set_visible ( True ) self . plot . ly . set_visible ( True ) self . showPointData ( fluido )  else :                  self . plot . lx . set_visible ( False ) self . plot . ly . set_visible ( False ) self . clearPointData ( )    def showPointData ( self , state ) :          self . clearPointData ( ) yi = 0.98 for key in ( <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ) :              self . notes . append ( self . plot . ax . annotate ( <str> % ( key , state . __getattribute__ ( key ) . str ) , ( 0.01 , yi ) , xycoords = <str> , size = <str> , va = <str> ) ) yi -= 0.025  self . plot . draw ( )  def clearPointData ( self ) :          while self . notes :              anotation = self . notes . pop ( ) anotation . remove ( )  self . plot . draw ( )  def writeToStream ( self , stream ) :          stream . writeString ( self . filename ) stream . writeString ( self . windowTitle ( ) ) stream . writeString ( self . x ) stream . writeString ( self . y ) stream . writeString ( self . z ) stream . writeQString ( self . plot . ax . get_title ( ) ) stream . writeString ( self . plot . ax . title . get_color ( ) ) stream . writeQString ( QtCore . QString ( self . plot . ax . get_xlabel ( ) ) ) stream . writeString ( self . plot . ax . xaxis . get_label ( ) . get_color ( ) ) stream . writeQString ( QtCore . QString ( self . plot . ax . get_ylabel ( ) ) ) stream . writeString ( self . plot . ax . yaxis . get_label ( ) . get_color ( ) ) if self . z :              stream . writeQString ( QtCore . QString ( self . plot . ax . get_zlabel ( ) ) ) stream . writeString ( self . plot . ax . zaxis . get_label ( ) . get_color ( ) )  stream . writeBool ( self . plot . ax . _gridOn ) stream . writeString ( self . plot . ax . get_xscale ( ) ) stream . writeString ( self . plot . ax . get_yscale ( ) ) xmin , xmax = self . plot . ax . get_xlim ( ) stream . writeFloat ( xmin ) stream . writeFloat ( xmax ) ymin , ymax = self . plot . ax . get_ylim ( ) stream . writeFloat ( ymin ) stream . writeFloat ( ymax ) if self . z :              zmin , zmax = self . plot . ax . get_zlim ( ) stream . writeFloat ( zmin ) stream . writeFloat ( zmax )  stream . writeFloat ( self . plot . fig . subplotpars . left ) stream . writeFloat ( self . plot . fig . subplotpars . bottom ) stream . writeFloat ( self . plot . fig . subplotpars . right ) stream . writeFloat ( self . plot . fig . subplotpars . top ) stream . writeInt32 ( self . config [ <str> ] ) stream . writeInt32 ( self . config [ <str> ] ) stream . writeInt32 ( self . config [ <str> ] ) stream . writeInt32 ( self . config [ <str> ] )  @ classmethod def readFromStream ( cls , stream , parent ) :          filename = stream . readString ( ) . decode ( <str> ) title = stream . readString ( ) . decode ( <str> ) x = stream . readString ( ) . decode ( <str> ) y = stream . readString ( ) . decode ( <str> ) z = stream . readString ( ) . decode ( <str> ) if z :              dim = 3  else :              dim = 2  grafico = PlotMEoS ( dim = dim , parent = parent , filename = filename ) grafico . x = x grafico . y = y grafico . z = z grafico . setWindowTitle ( title ) xtxt = <str> % ( x , meos . units [ meos . keys . index ( x ) ] . text ( ) ) ytxt = <str> % ( y , meos . units [ meos . keys . index ( y ) ] . text ( ) ) grafico . plot . ax . set_xlabel ( xtxt ) grafico . plot . ax . set_ylabel ( ytxt ) if z :              ztxt = <str> % ( z , meos . units [ meos . keys . index ( z ) ] . text ( ) ) grafico . plot . ax . set_zlabel ( ztxt )  plotTitle = stream . readQString ( ) if plotTitle :              grafico . plot . ax . set_title ( str ( plotTitle ) )  titleColor = stream . readString ( ) . decode ( <str> ) grafico . plot . ax . title . set_color ( titleColor ) xlabel = stream . readQString ( ) if xlabel :              grafico . plot . ax . set_xlabel ( str ( xlabel ) )  xlabelColor = stream . readString ( ) . decode ( <str> ) grafico . plot . ax . xaxis . get_label ( ) . set_color ( xlabelColor ) ylabel = stream . readQString ( ) if ylabel :              grafico . plot . ax . set_ylabel ( str ( ylabel ) )  ylabelColor = stream . readString ( ) . decode ( <str> ) grafico . plot . ax . yaxis . get_label ( ) . set_color ( ylabelColor ) if z :              zlabel = stream . readQString ( ) if zlabel :                  grafico . plot . ax . set_zlabel ( str ( zlabel ) )  zlabelColor = stream . readString ( ) . decode ( <str> ) grafico . plot . ax . zaxis . get_label ( ) . set_color ( zlabelColor )  grid = stream . readBool ( ) grafico . plot . ax . _gridOn = grid grafico . plot . ax . grid ( grid ) xscale = stream . readString ( ) . decode ( <str> ) yscale = stream . readString ( ) . decode ( <str> ) xmin = stream . readFloat ( ) xmax = stream . readFloat ( ) grafico . plot . ax . set_xlim ( xmin , xmax ) ymin = stream . readFloat ( ) ymax = stream . readFloat ( ) grafico . plot . ax . set_ylim ( ymin , ymax ) if z :              zmin = stream . readFloat ( ) zmax = stream . readFloat ( ) grafico . plot . ax . set_zlim ( zmin , zmax )  data = grafico . _getData ( ) if z :              plot2D3D ( grafico , data , parent . Preferences , x , y , z )  else :              plot2D3D ( grafico , data , parent . Preferences , x , y )  if xscale :              grafico . plot . ax . set_xscale ( xscale )  if yscale :              grafico . plot . ax . set_yscale ( yscale )  left = stream . readFloat ( ) bottom = stream . readFloat ( ) right = stream . readFloat ( ) top = stream . readFloat ( ) grafico . plot . fig . subplots_adjust ( left , bottom , right , top ) conf = { } conf [ <str> ] = stream . readInt32 ( ) conf [ <str> ] = stream . readInt32 ( ) conf [ <str> ] = stream . readInt32 ( ) conf [ <str> ] = stream . readInt32 ( ) grafico . config = conf return grafico   class Plot2D ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( Plot2D , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) group_Ejex = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group_Ejex ) layout_GroupX = QtWidgets . QVBoxLayout ( group_Ejex ) self . ejeX = QtWidgets . QComboBox ( ) layout_GroupX . addWidget ( self . ejeX ) self . Xscale = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout_GroupX . addWidget ( self . Xscale ) for prop in ThermoAdvanced . propertiesName ( ) :              self . ejeX . addItem ( prop )  group_Ejey = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( group_Ejey ) layout_GroupY = QtWidgets . QVBoxLayout ( group_Ejey ) self . ejeY = QtWidgets . QComboBox ( ) layout_GroupY . addWidget ( self . ejeY ) self . Yscale = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout_GroupY . addWidget ( self . Yscale ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox ) self . ejeXChanged ( 0 ) self . ejeX . currentIndexChanged . connect ( self . ejeXChanged )  def ejeXChanged ( self , index ) :          current = self . ejeY . currentIndex ( ) if current == - 1 :              current = 0  self . ejeY . clear ( ) props = ThermoAdvanced . propertiesName ( ) del props [ index ] for prop in props :              self . ejeY . addItem ( prop )  if index == 0 and current == 0 :              self . ejeY . setCurrentIndex ( 0 )  elif index <= current :              self . ejeY . setCurrentIndex ( current )  else :              self . ejeY . setCurrentIndex ( current + 1 )    class Plot3D ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( Plot3D , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . ejeX = QtWidgets . QComboBox ( ) for prop in ThermoAdvanced . propertiesName ( ) :              self . ejeX . addItem ( prop )  layout . addWidget ( self . ejeX , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . ejeY = QtWidgets . QComboBox ( ) layout . addWidget ( self . ejeY , 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . ejeZ = QtWidgets . QComboBox ( ) layout . addWidget ( self . ejeZ , 3 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 4 , 1 , 1 , 2 ) self . ejeX . currentIndexChanged . connect ( self . ejeXChanged ) self . ejeY . currentIndexChanged . connect ( self . ejeYChanged ) self . ejeXChanged ( 0 )  def ejeXChanged ( self , index ) :          current = self . ejeY . currentIndex ( ) if current == - 1 :              current = 0  self . ejeY . clear ( ) props = ThermoAdvanced . propertiesName ( ) del props [ index ] for prop in props :              self . ejeY . addItem ( prop )  if index == 0 and current == 0 :              self . ejeY . setCurrentIndex ( 0 )  elif index <= current :              self . ejeY . setCurrentIndex ( current )  else :              self . ejeY . setCurrentIndex ( current + 1 )   def ejeYChanged ( self , indY ) :          current = self . ejeZ . currentIndex ( ) if current == - 1 :              current = 0  self . ejeZ . clear ( ) prop2 = ThermoAdvanced . propertiesName ( ) [ : ] indX = self . ejeX . currentIndex ( ) del prop2 [ indX ] del prop2 [ indY ] for prop in prop2 :              self . ejeZ . addItem ( prop )  if indX == 0 and indY == 0 and current == 0 :              self . ejeZ . setCurrentIndex ( 0 )  elif indY <= current or indX <= current :              self . ejeZ . setCurrentIndex ( current )  else :              self . ejeZ . setCurrentIndex ( current + 1 )    class EditPlot ( QtWidgets . QWidget ) :      def __init__ ( self , plotMEoS , mainwindow , parent = None ) :          super ( EditPlot , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . plotMEoS = plotMEoS self . fig = plotMEoS . plot self . mainwindow = mainwindow self . lista = QtWidgets . QListWidget ( ) layout . addWidget ( self . lista , 0 , 1 , 1 , 3 ) lytTitle = QtWidgets . QHBoxLayout ( ) label = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lytTitle . addWidget ( label ) self . label = QtWidgets . QLineEdit ( ) lytTitle . addWidget ( self . label ) layout . addLayout ( lytTitle , 1 , 1 , 1 , 3 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 3 ) self . Grosor = QtWidgets . QDoubleSpinBox ( ) self . Grosor . setAlignment ( QtCore . Qt . AlignRight ) self . Grosor . setRange ( 0.1 , 5 ) self . Grosor . setDecimals ( 1 ) self . Grosor . setSingleStep ( 0.1 ) layout . addWidget ( self . Grosor , 3 , 1 ) self . Linea = LineStyleCombo ( ) layout . addWidget ( self . Linea , 3 , 2 ) self . ColorButton = ColorSelector ( ) layout . addWidget ( self . ColorButton , 3 , 3 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 3 ) self . Marca = MarkerCombo ( ) layout . addWidget ( self . Marca , 5 , 1 ) self . markerSize = QtWidgets . QDoubleSpinBox ( ) self . markerSize . setAlignment ( QtCore . Qt . AlignRight ) self . markerSize . setDecimals ( 1 ) self . markerSize . setSingleStep ( 0.1 ) layout . addWidget ( self . markerSize , 5 , 2 ) self . markerfacecolor = ColorSelector ( ) layout . addWidget ( self . markerfacecolor , 5 , 3 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 7 , 1 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 3 ) self . markerEdgeSize = QtWidgets . QDoubleSpinBox ( ) self . markerEdgeSize . setAlignment ( QtCore . Qt . AlignRight ) self . markerEdgeSize . setDecimals ( 1 ) self . markerEdgeSize . setSingleStep ( 0.1 ) layout . addWidget ( self . markerEdgeSize , 7 , 2 ) self . markeredgecolor = ColorSelector ( ) layout . addWidget ( self . markeredgecolor , 7 , 3 ) self . visible = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . visible , 8 , 1 , 1 , 3 ) self . antialiases = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . antialiases , 9 , 1 , 1 , 3 ) layoutButton = QtWidgets . QHBoxLayout ( ) layout . addLayout ( layoutButton , 10 , 1 , 1 , 3 ) self . botonAdd = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , <str> ) self . botonAdd . clicked . connect ( self . add ) layoutButton . addWidget ( self . botonAdd ) self . botonRemove = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , <str> ) self . botonRemove . clicked . connect ( self . remove ) layoutButton . addWidget ( self . botonRemove ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) self . buttonBox . rejected . connect ( self . close ) layoutButton . addWidget ( self . buttonBox ) for linea in self . fig . ax . lines [ 2 : ] :              self . lista . addItem ( linea . _label )  self . lista . currentRowChanged . connect ( self . update ) self . label . textChanged . connect ( partial ( self . changeValue , <str> ) ) self . Grosor . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . Linea . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . Linea . currentIndexChanged . connect ( self . ColorButton . setEnabled ) self . ColorButton . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . Marca . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . Marca . currentIndexChanged . connect ( self . markerSize . setEnabled ) self . Marca . currentIndexChanged . connect ( self . markerfacecolor . setEnabled ) self . Marca . currentIndexChanged . connect ( self . markerEdgeSize . setEnabled ) self . Marca . currentIndexChanged . connect ( self . markeredgecolor . setEnabled ) self . markerSize . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . markerfacecolor . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . markerEdgeSize . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . markeredgecolor . valueChanged . connect ( partial ( self . changeValue , <str> ) ) self . visible . toggled . connect ( partial ( self . changeValue , <str> ) ) self . antialiases . toggled . connect ( partial ( self . changeValue , <str> ) ) self . lista . setCurrentRow ( 0 )  def update ( self , i ) :          linea = self . fig . ax . lines [ i + 2 ] self . label . setText ( linea . get_label ( ) ) self . Grosor . setValue ( linea . get_lw ( ) ) self . Linea . setCurrentValue ( linea . get_ls ( ) ) self . ColorButton . setColor ( linea . get_color ( ) ) self . Marca . setCurrentValue ( linea . get_marker ( ) ) self . Marca . currentIndexChanged . emit ( self . Marca . currentIndex ( ) ) self . markerSize . setValue ( linea . get_ms ( ) ) self . markerfacecolor . setColor ( linea . get_mfc ( ) ) self . markerEdgeSize . setValue ( linea . get_mew ( ) ) self . markeredgecolor . setColor ( linea . get_mec ( ) ) self . visible . setChecked ( linea . get_visible ( ) ) self . antialiases . setChecked ( linea . get_antialiased ( ) )  def changeValue ( self , key , value ) :          linea = self . fig . ax . lines [ self . lista . currentRow ( ) + 2 ] func = { <str> : linea . set_label , <str> : linea . set_lw , <str> : linea . set_ls , <str> : linea . set_marker , <str> : linea . set_color , <str> : linea . set_ms , <str> : linea . set_mfc , <str> : linea . set_mew , <str> : linea . set_mec , <str> : linea . set_visible , <str> : linea . set_antialiased } if key in ( <str> , <str> , <str> , <str> , <str> ) :              value = str ( value )  func [ key ] ( value ) if key == <str> :              self . lista . currentItem ( ) . setText ( value )  else :              self . fig . draw ( )   def add ( self ) :          dialog = AddLine ( ) if dialog . exec_ ( ) :              points = get_points ( self . mainwindow . Preferences ) self . mainwindow . progressBar . setVisible ( True ) index = self . mainwindow . currentConfig . getint ( <str> , <str> ) fluid = mEoS . __all__ [ index ] prop = dialog . tipo . currentIndex ( ) value = dialog . input [ prop ] . value eq = fluid . eq [ self . mainwindow . currentConfig . getint ( <str> , <str> ) ] T = list ( concatenate ( [ linspace ( eq [ <str> ] , 0.9 * fluid . Tc , points ) , linspace ( 0.9 * fluid . Tc , 0.99 * fluid . Tc , points ) , linspace ( 0.99 * fluid . Tc , fluid . Tc , points ) , linspace ( fluid . Tc , 1.01 * fluid . Tc , points ) , linspace ( 1.01 * fluid . Tc , 1.1 * fluid . Tc , points ) , linspace ( 1.1 * fluid . Tc , eq [ <str> ] , points ) ] ) ) Pmin = eq [ <str> ] * 1000 Pmax = eq [ <str> ] * 1000 P = list ( concatenate ( [ logspace ( log10 ( Pmin ) , log10 ( 0.9 * fluid . Pc ) , points ) , linspace ( 0.9 * fluid . Pc , 0.99 * fluid . Pc , points ) , linspace ( 0.99 * fluid . Pc , fluid . Pc , points ) , linspace ( fluid . Pc , 1.01 * fluid . Pc , points ) , linspace ( 1.01 * fluid . Pc , 1.1 * fluid . Pc , points ) , logspace ( log10 ( 1.1 * fluid . Pc ) , log10 ( Pmax ) , points ) ] ) ) for i in range ( 5 , 0 , - 1 ) :                  del T [ points * i ] del P [ points * i ]  if prop == 0 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , P , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . Temperature  elif prop == 1 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , T , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . Pressure  elif prop == 2 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , P , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . Enthalpy  elif prop == 3 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , T , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . SpecificHeat  elif prop == 4 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , T , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . SpecificVolume  elif prop == 5 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , T , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . Density  elif prop == 6 :                  self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) T = T [ : 3 * points - 2 ] fluidos = calcIsoline ( fluid , self . mainwindow . currentConfig , <str> , <str> , T , value , 0 , 0 , 100 , 1 , self . mainwindow . progressBar ) var = <str> name = <str> unit = unidades . Dimensionless  line = { value : { } } for x in ThermoAdvanced . propertiesKey ( ) :                  dat_propiedad = [ ] for fluido in fluidos :                      num = fluido . __getattribute__ ( x ) if num is not None :                          dat_propiedad . append ( num . _data )  else :                          dat_propiedad . append ( None )   line [ value ] [ x ] = dat_propiedad  style = getLineFormat ( self . mainwindow . Preferences , name ) functionx = _getunitTransform ( self . plotMEoS . x ) functiony = _getunitTransform ( self . plotMEoS . y ) functionz = _getunitTransform ( self . plotMEoS . z ) transform = ( functionx , functiony , functionz ) ax = self . plotMEoS . x , self . plotMEoS . y , self . plotMEoS . z plotIsoline ( line , ax , var , unit , self . plotMEoS , transform , ** style ) self . plotMEoS . plot . draw ( ) self . mainwindow . progressBar . setVisible ( False ) self . lista . addItem ( self . fig . ax . lines [ - 1 ] . get_label ( ) ) self . lista . setCurrentRow ( self . lista . count ( ) - 1 ) data = self . plotMEoS . _getData ( ) if var not in data :                  data [ var ] = { }  data [ var ] [ value ] = line [ value ] self . plotMEoS . _saveData ( data )   def remove ( self ) :          self . mainwindow . statusbar . showMessage ( QtWidgets . QApplication . translate ( <str> , <str> ) ) QtWidgets . QApplication . processEvents ( ) data = self . plotMEoS . _getData ( ) txt = str ( self . lista . currentItem ( ) . text ( ) ) . split ( ) var = txt [ 0 ] units = { <str> : unidades . Temperature , <str> : unidades . Pressure , <str> : unidades . SpecificVolume , <str> : unidades . Density , <str> : unidades . Enthalpy , <str> : unidades . SpecificHeat , <str> : unidades . Dimensionless } if var in units :              unit = units [ var ] for key in data [ var ] :                  str = unit ( key ) . str if str [ 1 : ] == <str> . join ( txt [ 2 : ] ) :                      del data [ var ] [ key ] self . plotMEoS . _saveData ( data ) break    index = self . lista . currentRow ( ) del self . fig . ax . lines [ index + 2 ] if index == 0 :              self . lista . setCurrentRow ( 1 )  else :              self . lista . setCurrentRow ( index - 1 )  self . lista . takeItem ( index ) self . fig . draw ( ) self . mainwindow . statusbar . clearMessage ( )   class AddLine ( QtWidgets . QDialog ) :      lineas = [ ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . Temperature , None ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . Pressure , None ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . Enthalpy , None ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . SpecificHeat , <str> ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . SpecificVolume , None ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , unidades . Density , None ) , ( QtWidgets . QApplication . translate ( <str> , <str> ) , float , None ) ] def __init__ ( self , parent = None ) :          super ( AddLine , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . tipo = QtWidgets . QComboBox ( ) layout . addWidget ( self . tipo , 1 , 1 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . input = [ ] for title , unidad , magnitud in self . lineas :              self . input . append ( Entrada_con_unidades ( unidad , magnitud ) ) layout . addWidget ( self . input [ - 1 ] , 2 , 2 ) self . tipo . addItem ( title )  self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 10 , 1 , 1 , 2 ) self . isolineaChanged ( 0 ) self . tipo . currentIndexChanged . connect ( self . isolineaChanged )  def isolineaChanged ( self , int ) :          for i in self . input :              i . setVisible ( False )  self . input [ int ] . setVisible ( True )   class EditAxis ( QtWidgets . QDialog ) :      def __init__ ( self , fig = None , parent = None ) :          super ( EditAxis , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( self ) self . fig = fig lytTitle = QtWidgets . QHBoxLayout ( ) lb = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lb . setSizePolicy ( QtWidgets . QSizePolicy . Maximum , QtWidgets . QSizePolicy . Maximum ) lytTitle . addWidget ( lb ) self . title = InputFont ( ) lytTitle . addWidget ( self . title ) layout . addLayout ( lytTitle , 1 , 1 , 1 , self . fig . dim ) self . axisX = AxisWidget ( <str> , self ) layout . addWidget ( self . axisX , 2 , 1 ) self . axisY = AxisWidget ( <str> , self ) layout . addWidget ( self . axisY , 2 , 2 ) if self . fig . dim == 3 :              self . axisZ = AxisWidget ( <str> , self ) layout . addWidget ( self . axisZ , 2 , 3 ) self . axisX . scale . setEnabled ( False ) self . axisY . scale . setEnabled ( False ) self . axisZ . scale . setEnabled ( False )  self . gridCheckbox = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . gridCheckbox , 3 , 1 , 1 , self . fig . dim ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 5 , 1 , 1 , self . fig . dim ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Close ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 10 , 1 , 1 , self . fig . dim ) if fig :              self . populate ( )  self . title . textChanged . connect ( partial ( self . update , <str> ) ) self . title . colorChanged . connect ( partial ( self . update , <str> ) ) self . title . fontChanged . connect ( partial ( self . update , <str> ) ) self . axisX . label . textChanged . connect ( partial ( self . update , <str> ) ) self . axisX . label . colorChanged . connect ( partial ( self . update , <str> ) ) self . axisX . label . fontChanged . connect ( partial ( self . update , <str> ) ) self . axisY . label . textChanged . connect ( partial ( self . update , <str> ) ) self . axisY . label . colorChanged . connect ( partial ( self . update , <str> ) ) self . axisY . label . fontChanged . connect ( partial ( self . update , <str> ) ) self . gridCheckbox . toggled . connect ( partial ( self . update , <str> ) ) self . axisX . scale . toggled . connect ( partial ( self . update , <str> ) ) self . axisY . scale . toggled . connect ( partial ( self . update , <str> ) ) self . axisX . min . valueChanged . connect ( partial ( self . update , <str> ) ) self . axisY . min . valueChanged . connect ( partial ( self . update , <str> ) ) self . axisX . max . valueChanged . connect ( partial ( self . update , <str> ) ) self . axisY . max . valueChanged . connect ( partial ( self . update , <str> ) ) if self . fig . dim == 3 :              self . axisZ . label . textChanged . connect ( partial ( self . update , <str> ) ) self . axisZ . label . colorChanged . connect ( partial ( self . update , <str> ) ) self . axisZ . label . fontChanged . connect ( partial ( self . update , <str> ) ) self . axisZ . min . valueChanged . connect ( partial ( self . update , <str> ) ) self . axisZ . max . valueChanged . connect ( partial ( self . update , <str> ) )   def populate ( self ) :          self . title . setText ( self . fig . ax . get_title ( ) ) self . title . setColor ( QtGui . QColor ( self . fig . ax . title . get_color ( ) ) ) self . axisX . label . setText ( self . fig . ax . get_xlabel ( ) ) xcolor = self . fig . ax . xaxis . get_label ( ) . get_color ( ) self . axisX . label . setColor ( QtGui . QColor ( xcolor ) ) self . axisY . label . setText ( self . fig . ax . get_ylabel ( ) ) ycolor = self . fig . ax . yaxis . get_label ( ) . get_color ( ) self . axisY . label . setColor ( QtGui . QColor ( ycolor ) ) self . gridCheckbox . setChecked ( self . fig . ax . _gridOn ) self . axisX . scale . setChecked ( self . fig . ax . get_xscale ( ) == <str> ) self . axisY . scale . setChecked ( self . fig . ax . get_yscale ( ) == <str> ) xmin , xmax = self . fig . ax . get_xlim ( ) self . axisX . min . setValue ( xmin ) self . axisX . max . setValue ( xmax ) ymin , ymax = self . fig . ax . get_ylim ( ) self . axisY . min . setValue ( ymin ) self . axisY . max . setValue ( ymax ) if self . fig . dim == 3 :              self . axisZ . label . setText ( self . fig . ax . get_zlabel ( ) ) zcolor = self . fig . ax . zaxis . get_label ( ) . get_color ( ) self . axisZ . label . setColor ( QtGui . QColor ( zcolor ) ) zmin , zmax = self . fig . ax . get_zlim ( ) self . axisZ . min . setValue ( zmin ) self . axisZ . max . setValue ( zmax )   def update ( self , key , value ) :          f = { <str> : self . fig . ax . set_xlabel , <str> : self . fig . ax . xaxis . get_label ( ) . set_color , <str> : self . fig . ax . xaxis . get_label ( ) . set_fontproperties , <str> : self . fig . ax . set_ylabel , <str> : self . fig . ax . yaxis . get_label ( ) . set_color , <str> : self . fig . ax . yaxis . get_label ( ) . set_fontproperties , <str> : self . fig . ax . set_title , <str> : self . fig . ax . title . set_color , <str> : self . fig . ax . title . set_fontproperties , <str> : self . fig . ax . set_xscale , <str> : self . fig . ax . set_yscale , <str> : self . fig . ax . grid } if self . fig . dim == 3 :              f [ <str> ] = self . fig . ax . set_zlabel f [ <str> ] = self . fig . ax . zaxis . get_label ( ) . set_color f [ <str> ] = self . fig . ax . zaxis . get_label ( ) . set_fontproperties  if key in ( <str> , <str> ) :              if value :                  value = <str>  else :                  value = <str>   if key == <str> :              self . fig . ax . _gridOn = value  if key in ( <str> , <str> , <str> ) :              value = str ( value )  if key in ( <str> , <str> , <str> ) :              value = self . convertFont ( value )  if key in ( <str> , <str> ) :              xmin = self . axisX . min . value xmax = self . axisX . max . value self . fig . ax . set_xlim ( xmin , xmax )  elif key in ( <str> , <str> ) :              ymin = self . axisY . min . value ymax = self . axisY . max . value self . fig . ax . set_ylim ( ymin , ymax )  elif key in ( <str> , <str> ) :              ymin = self . axisZ . min . value ymax = self . axisZ . max . value self . fig . ax . set_zlim ( ymin , ymax )  else :              f [ key ] ( value )  self . fig . draw ( )  def convertFont ( self , font ) :          family = str ( font . family ( ) ) if str ( font . style ( ) ) in ( <str> , <str> , <str> ) :              style = str ( font . style ( ) )  else :              style = None  font = FontProperties ( family , style , None , font . stretch ( ) , font . weight ( ) , font . pointSize ( ) ) return font   class AxisWidget ( QtWidgets . QGroupBox ) :      def __init__ ( self , name , parent = None ) :          title = name + <str> + QtWidgets . QApplication . translate ( <str> , <str> ) super ( AxisWidget , self ) . __init__ ( title , parent ) lyt = QtWidgets . QGridLayout ( self ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . label = InputFont ( ) lyt . addWidget ( self . label , 1 , 2 ) self . scale = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt . addWidget ( self . scale , 2 , 1 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . min = Entrada_con_unidades ( float , min = float ( <str> ) ) lyt . addWidget ( self . min , 3 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 ) self . max = Entrada_con_unidades ( float , min = float ( <str> ) ) lyt . addWidget ( self . max , 4 , 2 )   def calcIsoline ( f , config , var , fix , vvar , vfix , ini , step , end , total , bar ) :      fluidos = [ ] rhoo = 0 To = 0 for Ti in vvar :          kwargs = { var : Ti , fix : vfix , <str> : rhoo , <str> : To } print ( kwargs ) fluido = calcPoint ( f , config , ** kwargs ) if fluido and fluido . status and ( fluido . rho != rhoo or fluido . T != To ) :              if var not in ( <str> , <str> ) or fix not in ( <str> , <str> ) :                  rhoo = fluido . rho To = fluido . T  fluidos . append ( fluido )  bar . setValue ( ini + end * step / total + end / total * len ( fluidos ) / len ( vvar ) ) QtWidgets . QApplication . processEvents ( )  return fluidos  def get_points ( Preferences ) :      definition = Preferences . getint ( <str> , <str> ) if definition == 1 :          points = 10  elif definition == 2 :          points = 25  elif definition == 3 :          points = 50  elif definition == 4 :          points = 100  else :          points = 5  return points  def getLineFormat ( Preferences , name ) :      format = formatLine ( Prefernces , <str> , name ) if name != <str> :          format [ <str> ] = Preferences . getboolean ( <str> , name + <str> ) format [ <str> ] = Preferences . getint ( <str> , name + <str> ) format [ <str> ] = Preferences . getboolean ( <str> , name + <str> ) format [ <str> ] = Preferences . getboolean ( <str> , name + <str> )  return format  def plotIsoline ( data , axis , title , unidad , grafico , transform , ** format ) :      x , y , z = axis fx , fy , fz = transform xscale = grafico . plot . ax . get_xscale ( ) yscale = grafico . plot . ax . get_yscale ( ) annotate = format . pop ( <str> ) pos = format . pop ( <str> ) unit = format . pop ( <str> ) variable = format . pop ( <str> ) for key in sorted ( data . keys ( ) ) :          xi = list ( map ( fx , data [ key ] [ x ] ) ) yi = list ( map ( fy , data [ key ] [ y ] ) ) label = <str> % ( title , unidad ( key ) . str ) if z :              zi = list ( map ( fz , data [ key ] [ z ] ) ) grafico . plot . ax . plot ( xi , yi , zi , label = label , ** format )  else :              grafico . plot . ax . plot ( xi , yi , label = label , ** format )  if annotate and not z :              if variable and unit :                  txt = label  elif variable :                  txt = <str> % ( title , unidad ( key ) . config ( ) )  elif unit :                  txt = unidad ( key ) . str  else :                  txt = unidad ( key ) . config ( )  xmin , xmax = grafico . plot . ax . get_xlim ( ) ymin , ymax = grafico . plot . ax . get_ylim ( ) i = int ( len ( xi ) * pos / 100 ) if pos > 50 :                  j = i - 10  else :                  j = i + 10  if xscale == <str> :                  fx = ( log ( xi [ i ] ) - log ( xi [ j ] ) ) / ( log ( xmax ) - log ( xmin ) )  else :                  fx = ( xi [ i ] - xi [ j ] ) / ( xmax - xmin )  if yscale == <str> :                  fy = ( log ( yi [ i ] ) - log ( yi [ j ] ) ) / ( log ( ymax ) - log ( ymin ) )  else :                  fy = ( yi [ i ] - yi [ j ] ) / ( ymax - ymin )  rot = atan ( fy / fx ) * 360 / 2 / pi grafico . plot . ax . annotate ( txt , ( xi [ i ] , yi [ i ] ) , rotation = rot , size = <str> , ha = <str> , va = <str> )    def plot2D3D ( grafico , data , Preferences , x , y , z = None ) :      functionx = _getunitTransform ( x ) functiony = _getunitTransform ( y ) functionz = _getunitTransform ( z ) transform = ( functionx , functiony , functionz ) format = getLineFormat ( Preferences , <str> ) if x == <str> and y == <str> :          satLines = QtWidgets . QApplication . translate ( <str> , <str> ) ,  else :          satLines = [ QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ]  for fase , label in enumerate ( satLines ) :          xsat = list ( map ( functionx , data [ <str> % fase ] [ x ] ) ) ysat = list ( map ( functiony , data [ <str> % fase ] [ y ] ) ) if z :              zsat = list ( map ( functionz , data [ <str> % fase ] [ z ] ) ) grafico . plot . ax . plot ( xsat , ysat , zsat , label = label , ** format )  else :              grafico . plot . ax . plot ( xsat , ysat , label = label , ** format )   if <str> in data :          label = QtWidgets . QApplication . translate ( <str> , <str> ) xmel = list ( map ( functionx , data [ <str> ] [ x ] ) ) ymel = list ( map ( functiony , data [ <str> ] [ y ] ) ) if z :              zmel = list ( map ( functionz , data [ <str> ] [ z ] ) ) grafico . plot . ax . plot ( xmel , ymel , zmel , label = label , ** format )  else :              grafico . plot . ax . plot ( xmel , ymel , label = label , ** format )   if <str> in data :          xsub = list ( map ( functionx , data [ <str> ] [ x ] ) ) ysub = list ( map ( functiony , data [ <str> ] [ y ] ) ) label = QtWidgets . QApplication . translate ( <str> , <str> ) if z :              zmel = list ( map ( functionz , data [ <str> ] [ z ] ) ) grafico . plot . ax . plot ( xmel , ymel , zmel , label = label , ** format )  else :              grafico . plot . ax . plot ( xsub , ysub , label = label , ** format )   if x not in [ <str> , <str> ] or y not in [ <str> , <str> ] or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . Dimensionless , grafico , transform , ** format )  if x != <str> and y != <str> or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . Temperature , grafico , transform , ** format )  if x != <str> and y != <str> or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . Pressure , grafico , transform , ** format )  if x not in [ <str> , <str> ] and y not in [ <str> , <str> ] or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . SpecificVolume , grafico , transform , ** format ) if <str> in data :              plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . Density , grafico , transform , ** format )   if x != <str> and y != <str> or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . Enthalpy , grafico , transform , ** format )  if x != <str> and y != <str> or z :          format = getLineFormat ( Preferences , <str> ) plotIsoline ( data [ <str> ] , ( x , y , z ) , <str> , unidades . SpecificHeat , grafico , transform , ** format )   def _getunitTransform ( eje ) :      if not eje :          return None  elif eje == <str> :          index = config . getMainWindowConfig ( ) . getint ( <str> , <str> ) func = [ None , unidades . K2C , unidades . K2R , unidades . K2F , unidades . K2Re ] return func [ index ]  else :          unit = meos . units [ meos . keys . index ( eje ) ] factor = unit ( 1. ) . config ( ) return lambda val : val * factor if val is not None else nan   def calcPoint ( fluid , config , ** kwargs ) :      if isinstance ( config , dict ) :          option = config  else :          option = { } option [ <str> ] = config . getint ( <str> , <str> ) option [ <str> ] = config . getint ( <str> , <str> ) option [ <str> ] = config . getint ( <str> , <str> )  kwargs . update ( option ) Tmin = fluid . eq [ option [ <str> ] ] [ <str> ] Tmax = fluid . eq [ option [ <str> ] ] [ <str> ] Pmin = fluid . eq [ option [ <str> ] ] [ <str> ] * 1000 Pmax = fluid . eq [ option [ <str> ] ] [ <str> ] * 1000 if <str> in kwargs :          if kwargs [ <str> ] < Tmin or kwargs [ <str> ] > Tmax :              return None   if <str> in kwargs :          if kwargs [ <str> ] < Pmin - 1 or kwargs [ <str> ] > Pmax + 1 :              return None   fluido = fluid ( ** kwargs ) if fluido . status not in [ 1 , 3 ] :          return None  if fluido . _melting and fluido . _melting [ <str> ] <= fluido . T <= fluido . _melting [ <str> ] :          Pmel = fluido . _Melting_Pressure ( fluido . T ) Pmax = min ( Pmax , Pmel )  if fluido . P < Pmin - 1 or fluido . P > Pmax + 1 or fluido . T < Tmin or fluido . T > Tmax :          return None  return fluido  if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) conf = config . getMainWindowConfig ( ) SteamTables = Ui_ChooseFluid ( ) SteamTables . show ( ) sys . exit ( app . exec_ ( ) )   