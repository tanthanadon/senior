from math import log from unittest import TestCase from lib import unidades from lib . meos import MEoSBlend class Air ( MEoSBlend ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 342.60456 ) Tc = unidades . Temperature ( 132.6306 ) Pc = unidades . Pressure ( 3786.0 , <str> ) M = 28.9586 Tt = unidades . Temperature ( 59.75 ) Tb = unidades . Temperature ( 78.903 ) f_acent = 0.0335 momentoDipolar = unidades . DipoleMoment ( 0.0 , <str> ) id = 475 Fi1 = { <str> : [ 1 , 2.490888032 ] , <str> : [ - 3 , - 2 , - 1 , 0 , 1 , 1.5 ] , <str> : [ 0.6057194e-7 , - 0.210274769e-4 , - 0.158860716e-3 , - 13.841928076 , 17.275266575 , - 0.19536342e-3 ] , <str> : [ 0.791309509 , 0.212236768 ] , <str> : [ 25.36365 , 16.90741 ] , <str> : [ - 0.197938904 ] , <str> : [ 87.31279 ] , <str> : [ 2. / 3 ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : { <str> : 298.15 , <str> : 101.325 , <str> : 8649.34 , <str> : 194. } , <str> : 28.9586 , <str> : 132.6312 , <str> : 10.4477 , <str> : Tt , <str> : 2000. , <str> : 2000000.0 , <str> : 53.73 , <str> : 132.6312 , <str> : 3.78502 , <str> : { <str> : [ 1 , 2 , 5 , 8 ] , <str> : [ - 0.1567266 , - 5.539635 , 0.7567212 , - 3.514322 ] } , <str> : { <str> : [ 1 , 2 , 3 , 4 , 5 , 6 ] , <str> : [ 0.2260724 , - 7.080499 , 5.700283 , - 12.44017 , 17.81926 , - 10.81364 ] } , <str> : [ 0.118160747229 , 0.713116392079 , - 0.161824192067e1 , 0.714140178971e-1 , - 0.865421396646e-1 , 0.134211176704 , 0.112626704218e-1 , - 0.420533228842e-1 , 0.349008431982e-1 , 0.164957183186e-3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 3 , 4 , 4 , 4 , 6 ] , <str> : [ 0 , 0.33 , 1.01 , 0 , 0 , 0.15 , 0 , 0.2 , 0.35 , 1.35 ] , <str> : [ - 0.101365037912 , - 0.173813690970 , - 0.472103183731e-1 , - 0.122523554253e-1 , - 0.146629609713 , - 0.316055879821e-1 , 0.233594806142e-3 , 0.148287891978e-1 , - 0.938782884667e-2 ] , <str> : [ 1 , 3 , 5 , 6 , 1 , 3 , 11 , 1 , 3 ] , <str> : [ 1.6 , 0.8 , 0.95 , 1.25 , 3.6 , 6 , 3.25 , 3.5 , 15 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 9 } jacobsen = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : Fi1 , <str> : { <str> : 298.15 , <str> : 101.325 , <str> : 8649.34 , <str> : 194. } , <str> : 28.9586 , <str> : 132.6312 , <str> : 10.4477 , <str> : Tt , <str> : 870.0 , <str> : 70000.0 , <str> : 34.628 , <str> : 132.61738 , <str> : 3.78502 , <str> : { <str> : [ 1 , 2 , 10 , 11 , 13 , 14 ] , <str> : [ - 0.1537763029 , - 5.544542064 , 312.7182733 , - 895.9553274 , 1834.176566 , - 1321.892808 ] } , <str> : { <str> : [ 1 , 2 , 4 , 5 , 6 , 7 , 12 ] , <str> : [ 0.2095592444 , - 6.654905539 , 22.13718815 , - 84.14553609 , 135.9753732 , - 83.66895082 , 17.97856602 ] } , <str> : [ 0.206604930965 , 0.367099749382 , - 0.943192015369 , 0.382519513142e-2 , - 0.865385542309e-1 , 0.323019987452 , 0.608695449299e-2 , 0.128352106296e-3 , - 0.400058181940e-5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 4 , 6 , 7 ] , <str> : [ 0 , 0.25 , 1 , 3.5 , 0 , 0.25 , 0.5 , 2 , 3 ] , <str> : [ - 0.544697915817 , - 0.526471065792 , - 0.608529300347 , - 0.124174277875 , - 0.595578533411e-2 , - 0.157523548353 , - 0.346463251040e-2 , 0.837023084176e-2 , - 0.316701981142e-1 , - 0.721856676857e-2 , 0.276838040645e-3 , 0.160877459321e-4 , 0.409235806738e-1 , 0.652776125216e-3 , - 0.952903961290e-2 , - 0.100337820004e-1 , 0.701111041628e-2 , - 0.472754336912e-2 , 0.399257638569e-2 , 0.968453675994e-2 , - 0.106826283630e-1 , - 0.489679885832e-2 ] , <str> : [ 1 , 2 , 3 , 5 , 6 , 1 , 1 , 2 , 2 , 3 , 11 , 11 , 1 , 1 , 2 , 3 , 7 , 8 , 2 , 4 , 5 , 2 ] , <str> : [ 1.5 , 1 , 1 , 1 , 2 , 3 , 8 , 0.5 , 5.5 , 9 , 3 , 6 , 3 , 9 , 2 , 13 , 11 , 11 , 8 , 22 , 23 , 11 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 ] , <str> : [ 1 ] * 22 } eq = lemmon , jacobsen _surface = { <str> : [ 0.03046 ] , <str> : [ 1.28 ] } _melting = { <str> : 1 , <str> : lemmon [ <str> ] , <str> : 59.75 , <str> : 2000.0 , <str> : Tt , <str> : 5265 , <str> : 1 , <str> : [ 35493.5 ] , <str> : [ 1.78963 ] } _liquid_Density = { <str> : 2 , <str> : [ - 2.0466 , - 4.752 , - 13.259 , - 47.652 ] , <str> : [ 0.41 , 1 , 2.8 , 6.5 ] } def _Vapor_Density ( self , T ) :          if T < self . Tt :              T = self . Tt  if T > 132.6312 :              T = 132.6312  Tita = 1 - T / 132.6312 N = [ 44.3413 , - 240.073 , 285.139 , - 88.3366 , - 0.892181 ] rhor = 1 + N [ 0 ] * Tita ** 0.65 + N [ 1 ] * Tita ** 0.85 + N [ 2 ] * Tita ** 0.95 + N [ 3 ] * Tita ** 1.1 + N [ 4 ] * log ( T / 132.6312 ) return unidades . Density ( rhor * 10.4477 * self . M )  visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 103.3 , <str> : 0.36 , <str> : 132.6312 , <str> : 10.4477 * M , <str> : [ 10.72 , 1.122 , 0.002019 , - 8.876 , - 0.02916 ] , <str> : [ .2 , .05 , 2.4 , .6 , 3.6 ] , <str> : [ 1 , 4 , 9 , 1 , 8 ] , <str> : [ 0 , 0 , 0 , 1 , 1 ] , <str> : [ 0 , 0 , 0 , 1 , 1 ] } _viscosity = visco0 , thermo0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 3.78502e6 , <str> : 132.6312 , <str> : 1e-3 , <str> : 1.308 , <str> : [ 1.405 , - 1.036 ] , <str> : [ 1.1 , 0.3 ] , <str> : 132.6312 , <str> : 10.4477 * M , <str> : 1e-3 , <str> : [ 8.743 , 14.76 , - 16.62 , 3.793 , - 6.142 , - 0.3778 ] , <str> : [ 0.1 , 0 , 0.5 , 2.7 , 0.3 , 1.3 ] , <str> : [ 1 , 2 , 3 , 7 , 7 , 11 ] , <str> : [ 0 , 0 , 2 , 2 , 2 , 2 ] , <str> : [ 0 , 0 , 1 , 1 , 1 , 1 ] , <str> : 3 , <str> : 0.63 , <str> : 1.2415 , <str> : 1.01 , <str> : 0.11e-9 , <str> : 0.055 , <str> : 0.31e-9 , <str> : 265.262 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_lemmon ( self ) :          self . assertEqual ( round ( Air . _bubbleP ( 59.75 ) . MPa , 6 ) , 0.005265 ) self . assertEqual ( round ( Air . _dewP ( 59.75 ) . MPa , 5 ) , 0.00243 ) self . assertEqual ( round ( Air . _bubbleP ( 70 ) . MPa , 5 ) , 0.03191 ) self . assertEqual ( round ( Air . _dewP ( 70 ) . MPa , 5 ) , 0.01943 ) self . assertEqual ( round ( Air . _bubbleP ( 80 ) . MPa , 5 ) , 0.11462 ) self . assertEqual ( round ( Air . _dewP ( 80 ) . MPa , 5 ) , 0.08232 ) self . assertEqual ( round ( Air . _bubbleP ( 100 ) . MPa , 5 ) , 0.66313 ) self . assertEqual ( round ( Air . _dewP ( 100 ) . MPa , 5 ) , 0.56742 ) self . assertEqual ( round ( Air . _bubbleP ( 120 ) . MPa , 5 ) , 2.15573 ) self . assertEqual ( round ( Air . _dewP ( 120 ) . MPa , 5 ) , 2.00674 ) self . assertEqual ( round ( Air . _bubbleP ( 130 ) . MPa , 5 ) , 3.42947 ) self . assertEqual ( round ( Air . _dewP ( 130 ) . MPa , 5 ) , 3.30835 ) st = Air ( T = 100 , P = 101325 , rho0 = 1 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.12449 ) self . assertEqual ( round ( st . uM . kJkmol , 1 ) , 2028.2 ) self . assertEqual ( round ( st . hM . kJkmol , 1 ) , 2842.1 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 166.61 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 21.09 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 30.13 ) self . assertEqual ( round ( st . w , 1 ) , 198.2 ) st = Air ( T = 500 , P = 2e5 ) self . assertEqual ( round ( st . rhoM , 6 ) , 0.048077 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 10418.0 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 14578.0 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 208.20 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 21.51 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 29.84 ) self . assertEqual ( round ( st . w , 1 ) , 446.6 ) st = Air ( T = 130 , P = 1e6 ) self . assertEqual ( round ( st . rhoM , 4 ) , 1.0295 ) self . assertEqual ( round ( st . uM . kJkmol , 1 ) , 2461.1 ) self . assertEqual ( round ( st . hM . kJkmol , 1 ) , 3432.5 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 153.79 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 22.05 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 34.69 ) self . assertEqual ( round ( st . w , 1 ) , 216.8 ) st = Air ( T = 2000 , P = 10e6 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.59094 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 48600 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 65522 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 221.44 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 27.93 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 36.25 ) self . assertEqual ( round ( st . w , 1 ) , 878.6 ) st = Air ( T = 2000 , P = 500e6 ) self . assertEqual ( round ( st . rhoM , 2 ) , 16.48 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 48857 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 79198 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 188.66 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 29.07 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 37.27 ) self . assertEqual ( round ( st . w , 1 ) , 1497.6 ) P = 50 T = 470 f_pt = Air ( P = P , T = T ) f_prho = Air ( P = f_pt . P , rho = f_pt . rho ) self . assertEqual ( round ( f_prho . P - P , 6 ) , 0 ) self . assertEqual ( round ( f_prho . T - T , 6 ) , 0 )  def test_LemmonTransport ( self ) :          self . assertEqual ( round ( Air ( T = 100 , rhom = 0 ) . mu . muPas , 5 ) , 7.09559 ) self . assertEqual ( round ( Air ( T = 300 , rhom = 0 ) . mu . muPas , 4 ) , 18.5230 ) self . assertEqual ( round ( Air ( T = 100 , rhom = 28 ) . mu . muPas , 3 ) , 107.923 ) self . assertEqual ( round ( Air ( T = 200 , rhom = 10 ) . mu . muPas , 4 ) , 21.1392 ) self . assertEqual ( round ( Air ( T = 300 , rhom = 5 ) . mu . muPas , 4 ) , 21.3241 ) self . assertEqual ( round ( Air ( T = 132.64 , rhom = 10.4 ) . mu . muPas , 4 ) , 17.7623 ) self . assertEqual ( round ( Air ( rhom = 0 , T = 100 ) . k . mWmK , 5 ) , 9.35902 ) self . assertEqual ( round ( Air ( rhom = 0 , T = 300 ) . k . mWmK , 4 ) , 26.3529 ) self . assertEqual ( round ( Air ( rhom = 28 , T = 100 ) . k . mWmK , 3 ) , 119.221 ) self . assertEqual ( round ( Air ( rhom = 10 , T = 200 ) . k . mWmK , 4 ) , 35.3185 ) self . assertEqual ( round ( Air ( rhom = 5 , T = 300 ) . k . mWmK , 4 ) , 32.6062 ) self . assertEqual ( round ( Air ( rhom = 10.4 , T = 132.64 ) . k . mWmK , 4 ) , 75.6231 )    