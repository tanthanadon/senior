import os from PyQt5 import QtGui , QtWidgets from lib import sql from UI import viewComponents class UI_databank_widget ( QtWidgets . QWidget ) :      def __init__ ( self , parent = None ) :          super ( UI_databank_widget , self ) . __init__ ( parent ) gridLayout = QtWidgets . QGridLayout ( self ) layoutTitle = QtWidgets . QHBoxLayout ( ) layoutTitle . setSpacing ( 5 ) self . buttonNew = QtWidgets . QToolButton ( self ) self . buttonNew . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . buttonNew . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) ) self . buttonNew . clicked . connect ( self . newComponent ) layoutTitle . addWidget ( self . buttonNew ) self . buttonCopy = QtWidgets . QToolButton ( self ) self . buttonCopy . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . buttonCopy . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) ) self . buttonCopy . clicked . connect ( self . copyComponent ) layoutTitle . addWidget ( self . buttonCopy ) self . buttonDelete = QtWidgets . QToolButton ( self ) self . buttonDelete . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . buttonDelete . setIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) ) self . buttonDelete . clicked . connect ( self . deleteComponent ) self . buttonDelete . setEnabled ( False ) layoutTitle . addWidget ( self . buttonDelete ) gridLayout . addItem ( layoutTitle , 1 , 1 ) gridLayout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 2 ) self . Busqueda = QtWidgets . QLineEdit ( ) self . Busqueda . textChanged . connect ( self . buscar ) gridLayout . addWidget ( self . Busqueda , 1 , 3 ) self . siguiente = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . siguiente . clicked . connect ( self . Next ) gridLayout . addWidget ( self . siguiente , 1 , 4 ) self . BaseDatos = QtWidgets . QTableWidget ( ) self . BaseDatos . setMinimumWidth ( 375 ) self . BaseDatos . verticalHeader ( ) . hide ( ) self . BaseDatos . setEditTriggers ( QtWidgets . QAbstractItemView . NoEditTriggers ) self . BaseDatos . setShowGrid ( False ) self . BaseDatos . setRowCount ( 0 ) self . BaseDatos . setColumnCount ( 3 ) self . BaseDatos . setHorizontalHeaderItem ( 0 , QtWidgets . QTableWidgetItem ( <str> ) ) self . BaseDatos . setHorizontalHeaderItem ( 1 , QtWidgets . QTableWidgetItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . BaseDatos . setHorizontalHeaderItem ( 2 , QtWidgets . QTableWidgetItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . BaseDatos . setSelectionBehavior ( QtWidgets . QAbstractItemView . SelectRows ) self . BaseDatos . horizontalHeader ( ) . setStretchLastSection ( True ) self . BaseDatos . currentCellChanged . connect ( self . checkButton ) self . BaseDatos . doubleClicked . connect ( self . mostrarPropiedades ) gridLayout . addWidget ( self . BaseDatos , 2 , 1 , 1 , 4 ) self . correctos = [ ] self . indice = 0 self . rellenar ( )  def rellenar ( self ) :          self . BaseDatos . setRowCount ( 0 ) sql . databank . execute ( <str> ) for i in sql . databank :              self . BaseDatos . setRowCount ( self . BaseDatos . rowCount ( ) + 1 ) self . BaseDatos . setItem ( i [ 0 ] - 1 , 0 , QtWidgets . QTableWidgetItem ( str ( i [ 0 ] ) ) ) self . BaseDatos . setItem ( i [ 0 ] - 1 , 1 , QtWidgets . QTableWidgetItem ( i [ 2 ] ) ) self . BaseDatos . setItem ( i [ 0 ] - 1 , 2 , QtWidgets . QTableWidgetItem ( i [ 1 ] ) ) self . BaseDatos . setRowHeight ( self . BaseDatos . rowCount ( ) - 1 , 20 )  sql . databank_Custom . execute ( <str> ) for i in sql . databank_Custom :              filas = self . BaseDatos . rowCount ( ) self . BaseDatos . setRowCount ( filas + 1 ) self . BaseDatos . setItem ( filas , 0 , QtWidgets . QTableWidgetItem ( str ( i [ 0 ] ) ) ) self . BaseDatos . setItem ( filas , 1 , QtWidgets . QTableWidgetItem ( i [ 2 ] ) ) self . BaseDatos . setItem ( filas , 2 , QtWidgets . QTableWidgetItem ( i [ 1 ] ) ) self . BaseDatos . setRowHeight ( self . BaseDatos . rowCount ( ) - 1 , 20 )  self . BaseDatos . resizeColumnsToContents ( )  def buscar ( self ) :          self . indice = 0 texto = <str> + self . Busqueda . text ( ) + <str> query = <str> query += <str> % ( texto , texto ) sql . databank . execute ( query ) self . correctos = [ ] for i in sql . databank :              self . correctos . append ( i [ 0 ] )  self . BaseDatos . setCurrentCell ( self . correctos [ self . indice ] - 1 , 0 )  def Next ( self ) :          if self . indice < len ( self . correctos ) - 1 :              self . indice += 1  else :              self . indice = 0  self . BaseDatos . setCurrentCell ( self . correctos [ self . indice ] - 1 , 0 )  def checkButton ( self , indice ) :          if indice >= sql . N_comp :              self . buttonDelete . setEnabled ( True )  else :              self . buttonDelete . setEnabled ( False )   def mostrarPropiedades ( self ) :          indice = self . currentIndice if indice > 0 :              Dialog = viewComponents . View_Component ( indice ) Dialog . exec_ ( )   @ property def currentIndice ( self ) :          value = self . BaseDatos . item ( self . BaseDatos . currentRow ( ) , 0 ) . text ( ) return int ( value )  def currentRow ( self ) :          return self . BaseDatos . currentRow ( )  def newComponent ( self ) :          Dialog = viewComponents . View_Component ( 0 ) if Dialog . exec_ ( ) :              self . rellenar ( )   def copyComponent ( self ) :          sql . copyElement ( self . currentIndice ) self . rellenar ( )  def deleteComponent ( self ) :          sql . deleteElement ( self . currentIndice ) self . rellenar ( )   class UI_databank ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( UI_databank , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) self . databank = UI_databank_widget ( ) layout . addWidget ( self . databank ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) Dialog = UI_databank ( ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   