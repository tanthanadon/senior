from configparser import ConfigParser import os from PyQt5 import QtGui , QtWidgets from lib . config import conf_dir from lib . unidades import Temperature , Pressure from tools import ( UI_confComponents , UI_confTransport , UI_confThermo , UI_confUnits , UI_confResolution ) from lib import mEoS , gerg , refProp , coolProp from UI . widgets import Entrada_con_unidades def auto ( tmin = None , tmax = None , pmin = None , pmax = None , components = [ ] ) :      config = ConfigParser ( ) config = UI_confThermo . UI_confThermo_widget . default ( config ) GERG_available = True REFPROP_available = True for id in components :          if id not in gerg . id_GERG :              GERG_available = False  if id not in refProp . __all__ :              REFPROP_available = False   if len ( components ) == 1 and components [ 0 ] == 62 :          config . set ( <str> , <str> , <str> ) if os . environ [ <str> ] == <str> :              config . set ( <str> , <str> , <str> )   if len ( components ) == 1 and components [ 0 ] in mEoS . id_mEoS :          config . set ( <str> , <str> , <str> )  if os . environ [ <str> ] == <str> and len ( components ) == 1 and components [ 0 ] in coolProp . __all__ :              config . set ( <str> , <str> , <str> )  if os . environ [ <str> ] == <str> and REFPROP_available :          config . set ( <str> , <str> , <str> )  if GERG_available :          config . set ( <str> , <str> , <str> )  return config  class AutoDialog ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( AutoDialog , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . Tmin = Entrada_con_unidades ( Temperature ) layout . addWidget ( self . Tmin , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . Tmax = Entrada_con_unidades ( Temperature ) layout . addWidget ( self . Tmax , 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . Pmin = Entrada_con_unidades ( Pressure ) layout . addWidget ( self . Pmin , 3 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 ) self . Pmax = Entrada_con_unidades ( Pressure ) layout . addWidget ( self . Pmax , 4 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 5 , 1 , 1 , 2 )   class Wizard ( QtWidgets . QWizard ) :      def __init__ ( self , config = None , parent = None ) :          super ( Wizard , self ) . __init__ ( parent ) self . config = config self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . setOptions ( QtWidgets . QWizard . ExtendedWatermarkPixmap | QtWidgets . QWizard . IndependentPages | QtWidgets . QWizard . HaveCustomButton1 ) self . setWizardStyle ( QtWidgets . QWizard . ModernStyle ) botonAuto = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) botonAuto . setToolTip ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . setButton ( QtWidgets . QWizard . CustomButton1 , botonAuto ) self . customButtonClicked . connect ( self . auto ) page1_welcome = QtWidgets . QWizardPage ( ) page1_welcome . setTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page1_welcome . setSubTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page1_welcome . setPixmap ( QtWidgets . QWizard . LogoPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) page1_welcome . setPixmap ( QtWidgets . QWizard . WatermarkPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) lyt = QtWidgets . QVBoxLayout ( page1_welcome ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , ) ) ) self . addPage ( page1_welcome ) page2_components = QtWidgets . QWizardPage ( ) page2_components . setTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page2_components . setSubTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page2_components . setPixmap ( QtWidgets . QWizard . LogoPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) lyt = QtWidgets . QVBoxLayout ( page2_components ) self . componentes = UI_confComponents . UI_confComponents_widget ( config ) self . componentes . componentChanged . connect ( self . button ( QtWidgets . QWizard . NextButton ) . setEnabled ) lyt . addWidget ( self . componentes ) self . addPage ( page2_components ) page3_thermo = QtWidgets . QWizardPage ( ) page3_thermo . setTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page3_thermo . setSubTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page3_thermo . setPixmap ( QtWidgets . QWizard . LogoPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) lyt = QtWidgets . QVBoxLayout ( page3_thermo ) self . thermo = UI_confThermo . UI_confThermo_widget ( config ) lyt . addWidget ( self . thermo ) self . addPage ( page3_thermo ) page4_transport = QtWidgets . QWizardPage ( ) page4_transport . setTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page4_transport . setSubTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page4_transport . setPixmap ( QtWidgets . QWizard . LogoPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) lyt = QtWidgets . QVBoxLayout ( page4_transport ) self . transport = UI_confTransport . UI_confTransport_widget ( config ) lyt . addWidget ( self . transport ) self . addPage ( page4_transport ) page5_units = QtWidgets . QWizardPage ( ) page5_units . setTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page5_units . setSubTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) page5_units . setPixmap ( QtWidgets . QWizard . LogoPixmap , QtGui . QPixmap ( os . path . join ( os . environ [ <str> ] , <str> , <str> ) ) ) lyt = QtWidgets . QVBoxLayout ( page5_units ) self . units = UI_confUnits . UI_confUnits_widget ( config ) lyt . addWidget ( self . units ) self . addPage ( page5_units ) self . currentIdChanged . connect ( self . checkComponents )  def checkComponents ( self , id ) :          if id == 1 :              self . button ( QtWidgets . QWizard . NextButton ) . setEnabled ( len ( self . componentes . indices ) != 0 )  self . button ( QtWidgets . QWizard . CustomButton1 ) . setVisible ( id == 2 )  def auto ( self ) :          dialogo = AutoDialog ( ) if dialogo . exec_ ( ) :              tmin = dialogo . Tmin . value tmax = dialogo . Tmax . value pmin = dialogo . Pmin . value pmax = dialogo . Pmax . value config = auto ( tmin , tmax , pmin , pmax , self . componentes . indices ) self . thermo . setConfig ( config )   @ property def value ( self ) :          config = self . componentes . value ( self . config ) config = self . thermo . value ( config ) config = self . transport . value ( config ) config = self . units . value ( config ) if not config . has_section ( <str> ) :              config . add_section ( <str> ) Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) )  return config  @ classmethod def default ( cls ) :          config = ConfigParser ( ) config = UI_confComponents . UI_confComponents_widget . default ( config ) config = UI_confThermo . UI_confThermo_widget . default ( config ) config = UI_confTransport . UI_confTransport_widget . default ( config ) config = UI_confUnits . UI_confUnits_widget . default ( config ) config = UI_confResolution . UI_confResolution_widget . default ( config ) return config   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) ui = Wizard ( ) ui . show ( ) sys . exit ( app . exec_ ( ) )   