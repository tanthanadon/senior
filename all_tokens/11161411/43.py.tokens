from functools import partial from math import exp , log from PyQt5 import QtCore , QtGui , QtWidgets from numpy import all from scipy . special import erf from tools . UI_confThermo import UI_confThermo_widget from tools . UI_psychrometry import PsychroInput from lib import unidades , config from lib . corriente import Corriente , Solid , PsyStream from lib . thread import Evaluate from UI import texteditor from UI . widgets import Tabla , Entrada_con_unidades , Status class Ui_corriente ( QtWidgets . QWidget ) :      Changed = QtCore . pyqtSignal ( Corriente ) corriente = Corriente ( ) def __init__ ( self , corriente = None , readOnly = False , psychro = False , parent = None ) :          super ( Ui_corriente , self ) . __init__ ( parent ) title = QtWidgets . QApplication . translate ( <str> , <str> ) self . setWindowTitle ( title ) self . readOnly = readOnly self . psychro = psychro self . semaforo = QtCore . QSemaphore ( 1 ) self . evaluate = Evaluate ( ) self . evaluate . finished . connect ( self . repaint ) self . indices , self . nombres , M = config . getComponents ( ) self . solidos , nameSol , M = config . getComponents ( solidos = True ) gridLayout1 = QtWidgets . QVBoxLayout ( self ) self . toolBox = QtWidgets . QTabWidget ( ) self . toolBox . setTabPosition ( QtWidgets . QTabWidget . South ) gridLayout1 . addWidget ( self . toolBox ) self . pageDefinition = StreamDefinition ( ) self . pageDefinition . changedFraction . connect ( self . calculo ) self . pageDefinition . changedValue . connect ( self . calculo ) self . toolBox . addTab ( self . pageDefinition , QtGui . QIcon ( config . IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . pageConfig = UI_confThermo_widget ( ) self . toolBox . addTab ( self . pageConfig , QtGui . QIcon ( config . IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) if psychro :              self . pagePsychro = PsychroDefinition ( readOnly = readOnly ) self . pagePsychro . Changed . connect ( self . changePsychroState ) self . toolBox . addTab ( self . pagePsychro , QtGui . QIcon ( config . IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) )  self . pageSolids = SolidDefinition ( ) self . pageSolids . Changed . connect ( self . changeSolid ) self . toolBox . addTab ( self . pageSolids , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . pageSolids . setEnabled ( len ( self . solidos ) ) self . pageProperties = StreamProperties ( ) self . toolBox . addTab ( self . pageProperties , QtGui . QIcon ( config . IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . PageNotas = texteditor . TextEditor ( ) self . toolBox . addTab ( self . PageNotas , QtGui . QIcon ( config . IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) if corriente :              self . setCorriente ( corriente )  else :              self . corriente = Corriente ( ) self . repaint ( )  self . setReadOnly ( readOnly ) self . PageNotas . textChanged . connect ( self . corriente . setNotas )  def setReadOnly ( self , bool ) :          self . pageDefinition . setReadOnly ( bool ) self . pageSolids . setReadOnly ( bool )  def setCorriente ( self , corriente , psychro = True ) :          if corriente :              self . corriente = corriente self . repaint ( )   def changePsychroState ( self , stream ) :          self . setCorriente ( stream . corriente , False )  def changeSolid ( self , solido ) :          self . corriente . setSolid ( solido ) self . Changed . emit ( self . corriente )  def repaint ( self , psychro = True ) :          if self . semaforo . available ( ) > 0 :              self . semaforo . acquire ( 1 ) self . pageDefinition . setStream ( self . corriente ) self . pageConfig . setKwargs ( self . corriente . kwargs ) if psychro and self . psychro :                  psystream = self . corriente . psystream self . pagePsychro . setStream ( psystream )  self . pageSolids . setSolido ( self . corriente . solido ) self . PageNotas . setText ( self . corriente . notas ) self . pageProperties . fill ( self . corriente ) if isinstance ( self , QtWidgets . QDialog ) :                  self . status . setState ( self . corriente . status , self . corriente . msg )  if self . corriente . status == 1 :                  self . Changed . emit ( self . corriente )  self . semaforo . release ( 1 )   def calculo ( self , variable , valor ) :          if self . semaforo . available ( ) > 0 :              if isinstance ( self , QtWidgets . QDialog ) :                  self . status . setState ( 4 )  kwargs = self . pageConfig . kwargs kwargs [ variable ] = valor self . salida ( ** kwargs )   def clear ( self ) :          pass  def salida ( self , ** kwargs ) :          if not kwargs :              kwargs = self . pageDefinition . kwargs ( ) kwargs . update ( self . pageConfig . kwargs ) kwargs [ <str> ] = self . pageSolids . solido  if not self . evaluate . isRunning ( ) :              self . evaluate . start ( self . corriente , kwargs )    class Corriente_Dialog ( QtWidgets . QDialog , Ui_corriente ) :      Changed = QtCore . pyqtSignal ( Corriente ) corriente = Corriente ( ) def __init__ ( self , corriente = None , readOnly = False , psychro = False , parent = None ) :          layout = QtWidgets . QHBoxLayout ( ) self . status = Status ( ) layout . addWidget ( self . status ) buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Cancel ) buttonBox . accepted . connect ( self . accept ) buttonBox . rejected . connect ( self . reject ) layout . addWidget ( buttonBox ) super ( Corriente_Dialog , self ) . __init__ ( corriente , readOnly , psychro ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . layout ( ) . addLayout ( layout )   class StreamDefinition ( QtWidgets . QWidget ) :      changedValue = QtCore . pyqtSignal ( str , float ) changedFraction = QtCore . pyqtSignal ( str , list ) def __init__ ( self , stream = None , readOnly = False , parent = None ) :          super ( StreamDefinition , self ) . __init__ ( parent ) self . indices , self . nombres , M = config . getComponents ( ) lyt = QtWidgets . QGridLayout ( self ) lyt . setVerticalSpacing ( 0 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . T = Entrada_con_unidades ( unidades . Temperature ) self . T . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . T , 1 , 2 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . P = Entrada_con_unidades ( unidades . Pressure ) self . P . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . P , 2 , 2 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . x = Entrada_con_unidades ( float ) self . x . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . x , 3 , 2 , 1 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 4 , 1 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 5 , 1 ) self . caudalMasico = Entrada_con_unidades ( unidades . MassFlow ) self . caudalMasico . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . caudalMasico , 5 , 2 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 1 ) self . caudalMolar = Entrada_con_unidades ( unidades . MolarFlow ) self . caudalMolar . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . caudalMolar , 6 , 2 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 7 , 1 ) self . caudalVolumetrico = Entrada_con_unidades ( unidades . VolFlow ) self . caudalVolumetrico . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . caudalVolumetrico , 7 , 2 , 1 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 8 , 1 , 1 , 1 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 9 , 1 ) self . tipoFraccion = QtWidgets . QComboBox ( ) self . tipoFraccion . addItem ( unidades . MassFlow . text ( ) ) self . tipoFraccion . addItem ( unidades . MolarFlow . text ( ) ) self . tipoFraccion . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . tipoFraccion . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . tipoFraccion . setCurrentIndex ( 3 ) self . tipoFraccion . currentIndexChanged . connect ( self . tipoFraccionesCambiado ) self . tipoFraccion . setSizePolicy ( QtWidgets . QSizePolicy . Maximum , QtWidgets . QSizePolicy . Maximum ) lyt . addWidget ( self . tipoFraccion , 9 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 5 , 5 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 10 , 1 , 1 , 1 ) composition = QtWidgets . QWidget ( ) comp_lyt = QtWidgets . QGridLayout ( composition ) comp_lyt . setVerticalSpacing ( 0 ) self . xi = [ ] for i , nombre in enumerate ( self . nombres ) :              label = QtWidgets . QLabel ( nombre ) label . setAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) comp_lyt . addWidget ( label , i , 1 ) widget = Entrada_con_unidades ( float ) widget . valueChanged . connect ( self . changeFraction ) comp_lyt . addWidget ( widget , i , 2 ) self . xi . append ( widget )  scroll = QtWidgets . QScrollArea ( ) scroll . setFrameShape ( QtWidgets . QFrame . NoFrame ) scroll . setWidget ( composition ) lyt . addWidget ( scroll , 10 , 1 , 1 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 11 , 3 ) if stream :              self . setStream ( stream )  else :              self . stream = Corriente ( )   def setReadOnly ( self , bool ) :          self . T . setReadOnly ( bool ) self . P . setReadOnly ( bool ) self . x . setReadOnly ( bool ) self . caudalMasico . setReadOnly ( bool ) self . caudalMolar . setReadOnly ( bool ) self . caudalVolumetrico . setReadOnly ( bool ) for widget in self . xi :              widget . setReadOnly ( bool )   def setStream ( self , stream ) :          self . stream = stream if stream . status == 1 :              self . T . setValue ( stream . T ) self . setResaltado ( stream , <str> ) self . P . setValue ( stream . P ) self . setResaltado ( stream , <str> ) self . x . setValue ( stream . x ) self . setResaltado ( stream , <str> ) self . caudalMasico . setValue ( stream . caudalmasico ) self . setResaltado ( stream , <str> ) self . caudalMolar . setValue ( stream . caudalmolar ) self . setResaltado ( stream , <str> ) self . caudalVolumetrico . setValue ( stream . Q ) self . setResaltado ( stream , <str> ) if stream . tipoFlujo == 1 :                  self . tipoFraccion . setCurrentIndex ( 0 ) prop = stream . caudalunitariomasico  elif stream . tipoFlujo == 2 :                  self . tipoFraccion . setCurrentIndex ( 1 ) prop = stream . caudalunitariomolar  elif stream . tipoFlujo in ( 4 , 6 ) :                  self . tipoFraccion . setCurrentIndex ( 2 ) prop = stream . fraccion_masica  else :                  self . tipoFraccion . setCurrentIndex ( 3 ) prop = stream . fraccion  for value , widget in zip ( prop , self . xi ) :                  widget . setValue ( value )   elif stream . numInputs :              for input in [ <str> , <str> , <str> , <str> , <str> , <str> ] :                  if stream . kwargs [ input ] :                      self . __getattribute__ ( input ) . setValue ( stream . kwargs [ input ] ) self . __getattribute__ ( input ) . setResaltado ( True )  else :                      self . __getattribute__ ( input ) . clear ( ) self . __getattribute__ ( input ) . setResaltado ( False )   prop = None if stream . tipoFlujo == 1 :                  self . tipoFraccion . setCurrentIndex ( 0 ) propi = stream . kwargs [ <str> ] prop = [ ] for value in propi :                      prop . append ( unidades . MassFlow ( value ) . config ( ) )   elif stream . tipoFlujo == 2 :                  self . tipoFraccion . setCurrentIndex ( 1 ) propi = stream . kwargs [ <str> ] prop = [ ] for value in propi :                      prop . append ( unidades . MolarFlow ( value ) . config ( ) )   elif stream . tipoFlujo in ( 4 , 6 ) :                  self . tipoFraccion . setCurrentIndex ( 2 ) prop = stream . kwargs [ <str> ]  elif stream . tipoFlujo in ( 3 , 5 ) :                  self . tipoFraccion . setCurrentIndex ( 3 ) prop = stream . kwargs [ <str> ]  elif stream . kwargs [ <str> ] :                  self . tipoFraccion . setCurrentIndex ( 2 ) prop = stream . kwargs [ <str> ]  elif stream . kwargs [ <str> ] :                  self . tipoFraccion . setCurrentIndex ( 3 ) prop = stream . kwargs [ <str> ]  if prop :                  for value , widget in zip ( prop , self . xi ) :                      widget . setValue ( value )   if stream . tipoFlujo :                  self . caudalMolar . setValue ( stream . mezcla . caudalmolar ) self . caudalMasico . setValue ( stream . mezcla . caudalmasico )    def setResaltado ( self , stream , arg ) :              if stream . kwargs [ arg ] :                  self . __getattribute__ ( arg ) . setResaltado ( True )  else :                  self . __getattribute__ ( arg ) . setResaltado ( False )   def calculo ( self , key , value ) :          self . changedValue [ str , float ] . emit ( key , value )  def tipoFraccionesCambiado ( self , index ) :          values = None if self . stream . status == 1 :              if index == 0 :                  values = self . stream . caudalunitariomasico  elif index == 1 :                  values = self . stream . caudalunitariomolar  elif index == 2 :                  values = self . stream . fraccion_masica  else :                  values = self . stream . fraccion   elif self . stream . tipoFlujo :              if index == 0 :                  values = self . stream . mezcla . caudalunitariomasico  elif index == 1 :                  values = self . stream . mezcla . caudalunitariomolar  elif index == 2 :                  values = self . stream . mezcla . fraccion_masica  else :                  values = self . stream . mezcla . fraccion   if values :              for value , widget in zip ( values , self . xi ) :                  widget . setValue ( value . config ( ) )    def composicionEntrada ( self ) :          key = [ <str> , <str> , <str> , <str> ] [ self . tipoFraccion . currentIndex ( ) ] values = [ ] for widget in self . xi :              if self . tipoFraccion . currentIndex ( ) == 0 :                  value = unidades . MassFlow ( widget . value , <str> )  elif self . tipoFraccion . currentIndex ( ) == 1 :                  value = unidades . MolarFlow ( widget . value , <str> )  else :                  value = widget . value  values . append ( value )  return key , values  def changeFraction ( self ) :          key , values = self . composicionEntrada ( ) if sum ( values ) == 1.0 or all ( values ) :              self . changedFraction [ str , list ] . emit ( key , values )   def kwargs ( self ) :          kwargs = { } kwargs [ <str> ] = self . T . value kwargs [ <str> ] = self . P . value kwargs [ <str> ] = self . x . value kwargs [ <str> ] = self . caudal . value kwargs [ <str> ] = self . caudalMolar . value kwargs [ <str> ] = self . caudalVol . value key , fraction = self . composicionEntrada ( ) kwargs [ key ] = fraction return kwargs   class PsychroDefinition ( QtWidgets . QWidget ) :      Changed = QtCore . pyqtSignal ( PsyStream ) parameters = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stream = PsyStream ( ) def __init__ ( self , psystream = None , readOnly = False , parent = None ) :          super ( PsychroDefinition , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) self . inputs = PsychroInput ( ) self . inputs . stateChanged . connect ( partial ( self . calculo , <str> ) ) layout . addWidget ( self . inputs , 1 , 1 , 1 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 1 , 3 ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 2 , 1 ) vlayout = QtWidgets . QVBoxLayout ( ) layout . addLayout ( vlayout , 1 , 4 , 6 , 1 ) vlayout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) ) groupbox = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) vlayout . addWidget ( groupbox ) lytGroup = QtWidgets . QGridLayout ( groupbox ) lytGroup . addWidget ( QtWidgets . QLabel ( <str> ) , 1 , 1 ) self . tdb = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) lytGroup . addWidget ( self . tdb , 1 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( <str> ) , 2 , 1 ) self . twb = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) lytGroup . addWidget ( self . twb , 2 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 1 ) self . tdp = Entrada_con_unidades ( unidades . Temperature , readOnly = True ) lytGroup . addWidget ( self . tdp , 3 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 ) massUnit = unidades . Mass ( None ) . text ( ) + <str> + unidades . Mass ( None ) . text ( ) self . w = Entrada_con_unidades ( float , readOnly = True , textounidad = massUnit ) lytGroup . addWidget ( self . w , 4 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 5 , 1 ) self . mu = Entrada_con_unidades ( float , readOnly = True , textounidad = <str> ) lytGroup . addWidget ( self . mu , 5 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 6 , 1 ) self . HR = Entrada_con_unidades ( float , readOnly = True , textounidad = <str> ) lytGroup . addWidget ( self . HR , 6 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 7 , 1 ) self . v = Entrada_con_unidades ( unidades . SpecificVolume , readOnly = True ) lytGroup . addWidget ( self . v , 7 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 8 , 1 ) self . h = Entrada_con_unidades ( unidades . Enthalpy , readOnly = True ) lytGroup . addWidget ( self . h , 8 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 9 , 1 ) self . Pv = Entrada_con_unidades ( unidades . Pressure , readOnly = True ) lytGroup . addWidget ( self . Pv , 9 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 10 , 1 ) self . Xa = Entrada_con_unidades ( float , readOnly = True ) lytGroup . addWidget ( self . Xa , 10 , 2 ) lytGroup . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 11 , 1 ) self . Xw = Entrada_con_unidades ( float , readOnly = True ) lytGroup . addWidget ( self . Xw , 11 , 2 ) vlayout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . caudalMasico = Entrada_con_unidades ( unidades . MassFlow , readOnly = readOnly ) self . caudalMasico . valueChanged . connect ( partial ( self . updatekwargsFlow , <str> ) ) layout . addWidget ( self . caudalMasico , 3 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 1 ) self . caudalMolar = Entrada_con_unidades ( unidades . MolarFlow , readOnly = readOnly ) self . caudalMolar . valueChanged . connect ( partial ( self . updatekwargsFlow , <str> ) ) layout . addWidget ( self . caudalMolar , 4 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 5 , 1 ) self . caudalVolumetrico = Entrada_con_unidades ( unidades . VolFlow , readOnly = readOnly ) self . caudalVolumetrico . valueChanged . connect ( partial ( self . updatekwargsFlow , <str> ) ) layout . addWidget ( self . caudalVolumetrico , 5 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 5 , 5 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 9 , 2 ) self . setReadOnly ( readOnly ) self . inputs . updateInputs ( 0 ) if psystream :              self . setStream ( psystream )   def setStream ( self , stream ) :          self . stream = stream self . rellenar ( stream )  def setReadOnly ( self , readOnly ) :          self . inputs . setReadOnly ( readOnly ) self . caudalMasico . setReadOnly ( readOnly ) self . caudalMolar . setReadOnly ( readOnly ) self . caudalVolumetrico . setReadOnly ( readOnly )  def calculo ( self , key , value ) :          self . stream ( ** { key : value } ) if self . stream :              self . rellenar ( self . stream ) if self . stream . status :                  self . Changed . emit ( self . stream )    def rellenar ( self , stream ) :          state = None if stream . status :              state = stream . state  elif stream . kwargs [ <str> ] :              state = stream . kwargs [ <str> ]  if state :              self . inputs . setState ( state ) for par in self . parameters :                  self . __getattribute__ ( par ) . setValue ( state . __getattribute__ ( par ) )   self . rellenarFlow ( stream )  def rellenarFlow ( self , stream ) :          for arg in ( <str> , <str> , <str> ) :              if stream . kwargs [ arg ] :                  self . __getattribute__ ( arg ) . setValue ( stream . kwargs [ arg ] )  else :                  self . __getattribute__ ( arg ) . clear ( )    def updatekwargsFlow ( self , key , value ) :          self . stream . updatekwargsFlow ( key , value ) self . rellenarFlow ( self . stream ) if self . stream . status :              self . Changed . emit ( self . stream )    class StreamProperties ( QtWidgets . QTableWidget ) :      def __init__ ( self , stream = None , parent = None ) :          super ( StreamProperties , self ) . __init__ ( 11 , 2 , parent ) for i in range ( self . rowCount ( ) ) :              self . setRowHeight ( i , 24 )  self . setColumnWidth ( 0 , 85 ) self . setColumnWidth ( 1 , 85 ) self . setEditTriggers ( QtWidgets . QAbstractItemView . NoEditTriggers ) self . horizontalHeader ( ) . setSectionResizeMode ( QtWidgets . QHeaderView . Fixed ) self . verticalHeader ( ) . setSectionResizeMode ( QtWidgets . QHeaderView . Fixed ) self . horizontalHeader ( ) . resizeSections ( QtWidgets . QHeaderView . Fixed ) horheader = [ QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] self . setHorizontalHeaderLabels ( horheader ) verheader = [ QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . MassFlow ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . MolarFlow ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . VolFlow ( None ) . text ( <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . Power ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . Density ( None ) . text ( <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . SpecificHeat ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . Viscosity ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . ThermalConductivity ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . Tension ( None ) . text ( ) ] self . setVerticalHeaderLabels ( verheader ) self . CaudalLiquido = Entrada_con_unidades ( unidades . MassFlow , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 0 , 0 , self . CaudalLiquido ) self . CaudalGas = Entrada_con_unidades ( unidades . MassFlow , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 0 , 1 , self . CaudalGas ) self . CaudalMolarLiquido = Entrada_con_unidades ( unidades . MolarFlow , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 1 , 0 , self . CaudalMolarLiquido ) self . CaudalMolarGas = Entrada_con_unidades ( unidades . MolarFlow , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 1 , 1 , self . CaudalMolarGas ) self . CaudalVolumetricoLiquido = Entrada_con_unidades ( unidades . VolFlow , <str> , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 2 , 0 , self . CaudalVolumetricoLiquido ) self . CaudalVolumetricoGas = Entrada_con_unidades ( unidades . VolFlow , <str> , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 2 , 1 , self . CaudalVolumetricoGas ) self . entalpiaLiquido = Entrada_con_unidades ( unidades . Power , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 3 , 0 , self . entalpiaLiquido ) self . entalpiaGas = Entrada_con_unidades ( unidades . Power , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 3 , 1 , self . entalpiaGas ) self . PesoMolecularLiquido = Entrada_con_unidades ( float , readOnly = True ) self . setCellWidget ( 4 , 0 , self . PesoMolecularLiquido ) self . PesoMolecularGas = Entrada_con_unidades ( float , readOnly = True ) self . setCellWidget ( 4 , 1 , self . PesoMolecularGas ) self . DensidadLiquido = Entrada_con_unidades ( unidades . Density , <str> , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 5 , 0 , self . DensidadLiquido ) self . DensidadGas = Entrada_con_unidades ( unidades . Density , <str> , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 5 , 1 , self . DensidadGas ) self . ZLiquido = Entrada_con_unidades ( float , readOnly = True ) self . setCellWidget ( 6 , 0 , self . ZLiquido ) self . ZGas = Entrada_con_unidades ( float , readOnly = True ) self . setCellWidget ( 6 , 1 , self . ZGas ) self . CpLiquido = Entrada_con_unidades ( unidades . SpecificHeat , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 7 , 0 , self . CpLiquido ) self . CpGas = Entrada_con_unidades ( unidades . SpecificHeat , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 7 , 1 , self . CpGas ) self . ViscosidadLiquido = Entrada_con_unidades ( unidades . Viscosity , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 8 , 0 , self . ViscosidadLiquido ) self . ViscosidadGas = Entrada_con_unidades ( unidades . Viscosity , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 8 , 1 , self . ViscosidadGas ) self . ConductividadLiquido = Entrada_con_unidades ( unidades . ThermalConductivity , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 9 , 0 , self . ConductividadLiquido ) self . ConductividadGas = Entrada_con_unidades ( unidades . ThermalConductivity , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 9 , 1 , self . ConductividadGas ) self . Tension = Entrada_con_unidades ( unidades . Tension , retornar = False , readOnly = True , texto = False ) self . setCellWidget ( 10 , 0 , self . Tension ) if stream :              self . fill ( stream )   def fill ( self , stream ) :          if stream . status == 1 :              if stream . x > 0 :                  self . CaudalGas . setValue ( stream . Gas . caudalmasico ) self . CaudalMolarGas . setValue ( stream . Gas . caudalmolar ) self . entalpiaGas . setValue ( stream . Gas . h ) self . PesoMolecularGas . setValue ( stream . Gas . M ) self . DensidadGas . setValue ( stream . Gas . rho ) self . CaudalVolumetricoGas . setValue ( stream . Gas . Q ) self . ZGas . setValue ( stream . Gas . Z ) self . CpGas . setValue ( stream . Gas . cp ) self . ViscosidadGas . setValue ( stream . Gas . mu ) self . ConductividadGas . setValue ( stream . Gas . k )  if stream . x < 1 :                  self . CaudalLiquido . setValue ( stream . Liquido . caudalmasico ) self . CaudalMolarLiquido . setValue ( stream . Liquido . caudalmolar ) self . entalpiaLiquido . setValue ( stream . Liquido . h ) self . PesoMolecularLiquido . setValue ( stream . Liquido . M ) self . DensidadLiquido . setValue ( stream . Liquido . rho ) self . CaudalVolumetricoLiquido . setValue ( stream . Liquido . Q ) self . ZLiquido . setValue ( stream . Liquido . Z ) self . CpLiquido . setValue ( stream . Liquido . cp ) self . ViscosidadLiquido . setValue ( stream . Liquido . mu ) self . ConductividadLiquido . setValue ( stream . Liquido . k ) self . Tension . setValue ( stream . Liquido . sigma )     class SolidDefinition ( QtWidgets . QWidget ) :      Changed = QtCore . pyqtSignal ( Solid ) solido = Solid ( ) def __init__ ( self , solid = None , readOnly = False , parent = None ) :          super ( SolidDefinition , self ) . __init__ ( parent ) self . solidos , self . NameSol , M = config . getComponents ( solidos = True ) self . semaforo = QtCore . QSemaphore ( 1 ) self . evaluate = Evaluate ( ) lyt = QtWidgets . QGridLayout ( self ) composition = QtWidgets . QWidget ( ) comp_lyt = QtWidgets . QGridLayout ( composition ) comp_lyt . setVerticalSpacing ( 0 ) self . CaudalSolidos = [ ] for i , nombre in enumerate ( self . NameSol ) :              label = QtWidgets . QLabel ( nombre ) label . setAlignment ( QtCore . Qt . AlignRight | QtCore . Qt . AlignVCenter ) comp_lyt . addWidget ( label , i , 1 ) widget = Entrada_con_unidades ( unidades . MassFlow ) widget . valueChanged . connect ( self . caudalesSolidoFinished ) comp_lyt . addWidget ( widget , i , 2 ) self . CaudalSolidos . append ( widget )  scroll = QtWidgets . QScrollArea ( ) scroll . setFrameShape ( QtWidgets . QFrame . NoFrame ) scroll . setMinimumHeight ( min ( 100 , 30 * len ( M ) ) ) scroll . setWidget ( composition ) lyt . addWidget ( scroll , 1 , 1 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 , 1 , 1 ) self . diametroParticula = Entrada_con_unidades ( unidades . Length , <str> ) self . diametroParticula . valueChanged . connect ( partial ( self . calculo , <str> ) ) lyt . addWidget ( self . diametroParticula , 3 , 2 , 1 , 1 ) self . checkDistribucion = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkDistribucion . toggled . connect ( self . checkDistributionToggled ) lyt . addWidget ( self . checkDistribucion , 5 , 1 , 1 , 2 ) header = [ QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + unidades . Length . text ( <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] self . distribucionTamanos = Tabla ( 2 , horizontalHeader = header , stretch = False , verticalHeader = False ) self . distribucionTamanos . editingFinished . connect ( self . distribucionFinished ) lyt . addWidget ( self . distribucionTamanos , 6 , 1 , 1 , 2 ) dialog = self . buttonBox = QtWidgets . QDialogButtonBox ( ) self . botonNormalizar = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonNormalizar . clicked . connect ( self . botonNormalizar_clicked ) dialog . addButton ( self . botonNormalizar , QtWidgets . QDialogButtonBox . AcceptRole ) self . botonGenerar = QtWidgets . QPushButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonGenerar . clicked . connect ( self . botonGenerar_clicked ) dialog . addButton ( self . botonGenerar , QtWidgets . QDialogButtonBox . AcceptRole ) lyt . addWidget ( dialog , 7 , 1 , 1 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 8 , 3 ) self . distribucionTamanos . setConnected ( ) self . setSolido ( solid )  def setSolido ( self , solido ) :          if solido :              self . solido = solido self . fill ( )   def fill ( self ) :          if self . semaforo . available ( ) > 0 :              self . semaforo . acquire ( 1 ) if self . solido . status :                  for i , caudal in enumerate ( self . solido . caudalUnitario ) :                      self . CaudalSolidos [ i ] . setValue ( caudal )  if self . solido . status == 1 :                      self . checkDistribucion . setChecked ( False )  else :                      self . checkDistribucion . setChecked ( True )  if self . solido . diametros :                      diametros = [ d . config ( <str> ) for d in self . solido . diametros ] self . distribucionTamanos . setColumn ( 0 , diametros ) self . distribucionTamanos . setColumn ( 1 , self . solido . fracciones )  self . diametroParticula . setValue ( self . solido . diametro_medio )  else :                  pass  self . semaforo . release ( 1 )   def setReadOnly ( self , bool ) :          for w in self . CaudalSolidos :              w . setReadOnly ( bool )  self . diametroParticula . setReadOnly ( bool ) self . checkDistribucion . setDisabled ( bool ) if bool :              triggers = QtWidgets . QAbstractItemView . NoEditTriggers  else :              triggers = QtWidgets . QAbstractItemView . AllEditTriggers  self . distribucionTamanos . setEditTriggers ( triggers )  def distribucionFinished ( self ) :          conversion = unidades . Length ( 1 , <str> , <str> ) . m diametros = [ diametro * conversion for diametro in self . distribucionTamanos . getColumn ( 0 , False ) ] fracciones = self . distribucionTamanos . getColumn ( 1 , False ) if diametros :              kwargs = { <str> : diametros , <str> : fracciones } self . calculo ( ** kwargs )   def caudalesSolidoFinished ( self ) :          caudales = self . caudalSolido ( ) self . calculo ( <str> , caudales )  def caudalSolido ( self ) :          caudales = [ ] for widget in self . CaudalSolidos :              caudales . append ( widget . value )  return caudales  def checkDistributionToggled ( self , bool ) :          self . distribucionTamanos . setEnabled ( bool ) self . botonGenerar . setEnabled ( bool ) self . botonNormalizar . setEnabled ( bool ) self . diametroParticula . setDisabled ( bool ) if bool :              self . solido . kwargs [ <str> ] = None self . distribucionFinished ( )  else :              self . solido . kwargs [ <str> ] = [ ] self . solido . kwargs [ <str> ] = [ ] self . calculo ( <str> , self . diametroParticula . value )   def botonNormalizar_clicked ( self , diametros = None , fracciones = None ) :          if not diametros :              diametros = self . distribucionTamanos . getColumn ( 0 , False )  if not fracciones :              fracciones = self . distribucionTamanos . getColumn ( 1 , False )  if diametros :              diametros . sort ( ) suma = sum ( fracciones ) fracciones = [ fraccion / suma for fraccion in fracciones ] self . distribucionTamanos . setColumn ( 0 , diametros ) self . distribucionTamanos . setColumn ( 1 , fracciones )   def botonGenerar_clicked ( self ) :          dialog = SolidDistribution ( self ) if dialog . exec_ ( ) :              self . distribucionTamanos . setData ( dialog . matriz )   def calculo ( self , key = None , value = None , ** kw ) :          if key :              kw [ key ] = value  self . solido ( ** kw ) if self . solido :              self . fill ( ) self . Changed . emit ( self . solido )    class SolidDistribution ( QtWidgets . QDialog ) :      Sieve = { <str> : [ 0.033 , 0.043 , 0.053 , 0.061 , 0.074 , 0.088 , 0.104 , 0.121 , 0.147 , 0.173 , 0.208 , 0.246 , 0.295 , 0.351 , 0.417 , 0.495 , 0.589 , 0.701 , 0.833 , 0.991 , 1.168 , 1.397 , 1.651 , 1.981 , 2.362 , 2.794 , 3.327 , 3.962 , 4.699 , 5.613 , 6.680 , 7.925 ] , <str> : [ 0.02 , 0.025 , 0.032 , 0.038 , 0.045 , 0.053 , 0.063 , 0.075 , 0.09 , 0.106 , 0.125 , 0.150 , 0.180 , 0.212 , 0.250 , 0.300 , 0.355 , 0.425 , 0.5 , 0.6 , 0.71 , 0.85 , 1. , 1.18 , 1.4 , 1.7 , 2. , 2.36 , 2.8 , 3.35 , 4. , 4.75 , 5.6 , 6.3 , 6.7 , 8. , 9.5 , 11.2 , 12.5 , 13.2 , 16.0 , 19. , 22.4 , 25. , 26.5 , 31.5 , 37.5 , 45. , 50. , 53. , 63. , 75. , 90. , 100. , 106. , 125 ] , <str> : [ 0.02 , 0.022 , 0.025 , 0.028 , 0.032 , 0.036 , 0.04 , 0.045 , 0.05 , 0.056 , 0.063 , 0.071 , 0.08 , 0.09 , 0.1 , 0.125 , 0.14 , 0.18 , 0.2 , 0.224 , 0.25 , 0.28 , 0.315 , 0.355 , 0.4 , 0.5 , 0.56 , 0.63 , 0.71 , 0.8 , 0.9 , 1.0 , 1.18 , 1.25 , 1.4 , 1.6 , 1.8 , 2. , 2.24 , 2.5 , 2.8 , 3.15 , 3.55 , 4. , 4.5 , 5. , 5.6 ] , <str> : [ 0.02 , 0.022 , 0.025 , 0.028 , 0.032 , 0.036 , 0.04 , 0.045 , 0.05 , 0.056 , 0.063 , 0.071 , 0.08 , 0.09 , 0.1 , 0.125 , 0.14 , 0.16 , 0.18 , 0.2 , 0.224 , 0.25 , 0.28 , 0.315 , 0.355 , 0.4 , 0.45 , 0.5 , 0.56 , 0.63 , 0.71 , 0.8 , 0.9 , 1.0 , 1.18 , 1.25 , 1.4 , 1.6 , 1.8 , 2. , 2.24 , 2.5 , 3.15 , 3.55 , 4. , 4.5 , 5. , 5.6 ] , <str> : [ 0.02 , 0.022 , 0.025 , 0.028 , 0.032 , 0.036 , 0.045 , 0.05 , 0.063 , 0.071 , 0.08 , 0.09 , 0.1 , 0.125 , 0.14 , 0.18 , 0.2 , 0.224 , 0.25 , 0.28 , 0.315 , 0.355 , 0.4 , 0.45 , 0.63 , 0.71 , 0.8 , 0.9 , 1.0 , 1.18 , 1.25 , 1.4 , 1.6 , 1.8 , 2 , 2.24 , 2.5 , 2.8 , 3.15 , 3.55 , 4 , 4.5 , 5 , 5.6 ] , <str> : [ 0.045 , 0.053 , 0.063 , 0.075 , 0.09 , 0.106 , 0.125 , 0.15 , 0.18 , 0.212 , 0.25 , 0.3 , 0.355 , 0.425 , 0.5 , 0.6 , 0.71 , 0.85 , 1.0 , 1.18 , 1.4 , 1.7 , 2.0 , 2.36 , 2.8 , 3.35 , 4.0 , 4.75 , 5.6 ] } model = { <str> : { <str> : [ <str> , <str> ] , <str> : [ unidades . Length , float ] , <str> : [ <str> , <str> ] } , <str> : { <str> : [ <str> , <str> ] , <str> : [ unidades . Length , float ] , <str> : [ <str> , <str> ] } , <str> : { <str> : [ <str> , <str> ] , <str> : [ unidades . Length , float ] , <str> : [ <str> , <str> ] } , <str> : { <str> : [ <str> , <str> ] , <str> : [ unidades . Length , float ] , <str> : [ <str> , <str> ] } , <str> : { <str> : [ <str> , <str> ] , <str> : [ unidades . Length , float ] , <str> : [ <str> , <str> ] } , <str> : { <str> : [ <str> , <str> , <str> ] , <str> : [ unidades . Length , float , float ] , <str> : [ <str> , <str> , <str> ] } } def __init__ ( self , parent = None ) :          super ( SolidDistribution , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . matriz = [ ] layout = QtWidgets . QGridLayout ( self ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 0 , 0 ) self . modelo = QtWidgets . QComboBox ( ) layout . addWidget ( self . modelo , 0 , 1 ) self . stacked = QtWidgets . QStackedWidget ( ) self . modelo . currentIndexChanged . connect ( self . stacked . setCurrentIndex ) layout . addWidget ( self . stacked , 1 , 0 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 0 , 1 , 1 ) self . standard = QtWidgets . QComboBox ( ) self . standard . addItem ( <str> ) self . standard . addItem ( <str> ) self . standard . addItem ( <str> ) self . standard . addItem ( <str> ) self . standard . addItem ( <str> ) self . standard . addItem ( <str> ) self . standard . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . standard . currentIndexChanged [ str ] . connect ( self . standardCambiado ) layout . addWidget ( self . standard , 2 , 1 , 1 , 1 ) self . diametros = QtWidgets . QLineEdit ( ) layout . addWidget ( self . diametros , 3 , 1 , 1 , 2 ) layout . addItem ( QtWidgets . QSpacerItem ( 20 , 20 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 4 , 1 , 1 , 3 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . rejected . connect ( self . reject ) self . buttonBox . accepted . connect ( self . aceptar ) layout . addWidget ( self . buttonBox , 5 , 0 , 1 , 2 ) self . entries = { } for key in ( <str> , <str> , <str> , <str> , <str> , <str> ) :              widget = QtWidgets . QWidget ( ) self . modelo . addItem ( key ) lyt = QtWidgets . QGridLayout ( widget ) for i , label in enumerate ( self . model [ key ] [ <str> ] ) :                  lyt . addWidget ( QtWidgets . QLabel ( label ) , i , 1 )  self . entries [ key ] = [ ] for i , unit in enumerate ( self . model [ key ] [ <str> ] ) :                  entry = Entrada_con_unidades ( unit , self . model [ key ] [ <str> ] [ i ] ) self . entries [ key ] . append ( entry ) lyt . addWidget ( entry , i , 2 )  lyt . addItem ( QtWidgets . QSpacerItem ( 0 , 0 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , i + 1 , 1 ) self . stacked . addWidget ( widget )  self . standardCambiado ( <str> )  def standardCambiado ( self , txt ) :          if txt == QtWidgets . QApplication . translate ( <str> , <str> ) :              self . diametros . setEnabled ( True )  else :              self . diametros . setEnabled ( False ) self . estandares = self . Sieve [ str ( txt ) ]   def aceptar ( self ) :          if self . standard . currentIndex ( ) < 6 :              d = self . estandares  else :              pass  if self . modelo . currentIndex ( ) == 0 :              funcion = lambda p , d : 1. - exp ( - ( d / p [ 0 ] / 1000. ) ** p [ 1 ] ) parametros = [ i . value for i in self . entries [ <str> ] ]  elif self . modelo . currentIndex ( ) == 1 :              funcion = lambda p , d : ( d / p [ 0 ] / 1000. ) ** p [ 1 ] parametros = [ i . value for i in self . entries [ <str> ] ]  elif self . modelo . currentIndex ( ) == 2 :              funcion = lambda p , d : 1 - ( 1 - d / p [ 0 ] / 1000. ) ** p [ 1 ] parametros = [ i . value for i in self . entries [ <str> ] ]  elif self . modelo . currentIndex ( ) == 3 :              funcion = lambda p , d : 1. - exp ( - ( d / p [ 0 ] / 1000. ) ** p [ 1 ] ) / ( 1 - exp ( - 1. ) ) parametros = [ i . value for i in self . entries [ <str> ] ]  elif self . modelo . currentIndex ( ) == 4 :              funcion = lambda p , d : erf ( log ( d / p [ 0 ] / 1000. ) / p [ 1 ] ) parametros = [ i . value for i in self . entries [ <str> ] ]  elif self . modelo . currentIndex ( ) == 5 :              funcion = lambda p , d : 1 - ( 1 - d / ( p [ 0 ] / 1000. ) ** p [ 1 ] ) ** p [ 2 ] parametros = [ i . value for i in self . entries [ <str> ] ]  diametros = [ unidades . Length ( x ) for x in d ] acumulado = [ 0 ] + [ funcion ( parametros , x ) for x in d ] if acumulado [ - 1 ] < 1. :              acumulado [ - 1 ] = 1.  diferencia = [ acumulado [ i + 1 ] - acumulado [ i ] for i in range ( len ( d ) ) ] self . matriz = [ [ di . config ( <str> ) , diff ] for di , diff in zip ( diametros , diferencia ) ] self . accept ( )   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) kw = { <str> : False , <str> : True , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 1 } corriente = Corriente ( T = 300. , x = 0.8 , caudalMasico = 1. , fraccionMolar = [ 1. ] , ** kw ) dialogo = Corriente_Dialog ( ) dialogo . show ( ) sys . exit ( app . exec_ ( ) )   