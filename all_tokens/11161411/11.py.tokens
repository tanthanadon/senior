import os from functools import partial from configparser import ConfigParser from PyQt5 import QtGui , QtWidgets from lib import unidades from lib . config import conf_dir class UI_confUnits_widget ( QtWidgets . QWidget ) :      def __init__ ( self , config = None , parent = None ) :          super ( UI_confUnits_widget , self ) . __init__ ( parent ) layout = QtWidgets . QGridLayout ( self ) systems = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) systems . setSizePolicy ( QtWidgets . QSizePolicy . Preferred , QtWidgets . QSizePolicy . Fixed ) layout . addWidget ( systems , 1 , 1 , 1 , 2 ) lytSystems = QtWidgets . QHBoxLayout ( systems ) self . SI = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . SI . toggled . connect ( partial ( self . load , <str> ) ) lytSystems . addWidget ( self . SI ) self . AltSI = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . AltSI . toggled . connect ( partial ( self . load , <str> ) ) lytSystems . addWidget ( self . AltSI ) self . English = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . English . toggled . connect ( partial ( self . load , <str> ) ) lytSystems . addWidget ( self . English ) self . Metric = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Metric . toggled . connect ( partial ( self . load , <str> ) ) lytSystems . addWidget ( self . Metric ) self . CGS = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . CGS . toggled . connect ( partial ( self . load , <str> ) ) lytSystems . addWidget ( self . CGS ) layout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 2 , 1 , 1 , 2 ) self . tabla = QtWidgets . QTableWidget ( ) layout . addWidget ( self . tabla , 3 , 1 , 5 , 1 ) self . tabla . setRowCount ( len ( unidades . _magnitudes ) - 1 ) self . tabla . setColumnCount ( 1 ) self . tabla . horizontalHeader ( ) . setVisible ( False ) self . combos = [ ] for i , magnitud in enumerate ( unidades . _magnitudes [ : - 1 ] ) :              self . tabla . setVerticalHeaderItem ( i , QtWidgets . QTableWidgetItem ( magnitud [ 1 ] ) ) self . tabla . setRowHeight ( i , 24 ) combo = QtWidgets . QComboBox ( ) if magnitud [ 0 ] == <str> :                  for texto , unidad in zip ( magnitud [ 2 ] . __text__ , magnitud [ 2 ] . __units__ ) :                      combo . addItem ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> % unidad ) ) , texto + <str> + unidad )   else :                  for unidad in magnitud [ 2 ] . __text__ :                      combo . addItem ( unidad )   self . combos . append ( combo ) self . tabla . setCellWidget ( i , 0 , combo )  self . tabla . resizeColumnToContents ( 0 ) self . tabla . setFixedWidth ( self . tabla . verticalHeader ( ) . sizeHint ( ) . width ( ) + self . tabla . columnWidth ( 0 ) + 20 ) self . nombre = QtWidgets . QLineEdit ( ) self . nombre . textChanged . connect ( self . nameChanged ) layout . addWidget ( self . nombre , 3 , 2 ) self . Guardar = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Guardar . setEnabled ( False ) self . Guardar . clicked . connect ( self . guardar ) layout . addWidget ( self . Guardar , 4 , 2 ) self . perfiles = QtWidgets . QComboBox ( ) layout . addWidget ( self . perfiles , 6 , 2 ) self . Cargar = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Cargar . clicked . connect ( self . load ) layout . addWidget ( self . Cargar , 7 , 2 ) self . actualizar_lista_perfiles ( ) if config and config . has_section ( <str> ) :              if config . getint ( <str> , <str> ) == 0 :                  self . SI . setChecked ( True ) self . load ( <str> )  elif config . getint ( <str> , <str> ) == 1 :                  self . Metric . setChecked ( True ) self . load ( <str> )  elif config . getint ( <str> , <str> ) == 2 :                  self . CGS . setChecked ( True ) self . load ( <str> )  elif config . getint ( <str> , <str> ) == 3 :                  self . English . setChecked ( True ) self . load ( <str> )  elif config . getint ( <str> , <str> ) == 4 :                  self . AltSI . setChecked ( True ) self . load ( <str> )  for combo , magnitud in zip ( self . combos , unidades . _magnitudes [ : - 1 ] ) :                  combo . setCurrentIndex ( config . getint ( <str> , magnitud [ 0 ] ) )    def actualizar_lista_perfiles ( self ) :          self . perfiles . clear ( ) if os . path . isfile ( conf_dir + <str> ) :              Config = ConfigParser ( ) Config . read ( conf_dir + <str> ) for i in Config . options ( <str> ) :                  self . perfiles . addItem ( QtWidgets . QApplication . translate ( <str> , i ) )  self . perfiles . setEnabled ( True ) self . Cargar . setEnabled ( True )  else :              self . perfiles . setEnabled ( False ) self . Cargar . setEnabled ( False )   def guardar ( self ) :          lista = [ ] for combo in self . combos :              lista . append ( combo . currentIndex ( ) )  Config = ConfigParser ( ) if os . path . isfile ( conf_dir + <str> ) :              Config . read ( conf_dir + <str> )  else :              Config . add_section ( <str> )  Config . set ( <str> , str ( self . nombre . text ( ) ) , lista ) Config . write ( open ( conf_dir + <str> , <str> ) ) self . actualizar_lista_perfiles ( )  def nameChanged ( self , nombre ) :          if nombre :              self . Guardar . setEnabled ( True )  else :              self . Guardar . setEnabled ( False )   def load ( self , set = None ) :          if set :              lista = unidades . units_set [ set ]  else :              Config = ConfigParser ( ) Config . read ( conf_dir + <str> ) lista = eval ( Config . get ( <str> , str ( self . perfiles . currentText ( ) ) ) )  for combo , indice in zip ( self . combos , lista ) :              combo . setCurrentIndex ( indice )   def value ( self , config ) :          if not config . has_section ( <str> ) :              config . add_section ( <str> )  if self . SI . isChecked ( ) :              config . set ( <str> , <str> , <str> )  elif self . Metric . isChecked ( ) :              config . set ( <str> , <str> , <str> )  elif self . CGS . isChecked ( ) :              config . set ( <str> , <str> , <str> )  elif self . English . isChecked ( ) :              config . set ( <str> , <str> , <str> )  elif self . AltSI . isChecked ( ) :              config . set ( <str> , <str> , <str> )  else :              config . set ( <str> , <str> , <str> )  for combo , magnitud in zip ( self . combos , unidades . _magnitudes [ : - 1 ] ) :              config . set ( <str> , magnitud [ 0 ] , str ( combo . currentIndex ( ) ) )  return config  @ classmethod def default ( cls , config ) :          config . add_section ( <str> ) config . set ( <str> , <str> , <str> ) for magnitud in unidades . _magnitudes [ : - 1 ] :              config . set ( <str> , magnitud [ 0 ] , <str> )  return config   class Dialog ( QtWidgets . QDialog ) :      def __init__ ( self , config = None , parent = None ) :          super ( Dialog , self ) . __init__ ( parent ) self . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QVBoxLayout ( self ) self . datos = UI_confUnits_widget ( config ) layout . addWidget ( self . datos ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox )  def value ( self , config ) :          config = self . datos . value ( config ) return config   if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) Dialog = Dialog ( ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   