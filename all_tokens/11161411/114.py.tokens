from iapws . iapws97 import IAPWS97 as IAPWS from iapws . _iapws import M , Tc , Pc , rhoc , Tt , Tb , Dipole , f_acent from lib import unidades from lib . thermo import ThermoWater try :      from iapws import __doi__  except ImportError :      __doi__ = { }  __doi__ [ <str> ] = { <str> : <str> <str> <str> <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } class IAPWS97 ( ThermoWater ) :      M = unidades . Dimensionless ( M ) Pc = unidades . Pressure ( Pc , <str> ) Tc = unidades . Temperature ( Tc ) rhoc = unidades . Density ( rhoc ) Tt = unidades . Temperature ( Tt ) Tb = unidades . Temperature ( Tb ) f_accent = unidades . Dimensionless ( f_acent ) momentoDipolar = unidades . DipoleMoment ( Dipole , <str> ) def __init__ ( self , ** kwargs ) :          if <str> in kwargs :              kwargs [ <str> ] /= 1e6  elif <str> in kwargs :              kwargs [ <str> ] /= 1e3  elif <str> in kwargs :              kwargs [ <str> ] /= 1e3  st = IAPWS ( ** kwargs ) self . status = st . status self . msg = st . msg if self . status :              self . calculo ( st )   def calculo ( self , st ) :          self . x = unidades . Dimensionless ( st . x ) self . region = st . region self . phase = self . getphase ( phase = st . phase ) self . name = st . name self . synonim = st . synonim self . CAS = st . CAS self . T = unidades . Temperature ( st . T ) self . P = unidades . Pressure ( st . P , <str> ) self . Tr = unidades . Dimensionless ( st . Tr ) self . Pr = unidades . Dimensionless ( st . Pr ) self . v = unidades . SpecificVolume ( st . v ) self . rho = unidades . Density ( st . rho ) cp0 = { } cp0 [ <str> ] = st . v0 cp0 [ <str> ] = st . h0 * 1000 cp0 [ <str> ] = st . s0 * 1000 cp0 [ <str> ] = st . cp0 * 1000 cp0 [ <str> ] = st . cv0 * 1000 cp0 [ <str> ] = st . w0 self . _cp0 ( cp0 ) self . Liquido = ThermoWater ( ) self . Gas = ThermoWater ( ) if self . x == 0 :              self . fill ( self , st . Liquid ) self . fill ( self . Liquido , st . Liquid ) self . sigma = unidades . Tension ( st . sigma ) self . Hvap = unidades . Enthalpy ( None ) self . Svap = unidades . SpecificHeat ( None )  elif self . x == 1 :              self . fill ( self , st . Vapor ) self . fill ( self . Gas , st . Vapor ) self . Hvap = unidades . Enthalpy ( None ) self . Svap = unidades . SpecificHeat ( None )  else :              self . fill ( self . Liquido , st . Liquid ) self . sigma = unidades . Tension ( st . sigma ) self . fill ( self . Gas , st . Vapor ) self . h = unidades . Enthalpy ( st . h ) self . s = unidades . SpecificHeat ( st . s ) self . u = unidades . SpecificHeat ( st . u ) self . a = unidades . Enthalpy ( st . a ) self . g = unidades . Enthalpy ( st . g ) self . cv = unidades . SpecificHeat ( None ) self . cp = unidades . SpecificHeat ( None ) self . cp_cv = unidades . Dimensionless ( None ) self . w = unidades . Speed ( None ) self . Hvap = unidades . Enthalpy ( st . Hvap , <str> ) self . Svap = unidades . SpecificHeat ( st . Svap , <str> )   def fill ( self , fase , st ) :          fase . _bool = True fase . M = self . M fase . v = unidades . SpecificVolume ( st . v ) fase . rho = unidades . Density ( st . rho ) fase . Z = unidades . Dimensionless ( st . Z ) fase . h = unidades . Enthalpy ( st . h , <str> ) fase . s = unidades . SpecificHeat ( st . s , <str> ) fase . u = unidades . Enthalpy ( st . u , <str> ) fase . a = unidades . Enthalpy ( st . a , <str> ) fase . g = unidades . Enthalpy ( st . g , <str> ) fase . fi = [ unidades . Dimensionless ( st . fi ) ] fase . f = [ unidades . Pressure ( st . f , <str> ) ] fase . cv = unidades . SpecificHeat ( st . cv , <str> ) fase . cp = unidades . SpecificHeat ( st . cp , <str> ) fase . cp_cv = unidades . Dimensionless ( st . cp_cv ) fase . gamma = fase . cp_cv fase . w = unidades . Speed ( st . w ) fase . rhoM = unidades . MolarDensity ( fase . rho / self . M ) fase . hM = unidades . MolarEnthalpy ( fase . h * self . M ) fase . sM = unidades . MolarSpecificHeat ( fase . s * self . M ) fase . uM = unidades . MolarEnthalpy ( fase . u * self . M ) fase . aM = unidades . MolarEnthalpy ( fase . a * self . M ) fase . gM = unidades . MolarEnthalpy ( fase . g * self . M ) fase . cvM = unidades . MolarSpecificHeat ( fase . cv * self . M ) fase . cpM = unidades . MolarSpecificHeat ( fase . cp * self . M ) fase . alfav = unidades . InvTemperature ( st . alfav ) fase . kappa = unidades . InvPressure ( st . xkappa , <str> ) fase . kappas = unidades . InvPressure ( st . kappas , <str> ) fase . mu = unidades . Viscosity ( st . mu ) fase . nu = unidades . Diffusivity ( st . nu ) fase . k = unidades . ThermalConductivity ( st . k ) fase . alfa = unidades . Diffusivity ( st . alfa ) fase . epsilon = unidades . Dimensionless ( st . epsilon ) fase . Prandt = unidades . Dimensionless ( st . Prandt ) fase . n = unidades . Dimensionless ( st . n ) fase . joule = unidades . TemperaturePressure ( st . joule ) fase . deltat = unidades . EnthalpyPressure ( st . deltat ) fase . betap = unidades . Density ( st . betap ) fase . alfap = unidades . Density ( st . alfap ) fase . fraccion = [ 1 ] fase . fraccion_masica = [ 1 ]   class IAPWS97_PT ( IAPWS97 ) :      def __init__ ( self , P , T ) :          IAPWS97 . __init__ ( self , T = T , P = P )   class IAPWS97_Ph ( IAPWS97 ) :      def __init__ ( self , P , h ) :          IAPWS97 . __init__ ( self , P = P , h = h )   class IAPWS97_Ps ( IAPWS97 ) :      def __init__ ( self , P , s ) :          IAPWS97 . __init__ ( self , P = P , s = s )   class IAPWS97_Px ( IAPWS97 ) :      def __init__ ( self , P , x ) :          IAPWS97 . __init__ ( self , P = P , x = x )   class IAPWS97_Tx ( IAPWS97 ) :      def __init__ ( self , T , x ) :          IAPWS97 . __init__ ( self , T = T , x = x )   if __name__ == <str> :      import doctest doctest . testmod ( )   