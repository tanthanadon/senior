from configparser import ConfigParser import logging import os from PyQt5 . QtWidgets import QApplication from scipy . optimize import fsolve from scipy import log , exp , arange , concatenate , linspace try :      from CoolProp . HumidAirProp import HAProps , HAProps_Aux  except :      pass  from lib . config import conf_dir from lib . unidades import ( Temperature , Pressure , Dimensionless , SpecificVolume , Density , Enthalpy ) def _Pbar ( Z ) :      return 101325. * ( 1 - 2.25577e-5 * Z ) ** 5.256  def _height ( P ) :      P_atm = P / 101325. return 1 / 2.25577e-5 * ( 1 - exp ( log ( P_atm ) / 5.2559 ) )  def _Tbar ( self , Z ) :      return 288.15 - 0.0065 * Z  def _Psat ( Tdb ) :      if 173.15 <= Tdb < 273.15 :          C1 = - 5674.5359 C2 = 6.3925247 C3 = - 0.009677843 C4 = 0.00000062215701 C5 = 2.0747825E-09 C6 = - 9.484024E-13 C7 = 4.1635019 pws = exp ( C1 / Tdb + C2 + C3 * Tdb + C4 * Tdb ** 2 + C5 * Tdb ** 3 + C6 * Tdb ** 4 + C7 * log ( Tdb ) )  elif 273.15 <= Tdb <= 473.15 :          C8 = - 5800.2206 C9 = 1.3914993 C10 = - 0.048640239 C11 = 0.000041764768 C12 = - 0.000000014452093 C13 = 6.5459673 pws = exp ( C8 / Tdb + C9 + C10 * Tdb + C11 * Tdb ** 2 + C12 * Tdb ** 3 + C13 * log ( Tdb ) )  else :          raise NotImplementedError ( <str> )  return pws  def _Tsat ( Pv ) :      Pv_min = _Psat ( 173.15 ) Pv_lim = _Psat ( 273.15 ) Pv_max = _Psat ( 473.15 ) if Pv_min <= Pv < Pv_lim :          C1 = - 5674.5359 C2 = 6.3925247 C3 = - 0.009677843 C4 = 0.00000062215701 C5 = 2.0747825E-09 C6 = - 9.484024E-13 C7 = 4.1635019 def f ( T ) :              return Pv - exp ( C1 / T + C2 + C3 * T + C4 * T ** 2 + C5 * T ** 3 + C6 * T ** 4 + C7 * log ( T ) )  t = fsolve ( f , 250 ) [ 0 ]  elif Pv_lim <= Pv <= Pv_max :          C8 = - 5800.2206 C9 = 1.3914993 C10 = - 0.048640239 C11 = 0.000041764768 C12 = - 0.000000014452093 C13 = 6.5459673 def f ( T ) :              return Pv - exp ( C8 / T + C9 + C10 * T + C11 * T ** 2 + C12 * T ** 3 + C13 * log ( T ) )  t = fsolve ( f , 300 ) [ 0 ]  else :          raise NotImplementedError ( <str> )  return t  def _W ( P , Tdb ) :      pv = _Psat ( Tdb ) return 0.62198 * pv / ( P - pv )  def _h ( Tdb , W ) :      T_c = Tdb - 273.15 return 1.006 * T_c + W * ( 2501 + 1.805 * T_c )  def _v ( P , Tdb , W ) :      P_kpa = P / 1000 return 0.2871 * Tdb * ( 1 + 1.6078 * W ) / P_kpa  def _W_twb ( tdb , twb , P ) :      tdb_C = tdb - 273.15 twb_C = twb - 273.15 Pvs = _Psat ( twb ) Ws = 0.62198 * Pvs / ( P - Pvs ) if tdb >= 0 :          w = ( ( 2501 - 2.381 * twb_C ) * Ws - 1.006 * ( tdb - twb ) ) / ( 2501 + 1.805 * tdb_C - 4.186 * twb_C )  else :          w = ( ( 2830 - 0.24 * twb_C ) * Ws - 1.006 * ( tdb - twb ) ) / ( 2830 + 1.86 * tdb_C - 2.1 * twb_C )  return w  def _Tdb ( twb , w , P ) :      tw = twb - 273.15 ws = _W ( P , twb ) td = ( ( 2501 - 2.381 * tw ) * ws + 1.006 * tw - w * ( 2501 - 4.186 * tw ) ) / ( w * 1.805 + 1.006 ) return td + 273.15  def _Tdb_V ( v , P ) :      P_kpa = P / 1000 def f ( Tdb ) :          w = _W ( P , Tdb ) return v - 0.2871 * Tdb * ( 1 + 1.6078 * w ) / P_kpa  ts = fsolve ( f , 300 ) return ts  def _W_V ( Td , P , v ) :      P_kpa = P / 1000 return ( v * P_kpa - 0.2871 * Td ) / ( 0.2871 * 1.6078 * Td )  def _tdp ( Pw ) :      C14 = 6.54 C15 = 14.526 C16 = 0.7389 C17 = 0.09486 C18 = 0.4569 a = log ( Pw / 1000. ) Tdp1 = C14 + C15 * a + C16 * a ** 2 + C17 * a ** 3 + C18 * ( Pw / 1000. ) ** 0.1984 Tdp2 = 6.09 + 12.608 * a + 0.4959 * a ** 2 if 0 <= Tdp1 <= 93 :          t = Tdp1  elif Tdp2 < 0 :          t = Tdp2  else :          print ( Pw , Tdp1 , Tdp2 ) raise NotImplementedError ( <str> )  return t + 273.15  def _twb ( tdb , W , P ) :      tdb_C = tdb - 273.15 def f ( twb ) :          Pvs = _Psat ( twb ) Ws = 0.62198 * Pvs / ( P - Pvs ) twb_C = twb - 273.15 if tdb >= 0 :              w = ( ( 2501. - 2.326 * twb_C ) * Ws - 1.006 * ( tdb_C - twb_C ) ) / ( 2501. + 1.86 * tdb_C - 4.186 * twb_C ) - W  else :              w = ( ( 2830 - 0.24 * twb_C ) * Ws - 1.006 * ( tdb - twb ) ) / ( 2830 + 1.86 * tdb_C - 2.1 * twb_C )  return w  twb = fsolve ( f , tdb ) [ 0 ] return twb  class PsyState ( object ) :      kwargs = { <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : None , <str> : None , <str> : None , <str> : 0.0 } status = 0 msg = <str> TEXT_MODE = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] VAR_NAME = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] def __init__ ( self , ** kwargs ) :          self . kwargs = self . __class__ . kwargs . copy ( ) self . __call__ ( ** kwargs )  def __call__ ( self , ** kwargs ) :          self . kwargs . update ( kwargs ) if self . calculable :              self . status = 1 self . calculo ( ) logging . debug ( QApplication . translate ( <str> , <str> ) ) logging . debug ( self . kwargs ) self . msg = <str>   @ property def calculable ( self ) :          tdp = self . kwargs . get ( <str> , 0 ) tdb = self . kwargs . get ( <str> , 0 ) twb = self . kwargs . get ( <str> , 0 ) w = self . kwargs . get ( <str> , None ) HR = self . kwargs . get ( <str> , None ) self . mode = - 1 if tdb and w is not None :              self . mode = 0  elif tdb and HR is not None :              self . mode = 1  elif tdb and twb :              self . mode = 2  elif tdb and tdp :              self . mode = 3  elif tdp and HR is not None :              self . mode = 4  return bool ( self . mode + 1 )  def _P ( self ) :          if self . kwargs [ <str> ] :              P = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] :              P = _Pbar ( self . kwargs [ <str> ] )  else :              P = 101325.  return P  def _lib ( self ) :          pass  def calculo ( self ) :          tdp , tdb , twb , P , Pvs , Pv , ws , w , HR , v , h = self . _lib ( ) self . tdp = Temperature ( tdp ) self . tdb = Temperature ( tdb ) self . twb = Temperature ( twb ) self . P = Pressure ( P ) self . Pvs = Pressure ( Pvs ) self . Pv = Pressure ( Pv ) self . ws = Dimensionless ( ws , txt = <str> ) self . w = Dimensionless ( w , txt = <str> ) self . HR = Dimensionless ( HR , txt = <str> ) self . mu = Dimensionless ( w / ws * 100 ) self . v = SpecificVolume ( v ) self . rho = Density ( 1 / v ) self . h = Enthalpy ( h , <str> ) self . Xa = 1 / ( 1 + self . w / 0.62198 ) self . Xw = 1 - self . Xa  @ classmethod def calculatePlot ( cls ) :          return PsyIdeal . calculatePlot ( )  @ staticmethod def LineList ( name , Preferences ) :          if Preferences . getboolean ( <str> , name + <str> ) :              t = [ ] for i in Preferences . get ( <str> , name + <str> ) . split ( <str> ) :                  if i :                      t . append ( float ( i ) )    else :              start = Preferences . getfloat ( <str> , name + <str> ) end = Preferences . getfloat ( <str> , name + <str> ) step = Preferences . getfloat ( <str> , name + <str> ) t = list ( arange ( start , end , step ) )  return t   class PsyIdeal ( PsyState ) :      def _lib ( self ) :          P = self . _P ( ) tdp = self . kwargs . get ( <str> , 0 ) tdb = self . kwargs . get ( <str> , 0 ) twb = self . kwargs . get ( <str> , 0 ) w = self . kwargs . get ( <str> , None ) HR = self . kwargs . get ( <str> , None ) h = self . kwargs . get ( <str> , None ) v = self . kwargs . get ( <str> , 0 ) if self . mode == 0 :              Pvs = _Psat ( tdb ) ws = 0.62198 * Pvs / ( P - Pvs ) Pv = w * P / ( 0.62198 + w ) HR = Pv / Pvs * 100 v = _v ( P , tdb , w ) h = _h ( tdb , w ) tdp = _tdp ( Pv ) twb = _twb ( tdb , w , P )  elif self . mode == 1 :              Pvs = _Psat ( tdb ) ws = 0.62198 * Pvs / ( P - Pvs ) Pv = Pvs * HR / 100 w = 0.62198 * Pv / ( P - Pv ) v = _v ( P , tdb , w ) h = _h ( tdb , w ) tdp = _tdp ( Pv ) twb = _twb ( tdb , w , P )  elif self . mode == 2 :              Pvs = _Psat ( tdb ) ws = 0.62198 * Pvs / ( P - Pvs ) w = _W_twb ( tdb , twb , P ) Pv = w * P / ( 0.62198 + w ) HR = Pv / Pvs * 100 v = _v ( P , tdb , w ) h = _h ( tdb , w ) tdp = _tdp ( Pv )  elif self . mode == 3 :              Pv = _Psat ( tdp ) w = 0.62198 * Pv / ( P - Pv ) Pvs = _Psat ( tdb ) ws = 0.62198 * Pvs / ( P - Pvs ) HR = Pv / Pvs * 100 v = _v ( P , tdb , w ) h = _h ( tdb , w ) twb = _twb ( tdb , w , P )  elif self . mode == 4 :              Pv = _Psat ( tdp ) if HR :                  w = 0.62198 * Pv / ( P - Pv ) Pvs = Pv / HR * 100  else :                  w = 0 Pvs = Pv  ws = 0.62198 * Pvs / ( P - Pvs ) tdb = _Tsat ( Pvs ) v = _v ( P , tdb , w ) h = _h ( tdb , w ) twb = _twb ( tdb , w , P )  elif self . mode == 5 :              pass  elif self . mode == 6 :              pass  return tdp , tdb , twb , P , Pvs , Pv , ws , w , HR , v , h  @ classmethod def calculatePlot ( cls , parent ) :          Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) parent . setProgressValue ( 0 ) data = { } P = parent . inputs . P . value t = cls . LineList ( <str> , Preferences ) Hs = [ ] Pvs = [ ] for ti in t :              Pv = _Psat ( ti ) Pvs . append ( Pv ) Hs . append ( 0.62198 * Pv / ( P - Pv ) ) parent . setProgressValue ( 5 * len ( Hs ) / len ( t ) )  data [ <str> ] = t data [ <str> ] = Hs H = cls . LineList ( <str> , Preferences ) th = [ ] for w in H :              if w :                  Pv = w * P / ( 0.62198 + w ) th . append ( Temperature ( _tdp ( Pv ) ) )  else :                  tmin = Preferences . getfloat ( <str> , <str> ) th . append ( Temperature ( tmin ) )   data [ <str> ] = H data [ <str> ] = th hr = cls . LineList ( <str> , Preferences ) Hr = { } cont = 0 for i in hr :              Hr [ i ] = [ ] for pvs in Pvs :                  pv = pvs * i / 100 Hr [ i ] . append ( 0.62198 * pv / ( P - pv ) ) cont += 1 parent . setProgressValue ( 5 + 10 * cont / len ( hr ) / len ( Hs ) )   data [ <str> ] = Hr lines = cls . LineList ( <str> , Preferences ) Twb = { } cont = 0 for T in lines :              H = concatenate ( ( arange ( _W ( P , T ) , 0 , - 0.001 ) , [ 0. ] ) ) Tw = [ ] for h in H :                  Tw . append ( Temperature ( _Tdb ( T , h , P ) ) )  cont += 1 parent . setProgressValue ( 15 + 75 * cont / len ( lines ) ) Twb [ T ] = ( list ( H ) , Tw )  data [ <str> ] = Twb lines = cls . LineList ( <str> , Preferences ) V = { } for cont , v in enumerate ( lines ) :              ts = _Tdb_V ( v , P ) T = linspace ( ts , v * P / 287.055 , 50 ) Td = [ Temperature ( ti ) for ti in T ] _W_V H = [ _W_V ( ti , P , v ) for ti in T ] parent . setProgressValue ( 90 + 10 * cont / len ( lines ) ) V [ v ] = ( Td , H )  data [ <str> ] = V return data   class PsyVirial ( PsyState ) :      def _lib ( self ) :          pass   class PsyCoolprop ( PsyState ) :      @ property def calculable ( self ) :          tdp = self . kwargs . get ( <str> , 0 ) tdb = self . kwargs . get ( <str> , 0 ) twb = self . kwargs . get ( <str> , 0 ) w = self . kwargs . get ( <str> , None ) HR = self . kwargs . get ( <str> , None ) self . _mode = 0 if tdb and w is not None :              self . _mode = ( <str> , <str> )  elif tdb and HR is not None :              self . _mode = ( <str> , <str> )  elif tdb and twb :              self . _mode = ( <str> , <str> )  elif tdb and tdp :              self . _mode = ( <str> , <str> )  elif tdp and HR is not None :              self . _mode = ( <str> , <str> )  return bool ( self . _mode )  def args ( self ) :          if <str> in self . _mode :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if <str> in self . _mode :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if <str> in self . _mode :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if <str> in self . _mode :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if <str> in self . _mode :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  var1 = self . kwargs [ self . _mode [ 0 ] ] var2 = self . kwargs [ self . _mode [ 1 ] ] if <str> in self . _mode [ 0 ] :              var1 /= 100.  if <str> in self . _mode [ 1 ] :              var2 /= 100.  args = ( <str> , self . _P_kPa , self . _mode [ 0 ] , var1 , self . _mode [ 1 ] , var2 ) return args  @ property def _P_kPa ( self ) :          P = self . _P ( ) return P / 1000.  def _lib ( self ) :          args = self . args ( ) P = self . _P ( ) if <str> in self . _mode :              tdb = self . kwargs [ <str> ]  else :              tdb = HAProps ( <str> , * args )  tdp = HAProps ( <str> , * args ) twb = HAProps ( <str> , * args ) w = HAProps ( <str> , * args ) HR = HAProps ( <str> , * args ) * 100 Pvs = HAProps_Aux ( <str> , tdb , self . _P_kPa , w ) [ 0 ] * 1000 Pv = Pvs * HR / 100 ws = HAProps ( <str> , <str> , self . _P_kPa , <str> , tdb , <str> , 1 ) v = HAProps ( <str> , * args ) h = HAProps ( <str> , * args ) return tdp , tdb , twb , P , Pvs , Pv , ws , w , HR , v , h  @ classmethod def calculatePlot ( cls , parent ) :          Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) parent . setProgressValue ( 0 ) data = { } P = parent . inputs . P . value P_kPa = P / 1000 t = cls . LineList ( <str> , Preferences ) Hs = [ ] for tdb in t :              Hs . append ( HAProps ( <str> , <str> , P_kPa , <str> , tdb , <str> , 1 ) ) parent . setProgressValue ( 5 * len ( Hs ) / len ( t ) )  data [ <str> ] = t data [ <str> ] = Hs H = cls . LineList ( <str> , Preferences ) th = [ ] for w in H :              if w :                  tdp = HAProps ( <str> , <str> , 101.325 , <str> , w , <str> , 1 ) th . append ( Temperature ( tdp ) )  else :                  tmin = Preferences . getfloat ( <str> , <str> ) th . append ( Temperature ( tmin ) )   data [ <str> ] = H data [ <str> ] = th hr = cls . LineList ( <str> , Preferences ) Hr = { } cont = 0 for i in hr :              Hr [ i ] = [ ] for tdb in t :                  Hr [ i ] . append ( HAProps ( <str> , <str> , P_kPa , <str> , tdb , <str> , i / 100 ) ) cont += 1 parent . progressBar . setValue ( 5 + 10 * cont / len ( hr ) / len ( Hs ) )   data [ <str> ] = Hr lines = cls . LineList ( <str> , Preferences ) Twb = { } cont = 0 for T in lines :              ws = HAProps ( <str> , <str> , P_kPa , <str> , 1 , <str> , T ) H = [ ws , 0 ] _td = HAProps ( <str> , <str> , P_kPa , <str> , T , <str> , 0 ) Tw = [ Temperature ( T ) , Temperature ( _td ) ] cont += 1 parent . progressBar . setValue ( 15 + 75 * cont / len ( lines ) ) Twb [ T ] = ( H , Tw )  data [ <str> ] = Twb lines = cls . LineList ( <str> , Preferences ) V = { } rh = arange ( 0.00 , 1.05 , 0.05 ) for cont , v in enumerate ( lines ) :              w = [ ] Td = [ ] for r in rh :                  try :                      w . append ( HAProps ( <str> , <str> , P_kPa , <str> , r , <str> , v ) ) _td = HAProps ( <str> , <str> , P_kPa , <str> , r , <str> , v ) Td . append ( Temperature ( _td ) )  except ValueError :                      pass   parent . progressBar . setValue ( 90 + 10 * cont / len ( lines ) ) V [ v ] = ( Td , w )  data [ <str> ] = V return data   class PsyRefprop ( PsyState ) :      pass  Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) if Preferences . getboolean ( <str> , <str> ) :      if Preferences . getboolean ( <str> , <str> ) and os . environ [ <str> ] == <str> :          PsychroState = PsyCoolprop  elif Preferences . getboolean ( <str> , <str> ) and os . environ [ <str> ] == <str> :          PsychroState = PsyRefprop  else :          PsychroState = PsyVirial  if PsychroState == PsyRefprop or PsychroState == PsyVirial :          if os . environ [ <str> ] == <str> :              PsychroState = PsyCoolprop  else :              PsychroState = PsyIdeal    else :      PsychroState = PsyIdeal  if __name__ == <str> :      aire = PsyIdeal ( tdb = 40 + 273.15 , w = 0.001 ) print ( aire . tdb . C , aire . twb . C , aire . tdp . C , aire . w , aire . v , aire . mu , aire . h . kJkg , aire . Pv . Pa , aire . ws ) aire = PsyCoolprop ( tdb = 40 + 273.15 , w = 0.001 ) print ( aire . tdb . C , aire . twb . C , aire . tdp . C , aire . w , aire . v , aire . mu , aire . h . kJkg , aire . Pv . Pa , aire . ws )   