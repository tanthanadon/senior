from csv import reader import os from scipy . constants import R from lib . EoS . cubic import Cubic , CubicHelmholtz dat = { } fp = os . path . join ( os . environ [ <str> ] , <str> , <str> ) with open ( fp ) as file :      my_data = reader ( file ) for string in my_data :          data = string [ 0 ] . split ( <str> ) if data [ 0 ] == <str> :              continue  cas = data [ 0 ] c1 = float ( data [ 1 ] ) c2 = float ( data [ 2 ] ) c3 = float ( data [ 3 ] ) dat [ cas ] = ( c1 , c2 , c3 )   class PRMathiasCopeman ( Cubic ) :      <str> __title__ = <str> __status__ = <str> __doi__ = ( { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } ) def __init__ ( self , T , P , mezcla ) :          self . T = T self . P = P self . mezcla = mezcla ao = [ ] bi = [ ] ai = [ ] C1 = [ ] C2 = [ ] C3 = [ ] for cmp in mezcla . componente :              if cmp . CASNumber in dat :                  c1 , c2 , c3 = dat [ cmp . CASNumber ]  else :                  c1 = 0.1316 * cmp . f_acent ** 2 + 1.4031 * cmp . f_acent + 0.3906 c2 = - 1.3127 * cmp . f_acent ** 2 + 0.3015 * cmp . f_acent - 0.1213 c3 = 0.7661 * cmp . f_acent + 0.3041  ao . append ( 0.45724 * R ** 2 * cmp . Tc ** 2 / cmp . Pc ) bi . append ( 0.0778 * R * cmp . Tc / cmp . Pc ) term = 1 - ( T / cmp . Tc ) ** 0.5 if T > cmp . Tc :                  alfa = ( 1 + c1 * term ) ** 2  else :                  alfa = ( 1 + c1 * term + c2 * term ** 2 + c3 * term ** 3 ) ** 2  ai . append ( ao [ - 1 ] * alfa ) C1 . append ( c1 ) C2 . append ( c2 ) C3 . append ( c3 )  am , bm = self . _mixture ( None , mezcla . ids , [ ai , bi ] ) self . ai = ai self . bi = bi self . b = bm self . tita = am self . delta = 2 * bm self . epsilon = - bm ** 2 super ( PRMathiasCopeman , self ) . __init__ ( T , P , mezcla ) print ( 1 / self . Vl , 1 / self . Vg ) print ( self . rho ) Tr = 1 tau = Tr / T self . rho = self . rho [ 0 ] * 1000 rhor = 1 delta = self . rho / rhor self . _phir ( tau , delta , ao , ai , C1 , C2 , C3 ) excess = self . _excess ( tau , delta ) H_exc = excess [ <str> ] * R * T / mezcla . M print ( self . mezcla . _Ho ( T ) , H_exc )  def _phir ( self , tau , delta , ao , ai , C1 , C2 , C3 ) :          Tr = 1 Di = [ ] Dt = [ ] Dtt = [ ] Dttt = [ ] for cmp in self . mezcla . componente :              tc = cmp . Tc Di . append ( 1 - ( Tr / tc ) ** 0.5 / tau ** 0.5 ) Dt . append ( ( Tr / tc ) ** 0.5 / 2 / tau ** 1.5 ) Dtt . append ( - 3 * ( Tr / tc ) ** 0.5 / 4 / tau ** 2.5 ) Dttt . append ( 15 * ( Tr / tc ) ** 0.5 / 8 / tau ** 3.5 )  Bi = [ ] for c1 , c2 , c3 , d in zip ( C1 , C2 , C3 , Di ) :              Bi . append ( 1 + c1 * d + c2 * d ** 2 + c3 * d ** 3 )  Bt = [ ] Btt = [ ] Bttt = [ ] for c1 , c2 , c3 , d , dt , dtt , dttt in zip ( C1 , C2 , C3 , Di , Dt , Dtt , Dttt ) :              cs = ( c1 , c2 , c3 ) bt = 0 btt = 0 bttt = 0 for n , c in enumerate ( cs ) :                  n += 1 bt += n * c * d ** ( n - 1 ) * dt btt += n * c * ( ( n - 1 ) * dt ** 2 + d * dtt ) * d ** ( n - 2 ) bttt += n * c * ( 3 * ( n - 1 ) * d * dt * dtt + ( n ** 2 - 3 * n + 2 ) * dt ** 3 + d ** 2 * dttt ) * d ** ( n - 3 )  Bt . append ( bt ) Btt . append ( btt ) Bttt . append ( bttt )  dait = [ ] daitt = [ ] daittt = [ ] for a , B , bt , btt , bttt in zip ( ao , Bi , Bt , Btt , Bttt ) :              dait . append ( 2 * a * B * bt ) daitt . append ( 2 * a * ( B * btt + bt ** 2 ) ) daittt . append ( 2 * a * ( B * bttt + 3 * bt * btt ) )  uij = [ ] for aii in ai :              uiji = [ ] for ajj in ai :                  uiji . append ( aii * ajj )  uij . append ( uiji )  duijt = [ ] duijtt = [ ] duijttt = [ ] for aii , diit , diitt , diittt in zip ( ai , dait , daitt , daittt ) :              duijit = [ ] duijitt = [ ] duijittt = [ ] for ajj , djjt , djjtt , djjttt in zip ( ai , dait , daitt , daittt ) :                  duijit . append ( aii * djjt + ajj * diit ) duijitt . append ( aii * djjtt + 2 * diit * djjt + ajj * diitt ) duijittt . append ( aii * djjttt + 3 * diit * djjtt + 3 * diitt * djjt + ajj * diittt )  duijt . append ( duijit ) duijtt . append ( duijitt ) duijttt . append ( duijittt )  daijt = [ ] daijtt = [ ] daijttt = [ ] for uiji , duijit , duijitt , duijittt , kiji in zip ( uij , duijt , duijtt , duijttt , self . kij ) :              daijit = [ ] daijitt = [ ] daijittt = [ ] for u , ut , utt , uttt , k in zip ( uiji , duijit , duijitt , duijittt , kiji ) :                  daijit . append ( ( 1 - k ) / 2 / u ** 0.5 * ut ) daijitt . append ( ( 1 - k ) / 4 / u ** 1.5 * ( 2 * u * utt - ut ** 2 ) ) daijittt . append ( ( 1 - k ) / 8 / u ** 2.5 * ( 4 * u ** 2 * uttt - 6 * u * ut * utt + 3 * ut ** 3 ) )  daijt . append ( daijit ) daijtt . append ( daijitt ) daijttt . append ( daijittt )  damt = 0 damtt = 0 damttt = 0 for xi , daijit , daijitt , daijittt in zip ( self . mezcla . fraccion , daijt , daijtt , daijttt ) :              for xj , dat , datt , dattt in zip ( self . mezcla . fraccion , daijit , daijitt , daijittt ) :                  damt += xi * xj * dat damtt += xi * xj * datt damttt += xi * xj * dattt   kw = { } kw [ <str> ] = 1 + 2 ** 0.5 kw [ <str> ] = 1 - 2 ** 0.5 kw [ <str> ] = self . b kw [ <str> ] = self . tita kw [ <str> ] = damt kw [ <str> ] = damtt kw [ <str> ] = damttt print ( tau , delta , kw ) p = CubicHelmholtz ( tau , delta , ** kw ) p [ <str> ] = tau p [ <str> ] = delta print ( <str> , p [ <str> ] ) print ( <str> , p [ <str> ] * delta ) print ( <str> , p [ <str> ] * tau ) print ( <str> , p [ <str> ] * delta ** 2 ) print ( <str> , p [ <str> ] * delta * tau ) print ( <str> , p [ <str> ] * tau ** 2 ) print ( <str> , p [ <str> ] * delta ** 3 ) print ( <str> , p [ <str> ] * delta ** 2 * tau ) print ( <str> , p [ <str> ] * delta * tau ** 2 ) print ( <str> , p [ <str> ] * tau ** 3 ) print ( <str> , ( 1 + delta * p [ <str> ] ) * R * self . T * self . rho - self . P ) self . fir = p   if __name__ == <str> :      from lib . mezcla import Mezcla mix = Mezcla ( tipo = 5 , caudalMolar = 1 , ids = [ 2 , 47 , 98 ] , fraccionMolar = [ 0.5 , 0.3 , 0.2 ] ) eq = PRMathiasCopeman ( 800 , 34937532 , mix )   