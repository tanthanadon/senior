from configparser import ConfigParser from functools import partial import json import os import platform import subprocess import sys import time from PyQt5 import QtCore , QtGui , QtWidgets from UI import newComponent , flujo , wizard , plots , viewComponents from UI . petro import Definicion_Petro import plots as charts from UI . widgets import createAction , ClickableLabel from lib import config from lib . config import conf_dir , setMainWindowConfig , IMAGE_PATH , Preferences from lib . project import Project from lib . EoS import K , H import equipment from tools import ( UI_confComponents , UI_Preferences , UI_confTransport , UI_confThermo , UI_confUnits , UI_confResolution , UI_databank , UI_Tables , UI_unitConverter , UI_psychrometry , costIndex , doi , dependences ) __version__ = <str> other_window = ( plots . Binary_distillation , UI_Tables . TablaMEoS , UI_Tables . PlotMEoS ) other_window_names = [ cl . __name__ for cl in other_window ] class TabWidget ( QtWidgets . QTabWidget ) :      def paintEvent ( self , event ) :          if self . count ( ) :              QtWidgets . QTabWidget . paintEvent ( self , event )  else :              painter = QtGui . QPainter ( self ) rect = event . rect ( ) image = QtGui . QImage ( <str> ) rectImage = QtCore . QRect ( 25 , rect . center ( ) . y ( ) - 50 , 100 , 100 ) painter . drawImage ( rectImage , image ) txt = QtWidgets . QApplication . translate ( <str> , , None ) rect . setLeft ( 150 ) painter . drawText ( rect , QtCore . Qt . AlignVCenter , txt )    class TreeEquipment ( QtWidgets . QTreeWidget ) :      def __init__ ( self , parent = None ) :          super ( TreeEquipment , self ) . __init__ ( parent ) self . setIconSize ( QtCore . QSize ( 30 , 30 ) ) self . headerItem ( ) . setHidden ( True ) self . setContextMenuPolicy ( QtCore . Qt . CustomContextMenu )  def updateList ( self , items ) :          self . clear ( ) self . Stream = QtWidgets . QTreeWidgetItem ( self , 0 ) self . Stream . setText ( 0 , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Stream . setExpanded ( True ) self . Equipment = QtWidgets . QTreeWidgetItem ( self , 0 ) self . Equipment . setText ( 0 , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . Equipment . setExpanded ( True ) ins = [ ] outs = [ ] for stream in items [ <str> ] :              for stream in items [ <str> ] [ stream ] . down :                  ins . append ( stream . id )   for stream in items [ <str> ] :              for stream in items [ <str> ] [ stream ] . up :                  outs . append ( stream . id )   for key in sorted ( items [ <str> ] . keys ( ) ) :              id = items [ <str> ] [ key ] . id if id in ins :                  item = QtWidgets . QTreeWidgetItem ( self . Stream , 1 ) item . setText ( 0 , str ( id ) ) item . setIcon ( 0 , QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) )  elif id in outs :                  item = QtWidgets . QTreeWidgetItem ( self . Stream , 2 ) item . setText ( 0 , str ( id ) ) item . setIcon ( 0 , QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) )  else :                  item = QtWidgets . QTreeWidgetItem ( self . Stream , 3 ) item . setText ( 0 , str ( id ) ) item . setIcon ( 0 , QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + os . path . join ( <str> , <str> , <str> ) ) ) )   for equip in items [ <str> ] :              item = QtWidgets . QTreeWidgetItem ( self . Equipment , 4 ) item . setText ( 0 , <str> % ( items [ <str> ] [ equip ] . id , items [ <str> ] [ equip ] . name ) ) item . setIcon ( 0 , QtGui . QIcon ( QtGui . QPixmap ( items [ <str> ] [ equip ] . imagen ) ) )    class FlowLayout ( QtWidgets . QLayout ) :      def __init__ ( self , margin = 0 , spacing = 0 , parent = None ) :          super ( FlowLayout , self ) . __init__ ( parent ) if parent is not None :              self . setMargin ( margin )  self . setSpacing ( spacing ) self . itemList = [ ]  def __del__ ( self ) :          item = self . takeAt ( 0 ) while item :              item = self . takeAt ( 0 )   def addItem ( self , item ) :          self . itemList . append ( item )  def count ( self ) :          return len ( self . itemList )  def itemAt ( self , index ) :          if index >= 0 and index < len ( self . itemList ) :              return self . itemList [ index ]  return None  def takeAt ( self , index ) :          if index >= 0 and index < len ( self . itemList ) :              return self . itemList . pop ( index )  return None  def expandingDirections ( self ) :          return QtCore . Qt . Orientations ( QtCore . Qt . Orientation ( 0 ) )  def hasHeightForWidth ( self ) :          return True  def heightForWidth ( self , width ) :          height = self . doLayout ( QtCore . QRect ( 0 , 0 , width , 0 ) , True ) return height  def setGeometry ( self , rect ) :          super ( FlowLayout , self ) . setGeometry ( rect ) self . doLayout ( rect , False )  def sizeHint ( self ) :          return self . minimumSize ( )  def minimumSize ( self ) :          size = QtCore . QSize ( ) for item in self . itemList :              size = size . expandedTo ( item . minimumSize ( ) )  size = QtCore . QSize ( size . width ( ) + self . contentsMargins ( ) . left ( ) + self . contentsMargins ( ) . right ( ) , size . height ( ) + self . contentsMargins ( ) . bottom ( ) + self . contentsMargins ( ) . top ( ) ) return size  def doLayout ( self , rect , testOnly ) :          x = rect . x ( ) y = rect . y ( ) lineHeight = 0 for item in self . itemList :              wid = item . widget ( ) spaceX = self . spacing ( ) + wid . style ( ) . layoutSpacing ( QtWidgets . QSizePolicy . PushButton , QtWidgets . QSizePolicy . PushButton , QtCore . Qt . Horizontal ) * self . spacing ( ) spaceY = self . spacing ( ) + wid . style ( ) . layoutSpacing ( QtWidgets . QSizePolicy . PushButton , QtWidgets . QSizePolicy . PushButton , QtCore . Qt . Vertical ) * self . spacing ( ) nextX = x + item . sizeHint ( ) . width ( ) + spaceX if nextX - spaceX > rect . right ( ) and lineHeight > 0 :                  x = rect . x ( ) y = y + lineHeight + spaceY nextX = x + item . sizeHint ( ) . width ( ) + spaceX lineHeight = 0  if not testOnly :                  item . setGeometry ( QtCore . QRect ( QtCore . QPoint ( x , y ) , item . sizeHint ( ) ) )  x = nextX lineHeight = max ( lineHeight , item . sizeHint ( ) . height ( ) )  return y + lineHeight - rect . y ( )   class UI_pychemqt ( QtWidgets . QMainWindow ) :      idNew = 0 config = [ ] dirty = [ ] filename = [ ] pfd = [ ] def __init__ ( self , parent = None ) :          super ( UI_pychemqt , self ) . __init__ ( parent ) self . setWindowTitle ( <str> ) self . centralwidget = TabWidget ( ) self . centralwidget . currentChanged . connect ( self . currentTabChanged ) self . centralwidget . setTabsClosable ( True ) self . setCentralWidget ( self . centralwidget ) icon = IMAGE_PATH + <str> self . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( icon ) ) ) fileNewAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileNew , shortcut = QtGui . QKeySequence . New , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) fileOpenAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileOpen , shortcut = QtGui . QKeySequence . Open , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . fileSaveAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileSave , shortcut = QtGui . QKeySequence . Save , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . fileSaveAsAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileSaveAs , shortcut = QtGui . QKeySequence . SaveAs , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . fileSaveAllAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileSaveAll , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . fileCloseAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . fileClose , shortcut = QtGui . QKeySequence . Close , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) ExitAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . closeEvent , shortcut = QtGui . QKeySequence . Quit , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionWizard = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = self . wizard , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionComponentList = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . dialogConfig , UI_confComponents ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionThermo = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . dialogConfig , UI_confThermo ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionTransporte = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . dialogConfig , UI_confTransport ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionUnidades = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . dialogConfig , UI_confUnits ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actioncostIndex = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . costos , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionPreferencias = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . Preferencias , icon = <str> , shortcut = QtGui . QKeySequence . Preferences , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . actionZoomIn = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . zoom , <str> ) , icon = <str> , shortcut = QtGui . QKeySequence . ZoomIn , parent = self ) self . actionZoom = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . zoom , <str> ) , icon = <str> , parent = self ) self . actionZoomOut = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . zoom , <str> ) , icon = <str> , shortcut = QtGui . QKeySequence . ZoomOut , parent = self ) actionOverviewWindow = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . overview , parent = self ) actionVerStatus = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , shortcut = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , checkable = True , parent = self ) self . actionVerToolbar = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , checkable = True , parent = self ) self . actionVerItem = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , checkable = True , parent = self ) calculatorAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . calculator , icon = <str> , shortcut = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) terminalAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , shortcut = <str> , slot = self . terminal , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) if sys . platform == <str> :              terminalAction . setEnabled ( False )  conversorUnidadesAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . conversor_unidades , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) currencyAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . conversor_moneda , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) TablaPeriodicaAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . tablaPeriodica , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) TablesAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . meos , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) psychrometricChartAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . diagramaPsicrometrico , shortcut = <str> , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) externalProgramAction = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . externalPrograms , icon = <str> , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) saveAsImage = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . savePFDImage , icon = <str> , parent = self ) actionAyuda = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . help , icon = <str> , parent = self ) actionDocum = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . documentation , parent = self ) actionLog = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . log , parent = self ) actionAcerca_de = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . acerca , icon = <str> , parent = self ) actionAcerca_deQt = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = self . acercaQt , icon = <str> , parent = self ) self . zoomValue = QtWidgets . QSpinBox ( ) self . zoomValue . setSuffix ( <str> ) self . zoomValue . setRange ( 5 , 1000 ) self . zoomValue . setValue ( 100 ) self . zoomValue . setSingleStep ( 5 ) self . zoomValue . valueChanged . connect ( self . zoom ) self . BarraArchivo = QtWidgets . QToolBar ( QtWidgets . QApplication . translate ( <str> , <str> ) , self ) self . BarraArchivo . setObjectName ( <str> ) self . BarraArchivo . setIconSize ( QtCore . QSize ( 16 , 16 ) ) self . BarraArchivo . addAction ( fileNewAction ) self . BarraArchivo . addAction ( fileOpenAction ) self . BarraArchivo . addAction ( self . fileCloseAction ) self . BarraArchivo . addAction ( self . fileSaveAction ) self . BarraArchivo . addAction ( self . fileSaveAsAction ) self . BarraArchivo . addAction ( self . fileSaveAllAction ) self . BarraArchivo . addAction ( ExitAction ) self . addToolBar ( QtCore . Qt . TopToolBarArea , self . BarraArchivo ) self . BarraVer = QtWidgets . QToolBar ( QtWidgets . QApplication . translate ( <str> , <str> ) , self ) self . BarraVer . setObjectName ( <str> ) self . BarraVer . setIconSize ( QtCore . QSize ( 16 , 16 ) ) self . BarraVer . addAction ( self . actionZoomOut ) self . BarraVer . addWidget ( self . zoomValue ) self . BarraVer . addAction ( self . actionZoomIn ) self . BarraVer . addSeparator ( ) self . BarraVer . addAction ( self . actionVerToolbar ) self . BarraVer . addAction ( self . actionVerItem ) self . addToolBar ( QtCore . Qt . TopToolBarArea , self . BarraVer ) self . BarraHerramientas = QtWidgets . QToolBar ( QtWidgets . QApplication . translate ( <str> , <str> ) , self ) self . BarraHerramientas . setObjectName ( <str> ) self . BarraHerramientas . setIconSize ( QtCore . QSize ( 16 , 16 ) ) self . BarraHerramientas . addAction ( calculatorAction ) self . BarraHerramientas . addAction ( terminalAction ) self . BarraHerramientas . addAction ( conversorUnidadesAction ) self . BarraHerramientas . addAction ( currencyAction ) self . BarraHerramientas . addAction ( TablaPeriodicaAction ) self . BarraHerramientas . addAction ( TablesAction ) self . BarraHerramientas . addAction ( psychrometricChartAction ) self . BarraHerramientas . addAction ( externalProgramAction ) self . BarraHerramientas . addSeparator ( ) self . BarraHerramientas . addAction ( actionAyuda ) self . addToolBar ( QtCore . Qt . TopToolBarArea , self . BarraHerramientas ) self . toolboxPalette = QtWidgets . QDockWidget ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . toolboxPalette . setObjectName ( <str> ) toolboxContenido = QtWidgets . QWidget ( ) self . toolboxPalette . setWidget ( toolboxContenido ) self . addDockWidget ( QtCore . Qt . DockWidgetArea ( 1 ) , self . toolboxPalette ) self . toolboxPalette . setFeatures ( QtWidgets . QDockWidget . AllDockWidgetFeatures ) self . toolboxPalette . setAllowedAreas ( QtCore . Qt . LeftDockWidgetArea | QtCore . Qt . RightDockWidgetArea ) self . toolboxPalette . visibilityChanged . connect ( self . actionVerToolbar . setChecked ) self . actionVerToolbar . triggered . connect ( self . toolboxPalette . setVisible ) layouttoolbox = QtWidgets . QVBoxLayout ( toolboxContenido ) layouttoolbox . setContentsMargins ( 5 , 5 , 5 , 5 ) txt = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) txt . setAlignment ( QtCore . Qt . AlignCenter ) layouttoolbox . addWidget ( txt ) l1 = FlowLayout ( spacing = 10 ) actionTexto , botonTexto = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = self . addText , button = True , parent = toolboxContenido ) l1 . addWidget ( botonTexto ) actionCuadrado , botonCuadrado = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addItem , <str> ) , button = True , parent = toolboxContenido ) l1 . addWidget ( botonCuadrado ) actionCircle , botonCircle = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addItem , <str> ) , button = True , parent = toolboxContenido ) l1 . addWidget ( botonCircle ) layouttoolbox . addItem ( l1 ) layouttoolbox . addStretch ( 1 ) txt = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) txt . setAlignment ( QtCore . Qt . AlignCenter ) layouttoolbox . addWidget ( txt ) l2 = FlowLayout ( spacing = 10 ) actionEntrada , botonEntrada = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addItem , <str> ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonEntrada ) actionCorriente , botonCorriente = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addItem , <str> ) , button = True , checkable = True , parent = toolboxContenido ) l2 . addWidget ( botonCorriente ) actionSalida , botonSalida = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addItem , <str> ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonSalida ) actionDivider , botonDivider = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_divider ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonDivider ) actionValve , botonValve = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_valve ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonValve ) actionMixer , botonMixer = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_mixer ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonMixer ) actionCompresor , botonCompresor = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_compressor ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonCompresor ) actionTurbine , botonTurbine = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_turbine ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonTurbine ) actionPump , botonPump = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_pump ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonPump ) actionPipe , botonPipe = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_pipe ) , button = True , parent = toolboxContenido ) l2 . addWidget ( botonPipe ) layouttoolbox . addItem ( l2 ) layouttoolbox . addStretch ( 1 ) txt = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) txt . setAlignment ( QtCore . Qt . AlignCenter ) layouttoolbox . addWidget ( txt ) l3 = FlowLayout ( spacing = 10 ) actionTorreFUG , botonTorreFUG = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_columnFUG ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonTorreFUG ) actionFlash , botonFlash = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_flash ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonFlash ) actionTorre , botonTorre = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_tower ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonTorre ) botonTorre . setEnabled ( False ) actionheatExchanger , botonheatExchanger = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_heatExchanger ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonheatExchanger ) actionhairpin , botonhairpin = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_hairpin ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonhairpin ) actionShellTube , botonShellTube = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_shellTube ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonShellTube ) actionFireHeater , botonFireHeater = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_fireHeater ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonFireHeater ) actionReactor , botonReactor = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_reactor ) , button = True , parent = toolboxContenido ) l3 . addWidget ( botonReactor ) layouttoolbox . addItem ( l3 ) layouttoolbox . addStretch ( 1 ) txt = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) txt . setAlignment ( QtCore . Qt . AlignCenter ) layouttoolbox . addWidget ( txt ) l4 = FlowLayout ( spacing = 10 ) actionBaghouse , botonBaghouse = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_baghouse ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonBaghouse ) actionCentrifuge , botonCentrifuge = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_centrifuge ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonCentrifuge ) botonCentrifuge . setEnabled ( False ) actionCiclon , botonCiclon = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_ciclon ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonCiclon ) actionElectroPrecipitator , botonElectroPrecipitator = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_electricPrecipitator ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonElectroPrecipitator ) actionGrinder , botonGrinder = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_grinder ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonGrinder ) botonGrinder . setEnabled ( False ) actionDryer , botonDryer = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_dryer ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonDryer ) actionWasher , botonWasher = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_solidWasher ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonWasher ) botonWasher . setEnabled ( False ) actionVacuum , botonVacuum = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_vacuum ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonVacuum ) botonVacuum . setEnabled ( False ) actionScrubber , botonScrubber = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_scrubber ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonScrubber ) actionGravityChandler , botonGravityChandler = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_gravityChamber ) , button = True , parent = toolboxContenido ) l4 . addWidget ( botonGravityChandler ) layouttoolbox . addItem ( l4 ) layouttoolbox . addStretch ( 1 ) txt = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) txt . setAlignment ( QtCore . Qt . AlignCenter ) layouttoolbox . addWidget ( txt ) l5 = FlowLayout ( ) actionControler , botonControler = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_solidWasher ) , button = True , parent = toolboxContenido ) l5 . addWidget ( botonControler ) botonControler . setEnabled ( False ) actionControlValve , botonControlValve = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_vacuum ) , button = True , parent = toolboxContenido ) l5 . addWidget ( botonControlValve ) botonControlValve . setEnabled ( False ) actionSpreadsheet , botonSpreadsheet = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , icon = <str> , slot = partial ( self . addEquipment , equipment . UI_spreadsheet ) , button = True , parent = toolboxContenido ) if os . environ [ <str> ] != <str> and os . environ [ <str> ] != <str> and os . environ [ <str> ] != <str> :              actionSpreadsheet . setEnabled ( False ) botonSpreadsheet . setEnabled ( False )  l5 . addWidget ( botonSpreadsheet ) layouttoolbox . addItem ( l5 ) layouttoolbox . addStretch ( 10 ) self . menubar = QtWidgets . QMenuBar ( ) self . setMenuBar ( self . menubar ) self . menuArchivo = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuRecentFiles = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . menuArchivo ) self . menuRecentFiles . aboutToShow . connect ( self . aboutToShow_MenuRecentFiles ) self . menuArchivo . addAction ( fileNewAction ) self . menuArchivo . addAction ( fileOpenAction ) self . menuArchivo . addAction ( self . fileSaveAction ) self . menuArchivo . addAction ( self . fileSaveAsAction ) self . menuArchivo . addAction ( self . fileSaveAllAction ) self . menuArchivo . addAction ( self . fileCloseAction ) self . menuArchivo . addSeparator ( ) self . menuArchivo . addAction ( self . menuRecentFiles . menuAction ( ) ) self . menuArchivo . addSeparator ( ) self . menuArchivo . addAction ( ExitAction ) self . menubar . addAction ( self . menuArchivo . menuAction ( ) ) self . menuEditar = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuEditar . aboutToShow . connect ( self . aboutToShow_MenuEdit ) self . menubar . addAction ( self . menuEditar . menuAction ( ) ) self . menuVer = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuVer . addAction ( self . actionZoomOut ) self . menuVer . addAction ( self . actionZoom ) self . menuVer . addAction ( self . actionZoomIn ) self . menuVer . addAction ( actionOverviewWindow ) self . menuVer . addSeparator ( ) self . menuVer . addAction ( actionVerStatus ) self . menuVer . addAction ( self . actionVerToolbar ) self . menuVer . addAction ( self . actionVerItem ) self . menubar . addAction ( self . menuVer . menuAction ( ) ) self . menuObjetosGraficos = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuObjetosGraficos . addAction ( actionTexto ) self . menuObjetosGraficos . addAction ( actionCuadrado ) self . menuObjetosGraficos . addAction ( actionCircle ) self . menuObjetosFlujo = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuObjetosFlujo . addAction ( actionEntrada ) self . menuObjetosFlujo . addAction ( actionCorriente ) self . menuObjetosFlujo . addAction ( actionSalida ) self . menuObjetosFlujo . addAction ( actionDivider ) self . menuObjetosFlujo . addAction ( actionPipe ) self . menuObjetosFlujo . addAction ( actionMixer ) self . menuObjetosFlujo . addAction ( actionCompresor ) self . menuObjetosFlujo . addAction ( actionTurbine ) self . menuObjetosFlujo . addAction ( actionPump ) self . menuObjetosFlujo . addAction ( actionValve ) self . menuObjetosBasics = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuObjetosBasics . addAction ( actionTorreFUG ) self . menuObjetosBasics . addAction ( actionFlash ) self . menuObjetosBasics . addAction ( actionTorre ) self . menuObjetosBasics . addAction ( actionheatExchanger ) self . menuObjetosBasics . addAction ( actionhairpin ) self . menuObjetosBasics . addAction ( actionShellTube ) self . menuObjetosBasics . addAction ( actionFireHeater ) self . menuObjetosBasics . addAction ( actionReactor ) self . menuObjetosSolids = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuObjetosSolids . addAction ( actionBaghouse ) self . menuObjetosSolids . addAction ( actionCentrifuge ) self . menuObjetosSolids . addAction ( actionCiclon ) self . menuObjetosSolids . addAction ( actionElectroPrecipitator ) self . menuObjetosSolids . addAction ( actionGrinder ) self . menuObjetosSolids . addAction ( actionDryer ) self . menuObjetosSolids . addAction ( actionWasher ) self . menuObjetosSolids . addAction ( actionVacuum ) self . menuObjetosSolids . addAction ( actionScrubber ) self . menuObjetosSolids . addAction ( actionGravityChandler ) self . menuObjetosTools = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuObjetosTools . addAction ( actionControler ) self . menuObjetosTools . addAction ( actionControlValve ) self . menuObjetosTools . addAction ( actionSpreadsheet ) self . menuPFD = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . actionResolution = createAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , slot = partial ( self . dialogConfig , UI_confResolution ) , tip = QtWidgets . QApplication . translate ( <str> , <str> ) , parent = self ) self . menuPFD . addAction ( self . actionResolution ) self . menuPFD . addSeparator ( ) self . menuPFD . addAction ( self . menuObjetosGraficos . menuAction ( ) ) self . menuPFD . addAction ( self . menuObjetosFlujo . menuAction ( ) ) self . menuPFD . addAction ( self . menuObjetosBasics . menuAction ( ) ) self . menuPFD . addAction ( self . menuObjetosSolids . menuAction ( ) ) self . menuPFD . addAction ( self . menuObjetosTools . menuAction ( ) ) self . menuPFD . addSeparator ( ) self . menuPFD . addAction ( saveAsImage ) self . menubar . addAction ( self . menuPFD . menuAction ( ) ) self . menuPlot = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) for indice , grafico in enumerate ( plots . __all__ ) :              self . menuPlot . addAction ( grafico . title , partial ( self . plot , indice ) )  self . menubar . addAction ( self . menuPlot . menuAction ( ) ) self . menuCharts = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) , self ) for titulo , lista in charts . _all . items ( ) :              menu = QtWidgets . QMenu ( titulo , self ) for grafico in lista :                  menu . addAction ( grafico . title , partial ( self . chart , grafico ) )  self . menuCharts . addAction ( menu . menuAction ( ) )  self . menuAddComponent = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuAddComponent . addAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . newcomponente ) self . menuAddComponent . addAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . pseudocomponente ) self . menuAddComponent . addSeparator ( ) self . menuNewComponent = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuAddComponent . addAction ( self . menuNewComponent . menuAction ( ) ) for f in newComponent . _methods :              self . menuNewComponent . addAction ( f . __title__ , partial ( self . newComponent_Contribution , f . __name__ ) )  self . menuHerramientas = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuHerramientas . addAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . verComponentes ) self . menuHerramientas . addAction ( self . menuAddComponent . menuAction ( ) ) self . menuHerramientas . addSeparator ( ) self . menuHerramientas . addAction ( calculatorAction ) self . menuHerramientas . addAction ( terminalAction ) self . menuHerramientas . addAction ( conversorUnidadesAction ) self . menuHerramientas . addAction ( currencyAction ) self . menuHerramientas . addAction ( TablaPeriodicaAction ) self . menuMEoS = UI_Tables . Menu ( parent = self ) self . menuHerramientas . addAction ( self . menuMEoS . menuAction ( ) ) self . menuHerramientas . addAction ( psychrometricChartAction ) self . menuHerramientas . addSeparator ( ) self . menuHerramientas . addAction ( self . menuCharts . menuAction ( ) ) self . menuHerramientas . addSeparator ( ) self . menuHerramientas . addAction ( externalProgramAction ) self . menubar . addAction ( self . menuHerramientas . menuAction ( ) ) self . menuVentana = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuVentana . aboutToShow . connect ( self . aboutToShow_MenuWindow ) self . menubar . addAction ( self . menuVentana . menuAction ( ) ) self . menuAyuda = QtWidgets . QMenu ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . menuAyuda . addAction ( actionAyuda ) self . menuAyuda . addAction ( actionDocum ) self . menuAyuda . addAction ( actionLog ) self . menuAyuda . addSeparator ( ) self . menuAyuda . addAction ( actionAcerca_de ) self . menuAyuda . addAction ( actionAcerca_deQt ) self . menubar . addAction ( self . menuAyuda . menuAction ( ) ) self . toolboxItem = QtWidgets . QDockWidget ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . toolboxItem . setObjectName ( <str> ) self . list = TreeEquipment ( ) self . list . setSelectionMode ( QtWidgets . QAbstractItemView . ExtendedSelection ) self . list . itemSelectionChanged . connect ( self . selectionChanged ) self . list . customContextMenuRequested . connect ( self . contextListMenu ) self . toolboxItem . setWidget ( self . list ) self . addDockWidget ( QtCore . Qt . DockWidgetArea ( 1 ) , self . toolboxItem ) self . toolboxItem . setFeatures ( QtWidgets . QDockWidget . AllDockWidgetFeatures ) self . toolboxItem . setAllowedAreas ( QtCore . Qt . LeftDockWidgetArea | QtCore . Qt . RightDockWidgetArea ) self . toolboxItem . visibilityChanged . connect ( self . actionVerItem . setChecked ) self . actionVerItem . triggered . connect ( self . toolboxItem . setVisible ) toolbox = QtWidgets . QDockWidget ( QtWidgets . QApplication . translate ( <str> , <str> ) ) toolbox . setObjectName ( <str> ) self . status = QtWidgets . QTextEdit ( ) self . status . setReadOnly ( True ) toolbox . setWidget ( self . status ) self . addDockWidget ( QtCore . Qt . DockWidgetArea ( 8 ) , toolbox ) toolbox . setFeatures ( QtWidgets . QDockWidget . NoDockWidgetFeatures ) toolbox . setAllowedAreas ( QtCore . Qt . BottomDockWidgetArea ) toolbox . visibilityChanged . connect ( actionVerStatus . setChecked ) actionVerStatus . triggered . connect ( toolbox . setVisible ) self . statusbar = QtWidgets . QStatusBar ( self ) self . setStatusBar ( self . statusbar ) self . statusbar . setMaximumHeight ( 20 ) self . progressBar = QtWidgets . QProgressBar ( ) self . progressBar . setVisible ( False ) self . progressBar . setFixedWidth ( 80 ) self . statusbar . addPermanentWidget ( self . progressBar ) self . statusPosition = QtWidgets . QLabel ( self ) self . statusbar . addPermanentWidget ( self . statusPosition ) self . statusResolution = ClickableLabel ( self ) self . statusResolution . clicked . connect ( partial ( self . dialogConfig , UI_confResolution ) ) self . statusbar . addPermanentWidget ( self . statusResolution ) self . statusThermo = ClickableLabel ( self ) self . statusThermo . clicked . connect ( partial ( self . dialogConfig , UI_confThermo ) ) self . statusbar . addPermanentWidget ( self . statusThermo ) self . systemtray = QtWidgets . QSystemTrayIcon ( QtGui . QIcon ( QtGui . QPixmap ( IMAGE_PATH + <str> ) ) , self ) self . systemtray . setToolTip ( <str> ) self . systemtray . setContextMenu ( self . menuHerramientas ) settings = QtCore . QSettings ( ) self . recentFiles = settings . value ( <str> ) self . lastFile = settings . value ( <str> ) if settings . value ( <str> ) :              self . restoreGeometry ( settings . value ( <str> ) )  else :              self . showMaximized ( )  if settings . value ( <str> ) :              self . restoreState ( settings . value ( <str> ) )  if self . recentFiles is None :              self . recentFiles = [ ]  self . menuRecentFiles . setEnabled ( bool ( self . recentFiles ) ) self . updateStatus ( <str> ) self . activeControl ( False ) self . changePreferenceLive ( ) self . centralwidget . tabCloseRequested . connect ( self . fileClose )  @ property def currentScene ( self ) :          if self . centralwidget . count ( ) :              return self . currentView . scene ( )   @ property def currentView ( self ) :          if not self . centralwidget . count ( ) :              return False  return self . centralwidget . currentWidget ( ) . subWindowList ( ) [ 0 ] . widget ( )  @ property def currentMdi ( self ) :          if self . centralwidget . count ( ) :              return self . centralwidget . currentWidget ( )   @ property def currentConfig ( self ) :          if self . centralwidget . count ( ) :              return self . config [ self . idTab ]   @ property def currentFilename ( self ) :          if self . centralwidget . count ( ) :              return self . filename [ self . idTab ]   def getScene ( self , indice ) :          return self . getView ( indice ) . scene ( )  def getView ( self , indice ) :          return self . centralwidget . widget ( indice ) . subWindowList ( ) [ 0 ] . widget ( )  @ property def idTab ( self ) :          if self . centralwidget . count ( ) :              return self . centralwidget . currentIndex ( )   def closeEvent ( self , event = None ) :          if self . okToContinue ( ) :              for tab in range ( self . centralwidget . count ( ) ) :                  centralwidget = self . centralwidget . widget ( tab ) scene = centralwidget . subWindowList ( ) [ 0 ] . widget ( ) . scene ( ) scene . clearSelection ( )  settings = QtCore . QSettings ( ) if self . filename :                  filename = QtCore . QVariant ( self . filename )  else :                  filename = QtCore . QVariant ( )  settings . setValue ( <str> , filename ) if self . recentFiles :                  recentFiles = QtCore . QVariant ( self . recentFiles )  else :                  recentFiles = QtCore . QVariant ( )  settings . setValue ( <str> , recentFiles ) settings . setValue ( <str> , QtCore . QVariant ( self . saveGeometry ( ) ) ) settings . setValue ( <str> , QtCore . QVariant ( self . saveState ( ) ) ) self . close ( )  else :              event . ignore ( )   def okToContinue ( self , ind = - 1 ) :          if not self . dirty :              return True  if ind != - 1 :              ind = list ( range ( self . centralwidget . count ( ) ) )  else :              ind = [ ind ]  dirty = False for tab in ind :              if self . dirty [ tab ] :                  dirty = True break   if dirty :              dialog = QtWidgets . QMessageBox . question ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QMessageBox . Yes | QtWidgets . QMessageBox . No | QtWidgets . QMessageBox . Cancel , QtWidgets . QMessageBox . Yes ) if dialog == QtWidgets . QMessageBox . Cancel :                  return False  elif dialog == QtWidgets . QMessageBox . No :                  return True  elif dialog == QtWidgets . QMessageBox . Yes :                  self . fileSaveAll ( ) return True   else :              return True   def aboutToShow_MenuEdit ( self ) :          self . menuEditar . clear ( ) if self . currentScene :              self . currentScene . addActions ( self . menuEditar )  self . menuEditar . addSeparator ( ) self . menuEditar . addAction ( self . actionWizard ) self . menuEditar . addSeparator ( ) self . menuEditar . addAction ( self . actionComponentList ) self . menuEditar . addAction ( self . actionThermo ) self . menuEditar . addAction ( self . actionTransporte ) self . menuEditar . addAction ( self . actionUnidades ) self . menuEditar . addAction ( self . actioncostIndex ) self . menuEditar . addSeparator ( ) self . menuEditar . addAction ( self . actionPreferencias )  def aboutToShow_MenuWindow ( self ) :          self . menuVentana . clear ( ) self . menuVentana . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . currentMdi . activatePreviousSubWindow , QtGui . QKeySequence . PreviousChild ) self . menuVentana . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . currentMdi . activateNextSubWindow , QtGui . QKeySequence . NextChild ) self . menuVentana . addSeparator ( ) self . menuVentana . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . currentMdi . tileSubWindows ) self . menuVentana . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . currentMdi . cascadeSubWindows ) self . menuVentana . addAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . windowRestoreAll ) self . menuVentana . addAction ( QtWidgets . QApplication . translate ( <str> , <str> ) , self . windowMinimizeAll ) self . menuVentana . addSeparator ( ) for i , window in enumerate ( self . currentMdi . subWindowList ( ) ) :              self . menuVentana . addAction ( <str> % ( i + 1 , window . windowTitle ( ) ) )  self . menuVentana . addSeparator ( ) self . menuVentana . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . currentMdi . closeActiveSubWindow )  def windowRestoreAll ( self ) :          for window in self . currentMdi . subWindowList ( ) :              window . showNormal ( )   def windowMinimizeAll ( self ) :          for window in self . currentMdi . subWindowList ( ) :              window . showMinimized ( )   def contextListMenu ( self , event ) :          contextMenu = QtWidgets . QMenu ( ) self . currentScene . addActions ( contextMenu , event ) contextMenu . exec_ ( event )  def aboutToShow_MenuRecentFiles ( self ) :          self . menuRecentFiles . clear ( ) recentFiles = [ ] for fname in self . recentFiles :              if fname not in self . filename and QtCore . QFile . exists ( fname ) :                  recentFiles . append ( fname )   if recentFiles :              self . menuRecentFiles . addSeparator ( ) for i , fname in enumerate ( recentFiles ) :                  action = QtWidgets . QAction ( <str> % ( i + 1 , fname ) , self ) action . setData ( QtCore . QVariant ( fname ) ) action . triggered . connect ( self . loadFile ) self . menuRecentFiles . addAction ( action )   self . menuRecentFiles . addSeparator ( ) self . menuRecentFiles . addAction ( QtGui . QIcon ( IMAGE_PATH + <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . clearRecentFiles )  def clearRecentFiles ( self ) :          self . recentFiles = [ ] self . menuRecentFiles . setEnabled ( False )  def addRecentFile ( self , fname ) :          if fname and fname not in self . recentFiles :              self . recentFiles . insert ( 0 , fname ) if len ( self . recentFiles ) > 9 :                  self . recentFiles = self . recentFiles [ : 9 ]   self . menuRecentFiles . setEnabled ( len ( self . recentFiles ) )  def loadPFD ( self , mdiarea ) :          PFD = flujo . GraphicsView ( ) PFD . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) PFD . mouseMove . connect ( self . updatePosition ) scene = flujo . GraphicsScene ( self ) scene . selectionChanged . connect ( self . selectionChanged ) x = self . config [ - 1 ] . getint ( <str> , <str> ) y = self . config [ - 1 ] . getint ( <str> , <str> ) scene . setSceneRect ( 0 , 0 , x , y ) PFD . setScene ( scene ) PFD . setWindowIcon ( QtGui . QIcon ( QtGui . QPixmap ( os . path . join ( IMAGE_PATH , <str> , <str> ) ) ) ) mdiarea . addSubWindow ( PFD ) PFD . show ( )  def fileNew ( self ) :          UI_pychemqt . idNew += 1 self . dirty . append ( True ) self . filename . append ( <str> ) config = ConfigParser ( ) config . add_section ( <str> ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) ) config . set ( <str> , <str> , Preferences . get ( <str> , <str> ) ) self . config . append ( config ) mdiArea = QtWidgets . QMdiArea ( ) self . centralwidget . addTab ( mdiArea , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> % UI_pychemqt . idNew ) self . centralwidget . setCurrentIndex ( self . centralwidget . count ( ) - 1 ) self . loadPFD ( mdiArea ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . activeControl ( True ) self . wizard ( )  def fileSave ( self , indice = None ) :          if indice is None :              indice = self . idTab  if not self . filename [ indice ] :              self . fileSaveAs ( )  else :              with open ( self . filename [ indice ] , <str> ) as file :                  data = { } self . getScene ( indice ) . project . writeToJSON ( data ) PFD = { } win = self . centralwidget . currentWidget ( ) . subWindowList ( ) [ 0 ] PFD [ <str> ] = win . pos ( ) . x ( ) PFD [ <str> ] = win . pos ( ) . y ( ) PFD [ <str> ] = win . size ( ) . height ( ) PFD [ <str> ] = win . size ( ) . width ( ) self . currentScene . writeToJSON ( PFD ) data [ <str> ] = PFD other = { } ventanas = self . centralwidget . currentWidget ( ) . subWindowList ( ) for ind , win in enumerate ( ventanas [ 1 : ] ) :                      ventana = { } ventana [ <str> ] = win . widget ( ) . __class__ . __name__ ventana [ <str> ] = win . pos ( ) . x ( ) ventana [ <str> ] = win . pos ( ) . y ( ) ventana [ <str> ] = win . size ( ) . height ( ) ventana [ <str> ] = win . size ( ) . width ( ) widget = { } win . widget ( ) . writeToJSON ( widget ) ventana [ <str> ] = widget other [ ind ] = ventana if widget [ <str> ] :                          data [ <str> ] . add ( widget [ <str> ] )   data [ <str> ] = other data [ <str> ] = list ( data [ <str> ] ) json . dump ( data , file , indent = 4 )  self . dirty [ self . idTab ] = False self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> % self . filename [ indice ] ) self . dirty [ indice ] = False self . saveControl ( )   def fileSaveAs ( self , indice = None ) :          if indice is None :              indice = self . idTab  dir = self . filename [ indice ] if self . filename [ indice ] else <str> fname = QtWidgets . QFileDialog . getSaveFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , dir , <str> ) if fname :              name = fname [ 0 ] if name . split ( <str> ) [ - 1 ] != <str> :                  name += <str>  self . addRecentFile ( name ) self . filename [ indice ] = name self . fileSave ( indice ) self . centralwidget . setTabText ( indice , os . path . splitext ( os . path . basename ( name ) ) [ 0 ] )   def fileSaveAll ( self ) :          for tab in range ( self . centralwidget . count ( ) ) :              if self . dirty [ tab ] :                  self . fileSave ( tab )    def fileOpen ( self , fname = None ) :          if not fname :              if self . filename :                  dir = os . path . dirname ( str ( self . filename [ - 1 ] ) )  else :                  dir = <str>  fname = QtWidgets . QFileDialog . getOpenFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , dir , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) [ 0 ]  if fname :              try :                  self . loadFile ( fname )  except ImportError as e :                  QtWidgets . QMessageBox . warning ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , e . msg )  except Exception as error :                  QtWidgets . QMessageBox . critical ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + fname ) raise error  else :                  self . activeControl ( True )    def loadFile ( self , fname = None ) :          if not fname :              action = self . sender ( ) if isinstance ( action , QtWidgets . QAction ) :                  fname = str ( action . data ( ) )  else :                  return   if fname :              with open ( fname , <str> ) as file :                  data = json . load ( file )  if <str> in data :                  available = True for dep in data [ <str> ] :                      if os . environ [ dep ] != <str> :                          available = False break   if not available :                      msg = QtWidgets . QApplication . translate ( <str> , <str> ) msg += <str> + fname + os . linesep msg += QtWidgets . QApplication . translate ( <str> , <str> ) msg += <str> % <str> . join ( data [ <str> ] ) raise ImportError ( msg )   self . dirty . append ( False ) self . filename . append ( fname ) self . addRecentFile ( fname ) project = Project ( ) project . readFromJSON ( data ) self . config . append ( project . config ) mdiArea = QtWidgets . QMdiArea ( ) self . loadPFD ( mdiArea ) x = data [ <str> ] [ <str> ] y = data [ <str> ] [ <str> ] pos = QtCore . QPoint ( x , y ) width = data [ <str> ] [ <str> ] height = data [ <str> ] [ <str> ] size = QtCore . QSize ( width , height ) mdiArea . subWindowList ( ) [ 0 ] . move ( pos ) mdiArea . subWindowList ( ) [ 0 ] . resize ( size ) mdiArea . subWindowList ( ) [ 0 ] . widget ( ) . scene ( ) . readFromJSON ( data ) self . list . updateList ( mdiArea . subWindowList ( ) [ 0 ] . widget ( ) . scene ( ) . objects ) for i , ventana in data [ <str> ] . items ( ) :                  name = ventana [ <str> ] indice = other_window_names . index ( name ) widget = other_window [ indice ] instance = widget . readFromJSON ( ventana [ <str> ] , self ) mdiArea . addSubWindow ( instance ) x = ventana [ <str> ] y = ventana [ <str> ] pos = QtCore . QPoint ( x , y ) h = ventana [ <str> ] w = ventana [ <str> ] size = QtCore . QSize ( w , h ) mdiArea . subWindowList ( ) [ - 1 ] . move ( pos ) mdiArea . subWindowList ( ) [ - 1 ] . resize ( size )  self . centralwidget . addTab ( mdiArea , os . path . splitext ( os . path . basename ( str ( fname ) ) ) [ 0 ] ) self . centralwidget . setCurrentIndex ( self . centralwidget . count ( ) - 1 ) self . currentScene . project = project self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + fname , True ) self . activeControl ( True ) self . changeStatusThermo ( self . config [ self . idTab ] )   def fileClose ( self , int ) :          if self . okToContinue ( int ) :              self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + self . currentFilename ) self . centralwidget . removeTab ( int ) del self . dirty [ int ] del self . config [ int ] del self . filename [ int ] if self . centralwidget . count ( ) :                  self . activeControl ( True )  else :                  self . activeControl ( False ) self . list . clear ( ) flujo . StreamItem . id = 0 flujo . EquipmentItem . id = 0    def wizard ( self ) :          dialog = wizard . Wizard ( self . config [ self . idTab ] ) if dialog . exec_ ( ) :              self . updateConfig ( dialog . value ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) , True )  else :              self . updateConfig ( wizard . Wizard . default ( ) ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) , False )   def updateConfig ( self , config ) :          self . config [ self . idTab ] = config self . currentScene . project . setConfig ( config ) self . dirty [ self . idTab ] = True x = config . getint ( <str> , <str> ) y = config . getint ( <str> , <str> ) self . currentScene . setSceneRect ( 0 , 0 , x , y ) self . changeStatusThermo ( config ) setMainWindowConfig ( config ) config . write ( open ( conf_dir + <str> , <str> ) )  def updateStatus ( self , text , success = True ) :          if success :              txt = QtWidgets . QApplication . translate ( <str> , <str> ) color = <str>  else :              txt = QtWidgets . QApplication . translate ( <str> , <str> ) color = <str>  self . status . append ( <str> + time . strftime ( <str> , time . localtime ( ) ) + <str> + text + <str> % ( color , txt ) ) QtWidgets . QApplication . processEvents ( )  def updatePosition ( self , point ) :          self . statusPosition . setText ( <str> % ( point . x ( ) , point . y ( ) ) )  def changeStatusThermo ( self , config ) :              if config . has_section ( <str> ) and config . has_section ( <str> ) :                  components = config . get ( <str> , <str> ) if config . getboolean ( <str> , <str> ) and config . getboolean ( <str> , <str> ) and len ( components ) == 1 and components [ 0 ] == 62 :                      txt = <str>  elif config . getboolean ( <str> , <str> ) and len ( components ) == 1 and components [ 0 ] == 62 :                      txt = <str>  elif config . getboolean ( <str> , <str> ) and config . getboolean ( <str> , <str> ) :                      txt = <str>  elif config . getboolean ( <str> , <str> ) and config . getboolean ( <str> , <str> ) :                      txt = <str>  elif config . getboolean ( <str> , <str> ) :                      txt = <str>  else :                      txt = <str> % ( K [ config . getint ( <str> , <str> ) ] . __status__ , H [ config . getint ( <str> , <str> ) ] . __status__ )  self . statusThermo . setText ( txt )  if config . has_section ( <str> ) :                  x = config . getint ( <str> , <str> ) y = config . getint ( <str> , <str> ) self . statusResolution . setText ( <str> % ( x , y ) )   def dialogConfig ( self , UIconfig ) :          Dialog = UIconfig . Dialog ( self . config [ self . idTab ] ) if Dialog . exec_ ( ) :              config = Dialog . value ( self . config [ self . idTab ] ) self . updateConfig ( config ) self . saveControl ( )   def costos ( self ) :          dialog = costIndex . Ui_CostIndex ( ) dialog . exec_ ( )  def Preferencias ( self ) :          global Preferences dialog = UI_Preferences . Preferences ( Preferences ) if dialog . exec_ ( ) :              preferences = dialog . value ( ) preferences . write ( open ( conf_dir + <str> , <str> ) ) Preferences = ConfigParser ( ) Preferences . read ( conf_dir + <str> ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) , True ) self . changePreferenceLive ( )  else :              self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) , False )   def changePreferenceLive ( self ) :          if Preferences . getboolean ( <str> , <str> ) :              self . systemtray . show ( )  else :              self . systemtray . hide ( )  config . Preferences = Preferences  def activeControl ( self , boolean ) :          self . fileSaveAsAction . setEnabled ( boolean ) self . fileSaveAllAction . setEnabled ( boolean ) self . fileCloseAction . setEnabled ( boolean ) self . actionWizard . setEnabled ( boolean ) self . actionComponentList . setEnabled ( boolean ) self . actionThermo . setEnabled ( boolean ) self . actionTransporte . setEnabled ( boolean ) self . actionUnidades . setEnabled ( boolean ) self . actionZoom . setEnabled ( boolean ) self . actionZoomIn . setEnabled ( boolean ) self . actionZoomOut . setEnabled ( boolean ) self . zoomValue . setEnabled ( boolean ) self . menuPFD . setEnabled ( boolean ) self . menuPlot . setEnabled ( boolean ) self . menuVentana . setEnabled ( boolean ) self . menuMEoS . setEnabled ( boolean ) self . toolboxItem . setEnabled ( boolean ) self . toolboxPalette . setEnabled ( boolean ) if boolean :              self . saveControl ( )  else :              self . fileSaveAction . setEnabled ( False ) self . statusPosition . clear ( ) self . statusResolution . clear ( ) self . statusThermo . clear ( )   def saveControl ( self ) :          self . fileSaveAction . setEnabled ( self . dirty [ self . idTab ] ) self . tabModified ( self . idTab )  def tabModified ( self , indice ) :          if self . dirty [ indice ] :              icon = QtGui . QIcon ( IMAGE_PATH + <str> )  else :              icon = QtGui . QIcon ( )  self . centralwidget . setTabIcon ( indice , icon )  def currentTabChanged ( self , indice ) :          if indice == - 1 :              self . list . clear ( ) self . activeControl ( False )  elif self . filename [ - 1 ] :              scene = self . currentScene self . list . updateList ( scene . objects ) self . centralwidget . currentWidget ( ) . subWindowList ( ) [ 0 ] . widget ( ) self . list . updateList ( self . currentScene . objects ) self . changeStatusThermo ( self . config [ self . idTab ] )  else :              self . list . clear ( ) self . statusThermo . clear ( ) self . statusResolution . clear ( )   def help ( self ) :          path = os . path . join ( os . environ [ <str> ] , <str> ) + os . sep if os . path . isdir ( path ) :              indexpath = os . path . join ( path , <str> , <str> , <str> ) url = QtCore . QUrl ( indexpath )  else :              url = QtCore . QUrl ( <str> )  QtGui . QDesktopServices . openUrl ( url )  def documentation ( self ) :          dialog = doi . ShowReference ( ) dialog . exec_ ( )  def log ( self ) :          command = Preferences . get ( <str> , <str> ) path = os . path . join ( conf_dir , <str> ) subprocess . Popen ( [ command , path ] )  def acerca ( self ) :          txt = QtWidgets . QApplication . translate ( <str> , <str> ) QtWidgets . QMessageBox . about ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , % ( __version__ , txt , platform . python_version ( ) , QtCore . QT_VERSION_STR , QtCore . PYQT_VERSION_STR , platform . system ( ) ) )  def acercaQt ( self ) :          QtWidgets . QMessageBox . aboutQt ( self , QtWidgets . QApplication . translate ( <str> , <str> ) )  def calculator ( self ) :          command = str ( Preferences . get ( <str> , <str> ) ) os . system ( command )  def terminal ( self ) :          from tools import terminal terminal . XTerm ( Preferences )  def tablaPeriodica ( self ) :          from tools import qtelemental Tabla_Periodica = qtelemental . qtelemental ( ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) Tabla_Periodica . exec_ ( )  def meos ( self ) :          dialog = UI_Tables . Dialog ( self . currentConfig , self ) dialog . exec_ ( )  def diagramaPsicrometrico ( self ) :          Psychrometry = UI_psychrometry . UI_Psychrometry ( ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) Psychrometry . exec_ ( )  def externalPrograms ( self ) :          dialog = dependences . ShowDependences ( ) dialog . exec_ ( )  def conversor_unidades ( self ) :          Conversor = UI_unitConverter . UI_unitConverter ( ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) Conversor . exec_ ( )  def conversor_moneda ( self ) :          Conversor = UI_unitConverter . moneda ( ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) ) Conversor . exec_ ( )  def chart ( self , grafico ) :          dialog = grafico ( ) self . updateStatus ( QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + grafico . title ) dialog . exec_ ( )  def verComponentes ( self ) :          Base_datos = UI_databank . UI_databank ( ) Base_datos . exec_ ( )  def newcomponente ( self ) :          dialog = viewComponents . View_Component ( ) dialog . exec_ ( )  def pseudocomponente ( self ) :          Dialog = Definicion_Petro ( ) Dialog . exec_ ( )  def newComponent_Contribution ( self , name ) :          Dialog = newComponent . Ui_Contribution ( name ) Dialog . exec_ ( )  def plot ( self , indice , x = None , y = None ) :          grafico = plots . __all__ [ indice ] ( ) if grafico . exec_ ( ) :              self . currentMdi . addSubWindow ( grafico . plot ) grafico . plot . show ( )   def savePFDImage ( self ) :          if self . filename [ self . idTab ] :              dir = os . path . dirname ( str ( self . filename [ self . idTab ] ) )  else :              dir = <str>  fname = QtWidgets . QFileDialog . getSaveFileName ( None , QtWidgets . QApplication . translate ( <str> , <str> ) , dir , <str> ) [ 0 ] if fname :              rect = self . currentScene . sceneRect ( ) img = QtGui . QImage ( rect . width ( ) , rect . height ( ) , QtGui . QImage . Format_ARGB32_Premultiplied ) p = QtGui . QPainter ( img ) self . currentScene . render ( p ) p . end ( ) img . save ( fname )   def zoom ( self , value = None ) :          if value == <str> :              self . zoomValue . setValue ( self . zoomValue . value ( ) + 5 )  elif value == <str> :              self . zoomValue . setValue ( self . zoomValue . value ( ) - 5 )  elif value == <str> :              value , bool = QtWidgets . QInputDialog . getInt ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , self . zoomValue . value ( ) ) if bool :                  self . zoomValue . setValue ( value )   else :              self . currentView . zoom ( value )   def overview ( self ) :          PFD = flujo . GraphicsView ( False ) PFD . zoom ( 20 ) PFD . setWindowTitle ( QtWidgets . QApplication . translate ( <str> , <str> ) ) PFD . setScene ( self . currentScene ) self . centralwidget . currentWidget ( ) . addSubWindow ( PFD ) PFD . show ( )  def selectionChanged ( self ) :          sender = self . sender ( ) if isinstance ( sender , QtWidgets . QTreeWidget ) :              self . currentScene . blockSignals ( True ) self . currentScene . clearSelection ( ) for element in self . list . selectedItems ( ) :                  if element . parent ( ) == self . list . Equipment :                      obj = self . currentScene . getObject ( <str> , int ( element . text ( 0 ) . split ( <str> ) [ 0 ] ) ) obj . setSelected ( True )  if element . parent ( ) == self . list . Stream :                      obj = self . currentScene . getObject ( <str> , int ( element . text ( 0 ) ) ) obj . setSelected ( True )   self . currentScene . blockSignals ( False )  elif isinstance ( sender , flujo . GraphicsScene ) :              self . list . blockSignals ( True ) self . list . clearSelection ( ) for element in sender . selectedItems ( ) :                  if isinstance ( element , flujo . StreamItem ) :                      self . list . Stream . child ( element . id - 1 ) . setSelected ( True )  elif isinstance ( element , flujo . EquipmentItem ) and element . tipo == <str> :                      self . list . Equipment . child ( element . id - 1 ) . setSelected ( True )   self . list . blockSignals ( False )   def addText ( self ) :          dialog = flujo . TextItemDlg ( ) if dialog . exec_ ( ) :              self . currentScene . waitClick ( 1 , <str> , flujo . TextItem ( dialog . editor . texto ) )   def addItem ( self , type , bool = True ) :          if type == <str> :              obj = flujo . RectItem ( ) num = 2  elif type == <str> :              obj = flujo . EllipseItem ( ) num = 2  elif type == <str> :              obj = flujo . EquipmentItem ( <str> , None ) num = 1  elif type == <str> :              obj = flujo . EquipmentItem ( <str> , None ) num = 1  elif type == <str> :              if bool :                  obj = flujo . StreamItem ( ) num = 2  else :                  self . currentScene . clickCollector . quit ( ) return   self . currentScene . waitClick ( num , type , obj )  def addEquipment ( self , equipo ) :          equip = equipment . UI_equipments . index ( equipo ) object = flujo . EquipmentItem ( equipo . __name__ . split ( <str> ) [ - 1 ] , equip ) self . currentScene . waitClick ( 1 , <str> , object )    