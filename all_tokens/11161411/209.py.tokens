from unittest import TestCase from lib import unidades from lib . meos import MEoS class nC16 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 226.441 ) Tc = unidades . Temperature ( 722.1 ) Pc = unidades . Pressure ( 1.4799 , <str> ) M = 226.441 Tt = unidades . Temperature ( 291.329 ) Tb = unidades . Temperature ( 560 ) f_acent = 0.744 momentoDipolar = unidades . DipoleMoment ( 0.0 , <str> ) id = 20 Fi1 = { <str> : [ 1 , 22 ] , <str> : [ 0 , 1 ] , <str> : [ 45.96 , - 26.19 ] , <str> : [ 18.9 , 76.2 ] , <str> : [ 420 / Tc , 1860 / Tc ] } romeo = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.3144621 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 750.0 , <str> : 200000.0 , <str> : 10 , <str> : [ 0.03965879 , 1.945813 , - 3.738575 , - 0.3428167 , 0.3427022 ] , <str> : [ 4 , 1 , 1 , 2 , 3 ] , <str> : [ 1 , 0.224 , 0.91 , 0.95 , 0.555 ] , <str> : [ - 2.519592 , - 0.8948857 , 0.10760773 , - 1.297826 , - 0.04832312 ] , <str> : [ 1 , 3 , 2 , 2 , 7 ] , <str> : [ 2.36 , 3.58 , 0.5 , 1.72 , 1.078 ] , <str> : [ 2 , 2 , 1 , 2 , 1 ] , <str> : [ 1 ] * 5 , <str> : [ 4.245522 , - 0.31527585 , - 0.7212941 , - 0.2680657 , - 0.7859567 ] , <str> : [ 1 , 1 , 3 , 2 , 2 ] , <str> : [ 1.14 , 2.43 , 1.75 , 1.1 , 1.08 ] , <str> : [ 0.641 , 1.008 , 1.026 , 1.21 , 0.93 ] , <str> : [ 0.516 , 0.669 , 0.25 , 1.33 , 2.1 ] , <str> : [ 1.335 , 1.187 , 1.39 , 1.23 , 0.763 ] , <str> : [ 0.75 , 1.616 , 0.47 , 1.306 , 0.46 ] } eq = romeo , _vapor_Pressure = { <str> : 3 , <str> : [ - 10.4856 , 3.8226 , - 8.6727 , - 4.144 , 0.8801 , - 5.7224 ] , <str> : [ 1 , 1.5 , 2.8 , 6.7 , 8.9 , 15.5 ] } _liquid_Density = { <str> : 1 , <str> : [ 3.43 , - 4.008 , 8.4779 , - 7.894 , 3.4824 ] , <str> : [ 0.39 , 0.84 , 1.27 , 1.72 , 2.26 ] } _vapor_Density = { <str> : 2 , <str> : [ - 9.47682338 , - 9.4767733 , - 10.02912522 , - 4.06049714 , - 34.0409857 ] , <str> : [ 3.76792237 , 3.76792787 , 1.33565281 , 0.41355594 , 3.76792704 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 3 , <str> : [ - 0.6131 , 414.4 , - 39759 ] , <str> : 1 , <str> : 0.32137 / M ** 0.5 , <str> : 722.1 , <str> : M , <str> : [ 0.000692129 , 0.00645721 , - 0.000305913 , 1.26656e-12 , 21.851 , - 30.2533 , 21.0853 ] , <str> : [ 9 + 2 / 3 , 9 + 2 / 3 , 11 + 2 / 3 , 24 + 2 / 3 , 1.6 + 2 / 3 , 0.6 + 2 / 3 , 2 / 3 ] , <str> : [ - 0.5 , 0.8 , - 0.5 , 5 , - 0.5 , - 1.5 , - 0.5 ] , <str> : <str> } def _vir ( self , rho , T , fase ) :          muB = 0 if rho :              for i , n in enumerate ( [ 7.4345 , - 739.4 , - 2255587 ] ) :                  muB += n / T ** i   return muB * rho / self . M  _viscosity = visco0 , thermo0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 722.1 , <str> : 1e-3 , <str> : [ 4.25547 , - 39.3553 , 140.965 , - 244.669 , 143.418 , - 48.4488 , 6.8884 ] , <str> : [ 0 , 1 , 2 , 3 , 4 , 5 , 6 ] , <str> : [ 0.152925 , - 1 ] , <str> : [ 0 , 1 ] , <str> : 722.1 , <str> : 226.441 , <str> : 1 , <str> : [ - 0.372089e-1 , 0.935694e-1 , - 0.313826e-1 , 0.201863e-2 , 0.255103e-3 , 0.409813e-1 , - 0.101536 , 0.574353e-1 , - 0.153161e-1 , 0.197462e-2 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , - 1 , - 1 , - 1 ] , <str> : [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.02 , <str> : 0.291e-9 , <str> : 0.063 , <str> : 0.998e-9 , <str> : 1083.2 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_meng ( self ) :          st = nC16 ( T = 293.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 10 ) , 1.157e-7 ) self . assertEqual ( round ( st . Gas . rhoM , 11 ) , 4.747e-8 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 3.93 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 3.4168 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 3468.0 ) st = nC16 ( T = 383.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 1.828e-4 ) self . assertEqual ( round ( st . Gas . rhoM , 8 ) , 5.740e-5 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 5.18 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 3.1384 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 795.7 ) st = nC16 ( T = 473.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 9.779e-3 ) self . assertEqual ( round ( st . Gas . rhoM , 6 ) , 2.521e-3 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 6.72 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 2.8521 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 351.2 ) st = nC16 ( T = 563.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.087e-1 ) self . assertEqual ( round ( st . Gas . rhoM , 5 ) , 2.528e-2 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 9.03 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 2.5309 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 184.0 ) st = nC16 ( T = 653.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 5.507e-1 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 1.381e-1 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 12.44 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 2.1011 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 97.4 ) self . assertEqual ( round ( nC16 ( T = 300 , rhom = 0 ) . mu . muPas , 3 ) , 4.016 ) self . assertEqual ( round ( nC16 ( T = 300 , rhom = 3.3958 ) . mu . muPas , 3 ) , 2952.344 ) self . assertEqual ( round ( nC16 ( T = 300 , rhom = 3.5204 ) . mu . muPas , 3 ) , 5399.826 ) self . assertEqual ( round ( nC16 ( T = 300 , rhom = 3.9643 ) . mu . muPas , 2 ) , 64703.41 ) self . assertEqual ( round ( nC16 ( T = 400 , rhom = 0 ) . mu . muPas , 3 ) , 5.399 ) self . assertEqual ( round ( nC16 ( T = 400 , rhom = 3.0865 ) . mu . muPas , 3 ) , 667.473 ) self . assertEqual ( round ( nC16 ( T = 400 , rhom = 3.2773 ) . mu . muPas , 3 ) , 1133.060 ) self . assertEqual ( round ( nC16 ( T = 400 , rhom = 3.8145 ) . mu . muPas , 3 ) , 8775.901 ) self . assertEqual ( round ( nC16 ( T = 600 , rhom = 0 ) . mu . muPas , 3 ) , 8.135 ) self . assertEqual ( round ( nC16 ( T = 600 , rhom = 2.8585 ) . mu . muPas , 3 ) , 325.831 ) self . assertEqual ( round ( nC16 ( T = 600 , rhom = 3.578 ) . mu . muPas , 3 ) , 1463.805 ) self . assertEqual ( round ( nC16 ( T = 700 , rhom = 0 ) . mu . muPas , 3 ) , 9.418 ) st = nC16 ( T = 700 , rhom = 2.6752 ) mu = st . _Viscosity ( 2.6752 * st . M , 700 , None ) self . assertEqual ( round ( mu . muPas , 3 ) , 223.559 ) self . assertEqual ( round ( nC16 ( T = 700 , rhom = 3.4806 ) . mu . muPas , 3 ) , 949.425 )  def test_Monogenidou ( self ) :          st = nC16 ( T = 300 , P = 1e5 ) self . assertEqual ( round ( st . rho , 2 ) , 768.94 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 143.52 ) st = nC16 ( T = 500 , P = 1e5 ) self . assertEqual ( round ( st . rho , 2 ) , 625.54 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 110.68 ) st = nC16 ( T = 700 , P = 1e5 ) self . assertEqual ( round ( st . rho , 3 ) , 4.010 ) self . assertEqual ( round ( st . k . mWmK , 3 ) , 40.981 ) st = nC16 ( T = 300 , P = 1e7 ) self . assertEqual ( round ( st . rho , 2 ) , 775.36 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 146.53 ) st = nC16 ( T = 500 , P = 1e7 ) self . assertEqual ( round ( st . rho , 2 ) , 644.98 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 116.13 ) st = nC16 ( T = 700 , P = 1e7 ) self . assertEqual ( round ( st . rho , 2 ) , 505.43 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 94.80 ) st = nC16 ( T = 300 , P = 2.5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 784.21 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 150.94 ) st = nC16 ( T = 500 , P = 2.5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 666.49 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 123.07 ) st = nC16 ( T = 700 , P = 2.5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 559.38 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 105.81 ) st = nC16 ( T = 300 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 797.17 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 157.98 ) st = nC16 ( T = 500 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 692.52 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 133.07 ) st = nC16 ( T = 700 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 605.77 ) self . assertEqual ( round ( st . k . mWmK , 2 ) , 118.31 )    