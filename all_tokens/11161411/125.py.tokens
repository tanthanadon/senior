from math import exp import os from scipy . constants import R import iapws from iapws . iapws97 import prop0 try :      import freesteam  except :      pass  from lib import unidades , mEoS from lib . thermo import ThermoWater class Freesteam ( ThermoWater ) :      kwargs = { <str> : 0.0 , <str> : 0.0 , <str> : None , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.5893 } __doi__ = [ { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } ] M = unidades . Dimensionless ( iapws . _iapws . M ) if os . environ [ <str> ] == <str> :          Pc = unidades . Pressure ( freesteam . PCRIT ) Tc = unidades . Temperature ( freesteam . TCRIT ) rhoc = unidades . Density ( freesteam . RHOCRIT * M )  else :          Pc = unidades . Pressure ( iapws . _iapws . Pc , <str> ) Tc = unidades . Temperature ( iapws . _iapws . Tc ) rhoc = unidades . Density ( iapws . _iapws . rhoc )  Tt = iapws . _iapws . Tt Tb = iapws . _iapws . Tb f_accent = unidades . Dimensionless ( iapws . _iapws . f_acent ) momentoDipolar = iapws . _iapws . Dipole @ property def calculable ( self ) :          self . _thermo = - 1 if self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . _thermo = 0 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . _thermo = 1 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . _thermo = 2 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . _thermo = 3 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . _thermo = 4 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  elif self . kwargs [ <str> ] and self . kwargs [ <str> ] is not None :              self . _thermo = 5 self . var1 = self . kwargs [ <str> ] self . var2 = self . kwargs [ <str> ]  return self . _thermo + 1  def calculo ( self ) :          method = [ freesteam . steam_pT , freesteam . steam_ph , freesteam . steam_ps , freesteam . steam_pv , freesteam . steam_Ts , freesteam . steam_Tx ] func = method [ self . _thermo ] fluido = func ( self . var1 , self . var2 ) self . x = unidades . Dimensionless ( fluido . x ) self . name = mEoS . H2O . name self . region = fluido . region self . synonim = mEoS . H2O . synonym self . CAS = mEoS . H2O . CASNumber self . T = unidades . Temperature ( fluido . T ) self . P = unidades . Pressure ( fluido . p ) self . phase = self . getphase ( Tc = self . Tc , Pc = self . Pc , T = self . T , P = self . P , x = self . x , region = self . region ) self . Tr = unidades . Dimensionless ( self . T / self . Tc ) self . Pr = unidades . Dimensionless ( self . P / self . Pc ) self . rho = unidades . Density ( fluido . rho ) self . v = unidades . SpecificVolume ( 1. / self . rho ) cp0 = prop0 ( self . T , self . P . MPa ) cp0 [ <str> ] *= 1000 cp0 [ <str> ] *= 1000 cp0 [ <str> ] *= 1000 cp0 [ <str> ] *= 1000 self . _cp0 ( cp0 ) self . Liquido = ThermoWater ( ) self . Gas = ThermoWater ( ) if self . x == 0 :              self . fill ( self , fluido ) self . fill ( self . Liquido , fluido ) self . sigma = unidades . Tension ( freesteam . surftens_T ( self . T ) ) self . Hvap = unidades . Enthalpy ( None ) self . Svap = unidades . SpecificHeat ( None )  elif self . x == 1 :              self . fill ( self , fluido ) self . fill ( self . Gas , fluido ) self . Hvap = unidades . Enthalpy ( None ) self . Svap = unidades . SpecificHeat ( None )  else :              liquido = freesteam . steam_Tx ( fluido . T , 0. ) self . fill ( self . Liquido , liquido ) self . sigma = unidades . Tension ( freesteam . surftens_T ( self . T ) ) vapor = freesteam . steam_Tx ( fluido . T , 1. ) self . fill ( self . Gas , vapor ) self . h = unidades . Enthalpy ( self . x * self . Gas . h + ( 1 - self . x ) * self . Liquido . h ) self . s = unidades . SpecificHeat ( self . x * self . Gas . s + ( 1 - self . x ) * self . Liquido . s ) self . u = unidades . SpecificHeat ( self . x * self . Gas . u + ( 1 - self . x ) * self . Liquido . u ) self . a = unidades . Enthalpy ( self . x * self . Gas . a + ( 1 - self . x ) * self . Liquido . a ) self . g = unidades . Enthalpy ( self . x * self . Gas . g + ( 1 - self . x ) * self . Liquido . g ) self . cv = unidades . SpecificHeat ( None ) self . cp = unidades . SpecificHeat ( None ) self . cp_cv = unidades . Dimensionless ( None ) self . w = unidades . Speed ( None ) self . Hvap = unidades . Enthalpy ( vapor [ <str> ] - liquido [ <str> ] , <str> ) self . Svap = unidades . SpecificHeat ( vapor [ <str> ] - liquido [ <str> ] , <str> )   def fill ( self , fase , estado ) :          fase . _bool = True fase . M = self . M fase . rho = unidades . Density ( estado . rho ) fase . v = unidades . SpecificVolume ( estado . v ) fase . Z = unidades . Dimensionless ( self . P * estado . v / R / 1000 * self . M / self . T ) fase . h = unidades . Enthalpy ( estado . h ) fase . s = unidades . SpecificHeat ( estado . s ) fase . u = unidades . Enthalpy ( estado . u ) fase . a = unidades . Enthalpy ( fase . u - self . T * fase . s ) fase . g = unidades . Enthalpy ( fase . h - self . T * fase . s ) fi = exp ( ( fase . g - self . g0 ) / 1000 / R * self . M / self . T ) fase . fi = [ unidades . Pressure ( fi ) ] fase . f = [ unidades . Pressure ( self . P * f ) for f in fase . fi ] fase . cv = unidades . SpecificHeat ( estado . cv ) fase . cp = unidades . SpecificHeat ( estado . cp ) fase . cp_cv = unidades . Dimensionless ( fase . cp / fase . cv ) fase . gamma = fase . cp_cv fase . w = unidades . Speed ( estado . w ) fase . rhoM = unidades . MolarDensity ( fase . rho / self . M ) fase . hM = unidades . MolarEnthalpy ( fase . h * self . M ) fase . sM = unidades . MolarSpecificHeat ( fase . s * self . M ) fase . uM = unidades . MolarEnthalpy ( fase . u * self . M ) fase . aM = unidades . MolarEnthalpy ( fase . a * self . M ) fase . gM = unidades . MolarEnthalpy ( fase . g * self . M ) fase . cvM = unidades . MolarSpecificHeat ( fase . cv * self . M ) fase . cpM = unidades . MolarSpecificHeat ( fase . cp * self . M ) fase . mu = unidades . Viscosity ( estado . mu ) fase . nu = unidades . Diffusivity ( fase . mu / fase . rho ) fase . k = unidades . ThermalConductivity ( estado . k ) fase . alfa = unidades . Diffusivity ( fase . k / fase . rho / fase . cp ) fase . epsilon = unidades . Dimensionless ( iapws . _Dielectric ( estado . rho , self . T ) ) fase . Prandt = unidades . Dimensionless ( estado . mu * estado . cp / estado . k ) fase . n = unidades . Dimensionless ( iapws . _Refractive ( fase . rho , self . T , self . kwargs [ <str> ] ) ) fase . alfav = unidades . InvTemperature ( estado . deriv ( <str> ) / fase . v ) fase . kappa = unidades . InvPressure ( - estado . deriv ( <str> ) / fase . v ) fase . kappas = unidades . InvPressure ( - 1 / fase . v * self . derivative ( <str> , <str> , <str> , fase ) ) fase . joule = unidades . TemperaturePressure ( estado . deriv ( <str> ) ) fase . deltat = unidades . EnthalpyPressure ( estado . deriv ( <str> ) ) fase . alfap = unidades . Density ( fase . alfav / self . P / fase . kappa ) fase . betap = unidades . Density ( - 1 / self . P * estado . deriv ( <str> ) ) fase . fraccion = [ 1 ] fase . fraccion_masica = [ 1 ]   if __name__ == <str> :      fluido = Freesteam ( T = 373.15 , x = 1 ) print ( fluido . h . kJkg , fluido . P )   