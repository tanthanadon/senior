from unittest import TestCase from lib import unidades from lib . meos import MEoS class oXylene ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 285 ) Tc = unidades . Temperature ( 630.259 ) Pc = unidades . Pressure ( 3737.5 , <str> ) M = 106.165 Tt = unidades . Temperature ( 247.985 ) Tb = unidades . Temperature ( 417.521 ) f_acent = 0.312 momentoDipolar = unidades . DipoleMoment ( 0.63 , <str> ) id = 42 Fi1 = { <str> : [ 1 , 2.748798 ] , <str> : [ 0 , 1 ] , <str> : [ 10.137376 , - 0.91282993 ] , <str> : [ 4.754892 , 6.915052 , 15.84813 , 10.93886 ] , <str> : [ 225 / Tc , 627 / Tc , 1726 / Tc , 4941 / Tc ] } zhou = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : <str> , <str> : Tt , <str> : 700.0 , <str> : 70000.0 , <str> : 8.648 , <str> : [ 0.0036765156 , - 0.13918171 , 0.014104203 , 1.5398899 , - 2.3600925 , - 0.44359159 , 0.19596977 ] , <str> : [ 5 , 1 , 4 , 1 , 1 , 2 , 3 ] , <str> : [ 1.0 , 0.6 , 0.91 , 0.3 , 0.895 , 1.167 , 0.435 ] , <str> : [ - 1.0909408 , - 0.21890801 , 1.1179223 , - 0.93563815 , - 0.018102996 ] , <str> : [ 1 , 3 , 2 , 2 , 7 ] , <str> : [ 2.766 , 3.8 , 1.31 , 3.0 , 0.77 ] , <str> : [ 2 , 2 , 1 , 2 , 1 ] , <str> : [ 1 ] * 5 , <str> : [ 1.4172368 , - 0.57134695 , - 0.081944041 , - 40.682878 ] , <str> : [ 1 , 1 , 3 , 3 ] , <str> : [ 1.41 , 4.8 , 1.856 , 2.0 ] , <str> : [ 1.1723 , 1.095 , 1.6166 , 20.4 ] , <str> : [ 2.442 , 1.342 , 3.0 , 450.0 ] , <str> : [ 1.2655 , 0.3959 , 0.7789 , 1.162 ] , <str> : [ 0.552 , 0.728 , 0.498 , 0.894 ] } eq = zhou , _vapor_Pressure = { <str> : 3 , <str> : [ - 7.2834 , - 1.5813 , 7.6516 , - 7.9953 , - 2.2277 ] , <str> : [ 1.0 , 1.5 , 1.9 , 2.4 , 6.0 ] } _liquid_Density = { <str> : 1 , <str> : [ 0.9743 , 16.511 , - 52.934 , 87.962 , - 71.719 , 22.569 ] , <str> : [ 0.3 , 0.96 , 1.4 , 1.9 , 2.4 , 3.0 ] } _vapor_Density = { <str> : 2 , <str> : [ - 1.29038 , - 33.3428 , 142.046 , - 292.211 , 293.950 , - 159.504 , - 88.2170 ] , <str> : [ 0.32 , 1.14 , 1.7 , 2.2 , 2.8 , 3.5 , 9.8 ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 3 , <str> : [ - 1.4933 , 473.2 , - 57033 ] , <str> : 1 , <str> : 0.22225 / M ** 0.5 , <str> : 630.259 , <str> : 2.6845 * M , <str> : [ - 2.05581e-3 , 2.65651e-3 , 2.38762 , 1.77616e-12 , 10.4497 , - 18.2446 , 15.9587 ] , <str> : [ 329 / 30 , 329 / 30 , 119 / 30 , 77 / 3 , 71 / 30 , 41 / 30 , 16 / 15 ] , <str> : [ - 0.5 , 0.3 , - 0.5 , 3.9 , - 0.5 , - 1.5 , - 0.5 ] , <str> : <str> } def _vir ( self , rho , T , fase ) :          muB = 0 if rho :              for i , n in enumerate ( [ 13.2814 , - 10862.4 , 1664060 ] ) :                  muB += n / T ** i   return muB * rho / self . M  _viscosity = visco0 , thermo0 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 630.259 , <str> : 1e-3 , <str> : [ - 0.837488 , 12.7856 , - 37.1925 , 63.9548 , - 4.43443 ] , <str> : [ 0 , 1 , 2 , 3 , 4 ] , <str> : [ 0.262226 , - 0.490519 , 1 ] , <str> : [ 0 , 1 , 2 ] , <str> : 630.259 , <str> : 285 , <str> : 1e-3 , <str> : [ - 3.46292e1 , 7.57735e1 , - 6.74378e1 , 2.76950e1 , - 3.74238 , 4.55879e1 , - 5.94473e1 , 5.50012e1 , - 2.55522e1 , 4.18805 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , - 1 , - 1 , - 1 , - 1 , - 1 ] , <str> : [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.02 , <str> : 0.236e-9 , <str> : 0.058 , <str> : 0.711e-9 , <str> : 945.4 } _thermal = thermo0 ,  class Test ( TestCase ) :      def test_Cao ( self ) :          st = oXylene ( T = 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 0.0002 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 0.0001 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 8.4485 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 1107.7 ) st = oXylene ( T = 333.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 0.0055 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 0.002 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 7.9701 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 499.8 ) st = oXylene ( T = 393.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 0.0507 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 0.0160 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 8.50 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 7.4658 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 294.5 ) st = oXylene ( T = 453.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 0.2389 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 0.0692 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 9.81 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 6.9087 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 195.6 ) st = oXylene ( T = 553.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.3884 ) self . assertEqual ( round ( st . Gas . rhoM , 4 ) , 0.4174 ) self . assertEqual ( round ( st . Gas . mu . muPas , 2 ) , 12.53 ) self . assertEqual ( round ( st . Liquido . rhoM , 4 ) , 5.6991 ) self . assertEqual ( round ( st . Liquido . mu . muPas , 1 ) , 103.8 ) self . assertEqual ( round ( oXylene ( T = 300 , rhom = 0 ) . mu . muPas , 3 ) , 6.670 ) st = oXylene ( T = 300 , rhom = 0.04 ) mu = st . _Viscosity ( 0.04 * st . M , 300 , None ) self . assertEqual ( round ( mu . muPas , 3 ) , 6.598 ) self . assertEqual ( round ( oXylene ( T = 300 , rhom = 8.2369 ) . mu . muPas , 3 ) , 738.286 ) self . assertEqual ( round ( oXylene ( T = 300 , rhom = 8.7845 ) . mu . muPas , 3 ) , 1645.436 ) self . assertEqual ( round ( oXylene ( T = 400 , rhom = 0 ) . mu . muPas , 3 ) , 8.658 ) st = oXylene ( T = 400 , rhom = 0.04 ) mu = st . _Viscosity ( 0.04 * st . M , 400 , None ) self . assertEqual ( round ( mu . muPas , 3 ) , 8.634 ) self . assertEqual ( round ( oXylene ( T = 400 , rhom = 7.4060 ) . mu . muPas , 3 ) , 279.954 ) self . assertEqual ( round ( oXylene ( T = 400 , rhom = 8.2291 ) . mu . muPas , 3 ) , 595.652 ) self . assertEqual ( round ( oXylene ( T = 600 , rhom = 0 ) . mu . muPas , 3 ) , 12.904 ) self . assertEqual ( round ( oXylene ( T = 600 , rhom = 0.04 ) . mu . muPas , 3 ) , 13.018 ) self . assertEqual ( round ( oXylene ( T = 600 , rhom = 7.2408 ) . mu . muPas , 3 ) , 253.530 )  def test_Mylona ( self ) :          self . assertEqual ( round ( oXylene ( T = 250 , rho = 0 ) . k . mWmK , 2 ) , 10.06 ) self . assertEqual ( round ( oXylene ( T = 300 , rho = 0 ) . k . mWmK , 2 ) , 13.67 ) self . assertEqual ( round ( oXylene ( T = 400 , rho = 0 ) . k . mWmK , 1 ) , 22.4 ) self . assertEqual ( round ( oXylene ( T = 500 , rho = 0 ) . k . mWmK , 1 ) , 32.0 ) self . assertEqual ( round ( oXylene ( T = 600 , rho = 0 ) . k . mWmK , 1 ) , 41.6 ) self . assertEqual ( round ( oXylene ( T = 700 , rho = 0 ) . k . mWmK , 1 ) , 50.9 ) self . assertEqual ( round ( oXylene ( T = 250 , P = 1e5 ) . k . mWmK , 1 ) , 141.5 ) self . assertEqual ( round ( oXylene ( T = 300 , P = 1e5 ) . k . mWmK , 1 ) , 130.2 ) self . assertEqual ( round ( oXylene ( T = 400 , P = 1e5 ) . k . mWmK , 1 ) , 104.9 ) self . assertEqual ( round ( oXylene ( T = 500 , P = 1e5 ) . k . mWmK , 1 ) , 32.0 ) self . assertEqual ( round ( oXylene ( T = 600 , P = 1e5 ) . k . mWmK , 1 ) , 41.6 ) self . assertEqual ( round ( oXylene ( T = 700 , P = 1e5 ) . k . mWmK , 1 ) , 51.0 ) self . assertEqual ( round ( oXylene ( T = 635 , rho = 270 ) . k . mWmK , 2 ) , 101.76 )    