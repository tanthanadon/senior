from copy import copy from unittest import TestCase from iapws import _Viscosity , _ThCond , _Dielectric , _Tension from iapws import _Melting_Pressure , _Sublimation_Pressure from lib import unidades from lib . meos import MEoS class H2O ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> Tc = unidades . Temperature ( 647.096 ) rhoc = unidades . Density ( 322. ) Pc = unidades . Pressure ( 22064.0 , <str> ) M = 18.015268 Tt = unidades . Temperature ( 273.16 ) Tb = unidades . Temperature ( 373.1243 ) f_acent = 0.3443 momentoDipolar = unidades . DipoleMoment ( 1.855 , <str> ) id = 62 Fi1 = { <str> : [ 1 , 3.00632 ] , <str> : [ 0 , 1 ] , <str> : [ - 8.3204464837497 , 6.6832105275932 ] , <str> : [ 0.012436 , 0.97315 , 1.2795 , 0.96956 , 0.24873 ] , <str> : [ 1.28728967 , 3.53734222 , 7.74073708 , 9.24437796 , 27.5075105 ] } Fi2 = { <str> : [ 1 , 3.00392 ] , <str> : [ 0 , 1 ] , <str> : [ 8.203520690 , - 11.996306443 ] , <str> : [ ] , <str> : [ ] , <str> : [ 0.01059 , 3.06904 ] , <str> : [ 0.415386589 , 3.874803739 ] , <str> : [ - 0.98763 ] , <str> : [ 1.763895929 ] } Fi3 = { <str> : [ 1 , 3.00632 ] , <str> : [ 0 , 1 ] , <str> : [ - 8.318441 , 6.681816 ] , <str> : [ 0.012436 , 0.97315 , 1.2795 , 0.96956 , 0.24873 ] , <str> : [ 1.287202151 , 3.537101709 , 7.740210774 , 9.243749421 , 27.5056402 ] } Fi4 = { <str> : [ 1 , 3.00632 ] , <str> : [ 0 , 1 ] , <str> : [ - 8.3177095 , 6.6815049 ] , <str> : [ 0.012436 , 0.97315 , 1.2795 , 0.96956 , 0.24873 ] , <str> : [ 1.287202151 , 3.537101709 , 7.740210774 , 9.243749421 , 27.5056402 ] } iapws = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314371357587 , <str> : Fi1 , <str> : { <str> : Tt , <str> : 0.611655 , <str> : 0.611872 , <str> : 0 } , <str> : Tt , <str> : 2000. , <str> : 2000000.0 , <str> : 73.96 , <str> : [ 0.12533547935523e-1 , 0.78957634722828e1 , - 0.87803203303561e1 , 0.31802509345418 , - 0.26145533859358 , - 0.78199751687981e-2 , 0.88089493102134e-2 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 3 , 4 ] , <str> : [ - 0.5 , 0.875 , 1 , 0.5 , 0.75 , 0.375 , 1 ] , <str> : [ - 0.66856572307965 , 0.20433810950965 , - 0.66212605039687e-4 , - 0.19232721156002 , - 0.25709043003438 , 0.16074868486251 , - 0.4009282892587e-1 , 0.39343422603254e-6 , - 0.75941377088144e-5 , 0.56250979351888e-3 , - 0.15608652257135e-4 , 0.11537996422951e-8 , .36582165144204e-6 , - .13251180074668e-11 , - 0.62639586912454e-9 , - 0.10793600908932 , 0.17611491008752e-1 , 0.22132295167546 , - 0.40247669763528 , 0.58083399985759 , 0.49969146990806e-2 , - 0.31358700712549e-1 , - 0.74315929710341 , 0.47807329915480 , 0.20527940895948e-1 , - 0.13636435110343 , 0.14180634400617e-1 , 0.83326504880713e-2 , - 0.29052336009585e-1 , 0.38615085574206e-1 , - 0.20393486513704e-1 , - .16554050063734e-2 , 0.19955571979541e-2 , 0.15870308324157e-3 , - 0.16388568342530e-4 , 0.43613615723811e-1 , 0.34994005463765e-1 , - 0.76788197844621e-1 , 0.22446277332006e-1 , - 0.62689710414685e-4 , - 0.55711118565645e-9 , - 0.19905718354408 , 0.31777497330738 , - 0.11841182425981 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 6 , 6 , 6 , 6 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 5 , 7 , 9 , 10 , 11 , 13 , 15 , 1 , 2 , 2 , 2 , 3 , 4 , 4 , 4 , 5 , 6 , 6 , 7 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 12 , 3 , 4 , 4 , 5 , 14 , 3 , 6 , 6 , 6 ] , <str> : [ 4 , 6 , 12 , 1 , 5 , 4 , 2 , 13 , 9 , 3 , 4 , 11 , 4 , 13 , 1 , 7 , 1 , 9 , 10 , 10 , 3 , 7 , 10 , 10 , 6 , 10 , 10 , 1 , 2 , 3 , 4 , 8 , 6 , 9 , 8 , 16 , 22 , 23 , 23 , 10 , 50 , 44 , 46 , 50 ] , <str> : [ 1 ] * 44 , <str> : [ - 0.31306260323435e2 , 0.31546140237781e2 , - 0.25213154341695e4 ] , <str> : [ 3 ] * 3 , <str> : [ 0 , 1 , 4 ] , <str> : [ 20 ] * 3 , <str> : [ 150 , 150 , 250 ] , <str> : [ 1.21 , 1.21 , 1.25 ] , <str> : [ 1. ] * 3 , <str> : [ - 0.14874640856724 , 0.31806110878444 ] , <str> : [ 3.5 , 3.5 ] , <str> : [ 0.85 , 0.95 ] , <str> : [ 0.2 , 0.2 ] , <str> : [ 28 , 32 ] , <str> : [ 700 , 800 ] , <str> : [ 0.32 , .32 ] , <str> : [ 0.3 , 0.3 ] } GERG = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : Tt , <str> : 1350.0 , <str> : 1000000.0 , <str> : 73.96 , <str> : [ 0.82728408749586 , - 0.18602220416584e1 , - 0.11199009613744e1 , 0.15635753976056 , 0.87375844859025 , - 0.36674403715731 , 0.53987893432436e-1 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 3 , 4 ] , <str> : [ 0.5 , 1.25 , 1.875 , 0.125 , 1.5 , 1 , 0.75 ] , <str> : [ 0.10957690214499e1 , 0.53213037828563e-1 , 0.13050533930825e-1 , - 0.41079520434476 , 0.14637443344120 , - 0.55726838623719e-1 , - 0.0112017741438 , - 0.66062758068099e-2 , .46918522004538e-2 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 5 , 5 ] , <str> : [ 1 , 5 , 5 , 1 , 2 , 4 , 4 , 1 , 1 ] , <str> : [ 1.5 , 0.625 , 2.625 , 5 , 4 , 4.5 , 3 , 4 , 6 ] , <str> : [ 1 ] * 9 } saul = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31434 , <str> : Fi3 , <str> : { <str> : Tt , <str> : 0.611655 , <str> : 0.611872 , <str> : 0 } , <str> : Tt , <str> : 1273. , <str> : 400000.0 , <str> : 55.49 , <str> : [ 0.8216377478 , - 0.2543894379 , - 0.08830868648 , - 0.8903097248e-6 , - 0.1241333357e-5 , 0.2895590286e-8 , 0.1403610309e-10 , 0.8183943371e-12 , - 0.2397905287e-12 ] , <str> : [ 1 , 1 , 2 , 5 , 8 , 11 , 11 , 13 , 13 ] , <str> : [ 0 , 2 , 0 , 9 , 0 , 0 , 12 , 7 , 13 ] , <str> : [ - 0.7519743341 , - 0.4151278588 , - 0.103051374e1 , - 0.1648036888e1 , - 0.4686350251 , 0.3560258142 , - 0.6364658294 , 0.2227482363 , - 0.8954849939e-1 , 0.1557686788e-2 , 0.1347719088e-2 , - 0.1301353385e-2 , 0.9987368673e-6 , 0.2263629476e-3 , 0.289330495e-5 , 0.1995437169 , - 0.2707767662e-1 , 0.1849068216e-1 , - 0.4402394357e-2 , - 0.8546876737e-1 , 0.1220538576 , - 0.2562237041 , 0.2555034636 , - 0.6323203907e-1 , 0.3351397575e-4 , - 0.6152834985e-1 , - 0.3533048208e-3 , 0.3146309259e-1 , - 0.2261795983e-2 , 0.18689702e-3 , - 0.1384614556e-2 , 0.2713160073e-2 , - 0.4866118539e-2 , 0.3751789129e-2 , - 0.5692669373e-3 , - 0.5876414555 , 0.5687838346 , - 0.1642158198 , 0.5878635885 , - 0.2844301931 , - 0.2049198337 , - 0.4039233716e-2 , 0.5459049594e-1 , - 0.8914260146e-2 , 0.4974411254e-2 ] , <str> : [ 1 ] * 15 + [ 2 ] * 20 + [ 3 ] * 10 , <str> : [ 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 , 5 , 6 , 7 , 8 , 9 , 11 , 1 , 1 , 1 , 1 , 2 , 2 , 4 , 5 , 6 , 6 , 7 , 7 , 8 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 5 ] , <str> : [ 0 , 1 , 3 , 1 , 5 , 5 , 2 , 3 , 5 , 6 , 4 , 1 , 8 , 0 , 1 , 0 , 9 , 10 , 11 , 0 , 8 , 5 , 4 , 2 , 12 , 3 , 10 , 3 , 2 , 8 , 0 , 1 , 3 , 4 , 6 , 13 , 14 , 15 , 14 , 16 , 13 , 26 , 15 , 23 , 25 ] , <str> : [ 1 ] * 45 , <str> : [ - 0.709318338e-2 , 0.1718796342e-1 , - 0.1482653038e-1 , 0.4517292884e-2 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : [ 50 , 40 , 32 , 26 ] } saul2 = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31434 , <str> : Fi4 , <str> : { <str> : Tt , <str> : 0.611655 , <str> : 0.611872 , <str> : 0 } , <str> : Tt , <str> : 1273. , <str> : 400000.0 , <str> : 55.49 , <str> : [ 0.2330009013 , - 0.1402091128e1 , 0.1172248041 , - 0.1850749499 , 0.1770110422 , .5525151794e-1 , - 0.341325738e-3 , 0.8557274367e-3 , 0.3716900685e-3 , - 0.1308871233e-3 , 0.3216895199e-4 , 0.2785881034e-6 ] , <str> : [ 1 , 1 , 2 , 2 , 2 , 2 , 3 , 5 , 5 , 6 , 7 , 8 ] , <str> : [ 0 , 2 , 0 , 1 , 2 , 3 , 5 , 0 , 1 , 3 , 2 , 5 ] , <str> : [ - 0.352151113 , 0.7881914536e-1 , - 0.151966661e-1 , - 0.1068458586 , - 0.2055046288 , 0.9146198012 , 0.3213343569e-3 , - 0.1133591391e1 , - 0.3107520749 , 0.1217901527e1 , - 0.4481710831 , 0.5494218772e-1 , - 0.8665222096e-4 , 0.3844084088e-1 , 0.9853044884e-2 , - 0.1767598472e-1 , 0.1488549222e-2 , - 0.3070719069e-2 , 0.388080328e-2 , - .2627505215e-2 , .5258371388e-3 , - 0.1716396901 , .7188823624e-1 , .5881268357e-1 , - .145593888e-1 , - .12161394e-1 ] , <str> : [ 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 3 , 3 , 4 , 5 , 5 , 6 , 7 , 7 , 8 , 8 , 9 , 11 , 11 , 11 , 11 , 11 , 2 , 2 , 3 , 3 , 5 ] , <str> : [ 5 , 7 , 9 , 5 , 4 , 6 , 13 , 5 , 2 , 3 , 2 , 0 , 11 , 1 , 4 , 0 , 0 , 3 , 5 , 6 , 7 , 13 , 14 , 15 , 24 , 15 ] , <str> : [ 1 ] * 26 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314371357587 , <str> : Fi1 , <str> : { <str> : <str> , <str> : Tt , <str> : 0.611655 , <str> : 0.611872 , <str> : 0 } , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 3.46821920e-1 , 5.03423025e-1 , - 3.51059570e-1 , 5.07004866e-2 , 1.99939129e-4 , - 5.69888763e-1 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ - 1.96198912e-1 , - 2.02509554 , - 1.09353609 , 7.25785202e-2 , 2.16072642e-1 , - 1.01542630e-1 , 7.46926106e-2 , 2.18830463e-3 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } eq = iapws , GERG , saul , saul2 , sun _PR = [ 0.1994 , - 30.0536 ] _surface = { <str> : [ - 0.1306 , 0.2151 ] , <str> : [ 2.471 , 1.233 ] } _melting = { <str> : 251.165 , <str> : 370.0 } _sublimation = { <str> : 50.0 , <str> : Tt } _vapor_Pressure = { <str> : 3 , <str> : [ - 7.85951783 , 1.84408259 , - 11.7866497 , 22.6807411 , - 15.9618719 , 1.80122502 ] , <str> : [ 1 , 1.5 , 3 , 3.5 , 4 , 7.5 ] } _liquid_Density = { <str> : 1 , <str> : [ 1.99274064 , 1.09965342 , - 0.510839303 , - 1.75493479 , - 45.5170352 , - 6.74694450e5 ] , <str> : [ 1 / 3 , 2 / 3 , 5 / 3 , 16 / 3 , 43 / 3 , 110 / 3 ] } _vapor_Density = { <str> : 2 , <str> : [ - 2.0315024 , - 2.6830294 , - 5.38626492 , - 17.2991605 , - 44.7586581 , - 63.9201063 ] , <str> : [ 2 / 6 , 4 / 6 , 8 / 6 , 18 / 6 , 37 / 6 , 71 / 6 ] } visco0 = { <str> : 0 , <str> : <str> , <str> : <str> , <str> : { <str> : <str> <str> <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : ( _Viscosity , ) } def _visco0 ( self , rho , T , fase ) :          ref = H2O ( ) ref . _ref ( False ) estado = ref . _eq ( rho , 1.5 * self . Tc ) delta = estado [ <str> ] fird = estado [ <str> ] firdd = estado [ <str> ] dpdrho = self . R * estado [ <str> ] * ( 1 + 2 * delta * fird + delta ** 2 * firdd ) drho = 1 / dpdrho * 1e6 if fase :              fase = copy ( fase ) fase . drhodP_T *= 1e6  mu = _Viscosity ( rho , T , fase = fase , drho = drho ) return unidades . Viscosity ( mu )  visco1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 4 , <str> : 0 , <str> : 647.096 , <str> : [ 151.138 , - 444.318 , 398.262 , - 81.7008 ] , <str> : [ 0 , 0.25 , 0.5 , 0.75 ] , <str> : [ - 1.17407e-5 , - 3.78855e-7 , 3.56743e-8 ] , <str> : [ 1.62216e-6 , - 8.36595e-6 , 9.10863e-8 ] , <str> : [ 1.92707e-5 , - 1.2868e-5 , 0.0 ] , <str> : [ - 3.30145e-10 , 0.0 , 1.02931e-11 ] , <str> : [ 5.03139997945133e-10 , 1.82304e-10 , 0.0 ] , <str> : [ 8.01449e-10 , 5.65614e-9 , 1.10163e-10 ] } _viscosity = visco0 , visco1 thermo0 = { <str> : 0 , <str> : <str> , <str> : <str> , <str> : { <str> : <str> <str> <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : ( _ThCond , ) } _thermal = thermo0 , def _thermo0 ( self , rho , T , fase ) :          ref = H2O ( ) ref . _ref ( False ) estado = ref . _eq ( rho , 1.5 * self . Tc ) delta = estado [ <str> ] fird = estado [ <str> ] firdd = estado [ <str> ] dpdrho = self . R * estado [ <str> ] * ( 1 + 2 * delta * fird + delta ** 2 * firdd ) drho = 1 / dpdrho * 1e6 if fase :              fase = copy ( fase ) fase . drhodP_T *= 1e6 fase . cp /= 1e3  return _ThCond ( rho , T , fase , drho )  def _Dielectric ( self , rho , T ) :          try :              nu = _Dielectric ( rho , T )  except NotImplementedError :              nu = None  return unidades . Dimensionless ( nu )  def _Surface ( self , T ) :          try :              s = _Tension ( T )  except NotImplementedError :              s = None  return unidades . Tension ( s )  @ classmethod def _Melting_Pressure ( cls , T ) :          try :              Pm = _Melting_Pressure ( T )  except NotImplementedError :              Pm = None  return unidades . Pressure ( Pm , <str> )  @ classmethod def _Sublimation_Pressure ( cls , T ) :          try :              Ps = _Sublimation_Pressure ( T )  except NotImplementedError :              Ps = None  return unidades . Pressure ( Ps , <str> )   class Test ( TestCase ) :      def test_iapws ( self ) :          fluid = H2O ( ) delta = 838.025 / fluid . rhoc tau = fluid . Tc / 500 ideal = fluid . _phi0 ( fluid . _constants [ <str> ] , tau , delta ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , 2.04797733 ) self . assertEqual ( round ( ideal [ <str> ] , 9 ) , 0.384236747 ) self . assertEqual ( round ( ideal [ <str> ] , 9 ) , - 0.147637878 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , 9.04611106 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , - 1.93249185 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , 0.0 ) res = fluid . _Helmholtz ( tau , delta ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 3.42693206 ) self . assertEqual ( round ( res [ <str> ] , 9 ) , - 0.364366650 ) self . assertEqual ( round ( res [ <str> ] , 9 ) , 0.856063701 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 5.81403435 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 2.23440737 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 1.12176915 ) delta = 358 / fluid . rhoc tau = fluid . Tc / 647 ideal = fluid . _phi0 ( fluid . _constants [ <str> ] , tau , delta ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , - 1.56319605 ) self . assertEqual ( round ( ideal [ <str> ] , 9 ) , 0.899441341 ) self . assertEqual ( round ( ideal [ <str> ] , 9 ) , - 0.808994726 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , 9.80343918 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , - 3.43316334 ) self . assertEqual ( round ( ideal [ <str> ] , 8 ) , 0.0 ) res = fluid . _Helmholtz ( tau , delta ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 1.21202657 ) self . assertEqual ( round ( res [ <str> ] , 9 ) , - 0.714012024 ) self . assertEqual ( round ( res [ <str> ] , 9 ) , 0.475730696 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 3.21722501 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 9.96029507 ) self . assertEqual ( round ( res [ <str> ] , 8 ) , - 1.33214720 ) st = H2O ( T = H2O . Tt , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 0.000612 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 999.793 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 0.001 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.0000 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 4.2174 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 4.2199 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1402.3 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.00485 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2500.92 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 9.1555 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.4184 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.8844 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 409.00 ) st = H2O ( T = 300 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 0.003537 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 996.513 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 112.565 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.3931 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 4.1305 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 4.1809 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1501.4 ) self . assertEqual ( round ( st . Gas . rho , 5 ) , 0.02559 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2549.85 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 8.5174 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.4422 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 1.9141 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 427.89 ) st = H2O ( T = 400 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 0.24577 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 937.486 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 532.953 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 1.6013 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 3.6324 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 4.2555 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1509.5 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 1.3694 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2715.70 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 7.0581 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 1.6435 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 2.2183 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 484.67 ) st = H2O ( T = 500 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 5 ) , 2.6392 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 831.313 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 975.431 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 2.5810 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 3.2255 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 4.6635 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1239.6 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 13.199 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2802.48 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 6.2351 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 2.2714 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 3.4631 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 504.55 ) st = H2O ( T = 600 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 12.345 ) self . assertEqual ( round ( st . Liquido . rho , 3 ) , 649.411 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 1505.36 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 3.5190 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 3.0475 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 4 ) , 6.9532 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 749.57 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 72.842 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2677.81 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 5.4731 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 3.3271 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 4 ) , 9.1809 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 457.33 ) st = H2O ( T = 647 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 22.038 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 357.34 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 2029.44 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 4.3224 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 4 ) , 6.2344 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 1 ) , 3905.2 ) self . assertEqual ( round ( st . Liquido . w , 2 ) , 251.19 ) self . assertEqual ( round ( st . Gas . rho , 2 ) , 286.51 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 2148.56 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 4 ) , 4.5065 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 4 ) , 6.2740 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 1 ) , 5334.1 ) self . assertEqual ( round ( st . Gas . w , 2 ) , 285.32 ) st = H2O ( T = 275 , P = 5e4 ) self . assertEqual ( round ( st . rho , 3 ) , 999.912 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 7.760 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 7.810 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.0283 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 4.2130 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.2137 ) self . assertEqual ( round ( st . w , 1 ) , 1411.4 ) st = H2O ( T = 370 , P = 1e5 ) self . assertEqual ( round ( st . rho , 3 ) , 960.591 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 405.787 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 405.891 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.2715 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.7845 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.2121 ) self . assertEqual ( round ( st . w , 1 ) , 1545.8 ) st = H2O ( T = 430 , P = 5e5 ) self . assertEqual ( round ( st . rho , 4 ) , 2.6297 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 2569.90 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 2760.04 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 6.8486 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 1.7170 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.3469 ) self . assertEqual ( round ( st . w , 2 ) , 497.85 ) st = H2O ( T = 275 , P = 1e6 ) self . assertEqual ( round ( st . rho , 2 ) , 1000.39 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 7.769 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 8.768 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.0283 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 4.2087 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.2093 ) self . assertEqual ( round ( st . w , 1 ) , 1413.0 ) st = H2O ( T = 1273 , P = 2e6 ) self . assertEqual ( round ( st . rho , 4 ) , 3.4085 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 4049.90 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 4636.67 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 8.5933 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.0205 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.4901 ) self . assertEqual ( round ( st . w , 2 ) , 849.82 ) st = H2O ( T = 530 , P = 5e6 ) self . assertEqual ( round ( st . rho , 3 ) , 789.208 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 1112.95 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 1119.28 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 2.8547 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.1377 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.9386 ) self . assertEqual ( round ( st . w , 1 ) , 1122.2 ) st = H2O ( T = 375 , P = 1e7 ) self . assertEqual ( round ( st . rho , 3 ) , 961.618 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 423.977 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 434.376 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.3203 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.7438 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.1955 ) self . assertEqual ( round ( st . w , 1 ) , 1562.6 ) st = H2O ( T = 630 , P = 2e7 ) self . assertEqual ( round ( st . rho , 3 ) , 567.644 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 1671.50 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 1706.73 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 3.8259 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.1104 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 9.8619 ) self . assertEqual ( round ( st . w , 2 ) , 587.65 ) st = H2O ( T = 900 , P = 3e7 ) self . assertEqual ( round ( st . rho , 3 ) , 82.840 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 3167.87 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 3530.02 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 6.3313 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.0283 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.0408 ) self . assertEqual ( round ( st . w , 2 ) , 687.91 ) st = H2O ( T = 1100 , P = 5e7 ) self . assertEqual ( round ( st . rho , 2 ) , 106.26 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 3534.70 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 4005.26 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 6.5956 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.0843 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 2.9377 ) self . assertEqual ( round ( st . w , 2 ) , 789.83 ) st = H2O ( T = 600 , P = 1e8 ) self . assertEqual ( round ( st . rho , 3 ) , 791.493 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 1322.23 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 1448.58 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 3.2256 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.9295 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 4.5019 ) self . assertEqual ( round ( st . w , 1 ) , 1300.4 ) st = H2O ( T = 400 , P = 2e8 ) self . assertEqual ( round ( st . rho , 2 ) , 1017.12 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 480.471 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 677.105 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 1.4520 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.4513 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.9363 ) self . assertEqual ( round ( st . w , 1 ) , 1882.7 ) st = H2O ( T = 305 , P = 1e9 ) self . assertEqual ( round ( st . rho , 2 ) , 1234.94 ) self . assertEqual ( round ( st . u . kJkg , 3 ) , 93.201 ) self . assertEqual ( round ( st . h . kJkg , 3 ) , 902.957 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 0.0895 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 3.4296 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.7845 ) self . assertEqual ( round ( st . w , 1 ) , 2723.2 ) st = H2O ( T = 1273 , P = 1e9 ) self . assertEqual ( round ( st . rho , 2 ) , 809.28 ) self . assertEqual ( round ( st . u . kJkg , 2 ) , 3097.36 ) self . assertEqual ( round ( st . h . kJkg , 2 ) , 4333.03 ) self . assertEqual ( round ( st . s . kJkgK , 4 ) , 5.2048 ) self . assertEqual ( round ( st . cv . kJkgK , 4 ) , 2.6446 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.4245 ) self . assertEqual ( round ( st . w , 1 ) , 2095.5 )  def test_Viscosity ( self ) :          self . assertEqual ( round ( _Viscosity ( 998 , 298.15 ) * 1e6 , 6 ) , 889.735100 ) self . assertEqual ( round ( _Viscosity ( 1200 , 298.15 ) * 1e6 , 6 ) , 1437.649467 ) self . assertEqual ( round ( _Viscosity ( 1000 , 373.15 ) * 1e6 , 6 ) , 307.883622 ) self . assertEqual ( round ( _Viscosity ( 1 , 433.15 ) * 1e6 , 6 ) , 14.538324 ) self . assertEqual ( round ( _Viscosity ( 1000 , 433.15 ) * 1e6 , 6 ) , 217.685358 ) self . assertEqual ( round ( _Viscosity ( 1 , 873.15 ) * 1e6 , 6 ) , 32.619287 ) self . assertEqual ( round ( _Viscosity ( 100 , 873.15 ) * 1e6 , 6 ) , 35.802262 ) self . assertEqual ( round ( _Viscosity ( 600 , 873.15 ) * 1e6 , 6 ) , 77.430195 ) self . assertEqual ( round ( _Viscosity ( 1 , 1173.15 ) * 1e6 , 6 ) , 44.217245 ) self . assertEqual ( round ( _Viscosity ( 100 , 1173.15 ) * 1e6 , 6 ) , 47.640433 ) self . assertEqual ( round ( _Viscosity ( 400 , 1173.15 ) * 1e6 , 6 ) , 64.154608 ) fluid = H2O ( rho = 122 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 25.520677 ) fluid = H2O ( rho = 222 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 31.337589 ) fluid = H2O ( rho = 272 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 36.228143 ) fluid = H2O ( rho = 322 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 42.961579 ) fluid = H2O ( rho = 372 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 45.688204 ) fluid = H2O ( rho = 422 , T = 647.35 ) self . assertEqual ( round ( fluid . mu . muPas , 6 ) , 49.436256 )  def test_ThCond ( self ) :          self . assertEqual ( round ( _ThCond ( 0 , 298.15 ) * 1000 , 7 ) , 18.4341883 ) self . assertEqual ( round ( _ThCond ( 998 , 298.15 ) * 1000 , 6 ) , 607.712868 ) self . assertEqual ( round ( _ThCond ( 1200 , 298.15 ) * 1000 , 6 ) , 799.038144 ) self . assertEqual ( round ( _ThCond ( 0 , 873.15 ) * 1000 , 7 ) , 79.1034659 ) fluid = H2O ( rho = 1 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 7 ) , 51.9298924 ) fluid = H2O ( rho = 122 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 130.922885 ) fluid = H2O ( rho = 222 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 367.787459 ) fluid = H2O ( rho = 272 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 757.959776 ) fluid = H2O ( rho = 322 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 5 ) , 1443.75556 ) fluid = H2O ( rho = 372 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 650.319402 ) fluid = H2O ( rho = 422 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 448.883487 ) fluid = H2O ( rho = 750 , T = 647.35 ) self . assertEqual ( round ( fluid . k . mWmK , 6 ) , 600.961346 )    