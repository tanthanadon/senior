import os from PyQt5 . QtWidgets import QApplication from scipy import log , exp from scipy . constants import R from scipy . optimize import fsolve from lib . unidades import ( DeltaT , DeltaP , Temperature , Pressure , MassFlow , Power , Currency , Dimensionless ) from equipment . parents import equipment class Compressor ( equipment ) :      title = QApplication . translate ( <str> , <str> ) help = <str> kwargs = { <str> : None , <str> : 0 , <str> : 0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0 , <str> : 0.0 , <str> : 1.3 , <str> : 0.0 , <str> : 0.0 , <str> : 0 , <str> : 0 , <str> : 0 , <str> : 0 } kwargsInput = ( <str> , ) kwargsValue = ( <str> , <str> , <str> , <str> , <str> ) kwargsList = ( <str> , <str> , <str> , <str> , <str> , <str> ) calculateValue = ( <str> , <str> , <str> , <str> ) calculateCostos = ( <str> , <str> , <str> , <str> , <str> ) indiceCostos = 7 TEXT_METODO = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_TERMODINAMICA = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_COMPRESOR = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_TRANSMISION = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_MOTOR = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_RPM = [ <str> , <str> , <str> ] @ property def isCalculable ( self ) :          if self . kwargs [ <str> ] and self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . statusCoste = True  else :              self . statusCoste = False  if not self . kwargs [ <str> ] :              self . msg = QApplication . translate ( <str> , <str> ) self . status = 0  if not self . kwargs [ <str> ] :              if self . kwargs [ <str> ] == 5 :                  if ( self . kwargs [ <str> ] or self . kwargs [ <str> ] ) and self . kwargs [ <str> ] and self . kwargs [ <str> ] :                      self . status = 1 self . msg = <str> return True  else :                      self . msg = QApplication . translate ( <str> , <str> ) self . status = 0   else :                  self . msg = QApplication . translate ( <str> , <str> ) self . status = 0   else :              if self . kwargs [ <str> ] == 0 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 1 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 2 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 3 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 4 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 5 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  if valores :                  self . status = 1 self . msg = <str> return True  else :                  self . msg = QApplication . translate ( <str> , <str> ) self . status = 0    def calculo ( self ) :          self . entrada = self . kwargs [ <str> ] metodo = self . kwargs [ <str> ] self . Pout = Pressure ( self . kwargs [ <str> ] ) razon = self . kwargs [ <str> ] self . rendimientoCalculado = Dimensionless ( self . kwargs [ <str> ] ) if self . kwargs [ <str> ] :              self . etapas = self . kwargs [ <str> ]  else :              self . etapas = 1.  self . power = Power ( self . kwargs [ <str> ] ) def f ( Pout , rendimiento ) :              W_ideal = self . __Wideal ( Pout ) power = W_ideal * self . entrada . caudalmasico . gs / rendimiento return power  if metodo in [ 0 , 3 ] or ( metodo == 5 and self . Pout ) :              if self . etapas == 1 :                  razon = self . Pout . atm / self . entrada . P . atm  else :                  razon = ( self . Pout . atm / self . entrada . P . atm ) ** ( 1. / self . etapas )   elif metodo in [ 1 , 4 ] or ( metodo == 5 and razon ) :              if self . etapas == 1 :                  self . Pout = Pressure ( self . entrada . P * razon )  else :                  self . Pout = Pressure ( razon ** self . etapas * self . entrada . P )   if metodo in [ 0 , 1 ] :              Wid = self . __Wideal ( self . Pout . atm ) power = Wid * self . entrada . caudalmasico . gs / self . rendimientoCalculado self . power = Power ( power * self . etapas )  elif metodo == 2 :              def funcion ( P ) :                  return f ( P , self . rendimientoCalculado ) - self . power  self . Pout = Pressure ( fsolve ( funcion , self . entrada . P + 1 ) ) if self . etapas == 1 :                  razon = self . Pout / self . entrada . P  else :                  razon = ( self . Pout / self . entrada . P ) ** ( 1. / self . etapas )   elif metodo in [ 3 , 4 ] :              def funcion ( rendimiento ) :                  return f ( self . Pout . atm , rendimiento ) - self . power  self . rendimientoCalculado = Dimensionless ( fsolve ( funcion , 0.5 ) )  elif metodo == 5 :              Wideal = self . __Wideal ( self . Pout . atm ) G = MassFlow ( self . power * self . rendimientoCalculado / Wideal , <str> ) self . Tout = self . __Tout ( Wideal ) self . entrada = self . entrada . clone ( caudalMasico = G )  Wideal = self . __Wideal ( self . Pout . atm ) self . Tout = Temperature ( self . __Tout ( Wideal ) ) self . salida = [ self . entrada . clone ( T = self . Tout , P = self . Pout ) ] self . razonCalculada = Dimensionless ( self . Pout / self . entrada . P ) self . deltaT = DeltaT ( self . salida [ 0 ] . T - self . entrada . T ) self . deltaP = DeltaP ( self . salida [ 0 ] . P - self . entrada . P ) self . cp_cv = self . entrada . Gas . cp_cv self . Pin = self . entrada . P self . Tin = self . entrada . T  def __Wideal ( self , Pout ) :          if self . kwargs [ <str> ] == 0 :              cpv = self . entrada . Gas . cp_cv  else :              cpv = 1.40388  if self . kwargs [ <str> ] == 2 :              W_ideal = R * self . entrada . T / self . entrada . M * log ( Pout / self . entrada . P )  else :              W_ideal = R * self . entrada . T * cpv / self . entrada . M / ( cpv - 1 ) * ( ( Pout / self . entrada . P . atm ) ** ( ( cpv - 1 ) / cpv ) - 1 )  return W_ideal  def __Tout ( self , Wid ) :          if self . kwargs [ <str> ] == 0 :              cpv = self . entrada . Gas . cp_cv  else :              cpv = 1.40388  if self . kwargs [ <str> ] == 2 :              Tout = self . entrada . T  else :              eta = self . rendimientoCalculado Tout = ( self . Pout . atm / self . entrada . P . atm ) ** ( ( cpv - 1 ) / cpv ) * self . entrada . T + ( 1 - eta ) / eta * ( Wid / self . entrada . Gas . cv )  return Tout  def coste ( self ) :          HP = self . power . hp / self . etapas CI = self . kwargs [ <str> ] BI = self . kwargs [ <str> ] if self . kwargs [ <str> ] == 0 :              C = 6.49 * HP ** 0.62 * 1000  elif self . kwargs [ <str> ] == 1 :              C = 5.96 * HP ** 0.61 * 1000  elif self . kwargs [ <str> ] == 2 :              C = 1.49 * HP ** 0.71 * 1000  C_comp = self . etapas * C * CI / BI if self . kwargs [ <str> ] == 0 :              if self . kwargs [ <str> ] == 0 and HP <= 7.5 :                  a1 , a2 , a3 = 4.8314 , 0.0966 , 0.10960  elif self . kwargs [ <str> ] == 0 and HP <= 250. and HP > 7.5 :                  a1 , a2 , a3 = 4.1514 , 0.5347 , 0.05252  elif self . kwargs [ <str> ] == 0 and HP > 250. :                  a1 , a2 , a3 = 4.2432 , 1.03251 , - 0.03595  elif self . kwargs [ <str> ] == 1 and HP <= 7.5 :                  a1 , a2 , a3 = 4.7075 , - 0.01511 , 0.22888  elif self . kwargs [ <str> ] == 1 and HP <= 250. and HP > 7.5 :                  a1 , a2 , a3 = 4.5212 , 0.47242 , 0.04820  elif self . kwargs [ <str> ] == 1 and HP > 250. :                  a1 , a2 , a3 = 7.4044 , - 0.06464 , 0.05448  elif self . kwargs [ <str> ] == 2 and HP <= 7.5 :                  a1 , a2 , a3 = 4.9298 , 0.30118 , 0.12630  elif self . kwargs [ <str> ] == 2 and HP <= 250. and HP > 7.5 :                  a1 , a2 , a3 = 5.0999 , 0.35861 , 0.06052  elif self . kwargs [ <str> ] == 2 and HP > 250. :                  a1 , a2 , a3 = 4.6163 , 0.88531 , - 0.02188   elif self . kwargs [ <str> ] == 1 :              if self . kwargs [ <str> ] == 0 and HP <= 7.5 :                  a1 , a2 , a3 = 5.1058 , 0.03316 , 0.15374  elif self . kwargs [ <str> ] == 0 and HP <= 250. and HP > 7.5 :                  a1 , a2 , a3 = 3.8544 , 0.83311 , 0.02399  elif self . kwargs [ <str> ] == 0 and HP > 250. :                  a1 , a2 , a3 = 5.3182 , 1.08470 , - 0.05695  elif self . kwargs [ <str> ] == 1 and HP <= 7.5 :                  a1 , a2 , a3 = 4.9687 , - 0.00930 , 0.22616  elif self . kwargs [ <str> ] == 1 and HP > 7.5 :                  a1 , a2 , a3 = 4.5347 , 0.57065 , 0.04609  elif self . kwargs [ <str> ] == 2 and HP <= 7.5 :                  a1 , a2 , a3 = 5.1532 , 0.28931 , 0.14357  elif self . kwargs [ <str> ] == 2 and HP > 7.5 :                  a1 , a2 , a3 = 5.3858 , 0.31004 , 0.07406   elif self . kwargs [ <str> ] == 2 :              if self . kwargs [ <str> ] == 0 and HP <= 7.5 :                  a1 , a2 , a3 = 5.3934 , - 0.00333 , 0.15475  elif self . kwargs [ <str> ] == 0 and HP > 7.5 :                  a1 , a2 , a3 = 4.4442 , 0.60820 , 0.05202  elif self . kwargs [ <str> ] == 1 and HP <= 7.5 :                  a1 , a2 , a3 = 5.2851 , 0.00048 , 0.19949  elif self . kwargs [ <str> ] == 1 and HP > 7.5 :                  a1 , a2 , a3 = 4.8178 , 0.51086 , 0.05293  elif self . kwargs [ <str> ] == 2 and HP <= 7.5 :                  a1 , a2 , a3 = 5.4166 , 0.31216 , 0.10573  elif self . kwargs [ <str> ] == 2 and HP > 7.5 :                  a1 , a2 , a3 = 5.5655 , 0.31284 , 0.07212   LnHP = log ( HP ) C_motor = self . etapas * 1.2 * exp ( a1 + a2 * LnHP + a3 * LnHP ** 2 ) if self . kwargs [ <str> ] == 2 :              C_trans = 0  elif self . kwargs [ <str> ] == 0 :              C_trans = 1.2 * exp ( 3.689 + 0.8917 * log ( HP ) )  elif self . kwargs [ <str> ] == 1 :              C_trans = 1.2 * exp ( 5.329 + 0.5048 * log ( HP ) )  elif self . kwargs [ <str> ] == 2 :              C_trans = 12000 / ( 1.562 + 7.877 / HP )  C_trans = self . etapas * C_trans * CI / BI C_adq = C_comp + C_motor + C_trans C_inst = C_adq * self . kwargs [ <str> ] self . C_comp = Currency ( C_comp ) self . C_motor = Currency ( C_motor ) self . C_trans = Currency ( C_trans ) self . C_adq = Currency ( C_adq ) self . C_inst = Currency ( C_inst )  def propTxt ( self ) :          txt = <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 11 ) ) if self . statusCoste :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 11 , 23 ) )  return txt  @ classmethod def propertiesEquipment ( cls ) :          l = [ ( QApplication . translate ( <str> , <str> ) , <str> , Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , DeltaT ) , ( QApplication . translate ( <str> , <str> ) , <str> , Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , Power ) , ( QApplication . translate ( <str> , <str> ) , <str> , Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) ] return l  def writeStatetoJSON ( self , state ) :          state [ <str> ] = self . Pout state [ <str> ] = self . Tout state [ <str> ] = self . rendimientoCalculado state [ <str> ] = self . etapas state [ <str> ] = self . power state [ <str> ] = self . razonCalculada state [ <str> ] = self . deltaT state [ <str> ] = self . deltaP state [ <str> ] = self . cp_cv state [ <str> ] = self . Pin state [ <str> ] = self . Tin state [ <str> ] = self . statusCoste if self . statusCoste :              state [ <str> ] = self . C_comp state [ <str> ] = self . C_motor state [ <str> ] = self . C_trans state [ <str> ] = self . C_adq state [ <str> ] = self . C_inst   def readStatefromJSON ( self , state ) :          self . Pout = Pressure ( state [ <str> ] ) self . Tout = Temperature ( state [ <str> ] ) self . rendimientoCalculado = Dimensionless ( state [ <str> ] ) self . etapas = state [ <str> ] self . power = Power ( state [ <str> ] ) self . razonCalculada = Dimensionless ( state [ <str> ] ) self . deltaT = DeltaT ( state [ <str> ] ) self . deltaP = DeltaP ( state [ <str> ] ) self . cp_cv = Dimensionless ( state [ <str> ] ) self . Pin = Pressure ( state [ <str> ] ) self . Tin = Temperature ( state [ <str> ] ) self . statusCoste = state [ <str> ] if self . statusCoste :              self . C_comp = Currency ( state [ <str> ] ) self . C_motor = Currency ( state [ <str> ] ) self . C_trans = Currency ( state [ <str> ] ) self . C_adq = Currency ( state [ <str> ] ) self . C_inst = Currency ( state [ <str> ] )  self . salida = [ None ]   class Turbine ( equipment ) :      title = QApplication . translate ( <str> , <str> ) help = <str> kwargs = { <str> : None , <str> : 0 , <str> : 0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 1.5 , <str> : None , <str> : None } kwargsInput = ( <str> , ) kwargsValue = ( <str> , <str> , <str> , <str> ) kwargsList = ( <str> , <str> ) calculateValue = ( <str> , <str> , <str> , <str> ) calculateCostos = ( <str> , <str> ) indiceCostos = 2 TEXT_METODO = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] TEXT_TERMODINAMICA = [ QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) , QApplication . translate ( <str> , <str> ) ] @ property def isCalculable ( self ) :          if self . kwargs [ <str> ] and self . kwargs [ <str> ] and self . kwargs [ <str> ] :              self . statusCoste = True  else :              self . statusCoste = False  if not self . kwargs [ <str> ] :              if self . kwargs [ <str> ] == 5 :                  if ( self . kwargs [ <str> ] or self . kwargs [ <str> ] ) and self . kwargs [ <str> ] and self . kwargs [ <str> ] :                      self . status = 1 self . msg = <str> return True  else :                      self . msg = QApplication . translate ( <str> , <str> ) self . status = 0   else :                  self . msg = QApplication . translate ( <str> , <str> ) self . status = 0   else :              if self . kwargs [ <str> ] == 0 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 1 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 2 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 3 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 4 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  elif self . kwargs [ <str> ] == 5 :                  valores = self . kwargs [ <str> ] and self . kwargs [ <str> ]  if valores :                  self . status = 1 self . msg = <str> return True  else :                  self . msg = QApplication . translate ( <str> , <str> ) self . status = 0    def calculo ( self ) :          self . entrada = self . kwargs [ <str> ] self . Pout = Pressure ( self . kwargs [ <str> ] ) self . razon = Dimensionless ( self . kwargs [ <str> ] ) self . rendimientoCalculado = Dimensionless ( self . kwargs [ <str> ] ) self . power = Power ( - abs ( self . kwargs [ <str> ] ) ) def f ( Pout , rendimiento ) :              W_ideal = self . __Wideal ( Pout ) power = W_ideal * self . entrada . caudalmasico . gs * rendimiento return power  self . cp_cv = self . entrada . Gas . cp_cv if self . kwargs [ <str> ] in [ 0 , 3 ] or ( self . kwargs [ <str> ] == 5 and self . Pout ) :              self . razon = Dimensionless ( self . Pout / self . entrada . P )  elif self . kwargs [ <str> ] in [ 1 , 4 ] or ( self . kwargs [ <str> ] == 5 and self . razon ) :              self . Pout = Pressure ( self . entrada . P * self . razon )  if self . kwargs [ <str> ] in [ 0 , 1 ] :              Wideal = self . __Wideal ( self . Pout ) G = self . entrada . caudalmasico . gs self . power = Power ( Wideal * G * self . rendimientoCalculado )  elif self . kwargs [ <str> ] == 2 :              def function ( P ) :                  return f ( P , self . rendimientoCalculado ) - self . power  self . Pout = Pressure ( fsolve ( function , self . entrada . P . atm + 1 ) , <str> ) self . razon = Dimensionless ( self . Pout / self . entrada . P )  elif self . kwargs [ <str> ] in [ 3 , 4 ] :              def function ( rendimiento ) :                  return f ( self . Pout . atm , rendimiento ) - self . power  self . rendimientoCalculado = Dimensionless ( fsolve ( function , 0.5 ) )  elif self . kwargs [ <str> ] == 5 :              Wideal = self . __Wideal ( self . Pout ) G = MassFlow ( self . power / self . rendimientoCalculado / Wideal , <str> ) self . Tout = self . __Tout ( Wideal ) self . entrada = self . entrada . clone ( caudalMasico = G )  Wideal = self . __Wideal ( self . Pout ) self . Tout = Temperature ( self . __Tout ( Wideal ) ) self . razonCalculada = Dimensionless ( self . Pout / self . entrada . P ) self . salida = [ self . entrada . clone ( T = self . Tout , P = self . Pout ) ] self . deltaT = DeltaT ( self . salida [ 0 ] . T - self . entrada . T ) self . deltaP = DeltaP ( self . salida [ 0 ] . P - self . entrada . P ) self . Pin = self . entrada . P self . Tin = self . entrada . T  def __Wideal ( self , Pout ) :          if self . kwargs [ <str> ] == 0 :              cpv = self . cp_cv  else :              cpv = 1.40388  if self . kwargs [ <str> ] == 2 :              W_ideal = R * self . entrada . T / self . entrada . M * log ( Pout / self . entrada . P )  else :              W_ideal = R * self . entrada . T * cpv / self . entrada . M / ( cpv - 1 ) * ( ( Pout / self . entrada . P ) ** ( ( cpv - 1 ) / cpv ) - 1 )  return W_ideal  def __Tout ( self , W_ideal ) :          if self . kwargs [ <str> ] == 0 :              cpv = self . cp_cv  else :              cpv = 1.40388  if self . kwargs [ <str> ] == 2 :              Tout = self . entrada . T  else :              Tout = ( self . Pout / self . entrada . P ) ** ( ( cpv - 1 ) / cpv ) * self . entrada . T + ( 1 - self . rendimientoCalculado ) / self . rendimientoCalculado * ( W_ideal / self . entrada . Gas . cv )  return Tout  def coste ( self ) :          HP = abs ( self . power . hp ) CI = self . kwargs [ <str> ] BI = self . kwargs [ <str> ] if self . salida [ 0 ] . P . psi >= 14.696 :              C = 0.31 * HP ** 0.81 * 1000  else :              C = 0.69 * HP ** 0.81 * 1000  self . C_adq = Currency ( C * CI / BI ) self . C_inst = Currency ( self . C_adq * self . kwargs [ <str> ] )  def propTxt ( self ) :          txt = <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 11 ) ) if self . statusCoste :              txt += os . linesep + <str> txt += QApplication . translate ( <str> , <str> ) txt += <str> + os . linesep txt += self . propertiesToText ( range ( 11 , 16 ) )  return txt  @ classmethod def propertiesEquipment ( cls ) :          l = [ ( QApplication . translate ( <str> , <str> ) , <str> , Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , Temperature ) , ( QApplication . translate ( <str> , <str> ) , <str> , DeltaT ) , ( QApplication . translate ( <str> , <str> ) , <str> , Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , Pressure ) , ( QApplication . translate ( <str> , <str> ) , <str> , DeltaP ) , ( QApplication . translate ( <str> , <str> ) , <str> , Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , ( <str> , <str> ) , str ) , ( QApplication . translate ( <str> , <str> ) , <str> , Power ) , ( QApplication . translate ( <str> , <str> ) , <str> , Dimensionless ) , ( <str> , <str> , Dimensionless ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , float ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) , ( QApplication . translate ( <str> , <str> ) , <str> , Currency ) ] return l  def writeStatetoJSON ( self , state ) :          state [ <str> ] = self . Pout state [ <str> ] = self . Tout state [ <str> ] = self . rendimientoCalculado state [ <str> ] = self . power state [ <str> ] = self . razonCalculada state [ <str> ] = self . razon state [ <str> ] = self . deltaT state [ <str> ] = self . deltaP state [ <str> ] = self . cp_cv state [ <str> ] = self . Pin state [ <str> ] = self . Tin state [ <str> ] = self . cp_cv state [ <str> ] = self . statusCoste if self . statusCoste :              state [ <str> ] = self . C_adq state [ <str> ] = self . C_inst   def readStatefromJSON ( self , state ) :          self . Pout = Pressure ( state [ <str> ] ) self . Tout = Temperature ( state [ <str> ] ) self . rendimientoCalculado = Dimensionless ( state [ <str> ] ) self . power = Power ( state [ <str> ] ) self . razonCalculada = Dimensionless ( state [ <str> ] ) self . razon = Dimensionless ( state [ <str> ] ) self . deltaT = DeltaT ( state [ <str> ] ) self . deltaP = DeltaP ( state [ <str> ] ) self . cp_cv = Dimensionless ( state [ <str> ] ) self . Pin = Pressure ( state [ <str> ] ) self . Tin = Temperature ( state [ <str> ] ) self . cp_cv = Dimensionless ( state [ <str> ] ) self . statusCoste = state [ <str> ] if self . statusCoste :              self . C_adq = Currency ( state [ <str> ] ) self . C_inst = Currency ( state [ <str> ] )  self . salida = [ None ]   if __name__ == <str> :      import doctest doctest . testmod ( )   