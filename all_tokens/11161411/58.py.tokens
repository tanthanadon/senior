import pickle from functools import partial import os from PyQt5 import QtCore , QtGui , QtWidgets from scipy . optimize import leastsq from scipy import array , exp , log from lib import unidades , reaction , plot from lib . thread import Evaluate from lib . config import getComponents from UI . widgets import Status from equipment . parents import UI_equip from equipment . reactor import Reactor from UI import UI_corriente , inputTable from UI . widgets import Entrada_con_unidades , Tabla , QLabelMath class widgetReacciones ( QtWidgets . QWidget ) :      changed = QtCore . pyqtSignal ( ) reacciones = [ ] reaccion = None activo = None ajuste = None def __init__ ( self , parent = None ) :          super ( widgetReacciones , self ) . __init__ ( parent ) self . indices , self . nombres , M = getComponents ( ) gridLayout = QtWidgets . QGridLayout ( self ) self . TablaReacciones = Tabla ( 5 , horizontalHeader = [ QtWidgets . QApplication . translate ( <str> , <str> ) , <str> % unidades . MolarEnthalpy ( None ) . text ( ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) , QtWidgets . QApplication . translate ( <str> , <str> ) ] , dinamica = False , verticalHeader = True , orientacion = QtCore . Qt . AlignLeft ) self . TablaReacciones . setMinimumWidth ( 500 ) self . TablaReacciones . setSelectionBehavior ( QtWidgets . QAbstractItemView . SelectRows ) self . TablaReacciones . setSelectionMode ( QtWidgets . QAbstractItemView . SingleSelection ) self . TablaReacciones . horizontalHeader ( ) . setStretchLastSection ( True ) self . TablaReacciones . setEditTriggers ( QtWidgets . QAbstractItemView . NoEditTriggers ) self . TablaReacciones . itemSelectionChanged . connect ( self . actualizarBotones ) gridLayout . addWidget ( self . TablaReacciones , 1 , 1 , 6 , 4 ) self . botonAbrir = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonAbrir . clicked . connect ( self . botonAbrirClicked ) gridLayout . addWidget ( self . botonAbrir , 1 , 5 ) self . botonGuardar = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonGuardar . clicked . connect ( self . botonGuardarClicked ) self . botonGuardar . setSizePolicy ( QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) self . botonGuardar . setEnabled ( False ) gridLayout . addWidget ( self . botonGuardar , 2 , 5 ) self . botonNew = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonNew . clicked . connect ( self . botonNewClicked ) gridLayout . addWidget ( self . botonNew , 3 , 5 ) self . botonEdit = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonEdit . setEnabled ( False ) self . botonEdit . setCheckable ( True ) self . botonEdit . clicked . connect ( self . botonEditClicked ) gridLayout . addWidget ( self . botonEdit , 4 , 5 ) self . botonDelete = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonDelete . setEnabled ( False ) self . botonDelete . clicked . connect ( self . botonDeleteClicked ) gridLayout . addWidget ( self . botonDelete , 5 , 5 ) self . botonClear = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonClear . clicked . connect ( self . botonClearClicked ) gridLayout . addWidget ( self . botonClear , 6 , 5 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 1 )  def actualizarBotones ( self , bool = True ) :          self . botonEdit . setEnabled ( bool ) self . botonDelete . setEnabled ( bool )  def botonAbrirClicked ( self ) :          fname = str ( QtWidgets . QFileDialog . getOpenFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , <str> , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) [ 0 ] ) if fname :              with open ( fname , <str> ) as archivo :                  reacciones = pickle . load ( archivo )  print ( reacciones ) self . reacciones = reacciones self . botonGuardar . setEnabled ( True ) for fila , reaccion in enumerate ( reacciones ) :                  self . TablaReacciones . addRow ( ) self . TablaReacciones . setValue ( fila , 0 , reaccion . text ) self . TablaReacciones . setValue ( fila , 1 , <str> % reaccion . Hr . config ( ) , QtCore . Qt . AlignRight ) self . TablaReacciones . setValue ( fila , 2 , str ( reaccion . tipo + 1 ) + <str> + reaction . Reaction . TEXT_TYPE [ reaccion . tipo ] ) self . TablaReacciones . setValue ( fila , 3 , reaction . Reaction . TEXT_PHASE [ reaccion . fase ] ) self . TablaReacciones . item ( fila , 4 ) . setFlags ( QtCore . Qt . ItemIsEditable | QtCore . Qt . ItemIsEnabled | QtCore . Qt . ItemIsSelectable )  for i in range ( 4 ) :                  self . TablaReacciones . resizeColumnToContents ( i )   self . changed . emit ( )  def botonGuardarClicked ( self ) :          fname = str ( QtWidgets . QFileDialog . getSaveFileName ( self , QtWidgets . QApplication . translate ( <str> , <str> ) , <str> , QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) [ 0 ] ) if fname :              if fname . split ( <str> ) [ - 1 ] != <str> :                  fname += <str>  pickle . dump ( self . reacciones , open ( fname , <str> ) )   def botonNewClicked ( self ) :          dialog = UI_reacciones ( parent = self ) if dialog . exec_ ( ) :              pass   def botonEditClicked ( self , bool ) :          if bool :              indice = self . TablaReacciones . currentRow ( ) reaccion = self . reacciones [ indice ] dialogo = UI_reacciones ( reaccion , self ) dialogo . exec_ ( )  else :              self . botonAddClicked ( self . activo , False ) self . reacciones [ self . activo ] = self . reaccion self . TablaReacciones . setCurrentCell ( self . activo , 0 ) self . activo = - 1 self . changed . emit ( )  self . botonNew . setEnabled ( not bool ) self . botonDelete . setEnabled ( not bool ) self . botonClear . setEnabled ( not bool ) self . botonAdd . setEnabled ( not bool ) self . botonAbrir . setEnabled ( not bool ) self . botonGuardar . setEnabled ( not bool )  def botonDeleteClicked ( self ) :          indice = self . TablaReacciones . currentRow ( ) self . TablaReacciones . removeRow ( indice ) del self . reacciones [ indice ] self . TablaReacciones . clearSelection ( ) self . actualizarBotones ( False ) self . changed . emit ( )  def botonClearClicked ( self ) :          if self . reacciones :              self . reacciones = [ ] self . TablaReacciones . setRowCount ( 0 ) self . botonGuardar . setEnabled ( False )   def botonAddClicked ( self , fila , add = True ) :          if add :              fila = self . TablaReacciones . rowCount ( ) self . TablaReacciones . addRow ( )  self . TablaReacciones . setValue ( fila , 0 , self . Formula . text ( ) ) self . TablaReacciones . setValue ( fila , 1 , <str> % self . Hr . value . config ( ) , QtCore . Qt . AlignRight ) self . TablaReacciones . setValue ( fila , 2 , str ( self . tipo . currentIndex ( ) + 1 ) + <str> + self . tipo . currentText ( ) ) self . TablaReacciones . setValue ( fila , 3 , self . Fase . currentText ( ) ) self . TablaReacciones . item ( fila , 4 ) . setFlags ( QtCore . Qt . ItemIsEditable | QtCore . Qt . ItemIsEnabled | QtCore . Qt . ItemIsSelectable ) for i in range ( 4 ) :              self . TablaReacciones . resizeColumnToContents ( i )  self . reacciones . insert ( fila , self . reaccion ) self . botonGuardar . setEnabled ( True ) self . changed . emit ( )   class UI_reacciones ( QtWidgets . QDialog ) :      reaction = reaction . Reaction ( ) def __init__ ( self , reaccion = None , parent = None ) :          super ( UI_reacciones , self ) . __init__ ( parent ) self . evaluate = Evaluate ( ) self . evaluate . finished . connect ( self . rellenar ) self . indices , self . nombres , M = getComponents ( ) gridLayout = QtWidgets . QGridLayout ( self ) lyt = QtWidgets . QHBoxLayout ( ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . key = QtWidgets . QComboBox ( ) for i , nombre in enumerate ( self . nombres ) :              self . key . addItem ( <str> % ( i + 1 , nombre ) )  self . key . currentIndexChanged . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . key ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) ) gridLayout . addLayout ( lyt , 1 , 1 , 1 , 5 ) lyt = QtWidgets . QHBoxLayout ( ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . fase = QtWidgets . QComboBox ( ) for txt in reaction . Reaction . TEXT_PHASE :              self . fase . addItem ( txt )  self . fase . currentIndexChanged . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . fase ) self . Formula = QtWidgets . QLabel ( ) self . Formula . setAlignment ( QtCore . Qt . AlignCenter ) self . Formula . setSizePolicy ( QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) lyt . addWidget ( self . Formula ) gridLayout . addLayout ( lyt , 2 , 1 , 1 , 5 ) lyt = QtWidgets . QVBoxLayout ( ) title = self . nombres [ : ] title . append ( <str> ) self . Estequiometria = Tabla ( 1 , verticalHeaderLabels = title , horizontalHeader = [ QtWidgets . QApplication . translate ( <str> , <str> ) ] , filas = len ( self . indices ) ) self . Estequiometria . setFixedHeight ( 22 * len ( self . indices ) + 22 + 4 + 22 ) lyt . addWidget ( self . Estequiometria ) self . Estequiometria . addRow ( ) brush = QtGui . QBrush ( QtGui . QColor ( <str> ) ) self . Estequiometria . item ( len ( self . indices ) , 0 ) . setBackground ( brush ) self . Estequiometria . item ( len ( self . indices ) , 0 ) . setFlags ( QtCore . Qt . NoItemFlags ) self . Estequiometria . cellChanged . connect ( self . reaccionCambiada ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Expanding ) ) gridLayout . addLayout ( lyt , 3 , 1 , 1 , 2 ) lyt = QtWidgets . QGridLayout ( ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 1 , 1 ) self . formula = QtWidgets . QCheckBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . formula . toggled . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . formula , 1 , 2 , 1 , 2 ) self . customHr = QtWidgets . QCheckBox ( <str> + QtWidgets . QApplication . translate ( <str> , <str> ) ) self . customHr . toggled . connect ( self . changeHr ) lyt . addWidget ( self . customHr , 2 , 2 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 2 ) self . Hr = Entrada_con_unidades ( unidades . MolarEnthalpy , readOnly = True ) self . Hr . valueChanged . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . Hr , 3 , 3 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Expanding ) ) gridLayout . addLayout ( lyt , 3 , 3 , 1 , 2 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 4 , 2 ) lyt = QtWidgets . QHBoxLayout ( ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . tipo = QtWidgets . QComboBox ( ) for txt in reaction . Reaction . TEXT_TYPE :              self . tipo . addItem ( txt )  self . tipo . currentIndexChanged . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . tipo ) lyt . addItem ( QtWidgets . QSpacerItem ( 20 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . base = QtWidgets . QComboBox ( ) for txt in reaction . Reaction . TEXT_BASE :              self . base . addItem ( txt )  self . base . currentIndexChanged . connect ( partial ( self . changeParams , <str> ) ) lyt . addWidget ( self . base ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) ) gridLayout . addLayout ( lyt , 5 , 1 , 1 , 5 ) self . stacked = QtWidgets . QStackedWidget ( ) self . tipo . currentIndexChanged . connect ( self . stacked . setCurrentIndex ) gridLayout . addWidget ( self . stacked , 6 , 1 , 1 , 5 ) gridLayout . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 7 , 1 , 1 , 5 ) widget = QtWidgets . QWidget ( ) self . stacked . addWidget ( widget ) lyt = QtWidgets . QGridLayout ( widget ) lyt . addWidget ( QtWidgets . QLabel ( <str> + QtWidgets . QApplication . translate ( <str> , <str> ) + <str> ) , 1 , 1 , 1 , 4 ) self . Conversion = Tabla ( 1 , verticalHeaderModel = <str> , filas = 3 ) self . Conversion . setConnected ( ) self . Conversion . setFixedWidth ( 100 ) lyt . addWidget ( self . Conversion , 2 , 1 , 3 , 1 ) mathTex = <str> label = QLabelMath ( mathTex ) lyt . addWidget ( label , 2 , 2 , 1 , 3 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 2 ) self . unidadesTemperatura = QtWidgets . QComboBox ( ) for i in unidades . Temperature . __text__ :              self . unidadesTemperatura . addItem ( i )  lyt . addWidget ( self . unidadesTemperatura , 3 , 3 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 4 , 4 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 5 , 1 , 1 , 5 ) widget = QtWidgets . QWidget ( ) self . stacked . addWidget ( widget ) lyt = QtWidgets . QGridLayout ( widget ) self . check_KFijo = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . check_KFijo . toggled . connect ( self . KeqChanged ) lyt . addWidget ( self . check_KFijo , 1 , 1 , 1 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 1 , 3 ) self . Keq = Entrada_con_unidades ( float ) lyt . addWidget ( self . Keq , 1 , 4 ) mathTex = <str> mathTex += <str> label = QLabelMath ( mathTex ) lyt . addWidget ( label , 1 , 5 , 1 , 4 ) self . check_KEq = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . check_KEq . toggled . connect ( self . KeqChanged ) lyt . addWidget ( self . check_KEq , 2 , 1 , 1 , 2 ) self . check_KTabla = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . check_KTabla . toggled . connect ( self . KeqChanged ) lyt . addWidget ( self . check_KTabla , 2 , 5 , 1 , 2 ) self . KEq_Dat = Tabla ( 1 , verticalHeaderLabels = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , filas = 8 ) self . KEq_Dat . setFixedHeight ( 22 * 8 + 4 ) self . KEq_Dat . setFixedWidth ( 120 ) lyt . addWidget ( self . KEq_Dat , 3 , 3 , 1 , 2 ) self . KEq_Tab = Tabla ( 4 , horizontalHeader = [ <str> , <str> , <str> , <str> ] , verticalHeader = False , columnReadOnly = [ False , False , True , True ] ) self . KEq_Tab . setSizePolicy ( QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) self . KEq_Tab . setFixedWidth ( 400 ) self . KEq_Tab . setConnected ( ) self . KEq_Tab . rowFinished . connect ( self . Regresion ) self . KEq_Tab . setAlternatingRowColors ( False ) lyt . addWidget ( self . KEq_Tab , 3 , 5 , 1 , 4 ) lyt . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 5 ) self . r2 = Entrada_con_unidades ( float , readOnly = True ) lyt . addWidget ( self . r2 , 4 , 6 ) self . botonTablaPlot = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonTablaPlot . clicked . connect ( self . Plot ) lyt . addWidget ( self . botonTablaPlot , 4 , 7 ) self . botonTablaClear = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonTablaClear . clicked . connect ( self . KEq_Tab . clear ) lyt . addWidget ( self . botonTablaClear , 4 , 8 ) mathTex = <str> label = QLabelMath ( mathTex ) lyt . addWidget ( label , 5 , 1 , 1 , 8 ) self . checkGibbs = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) lyt . addWidget ( self . checkGibbs , 6 , 1 , 1 , 4 ) self . check_KFijo . setChecked ( True ) widget = QtWidgets . QWidget ( ) self . stacked . addWidget ( widget ) lyt = QtWidgets . QGridLayout ( widget ) widget = QtWidgets . QWidget ( ) self . stacked . addWidget ( widget ) lyt = QtWidgets . QGridLayout ( widget ) self . status = Status ( ) gridLayout . addWidget ( self . status , 10 , 1 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Cancel | QtWidgets . QDialogButtonBox . Ok ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) gridLayout . addWidget ( self . buttonBox , 10 , 2 , 1 , 4 ) if reaccion :              self . setReaction ( reaccion )   def changeParams ( self , parametro , valor ) :          self . calculo ( ** { parametro : valor } )  def calculo ( self , ** kwargs ) :          self . status . setState ( 4 ) self . evaluate . start ( self . reaction , kwargs )  def changeHr ( self , bool ) :          self . Hr . setReadOnly ( not bool ) self . changeParams ( <str> , bool )  def reaccionCambiada ( self ) :          kwargs = { <str> : self . indices , <str> : self . Estequiometria . getColumn ( 0 ) [ : - 1 ] } self . calculo ( ** kwargs )  def setReaction ( self , reaction ) :          self . reaction = reaction self . rellenar ( )  def rellenar ( self ) :          self . blockSignals ( True ) for variable in self . reaction . kwargsValue :              self . __getattribute__ ( variable ) . setValue ( self . reaction . kwargs [ variable ] )  for combo in self . reaction . kwargsList :              self . __getattribute__ ( combo ) . setCurrentIndex ( self . reaction . kwargs [ combo ] )  for check in self . reaction . kwargsCheck :              self . __getattribute__ ( check ) . setChecked ( self . reaction . kwargs [ check ] )  self . Estequiometria . setColumn ( 0 , self . reaction . kwargs [ <str> ] ) self . blockSignals ( False ) self . status . setState ( self . reaction . status , self . reaction . msg ) self . Estequiometria . item ( len ( self . indices ) , 0 ) . setText ( str ( self . reaction . error ) ) if self . reaction . status :              self . Formula . setText ( self . reaction . _txt ( ) ) self . Hr . setValue ( self . reaction . Hr )   def KeqChanged ( self ) :          self . Keq . setReadOnly ( not self . check_KFijo . isChecked ( ) ) self . KEq_Dat . setEnabled ( self . check_KEq . isChecked ( ) ) self . KEq_Tab . setEnabled ( self . check_KTabla . isChecked ( ) ) self . botonTablaClear . setEnabled ( self . check_KTabla . isChecked ( ) ) self . botonTablaPlot . setEnabled ( self . check_KTabla . isChecked ( ) )  def Regresion ( self ) :          t = array ( self . KEq_Tab . getColumn ( 0 ) [ : - 1 ] ) k = array ( self . KEq_Tab . getColumn ( 1 ) [ : - 1 ] ) if len ( t ) >= 4 :              if 4 <= len ( t ) < 8 :                  inicio = r_ [ 0 , 0 , 0 , 0 ] f = lambda par , T : exp ( par [ 0 ] + par [ 1 ] / T + par [ 2 ] * log ( T ) + par [ 3 ] * T ) resto = lambda par , T , k : k - f ( par , T )  else :                  inicio = r_ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] f = lambda par , T : exp ( par [ 0 ] + par [ 1 ] / T + par [ 2 ] * log ( T ) + par [ 3 ] * T + par [ 4 ] * T ** 2 + par [ 5 ] * T ** 3 + par [ 6 ] * T ** 4 + par [ 7 ] * T ** 5 ) resto = lambda par , T , k : k - f ( par , T )  ajuste = leastsq ( resto , inicio , args = ( t , k ) ) kcalc = f ( ajuste [ 0 ] , t ) error = ( k - kcalc ) / k * 100 self . KEq_Dat . setColumn ( 0 , ajuste [ 0 ] ) self . KEq_Tab . setColumn ( 2 , kcalc ) self . KEq_Tab . setColumn ( 3 , error ) if ajuste [ 1 ] in [ 1 , 2 , 3 , 4 ] :                  self . ajuste = ajuste [ 0 ]    def Plot ( self ) :          if self . ajuste != None :              t = array ( self . KEq_Tab . getColumn ( 0 ) [ : - 1 ] ) k = array ( self . KEq_Tab . getColumn ( 1 ) [ : - 1 ] ) if 4 <= len ( t ) < 8 :                  f = lambda par , T : exp ( par [ 0 ] + par [ 1 ] / T + par [ 2 ] * log ( T ) + par [ 3 ] * T )  else :                  f = lambda par , T : exp ( par [ 0 ] + par [ 1 ] / T + par [ 2 ] * log ( T ) + par [ 3 ] * T + par [ 4 ] * T ** 2 + par [ 5 ] * T ** 3 + par [ 6 ] * T ** 4 + par [ 7 ] * T ** 5 )  grafico = plot . Plot ( ) grafico . data ( t , k , <str> , t , f ( self . ajuste , t ) ) grafico . exec_ ( )    class UI_equipment ( UI_equip ) :      profile_T = None Equipment = Reactor ( ) def __init__ ( self , equipment = None , parent = None ) :          super ( UI_equipment , self ) . __init__ ( Reactor , entrada = False , salida = False , parent = parent ) self . Reacciones = widgetReacciones ( ) self . Reacciones . changed . connect ( self . calculo ) self . tabWidget . insertTab ( 1 , self . Reacciones , QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Calculo = QtWidgets . QGridLayout ( self . tabCalculo ) gridLayout_Calculo . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 0 , 1 , 1 ) self . P = Entrada_con_unidades ( unidades . Pressure ) self . P . valueChanged . connect ( self . calculo ) gridLayout_Calculo . addWidget ( self . P , 2 , 1 , 1 , 1 ) gridLayout_Calculo . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 0 , 1 , 1 ) self . DeltaP = Entrada_con_unidades ( unidades . Pressure ) self . DeltaP . valueChanged . connect ( self . calculo ) gridLayout_Calculo . addWidget ( self . DeltaP , 3 , 1 , 1 , 1 ) gridLayout_Calculo . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 4 , 0 , 1 , 5 ) lyt = QtWidgets . QHBoxLayout ( ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) ) self . tipo = QtWidgets . QComboBox ( ) self . tipo . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . tipo . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . tipo . currentIndexChanged . connect ( self . tipoCambiado ) lyt . addWidget ( self . tipo ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) ) gridLayout_Calculo . addLayout ( lyt , 5 , 0 , 1 , 5 ) gridLayout_Calculo . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 6 , 0 , 1 , 5 ) groupbox = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout = QtWidgets . QGridLayout ( groupbox ) self . checkAdiabatico = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkAdiabatico . toggled . connect ( self . heatChanged ) layout . addWidget ( self . checkAdiabatico , 1 , 1 , 1 , 1 ) self . checkIsotermico = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkIsotermico . toggled . connect ( self . heatChanged ) layout . addWidget ( self . checkIsotermico , 2 , 1 , 1 , 1 ) self . checkFlux = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkFlux . toggled . connect ( self . heatChanged ) layout . addWidget ( self . checkFlux , 3 , 1 , 1 , 1 ) self . checkIntercambio = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkIntercambio . toggled . connect ( self . heatChanged ) layout . addWidget ( self . checkIntercambio , 4 , 1 , 1 , 1 ) self . checkPerfil = QtWidgets . QRadioButton ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . checkPerfil . toggled . connect ( self . heatChanged ) layout . addWidget ( self . checkPerfil , 5 , 1 , 1 , 1 ) self . T = Entrada_con_unidades ( unidades . Temperature ) self . T . valueChanged . connect ( self . calculo ) layout . addWidget ( self . T , 2 , 2 , 1 , 2 ) self . Q = Entrada_con_unidades ( unidades . Power ) self . Q . valueChanged . connect ( self . calculo ) layout . addWidget ( self . Q , 3 , 2 , 1 , 2 ) self . T_ext = Entrada_con_unidades ( unidades . Temperature ) self . T_ext . valueChanged . connect ( self . calculo ) layout . addWidget ( self . T_ext , 4 , 2 , 1 , 2 ) self . U = Entrada_con_unidades ( unidades . HeatTransfCoef ) self . U . valueChanged . connect ( self . calculo ) layout . addWidget ( self . U , 4 , 4 ) layout . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 4 , 5 ) self . direccion = QtWidgets . QComboBox ( ) self . direccion . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . direccion . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( self . direccion , 4 , 6 ) self . botonPerfil = QtWidgets . QPushButton ( QtGui . QIcon ( QtGui . QPixmap ( os . environ [ <str> ] + <str> ) ) , QtWidgets . QApplication . translate ( <str> , <str> ) ) self . botonPerfil . clicked . connect ( self . editorPerfil ) layout . addWidget ( self . botonPerfil , 5 , 2 , 1 , 1 ) gridLayout_Calculo . addWidget ( groupbox , 7 , 0 , 1 , 5 ) self . groupBox_Diseno = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Calculo . addWidget ( self . groupBox_Diseno , 8 , 0 , 1 , 5 ) lyt = QtWidgets . QGridLayout ( self . groupBox_Diseno ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 ) self . modo = QtWidgets . QComboBox ( ) self . modo . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . modo . addItem ( QtWidgets . QApplication . translate ( <str> , <str> ) ) self . modo . currentIndexChanged . connect ( self . calculo ) lyt . addWidget ( self . modo , 1 , 2 , 1 , 3 ) lyt . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Fixed ) , 1 , 5 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 2 , 1 ) self . V = Entrada_con_unidades ( unidades . Volume , <str> ) lyt . addWidget ( self . V , 2 , 2 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 1 ) self . key = QtWidgets . QComboBox ( ) lyt . addWidget ( self . key , 3 , 2 ) lyt . addItem ( QtWidgets . QSpacerItem ( 20 , 10 , QtWidgets . QSizePolicy . Fixed , QtWidgets . QSizePolicy . Fixed ) , 3 , 3 ) lyt . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 3 , 4 ) self . conversion = Entrada_con_unidades ( float , max = 1 ) lyt . addWidget ( self . conversion , 3 , 5 ) gridLayout_Calculo . addItem ( QtWidgets . QSpacerItem ( 10 , 10 , QtWidgets . QSizePolicy . Expanding , QtWidgets . QSizePolicy . Expanding ) , 10 , 0 , 1 , 5 ) groupBox_Calculo = QtWidgets . QGroupBox ( QtWidgets . QApplication . translate ( <str> , <str> ) ) gridLayout_Calculo . addWidget ( groupBox_Calculo , 11 , 0 , 1 , 5 ) gridLayout_1 = QtWidgets . QGridLayout ( groupBox_Calculo ) gridLayout_1 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 0 , 1 , 1 , 1 ) self . TCalc = Entrada_con_unidades ( unidades . Temperature , retornar = False , readOnly = True ) gridLayout_1 . addWidget ( self . TCalc , 0 , 2 , 1 , 1 ) gridLayout_1 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 1 , 1 , 1 ) self . HeatCalc = Entrada_con_unidades ( unidades . Power , retornar = False , readOnly = True ) gridLayout_1 . addWidget ( self . HeatCalc , 1 , 2 , 1 , 1 ) gridLayout_1 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 0 , 4 ) self . conversionCalc = Entrada_con_unidades ( float , readOnly = True ) gridLayout_1 . addWidget ( self . conversionCalc , 0 , 5 ) gridLayout_1 . addWidget ( QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) , 1 , 4 ) self . VCalc = Entrada_con_unidades ( unidades . Volume , <str> , readOnly = True ) gridLayout_1 . addWidget ( self . VCalc , 1 , 5 ) self . checkAdiabatico . setChecked ( True ) self . tipoCambiado ( 0 )  def heatChanged ( self ) :          self . T . setReadOnly ( not self . checkIsotermico . isChecked ( ) ) self . Q . setReadOnly ( not self . checkFlux . isChecked ( ) ) self . T_ext . setReadOnly ( not self . checkIntercambio . isChecked ( ) ) self . U . setReadOnly ( not self . checkIntercambio . isChecked ( ) ) self . direccion . setEnabled ( self . checkIntercambio . isChecked ( ) and self . tipo . currentIndex ( ) ) self . botonPerfil . setEnabled ( self . checkPerfil . isChecked ( ) )  def tipoCambiado ( self , ind ) :          self . checkPerfil . setEnabled ( ind ) self . direccion . setEnabled ( self . checkIntercambio . isChecked ( ) and ind ) self . calculo ( )  def editorPerfil ( self ) :          dialog = inputTable . InputTableDialog ( 2 , data = self . profile_T , title = QtWidgets . QApplication . translate ( <str> , <str> ) , horizontalHeader = [ <str> , <str> + unidades . Temperature ( None ) . text ( ) ] ) if dialog . exec_ ( ) :              self . profile_T = dialog . data    if __name__ == <str> :      import sys from lib . corriente import Corriente , Mezcla , Solid from numpy import r_ app = QtWidgets . QApplication ( sys . argv ) dialogo = UI_equipment ( ) dialogo . show ( ) sys . exit ( app . exec_ ( ) )   