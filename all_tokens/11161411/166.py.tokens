<str> from scipy . constants import R from lib . EoS . cubic import Cubic , CubicHelmholtz class PR ( Cubic ) :      <str> __title__ = <str> __status__ = <str> __doi__ = ( { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> <str> , <str> : <str> <str> <str> , <str> : <str> } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) OmegaA = 0.45724 OmegaB = 0.0778 def __init__ ( self , T , P , mezcla ) :          self . T = T self . P = P self . mezcla = mezcla ao = [ ] ai = [ ] bi = [ ] C1 = [ ] C2 = [ ] C3 = [ ] for cmp in mezcla . componente :              a0 = self . OmegaA * R ** 2 * cmp . Tc ** 2 / cmp . Pc b = self . OmegaB * R * cmp . Tc / cmp . Pc m , alfa = self . _alfa ( cmp , T ) ao . append ( a0 ) ai . append ( a0 * alfa ) bi . append ( b ) C1 . append ( m ) C2 . append ( 0 ) C3 . append ( 0 )  am , bm = self . _mixture ( <str> , mezcla . ids , [ ai , bi ] ) self . ao = ao self . C1 = C1 self . C2 = C2 self . C3 = C3 self . ai = ai self . bi = bi self . b = bm self . tita = am self . delta = 2 * bm self . epsilon = - bm ** 2 super ( PR , self ) . __init__ ( T , P , mezcla )  def _phir ( self , mezcla , tau , delta , T , rho , ao , ai , C1 , C2 , C3 ) :          Tr = mezcla . Tc Di = [ ] Dt = [ ] Dtt = [ ] Dttt = [ ] for cmp in mezcla . componente :              tc = cmp . Tc Di . append ( 1 - ( Tr / tc ) ** 0.5 / tau ** 0.5 ) Dt . append ( ( Tr / tc ) ** 0.5 / 2 / tau ** 1.5 ) Dtt . append ( - 3 * ( Tr / tc ) ** 0.5 / 4 / tau ** 2.5 ) Dttt . append ( 15 * ( Tr / tc ) ** 0.5 / 8 / tau ** 3.5 )  Bi = [ ] for c1 , c2 , c3 , d in zip ( C1 , C2 , C3 , Di ) :              Bi . append ( 1 + c1 * d + c2 * d ** 2 + c3 * d ** 3 )  Bt = [ ] Btt = [ ] Bttt = [ ] for c1 , c2 , c3 , d , dt , dtt , dttt in zip ( C1 , C2 , C3 , Di , Dt , Dtt , Dttt ) :              cs = ( c1 , c2 , c3 ) bt = 0 btt = 0 bttt = 0 for n , c in enumerate ( cs ) :                  n += 1 bt += n * c * d ** ( n - 1 ) * dt btt += n * c * ( ( n - 1 ) * dt ** 2 + d * dtt ) * d ** ( n - 2 ) bttt += n * c * ( 3 * ( n - 1 ) * d * dt * dtt + ( n ** 2 - 3 * n + 2 ) * dt ** 3 + d ** 2 * dttt ) * d ** ( n - 3 )  Bt . append ( bt ) Btt . append ( btt ) Bttt . append ( bttt )  dait = [ ] daitt = [ ] daittt = [ ] for a , B , bt , btt , bttt in zip ( ao , Bi , Bt , Btt , Bttt ) :              dait . append ( 2 * a * B * bt ) daitt . append ( 2 * a * ( B * btt + bt ** 2 ) ) daittt . append ( 2 * a * ( B * bttt + 3 * bt * btt ) )  uij = [ ] for aii in ai :              uiji = [ ] for ajj in ai :                  uiji . append ( aii * ajj )  uij . append ( uiji )  duijt = [ ] duijtt = [ ] duijttt = [ ] for aii , diit , diitt , diittt in zip ( ai , dait , daitt , daittt ) :              duijit = [ ] duijitt = [ ] duijittt = [ ] for ajj , djjt , djjtt , djjttt in zip ( ai , dait , daitt , daittt ) :                  duijit . append ( aii * djjt + ajj * diit ) duijitt . append ( aii * djjtt + 2 * diit * djjt + ajj * diitt ) duijittt . append ( aii * djjttt + 3 * diit * djjtt + 3 * diitt * djjt + ajj * diittt )  duijt . append ( duijit ) duijtt . append ( duijitt ) duijttt . append ( duijittt )  daijt = [ ] daijtt = [ ] daijttt = [ ] for uiji , duijit , duijitt , duijittt , kiji in zip ( uij , duijt , duijtt , duijttt , self . kij ) :              daijit = [ ] daijitt = [ ] daijittt = [ ] for u , ut , utt , uttt , k in zip ( uiji , duijit , duijitt , duijittt , kiji ) :                  daijit . append ( ( 1 - k ) / 2 / u ** 0.5 * ut ) daijitt . append ( ( 1 - k ) / 4 / u ** 1.5 * ( 2 * u * utt - ut ** 2 ) ) daijittt . append ( ( 1 - k ) / 8 / u ** 2.5 * ( 4 * u ** 2 * uttt - 6 * u * ut * utt + 3 * ut ** 3 ) )  daijt . append ( daijit ) daijtt . append ( daijitt ) daijttt . append ( daijittt )  damt = 0 damtt = 0 damttt = 0 for xi , daijit , daijitt , daijittt in zip ( mezcla . fraccion , daijt , daijtt , daijttt ) :              for xj , dat , datt , dattt in zip ( mezcla . fraccion , daijit , daijitt , daijittt ) :                  damt += xi * xj * dat damtt += xi * xj * datt damttt += xi * xj * dattt   kw = { } kw [ <str> ] = 1 / mezcla . Vc kw [ <str> ] = mezcla . Tc kw [ <str> ] = 1 + 2 ** 0.5 kw [ <str> ] = 1 - 2 ** 0.5 kw [ <str> ] = self . b kw [ <str> ] = self . tita kw [ <str> ] = damt kw [ <str> ] = damtt kw [ <str> ] = damttt print ( tau , delta , kw ) fir = CubicHelmholtz ( tau , delta , ** kw ) print ( delta , fir [ <str> ] , R , T , rho ) print ( <str> , ( 1 + delta * fir [ <str> ] ) * R * T * rho * 1000 )  def _alfa ( self , cmp , T ) :          if cmp . id == 62 and T / cmp . Tc < 0.85 :              alfa = ( 1.0085677 + 0.82154 * ( 1 - ( T / cmp . Tc ) ** 0.5 ) ) ** 2 m = 0  else :              m = 0.37464 + 1.54226 * cmp . f_acent - 0.2699 * cmp . f_acent ** 2 alfa = ( 1 + m * ( 1 - ( T / cmp . Tc ) ** 0.5 ) ) ** 2  return m , alfa   if __name__ == <str> :      from lib . mezcla import Mezcla mix = Mezcla ( 5 , ids = [ 4 ] , caudalMolar = 1 , fraccionMolar = [ 1 ] ) eq = PR ( 300 , 9.9742e5 , mix ) print ( <str> % ( eq . Vg . ccmol , eq . Vl . ccmol ) ) eq = PR ( 300 , 42.477e5 , mix ) print ( <str> % ( eq . Vl . ccmol ) )   