import json import os import re from PyQt5 import QtWidgets from scipy import arange from lib . config import conf_dir from lib . crude import Z_list from lib . utilities import formatLine from plots . moody import Chart from UI . prefStandingKatz import ConfigDialog from UI . widgets import Entrada_con_unidades def calculate ( config , dat = None ) :      method = config . getint ( <str> , <str> ) Tr = eval ( config . get ( <str> , <str> ) ) Prmin = config . getfloat ( <str> , <str> ) Prmax = config . getfloat ( <str> , <str> ) Z = Z_list [ method ] Pr = arange ( Prmin , Prmax , 0.01 ) if dat is None :          dat = { }  lines = { } for t in Tr :          pr = [ ] z = [ ] for p in Pr :              try :                  z . append ( Z ( t , p ) ) pr . append ( p )  except NotImplementedError :                  pass  except ValueError :                  pass   if pr :              lines [ t ] = { <str> : pr , <str> : z }   dat [ method ] = lines with open ( conf_dir + <str> , <str> ) as file :          json . dump ( dat , file , indent = 4 )   class Standing_Katz ( Chart ) :      title = QtWidgets . QApplication . translate ( <str> , <str> ) configDialog = ConfigDialog PosLogo = 8 , 0.5 def plot ( self ) :          method = self . Preferences . getint ( <str> , <str> ) Prmin = self . Preferences . getfloat ( <str> , <str> ) Prmax = self . Preferences . getfloat ( <str> , <str> ) self . plt . ax . clear ( ) self . plt . ax . set_xlim ( Prmin , Prmax ) self . plt . ax . set_xlabel ( <str> , ha = <str> , size = <str> ) self . plt . ax . set_ylabel ( <str> , va = <str> , size = <str> ) self . plt . ax . grid ( b = True , which = <str> , color = <str> , ls = <str> ) if not os . path . isfile ( conf_dir + <str> ) :              calculate ( self . Preferences )  load = False with open ( conf_dir + <str> , <str> ) as file :              try :                  dat = json . load ( file )  except ValueError :                  calculate ( self . Preferences ) load = True  if method not in dat :                  calculate ( self . Preferences , dat ) load = True   if load :              with open ( conf_dir + <str> , <str> ) as file :                  dat = json . load ( file )   kw = formatLine ( self . Preferences , <str> , <str> ) self . plt . lx = self . plt . ax . axhline ( ** kw ) self . plt . ly = self . plt . ax . axvline ( ** kw ) self . plt . lx . set_visible ( False ) self . plt . ly . set_visible ( False ) self . note = None kw = formatLine ( self . Preferences , <str> , <str> ) pzmin = 4 for Tr in sorted ( dat [ str ( method ) ] . keys ( ) ) :              line = dat [ str ( method ) ] [ Tr ] self . plt . ax . plot ( line [ <str> ] , line [ <str> ] , ** kw ) zmin = min ( line [ <str> ] ) if zmin < 1 :                  pzmin = line [ <str> ] [ line [ <str> ] . index ( zmin ) ]  else :                  if 4 not in line [ <str> ] :                      line [ <str> ] . append ( pzmin ) line [ <str> ] . sort ( )  zmin = line [ <str> ] [ line [ <str> ] . index ( pzmin ) ]  self . plt . ax . text ( pzmin , zmin , str ( Tr ) , size = <str> , ha = <str> , va = <str> )  self . plt . ax . text ( pzmin , zmin + 0.1 , <str> , size = <str> , ha = <str> , va = <str> ) self . plt . draw ( )  def calculate ( self ) :          dlg = CalculateDialog ( ) if dlg . exec_ ( ) :              Tr = dlg . Tr . value Pr = dlg . Pr . value Z = dlg . Z . value self . createCrux ( Tr , Pr , Z )   def createCrux ( self , Tr , Pr , Z ) :          txt = <str> % ( Tr , Pr , Z ) self . plt . lx . set_visible ( True ) self . plt . ly . set_visible ( True ) self . plt . ly . set_xdata ( Pr ) self . plt . lx . set_ydata ( Z ) if self . note :              self . note . remove ( ) self . note = None  self . note = self . plt . fig . text ( 0.85 , 0.08 , txt , size = <str> , va = <str> ) self . plt . draw ( )   class CalculateDialog ( QtWidgets . QDialog ) :      def __init__ ( self , parent = None ) :          super ( CalculateDialog , self ) . __init__ ( parent ) title = QtWidgets . QApplication . translate ( <str> , <str> ) self . setWindowTitle ( title ) layout = QtWidgets . QGridLayout ( self ) label = QtWidgets . QLabel ( QtWidgets . QApplication . translate ( <str> , <str> ) ) layout . addWidget ( label , 1 , 0 ) self . method = QtWidgets . QComboBox ( ) for Z in Z_list :              name = Z . __name__ [ 2 : ] . replace ( <str> , <str> ) year = re . search ( <str> , Z . __doc__ ) . group ( 0 ) doc = <str> % ( name , year ) self . method . addItem ( doc )  self . method . currentIndexChanged . connect ( self . calculate ) layout . addWidget ( self . method , 1 , 1 , 1 , 2 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 2 , 1 ) self . Tr = Entrada_con_unidades ( float , tolerancia = 4 ) self . Tr . valueChanged . connect ( self . calculate ) layout . addWidget ( self . Tr , 2 , 2 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 3 , 1 ) self . Pr = Entrada_con_unidades ( float ) self . Pr . valueChanged . connect ( self . calculate ) layout . addWidget ( self . Pr , 3 , 2 ) layout . addWidget ( QtWidgets . QLabel ( <str> ) , 4 , 1 ) self . Z = Entrada_con_unidades ( float , readOnly = True , decimales = 8 ) layout . addWidget ( self . Z , 4 , 2 ) self . buttonBox = QtWidgets . QDialogButtonBox ( QtWidgets . QDialogButtonBox . Ok | QtWidgets . QDialogButtonBox . Close ) self . buttonBox . accepted . connect ( self . accept ) self . buttonBox . rejected . connect ( self . reject ) layout . addWidget ( self . buttonBox , 10 , 1 , 1 , 2 )  def calculate ( self , value ) :          index = self . method . currentIndex ( ) Z = Z_list [ index ] Tr = self . Tr . value Pr = self . Pr . value if Pr and Tr is not None :              z = Z ( Tr , Pr ) self . Z . setValue ( z )    if __name__ == <str> :      import sys app = QtWidgets . QApplication ( sys . argv ) Dialog = Standing_Katz ( ) Dialog . show ( ) sys . exit ( app . exec_ ( ) )   