from unittest import TestCase from lib import unidades from lib . meos import MEoS class C3 ( MEoS ) :      name = <str> CASNumber = <str> formula = <str> synonym = <str> _refPropName = <str> _coolPropName = <str> rhoc = unidades . Density ( 220.4781 ) Tc = unidades . Temperature ( 369.89 ) Pc = unidades . Pressure ( 4251.2 , <str> ) M = 44.09562 Tt = unidades . Temperature ( 85.525 ) Tb = unidades . Temperature ( 231.036 ) f_acent = 0.1521 momentoDipolar = unidades . DipoleMoment ( 0.084 , <str> ) id = 4 _Tr = unidades . Temperature ( 354.964211 ) _rhor = unidades . Density ( 221.906745 ) _w = 0.149041513 Fi1 = { <str> : [ 1 , 3 ] , <str> : [ 0 , 1 ] , <str> : [ - 4.970583 , 4.29352 ] , <str> : [ 3.043 , 5.874 , 9.337 , 7.922 ] , <str> : [ 393 / Tc , 1237 / Tc , 1984 / Tc , 4351 / Tc ] } Fi2 = { <str> : [ 1 , 3.02939 ] , <str> : [ 0 , 1 ] , <str> : [ 31.602908195 , - 84.463284382 ] , <str> : [ ] , <str> : [ ] , <str> : [ 6.60569 , 19.1921 ] , <str> : [ 479.856 / Tc , 955.312 / Tc ] , <str> : [ 3.197 , - 8.37267 ] , <str> : [ 200.893 / Tc , 1027.29 / Tc ] } CP1 = { <str> : 4.02939 , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ 6.60569 , 19.1921 ] , <str> : [ 479.856 , 955.312 ] , <str> : [ 3.197 , - 8.37267 ] , <str> : [ 200.893 , 1027.29 ] } Fi3 = { <str> : [ 1 , 3.02256195 ] , <str> : [ 0 , 1 ] , <str> : [ 10.14394256 , - 4.79513693 ] , <str> : [ 2.90591124 , 4.68495401 , 10.2971154 , 8.08977905 ] , <str> : [ 1.0515052038 , 3.0961635368 , 5.0845797877 , 11.4329447982 ] } Fi4 = { <str> : [ 1 , 3.021394 ] , <str> : [ 0 , 1 ] , <str> : [ - 4.992402 , 4.291476 ] , <str> : [ 2.889980 , 4.474243 , 8.139803 , 10.48251 ] , <str> : [ 1.048309 , 3.053170 , 11.42280 , 5.042815 ] } CP5 = { <str> : - 5.4041204338 , <str> : [ 3.1252450099e6 , - 1.1415253638e5 , 1.4971650720e3 , 3.9215452897e-2 , - 2.1738913926e-5 , 4.8274541303e-9 ] , <str> : [ - 3 , - 2 , - 1 , 1 , 2 , 3 ] , <str> : [ 3.1907016349 ] , <str> : [ 1500 ] } lemmon = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : { <str> : 273.15 , <str> : 1 , <str> : 26148.48 , <str> : 157.9105 } , <str> : Tt , <str> : 650.0 , <str> : 1000000.0 , <str> : 20.6 , <str> : [ 0.42910051e-1 , 0.17313671e1 , - 0.24516524e1 , 0.34157466 , - 0.46047898 ] , <str> : [ 4 , 1 , 1 , 2 , 2 ] , <str> : [ 1 , 0.33 , 0.8 , 0.43 , 0.9 ] , <str> : [ - 0.66847295 , 0.20889705 , 0.19421381 , - 0.22917851 , - 0.60405866 , 0.66680654e-1 ] , <str> : [ 1 , 3 , 6 , 6 , 2 , 3 ] , <str> : [ 2.46 , 2.09 , 0.88 , 1.09 , 3.25 , 4.62 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 ] , <str> : [ 1 ] * 6 , <str> : [ 0.17534618e-1 , 0.33874242 , 0.22228777 , - 0.23219062 , - 0.92206940e-1 , - 0.47575718 , - 0.17486824e-1 ] , <str> : [ 1 , 1 , 1 , 2 , 2 , 4 , 1 ] , <str> : [ 0.76 , 2.50 , 2.75 , 3.05 , 2.55 , 8.40 , 6.75 ] , <str> : [ 0.963 , 1.977 , 1.917 , 2.307 , 2.546 , 3.28 , 14.6 ] , <str> : [ 2.33 , 3.47 , 3.15 , 3.19 , 0.92 , 18.8 , 547.8 ] , <str> : [ 0.684 , 0.829 , 1.419 , 0.817 , 1.500 , 1.426 , 1.093 ] , <str> : [ 1.283 , 0.6936 , 0.788 , 0.473 , 0.8577 , 0.271 , 0.948 ] } buecker = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi3 , <str> : <str> , <str> : Tt , <str> : 500.0 , <str> : 100000.0 , <str> : 17.41 , <str> : [ .21933784906951e1 , - .38432884604893e1 , .56820219711755 , .11235233289697 , - .13246623110619e-1 , .14587076590314e-1 , .19654925217128e-1 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 4 , 4 ] , <str> : [ 0.50 , 1.00 , 1.50 , 0.00 , 0.50 , 0.50 , 0.75 ] , <str> : [ .73811022854042 , - .85976999811290 , .14331675665712 , - .23280677426427e-1 , - .98713669399783e-4 , .45708225999895e-2 , - .27766802597861e-1 , - .10523131087952 , .97082793466314e-1 , .20710537703751e-1 , - .54720320371501e-1 , .64918009057295e-3 , .74471355056336e-2 , - .27504616979066e-3 , - .77693374632348e-2 , - .17367624932157e-2 ] , <str> : [ 1 , 1 , 2 , 7 , 8 , 8 , 1 , 2 , 3 , 3 , 4 , 5 , 5 , 10 , 2 , 6 ] , <str> : [ 2.00 , 2.50 , 2.50 , 1.50 , 1.00 , 1.50 , 4.00 , 7.00 , 3.00 , 7.00 , 3.00 , 1.00 , 6.00 , 0.00 , 6.00 , 13.00 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 16 , <str> : [ - .38248057095416e-1 , - .68797254435490e-2 ] , <str> : [ 1 , 2 ] , <str> : [ 2. , 0. ] , <str> : [ 10 , 10 ] , <str> : [ 150 , 200 ] , <str> : [ 1.16 , 1.13 ] , <str> : [ 0.85 , 1. ] } younglove = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31434 , <str> : 44.098 , <str> : 85.47 , <str> : 369.85 , <str> : 4247.66 , <str> : 5 , <str> : CP5 , <str> : { <str> : 300 , <str> : 101.325 , <str> : 14750.5 , <str> : 270.37 } , <str> : Tt , <str> : 600.0 , <str> : 100000.0 , <str> : 17.36 , <str> : [ None , - 0.2804337729e-2 , 0.1180666107e1 , - 0.3756325860e2 , 0.5624374521e4 , - 0.9354759605e6 , - 0.4557405505e-3 , 1.530044332 , - 0.1078107476e4 , 0.2218072099e6 , 0.6629473971e-4 , - 0.06199354447 , 0.6754207966e2 , 0.6472837570e-2 , - 0.6804325262 , - 0.9726162355e2 , 0.05097956459 , - 0.1004655900e-2 , 0.4363693352 , - 0.01249351947 , 0.2644755879e6 , - 0.7944237270e8 , - 0.7299920845e4 , 0.5381095003e9 , 0.3450217377e2 , 0.9936666689e4 , - 0.2166699036e1 , - 0.1612103424e6 , - 0.3633126990e-2 , 0.1108612343e2 , - 0.1330932838e-3 , - 0.3157701101e-1 , 0.1423083811e1 ] } GERG = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi2 , <str> : <str> , <str> : 85.48 , <str> : 500.0 , <str> : 100000.0 , <str> : 17.41 , <str> : [ 1.0403973107358 , - 2.8318404081403 , 0.84393809606294 , - 0.076559591850023 , 0.094697373057280 , 0.24796475497006e-3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.25 , 1.125 , 1.5 , 1.375 , 0.25 , 0.875 ] , <str> : [ 0.2774376042287 , - 0.043846000648377 , - 0.2699106478435 , - 0.069313413089860 , - 0.029632145981653 , 0.014040126751380 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.625 , 1.75 , 3.625 , 3.625 , 14.5 , 12. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } miyamoto = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi4 , <str> : <str> , <str> : Tt , <str> : 623.0 , <str> : 103000.0 , <str> : 17.41 , <str> : [ 2.698378e-1 , - 1.339252 , - 2.273858e-2 , 2.414973e-1 , - 3.321461e-2 , 2.203323e-3 , 5.935588e-5 , - 1.137457e-6 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 5 , 8 , 8 ] , <str> : [ - 0.25 , 1.5 , - 0.75 , 0 , 1.25 , 1.5 , 0.5 , 2.5 ] , <str> : [ - 2.379299 , 2.337373 , 1.242344e-3 , - 7.352787e-3 , 1.965751e-3 , - 1.402666e-1 , - 2.093360e-2 , - 2.475221e-4 , - 1.482723e-2 , - 1.303038e-2 , 3.634670e-5 ] , <str> : [ 3 , 3 , 8 , 5 , 6 , 1 , 5 , 7 , 2 , 3 , 15 ] , <str> : [ 1.5 , 1.75 , - 0.25 , 3 , 3 , 4 , 2 , - 1 , 2 , 19 , 5 ] , <str> : [ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] , <str> : [ 1 ] * 11 } shortSpan = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.31451 , <str> : CP1 , <str> : <str> , <str> : 44.097 , <str> : 369.825 , <str> : 220.48 / 44.097 , <str> : Tt , <str> : 750.0 , <str> : 100000.0 , <str> : 17.36 , <str> : [ 0.10403973e1 , - 0.28318404e1 , 0.8439381 , - 0.76559592e-1 , 0.94697373e-1 , 0.24796475e-3 ] , <str> : [ 1 , 1 , 1 , 2 , 3 , 7 ] , <str> : [ 0.25 , 1.125 , 1.5 , 1.375 , 0.25 , 0.875 ] , <str> : [ 0.2774376 , - 0.43846001e-1 , - 0.26991065 , - 0.69313413e-1 , - 0.29632146e-1 , 0.14040127e-1 ] , <str> : [ 2 , 5 , 1 , 4 , 3 , 4 ] , <str> : [ 0.625 , 1.75 , 3.625 , 3.625 , 14.5 , 12. ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 ] , <str> : [ 1 ] * 6 } sun = { <str> : <str> , <str> : <str> <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 8.314472 , <str> : Fi1 , <str> : { <str> : 273.15 , <str> : 1 , <str> : 26148.48 , <str> : 157.9105 } , <str> : Tt , <str> : 620.0 , <str> : 800000.0 , <str> : 40. , <str> : [ 9.70439249e-1 , 9.73671323e-1 , - 2.96661981 , 7.84340496e-2 , 2.78440866e-4 , - 6.77622221e-2 ] , <str> : [ 1 , 1 , 1 , 3 , 7 , 2 ] , <str> : [ 1.5 , 0.25 , 1.25 , 0.25 , 0.875 , 1.375 ] , <str> : [ - 8.56371936e-2 , 1.77467443e-1 , 3.91636018e-1 , - 8.03312946e-3 , - 0.260385851 , - 1.91104746e-2 , - 6.31331470e-2 , - 2.27769095e-2 ] , <str> : [ 1 , 1 , 2 , 5 , 1 , 1 , 4 , 2 ] , <str> : [ 0 , 2.375 , 2. , 2.125 , 3.5 , 6.5 , 4.75 , 12.5 ] , <str> : [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 ] , <str> : [ 1 ] * 8 } eq = lemmon , younglove , buecker , GERG , miyamoto , shortSpan , sun _PR = [ - 0.2124 , - 14.8203 ] _surface = { <str> : [ 0.05334 , - 0.01748 ] , <str> : [ 1.235 , 4.404 ] } _dielectric = { <str> : 2 , <str> : [ 15.850 , 0.036 ] , <str> : [ 172.75 , 505.67 ] , <str> : [ - 388.21 , - 2078.8 ] , <str> : 42.97 , <str> : 1.35 } _melting = { <str> : 2 , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : Tt , <str> : 2000.0 , <str> : Tt , <str> : 0.000172 , <str> : [ 7180e5 ] , <str> : [ 1.283 ] } _vapor_Pressure = { <str> : 3 , <str> : [ - 6.7722 , 1.6938 , - 1.3341 , - 3.1876 , 0.94937 ] , <str> : [ 1 , 1.5 , 2.2 , 4.8 , 6.2 ] } _liquid_Density = { <str> : 1 , <str> : [ 1.82205 , 0.65802 , 0.21109 , 0.083973 ] , <str> : [ 0.345 , 0.74 , 2.6 , 7.2 ] } _vapor_Density = { <str> : 2 , <str> : [ - 2.4887 , - 5.1069 , - 12.174 , - 30.495 , - 52.192 , - 134.89 ] , <str> : [ 0.3785 , 1.07 , 2.7 , 5.5 , 10. , 20. ] } visco0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 0 , <str> : 369.89 , <str> : [ 9.9301297115406 , 7.2658798096248e-1 , - 7.4692506744427e-1 , 1.0156334572774e-1 ] , <str> : [ 1 , 2 , 3 , 4 ] , <str> : 369.89 , <str> : 220.478 , <str> : [ 1.2514603628320e1 , 1.5922183980545 , - 1.7976570855233e-2 , 9.9769818327437e-2 , 1.0361434810683e-5 , - 1.4863884140117e-9 , 4.8405686431740e-10 , - 1.3029665878806e1 , 1.8734125698089 , 2.3303894474483 , 3.4631192496757 ] , <str> : [ 1 , 2 , 4 , 7 , 14 , 19 , 20 , 1 , 1 , 4 , 5 ] , <str> : [ 0 , 0 , 3 , 0 , 2 , 6 , 6 , 1 , 2 , 1 , 0 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] , <str> : [ 3.2587396573174 , 2.1724931048783e-1 ] , <str> : [ 20 , 100 ] , <str> : [ 250 , 100 ] } visco1 = { <str> : <str> , <str> : { <str> : <str> <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 1 , <str> : 44.098 , <str> : 263.88 , <str> : 0.49748 , <str> : 0.021357 , <str> : [ 0.25104574 , - 0.47271238 , 0 , 0.060836515 ] , <str> : 263.88 , <str> : [ - 19.572881 , 219.73999 , - 1015.3226 , 2471.01251 , - 3375.1717 , 2491.6597 , - 787.26086 , 14.085455 , - 0.34664158 ] , <str> : [ 0 , - 0.25 , - 0.5 , - 0.75 , - 1 , - 1.25 , - 1.5 , - 2.5 , - 5.5 ] , <str> : 369.825 , <str> : 5 * 44.098 , <str> : [ 35.9873030195 , - 180.512188564 , 87.7124888223 , - 105.773052525 , 205.319740877 , - 129.210932610 , 58.9491587759 , - 129.7400331 , 76.6280419971 , - 9.59407868475 , 21.0726986598 , - 14.3971968187 ] , <str> : [ 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 ] , <str> : [ 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , <str> : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , <str> : 1616.88405374 , <str> : 2.50053938863 , <str> : [ 0.860516059264 ] , <str> : [ - 0.5 ] } visco2 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 2 , <str> : 2 , <str> : 358.9 , <str> : 0.47 , <str> : [ 0 , 0 , 1.12 , 359. ] , <str> : [ - 14.113294896 , 968.22940153 , 13.686545032 , - 12511.628378 , 0.0168910864 , 43.527109444 , 7659.45434720 ] , <str> : 5.0 } visco3 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 4 , <str> : 0 , <str> : 369.825 , <str> : [ 12.3057 , - 42.5793 , 40.3486 ] , <str> : [ 0 , 0.25 , 0.5 ] , <str> : [ - 9.34268e-6 , - 4.93309e-5 , 0 ] , <str> : [ 9.60710e-5 , - 8.18031e-5 , 0 ] , <str> : [ 7.68800e-5 , - 4.18871e-5 , 0 ] , <str> : [ - 8.49309e-9 , - 4.91415e-10 , 0 ] , <str> : [ 2.08795e-8 , 9.21785e-10 , 0 ] , <str> : [ - 4.05944e-7 , 1.31731e-7 , 0 ] } _viscosity = visco0 , visco1 , visco2 , visco3 thermo0 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> <str> , <str> : <str> , <str> : <str> } , <str> : 1 , <str> : 369.85 , <str> : 1. , <str> : [ - 1.24778e-3 , 8.16371e-3 , 1.99374e-2 ] , <str> : [ 0 , 1 , 2 ] , <str> : 369.85 , <str> : 220.3 , <str> : 1. , <str> : [ - 3.695e-2 , 4.82798e-2 , 1.48658e-1 , - 1.35636e-1 , - 1.19986e-1 , 1.17588e-1 , 4.12431e-2 , - 4.36911e-2 , - 4.86905e-3 , 6.16079e-3 ] , <str> : [ 0 , - 1 , 0 , - 1 , 0 , - 1 , 0 , - 1 , 0 , - 1 ] , <str> : [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 ] , <str> : 3 , <str> : 0.63 , <str> : 1.239 , <str> : 1.03 , <str> : 0.194e-9 , <str> : 0.0496 , <str> : 0.716635e-9 , <str> : 554.73 } thermo1 = { <str> : <str> , <str> : { <str> : <str> , <str> : <str> <str> , <str> : <str> , <str> : <str> } , <str> : 3 , <str> : 358.9 , <str> : [ 0.1422605e1 , - 0.179749 ] , <str> : [ 0.3113890422e-2 , - 0.225755973 , 0.5674370999e2 , - 0.7840963643e-4 , 0.2291785465e-1 , - 0.2527939890e1 , - 0.6265334654e-1 , 0.2518064809e1 ] , <str> : 2 , <str> : 369.85 , <str> : 5 * 44.098 , <str> : [ 3.98 , 5.45 , 0.468067 , 1.08 ] , <str> : 8.117e-10 } _thermal = thermo0 , thermo1  class Test ( TestCase ) :      def test_lemmon ( self ) :          st = C3 ( T = 200 , rhom = 14 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 2.3795138 ) self . assertEqual ( round ( st . cvM . JmolK , 6 ) , 61.078424 ) self . assertEqual ( round ( st . cpM . JmolK , 6 ) , 93.475362 ) self . assertEqual ( round ( st . w , 4 ) , 1381.9552 ) st = C3 ( T = 300 , rhom = 12 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 19.053797 ) self . assertEqual ( round ( st . cvM . JmolK , 6 ) , 73.972542 ) self . assertEqual ( round ( st . cpM . JmolK , 5 ) , 108.61529 ) self . assertEqual ( round ( st . w , 5 ) , 958.40520 ) st = C3 ( T = 300 , rhom = 0.4 ) self . assertEqual ( round ( st . P . MPa , 8 ) , 0.84694991 ) self . assertEqual ( round ( st . cvM . JmolK , 6 ) , 69.021875 ) self . assertEqual ( round ( st . cpM . JmolK , 6 ) , 85.753997 ) self . assertEqual ( round ( st . w , 5 ) , 221.88959 ) st = C3 ( T = 400 , rhom = 5 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 6.6462840 ) self . assertEqual ( round ( st . cvM . JmolK , 6 ) , 97.017439 ) self . assertEqual ( round ( st . cpM . JmolK , 5 ) , 271.07044 ) self . assertEqual ( round ( st . w , 5 ) , 194.65847 ) st = C3 ( T = 369.9 , rhom = 5 ) self . assertEqual ( round ( st . P . MPa , 7 ) , 4.2519399 ) self . assertEqual ( round ( st . cvM . JmolK , 5 ) , 117.71621 ) self . assertEqual ( round ( st . cpM . JmolK , 2 ) , 753625.00 ) self . assertEqual ( round ( st . w , 5 ) , 130.89800 ) st = C3 ( T = - 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 6 ) , 0.070569 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 589.90 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 3 ) , 82.753 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 4 ) , 0.5298 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.428 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 2.212 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 1212.5 ) self . assertEqual ( round ( st . Gas . rho , 4 ) , 1.7270 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 516.48 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , 2.473 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.182 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 1.397 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 216.5 ) st = C3 ( T = 50 + 273.15 , x = 0.5 ) self . assertEqual ( round ( st . P . MPa , 4 ) , 1.7133 ) self . assertEqual ( round ( st . Liquido . rho , 2 ) , 448.87 ) self . assertEqual ( round ( st . Liquido . h . kJkg , 2 ) , 336.80 ) self . assertEqual ( round ( st . Liquido . s . kJkgK , 3 ) , 1.450 ) self . assertEqual ( round ( st . Liquido . cv . kJkgK , 3 ) , 1.780 ) self . assertEqual ( round ( st . Liquido . cp . kJkgK , 3 ) , 3.089 ) self . assertEqual ( round ( st . Liquido . w , 1 ) , 546.8 ) self . assertEqual ( round ( st . Gas . rho , 3 ) , 38.630 ) self . assertEqual ( round ( st . Gas . h . kJkg , 2 ) , 621.66 ) self . assertEqual ( round ( st . Gas . s . kJkgK , 3 ) , 2.332 ) self . assertEqual ( round ( st . Gas . cv . kJkgK , 3 ) , 1.753 ) self . assertEqual ( round ( st . Gas . cp . kJkgK , 3 ) , 2.499 ) self . assertEqual ( round ( st . Gas . w , 1 ) , 202.2 )  def test_younglove ( self ) :          kw = { <str> : <str> , <str> : 2 , <str> : 1 } st = C3 ( T = 90 , P = 1e4 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 728.5 ) self . assertEqual ( round ( st . rhoM , 2 ) , 16.52 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 21480 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 21480 ) self . assertEqual ( round ( st . sM . kJkmolK , 2 ) , 87.31 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 59.22 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 84.46 ) self . assertEqual ( round ( st . w , 0 ) , 2126 ) self . assertEqual ( round ( st . mu . muPas , - 1 ) , 7380 ) self . assertEqual ( round ( st . k , 3 ) , 0.210 ) st = C3 ( T = 220 , P = 5e4 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 1.233 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.02795 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 7627 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 9416 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 255.6 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 51.81 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 61.09 ) self . assertEqual ( round ( st . w , 1 ) , 216.2 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 6.14 ) self . assertEqual ( round ( st . k , 4 ) , 0.0104 ) st = C3 ( T = 600 , P = 1e5 , ** kw ) self . assertEqual ( round ( st . rho , 4 ) , 0.8852 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.02007 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 40680 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 45660 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 339.7 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 120.4 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 128.8 ) self . assertEqual ( round ( st . w , 1 ) , 347.4 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 15.8 ) self . assertEqual ( round ( st . k , 4 ) , 0.0619 ) st = C3 ( T = 300 , P = 101325 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 1.820 ) self . assertEqual ( round ( st . rhoM , 5 ) , 0.04128 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 12300 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 14750 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 270.4 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 66.24 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 75.16 ) self . assertEqual ( round ( st . w , 1 ) , 249.3 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 8.30 ) self . assertEqual ( round ( st . k , 4 ) , 0.0180 ) st = C3 ( T = 250 , P = 2e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 4.511 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.1023 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 9044 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 11000 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 251.2 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 58.32 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 69.35 ) self . assertEqual ( round ( st . w , 1 ) , 222.2 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 7.03 ) self . assertEqual ( round ( st . k , 4 ) , 0.0132 ) st = C3 ( T = 250 , P = 3e5 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 558.9 ) self . assertEqual ( round ( st . rhoM , 2 ) , 12.67 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , - 6889 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , - 6865 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 179.1 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 66.38 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 103.5 ) self . assertEqual ( round ( st . w , 0 ) , 1037 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 161 ) self . assertEqual ( round ( st . k , 3 ) , 0.118 ) st = C3 ( T = 270 , P = 4e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 8.689 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.1970 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 10000 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 12030 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 249.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 63.05 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 76.06 ) self . assertEqual ( round ( st . w , 1 ) , 222.9 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 7.67 ) self . assertEqual ( round ( st . k , 4 ) , 0.0153 ) st = C3 ( T = 480 , P = 5e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 5.620 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.1275 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 27240 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 31170 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 299.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 100.8 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 109.8 ) self . assertEqual ( round ( st . w , 1 ) , 308.7 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 13.0 ) self . assertEqual ( round ( st . k , 4 ) , 0.0427 ) st = C3 ( T = 600 , P = 6e5 , ** kw ) self . assertEqual ( round ( st . rho , 3 ) , 5.349 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.1213 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 40550 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 45500 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 324.6 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 120.5 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 129.3 ) self . assertEqual ( round ( st . w , 1 ) , 345.5 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 15.9 ) self . assertEqual ( round ( st . k , 4 ) , 0.0622 ) st = C3 ( T = 280 , P = 8e5 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 520.0 ) self . assertEqual ( round ( st . rhoM , 2 ) , 11.79 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , - 3682 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , - 3614 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 191.2 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 70.75 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 112.8 ) self . assertEqual ( round ( st . w , 1 ) , 844.0 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 118 ) self . assertEqual ( round ( st . k , 3 ) , 0.102 ) st = C3 ( T = 305 , P = 1e6 , ** kw ) self . assertEqual ( round ( st . rho , 2 ) , 21.05 ) self . assertEqual ( round ( st . rhoM , 4 ) , 0.4774 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 11720 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 13820 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 249.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 71.63 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 90.49 ) self . assertEqual ( round ( st . w , 1 ) , 218.3 ) self . assertEqual ( round ( st . mu . muPas , 2 ) , 8.94 ) self . assertEqual ( round ( st . k , 4 ) , 0.0199 ) st = C3 ( T = 330 , P = 2e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 434.4 ) self . assertEqual ( round ( st . rhoM , 3 ) , 9.851 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 2440 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 2643 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 211.3 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 79.74 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 144.7 ) self . assertEqual ( round ( st . w , 1 ) , 503.5 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 67.5 ) self . assertEqual ( round ( st . k , 3 ) , 0.078 ) st = C3 ( T = 200 , P = 3e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 618.2 ) self . assertEqual ( round ( st . rhoM , 2 ) , 14.02 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 11860 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 11640 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 156.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 61.16 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 93.14 ) self . assertEqual ( round ( st . w , 0 ) , 1379 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 295 ) self . assertEqual ( round ( st . k , 3 ) , 0.151 ) st = C3 ( T = 370 , P = 4e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 116.0 ) self . assertEqual ( round ( st . rhoM , 3 ) , 2.631 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 13410 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 14930 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 245.0 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 92.31 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 266.2 ) self . assertEqual ( round ( st . w , 1 ) , 165.4 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 14.6 ) self . assertEqual ( round ( st . k , 3 ) , 0.043 ) st = C3 ( T = 408 , P = 5e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 102.4 ) self . assertEqual ( round ( st . rhoM , 3 ) , 2.321 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 17360 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 19520 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 255.8 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 94.42 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 148.0 ) self . assertEqual ( round ( st . w , 1 ) , 209.5 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 15.0 ) self . assertEqual ( round ( st . k , 4 ) , 0.0430 ) st = C3 ( T = 200 , P = 6e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 620.6 ) self . assertEqual ( round ( st . rhoM , 2 ) , 14.07 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 11930 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 11500 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 156.5 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 61.28 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 92.80 ) self . assertEqual ( round ( st . w , 0 ) , 1399 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 303 ) self . assertEqual ( round ( st . k , 3 ) , 0.153 ) st = C3 ( T = 400 , P = 7e6 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 244.8 ) self . assertEqual ( round ( st . rhoM , 3 ) , 5.552 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 12940 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 14200 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 241.2 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 96.11 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 246.6 ) self . assertEqual ( round ( st . w , 1 ) , 208.6 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 26.4 ) self . assertEqual ( round ( st . k , 4 ) , 0.0631 ) st = C3 ( T = 530 , P = 8e6 , ** kw ) self . assertEqual ( round ( st . rho , 2 ) , 96.27 ) self . assertEqual ( round ( st . rhoM , 3 ) , 2.183 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 30030 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 33700 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 283.2 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 111.4 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 133.7 ) self . assertEqual ( round ( st . w , 1 ) , 294.2 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 17.8 ) self . assertEqual ( round ( st . k , 4 ) , 0.0595 ) st = C3 ( T = 370 , P = 1e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 402.9 ) self . assertEqual ( round ( st . rhoM , 3 ) , 9.137 ) self . assertEqual ( round ( st . uM . kJkmol , 0 ) , 6576 ) self . assertEqual ( round ( st . hM . kJkmol , 0 ) , 7671 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 223.3 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 86.71 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 142.9 ) self . assertEqual ( round ( st . w , 1 ) , 479.4 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 57.7 ) self . assertEqual ( round ( st . k , 4 ) , 0.0754 ) st = C3 ( T = 600 , P = 2e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 197.0 ) self . assertEqual ( round ( st . rhoM , 3 ) , 4.468 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 35800 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 40270 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 288.4 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 122.7 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 149.4 ) self . assertEqual ( round ( st . w , 1 ) , 377.0 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 26.6 ) self . assertEqual ( round ( st . k , 4 ) , 0.0821 ) st = C3 ( T = 150 , P = 4e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 686.4 ) self . assertEqual ( round ( st . rhoM , 2 ) , 15.56 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , - 16810 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , - 14240 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 127.7 ) self . assertEqual ( round ( st . cvM . kJkmolK , 2 ) , 60.24 ) self . assertEqual ( round ( st . cpM . kJkmolK , 2 ) , 86.48 ) self . assertEqual ( round ( st . w , 0 ) , 1869 ) self . assertEqual ( round ( st . mu . muPas , 0 ) , 891 ) self . assertEqual ( round ( st . k , 3 ) , 0.198 ) st = C3 ( T = 560 , P = 6e7 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 395.9 ) self . assertEqual ( round ( st . rhoM , 3 ) , 8.978 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 26250 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 32930 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 265.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 118.5 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 142.2 ) self . assertEqual ( round ( st . w , 1 ) , 738.4 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 58.2 ) self . assertEqual ( round ( st . k , 3 ) , 0.102 ) st = C3 ( T = 600 , P = 1e8 , ** kw ) self . assertEqual ( round ( st . rho , 1 ) , 442.5 ) self . assertEqual ( round ( st . rhoM , 2 ) , 10.03 ) self . assertEqual ( round ( st . uM . kJkmol , - 1 ) , 30040 ) self . assertEqual ( round ( st . hM . kJkmol , - 1 ) , 40000 ) self . assertEqual ( round ( st . sM . kJkmolK , 1 ) , 270.9 ) self . assertEqual ( round ( st . cvM . kJkmolK , 1 ) , 125.9 ) self . assertEqual ( round ( st . cpM . kJkmolK , 1 ) , 145.5 ) self . assertEqual ( round ( st . w , 1 ) , 945.6 ) self . assertEqual ( round ( st . mu . muPas , 1 ) , 71.3 ) self . assertEqual ( round ( st . k , 3 ) , 0.121 )  def test_shortSpan ( self ) :          st = C3 ( T = 700 , rho = 200 , eq = <str> ) self . assertEqual ( round ( st . cp0 . kJkgK , 3 ) , 3.235 ) self . assertEqual ( round ( st . P . MPa , 3 ) , 27.175 ) self . assertEqual ( round ( st . cp . kJkgK , 4 ) , 3.5658 ) st2 = C3 ( T = 750 , rho = 100 , eq = <str> ) self . assertEqual ( round ( st2 . h . kJkg - st . h . kJkg , 2 ) , 212.66 ) self . assertEqual ( round ( st2 . s . kJkgK - st . s . kJkgK , 5 ) , 0.41879 )  def test_Vogel ( self ) :          self . assertEqual ( round ( C3 ( T = 90 , rho = 730 ) . mu . muPas , 3 ) , 8010.968 ) self . assertEqual ( round ( C3 ( T = 300 , rho = 1 ) . mu . muPas , 6 ) , 8.174374 ) self . assertEqual ( round ( C3 ( T = 300 , rho = 20 ) . mu . muPas , 6 ) , 8.230795 ) self . assertEqual ( round ( C3 ( T = 300 , rho = 490 ) . mu . muPas , 5 ) , 95.63100 ) self . assertEqual ( round ( C3 ( T = 300 , rho = 600 ) . mu . muPas , 4 ) , 223.6002 ) self . assertEqual ( round ( C3 ( T = 369.89 , rho = 220.478 ) . mu . muPas , 5 ) , 25.70313 ) self . assertEqual ( round ( C3 ( T = 375 , rho = 1 ) . mu . muPas , 5 ) , 10.15009 ) self . assertEqual ( round ( C3 ( T = 375 , rho = 100 ) . mu . muPas , 5 ) , 13.07220 ) self . assertEqual ( round ( C3 ( T = 375 , rho = 550 ) . mu . muPas , 4 ) , 146.8987 ) self . assertEqual ( round ( C3 ( T = 500 , rho = 1 ) . mu . muPas , 5 ) , 13.26285 ) self . assertEqual ( round ( C3 ( T = 500 , rho = 100 ) . mu . muPas , 5 ) , 16.85501 ) self . assertEqual ( round ( C3 ( T = 500 , rho = 450 ) . mu . muPas , 5 ) , 77.67365 ) self . assertEqual ( round ( C3 ( T = 650 , rho = 1 ) . mu . muPas , 5 ) , 16.63508 ) self . assertEqual ( round ( C3 ( T = 650 , rho = 100 ) . mu . muPas , 5 ) , 20.72894 ) self . assertEqual ( round ( C3 ( T = 650 , rho = 400 ) . mu . muPas , 5 ) , 62.40780 )  def test_Vogel2 ( self ) :          kw = { <str> : <str> , <str> : 1 } self . assertEqual ( round ( C3 ( T = 90 , P = 1e4 , ** kw ) . mu . muPas , 0 ) , 7386 ) self . assertEqual ( round ( C3 ( T = 100 , P = 1e6 , ** kw ) . mu . muPas , 0 ) , 3823 ) self . assertEqual ( round ( C3 ( T = 110 , P = 1e8 , ** kw ) . mu . muPas , 0 ) , 5597 ) self . assertEqual ( round ( C3 ( T = 140 , P = 1e6 , ** kw ) . mu . muPas , 1 ) , 834.5 ) self . assertEqual ( round ( C3 ( T = 160 , P = 1e4 , ** kw ) . mu . muPas , 1 ) , 537.6 ) self . assertEqual ( round ( C3 ( T = 200 , P = 5e5 , ** kw ) . mu . muPas , 1 ) , 290.2 ) self . assertEqual ( round ( C3 ( T = 260 , P = 1e4 , ** kw ) . mu . muPas , 3 ) , 7.136 ) self . assertEqual ( round ( C3 ( T = 300 , P = 3e6 , ** kw ) . mu . muPas , 2 ) , 99.38 ) self . assertEqual ( round ( C3 ( T = 340 , P = 1e6 , ** kw ) . mu . muPas , 3 ) , 9.415 ) self . assertEqual ( round ( C3 ( T = 400 , P = 1e8 , ** kw ) . mu . muPas , 1 ) , 138.5 ) self . assertEqual ( round ( C3 ( T = 440 , P = 6e5 , ** kw ) . mu . muPas , 2 ) , 11.92 ) self . assertEqual ( round ( C3 ( T = 500 , P = 4e6 , ** kw ) . mu . muPas , 2 ) , 14.63 ) self . assertEqual ( round ( C3 ( T = 600 , P = 1e8 , ** kw ) . mu . muPas , 2 ) , 73.93 )    