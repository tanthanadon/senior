import sys try :      import refprop  except :      pass  from lib import unidades , mEoS from lib . mezcla import mix_unitmassflow , mix_unitmolarflow from lib . thermo import ThermoRefProp __all__ = { } noIds = [ ] for cmp in mEoS . __all__ :      if cmp . id and cmp . _refPropName :          __all__ [ cmp . id ] = cmp . _refPropName  elif cmp . _refPropName :          noIds . append ( cmp . _refPropName )   class RefProp ( ThermoRefProp ) :      kwargs = { <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : 0.0 , <str> : 0.0 , <str> : None , <str> : None , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : 0.0 , <str> : False , <str> : False , <str> : False , <str> : <str> , <str> : 1 , <str> : [ 1 ] , <str> : 0 , <str> : 0 , <str> : 273 , <str> : 1e5 , <str> : <str> , <str> : <str> , <str> : <str> } __doi__ = [ { <str> : <str> , <str> : <str> <str> <str> <str> , <str> : <str> , <str> : <str> } ] def _new ( self , ** kw ) :          return self . __class__ ( ids = self . kwargs [ <str> ] , ** kw )  @ property def calculable ( self ) :          self . _multicomponent = False if len ( self . kwargs [ <str> ] ) > 1 :              self . _multicomponent = True  REFPROP_available = True for id in self . kwargs [ <str> ] :              if id not in __all__ and id not in noIds :                  REFPROP_available = False if not REFPROP_available :                      raise ( ValueError )    self . _mix = 0 if len ( self . kwargs [ <str> ] ) == len ( self . kwargs [ <str> ] ) :              self . _mix = 1  elif len ( self . kwargs [ <str> ] ) == len ( self . kwargs [ <str> ] ) :              self . _mix = 2  elif len ( self . kwargs [ <str> ] ) == len ( self . kwargs [ <str> ] ) :              self . _mix = 3  elif len ( self . kwargs [ <str> ] ) == len ( self . kwargs [ <str> ] ) :              self . _mix = 4  if self . _multicomponent :              if self . kwargs [ <str> ] and self . _mix :                  self . _definition = True  else :                  self . _definition = False   else :              self . _definition = True  if self . kwargs [ <str> ] != RefProp . kwargs [ <str> ] :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if self . kwargs [ <str> ] != RefProp . kwargs [ <str> ] :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  if self . kwargs [ <str> ] != RefProp . kwargs [ <str> ] :              self . kwargs [ <str> ] = self . kwargs [ <str> ]  self . _thermo = <str> for def_ in [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] :              if self . kwargs [ def_ [ 0 ] ] != RefProp . kwargs [ def_ [ 0 ] ] and self . kwargs [ def_ [ 1 ] ] != RefProp . kwargs [ def_ [ 1 ] ] :                  self . _thermo = def_   return self . _definition and self . _thermo  def args ( self ) :          x = self . _x ( ) var1 = self . kwargs [ self . _thermo [ 0 ] ] var2 = self . kwargs [ self . _thermo [ 1 ] ] if self . _thermo [ 0 ] == <str> :              var1 /= 1000.  if self . _thermo [ 0 ] in ( <str> , <str> , <str> ) :              var1 /= 1000. * self . M  if self . _thermo [ 1 ] == <str> :              var2 /= 1000.  if self . _thermo [ 1 ] in ( <str> , <str> , <str> ) :              var2 /= 1000. * self . M  return self . _thermo , var1 , var2 , x  def _name ( self ) :          name = [ ] for fld in self . kwargs [ <str> ] :              if fld in __all__ :                  name . append ( __all__ [ fld ] )  elif fld in noIds :                  name . append ( fld )   return name  def _x ( self ) :          if self . _mix == 1 :              x = self . kwargs [ <str> ]  elif self . _mix == 2 :              x = refprop . xmole ( self . kwargs [ <str> ] ) [ <str> ]  elif self . _mix == 3 :              kw = mix_unitmolarflow ( self . kwargs [ <str> ] ) x = kw [ <str> ]  elif self . _mix == 3 :              kw = mix_unitmassflow ( self . kwargs [ <str> ] ) x = kw [ <str> ]  else :              x = [ 1 ]  return x  def calculo ( self ) :          preos = self . kwargs [ <str> ] aga = self . kwargs [ <str> ] gerg = self . kwargs [ <str> ] x = self . _x ( ) fluido = self . _name ( ) kwmod = [ self . kwargs [ k ] for k in ( <str> , <str> , <str> ) ] refprop . setmod ( * kwmod ) if gerg :              refprop . gerg04 ( ixflag = 1 )  refprop . setup ( <str> , fluido ) if preos :              refprop . preos ( ixflag = 2 )  elif aga :              refprop . setaga ( )  kwref = { k : self . kwargs [ k ] for k in ( <str> , <str> , <str> , <str> , <str> , <str> , <str> ) } refprop . setref ( ** kwref ) m = refprop . wmol ( x ) [ <str> ] self . M = unidades . Dimensionless ( m ) crit = refprop . critp ( x ) self . Pc = unidades . Pressure ( crit [ <str> ] , <str> ) self . Tc = unidades . Temperature ( crit [ <str> ] ) self . rhoc = unidades . Density ( crit [ <str> ] * self . M ) args = self . args ( ) flash = refprop . flsh ( * args ) if <str> in flash . keys ( ) :              x = flash [ <str> ]  elif <str> in flash . keys ( ) :              x = refprop . flsh ( <str> , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) [ <str> ]  elif <str> in flash . keys ( ) :              x = refprop . flsh ( <str> , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) [ <str> ]  if 0 < x < 1 :              region = 4  else :              region = 1  if x < 0 :              x = 0  elif x > 1 :              x = 1  self . x = unidades . Dimensionless ( x ) self . T = unidades . Temperature ( flash [ <str> ] ) self . P = unidades . Pressure ( flash [ <str> ] , <str> ) self . Tr = unidades . Dimensionless ( self . T / self . Tc ) self . Pr = unidades . Dimensionless ( self . P / self . Pc ) self . rho = unidades . Density ( flash [ <str> ] * self . M ) self . v = unidades . SpecificVolume ( 1. / self . rho ) self . phase = self . getphase ( Tc = self . Tc , Pc = self . Pc , T = self . T , P = self . Pc , x = self . x , region = region ) if flash [ <str> ] == 1 :              name = refprop . name ( flash [ <str> ] ) self . name = name [ <str> ] self . synonim = name [ <str> ] self . CAS = name [ <str> ] info = refprop . info ( flash [ <str> ] ) self . R = unidades . SpecificHeat ( info [ <str> ] / self . M ) self . Tt = unidades . Temperature ( info [ <str> ] ) self . Tb = unidades . Temperature ( info [ <str> ] ) self . f_accent = unidades . Dimensionless ( info [ <str> ] ) self . momentoDipolar = unidades . DipoleMoment ( info [ <str> ] , <str> ) self . _doc = { } for htype in [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] :                  self . _doc [ htype ] = refprop . getmod ( flash [ <str> ] , htype ) [ <str> ]   else :              self . name = <str> self . synonim = <str> self . CAS = <str> rmix = refprop . rmix2 ( flash [ <str> ] ) self . R = unidades . SpecificHeat ( rmix [ <str> ] / self . M ) self . Tt = unidades . Temperature ( None ) self . Tb = unidades . Temperature ( None ) self . f_accent = unidades . Dimensionless ( None ) self . momentoDipolar = unidades . DipoleMoment ( None ) self . _doc = { }  self . _cp0 ( flash ) self . Liquido = ThermoRefProp ( ) self . Gas = ThermoRefProp ( ) if self . x == 0 :              self . fill ( self . Liquido , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . fill ( self , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . fillNone ( self . Gas )  elif self . x == 1 :              self . fill ( self . Gas , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . fill ( self , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . fillNone ( self . Liquido )  else :              self . fill ( self . Liquido , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . fill ( self . Gas , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . u = unidades . Enthalpy ( flash [ <str> ] / self . M , <str> ) self . h = unidades . Enthalpy ( flash [ <str> ] / self . M , <str> ) self . s = unidades . SpecificHeat ( flash [ <str> ] / self . M , <str> ) self . a = unidades . Enthalpy ( self . u - self . T * self . s ) self . g = unidades . Enthalpy ( self . h - self . T * self . s )  if self . x < 1 and self . T <= self . Tc :              surten = refprop . surten ( flash [ <str> ] , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . sigma = unidades . Tension ( surten [ <str> ] )  else :              self . sigma = unidades . Tension ( None )  if 0 < self . x < 1 :              self . Hvap = unidades . Enthalpy ( self . Gas . h - self . Liquido . h ) self . Svap = unidades . SpecificHeat ( self . Gas . s - self . Liquido . s ) self . K = [ ] for x , y in zip ( self . Liquido . fraccion , self . Gas . fraccion ) :                  self . K . append ( unidades . Dimensionless ( y / x ) )   else :              self . Hvap = unidades . Enthalpy ( None ) self . Svap = unidades . SpecificHeat ( None ) self . K = [ unidades . Dimensionless ( 1 ) ] * flash [ <str> ]  if sys . platform != <str> :              excess = refprop . excess ( flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . vE = unidades . Volume ( excess [ <str> ] / self . M ) self . uE = unidades . Enthalpy ( excess [ <str> ] / self . M , <str> ) self . hE = unidades . Enthalpy ( excess [ <str> ] / self . M , <str> ) self . sE = unidades . SpecificHeat ( excess [ <str> ] / self . M , <str> ) self . aE = unidades . Enthalpy ( excess [ <str> ] / self . M , <str> ) self . gE = unidades . Enthalpy ( excess [ <str> ] / self . M , <str> )  else :              self . vE = unidades . Volume ( 0 ) self . uE = unidades . Enthalpy ( 0 ) self . hE = unidades . Enthalpy ( 0 ) self . sE = unidades . SpecificHeat ( 0 ) self . aE = unidades . Enthalpy ( 0 ) self . gE = unidades . Enthalpy ( 0 )  self . csat = [ ] self . dpdt_sat = [ ] self . cv2p = [ ] for i in range ( 1 , flash [ <str> ] + 1 ) :              dat = refprop . dptsatk ( i , flash [ <str> ] , kph = 2 ) self . csat . append ( unidades . SpecificHeat ( dat [ <str> ] / self . M , <str> ) ) self . dpdt_sat . append ( unidades . PressureTemperature ( dat [ <str> ] , <str> ) ) cv2 = refprop . cv2pk ( i , flash [ <str> ] , flash [ <str> ] ) self . cv2p . append ( unidades . SpecificHeat ( cv2 [ <str> ] / self . M , <str> ) )   def _cp0 ( self , flash ) :          <str> <str> cp0 = refprop . therm0 ( flash [ <str> ] , flash [ <str> ] , flash [ <str> ] ) self . v0 = unidades . SpecificVolume ( self . R * self . T / self . P . kPa ) self . rho0 = unidades . Density ( 1 / self . v0 ) self . P0 = unidades . Pressure ( cp0 [ <str> ] , <str> ) self . P_Pideal = unidades . Pressure ( self . P - self . P0 ) self . h0 = unidades . Enthalpy ( cp0 [ <str> ] / self . M , <str> ) self . u0 = unidades . Enthalpy ( cp0 [ <str> ] / self . M , <str> ) self . s0 = unidades . SpecificHeat ( cp0 [ <str> ] / self . M , <str> ) self . a0 = unidades . Enthalpy ( cp0 [ <str> ] / self . M , <str> ) self . g0 = unidades . Enthalpy ( cp0 [ <str> ] / self . M , <str> ) self . w0 = unidades . Speed ( cp0 [ <str> ] ) cp0 = refprop . therm0 ( float ( self . T ) , self . rho0 / self . M , flash [ <str> ] ) self . cp0 = unidades . SpecificHeat ( cp0 [ <str> ] / self . M , <str> ) self . cv0 = unidades . SpecificHeat ( cp0 [ <str> ] / self . M , <str> ) self . cp0_cv = unidades . Dimensionless ( self . cp0 / self . cv0 ) self . gamma0 = self . cp0_cv self . rhoM0 = unidades . MolarDensity ( self . rho0 / self . M ) self . hM0 = unidades . MolarEnthalpy ( self . h0 * self . M ) self . uM0 = unidades . MolarEnthalpy ( self . u0 * self . M ) self . sM0 = unidades . MolarSpecificHeat ( self . s0 * self . M ) self . aM0 = unidades . MolarEnthalpy ( self . a0 * self . M ) self . gM0 = unidades . MolarEnthalpy ( self . g0 * self . M ) self . cpM0 = unidades . MolarSpecificHeat ( self . cp0 * self . M ) self . cvM0 = unidades . MolarSpecificHeat ( self . cv0 * self . M )  def fill ( self , fase , T , rho , x ) :          if sum ( x ) != 1 :              x = [ round ( xi , 10 ) for xi in x ]  mol = refprop . wmol ( x ) thermo = refprop . therm2 ( T , rho , x ) thermo3 = refprop . therm3 ( T , rho , x ) fase . _bool = True fase . M = unidades . Dimensionless ( mol [ <str> ] ) fase . rho = unidades . Density ( rho * fase . M ) fase . v = unidades . SpecificVolume ( 1. / fase . rho ) fase . Z = unidades . Dimensionless ( thermo [ <str> ] ) fase . u = unidades . Enthalpy ( thermo [ <str> ] / fase . M , <str> ) fase . h = unidades . Enthalpy ( thermo [ <str> ] / fase . M , <str> ) fase . s = unidades . SpecificHeat ( thermo [ <str> ] / fase . M , <str> ) fase . a = unidades . Enthalpy ( thermo [ <str> ] / fase . M , <str> ) fase . g = unidades . Enthalpy ( thermo [ <str> ] / fase . M , <str> ) fase . cv = unidades . SpecificHeat ( thermo [ <str> ] / fase . M , <str> ) fase . cp = unidades . SpecificHeat ( thermo [ <str> ] / fase . M , <str> ) fase . cp_cv = unidades . Dimensionless ( fase . cp / fase . cv ) fase . gamma = fase . cp_cv fase . w = unidades . Speed ( thermo [ <str> ] ) fase . rhoM = unidades . MolarDensity ( fase . rho / self . M ) fase . hM = unidades . MolarEnthalpy ( fase . h * self . M ) fase . sM = unidades . MolarSpecificHeat ( fase . s * self . M ) fase . uM = unidades . MolarEnthalpy ( fase . u * self . M ) fase . aM = unidades . MolarEnthalpy ( fase . a * self . M ) fase . gM = unidades . MolarEnthalpy ( fase . g * self . M ) fase . cvM = unidades . MolarSpecificHeat ( fase . cv * self . M ) fase . cpM = unidades . MolarSpecificHeat ( fase . cp * self . M ) residual = refprop . residual ( T , rho , x ) fase . pr = unidades . Pressure ( residual [ <str> ] , <str> ) fase . ur = unidades . Enthalpy ( residual [ <str> ] / fase . M , <str> ) fase . hr = unidades . Enthalpy ( residual [ <str> ] / fase . M , <str> ) fase . sr = unidades . SpecificHeat ( residual [ <str> ] / fase . M , <str> ) fase . ar = unidades . Enthalpy ( residual [ <str> ] / fase . M , <str> ) fase . gr = unidades . Enthalpy ( residual [ <str> ] / fase . M , <str> ) fase . cvr = unidades . SpecificHeat ( residual [ <str> ] / fase . M , <str> ) fase . cpr = unidades . SpecificHeat ( residual [ <str> ] / fase . M , <str> ) fase . alfav = unidades . InvTemperature ( thermo [ <str> ] ) fase . kappa = unidades . InvPressure ( thermo [ <str> ] , <str> ) fase . kappas = unidades . InvPressure ( thermo3 [ <str> ] , <str> ) fase . alfap = unidades . Density ( fase . alfav / self . P / fase . kappa ) fase . deltat = unidades . EnthalpyPressure ( thermo3 [ <str> ] / fase . M , <str> ) fase . joule = unidades . TemperaturePressure ( thermo [ <str> ] , <str> ) fase . betas = unidades . TemperaturePressure ( self . derivative ( <str> , <str> , <str> , fase ) ) fase . betap = unidades . Density ( - 1 / self . P * self . derivative ( <str> , <str> , <str> , fase ) ) fase . Kt = unidades . Pressure ( thermo3 [ <str> ] , <str> ) fase . Ks = unidades . Pressure ( thermo3 [ <str> ] , <str> ) fase . kt = unidades . Dimensionless ( thermo3 [ <str> ] ) fase . ks = unidades . Dimensionless ( thermo3 [ <str> ] ) dh = refprop . dhd1 ( T , rho , x ) fase . dhdT_rho = unidades . SpecificHeat ( dh [ <str> ] / fase . M , <str> ) fase . dhdT_P = unidades . SpecificHeat ( dh [ <str> ] / fase . M , <str> ) fase . dhdP_T = unidades . EnthalpyPressure ( dh [ <str> ] / fase . M , <str> ) fase . dhdP_rho = unidades . EnthalpyPressure ( dh [ <str> ] / fase . M , <str> ) fase . dhdrho_T = unidades . EnthalpyDensity ( dh [ <str> ] / fase . M ** 2 , <str> ) fase . dhdrho_P = unidades . EnthalpyDensity ( dh [ <str> ] / fase . M ** 2 , <str> ) fase . dpdT_rho = unidades . PressureTemperature ( thermo [ <str> ] , <str> ) fase . dpdrho_T = unidades . PressureDensity ( thermo [ <str> ] / fase . M , <str> ) fase . d2pdrho2 = unidades . Dimensionless ( thermo [ <str> ] / fase . M ** 2 / 1000 ) fase . drhodP_T = unidades . DensityPressure ( thermo [ <str> ] * fase . M , <str> ) fase . drhodT_P = unidades . DensityTemperature ( thermo [ <str> ] * fase . M ) fase . Gruneisen = unidades . Dimensionless ( fase . v / fase . cv * fase . dpdT_rho ) fase . Z_rho = unidades . SpecificVolume ( ( fase . Z - 1 ) / fase . rho ) fase . IntP = unidades . Pressure ( thermo3 [ <str> ] , <str> ) fase . hInput = unidades . Enthalpy ( thermo3 [ <str> ] / fase . M , <str> ) fase . invT = unidades . InvTemperature ( - 1 / self . T ) fpv = refprop . fpv ( T , rho , self . P . kPa , x ) [ <str> ] fase . fpv = unidades . Dimensionless ( fpv ) chempot = refprop . chempot ( T , rho , x ) [ <str> ] fase . chempot = [ unidades . Enthalpy ( c / fase . M ) for c in chempot ] fi = refprop . fugcof ( T , rho , x ) [ <str> ] fase . fi = [ unidades . Dimensionless ( f ) for f in fi ] f = refprop . fgcty ( T , rho , x ) [ <str> ] fase . f = [ unidades . Pressure ( f_i , <str> ) for f_i in f ] b = refprop . virb ( T , x ) [ <str> ] fase . virialB = unidades . SpecificVolume ( b / self . M ) c = refprop . virc ( T , x ) [ <str> ] fase . virialC = unidades . SpecificVolume_square ( c / self . M ** 2 ) if sys . platform != <str> :              d = refprop . vird ( T , x ) [ <str> ] fase . virialD = unidades . Dimensionless ( d / self . M ** 3 )  else :              fase . virialD = unidades . Dimensionless ( 0 )  ba = refprop . virba ( T , x ) [ <str> ] fase . virialBa = unidades . SpecificVolume ( ba / self . M ) ca = refprop . virca ( T , x ) [ <str> ] fase . virialCa = unidades . SpecificVolume_square ( ca / self . M ** 2 ) dcdt = refprop . dcdt ( T , x ) [ <str> ] fase . dCdt = unidades . Dimensionless ( dcdt / self . M ** 2 ) dcdt2 = refprop . dcdt2 ( T , x ) [ <str> ] fase . dCdt2 = unidades . Dimensionless ( dcdt2 / self . M ** 2 ) dbdt = refprop . dbdt ( T , x ) [ <str> ] fase . dBdt = unidades . Dimensionless ( dbdt / self . M ) b12 = refprop . b12 ( T , x ) [ <str> ] fase . b12 = unidades . SpecificVolume ( b12 * fase . M ) try :              cstar = refprop . cstar ( T , self . P . kPa , 0 , x ) [ <str> ] fase . cstar = unidades . Dimensionless ( cstar )  except refprop . RefpropdllError :              fase . cstar = unidades . Dimensionless ( None )  fase . fraccion = [ unidades . Dimensionless ( xi ) for xi in x ] xg = refprop . xmass ( x ) [ <str> ] fase . fraccion_masica = [ unidades . Dimensionless ( xi ) for xi in xg ] transport = refprop . trnprp ( T , rho , x ) fase . mu = unidades . Viscosity ( transport [ <str> ] , <str> ) fase . nu = unidades . Diffusivity ( fase . mu / fase . rho ) fase . k = unidades . ThermalConductivity ( transport [ <str> ] ) fase . alfa = unidades . Diffusivity ( fase . k / fase . rho / fase . cp ) fase . Prandt = unidades . Dimensionless ( fase . mu * fase . cp / fase . k ) dielec = refprop . dielec ( T , rho , x ) fase . epsilon = unidades . Dimensionless ( dielec [ <str> ] )   if __name__ == <str> :      from PyQt5 import QtWidgets app = QtWidgets . QApplication ( sys . argv ) fluido = RefProp ( ids = [ 62 ] , T = 300 , P = 1e6 )   