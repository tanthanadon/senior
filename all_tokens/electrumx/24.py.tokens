import hashlib import hmac from electrumx . lib . util import bytes_to_int , int_to_bytes , hex_to_bytes _sha256 = hashlib . sha256 _sha512 = hashlib . sha512 _new_hash = hashlib . new _new_hmac = hmac . new HASHX_LEN = 11 def sha256 ( x ) :      return _sha256 ( x ) . digest ( )  def ripemd160 ( x ) :      h = _new_hash ( <str> ) h . update ( x ) return h . digest ( )  def double_sha256 ( x ) :      return sha256 ( sha256 ( x ) )  def hmac_sha512 ( key , msg ) :      return _new_hmac ( key , msg , _sha512 ) . digest ( )  def hash160 ( x ) :      return ripemd160 ( sha256 ( x ) )  def hash_to_hex_str ( x ) :      return bytes ( reversed ( x ) ) . hex ( )  def hex_str_to_hash ( x ) :      return bytes ( reversed ( hex_to_bytes ( x ) ) )  class Base58Error ( Exception ) :       class Base58 ( object ) :      chars = <str> assert len ( chars ) == 58 cmap = { c : n for n , c in enumerate ( chars ) } @ staticmethod def char_value ( c ) :          val = Base58 . cmap . get ( c ) if val is None :              raise Base58Error ( <str> . format ( c ) )  return val  @ staticmethod def decode ( txt ) :          if not isinstance ( txt , str ) :              raise TypeError ( <str> )  if not txt :              raise Base58Error ( <str> )  value = 0 for c in txt :              value = value * 58 + Base58 . char_value ( c )  result = int_to_bytes ( value ) count = 0 for c in txt :              if c != <str> :                  break  count += 1  if count :              result = bytes ( count ) + result  return result  @ staticmethod def encode ( be_bytes ) :          value = bytes_to_int ( be_bytes ) txt = <str> while value :              value , mod = divmod ( value , 58 ) txt += Base58 . chars [ mod ]  for byte in be_bytes :              if byte != 0 :                  break  txt += <str>  return txt [ : : - 1 ]  @ staticmethod def decode_check ( txt , * , hash_fn = double_sha256 ) :          be_bytes = Base58 . decode ( txt ) result , check = be_bytes [ : - 4 ] , be_bytes [ - 4 : ] if check != hash_fn ( result ) [ : 4 ] :              raise Base58Error ( <str> . format ( txt ) )  return result  @ staticmethod def encode_check ( payload , * , hash_fn = double_sha256 ) :          be_bytes = payload + hash_fn ( payload ) [ : 4 ] return Base58 . encode ( be_bytes )    