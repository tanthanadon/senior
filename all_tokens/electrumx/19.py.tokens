import os import random import re import pytest from aiorpcx import Service , NetAddress from electrumx . server . env import Env , ServiceError import electrumx . lib . coins as lib_coins BASE_DAEMON_URL = <str> BASE_DB_DIR = <str> base_environ = { <str> : BASE_DB_DIR , <str> : BASE_DAEMON_URL , <str> : <str> , } def setup_base_env ( ) :      os . environ . clear ( ) os . environ . update ( base_environ )  def assert_required ( env_var ) :      setup_base_env ( ) os . environ . pop ( env_var , None ) with pytest . raises ( Env . Error ) :          Env ( )   def assert_default ( env_var , attr , default ) :      setup_base_env ( ) e = Env ( ) assert getattr ( e , attr ) == default os . environ [ env_var ] = <str> e = Env ( ) assert getattr ( e , attr ) == <str>  def assert_integer ( env_var , attr , default = <str> ) :      setup_base_env ( ) if default != <str> :          e = Env ( ) assert getattr ( e , attr ) == default  value = random . randrange ( 5 , 2000 ) os . environ [ env_var ] = str ( value ) + <str> with pytest . raises ( Env . Error ) :          Env ( )  os . environ [ env_var ] = str ( value ) e = Env ( ) assert getattr ( e , attr ) == value  def assert_boolean ( env_var , attr , default ) :      e = Env ( ) assert getattr ( e , attr ) == default os . environ [ env_var ] = <str> e = Env ( ) assert getattr ( e , attr ) == True os . environ [ env_var ] = <str> e = Env ( ) assert getattr ( e , attr ) == False  def test_minimal ( ) :      setup_base_env ( ) Env ( )  def test_DB_DIRECTORY ( ) :      assert_required ( <str> ) setup_base_env ( ) e = Env ( ) assert e . db_dir == BASE_DB_DIR  def test_DAEMON_URL ( ) :      assert_required ( <str> ) setup_base_env ( ) e = Env ( ) assert e . daemon_url == BASE_DAEMON_URL  def test_COIN_NET ( ) :      setup_base_env ( ) e = Env ( ) assert e . coin == lib_coins . BitcoinSV os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . BitcoinSVTestnet os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . BitcoinSVTestnet os . environ . pop ( <str> ) os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . Litecoin os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . LitecoinTestnet os . environ . pop ( <str> ) os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . BitcoinGold os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . BitcoinGoldTestnet os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . BitcoinGoldRegtest os . environ . pop ( <str> ) os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . Decred os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . DecredTestnet os . environ . pop ( <str> ) os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . Bitg os . environ [ <str> ] = <str> e = Env ( ) os . environ . pop ( <str> ) os . environ [ <str> ] = <str> os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . Pivx os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . PivxTestnet os . environ . pop ( <str> ) os . environ [ <str> ] = <str> os . environ [ <str> ] = <str> e = Env ( ) assert e . coin == lib_coins . TokenPay  def test_CACHE_MB ( ) :      assert_integer ( <str> , <str> , 1200 )  def test_SERVICES ( ) :      setup_base_env ( ) e = Env ( ) assert e . services == [ ] os . environ [ <str> ] = <str> e = Env ( ) assert e . services == [ Service ( <str> , NetAddress ( <str> , 1234 ) ) , Service ( <str> , NetAddress ( <str> , 567 ) ) , Service ( <str> , NetAddress ( <str> , 700 ) ) , ]  def test_SERVICES_default_rpc ( ) :      os . environ [ <str> ] = <str> e = Env ( ) assert e . services [ 0 ] . host == <str> assert e . services [ 0 ] . port == 8000 os . environ [ <str> ] = <str> e = Env ( ) assert e . services [ 0 ] . host == <str> assert e . services [ 0 ] . port == 800 os . environ [ <str> ] = <str> e = Env ( ) assert e . services [ 0 ] . host == <str> assert e . services [ 0 ] . port == 8000  def test_bad_SERVICES ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :           Env ( )  assert <str> in str ( err . value ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value )  def test_onion_SERVICES ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value )  def test_duplicate_SERVICES ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> e = Env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value )  @ pytest . mark . parametrize ( <str> , ( <str> , <str> , ) ) def test_ssl_SERVICES ( service ) :      setup_base_env ( ) os . environ [ <str> ] = service with pytest . raises ( Env . Error ) as err :          Env ( )  assert <str> in str ( err . value ) os . environ [ <str> ] = <str> with pytest . raises ( Env . Error ) as err :          Env ( )  assert <str> in str ( err . value ) os . environ [ <str> ] = <str> Env ( ) setup_base_env ( ) os . environ [ <str> ] = service os . environ [ <str> ] = <str> with pytest . raises ( Env . Error ) as err :          Env ( )  assert <str> in str ( err . value )  def test_REPORT_SERVICES ( ) :      setup_base_env ( ) e = Env ( ) assert e . report_services == [ ] os . environ [ <str> ] = <str> e = Env ( ) assert e . report_services == [ Service ( <str> , NetAddress ( <str> , 1234 ) ) , Service ( <str> , NetAddress ( <str> , 567 ) ) , ]  def test_REPORT_SERVICES_rpc ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value )  def test_REPORT_SERVICES_private ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value ) os . environ [ <str> ] = <str> Env ( )  def test_REPORT_SERVICES_localhost ( ) :      setup_base_env ( ) os . environ [ <str> ] = <str> with pytest . raises ( ServiceError ) as err :          Env ( )  assert <str> in str ( err . value )  def test_REORG_LIMIT ( ) :      assert_integer ( <str> , <str> , lib_coins . BitcoinSV . REORG_LIMIT )  def test_COST_HARD_LIMIT ( ) :      assert_integer ( <str> , <str> , 10000 )  def test_COST_SOFT_LIMIT ( ) :      assert_integer ( <str> , <str> , 1000 )  def test_INITIAL_CONCURRENT ( ) :      assert_integer ( <str> , <str> , 10 )  def test_REQUEST_SLEEP ( ) :      assert_integer ( <str> , <str> , 2500 )  def test_BANDWIDTH_UNIT_COST ( ) :      assert_integer ( <str> , <str> , 5000 )  def test_DONATION_ADDRESS ( ) :      assert_default ( <str> , <str> , <str> )  def test_DB_ENGINE ( ) :      assert_default ( <str> , <str> , <str> )  def test_MAX_SEND ( ) :      assert_integer ( <str> , <str> , 1000000 )  def test_LOG_LEVEL ( ) :      setup_base_env ( ) e = Env ( ) assert e . log_level == <str> os . environ [ <str> ] = <str> e = Env ( ) assert e . log_level == <str>  def test_MAX_SESSIONS ( ) :      too_big = 1000000 os . environ [ <str> ] = str ( too_big ) e = Env ( ) assert e . max_sessions < too_big  def test_REQUEST_TIMEOUT ( ) :      assert_integer ( <str> , <str> , 30 )  def test_SESSION_TIMEOUT ( ) :      assert_integer ( <str> , <str> , 600 )  def test_BANNER_FILE ( ) :      e = Env ( ) assert e . banner_file is None assert e . tor_banner_file is None os . environ [ <str> ] = <str> e = Env ( ) assert e . banner_file == <str> assert e . tor_banner_file == <str> os . environ [ <str> ] = <str> e = Env ( ) assert e . banner_file == <str> assert e . tor_banner_file == <str>  def test_EVENT_LOOP_POLICY ( ) :      e = Env ( ) assert e . loop_policy is None os . environ [ <str> ] = <str> with pytest . raises ( Env . Error ) :          Env ( )  os . environ [ <str> ] = <str> try :          Env ( )  except ImportError :          pass  del os . environ [ <str> ]  def test_ANON_LOGS ( ) :      assert_boolean ( <str> , <str> , False )  def test_PEER_DISCOVERY ( ) :      e = Env ( ) assert e . peer_discovery == Env . PD_ON os . environ [ <str> ] = <str> e = Env ( ) assert e . peer_discovery == Env . PD_OFF os . environ [ <str> ] = <str> e = Env ( ) assert e . peer_discovery == Env . PD_ON os . environ [ <str> ] = <str> e = Env ( ) assert e . peer_discovery == Env . PD_SELF  def test_PEER_ANNOUNCE ( ) :      assert_boolean ( <str> , <str> , True )  def test_FORCE_PROXY ( ) :      assert_boolean ( <str> , <str> , False )  def test_TOR_PROXY_HOST ( ) :      assert_default ( <str> , <str> , <str> )  def test_TOR_PROXY_PORT ( ) :      assert_integer ( <str> , <str> , None )  def test_ban_versions ( ) :      e = Env ( ) assert e . drop_client is None ban_re = <str> os . environ [ <str> ] = ban_re e = Env ( ) assert e . drop_client == re . compile ( ban_re ) assert e . drop_client . match ( <str> ) assert e . drop_client . match ( <str> ) is None  def test_coin_class_provided ( ) :      e = Env ( lib_coins . BitcoinSV ) assert e . coin == lib_coins . BitcoinSV   