import pytest import os from electrumx . server . storage import Storage , db_class from electrumx . lib . util import subclasses db_engines = [ ] for c in subclasses ( Storage ) :      try :          c . import_module ( )  except ImportError :          db_engines . append ( pytest . mark . skip ( c . __name__ ) )  else :          db_engines . append ( c . __name__ )   @ pytest . fixture ( params = db_engines ) def db ( tmpdir , request ) :      cwd = os . getcwd ( ) os . chdir ( str ( tmpdir ) ) db = db_class ( request . param ) ( <str> , False ) yield db os . chdir ( cwd ) db . close ( )  def test_put_get ( db ) :      db . put ( <str> , <str> ) assert db . get ( <str> ) == <str>  def test_batch ( db ) :      db . put ( <str> , <str> ) with db . write_batch ( ) as b :          b . put ( <str> , <str> ) assert db . get ( <str> ) == <str>  assert db . get ( <str> ) == <str>  def test_iterator ( db ) :      for i in range ( 5 ) :          db . put ( <str> + str . encode ( str ( i ) ) , str . encode ( str ( i ) ) )  db . put ( <str> , <str> ) db . put ( <str> , <str> ) db . put ( <str> , <str> ) assert list ( db . iterator ( prefix = <str> ) ) == [ ( <str> , <str> ) ] + [ ( <str> + str . encode ( str ( i ) ) , str . encode ( str ( i ) ) ) for i in range ( 5 ) ]  def test_iterator_reverse ( db ) :      for i in range ( 5 ) :          db . put ( <str> + str . encode ( str ( i ) ) , str . encode ( str ( i ) ) )  db . put ( <str> , <str> ) db . put ( <str> , <str> ) assert list ( db . iterator ( prefix = <str> , reverse = True ) ) == [ ( <str> + str . encode ( str ( i ) ) , str . encode ( str ( i ) ) ) for i in reversed ( range ( 5 ) ) ]  def test_close ( db ) :      db . put ( <str> , <str> ) db . close ( ) db = db_class ( db . __class__ . __name__ ) ( <str> , False ) assert db . get ( <str> ) == <str>   