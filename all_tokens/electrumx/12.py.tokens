import pytest import electrumx . lib . coins as coins addresses = [ ( coins . BitcoinCash , <str> , <str> , <str> ) , ( coins . BitcoinCash , <str> , <str> , <str> ) , ( coins . BitcoinGold , <str> , <str> , <str> ) , ( coins . BitcoinGold , <str> , <str> , <str> ) , ( coins . Emercoin , <str> , <str> , <str> ) , ( coins . Litecoin , <str> , <str> , <str> ) , ( coins . Litecoin , <str> , <str> , <str> ) , ( coins . Zcash , <str> , <str> , <str> ) , ( coins . Zcash , <str> , <str> , <str> ) , ( coins . Decred , <str> , <str> , <str> ) , ( coins . Decred , <str> , <str> , <str> ) , ( coins . Groestlcoin , <str> , <str> , <str> ) , ( coins . Bitg , <str> , <str> , <str> ) , ( coins . Bitg , <str> , <str> , <str> ) , ( coins . Pivx , <str> , <str> , <str> ) , ( coins . Pivx , <str> , <str> , <str> ) , ( coins . PivxTestnet , <str> , <str> , <str> ) , ( coins . PivxTestnet , <str> , <str> , <str> ) , ( coins . TokenPay , <str> , <str> , <str> ) , ( coins . SmartCash , <str> , <str> , <str> ) , ( coins . Peercoin , <str> , <str> , <str> ) , ( coins . PeercoinTestnet , <str> , <str> , <str> ) , ( coins . GravityZeroCoin , <str> , <str> , <str> ) , ] @ pytest . fixture ( params = addresses ) def address ( request ) :      return request . param  def test_address_to_hashX ( address ) :      coin , addr , _ , hashX = address assert coin . address_to_hashX ( addr ) . hex ( ) == hashX  def test_address_from_hash160 ( address ) :      coin , addr , hash , _ = address raw = coin . DECODE_CHECK ( addr ) verlen = len ( raw ) - 20 assert verlen > 0 verbyte , hash_bytes = raw [ : verlen ] , raw [ verlen : ] if coin . P2PKH_VERBYTE == verbyte :          assert coin . P2PKH_address_from_hash160 ( bytes . fromhex ( hash ) ) == addr  elif verbyte in coin . P2SH_VERBYTES :          assert coin . P2SH_address_from_hash160 ( bytes . fromhex ( hash ) ) == addr  else :          raise Exception ( <str> )    