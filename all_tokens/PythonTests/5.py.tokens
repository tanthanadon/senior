rotate_pens = True disable_touchpads = True from time import sleep from os import path as op import sys from subprocess import check_call , check_output from glob import glob from os import environ def bdopen ( fname ) :      return open ( op . join ( basedir , fname ) )  def read ( fname ) :      return bdopen ( fname ) . read ( )  for basedir in glob ( <str> ) :      if <str> in read ( <str> ) :          break   else :      sys . stderr . write ( <str> ) sys . exit ( 1 )  env = environ . copy ( ) devices = check_output ( [ <str> , <str> , <str> ] , env = env ) . splitlines ( ) touchscreen_names = [ <str> , <str> , <str> ] touchscreens = [ i . decode ( <str> ) for i in devices if any ( j in i . lower ( ) . decode ( <str> ) for j in touchscreen_names ) ] wacoms = [ i . decode ( <str> ) for i in devices if any ( j in i . lower ( ) . decode ( <str> ) for j in [ <str> , <str> ] ) ] touchpad_names = [ <str> , <str> , <str> ] touchpads = [ i . decode ( <str> ) for i in devices if any ( j in i . lower ( ) . decode ( <str> ) for j in touchpad_names ) ] scale = float ( read ( <str> ) ) g = 7.0 STATES = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : lambda x , y : y <= - g } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : lambda x , y : y >= g } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : lambda x , y : x >= g } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : lambda x , y : x <= - g } , ] def rotate ( state ) :      s = STATES [ state ] check_call ( [ <str> , <str> , s [ <str> ] ] , env = env ) for dev in touchscreens if disable_touchpads else ( touchscreens + touchpads ) :          check_call ( [ <str> , <str> , dev , <str> , ] + s [ <str> ] . split ( ) , env = env )  if rotate_pens :          for dev in wacoms :              check_call ( [ <str> , <str> , dev , <str> , s [ <str> ] ] , env = env )   if disable_touchpads :          for dev in touchpads :              check_call ( [ <str> , s [ <str> ] , dev ] , env = env )    def read_accel ( fp ) :      fp . seek ( 0 ) return float ( fp . read ( ) ) * scale  if __name__ == <str> :      accel_x = bdopen ( <str> ) accel_y = bdopen ( <str> ) current_state = None while True :          x = read_accel ( accel_x ) y = read_accel ( accel_y ) for i in range ( 4 ) :              if i == current_state :                  continue  if STATES [ i ] [ <str> ] ( x , y ) :                  current_state = i rotate ( i ) break   sleep ( 1 )    