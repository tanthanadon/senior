from tkinter import * from tkinter import messagebox from math import * calculator = Tk ( ) calculator . title ( <str> ) calculator . resizable ( 0 , 1 ) fgc = <str> bgc = <str> bow = 5 fh = 44 wv = 4 rlf = <str> class Application ( Frame ) : 	 def __init__ ( self , master , * args , ** kwargs ) : 		 Frame . __init__ ( self , master , * args , ** kwargs ) self . createWidgets ( )  def replaceText ( self , text ) : 		 self . display . delete ( 0 , END ) self . display . insert ( 0 , text )  def delText ( self ) : 		 self . display . delete ( len ( self . display . get ( ) ) - 1 )  def appendToDisplay ( self , text ) : 		 self . entryText = self . display . get ( ) self . textLength = len ( self . entryText ) if self . entryText == <str> : 			 self . replaceText ( text )  else : 			 self . display . insert ( self . textLength , text )   def calculateExpression ( self ) : 		 self . expression = self . display . get ( ) self . expression = self . expression . replace ( <str> , <str> ) self . expression = self . expression . replace ( <str> , <str> ) try : 			 self . result = eval ( self . expression ) self . replaceText ( self . result )  except : 			 messagebox . showinfo ( <str> , <str> , icon = <str> , parent = calculator )   def SqrtExpression ( self ) : 		 self . expression = self . display . get ( ) try : 			 self . result = sqrt ( eval ( self . expression ) ) self . replaceText ( self . result )  except : 			 messagebox . showinfo ( <str> , <str> , icon = <str> , parent = calculator )   def clearText ( self ) : 		 self . replaceText ( <str> )  def createWidgets ( self ) : 		 self . display = Entry ( self , font = ( <str> , fh + int ( fh / 2 ) ) , borderwidth = bow , fg = fgc , bg = bgc , relief = RAISED , justify = RIGHT ) self . display . insert ( 0 , <str> ) self . display . grid ( row = 0 , column = 0 , columnspan = 5 ) self . DelButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . delText ( ) ) self . DelButton . grid ( row = 1 , column = 3 , sticky = <str> ) self . ExitButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : exit ( ) ) self . ExitButton . grid ( row = 1 , column = 4 , sticky = <str> ) self . sevenButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . sevenButton . grid ( row = 2 , column = 0 , sticky = <str> ) self . eightButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , relief = rlf , command = lambda : self . appendToDisplay ( <str> ) ) self . eightButton . grid ( row = 2 , column = 1 , sticky = <str> ) self . nineButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . nineButton . grid ( row = 2 , column = 2 , sticky = <str> ) self . timesButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . timesButton . grid ( row = 2 , column = 3 , sticky = <str> ) self . clearButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . clearText ( ) ) self . clearButton . grid ( row = 2 , column = 4 , sticky = <str> ) self . fourButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . fourButton . grid ( row = 3 , column = 0 , sticky = <str> ) self . fiveButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . fiveButton . grid ( row = 3 , column = 1 , sticky = <str> ) self . sixButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . sixButton . grid ( row = 3 , column = 2 , sticky = <str> ) self . divideButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . divideButton . grid ( row = 3 , column = 3 , sticky = <str> ) self . percentageButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . percentageButton . grid ( row = 3 , column = 4 , sticky = <str> ) self . oneButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . oneButton . grid ( row = 4 , column = 0 , sticky = <str> ) self . twoButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . twoButton . grid ( row = 4 , column = 1 , sticky = <str> ) self . threeButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . threeButton . grid ( row = 4 , column = 2 , sticky = <str> ) self . minusButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . minusButton . grid ( row = 4 , column = 3 , sticky = <str> ) self . equalsButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . calculateExpression ( ) ) self . equalsButton . grid ( row = 4 , column = 4 , sticky = <str> , rowspan = 3 ) self . zeroButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . zeroButton . grid ( row = 5 , column = 0 , columnspan = 2 , sticky = <str> ) self . dotButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . dotButton . grid ( row = 5 , column = 2 , sticky = <str> ) self . plusButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . plusButton . grid ( row = 5 , column = 3 , sticky = <str> ) self . LeftParButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . LeftParButton . grid ( row = 6 , column = 0 , sticky = <str> ) self . RightParButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . RightParButton . grid ( row = 6 , column = 1 , sticky = <str> ) self . PowButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . appendToDisplay ( <str> ) ) self . PowButton . grid ( row = 6 , column = 2 , sticky = <str> ) self . SqrtButton = Button ( self , font = ( <str> , fh ) , text = <str> , borderwidth = bow , width = wv , fg = fgc , bg = bgc , command = lambda : self . SqrtExpression ( ) ) self . SqrtButton . grid ( row = 6 , column = 3 , sticky = <str> )   app = Application ( calculator ) . grid ( ) calculator . mainloop ( )  