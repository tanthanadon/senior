from . serializers import StarSerializer , StarBulkSerializer from . serializers import StarTopEmployeeLists , StarEmployeeCategoriesSerializer , StarEmployeeKeywordsSerializer from . serializers import StarKeywordList , StarInputSerializer , StarSmallSerializer from . serializers import EmployeeBadgeListSerializer , EmployeeBadgeSerializer , EmployeeGroupedListSerializer from . models import Badge , EmployeeBadge , Star from constance import config from activities . models import Activity from employees . models import Employee from categories . models import Category , Keyword from django . db . models import Count , Q from django . shortcuts import get_object_or_404 from rest_framework import status from rest_framework . decorators import api_view , permission_classes from rest_framework . exceptions import APIException from rest_framework . pagination import PageNumberPagination from rest_framework . permissions import IsAuthenticated , IsAdminUser from rest_framework . response import Response from utils . send_messages import send_push_notification @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def give_star_to ( request , from_employee_id , to_employee_id ) :      if from_employee_id == to_employee_id :          content = { <str> : config . USER_UNABLE_TO_GIVE_STARS_ITSELF } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  elif request . method == <str> :          text = ( request . data [ <str> ] if <str> in request . data . keys ( ) else None ) from_user = get_object_or_404 ( Employee , pk = from_employee_id ) to_user = get_object_or_404 ( Employee , pk = to_employee_id ) category = get_object_or_404 ( Category , pk = request . data [ <str> ] ) keyword = get_object_or_404 ( Keyword , pk = request . data [ <str> ] ) if from_user . is_blocked :              content = { <str> : config . USER_BLOCKED_TO_GIVE_STARS } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  elif to_user . is_blocked :              content = { <str> : config . USER_BLOCKED_TO_RECEIVED_STARS } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  data = { <str> : category . id , <str> : keyword . id , <str> : text , <str> : from_user . id , <str> : to_user . id } serializer = StarInputSerializer ( data = data ) if serializer . is_valid ( ) :              serializer . save ( ) from_user . add_stars_given ( 1 ) from_user . save ( ) current_level = to_user . level if from_user . position :                  weight = from_user . position . weight  else :                  weight = 1  to_user . add_stars ( weight ) message = config . RECOMMENDATION_MESSAGE % ( weight , from_user . first_name , from_user . last_name ) send_push_notification ( to_user , message ) to_user . evaluate_level ( ) to_user . save ( ) if to_user . level != current_level :                  message = config . LEVEL_UP_TEXT % ( to_user . first_name , to_user . last_name , to_user . level ) activity = Activity . objects . create ( text = message , to_user = to_user ) send_push_notification ( to_user , message ) activity . save ( )  return Response ( serializer . data , status = status . HTTP_201_CREATED )  return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def give_star_to_many ( request , from_employee_id ) :      if request . method == <str> :          serializer_bulk = StarBulkSerializer ( data = request . data ) errors = [ ] stars_added = 0 if serializer_bulk . is_valid ( ) :              text = ( request . data [ <str> ] if <str> in request . data . keys ( ) else None ) from_user = get_object_or_404 ( Employee , pk = from_employee_id ) category = get_object_or_404 ( Category , pk = request . data [ <str> ] ) keyword = get_object_or_404 ( Keyword , pk = request . data [ <str> ] ) data = { <str> : category . id , <str> : keyword . id , <str> : text , <str> : from_user . id } for user_pk in request . data [ <str> ] :                  data . update ( { <str> : int ( user_pk ) } ) serializer = StarSerializer ( data = data ) if serializer . is_valid ( ) :                      serializer . save ( ) stars_added += 1 to_user = get_object_or_404 ( Employee , pk = user_pk ) from_user . add_stars_given ( 1 ) from_user . save ( ) current_level = to_user . level if from_user . position :                          weight = from_user . position . weight  else :                          weight = 1  to_user . add_stars ( weight ) message = config . RECOMMENDATION_MESSAGE % ( weight , from_user . first_name , from_user . last_name ) send_push_notification ( to_user , message ) to_user . evaluate_level ( ) to_user . save ( ) if to_user . level != current_level :                          message = config . LEVEL_UP_TEXT % ( to_user . first_name , to_user . last_name , to_user . level ) activity = Activity . objects . create ( text = message , to_user = to_user ) activity . save ( )   else :                      errors . append ( serializer . errors )    else :              errors . append ( serializer_bulk . errors )  if len ( errors ) == 0 :              content = { <str> : config . SUCCESSFULLY_STARS_ADDED } return Response ( content , status = status . HTTP_201_CREATED )  else :              stars_results = { <str> : stars_added } detail = { <str> : errors } content = stars_results . copy ( ) content . update ( detail ) return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )    @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def star ( request , star_id ) :      if request . method == <str> :          star = get_object_or_404 ( Star , pk = star_id ) serializer = StarSerializer ( star ) return Response ( serializer . data , status = status . HTTP_200_OK )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_employee_list ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) employee_stars = Star . objects . filter ( to_user = employee ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( employee_stars , request ) serializer = StarSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_employee_list_group_by_category ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) employee_stars = Star . objects . filter ( to_user = employee ) . values ( <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> , <str> ) paginator = PageNumberPagination ( ) result = paginator . paginate_queryset ( employee_stars , request ) serializer = StarEmployeeCategoriesSerializer ( result , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_employee_list_group_by_keyword ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) employee_stars = Star . objects . filter ( to_user = employee ) . values ( <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> , <str> ) paginator = PageNumberPagination ( ) result = paginator . paginate_queryset ( employee_stars , request ) serializer = StarEmployeeKeywordsSerializer ( result , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_employee_list_group_by_category_detail ( request , employee_id , category_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) category = get_object_or_404 ( Category , pk = category_id ) stars = Star . objects . filter ( to_user = employee , category = category ) . order_by ( <str> ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( stars , request ) serializer = StarSmallSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_employee_list_group_by_keyword_detail ( request , employee_id , keyword_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) keyword = get_object_or_404 ( Keyword , pk = keyword_id ) stars = Star . objects . filter ( to_user = employee , keyword = keyword ) . order_by ( <str> ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( stars , request ) serializer = StarSmallSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_top_employee_lists ( request , top_number , kind , id ) :      try :          if request . method == <str> :              if kind == <str> :                  top_list = Star . objects . filter ( category__id = id ) . values ( <str> , <str> , <str> , <str> , <str> <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> ) [ : top_number ]  elif kind == <str> :                  top_list = Star . objects . filter ( keyword__id = id ) . values ( <str> , <str> , <str> , <str> , <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> ) [ : top_number ]  else :                  return Response ( status = status . HTTP_412_PRECONDITION_FAILED )  serializer = StarTopEmployeeLists ( top_list , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK )   except Exception as e :          raise APIException ( e )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_keyword_list ( request ) :      if request . method == <str> :          if request . GET . get ( <str> ) :              search_term = request . GET . get ( <str> ) star_list = Star . objects . filter ( Q ( keyword__name__icontains = search_term ) ) . values ( <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> )  else :              star_list = Star . objects . all ( ) . values ( <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> )  paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( star_list , request ) serializer = StarKeywordList ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def stars_keyword_list_detail ( request , keyword_id ) :      if request . method == <str> :          keyword = get_object_or_404 ( Keyword , pk = keyword_id ) stars = Star . objects . filter ( keyword = keyword ) . values ( <str> , <str> , <str> , <str> , <str> , <str> ) . annotate ( num_stars = Count ( <str> ) ) . order_by ( <str> ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( stars , request ) serializer = StarTopEmployeeLists ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , IsAdminUser ) ) def give_badge_to ( request , badge_id , to_employee_id , from_employee_id ) :      if to_employee_id == from_employee_id :          content = { <str> : config . USER_UNABLE_TO_GIVE_BADGES_ITSELF } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  elif request . method == <str> :          badge = get_object_or_404 ( Badge , pk = badge_id ) to_employee = get_object_or_404 ( Employee , pk = to_employee_id ) from_employee = get_object_or_404 ( Employee , pk = from_employee_id ) try :              employee_badge = EmployeeBadge . objects . create ( to_user = to_employee , assigned_by = from_employee , badge = badge )  except Exception as e :              print ( e ) content = { <str> : config . BADGE_UNIQUE_CONSTRAINT_FAILED } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  serializer = EmployeeBadgeSerializer ( employee_badge ) return Response ( serializer . data , status = status . HTTP_201_CREATED )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def badges_employee_list ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) employee_bages = EmployeeBadge . objects . filter ( to_user = employee ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( employee_bages , request ) serializer = EmployeeBadgeSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_list_group_by_badges ( request ) :      if request . method == <str> :          if request . GET . get ( <str> ) :              search_term = request . GET . get ( <str> ) badge_list = EmployeeBadge . objects . filter ( Q ( badge__name__icontains = search_term ) ) . values ( <str> , <str> ) . annotate ( num_employees = Count ( <str> ) ) . order_by ( <str> )  else :              badge_list = EmployeeBadge . objects . all ( ) . values ( <str> , <str> ) . annotate ( num_employees = Count ( <str> ) ) . order_by ( <str> )  paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( badge_list , request ) serializer = EmployeeBadgeListSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_list_group_by_badges_detail ( request , badge_id ) :      if request . method == <str> :          badge = get_object_or_404 ( Badge , pk = badge_id ) employee_list = EmployeeBadge . objects . filter ( badge = badge ) . values ( <str> , <str> , <str> , <str> , <str> , <str> ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( employee_list , request ) serializer = EmployeeGroupedListSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )    