from . models import Employee , Location , Position , Role , EmployeeDevice from . serializers import EmployeeSerializer , EmployeeAvatarSerializer , EmployeeListSerializer from . serializers import EmployeeLocationListSerializer , EmployeePositionListSerializer , EmployeeRoleListSerializer from . serializers import EmployeeTopTotalScoreList , EmployeeTopLevelList from . serializers import EmployeeTopCurrentMonthList , EmployeeTopLastMonthList from . serializers import EmployeeTopCurrentYearList , EmployeeTopLastYearList from . serializers import EmployeeDeviceSerializer , EmployeeSetListSerializer , EmployeeCreationListSerializer from constance import config from django . conf import settings from django . contrib . auth import logout from django . contrib . sites . models import Site from django . core . mail import EmailMessage from django . core . urlresolvers import reverse from django . db . models import Q from django . shortcuts import get_object_or_404 , get_list_or_404 from re import match as regex_match from rest_framework import status from rest_framework . authtoken . models import Token from rest_framework . authtoken . views import ObtainAuthToken from rest_framework . decorators import api_view , permission_classes , renderer_classes from rest_framework . exceptions import APIException , NotAcceptable from rest_framework . pagination import PageNumberPagination from rest_framework . permissions import IsAdminUser , IsAuthenticated from rest_framework . renderers import StaticHTMLRenderer from rest_framework . response import Response @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_200_OK )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , IsAdminUser ) ) def employee_activate ( request , employee_id , action ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) if action == <str> :              employee . is_active = True  elif action == <str> :              employee . is_active = False  else :              pass  employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAdminUser , IsAuthenticated ) ) def employee_bulk_creation ( request ) :      if request . method == <str> :          serializer = EmployeeCreationListSerializer ( data = request . data ) errors = [ ] users_created = 0 if serializer . is_valid ( ) :              email_list = request . data for email_object in email_list [ <str> ] :                  email = email_object [ <str> ] . lower ( ) if regex_match ( <str> , email ) :                      username = email . split ( <str> ) [ 0 ] . lower ( ) domain = email . split ( <str> ) [ 1 ] . lower ( ) if domain in settings . EMAIL_DOMAIN_LIST :                          if not Employee . objects . filter ( email = email ) . exists ( ) :                              new_employee = Employee . objects . create_user ( username , password = request . data [ <str> ] , email = email ) new_employee . generate_reset_password_code ( ) new_employee . save ( ) users_created += 1  else :                              errors . append ( config . USER_EMAIL_ALREADY_REGISTERED % ( email ) )   else :                          errors . append ( config . EMAIL_DOMAIN_FORBIDDEN % ( domain ) )   else :                      errors . append ( config . INVALID_EMAIL_ADDRESS % ( email ) )    else :              errors . append ( serializer . errors )  if len ( errors ) == 0 :              content = { <str> : config . USER_SUCCESSFULLY_CREATED } return Response ( content , status = status . HTTP_201_CREATED )  else :              users_result = { <str> : users_created } detail = { <str> : errors } content = users_result . copy ( ) content . update ( detail ) return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )    @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , IsAdminUser ) ) def employee_block ( request , employee_id , action ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) if action == <str> :              employee . is_blocked = True  elif action == <str> :              employee . is_blocked = False  else :              pass  employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) def employee_creation ( request ) :      if request . method == <str> :          email = request . data [ <str> ] . lower ( ) if regex_match ( <str> , email ) :              username = email . split ( <str> ) [ 0 ] . lower ( ) domain = email . split ( <str> ) [ 1 ] . lower ( )  else :              content = { <str> : config . INVALID_EMAIL_ADDRESS } return Response ( content , status = status . HTTP_401_UNAUTHORIZED )  if domain in settings . EMAIL_DOMAIN_LIST :              random_password = Employee . objects . make_random_password ( length = 4 , allowed_chars = <str> ) subject = config . EMPLOYEE_CREATION_SUBJECT message = config . EMPLOYEE_CREATION_MESSAGE % ( username , random_password ) try :                  new_employee = Employee . objects . create_user ( username , password = random_password , email = email ) new_employee . generate_reset_password_code ( ) new_employee . save ( )  except Exception as e :                  print ( e ) content = { <str> : config . USER_EMAIL_ALREADY_REGISTERED % ( email ) } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  try :                  send_email = EmailMessage ( subject , message , to = [ email ] ) send_email . send ( )  except Exception as e :                  print ( e ) content = { <str> : config . USER_SUCCESSFULLY_CREATED_EMAIL_ERROR } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  content = { <str> : config . USER_SUCCESSFULLY_CREATED } return Response ( content , status = status . HTTP_201_CREATED )  else :              content = { <str> : config . EMAIL_DOMAIN_FORBIDDEN % ( domain ) } return Response ( content , status = status . HTTP_401_UNAUTHORIZED )    @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , IsAdminUser ) ) def employee_deactivated_list ( request , format = None ) :      if request . method == <str> :          employee_list = get_list_or_404 ( Employee , is_active = False ) paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( employee_list , request ) serializer = EmployeeListSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_list ( request , format = None ) :      if request . method == <str> :          if request . GET . get ( <str> ) :              request_terms = request . GET . get ( <str> ) search_terms_array = request_terms . split ( ) initial_term = search_terms_array [ 0 ] employee_list = Employee . objects . filter ( Q ( first_name__icontains = initial_term ) | Q ( last_name__icontains = initial_term ) | Q ( username__icontains = initial_term ) ) . filter ( is_active = True , is_base_profile_complete = True ) if len ( search_terms_array ) > 1 :                  for term in range ( 1 , len ( search_terms_array ) ) :                      employee_list = employee_list . filter ( Q ( first_name__icontains = search_terms_array [ term ] ) | Q ( last_name__icontains = search_terms_array [ term ] ) | Q ( username__icontains = search_terms_array [ term ] ) ) . filter ( is_active = True , is_base_profile_complete = True )    else :              employee_list = get_list_or_404 ( Employee , is_active = True , is_base_profile_complete = True )  paginator = PageNumberPagination ( ) results = paginator . paginate_queryset ( employee_list , request ) serializer = EmployeeListSerializer ( results , many = True ) return paginator . get_paginated_response ( serializer . data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_location_list ( request ) :      if request . method == <str> :          location_list = get_list_or_404 ( Location ) serializer = EmployeeLocationListSerializer ( location_list , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_position_list ( request ) :      if request . method == <str> :          position_list = get_list_or_404 ( Position ) serializer = EmployeePositionListSerializer ( position_list , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_role_list ( request ) :      if request . method == <str> :          role_list = get_list_or_404 ( Role ) serializer = EmployeeRoleListSerializer ( role_list , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK )   @ api_view ( [ <str> , <str> ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_image ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) serializer = EmployeeAvatarSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_200_OK )  if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) upload = request . FILES [ <str> ] employee . avatar . delete ( ) employee . avatar = upload employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_logout ( request ) :      if request . method == <str> :          employee = request . user try :              devices = EmployeeDevice . objects . filter ( username = employee ) for device in devices :                  device . delete ( )   except :              pass  logout ( request ) content = { <str> : config . USER_LOGOUT } return Response ( content , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_register_device ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) device , created = EmployeeDevice . objects . get_or_create ( username = employee ) if <str> in request . data :              device . android_device = request . data [ <str> ]  if <str> in request . data :              device . ios_device = request . data [ <str> ]  device . save ( ) serializer = EmployeeDeviceSerializer ( device ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) def employee_reset_password ( request , employee_email ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , email = employee_email ) employee . generate_reset_password_code ( ) subject = config . EMPLOYEE_RESET_PASSWORD_CONFIRMATION_SUBJECT current_site = Site . objects . get_current ( ) employee_reset_password_api = reverse ( <str> , args = [ employee . email ] ) url = current_site . domain + employee_reset_password_api + employee . reset_password_code message = config . EMPLOYEE_RESET_PASSWORD_CONFIRMATION_MESSAGE % ( url ) try :              send_email = EmailMessage ( subject , message , to = [ employee . email ] ) send_email . send ( )  except Exception as e :              print ( e ) content = { <str> : config . EMAIL_SERVICE_ERROR } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )  content = { <str> : <str> , <str> : employee . email , <str> : employee . reset_password_code } return Response ( content , status = status . HTTP_200_OK )   @ api_view ( [ <str> , ] ) @ renderer_classes ( ( StaticHTMLRenderer , ) ) def employee_reset_password_confirmation ( request , employee_email , employee_uuid ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , email = employee_email , reset_password_code = employee_uuid ) random_password = Employee . objects . make_random_password ( length = 4 , allowed_chars = <str> ) employee . set_password ( random_password ) employee . is_password_reset_required = True employee . save ( ) subject = config . EMPLOYEE_RESET_PASSWORD_SUCCESSFULLY_SUBJECT message = config . EMPLOYEE_RESET_PASSWORD_SUCCESSFULLY_MESSAGE % ( random_password ) try :              send_email = EmailMessage ( subject , message , to = [ employee . email ] ) send_email . send ( )  except Exception as e :              print ( e ) data = <str> % config . EMAIL_SERVICE_ERROR return Response ( data )  data = <str> % config . USER_SUCCESSFULLY_RESET_PASSWORD return Response ( data )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_update ( request , employee_id ) :      if request . method == <str> :          try :              employee = get_object_or_404 ( Employee , pk = employee_id ) employee . skype_id = request . data [ <str> ] employee . first_name = request . data [ <str> ] employee . last_name = request . data [ <str> ] employee . location = get_object_or_404 ( Location , pk = request . data [ <str> ] ) employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )  except Exception as e :              print ( e ) raise NotAcceptable ( config . USER_DATA_IS_MISSING )    @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def employee_update_password ( request , employee_id ) :      if request . method == <str> :          try :              current_password = request . data [ <str> ] new_password = request . data [ <str> ]  except Exception as e :              print ( e ) raise NotAcceptable ( config . USER_DATA_IS_MISSING )  employee = get_object_or_404 ( Employee , pk = employee_id ) if current_password == new_password :              content = { <str> : config . PASSWORD_EQUAL } return Response ( content , status = status . HTTP_400_BAD_REQUEST )  elif employee . check_password ( current_password ) :              employee . set_password ( new_password ) employee . reset_password_code = None employee . is_password_reset_required = False employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )  else :              content = { <str> : config . WRONG_CURRENT_PASSWORD } return Response ( content , status = status . HTTP_400_BAD_REQUEST )    @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAuthenticated , ) ) def top ( request , kind , quantity ) :      try :          employee_list_filtered = [ ] if request . method == <str> :              employee_list = Employee . objects . filter ( is_active = True , is_base_profile_complete = True ) . order_by ( <str> + kind ) [ : quantity ] if kind == <str> :                  for employee in employee_list :                      if employee . total_score > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopTotalScoreList ( employee_list_filtered , many = True )  elif kind == <str> :                  for employee in employee_list :                      if employee . level > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopLevelList ( employee_list_filtered , many = True )  elif kind == <str> :                  for employee in employee_list :                      if employee . current_month_score > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopCurrentMonthList ( employee_list_filtered , many = True )  elif kind == <str> :                  for employee in employee_list :                      if employee . current_year_score > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopCurrentYearList ( employee_list_filtered , many = True )  elif kind == <str> :                  for employee in employee_list :                      if employee . last_month_score > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopLastMonthList ( employee_list_filtered , many = True )  elif kind == <str> :                  for employee in employee_list :                      if employee . last_year_score > 0 :                          employee_list_filtered . append ( employee )   serializer = EmployeeTopLastYearList ( employee_list_filtered , many = True )  return Response ( serializer . data , status = status . HTTP_200_OK )   except Exception as e :          raise APIException ( e )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAdminUser , IsAuthenticated ) ) def employee_admin ( request , employee_id , action ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) if action == <str> :              employee . is_staff = True  elif action == <str> :              employee . is_staff = False  else :              pass  employee . save ( ) serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )   @ api_view ( [ <str> , ] ) @ permission_classes ( ( IsAdminUser , IsAuthenticated ) ) def employee_set_list ( request , employee_id ) :      if request . method == <str> :          employee = get_object_or_404 ( Employee , pk = employee_id ) serializer = EmployeeSetListSerializer ( data = request . data ) errors = [ ] if serializer . is_valid ( ) :              list_type = request . data [ <str> ] elements_list = request . data [ <str> ] if list_type == <str> :                  employee . position = elements_list employee . save ( )  elif list_type == <str> :                  employee . role = elements_list employee . save ( )  else :                  errors . append ( config . SET_LIST_TYPE_UNKNOWN )   else :              errors . append ( serializer . errors )  if len ( errors ) == 0 :              serializer = EmployeeSerializer ( employee ) return Response ( serializer . data , status = status . HTTP_202_ACCEPTED )  else :              content = { <str> : errors } return Response ( content , status = status . HTTP_406_NOT_ACCEPTABLE )    class CustomObtainAuthToken ( ObtainAuthToken ) :      def post ( self , request , * args , ** kwargs ) :          try :              response = super ( CustomObtainAuthToken , self ) . post ( request , * args , ** kwargs ) token = Token . objects . get ( key = response . data [ <str> ] ) employee = get_object_or_404 ( Employee , pk = token . user_id ) return Response ( { <str> : token . key , <str> : token . user_id , <str> : employee . reset_password_code , <str> : employee . is_base_profile_complete , <str> : employee . is_password_reset_required , <str> : employee . is_staff } )  except Exception as e :              print ( e ) raise NotAcceptable ( config . USER_UNABLE_TO_LOG )    def jwt_response_payload_handler ( token , user = None , request = None ) :      return { <str> : token , <str> : user . id , <str> : user . reset_password_code , <str> : user . is_base_profile_complete , <str> : user . is_password_reset_required , <str> : user . is_staff }   