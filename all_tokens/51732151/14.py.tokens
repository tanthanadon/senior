from market . market_app import MarketApplication , MarketApplicationABN , MarketApplicationING , MarketApplicationRABO , MarketApplicationMONEYOU class MarketAppSceneBorrower ( MarketApplication ) :      bank_status = { } port = 1453 database_prefix = <str> def __init__ ( self , * argv ) :          self . profile = True self . loan_request = False self . mortgage_accept = False self . investor_offer = False MarketApplication . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks from market import Global self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) if not self . profile and not self . loan_request and not self . mortgage_accept and not self . investor_offer :              for bank_id in Global . BANKS :                  user = self . api . _get_user ( Global . BANKS [ bank_id ] ) if user . id in self . api . user_candidate and self . bank_status [ bank_id ] == False :                      print bank_id , <str> self . bank_status [ bank_id ] = True self . profile = True  else :                      if not bank_id in self . bank_status :                          self . bank_status [ bank_id ] = False print bank_id , <str>     if self . profile :              print <str> self . scenario . make_borrower ( self . user ) self . profile = False self . loan_request = True  if self . loan_request :              print <str> self . user . update ( self . api . db ) self . scenario . create_loan_request ( self . user ) self . loan_request = False self . mortgage_accept = True  if self . mortgage_accept :              print <str> accepted = self . tasks . accept_mortgages ( self . user ) if accepted :                  print <str> self . mortgage_accept = False self . investor_offer = True   if self . investor_offer :              print <str> accepted = self . tasks . accept_loan_offers ( self . user ) if accepted :                  print <str>     class MarketAppSceneInvestor ( MarketApplication ) :      port = 1467 database_prefix = <str> def __init__ ( self , * argv ) :          self . profile = True self . wait_for_campaign = False self . mortgage_accept = False self . investor_accept = False MarketApplication . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) if self . profile :              print <str> self . scenario . make_investor ( self . user ) self . profile = False self . wait_for_campaign = True print <str>  if self . wait_for_campaign :              campaigns = self . scenario . load_open_market ( ) print len ( campaigns ) , <str> if len ( campaigns ) :                  self . wait_for_campaign = False self . mortgage_accept = True  for list in campaigns :                  print list [ 1 ] . id , <str>   if self . mortgage_accept :              print <str> self . scenario . create_investment_offer ( self . user )    class MarketAppSceneBank ( MarketApplicationABN ) :      def __init__ ( self , * argv ) :          MarketApplicationABN . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) self . tasks . handle_incoming_loan_request ( self . user )   class MarketAppSceneBankING ( MarketApplicationING ) :      def __init__ ( self , * argv ) :          MarketApplicationING . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) self . tasks . handle_incoming_loan_request ( self . user )   class MarketAppSceneBankRABO ( MarketApplicationRABO ) :      def __init__ ( self , * argv ) :          MarketApplicationRABO . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) self . tasks . handle_incoming_loan_request ( self . user )   class MarketAppSceneBankMONEYOU ( MarketApplicationMONEYOU ) :      def __init__ ( self , * argv ) :          MarketApplicationMONEYOU . __init__ ( self , * argv )  def initialize_api ( self ) :          from market . api . api import MarketAPI from market . database . database import MarketDatabase from market . database . backends import PersistentBackend self . _api = MarketAPI ( MarketDatabase ( PersistentBackend ( <str> , <str> % self . database_prefix ) ) ) self . _api . db . backend . clear ( )  def _scenario ( self ) :          from scenarios . scenario import Scenario from scenarios . tasks import Tasks self . scenario = Scenario ( self . api ) self . tasks = Tasks ( self . api ) self . tasks . handle_incoming_loan_request ( self . user )    