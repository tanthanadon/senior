from market . database . backends import Backend from market . models import DatabaseModel class Database ( object ) :      def get ( self , _type , _id ) :          raise NotImplementedError  def post ( self , _type , obj ) :          raise NotImplementedError  def put ( self , _type , _id , obj ) :          raise NotImplementedError  def delete ( self , obj ) :          raise NotImplementedError  def get_all ( self , _type ) :          raise NotImplementedError   class MarketDatabase ( Database ) :      def __init__ ( self , backend ) :          assert isinstance ( backend , Backend ) self . _backend = backend  def get ( self , _type , _id ) :          try :              return DatabaseModel . decode ( self . _backend . get ( _type , _id ) )  except IndexError :              return None   def post ( self , _type , obj ) :          assert isinstance ( obj , DatabaseModel ) try :              _id = obj . generate_id ( ) while not self . backend . id_available ( _id ) :                  _id = obj . generate_id ( force = True )  obj . save ( _id ) self . backend . post ( _type , _id , obj . encode ( ) ) return _id  except IndexError :              return False   def put ( self , _type , _id , obj ) :          assert isinstance ( obj , DatabaseModel ) assert obj . id assert _id == obj . id try :              return self . backend . put ( _type , _id , obj . encode ( ) )  except IndexError :              return False   def delete ( self , obj ) :          assert isinstance ( obj , DatabaseModel ) return self . backend . delete ( obj )  def get_all ( self , _type ) :          try :              items = self . backend . get_all ( _type ) if items :                  return [ DatabaseModel . decode ( t ) for t in items ]   except KeyError :              return None   @ property def backend ( self ) :          return self . _backend    