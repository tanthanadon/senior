import datetime import unittest from twisted . python . threadable import registerAsIOThread import mock import sys from mock import Mock from dispersy . candidate import LoopbackCandidate from dispersy . dispersy import Dispersy from dispersy . endpoint import ManualEnpoint from dispersy . member import DummyMember , Member from market import Global from market . api import APIMessage from market . api . api import MarketAPI , STATUS from market . community . community import MortgageMarketCommunity from market . community . conversion import MortgageMarketConversion from market . community . payload import SignedConfirmPayload from market . database . backends import MemoryBackend from market . database . database import MarketDatabase from market . models import DatabaseModel from market . models . house import House from market . models . loans import LoanRequest , Mortgage , Campaign , Investment from market . models . profiles import BorrowersProfile , Profile from market . models . user import User class FakeMessage ( object ) :      def __init__ ( self , payload ) :          self . payload = payload   class FakePayload ( object ) :      request = <str> fields = [ ] models = { }  class CommunityTestSuite ( unittest . TestCase ) :      def setUp ( self ) :          registerAsIOThread ( ) self . dispersy = Dispersy ( ManualEnpoint ( 0 ) , unicode ( <str> ) ) self . dispersy_bank = Dispersy ( ManualEnpoint ( 0 ) , unicode ( <str> ) ) self . dispersy_investor = Dispersy ( ManualEnpoint ( 0 ) , unicode ( <str> ) ) self . neutral_api = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) self . api = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) self . api_bank = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) self . api_investor = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) self . api . db . backend . clear ( ) self . api_bank . db . backend . clear ( ) self . api_investor . db . backend . clear ( ) self . user , _ , priv_user = self . api . create_user ( ) self . bank , _ , priv_bank = self . api . create_user ( ) self . investor , _ , priv_investor = self . api . create_user ( ) self . user . post_or_put ( self . api_bank . db ) self . bank . post_or_put ( self . api_bank . db ) self . investor . post_or_put ( self . api_bank . db ) self . user . post_or_put ( self . api_investor . db ) self . bank . post_or_put ( self . api_investor . db ) self . investor . post_or_put ( self . api_investor . db ) self . dispersy . _database . open ( ) self . dispersy_bank . _database . open ( ) self . dispersy_investor . _database . open ( ) self . master_member = DummyMember ( self . dispersy , 1 , <str> * 20 ) self . member = self . dispersy . get_member ( private_key = priv_user . decode ( <str> ) ) self . member_bank = self . dispersy . get_member ( private_key = priv_bank . decode ( <str> ) ) self . member_investor = self . dispersy . get_member ( private_key = priv_investor . decode ( <str> ) ) self . community = MortgageMarketCommunity . init_community ( self . dispersy , self . master_member , self . member ) self . community_bank = MortgageMarketCommunity . init_community ( self . dispersy_bank , self . master_member , self . member_bank ) self . community_investor = MortgageMarketCommunity . init_community ( self . dispersy_investor , self . master_member , self . member_investor ) self . community . api = self . api self . community . user = self . user self . api . community = self . community self . community_bank . api = self . api_bank self . community_bank . user = self . bank self . api . community = self . community_bank self . community_investor . api = self . api_investor self . community_investor . user = self . investor self . api . community = self . community_investor self . conversion = MortgageMarketConversion ( self . community ) self . dispersy_mock = Mock ( ) self . dispersy_mock . store_update_forward . return_value = True self . setupModels ( )  def setupModels ( self ) :          self . house = House ( <str> , <str> , <str> , 1000 ) self . house . post_or_put ( self . neutral_api . db ) self . loan_request = LoanRequest ( user_key = self . user . id , house_id = self . house . id , house_link = <str> , seller_phone_number = <str> , seller_email = <str> , mortgage_type = 1 , banks = [ self . bank . id ] , description = <str> , amount_wanted = 10000 , status = { } ) self . loan_request . post_or_put ( self . neutral_api . db ) self . borrowers_profile = BorrowersProfile ( first_name = <str> , last_name = <str> , email = <str> , iban = <str> , phone_number = <str> , current_postal_code = <str> , current_house_number = <str> , current_address = <str> , document_list = [ ] ) self . borrowers_profile . post_or_put ( self . neutral_api . db ) self . investors_profile = Profile ( first_name = <str> , last_name = <str> , email = <str> , iban = <str> , phone_number = <str> ) self . investors_profile . post_or_put ( self . neutral_api . db ) self . mortgage = Mortgage ( request_id = self . loan_request . id , house_id = self . house . id , bank = self . bank . id , amount = 10000 , mortgage_type = 1 , interest_rate = 1.0 , max_invest_rate = 2.0 , default_rate = 3.0 , duration = 60 , risk = <str> , investors = [ ] , status = STATUS . PENDING ) self . mortgage . post_or_put ( self . neutral_api . db ) self . campaign = Campaign ( mortgage_id = self . mortgage . id , amount = self . mortgage . amount , end_date = datetime . datetime . now ( ) , completed = False ) self . campaign . post_or_put ( self . neutral_api . db ) self . investment = Investment ( investor_key = self . investor . id , amount = 1000 , duration = 36 , interest_rate = 2.0 , mortgage_id = self . mortgage . id , status = STATUS . PENDING ) self . investment . post_or_put ( self . neutral_api . db )  def isModelInDB ( self , api , model ) :          return not api . db . get ( model . type , model . id ) is None  def remove_from_db ( self , model ) :          self . api . db . backend . delete ( model )  def remove_payload_models_from_db ( self , payload ) :          for key in payload . models :              self . remove_from_db ( payload . models [ key ] )   def test_init ( self ) :          self . assertIsInstance ( self . conversion , MortgageMarketConversion ) self . assertIsInstance ( self . community , MortgageMarketCommunity ) self . assertIsInstance ( self . user , User ) self . assertIsInstance ( self . member , Member ) self . assertEqual ( self . user . id , self . member . public_key . encode ( <str> ) )  def test_master_member ( self ) :          master_member = MortgageMarketCommunity . get_master_members ( self . dispersy ) [ 0 ] self . assertEqual ( Global . MASTER_KEY , master_member . public_key )  def test_on_loan_request_receive ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . LOAN_REQUEST payload . models = { self . house . type : self . house , self . loan_request . type : self . loan_request , self . user . type : self . user , self . borrowers_profile . type : self . borrowers_profile } self . assertFalse ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . borrowers_profile ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . house ) ) self . community_bank . on_loan_request_receive ( payload ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . borrowers_profile ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . house ) )  def test_on_loan_request_reject ( self ) :          self . loan_request . status [ self . bank . id ] = STATUS . PENDING self . user . loan_request_ids . append ( self . loan_request . id ) self . user . post_or_put ( self . api . db ) self . assertIn ( self . loan_request . id , self . user . loan_request_ids ) loan_request_bank = DatabaseModel . decode ( self . loan_request . encode ( ) ) loan_request_bank . status [ self . bank . id ] = STATUS . REJECTED payload = FakePayload ( ) payload . request = APIMessage . LOAN_REQUEST_REJECT payload . models = { self . loan_request . type : loan_request_bank , self . user . type : self . bank } self . community . on_loan_request_reject ( payload ) self . assertTrue ( self . isModelInDB ( self . api , loan_request_bank ) ) loan_request = self . api . db . get ( loan_request_bank . type , loan_request_bank . id ) self . assertEqual ( loan_request . status [ self . bank . id ] , STATUS . REJECTED ) self . assertNotIn ( self . loan_request . id , self . user . loan_request_ids )  def test_on_mortgage_offer ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_OFFER payload . models = { self . loan_request . type : self . loan_request , self . mortgage . type : self . mortgage } self . loan_request . status [ self . bank . id ] = STATUS . ACCEPTED self . mortgage . status = STATUS . ACCEPTED self . assertFalse ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api , self . mortgage ) ) self . community . on_mortgage_offer ( payload ) self . assertTrue ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api , self . mortgage ) ) self . user . update ( self . api . db ) self . assertIn ( self . mortgage . id , self . user . mortgage_ids ) self . assertEqual ( self . api . db . get ( self . mortgage . type , self . mortgage . id ) . status , STATUS . ACCEPTED )  def test_on_mortgage_accept ( self ) :          payload = FakePayload ( ) self . loan_request . _time_signed = sys . maxint self . mortgage . _time_signed = sys . maxint self . user . _time_signed = sys . maxint self . campaign . _time_signed = sys . maxint self . house . _time_signed = sys . maxint payload . request = APIMessage . MORTGAGE_ACCEPT_UNSIGNED payload . models = { self . loan_request . type : self . loan_request , self . mortgage . type : self . mortgage , self . user . type : self . user , self . campaign . type : self . campaign , self . house . type : self . house } self . loan_request . status [ self . bank . id ] = STATUS . ACCEPTED self . mortgage . status = STATUS . ACCEPTED self . user . campaign_ids . append ( self . campaign . id ) self . user . mortgage_ids . append ( self . mortgage . id ) self . user . loan_request_ids . append ( self . loan_request . id ) self . community_bank . on_mortgage_accept_signed ( payload ) self . community_investor . on_mortgage_accept_unsigned ( payload ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . campaign ) ) user_from_inv_db = self . api_investor . db . get ( self . user . type , self . user . id ) self . assertIn ( self . campaign . id , user_from_inv_db . campaign_ids ) self . bank . update ( self . api_bank . db ) self . assertIn ( self . campaign . id , self . bank . campaign_ids )  def test_on_mortgage_reject ( self ) :          self . mortgage . post_or_put ( self . api_bank . db ) self . bank . mortgage_ids . append ( self . mortgage . id ) self . bank . post_or_put ( self . api_bank . db ) self . mortgage . _time_signed = sys . maxint self . user . _time_signed = sys . maxint payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_REJECT payload . models = { self . mortgage . type : self . mortgage , self . user . type : self . user , } self . mortgage . status = STATUS . REJECTED self . community_bank . on_mortgage_reject ( payload ) self . bank . update ( self . api_bank . db ) mortgage = self . api_bank . db . get ( self . mortgage . type , self . mortgage . id ) self . assertEqual ( mortgage . status , STATUS . REJECTED ) self . assertNotIn ( mortgage . id , self . bank . mortgage_ids )  def test_on_investment_offer ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_OFFER payload . models = { self . investor . type : self . investor , self . investment . type : self . investment , self . investors_profile . type : self . investors_profile } self . assertFalse ( self . isModelInDB ( self . api , self . investment ) ) self . community . on_investment_offer ( payload ) self . assertTrue ( self . isModelInDB ( self . api , self . investment ) )  def test_on_campaign_bid_with_investment ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . CAMPAIGN_BID payload . fields = [ User . type , Investment . type , Campaign . type , LoanRequest . type , Mortgage . type , House . type ] payload . models = { self . user . type : self . user , self . investment . type : self . investment , self . campaign . type : self . campaign , self . loan_request . type : self . loan_request , self . mortgage . type : self . mortgage , self . house . type : self . house } self . assertFalse ( self . isModelInDB ( self . api , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api , self . house ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . house ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . house ) ) self . community . on_campaign_bid ( payload ) self . community_bank . on_campaign_bid ( payload ) self . community_investor . on_campaign_bid ( payload ) self . assertTrue ( self . isModelInDB ( self . api , self . investment ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . investment ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . investment ) ) self . assertTrue ( self . isModelInDB ( self . api , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api , self . house ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . house ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . house ) )  def test_on_campaign_bid_without_investment ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . CAMPAIGN_BID payload . models = { self . user . type : self . user , self . investment . type : None , self . campaign . type : self . campaign , self . loan_request . type : self . loan_request , self . mortgage . type : self . mortgage , self . house . type : self . house } self . assertFalse ( self . isModelInDB ( self . api , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . investment ) ) self . assertFalse ( self . isModelInDB ( self . api , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . campaign ) ) self . assertFalse ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . loan_request ) ) self . assertFalse ( self . isModelInDB ( self . api , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . mortgage ) ) self . assertFalse ( self . isModelInDB ( self . api , self . house ) ) self . assertFalse ( self . isModelInDB ( self . api_bank , self . house ) ) self . assertFalse ( self . isModelInDB ( self . api_investor , self . house ) ) self . community . on_campaign_bid ( payload ) self . community_bank . on_campaign_bid ( payload ) self . community_investor . on_campaign_bid ( payload ) self . assertTrue ( self . isModelInDB ( self . api , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . campaign ) ) self . assertTrue ( self . isModelInDB ( self . api , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . loan_request ) ) self . assertTrue ( self . isModelInDB ( self . api , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . mortgage ) ) self . assertTrue ( self . isModelInDB ( self . api , self . house ) ) self . assertTrue ( self . isModelInDB ( self . api_bank , self . house ) ) self . assertTrue ( self . isModelInDB ( self . api_investor , self . house ) )  def test_on_investment_accept ( self ) :          self . investment . post_or_put ( self . api_investor . db ) self . investor . investment_ids . append ( self . investment . id ) self . investor . post_or_put ( self . api_investor . db ) self . investment . _time_signed = sys . maxint self . user . _time_signed = sys . maxint self . borrowers_profile . _time_signed = sys . maxint payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_ACCEPT payload . models = { self . user . type : self . user , self . investment . type : self . investment , self . borrowers_profile . type : self . borrowers_profile } self . investment . status = STATUS . ACCEPTED self . community_investor . on_investment_accept ( payload ) self . investor . update ( self . api_investor . db ) investment = self . api_investor . db . get ( self . investment . type , self . investment . id ) self . assertEqual ( investment . status , STATUS . ACCEPTED ) self . assertIn ( investment . id , self . investor . investment_ids )  def test_on_investment_reject ( self ) :          self . investment . post_or_put ( self . api_investor . db ) self . investor . investment_ids . append ( self . investment . id ) self . investor . post_or_put ( self . api_investor . db ) self . user . _time_signed = sys . maxint self . investment . _time_signed = sys . maxint payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_REJECT payload . models = { self . user . type : self . user , self . investment . type : self . investment } self . investment . status = STATUS . REJECTED self . community_investor . on_investment_reject ( payload ) self . investor . update ( self . api_investor . db ) investment = self . api_investor . db . get ( self . investment . type , self . investment . id ) self . assertEqual ( investment . status , STATUS . REJECTED ) self . assertNotIn ( investment . id , self . investor . investment_ids )  @ mock . patch ( <str> ) def test_send_community_message ( self , patch ) :          self . assertFalse ( patch . called ) store = update = forward = False message_name = APIMessage . MORTGAGE_OFFER . value self . community . send_api_message_community ( message_name , [ self . loan_request . type ] , { self . loan_request . type : self . loan_request } , store , update , forward ) self . assertTrue ( patch . called ) args , kwargs = patch . call_args self . assertEqual ( type ( args [ 0 ] ) , list ) self . assertEqual ( args [ 0 ] [ 0 ] . payload . request , message_name ) self . assertEqual ( args [ 1 ] , store ) self . assertEqual ( args [ 2 ] , update ) self . assertEqual ( args [ 3 ] , forward )  @ mock . patch ( <str> ) def test_send_candidate_message ( self , patch ) :          self . assertFalse ( patch . called ) store = update = forward = False message_name = APIMessage . MORTGAGE_OFFER . value candidates = ( LoopbackCandidate ( ) , ) self . community . send_api_message_candidate ( message_name , [ self . loan_request . type ] , { self . loan_request . type : self . loan_request } , candidates , store , update , forward ) self . assertTrue ( patch . called ) args , kwargs = patch . call_args self . assertEqual ( type ( args [ 0 ] ) , list ) message = args [ 0 ] [ 0 ] self . assertEqual ( message . payload . request , message_name ) self . assertEqual ( args [ 1 ] , store ) self . assertEqual ( args [ 2 ] , update ) self . assertEqual ( args [ 3 ] , forward )  @ mock . patch ( <str> ) def test_send_introduce_user ( self , patch ) :          self . assertFalse ( patch . called ) store = update = forward = False message_name = <str> candidate = LoopbackCandidate ( ) self . community . send_introduce_user ( [ self . user . type ] , { self . user . type : self . user } , candidate , store , update , forward ) self . assertTrue ( patch . called ) args , kwargs = patch . call_args self . assertEqual ( type ( args [ 0 ] ) , list ) message = args [ 0 ] [ 0 ] self . assertEqual ( message . name , message_name ) self . assertEqual ( args [ 1 ] , store ) self . assertEqual ( args [ 2 ] , update ) self . assertEqual ( args [ 3 ] , forward )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_on_user_introduction ( self , store_patch , api_patch ) :          self . api_bank . db . delete ( self . user ) self . assertFalse ( store_patch . called ) store = update = forward = False message_name = <str> candidate = LoopbackCandidate ( ) self . community . send_introduce_user ( [ self . user . type ] , { self . user . type : self . user } , candidate ) self . assertTrue ( store_patch . called ) args , _ = store_patch . call_args self . assertEqual ( type ( args [ 0 ] ) , list ) message = args [ 0 ] [ 0 ] self . assertEqual ( message . name , message_name ) self . assertIsNone ( self . api_bank . _get_user ( self . user ) ) self . assertFalse ( api_patch . called ) self . community_bank . on_user_introduction ( [ message ] ) self . assertTrue ( api_patch . called ) args , _ = api_patch . call_args self . assertEqual ( self . user . id , args [ 1 ] . id )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_signature_request_flow ( self , persist , update , next_seq , next_hash , create_sig ) :          persist . return_value = True update . return_value = True next_seq . return_value = 1 next_hash . return_value = <str> create_sig . return_value = True self . assertFalse ( self . community_bank . publish_signed_confirm_request_message ( self . user . id , self . mortgage ) ) candidate = LoopbackCandidate ( ) candidate . associate ( self . member ) self . api_bank . user_candidate [ self . user . id ] = candidate self . assertTrue ( self . community_bank . publish_signed_confirm_request_message ( self . user . id , self . mortgage ) ) self . assertTrue ( create_sig . called )  @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) @ mock . patch ( <str> ) def test_create_signed_confirm_request_message ( self , persist , update , next_seq , next_hash , create_sig ) :          persist . return_value = True update . return_value = True next_seq . return_value = 1 next_hash . return_value = <str> create_sig . return_value = True self . mortgage . post_or_put ( self . api . db ) self . loan_request . post_or_put ( self . api_bank . db ) candidate = LoopbackCandidate ( ) candidate . associate ( self . member ) self . api_bank . user_candidate [ self . user . id ] = candidate message = self . community_bank . create_signed_confirm_request_message ( candidate , self . mortgage ) self . assertEqual ( message . name , <str> ) self . assertEqual ( message . payload . agreement_benefactor , self . mortgage ) self . assertEqual ( message . payload . benefactor , self . bank . id ) self . assertTrue ( next_hash . called ) self . assertTrue ( next_seq . called ) self . assertTrue ( persist . called ) self . assertFalse ( update . called ) persist . reset_mock ( ) next_hash . reset_mock ( ) next_seq . reset_mock ( ) message2 = self . community . allow_signed_confirm_request ( message ) self . assertTrue ( next_hash . called ) self . assertTrue ( next_seq . called ) self . assertTrue ( persist . called ) self . assertFalse ( update . called ) self . assertEqual ( message . name , message2 . name ) self . assertEqual ( message . payload . benefactor , message2 . payload . benefactor ) self . assertNotEqual ( message . payload . beneficiary , message2 . payload . beneficiary ) persist . reset_mock ( ) next_hash . reset_mock ( ) next_seq . reset_mock ( ) self . assertTrue ( self . community_bank . allow_signed_confirm_response ( message , message2 , True ) ) self . assertFalse ( next_hash . called ) self . assertFalse ( next_seq . called ) self . assertFalse ( persist . called ) self . assertFalse ( update . called ) self . community_bank . received_signed_confirm_response ( [ message2 ] ) self . assertTrue ( update . called )  def tearDown ( self ) :          self . dispersy . _database . close ( ) self . dispersy_bank . _database . close ( ) self . dispersy_investor . _database . close ( )   class IncomingQueueTestCase ( unittest . TestCase ) :      def setUp ( self ) :          self . api = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) mock = Mock ( ) self . api . community = mock self . api . incoming_queue . assign_message_handlers ( mock ) mock . on_loan_request_receive . return_value = True mock . on_loan_request_reject . return_value = True mock . on_mortgage_accept_signed . return_value = True mock . on_mortgage_accept_unsigned . return_value = True mock . on_investment_accept . return_value = True mock . on_mortgage_reject . return_value = True mock . on_investment_reject . return_value = True mock . on_mortgage_offer . return_value = True mock . on_investment_offer . return_value = True  def test_incoming_loan_request ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . LOAN_REQUEST payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_loan_request_receive . called )  def test_incoming_loan_request_reject ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . LOAN_REQUEST_REJECT payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_loan_request_reject . called )  def test_incoming_mortgage_accept_signed ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_ACCEPT_SIGNED payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_mortgage_accept_signed . called )  def test_incoming_mortgage_accept_unsigned ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_ACCEPT_UNSIGNED payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_mortgage_accept_unsigned . called )  def test_incoming_investment_accept ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_ACCEPT payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_investment_accept . called )  def test_incoming_investment_offer ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_OFFER payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_investment_offer . called )  def test_incoming_investment_reject ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . INVESTMENT_REJECT payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_investment_reject . called )  def test_incoming_mortgage_reject ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_REJECT payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_mortgage_reject . called )  def test_incoming_mortgage_offer ( self ) :          payload = FakePayload ( ) payload . request = APIMessage . MORTGAGE_OFFER payload . models = { } message = FakeMessage ( payload ) self . api . incoming_queue . _queue . append ( message ) self . api . incoming_queue . process ( ) self . assertTrue ( self . api . community . on_mortgage_offer . called )  def test_api_message_handlers_in_queue ( self ) :          handler = self . api . incoming_queue . handler for message in list ( APIMessage ) :              assert message in handler , <str> % message    class OutgoingQueueTestCase ( unittest . TestCase ) :      def setUp ( self ) :          self . api = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) mock = Mock ( ) self . api . community = mock mock . send_api_message_candidate . return_value = True mock . send_api_message_community . return_value = True  def test_send_community_message ( self ) :          request = APIMessage . MORTGAGE_OFFER fields = [ <str> ] models = { <str> : 4 } receivers = [ ] self . api . outgoing_queue . push ( ( request , fields , models , receivers ) ) self . assertFalse ( self . api . community . send_api_message_community . called ) self . api . outgoing_queue . process ( ) self . assertTrue ( self . api . community . send_api_message_community . called ) self . api . community . send_api_message_community . assert_called_with ( request . value , fields , models )  def test_send_candidate_message ( self ) :          fake_user = User ( <str> , 1 ) fake_user2 = User ( <str> , 2 ) fake_candidate = <str> self . api . user_candidate [ fake_user . id ] = fake_candidate request = APIMessage . MORTGAGE_OFFER fields = [ <str> ] models = { <str> : 4 } receivers = [ fake_user , fake_user2 ] self . api . outgoing_queue . push ( ( request , fields , models , receivers ) ) self . assertFalse ( self . api . community . send_api_message_candidate . called ) self . api . outgoing_queue . process ( ) self . assertTrue ( self . api . community . send_api_message_candidate . called ) self . api . community . send_api_message_candidate . assert_called_with ( request . value , fields , models , tuple ( [ fake_candidate ] ) ) self . assertIn ( ( request , fields , models , receivers ) , self . api . outgoing_queue . _queue ) self . api . community . reset_mock ( ) self . assertFalse ( self . api . community . send_api_message_candidate . called ) fake_candidate2 = <str> self . api . user_candidate [ fake_user2 . id ] = fake_candidate2 self . api . outgoing_queue . process ( ) self . assertTrue ( self . api . community . send_api_message_candidate . called ) self . api . community . send_api_message_candidate . assert_called_with ( request . value , fields , models , tuple ( [ fake_candidate2 ] ) ) self . assertNotIn ( ( request , fields , models , receivers ) , self . api . outgoing_queue . _queue )   class ConversionTestCase ( unittest . TestCase ) :      def setUp ( self ) :          registerAsIOThread ( ) self . dispersy = Dispersy ( ManualEnpoint ( 0 ) , unicode ( <str> ) ) self . api = MarketAPI ( MarketDatabase ( MemoryBackend ( ) ) ) self . api . db . backend . clear ( ) user , _ , priv = self . api . create_user ( ) self . bank , _ , _ = self . api . create_user ( ) self . user = user self . private_key = priv self . dispersy . _database . open ( ) self . master_member = DummyMember ( self . dispersy , 1 , <str> * 20 ) self . member = self . dispersy . get_member ( private_key = self . private_key . decode ( <str> ) ) self . community = MortgageMarketCommunity . init_community ( self . dispersy , self . master_member , self . member ) self . community . api = self . api self . community . user = self . user self . api . community = self . community self . conversion = MortgageMarketConversion ( self . community ) self . community . _conversions = [ ] self . community . add_conversion ( self . conversion ) self . setupModels ( )  def setupModels ( self ) :          self . house = House ( <str> , <str> , <str> , 1000 ) self . house . post_or_put ( self . api . db ) self . loan_request = LoanRequest ( user_key = self . user . id , house_id = self . house . id , house_link = <str> , seller_phone_number = <str> , seller_email = <str> , mortgage_type = 1 , banks = [ self . bank . id ] , description = <str> , amount_wanted = 10000 , status = { } ) self . loan_request . post_or_put ( self . api . db ) self . profile = BorrowersProfile ( first_name = <str> , last_name = <str> , email = <str> , iban = <str> , phone_number = <str> , current_postal_code = <str> , current_house_number = <str> , current_address = <str> , document_list = [ ] ) self . profile . post_or_put ( self . api . db )  def test_encode_introduce_user ( self ) :          meta = self . community . get_meta_message ( <str> ) message = meta . impl ( authentication = ( self . member , ) , distribution = ( self . community . claim_global_time ( ) , ) , payload = ( [ self . user . type ] , { self . user . type : self . user } ) , destination = ( LoopbackCandidate ( ) , ) ) encoded_message = self . conversion . _encode_model ( message ) [ 0 ] decoded_payload = self . conversion . _decode_model ( message , 0 , encoded_message ) [ 1 ] self . assertEqual ( message . payload . fields , decoded_payload . fields ) self . assertEqual ( message . payload . models , decoded_payload . models )  def test_encode_api_request_community ( self ) :          meta = self . community . get_meta_message ( <str> ) message = meta . impl ( authentication = ( self . member , ) , distribution = ( self . community . claim_global_time ( ) , ) , payload = ( APIMessage . MORTGAGE_OFFER . value , [ self . user . type ] , { self . user . type : self . user } , ) , destination = ( LoopbackCandidate ( ) , ) ) encoded_message = self . conversion . _encode_api_message ( message ) [ 0 ] decoded_payload = self . conversion . _decode_api_message ( message , 0 , encoded_message ) [ 1 ] self . assertEqual ( message . payload . models , decoded_payload . models )  def test_encode_api_request_candidate ( self ) :          meta = self . community . get_meta_message ( <str> ) message = meta . impl ( authentication = ( self . member , ) , distribution = ( self . community . claim_global_time ( ) , ) , payload = ( APIMessage . MORTGAGE_OFFER . value , [ self . user . type ] , { self . user . type : self . user } , ) , destination = ( LoopbackCandidate ( ) , ) ) encoded_message = self . conversion . _encode_api_message ( message ) [ 0 ] decoded_payload = self . conversion . _decode_api_message ( message , 0 , encoded_message ) [ 1 ] self . assertEqual ( message . payload . models , decoded_payload . models )  def test_encode_signed_confirm ( self ) :          payload_list = [ ] for k in range ( 1 , 12 ) :              payload_list . append ( None )  payload_list [ 0 ] = self . user . id payload_list [ 1 ] = self . bank . id payload_list [ 2 ] = self . loan_request payload_list [ 3 ] = None payload_list [ 4 ] = 0 payload_list [ 5 ] = 0 payload_list [ 6 ] = <str> payload_list [ 7 ] = <str> payload_list [ 8 ] = <str> payload_list [ 9 ] = <str> payload_list [ 10 ] = 324325252 meta = self . community . get_meta_message ( <str> ) loop = LoopbackCandidate ( ) message = meta . impl ( authentication = ( [ self . member , self . member ] , ) , distribution = ( self . community . claim_global_time ( ) , ) , payload = tuple ( payload_list ) ) encoded_message = self . conversion . _encode_signed_confirm ( message ) [ 0 ] decoded_payload = self . conversion . _decode_signed_confirm ( message , 0 , encoded_message ) [ 1 ] p1 = message . payload p2 = decoded_payload assert isinstance ( p1 , SignedConfirmPayload . Implementation ) assert isinstance ( p2 , SignedConfirmPayload . Implementation ) self . assertEqual ( p1 . agreement_benefactor , p2 . agreement_benefactor ) self . assertEqual ( p1 . agreement_beneficiary , p2 . agreement_beneficiary ) self . assertEqual ( p1 . benefactor , p2 . benefactor ) self . assertEqual ( p1 . beneficiary , p2 . beneficiary ) self . assertEqual ( p1 . previous_hash_benefactor , p2 . previous_hash_benefactor ) self . assertEqual ( p1 . previous_hash_beneficiary , p2 . previous_hash_beneficiary ) self . assertEqual ( p1 . sequence_number_benefactor , p2 . sequence_number_benefactor ) self . assertEqual ( p1 . sequence_number_beneficiary , p2 . sequence_number_beneficiary ) self . assertEqual ( p1 . signature_beneficiary , p2 . signature_beneficiary ) self . assertEqual ( p1 . signature_benefactor , p1 . signature_benefactor ) self . assertEqual ( p1 . insert_time , p2 . insert_time )   if __name__ == <str> :      unittest . main ( )   