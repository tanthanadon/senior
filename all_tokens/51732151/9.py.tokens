from __future__ import absolute_import import os import sys import unittest from uuid import UUID from PyQt5 . QtCore import Qt from PyQt5 . QtTest import QTest from mock import MagicMock from market . api . api import STATUS from market . controllers . main_window_controller import MainWindowController , QTableWidget from market . controllers . navigation import NavigateUser from market . controllers . openmarket_controller import OpenMarketController from market . market_app import TestMarketApplication from market . models . role import Role from market . models . user import User class GUITestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . app = TestMarketApplication ( sys . argv ) self . window = MainWindowController ( app = self . app , ui_location = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ ) ) , <str> , <str> ) ) self . app . api . db . backend . clear ( ) user , _ , _ = self . app . api . create_user ( ) bank_role = Role . FINANCIAL_INSTITUTION . value bank1 , _ , _ = self . app . api . create_user ( ) bank2 , _ , _ = self . app . api . create_user ( ) bank3 , _ , _ = self . app . api . create_user ( ) bank4 , _ , _ = self . app . api . create_user ( ) bank1 . role_id = bank_role bank2 . role_id = bank_role bank3 . role_id = bank_role bank4 . role_id = bank_role self . app . api . db . put ( User . type , bank1 . id , bank1 ) self . app . api . db . put ( User . type , bank2 . id , bank2 ) self . app . api . db . put ( User . type , bank3 . id , bank3 ) self . app . api . db . put ( User . type , bank4 . id , bank4 ) self . app . user = user self . app . bank1 = bank1 self . app . bank2 = bank2 self . app . bank3 = bank3 self . app . bank4 = bank4 self . window . bplr_controller . banks_ids = [ self . app . bank1 . id , self . app . bank2 . id , self . app . bank3 . id , self . app . bank4 . id ] self . payload_borrower_profile = { <str> : 1 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ ] } self . payload_investor_profile = { <str> : 2 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_loan_request = { <str> : UUID ( <str> ) , <str> : 1 , <str> : [ self . app . bank1 . id , self . app . bank2 . id , self . app . bank3 . id , self . app . bank4 . id ] , <str> : unicode ( <str> ) , <str> : 123456 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 123456 , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_mortgage = { <str> : UUID ( <str> ) , <str> : 1 , <str> : 123000 , <str> : 5.5 , <str> : 7.0 , <str> : 9.0 , <str> : 30 , <str> : <str> , <str> : [ ] } self . payload_loan_offer = { <str> : 1 , <str> : <str> , <str> : 1000 , <str> : 24 , <str> : 2.5 , <str> : UUID ( <str> ) , <str> : STATUS . PENDING }  def test_profile_empty ( self ) :          self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . profile_save_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_profile_create_profile ( self ) :          self . window . profile_controller . setup_view ( ) self . assertEqual ( None , self . window . profile_controller . current_profile ) user , _ , _ = self . app . api . create_user ( ) profile = self . app . api . create_profile ( user , self . payload_borrower_profile ) self . assertNotEqual ( None , profile ) self . window . profile_controller . update_form ( profile ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . profile_save_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_profile_load_current_borrower ( self ) :          self . window . profile_controller . setup_view ( ) self . assertEqual ( None , self . window . profile_controller . current_profile ) profile = self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . assertNotEqual ( None , profile ) self . window . profile_controller . setup_view ( ) self . assertEqual ( self . window . profile_firstname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_lastname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_email_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_iban_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_phonenumber_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_postcode_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_housenumber_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_address_lineedit . text ( ) , <str> )  def test_profile_load_current_investor ( self ) :          self . assertEqual ( None , self . window . profile_controller . current_profile ) profile = self . app . api . create_profile ( self . app . user , self . payload_investor_profile ) self . assertNotEqual ( None , profile ) self . window . profile_controller . setup_view ( ) self . assertEqual ( self . window . profile_firstname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_lastname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_email_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_iban_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . profile_phonenumber_lineedit . text ( ) , <str> )  def test_profile_switch_role_valid ( self ) :          profile = self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . assertNotEqual ( None , profile ) self . window . profile_controller . setup_view ( ) self . window . profile_investor_radiobutton . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . profile_save_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . window . profile_borrower_radiobutton . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . profile_save_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_profile_switch_role_invalid ( self ) :          profile = self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . assertNotEqual ( None , profile ) self . app . api . create_loan_request ( self . app . user , self . payload_loan_request ) self . window . profile_controller . setup_view ( ) self . window . profile_investor_radiobutton . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . profile_save_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_place_loan_request_empty ( self ) :          self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_place_loan_request_filled_in_linear ( self ) :          self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . window . bplr_address_lineedit . setText ( <str> ) self . window . bplr_postcode_lineedit . setText ( <str> ) self . window . bplr_housenumber_lineedit . setText ( <str> ) self . window . bplr_house_price_lineedit . setText ( <str> ) self . window . bplr_amount_wanted_lineedit . setText ( <str> ) self . window . bplr_description_textedit . setText ( <str> ) self . window . bplr_seller_phone_number_lineedit . setText ( <str> ) self . window . bplr_seller_email_lineedit . setText ( <str> ) self . window . bplr_house_link_lineedit . setText ( <str> ) self . window . bplr_bank1_checkbox . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_place_loan_request_filled_in_fixedrate ( self ) :          self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . window . bplr_address_lineedit . setText ( <str> ) self . window . bplr_postcode_lineedit . setText ( <str> ) self . window . bplr_housenumber_lineedit . setText ( <str> ) self . window . bplr_house_price_lineedit . setText ( <str> ) self . window . bplr_amount_wanted_lineedit . setText ( <str> ) self . window . bplr_description_textedit . setText ( <str> ) self . window . bplr_seller_phone_number_lineedit . setText ( <str> ) self . window . bplr_seller_email_lineedit . setText ( <str> ) self . window . bplr_house_link_lineedit . setText ( <str> ) self . window . bplr_bank1_checkbox . setChecked ( True ) self . window . bplr_fixedrate_radiobutton . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_place_loan_request_no_banks ( self ) :          self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . window . bplr_address_lineedit . setText ( <str> ) self . window . bplr_postcode_lineedit . setText ( <str> ) self . window . bplr_housenumber_lineedit . setText ( <str> ) self . window . bplr_house_price_lineedit . setText ( <str> ) self . window . bplr_amount_wanted_lineedit . setText ( <str> ) self . window . bplr_description_textedit . setText ( <str> ) self . window . bplr_seller_phone_number_lineedit . setText ( <str> ) self . window . bplr_seller_email_lineedit . setText ( <str> ) self . window . bplr_house_link_lineedit . setText ( <str> ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_place_loan_request_filled_in_twice ( self ) :          self . app . api . create_profile ( self . app . user , self . payload_borrower_profile ) self . window . bplr_address_lineedit . setText ( <str> ) self . window . bplr_postcode_lineedit . setText ( <str> ) self . window . bplr_housenumber_lineedit . setText ( <str> ) self . window . bplr_house_price_lineedit . setText ( <str> ) self . window . bplr_amount_wanted_lineedit . setText ( <str> ) self . window . bplr_description_textedit . setText ( <str> ) self . window . bplr_seller_phone_number_lineedit . setText ( <str> ) self . window . bplr_seller_email_lineedit . setText ( <str> ) self . window . bplr_house_link_lineedit . setText ( <str> ) self . window . bplr_bank1_checkbox . setChecked ( True ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) QTest . mouseClick ( self . window . bplr_submit_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def create_mortgage_campaign_and_bids ( self ) :          role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_investor_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) borrower1 , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . window . api . create_profile ( borrower1 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . window . api . create_user ( ) borrower2 . role_id = role_id self . window . api . create_profile ( borrower2 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower1 = self . window . api . db . get ( User . type , borrower1 . id ) loan_request1 = self . window . api . create_loan_request ( borrower1 , self . payload_loan_request ) borrower2 = self . window . api . db . get ( User . type , borrower2 . id ) loan_request2 = self . window . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request1 , mortgage1 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . payload_mortgage [ <str> ] = borrower2 . id self . payload_mortgage [ <str> ] = loan_request2 . id accepted_loan_request2 , mortgage2 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower1 , { <str> : mortgage1 . id } ) self . window . api . accept_mortgage_offer ( borrower2 , { <str> : mortgage2 . id } ) self . payload_loan_offer [ <str> ] = self . window . app . user . id self . payload_loan_offer [ <str> ] = mortgage1 . id self . window . api . place_loan_offer ( self . window . app . user , self . payload_loan_offer ) self . payload_loan_offer [ <str> ] = mortgage2 . id self . payload_loan_offer [ <str> ] = 123456 loan_offer2 = self . window . api . place_loan_offer ( self . window . app . user , self . payload_loan_offer ) self . window . api . accept_investment_offer ( borrower2 , { <str> : loan_offer2 . id } )  def test_openmarket_table_empty ( self ) :          self . window . openmarket_controller . setup_view ( ) self . assertFalse ( self . window . openmarket_open_market_table . rowCount ( ) )  def test_openmarket_table_filled ( self ) :          role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) borrower1 , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . window . api . create_profile ( borrower1 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . window . api . create_user ( ) borrower2 . role_id = role_id self . window . api . create_profile ( borrower2 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower1 = self . window . api . db . get ( User . type , borrower1 . id ) loan_request1 = self . window . api . create_loan_request ( borrower1 , self . payload_loan_request ) borrower2 = self . window . api . db . get ( User . type , borrower2 . id ) loan_request2 = self . window . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request1 , mortgage1 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . payload_mortgage [ <str> ] = borrower2 . id self . payload_mortgage [ <str> ] = loan_request2 . id accepted_loan_request2 , mortgage2 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower1 , { <str> : mortgage1 . id } ) self . window . api . accept_mortgage_offer ( borrower2 , { <str> : mortgage2 . id } ) self . window . openmarket_controller . setup_view ( ) self . assertEqual ( self . window . openmarket_open_market_table . rowCount ( ) , 2 ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 0 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 0 , 4 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 1 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 1 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 1 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 1 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . openmarket_open_market_table . item ( 1 , 4 ) . text ( ) , <str> )  def test_openmarket_view_campaign_unselected ( self ) :          self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . openmarket_view_loan_bids_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_openmarket_view_campaign ( self ) :          role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . create_profile ( borrower , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower . id , borrower ) borrower = self . window . api . db . get ( User . type , borrower . id ) loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request1 , mortgage1 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower , { <str> : mortgage1 . id } ) self . window . openmarket_controller . setup_view ( ) self . window . openmarket_open_market_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) self . window . navigation . switch_to_campaign_bids = MagicMock ( ) QTest . mouseClick ( self . window . openmarket_view_loan_bids_pushbutton , Qt . LeftButton ) self . window . navigation . switch_to_campaign_bids . assert_called_with ( mortgage1 . id )  def test_view_campaign_no_bids ( self ) :          role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . create_profile ( borrower , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower . id , borrower ) borrower = self . window . api . db . get ( User . type , borrower . id ) loan_request1 = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . window . cb_controller . setup_view ( mortgage . id ) self . assertEqual ( self . window . icb_current_bids_table . rowCount ( ) , 0 ) self . assertEqual ( self . window . icb_property_address_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . icb_remaining_amount_lineedit . text ( ) , <str> )  def test_view_campaign_place_bid_empty ( self ) :          self . create_mortgage_campaign_and_bids ( ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . icb_place_bid_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_view_campaign_place_bid_filled ( self ) :          self . create_mortgage_campaign_and_bids ( ) self . window . cb_controller . setup_view ( self . payload_loan_offer [ <str> ] ) self . assertEqual ( 1 , self . window . icb_current_bids_table . rowCount ( ) ) self . window . msg . about = MagicMock ( ) self . window . icb_amount_lineedit . setText ( <str> ) self . window . icb_duration_lineedit . setText ( <str> ) self . window . icb_interest_lineedit . setText ( <str> ) QTest . mouseClick ( self . window . icb_place_bid_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . assertEqual ( 2 , self . window . icb_current_bids_table . rowCount ( ) ) self . assertEqual ( self . window . icb_current_bids_table . item ( 1 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . icb_current_bids_table . item ( 1 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . icb_current_bids_table . item ( 1 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . icb_current_bids_table . item ( 1 , 3 ) . text ( ) , <str> )  def test_navigation_initial_visibility ( self ) :          navigation = NavigateUser ( self . window ) self . assertFalse ( navigation . mainwindow . navigation_pushbutton_1 . isVisible ( ) ) self . assertFalse ( navigation . mainwindow . navigation_pushbutton_2 . isVisible ( ) ) self . assertFalse ( navigation . mainwindow . navigation_pushbutton_3 . isVisible ( ) ) self . assertFalse ( navigation . mainwindow . navigation_pushbutton_4 . isVisible ( ) )  def test_navigation_switching ( self ) :          navigation = NavigateUser ( self . window ) navigation . switch_to_bplr ( ) self . assertEqual ( self . window . bplr_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_borrowers_portfolio ( ) self . assertEqual ( self . window . bp_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_investors_portfolio ( ) self . assertEqual ( self . window . ip_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_banks_portfolio ( ) self . assertEqual ( self . window . fip_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_openmarket ( ) self . assertEqual ( self . window . openmarket_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_profile ( ) self . assertEqual ( self . window . profile_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_fiplr ( ) self . assertEqual ( self . window . fiplr1_page , self . window . stackedWidget . currentWidget ( ) ) navigation . switch_to_fiplr2 ( ) self . assertEqual ( self . window . fiplr2_page , self . window . stackedWidget . currentWidget ( ) ) self . create_mortgage_campaign_and_bids ( ) navigation . switch_to_campaign_bids ( self . payload_loan_offer [ <str> ] ) self . assertEqual ( self . window . icb_page , self . window . stackedWidget . currentWidget ( ) )  def test_navigation_user ( self ) :          self . app . user . role_id = 0 self . window . navigation . switch_to_profile = MagicMock ( ) self . window . navigation . set_borrower_navigation = MagicMock ( ) self . window . navigation . set_investor_navigation = MagicMock ( ) self . window . navigation . set_bank_navigation = MagicMock ( ) self . window . navigation . user_screen_navigation ( ) self . window . navigation . switch_to_profile . assert_called ( ) self . window . navigation . set_borrower_navigation . assert_not_called ( ) self . window . navigation . set_investor_navigation . assert_not_called ( ) self . window . navigation . set_bank_navigation . assert_not_called ( ) self . app . user . role_id = 1 self . window . navigation . user_screen_navigation ( ) self . window . navigation . set_borrower_navigation . assert_called ( ) self . app . user . role_id = 2 self . window . navigation . user_screen_navigation ( ) self . window . navigation . set_investor_navigation . assert_called ( ) self . app . user . role_id = 3 self . window . navigation . user_screen_navigation ( ) self . window . navigation . set_bank_navigation . assert_called ( )  def test_navigation_borrower ( self ) :          self . window . navigation . set_borrower_navigation ( ) self . assertEqual ( <str> , self . window . navigation_pushbutton_1 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_2 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_3 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_4 . text ( ) )  def test_navigation_investor ( self ) :          self . window . navigation . set_investor_navigation ( ) self . assertEqual ( <str> , self . window . navigation_pushbutton_1 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_2 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_3 . text ( ) )  def test_navigation_bank ( self ) :          self . window . navigation . set_bank_navigation ( ) self . assertEqual ( <str> , self . window . navigation_pushbutton_1 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_2 . text ( ) ) self . assertEqual ( <str> , self . window . navigation_pushbutton_3 . text ( ) )  def test_borrowers_portfolio_loans_table_empty ( self ) :          self . window . bp_controller . setup_view ( ) self . assertFalse ( self . window . bp_ongoing_loans_table . rowCount ( ) )  def test_borrowers_portfolio_offers_table_empty ( self ) :          self . window . bp_controller . setup_view ( ) self . assertFalse ( self . window . bp_open_offers_table . rowCount ( ) )  def test_borrowers_portfolio_offers_table_filled ( self ) :          role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) loan_request = self . window . api . create_loan_request ( self . window . app . user , self . payload_loan_request ) self . payload_mortgage [ <str> ] = self . window . app . user . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 4 ) . text ( ) , <str> ) self . window . api . accept_mortgage_offer ( self . window . app . user , { <str> : mortgage . id } ) self . payload_loan_offer [ <str> ] = investor . id self . payload_loan_offer [ <str> ] = mortgage . id self . window . api . place_loan_offer ( investor , self . payload_loan_offer ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . bp_open_offers_table . item ( 0 , 4 ) . text ( ) , <str> )  def test_borrowers_portfolio_reject_unselected ( self ) :          self . window . bp_controller . setup_view ( ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_reject_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_borrowers_portfolio_accept_unselected ( self ) :          self . window . bp_controller . setup_view ( ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_accept_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_borrowers_portfolio_reject_mortgage_selected ( self ) :          role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) loan_request = self . window . api . create_loan_request ( self . window . app . user , self . payload_loan_request ) self . payload_mortgage [ <str> ] = self . window . app . user . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . window . bp_open_offers_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_reject_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . assertFalse ( self . window . bp_open_offers_table . rowCount ( ) ) self . assertFalse ( self . window . bp_ongoing_loans_table . rowCount ( ) )  def test_borrowers_portfolio_accept_mortgage_selected ( self ) :          role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) loan_request = self . window . api . create_loan_request ( self . window . app . user , self . payload_loan_request ) self . payload_mortgage [ <str> ] = self . window . app . user . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . window . bp_open_offers_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_accept_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . assertFalse ( self . window . bp_open_offers_table . rowCount ( ) ) self . assertEqual ( self . window . bp_ongoing_loans_table . rowCount ( ) , 1 )  def test_borrowers_portfolio_reject_investment_selected ( self ) :          role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) loan_request = self . window . api . create_loan_request ( self . window . app . user , self . payload_loan_request ) self . payload_mortgage [ <str> ] = self . window . app . user . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( self . window . app . user , { <str> : mortgage . id } ) self . payload_loan_offer [ <str> ] = investor . id self . payload_loan_offer [ <str> ] = mortgage . id self . window . api . place_loan_offer ( investor , self . payload_loan_offer ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . window . bp_open_offers_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_reject_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . assertFalse ( self . window . bp_open_offers_table . rowCount ( ) ) self . assertEqual ( self . window . bp_ongoing_loans_table . rowCount ( ) , 1 )  def test_borrowers_portfolio_accept_investment_selected ( self ) :          role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) loan_request = self . window . api . create_loan_request ( self . window . app . user , self . payload_loan_request ) self . payload_mortgage [ <str> ] = self . window . app . user . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( self . window . app . user , { <str> : mortgage . id } ) self . payload_loan_offer [ <str> ] = investor . id self . payload_loan_offer [ <str> ] = mortgage . id self . window . api . place_loan_offer ( investor , self . payload_loan_offer ) self . window . bp_controller . setup_view ( ) self . assertEqual ( self . window . bp_open_offers_table . rowCount ( ) , 1 ) self . window . bp_open_offers_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . bp_accept_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> ) self . assertFalse ( self . window . bp_open_offers_table . rowCount ( ) ) self . assertEqual ( self . window . bp_ongoing_loans_table . rowCount ( ) , 2 )  def test_investors_portfolio_table_empty ( self ) :          self . window . ip_controller . setup_view ( ) self . assertFalse ( self . window . ip_investments_table . rowCount ( ) )  def test_investors_portfolio_table_filled ( self ) :          role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_investor_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) borrower1 , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . window . api . create_profile ( borrower1 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . window . api . create_user ( ) borrower2 . role_id = role_id self . window . api . create_profile ( borrower2 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower1 = self . window . api . db . get ( User . type , borrower1 . id ) loan_request1 = self . window . api . create_loan_request ( borrower1 , self . payload_loan_request ) borrower2 = self . window . api . db . get ( User . type , borrower2 . id ) loan_request2 = self . window . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request1 , mortgage1 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . payload_mortgage [ <str> ] = borrower2 . id self . payload_mortgage [ <str> ] = loan_request2 . id accepted_loan_request2 , mortgage2 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower1 , { <str> : mortgage1 . id } ) self . window . api . accept_mortgage_offer ( borrower2 , { <str> : mortgage2 . id } ) self . payload_loan_offer [ <str> ] = self . window . app . user . id self . payload_loan_offer [ <str> ] = mortgage1 . id self . window . api . place_loan_offer ( self . window . app . user , self . payload_loan_offer ) self . payload_loan_offer [ <str> ] = mortgage2 . id self . payload_loan_offer [ <str> ] = 123456 loan_offer2 = self . window . api . place_loan_offer ( self . window . app . user , self . payload_loan_offer ) self . window . api . accept_investment_offer ( borrower2 , { <str> : loan_offer2 . id } ) self . window . ip_controller . setup_view ( ) self . assertEqual ( self . window . ip_investments_table . rowCount ( ) , 2 ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 4 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 5 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 6 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 0 , 7 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 4 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 5 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 6 ) . text ( ) , <str> ) self . assertEqual ( self . window . ip_investments_table . item ( 1 , 7 ) . text ( ) , <str> )  def test_banks_portfolio_table_empty ( self ) :          self . window . fip_controller . setup_view ( ) self . assertFalse ( self . window . fip_campaigns_table . rowCount ( ) )  def test_banks_portfolio_table_filled ( self ) :          self . window . app . user = self . window . app . bank1 borrower1 , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . window . api . create_profile ( borrower1 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . window . api . create_user ( ) borrower2 . role_id = role_id self . window . api . create_profile ( borrower2 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower1 = self . window . api . db . get ( User . type , borrower1 . id ) loan_request1 = self . window . api . create_loan_request ( borrower1 , self . payload_loan_request ) borrower2 = self . window . api . db . get ( User . type , borrower2 . id ) loan_request2 = self . window . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request1 , mortgage1 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . payload_mortgage [ <str> ] = borrower2 . id self . payload_mortgage [ <str> ] = loan_request2 . id accepted_loan_request2 , mortgage2 = self . window . api . accept_loan_request ( self . window . app . bank1 , self . payload_mortgage ) self . window . api . accept_mortgage_offer ( borrower1 , { <str> : mortgage1 . id } ) self . window . api . accept_mortgage_offer ( borrower2 , { <str> : mortgage2 . id } ) investor , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value investor . role_id = role_id self . window . api . create_profile ( investor , self . payload_investor_profile ) self . window . api . db . put ( User . type , investor . id , investor ) self . payload_loan_offer [ <str> ] = investor . id self . payload_loan_offer [ <str> ] = mortgage1 . id loan_offer = self . window . api . place_loan_offer ( investor , self . payload_loan_offer ) self . window . api . accept_investment_offer ( borrower1 , { <str> : loan_offer . id } ) self . window . fip_controller . setup_view ( ) self . assertEqual ( self . window . fip_campaigns_table . rowCount ( ) , 2 ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 4 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 5 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 6 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 7 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 0 , 8 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 4 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 5 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 6 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 7 ) . text ( ) , <str> ) self . assertEqual ( self . window . fip_campaigns_table . item ( 1 , 8 ) . text ( ) , <str> )  def test_pending_loan_requests_table_empty ( self ) :          self . window . fiplr1_controller . setup_view ( ) self . assertFalse ( self . window . fiplr1_loan_requests_table . rowCount ( ) )  def test_pending_loan_requests_table_filled ( self ) :          self . window . app . user = self . window . app . bank1 borrower1 , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . window . api . create_profile ( borrower1 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . window . api . create_user ( ) borrower2 . role_id = role_id self . window . api . create_profile ( borrower2 , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower1 = self . window . api . db . get ( User . type , borrower1 . id ) self . window . api . create_loan_request ( borrower1 , self . payload_loan_request ) borrower2 = self . window . api . db . get ( User . type , borrower2 . id ) self . payload_loan_request [ <str> ] = 2 self . window . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . window . fiplr1_controller . setup_view ( ) self . assertEqual ( self . window . fiplr1_loan_requests_table . rowCount ( ) , 2 ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 0 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 0 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 0 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 0 , 3 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 1 , 0 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 1 , 1 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 1 , 2 ) . text ( ) , <str> ) self . assertEqual ( self . window . fiplr1_loan_requests_table . item ( 1 , 3 ) . text ( ) , <str> )  def test_pending_loan_requests_table_unselected ( self ) :          self . window . fiplr1_controller . setup_view ( ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . fiplr1_view_loan_request_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_pending_loan_requests_table_selected ( self ) :          self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . create_profile ( borrower , self . payload_borrower_profile ) self . window . api . db . put ( User . type , borrower . id , borrower ) borrower = self . window . api . db . get ( User . type , borrower . id ) loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . fiplr1_controller . setup_view ( ) self . window . fiplr1_loan_requests_table . selectRow ( 0 ) self . window . msg . about = MagicMock ( ) self . window . fiplr2_controller . setup_view = MagicMock ( ) QTest . mouseClick ( self . window . fiplr1_view_loan_request_pushbutton , Qt . LeftButton ) self . window . fiplr2_controller . setup_view . assert_called_with ( loan_request . id )  def test_pending_loan_request_forms_filled_linear ( self ) :          self . window . fiplr2_controller . search = lambda x : [ <str> , <str> , <str> ] self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . db . put ( User . type , borrower . id , borrower ) self . window . api . create_profile ( borrower , self . payload_borrower_profile ) borrower = self . window . api . db . get ( User . type , borrower . id ) loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . fiplr2_controller . setup_view ( loan_request . id ) self . assertEqual ( self . window . fiplr2_firstname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_lastname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_address_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_phonenumber_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_email_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_property_address_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_loan_amount_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_mortgage_type_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_property_value_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_description_textedit . toPlainText ( ) , <str> )  def test_pending_loan_request_forms_filled_fixedrate ( self ) :          self . window . fiplr2_controller . search = lambda x : [ <str> , <str> , <str> ] self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . db . put ( User . type , borrower . id , borrower ) self . window . api . create_profile ( borrower , self . payload_borrower_profile ) borrower = self . window . api . db . get ( User . type , borrower . id ) self . payload_loan_request [ <str> ] = 2 loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . fiplr2_controller . setup_view ( loan_request . id ) self . assertEqual ( self . window . fiplr2_firstname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_lastname_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_address_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_phonenumber_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_email_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_property_address_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_loan_amount_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_mortgage_type_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_property_value_lineedit . text ( ) , <str> ) self . assertEqual ( self . window . fiplr2_description_textedit . toPlainText ( ) , <str> )  def test_pending_loan_request_accept_empty ( self ) :          self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . db . put ( User . type , borrower . id , borrower ) self . window . api . create_profile ( borrower , self . payload_borrower_profile ) borrower = self . window . api . db . get ( User . type , borrower . id ) self . payload_loan_request [ <str> ] = 2 loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . fiplr2_controller . setup_view ( loan_request . id ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . fiplr2_accept_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_pending_loan_request_accept_filled ( self ) :          self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . db . put ( User . type , borrower . id , borrower ) self . window . api . create_profile ( borrower , self . payload_borrower_profile ) borrower = self . window . api . db . get ( User . type , borrower . id ) self . payload_loan_request [ <str> ] = 2 loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . fiplr2_offer_amount_lineedit . setText ( <str> ) self . window . fiplr2_offer_interest_lineedit . setText ( <str> ) self . window . fiplr2_default_rate_lineedit . setText ( <str> ) self . window . fiplr2_loan_duration_lineedit . setText ( <str> ) self . window . fiplr2_controller . setup_view ( loan_request . id ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . fiplr2_accept_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_pending_loan_request_reject ( self ) :          self . window . app . user = self . window . app . bank1 borrower , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value borrower . role_id = role_id self . window . api . db . put ( User . type , borrower . id , borrower ) self . window . api . create_profile ( borrower , self . payload_borrower_profile ) borrower = self . window . api . db . get ( User . type , borrower . id ) self . payload_loan_request [ <str> ] = 2 loan_request = self . window . api . create_loan_request ( borrower , self . payload_loan_request ) self . window . app . user = self . window . api . db . get ( User . type , self . window . app . user . id ) self . window . fiplr2_controller . setup_view ( loan_request . id ) self . window . msg . about = MagicMock ( ) QTest . mouseClick ( self . window . fiplr2_reject_pushbutton , Qt . LeftButton ) self . window . msg . about . assert_called_with ( self . window , <str> , <str> )  def test_page_setup_borrower ( self ) :          self . window . app . user , _ , _ = self . window . api . create_user ( ) role_id = Role . BORROWER . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_borrower_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) self . window . setup_view ( ) self . assertEqual ( self . window . profile_page , self . window . stackedWidget . currentWidget ( ) )  def test_page_setup_investor ( self ) :          self . window . app . user , _ , _ = self . window . api . create_user ( ) role_id = Role . INVESTOR . value self . window . app . user . role_id = role_id self . window . api . create_profile ( self . window . app . user , self . payload_investor_profile ) self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) self . window . setup_view ( ) self . assertEqual ( self . window . profile_page , self . window . stackedWidget . currentWidget ( ) )  def test_page_setup_bank ( self ) :          self . window . app . user , _ , _ = self . window . api . create_user ( ) role_id = Role . FINANCIAL_INSTITUTION . value self . window . app . user . role_id = role_id self . window . api . db . put ( User . type , self . window . app . user . id , self . window . app . user ) self . window . setup_view ( ) self . assertEqual ( self . window . fip_page , self . window . stackedWidget . currentWidget ( ) )  def test_filter_table ( self ) :          self . window . openmarket_controller = None table = self . window . openmarket_open_market_table function2 = MainWindowController . filter_matching function3 = MainWindowController . filter_in_range mock1 = MagicMock ( ) mock2 = MagicMock ( ) MainWindowController . filter_matching = mock1 MainWindowController . filter_in_range = mock2 self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . window . openmarket_controller = OpenMarketController ( self . window ) self . assertFalse ( self . window . openmarket_search_lineedit . text ( ) , <str> ) QTest . keyClicks ( self . window . openmarket_search_lineedit , <str> ) self . assertTrue ( self . window . openmarket_search_lineedit . text ( ) , <str> ) mock1 . assert_called_once_with ( table , <str> ) mock2 . assert_called_with ( table , 3 , <str> , <str> ) MainWindowController . filter_matching = function2 MainWindowController . filter_in_range = function3  def test_show_hidden ( self ) :          table = self . window . openmarket_open_market_table table . setRowCount ( 0 ) self . window . openmarket_search_lineedit . setText ( <str> ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( table . rowCount ( ) , 3 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) table . hideRow ( 0 ) table . hideRow ( 1 ) table . hideRow ( 2 ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . assertEqual ( table . rowCount ( ) , 3 ) MainWindowController . show_hidden ( table ) self . assertEqual ( table . rowCount ( ) , 3 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) )  def test_filter_matched ( self ) :          table = self . window . openmarket_open_market_table MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( table . rowCount ( ) , 3 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) )  def test_filter_in_range ( self ) :          table = self . window . openmarket_open_market_table MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( table . rowCount ( ) , 3 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . assertEqual ( table . rowCount ( ) , 3 )  def test_filter_range_one_input ( self ) :          table = self . window . openmarket_open_market_table MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( table . rowCount ( ) , 3 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . assertEqual ( table . rowCount ( ) , 3 )  def test_filter_combo ( self ) :          table = self . window . openmarket_open_market_table MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) MainWindowController . insert_row ( table , [ <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( table . rowCount ( ) , 5 ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . assertFalse ( table . isRowHidden ( 3 ) ) self . assertFalse ( table . isRowHidden ( 4 ) ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . assertFalse ( table . isRowHidden ( 3 ) ) self . assertFalse ( table . isRowHidden ( 4 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . assertTrue ( table . isRowHidden ( 3 ) ) self . assertFalse ( table . isRowHidden ( 4 ) ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . assertTrue ( table . isRowHidden ( 3 ) ) self . assertFalse ( table . isRowHidden ( 4 ) ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertTrue ( table . isRowHidden ( 0 ) ) self . assertTrue ( table . isRowHidden ( 1 ) ) self . assertTrue ( table . isRowHidden ( 2 ) ) self . assertTrue ( table . isRowHidden ( 3 ) ) self . assertTrue ( table . isRowHidden ( 4 ) ) self . window . openmarket_search_lineedit . setText ( <str> ) self . window . openmarket_max_amount_lineedit . setText ( <str> ) self . window . openmarket_min_amount_lineedit . setText ( <str> ) self . window . openmarket_interest1_lineedit . setText ( <str> ) self . window . openmarket_interest2_lineedit . setText ( <str> ) self . window . openmarket_duration1_lineedit . setText ( <str> ) self . window . openmarket_duration2_lineedit . setText ( <str> ) self . assertFalse ( table . isRowHidden ( 0 ) ) self . assertFalse ( table . isRowHidden ( 1 ) ) self . assertFalse ( table . isRowHidden ( 2 ) ) self . assertFalse ( table . isRowHidden ( 3 ) ) self . assertFalse ( table . isRowHidden ( 4 ) ) self . assertEqual ( table . rowCount ( ) , 5 )    