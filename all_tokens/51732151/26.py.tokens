import os import ntpath from PyQt5 . QtCore import QFile from PyQt5 . QtWidgets import QFileDialog , qApp from PyQt5 . QtWidgets import QPushButton , QTableWidget from PyQt5 . QtWidgets import QTableWidgetItem DOCUMENT_NAMES = [ <str> , <str> , <str> ] class ProfileController :      def __init__ ( self , mainwindow ) :          self . mainwindow = mainwindow self . current_profile = None self . focused_button = None self . documents = dict . fromkeys ( DOCUMENT_NAMES ) self . mainwindow . profile_save_pushbutton . clicked . connect ( self . save_form ) self . table = self . mainwindow . profile_documents_table self . prepare_table ( )  def prepare_table ( self ) :          rows = len ( DOCUMENT_NAMES ) l = [ ] for i in range ( 0 , rows ) :              self . table . insertRow ( i ) edit_button = QPushButton ( <str> ) edit_button . index = i edit_button . clicked . connect ( self . browse ) self . table . setItem ( i , 0 , QTableWidgetItem ( str ( DOCUMENT_NAMES [ i ] ) ) ) self . table . setCellWidget ( i , 2 , edit_button ) l . append ( edit_button )   def browse ( self ) :          index = self . mainwindow . sender ( ) . index path , _ = QFileDialog . getOpenFileName ( self . mainwindow , <str> , os . getenv ( <str> ) ) if QFile . exists ( path ) :              document_name = self . table . item ( index , 0 ) . text ( ) self . documents [ document_name ] = path self . table . setItem ( index , 1 , QTableWidgetItem ( str ( ntpath . basename ( path ) ) ) )   def setup_view ( self ) :          if self . mainwindow . app . user . role_id :              self . current_profile = self . mainwindow . api . load_profile ( self . mainwindow . app . user ) if self . current_profile :                  self . update_form ( self . current_profile )    def save_form ( self ) :          try :              payload = self . get_data ( ) self . check_data ( payload ) if self . check_role_switch ( ) :                  if self . mainwindow . api . create_profile ( self . mainwindow . app . user , payload ) :                      self . mainwindow . show_dialog ( <str> , <str> ) self . mainwindow . app . user . update ( self . mainwindow . api . db ) self . update_navigation_bar ( )  else :                      self . mainwindow . show_dialog ( <str> , <str> )   else :                  self . mainwindow . show_dialog ( <str> , <str> )   except ValueError :              self . mainwindow . show_dialog ( <str> , <str> )   def get_data ( self ) :          payload = { <str> : 2 , <str> : unicode ( self . mainwindow . profile_firstname_lineedit . text ( ) ) , <str> : unicode ( self . mainwindow . profile_lastname_lineedit . text ( ) ) , <str> : str ( self . mainwindow . profile_email_lineedit . text ( ) ) , <str> : str ( self . mainwindow . profile_iban_lineedit . text ( ) ) , <str> : str ( self . mainwindow . profile_phonenumber_lineedit . text ( ) ) } if self . mainwindow . profile_borrower_radiobutton . isChecked ( ) :              payload [ <str> ] = 1 payload [ <str> ] = str ( self . mainwindow . profile_postcode_lineedit . text ( ) ) payload [ <str> ] = str ( self . mainwindow . profile_housenumber_lineedit . text ( ) ) payload [ <str> ] = str ( self . mainwindow . profile_address_lineedit . text ( ) ) payload [ <str> ] = dict ( ( k , v ) for k , v in self . documents . iteritems ( ) if v )  return payload  def check_data ( self , payload ) :          for _ , value in payload . iteritems ( ) :              if value == <str> :                  raise ValueError    def update_form ( self , profile ) :          self . mainwindow . profile_firstname_lineedit . setText ( profile . first_name ) self . mainwindow . profile_lastname_lineedit . setText ( profile . last_name ) self . mainwindow . profile_email_lineedit . setText ( profile . email ) self . mainwindow . profile_iban_lineedit . setText ( profile . iban ) self . mainwindow . profile_phonenumber_lineedit . setText ( profile . phone_number ) self . mainwindow . profile_investor_radiobutton . setChecked ( True ) if self . mainwindow . app . user . role_id == 1 :              self . mainwindow . profile_borrower_radiobutton . setChecked ( True ) self . mainwindow . profile_postcode_lineedit . setText ( profile . current_postal_code ) self . mainwindow . profile_housenumber_lineedit . setText ( profile . current_house_number ) self . mainwindow . profile_address_lineedit . setText ( profile . current_address )   def update_navigation_bar ( self ) :          user_role = self . mainwindow . app . user . role_id if user_role == 1 :              self . mainwindow . navigation . set_borrower_navigation ( )  elif user_role == 2 :              self . mainwindow . navigation . set_investor_navigation ( )   def check_role_switch ( self ) :          user = self . mainwindow . app . user if user . loan_request_ids or user . investment_ids :              return False  return True    