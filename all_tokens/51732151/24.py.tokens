import os import time from datetime import timedelta , datetime from enum import Enum import tftp_client from dispersy . crypto import ECCrypto from market . api import APIMessage from market . api . crypto import get_public_key from market . community . queue import OutgoingMessageQueue , IncomingMessageQueue from market . database . database import Database from market . models . document import Document from market . models . house import House from market . models . loans import LoanRequest , Mortgage , Investment , Campaign from market . models . profiles import BorrowersProfile from market . models . profiles import Profile from market . models . role import Role from market . models . user import User class STATUS ( Enum ) :      NONE = 0 PENDING = 1 ACCEPTED = 2 REJECTED = 3  CAMPAIGN_LENGTH_DAYS = 30 class MarketAPI ( object ) :      def __init__ ( self , database ) :          assert isinstance ( database , Database ) self . _database = database self . _user_key = None self . crypto = ECCrypto ( ) self . community = None self . user_candidate = { } self . outgoing_queue = OutgoingMessageQueue ( self ) self . incoming_queue = IncomingMessageQueue ( self ) self . failed_documents = [ ]  @ property def db ( self ) :          return self . _database  def user_key ( self ) :          return self . _user_key  def _get_user ( self , user ) :          if isinstance ( user , User ) :              return self . db . get ( User . type , user . id )  elif isinstance ( user , str ) :              return self . db . get ( User . type , user )  else :              return None   def create_user ( self ) :          key = self . crypto . generate_key ( <str> ) public_bin = self . crypto . key_to_bin ( key . pub ( ) ) private_bin = self . crypto . key_to_bin ( key ) user = User ( public_key = public_bin . encode ( <str> ) , time_added = time . time ( ) ) self . db . backend . set_option ( <str> , public_bin . encode ( <str> ) ) self . db . backend . set_option ( <str> , private_bin . encode ( <str> ) ) if self . db . post ( User . type , user ) :              return user , public_bin . encode ( <str> ) , private_bin . encode ( <str> )  else :              return None   def login_user ( self , private_key ) :          private_key = private_key . decode ( <str> ) if get_public_key ( private_key ) :              user = self . db . get ( User . type , get_public_key ( private_key ) ) return user  return None  def create_profile ( self , user , payload ) :          assert isinstance ( user , User ) assert isinstance ( payload , dict ) try :              role = Role ( payload [ <str> ] ) user . role_id = role . value profile = None if role . name == <str> :                  profile = Profile ( payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] ) user . profile_id = self . db . post ( Profile . type , profile )  elif role . name == <str> :                  documents = [ ] if payload [ <str> ] :                      for document_name , document_path in payload [ <str> ] . iteritems ( ) :                          document = Document . encode_document ( document_name , document_path ) self . db . post ( Document . type , document ) documents . append ( document . id )   profile = BorrowersProfile ( payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , documents ) user . profile_id = self . db . post ( BorrowersProfile . type , profile )  elif role . name == <str> :                  self . db . put ( User . type , user . id , user ) return True  self . db . put ( User . type , user . id , user ) return profile  except KeyError :              return False   def load_profile ( self , user ) :          user = self . _get_user ( user ) try :              role = Role ( user . role_id ) if role . name == <str> :                  profile = self . db . get ( Profile . type , user . profile_id )  elif role . name == <str> :                  profile = self . db . get ( BorrowersProfile . type , user . profile_id )  else :                  profile = None   except AttributeError :              profile = None  return profile  def place_loan_offer ( self , investor , payload ) :          assert isinstance ( investor , User ) assert isinstance ( payload , dict ) role = Role ( investor . role_id ) if role . name == <str> :              investment = Investment ( investor . id , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , STATUS . PENDING ) investment_id = self . db . post ( Investment . type , investment ) investor . investment_ids . append ( investment_id ) self . db . put ( User . type , investor . id , investor ) mortgage = self . db . get ( Mortgage . type , payload [ <str> ] ) mortgage . investors . append ( investor . id ) self . db . put ( Mortgage . type , mortgage . id , mortgage ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) borrower = self . db . get ( User . type , loan_request . user_key ) borrower . investment_ids . append ( investment . id ) self . db . put ( User . type , borrower . id , borrower ) borrower = self . db . get ( User . type , borrower . id ) investors_profile = self . db . get ( Profile . type , investor . profile_id ) campaign = self . db . get ( Campaign . type , mortgage . campaign_id ) mortgage = self . db . get ( Mortgage . type , investment . mortgage_id ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) house = self . db . get ( House . type , mortgage . house_id ) investment . sign ( self ) investor . sign ( self ) investors_profile . sign ( self ) borrower . sign ( self ) campaign . sign ( self ) mortgage . sign ( self ) loan_request . sign ( self ) house . sign ( self ) self . outgoing_queue . push ( ( APIMessage . INVESTMENT_OFFER , [ Investment . type , User . type , Profile . type ] , { Investment . type : investment , User . type : investor , Profile . type : investors_profile } , [ borrower ] ) ) self . outgoing_queue . push ( ( APIMessage . CAMPAIGN_BID , [ User . type , Investment . type , Campaign . type , Mortgage . type , LoanRequest . type , House . type ] , { User . type : borrower , Investment . type : investment , Campaign . type : campaign , Mortgage . type : mortgage , LoanRequest . type : loan_request , House . type : house } , [ ] ) ) return investment  else :              return False   def load_investments ( self , user ) :          user = self . _get_user ( user ) investments = [ ] for investment_id in user . investment_ids :              investment = self . db . get ( Investment . type , investment_id ) assert isinstance ( investment , Investment ) mortgage = self . db . get ( Mortgage . type , investment . mortgage_id ) house = self . db . get ( House . type , mortgage . house_id ) campaign = self . db . get ( Campaign . type , mortgage . campaign_id ) if investment . status == STATUS . ACCEPTED :                  loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) borrower = self . db . get ( User . type , loan_request . user_key ) borrowers_profile = self . db . get ( BorrowersProfile . type , borrower . profile_id ) investments . append ( [ investment , house , campaign , borrowers_profile ] )  elif investment . status == STATUS . PENDING :                  investments . append ( [ investment , house , campaign , None ] )   return investments  def load_open_market ( self ) :          campaigns = self . db . get_all ( Campaign . type ) mortgages = [ ] if campaigns :              for campaign in campaigns :                  if campaign . end_date > datetime . now ( ) and not campaign . completed :                      mortgage = self . db . get ( Mortgage . type , campaign . mortgage_id ) house = self . db . get ( House . type , mortgage . house_id ) mortgages . append ( [ mortgage , campaign , house ] )    return mortgages  def get_role ( self , user ) :          return Role ( user . role_id )  def create_loan_request ( self , user , payload ) :          assert isinstance ( user , User ) assert isinstance ( payload , dict ) role = Role ( user . role_id ) if role . name == <str> :              if not user . loan_request_ids :                  house = House ( payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] ) house_id = self . db . post ( House . type , house ) payload [ <str> ] = house_id payload [ <str> ] = dict ( ) . fromkeys ( payload [ <str> ] , STATUS . PENDING ) loan_request = LoanRequest ( user . id , house_id , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] ) user . loan_request_ids . append ( self . db . post ( LoanRequest . type , loan_request ) ) user . post_or_put ( self . db ) bank_ip_addresses = [ ] for bank_id in payload [ <str> ] :                      if bank_id in self . user_candidate :                          bank_ip_addresses . append ( self . user_candidate [ bank_id ] . wan_address [ 0 ] )   profile = self . load_profile ( user ) if profile :                      for document_id in profile . document_list :                          document = self . db . get ( Document . type , document_id ) document . decode_document ( os . getcwd ( ) + <str> + document . name + <str> )  tq = tftp_client . TransferQueue ( ) for ip_address in bank_ip_addresses :                          tq . add ( ip_address , 50000 , os . getcwd ( ) + <str> , str ( loan_request . id ) + <str> )  tq . upload_all ( ) self . failed_documents = tq . failed  loan_request . sign ( self ) banks = [ ] for bank_id in payload [ <str> ] :                      bank = self . db . get ( User . type , bank_id ) assert isinstance ( bank , User ) bank . loan_request_ids . append ( loan_request . id ) self . db . put ( User . type , bank . id , bank ) banks . append ( bank )  profile = self . load_profile ( user ) loan_request . sign ( self ) house . sign ( self ) profile . sign ( self ) user . sign ( self ) self . outgoing_queue . push ( ( APIMessage . LOAN_REQUEST , [ LoanRequest . type , House . type , BorrowersProfile . type , User . type ] , { LoanRequest . type : loan_request , House . type : house , BorrowersProfile . type : profile , User . type : user } , banks ) ) return loan_request  else :                  return False   else :              return False   def load_borrowers_loans ( self , user ) :          user = self . _get_user ( user ) loans = [ ] for mortgage_id in user . mortgage_ids :              if self . db . get ( Mortgage . type , mortgage_id ) . status == STATUS . ACCEPTED :                  mortgage = self . db . get ( Mortgage . type , mortgage_id ) loans . append ( [ mortgage , None ] ) campaign = self . db . get ( Campaign . type , user . campaign_ids [ 0 ] ) for investment_id in user . investment_ids :                      investment = self . db . get ( Investment . type , investment_id ) if investment . status == STATUS . ACCEPTED and investment . mortgage_id == mortgage_id :                          investor = self . db . get ( User . type , investment . investor_key ) investors_profile = self . db . get ( Profile . type , investor . profile_id ) loans . append ( [ investment , investors_profile ] )   return loans   return loans  def load_borrowers_offers ( self , user ) :          user = self . _get_user ( user ) offers = [ ] for mortgage_id in user . mortgage_ids :              mortgage = self . db . get ( Mortgage . type , mortgage_id ) campaign = self . db . get ( Campaign . type , mortgage . campaign_id ) if mortgage . status == STATUS . ACCEPTED and not campaign . completed :                  for investment_id in user . investment_ids :                      investment = self . db . get ( Investment . type , investment_id ) if investment . status == STATUS . PENDING :                          offers . append ( investment )   return offers  elif mortgage . status == STATUS . PENDING :                  offers . append ( mortgage )   return offers  def create_campaign ( self , user , mortgage , loan_request ) :          bank = self . _get_user ( mortgage . bank ) end_date = datetime . now ( ) + timedelta ( days = CAMPAIGN_LENGTH_DAYS ) finance_goal = loan_request . amount_wanted - mortgage . amount complete = False if finance_goal <= 0 :              complete = True  campaign = Campaign ( mortgage . id , finance_goal , end_date , complete ) if self . db . post ( Campaign . type , campaign ) :              user . campaign_ids . append ( campaign . id ) bank . campaign_ids . append ( campaign . id ) self . db . put ( User . type , bank . id , bank ) mortgage . campaign_id = campaign . id self . db . put ( Mortgage . type , mortgage . id , mortgage ) house = self . db . get ( House . type , mortgage . house_id ) mortgage . sign ( self ) campaign . sign ( self ) user . sign ( self ) loan_request . sign ( self ) house . sign ( self ) self . outgoing_queue . push ( ( APIMessage . MORTGAGE_ACCEPT_SIGNED , [ Mortgage . type , Campaign . type , User . type ] , { Mortgage . type : mortgage , Campaign . type : campaign , User . type : user } , [ bank ] ) ) self . outgoing_queue . push ( ( APIMessage . CAMPAIGN_BID , [ User . type , Campaign . type , Mortgage . type , LoanRequest . type , House . type ] , { User . type : user , Campaign . type : campaign , Mortgage . type : mortgage , LoanRequest . type : loan_request , House . type : house } , [ ] ) ) return self . db . put ( User . type , user . id , user )  return False  def accept_mortgage_offer ( self , user , payload ) :          mortgage = self . db . get ( Mortgage . type , payload [ <str> ] ) assert isinstance ( mortgage , Mortgage ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) assert isinstance ( loan_request , LoanRequest ) loan_request . status [ mortgage . bank ] = STATUS . ACCEPTED mortgage . status = STATUS . ACCEPTED user . mortgage_ids . append ( mortgage . id ) for bank in loan_request . status :              if not bank == mortgage . bank :                  loan_request . status [ bank ] = STATUS . REJECTED   self . db . put ( Mortgage . type , mortgage . id , mortgage ) self . db . put ( LoanRequest . type , loan_request . id , loan_request ) return self . create_campaign ( user , mortgage , loan_request )  def accept_investment_offer ( self , user , payload ) :          user = self . _get_user ( user ) investment = self . db . get ( Investment . type , payload [ <str> ] ) assert isinstance ( investment , Investment ) campaign = None if len ( user . campaign_ids ) == 0 :              raise AssertionError ( <str> )  for campaign_id in user . campaign_ids :              campaign = self . db . get ( Campaign . type , campaign_id ) assert isinstance ( campaign , Campaign ) if investment . mortgage_id == campaign . mortgage_id :                  break   if campaign :              investment . status = STATUS . ACCEPTED campaign . subtract_amount ( investment . amount ) self . db . put ( Investment . type , investment . id , investment ) self . reject_pending_campaign_bids ( user , campaign ) investor = self . db . get ( User . type , investment . investor_key ) borrowers_profile = self . db . get ( BorrowersProfile . type , user . profile_id ) mortgage = self . db . get ( Mortgage . type , investment . mortgage_id ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) house = self . db . get ( House . type , mortgage . house_id ) investment . sign ( self ) user . sign ( self ) borrowers_profile . sign ( self ) campaign . sign ( self ) mortgage . sign ( self ) loan_request . sign ( self ) house . sign ( self ) self . outgoing_queue . push ( ( APIMessage . INVESTMENT_ACCEPT , [ Investment . type , User . type , BorrowersProfile . type ] , { Investment . type : investment , User . type : user , BorrowersProfile . type : borrowers_profile } , [ investor ] ) ) self . outgoing_queue . push ( ( APIMessage . CAMPAIGN_BID , [ User . type , Investment . type , Campaign . type , Mortgage . type , LoanRequest . type , House . type ] , { User . type : user , Investment . type : investment , Campaign . type : campaign , Mortgage . type : mortgage , LoanRequest . type : loan_request , House . type : house } , [ ] ) ) return self . db . put ( Campaign . type , campaign . id , campaign )  return False  def reject_pending_campaign_bids ( self , user , campaign ) :          if campaign . completed :              for investment_id in user . investment_ids :                  investment = self . db . get ( Investment . type , investment_id ) if investment . status == STATUS . PENDING :                      self . reject_investment_offer ( user , { <str> : investment_id } )     def reject_mortgage_offer ( self , user , payload ) :          user = self . _get_user ( user ) mortgage = self . db . get ( Mortgage . type , payload [ <str> ] ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) mortgage . status = STATUS . REJECTED loan_request . status [ mortgage . bank ] = STATUS . REJECTED user . mortgage_ids . remove ( mortgage . id ) self . db . put ( Mortgage . type , mortgage . id , mortgage ) bank = self . db . get ( User . type , mortgage . bank ) mortgage . sign ( self ) user . sign ( self ) self . outgoing_queue . push ( ( APIMessage . MORTGAGE_REJECT , [ Mortgage . type , User . type ] , { Mortgage . type : mortgage , User . type : user } , [ bank ] ) ) return self . db . put ( LoanRequest . type , loan_request . id , loan_request ) and self . db . put ( User . type , user . id , user )  def reject_investment_offer ( self , user , payload ) :          investment = self . db . get ( Investment . type , payload [ <str> ] ) investment . status = STATUS . REJECTED self . db . put ( Investment . type , investment . id , investment ) mortgage = self . db . get ( Mortgage . type , investment . mortgage_id ) campaign = self . db . get ( Campaign . type , mortgage . campaign_id ) investor = self . db . get ( User . type , investment . investor_key ) mortgage = self . db . get ( Mortgage . type , investment . mortgage_id ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) house = self . db . get ( House . type , mortgage . house_id ) investment . sign ( self ) user . sign ( self ) campaign . sign ( self ) mortgage . sign ( self ) loan_request . sign ( self ) house . sign ( self ) self . outgoing_queue . push ( ( APIMessage . INVESTMENT_REJECT , [ Investment . type , User . type ] , { Investment . type : investment , User . type : user } , [ investor ] ) ) self . outgoing_queue . push ( ( APIMessage . CAMPAIGN_BID , [ User . type , Investment . type , Campaign . type , Mortgage . type , LoanRequest . type , House . type ] , { User . type : user , Investment . type : investment , Campaign . type : campaign , Mortgage . type : mortgage , LoanRequest . type : loan_request , House . type : house } , [ ] ) ) return investment  def load_all_loan_requests ( self , user ) :          assert isinstance ( user , User ) user = self . _get_user ( user ) pending_loan_requests = [ ] for pending_loan_request_id in user . loan_request_ids :              if self . db . get ( LoanRequest . type , pending_loan_request_id ) . status [ user . id ] == STATUS . PENDING :                  pending_loan_request = self . db . get ( LoanRequest . type , pending_loan_request_id ) house = self . db . get ( House . type , pending_loan_request . house_id ) pending_loan_requests . append ( [ pending_loan_request , house ] )   return pending_loan_requests  def load_single_loan_request ( self , payload ) :          assert isinstance ( payload , dict ) loan_request = self . db . get ( LoanRequest . type , payload [ <str> ] ) borrower = self . db . get ( User . type , loan_request . user_key ) borrower_profile = self . db . get ( BorrowersProfile . type , borrower . profile_id ) house = self . db . get ( House . type , loan_request . house_id ) return [ loan_request , borrower_profile , house ]  def accept_loan_request ( self , bank , payload ) :          assert isinstance ( bank , User ) assert isinstance ( payload , dict ) assert self . get_role ( bank ) . name == <str> loan_request = self . db . get ( LoanRequest . type , payload [ <str> ] ) assert isinstance ( loan_request , LoanRequest ) loan_request . status [ bank . id ] = STATUS . ACCEPTED mortgage = Mortgage ( loan_request . id , loan_request . house_id , bank . id , payload [ <str> ] , loan_request . mortgage_type , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , payload [ <str> ] , [ ] , STATUS . PENDING ) borrower = self . db . get ( User . type , loan_request . user_key ) assert isinstance ( borrower , User ) self . db . post ( Mortgage . type , mortgage ) borrower . mortgage_ids . append ( mortgage . id ) self . db . put ( User . type , borrower . id , borrower ) bank . mortgage_ids . append ( mortgage . id ) self . db . put ( User . type , bank . id , bank ) if self . db . put ( LoanRequest . type , loan_request . id , loan_request ) :              mortgage . sign ( self ) loan_request . sign ( self ) borrower = self . db . get ( User . type , borrower . id ) loan_request . sign ( self ) mortgage . sign ( self ) self . outgoing_queue . push ( ( APIMessage . MORTGAGE_OFFER , [ LoanRequest . type , Mortgage . type ] , { LoanRequest . type : loan_request , Mortgage . type : mortgage } , [ borrower ] ) ) return loan_request , mortgage  else :              return None   def reject_loan_request ( self , user , payload ) :          assert isinstance ( user , User ) assert isinstance ( payload , dict ) rejected_loan_request = self . db . get ( LoanRequest . type , payload [ <str> ] ) assert isinstance ( rejected_loan_request , LoanRequest ) rejected_loan_request . status [ user . id ] = STATUS . REJECTED borrower = self . db . get ( User . type , rejected_loan_request . user_key ) assert isinstance ( borrower , User ) loan_request_id = borrower . loan_request_ids [ 0 ] user . loan_request_ids . remove ( loan_request_id ) rejected = True for bank in rejected_loan_request . status :              if rejected_loan_request . status [ bank ] != STATUS . REJECTED :                  rejected = False   if rejected :              borrower . loan_request_ids . remove ( loan_request_id ) self . db . put ( User . type , borrower . id , borrower )  if self . db . put ( LoanRequest . type , loan_request_id , rejected_loan_request ) :              borrower = self . db . get ( User . type , borrower . id ) rejected_loan_request . sign ( self ) user . sign ( self ) self . outgoing_queue . push ( ( APIMessage . LOAN_REQUEST_REJECT , [ LoanRequest . type , User . type ] , { LoanRequest . type : rejected_loan_request , User . type : user } , [ borrower ] ) ) return rejected_loan_request  else :              return None   def load_bids ( self , payload ) :          mortgage = self . db . get ( Mortgage . type , payload [ <str> ] ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) borrower = self . db . get ( User . type , loan_request . user_key ) bids = [ ] for investment_id in borrower . investment_ids :              investment = self . db . get ( Investment . type , investment_id ) if investment :                  bids . append ( investment )   house = self . db . get ( House . type , loan_request . house_id ) campaign = self . db . get ( Campaign . type , borrower . campaign_ids [ 0 ] ) return bids , house , campaign  def load_mortgages ( self , user ) :          assert isinstance ( user , User ) user = self . _get_user ( user ) mortgages = [ ] for mortgage_id in user . mortgage_ids :              mortgage = self . db . get ( Mortgage . type , mortgage_id ) assert isinstance ( mortgage , Mortgage ) if mortgage . status == STATUS . ACCEPTED or mortgage . status == STATUS . PENDING :                  house = self . db . get ( House . type , mortgage . house_id ) loan_request = self . db . get ( LoanRequest . type , mortgage . request_id ) borrower = self . db . get ( User . type , loan_request . user_key ) borrowers_profile = self . db . get ( BorrowersProfile . type , borrower . profile_id ) if mortgage . status == STATUS . ACCEPTED :                      campaign = self . db . get ( Campaign . type , mortgage . campaign_id ) mortgages . append ( [ mortgage , house , campaign , borrowers_profile ] )  elif mortgage . status == STATUS . PENDING :                      mortgages . append ( [ mortgage , house , None , borrowers_profile ] )    return mortgages  def load_borrowers_loan_status ( self , user ) :          user = self . _get_user ( user ) for campaign_id in user . campaign_ids :              return self . db . get ( Campaign . type , campaign_id )  for loan_request_id in user . loan_request_ids :              return self . db . get ( LoanRequest . type , loan_request_id )  return None    