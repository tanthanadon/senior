from __future__ import absolute_import import os import logging import threading import unittest import time import tftpy import tftp_client from tftp_server import Server from tftp_client import Client , TransferQueue from mock import MagicMock class DocumentTransferTestSuite ( unittest . TestCase ) :      @ classmethod def setUpClass ( cls ) :          cls . server = Server ( os . getcwd ( ) ) cls . server . start ( ) time . sleep ( 1 )  @ classmethod def tearDownClass ( cls ) :          cls . server . stop ( )  def setUp ( self ) :          self . client = Client ( ) self . tftp_client = self . client . client self . queue = TransferQueue ( ) self . document_path_client = os . path . normpath ( os . getcwd ( ) + <str> ) self . document_path_host = os . path . normpath ( <str> )  def throw ( self , exception ) :          raise exception ( )  def test_server_construction ( self ) :          self . assertTrue ( isinstance ( self . server , Server ) ) self . assertTrue ( isinstance ( self . server . thread , threading . Thread ) )  def test_server_running ( self ) :          self . assertTrue ( self . server . is_running ( ) )  def test_server_not_running ( self ) :          server2 = Server ( os . getcwd ( ) ) self . assertFalse ( server2 . is_running ( ) )  def test_set_logging ( self ) :          tftpy . log . addHandler = MagicMock ( ) logging . FileHandler = MagicMock ( ) tftpy . setLogLevel ( 0 ) self . assertEqual ( tftpy . log . level , 0 ) Server . set_logging ( os . getcwd ( ) , <str> ) self . assertEqual ( tftpy . log . level , 40 ) tftpy . setLogLevel ( 0 )  def test_client_construction ( self ) :          self . assertEqual ( self . client . files , [ ] ) self . assertTrue ( isinstance ( self . client , Client ) )  def test_client_upload_custom_remote_path ( self ) :          mock = MagicMock ( ) self . tftp_client . upload = mock self . client . upload ( <str> , <str> ) mock . assert_called_once_with ( <str> , <str> )  def test_client_upload_default_remote_path ( self ) :          mock = MagicMock ( ) self . tftp_client . upload = mock self . client . upload ( self . document_path_client + <str> ) mock . assert_called_once_with ( <str> , self . document_path_client + <str> )  def test_client_upload_folder_default_path ( self ) :          mock = MagicMock ( ) self . client . file_search = lambda x : [ os . getcwd ( ) + <str> ] self . client . upload = mock self . client . upload_folder ( ) mock . assert_called_once_with ( os . getcwd ( ) + <str> )  def test_client_upload_folder_custom_path ( self ) :          mock = MagicMock ( ) self . client . file_search = lambda x : [ os . path . normpath ( os . getcwd ( ) + <str> ) ] self . client . upload = mock self . client . upload_folder ( host_path = <str> ) mock . assert_called_once_with ( os . path . normpath ( os . getcwd ( ) + <str> ) , <str> )  def test_enable_logging ( self ) :          tftpy . log . addHandler = MagicMock ( ) logging . FileHandler = MagicMock ( ) tftpy . setLogLevel ( 0 ) self . assertEqual ( tftpy . log . level , 0 ) self . client . enable_logging ( ) self . assertEqual ( tftpy . log . level , 20 ) tftpy . setLogLevel ( 0 )  def test_queue_construction ( self ) :          self . assertEqual ( self . queue . jobs , [ ] ) self . assertEqual ( self . queue . failed , [ ] ) self . assertEqual ( self . queue . sent , [ ] ) self . assertTrue ( isinstance ( self . queue , TransferQueue ) )  def test_queue_add ( self ) :          self . assertEqual ( self . queue . jobs , [ ] ) self . queue . add ( <str> , 69 , tftp_client . DEFAULT_CLIENT_PATH , tftp_client . DEFAULT_HOST_PATH ) self . assertEqual ( self . queue . jobs , [ ( <str> , 69 , tftp_client . DEFAULT_CLIENT_PATH , tftp_client . DEFAULT_HOST_PATH ) ] )  def test_queue_upload_all ( self ) :          mock = MagicMock ( ) self . queue . upload_list = mock self . queue . add ( <str> , 79 , tftp_client . DEFAULT_CLIENT_PATH , tftp_client . DEFAULT_HOST_PATH ) self . queue . upload_all ( ) mock . assert_called_once_with ( self . queue . jobs )  def test_queue_retry_failed ( self ) :          mock = MagicMock ( ) self . queue . upload_list = mock self . queue . failed . append ( ( <str> , 89 , tftp_client . DEFAULT_CLIENT_PATH , tftp_client . DEFAULT_HOST_PATH ) ) self . queue . retry_failed ( ) mock . assert_called_once_with ( [ ( <str> , 89 , tftp_client . DEFAULT_CLIENT_PATH , tftp_client . DEFAULT_HOST_PATH ) ] )  def test_upload_list_success ( self ) :          mock1 = MagicMock ( ) mock2 = MagicMock ( ) Client . upload = mock1 Client . upload_folder = mock2 self . queue . add ( <str> , 99 , self . document_path_client , self . document_path_host ) self . queue . add ( <str> , 101 , self . document_path_client + <str> , self . document_path_host + <str> ) self . assertEqual ( self . queue . jobs , [ ( <str> , 99 , self . document_path_client , self . document_path_host ) , ( <str> , 101 , self . document_path_client + <str> , self . document_path_host + <str> ) ] ) self . assertTrue ( self . queue . upload_list ( self . queue . jobs ) ) self . assertEqual ( self . queue . failed , [ ] )  def test_upload_list_fail ( self ) :          Client . upload = lambda x , y , z : self . throw ( tftpy . TftpException ) Client . upload_folder = lambda x , y , z : self . throw ( tftpy . TftpException ) self . queue . add ( <str> , 99 , self . document_path_client , self . document_path_host ) self . assertEqual ( self . queue . jobs , [ ( <str> , 99 , self . document_path_client , self . document_path_host ) ] ) self . assertFalse ( self . queue . upload_list ( self . queue . jobs ) ) self . assertEqual ( self . queue . failed , [ ( <str> , 99 , self . document_path_client , self . document_path_host ) ] ) self . assertEqual ( self . queue . sent , [ ] )    