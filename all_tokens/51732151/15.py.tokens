import random from faker import Factory from faker . providers import BaseProvider from market import Global class IBANProvider ( BaseProvider ) :      dataset = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] def iban ( self ) :          return random . choice ( IBANProvider . dataset )   class FakePayload ( object ) :      fake = Factory . create ( <str> ) fake . add_provider ( IBANProvider ) @ classmethod def profile ( self , role ) :          payload = { <str> : role , <str> : self . fake . first_name ( ) , <str> : self . fake . last_name ( ) , <str> : str ( self . fake . safe_email ( ) ) , <str> : self . fake . iban ( ) , <str> : str ( self . fake . phone_number ( ) ) , } if role == 1 :              payload . update ( { <str> : str ( self . fake . postcode ( ) ) , <str> : str ( self . fake . building_number ( ) ) , <str> : str ( self . fake . address ( ) ) , <str> : [ ] } )  return payload  @ classmethod def create_loan_request ( self ) :          price = random . randrange ( 100000 , 200000 , 1000 ) payload = { <str> : str ( self . fake . postcode ( ) ) , <str> : str ( self . fake . building_number ( ) ) , <str> : str ( self . fake . address ( ) ) , <str> : str ( self . fake . url ( ) ) , <str> : str ( self . fake . phone_number ( ) ) , <str> : str ( self . fake . safe_email ( ) ) , <str> : price , <str> : random . randrange ( 1 , 2 , 1 ) , <str> : Global . BANKS . values ( ) , <str> : self . fake . text ( ) , <str> : random . randrange ( price - 80000 , price , 1000 ) } return payload  @ classmethod def accept_loan_request ( self , loan_request ) :          price = random . randrange ( 100000 , 200000 , 1000 ) payload = { <str> : loan_request . id , <str> : random . randrange ( 1000 , price , 1000 ) , <str> : random . randrange ( 1 , 2 , 1 ) , <str> : random . uniform ( 0 , 20 ) , <str> : random . uniform ( 0 , 20 ) , <str> : random . uniform ( 0 , 10 ) , <str> : random . randint ( 6 , 120 ) , <str> : <str> , <str> : [ ] } return payload  @ classmethod def reject_loan_request ( self , loan_request ) :          payload = { <str> : loan_request . id } return payload  @ classmethod def accept_mortgage_offer ( self , mortgage ) :          payload = { <str> : mortgage . id } return payload  @ classmethod def reject_mortgage_offer ( self , mortgage ) :          payload = { <str> : mortgage . id } return payload  @ classmethod def place_investment_offer ( self , mortgage ) :          amount_wanted = random . randrange ( 40000 , 200000 , 1000 ) payload = { <str> : random . randint ( 1 , 200000 ) , <str> : random . randint ( 6 , 120 ) , <str> : random . uniform ( 0 , 20 ) , <str> : mortgage . id } return payload  @ classmethod def accept_investment_offer ( self , investment_offer ) :          payload = { <str> : investment_offer . id } return payload  @ classmethod def reject_investment_offer ( self , investment_offer ) :          payload = { <str> : investment_offer . id } return payload  @ classmethod def load_single_loan_request ( self , loan_request ) :          payload = { <str> : loan_request . id } return payload  @ classmethod def load_bids ( self , mortgage ) :          payload = { <str> : mortgage . id } return payload    