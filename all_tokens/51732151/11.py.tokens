from __future__ import absolute_import import unittest from uuid import UUID from dispersy . crypto import ECCrypto from market . api . api import MarketAPI from market . api . api import STATUS from market . database . backends import MemoryBackend from market . database . database import MarketDatabase from market . models . house import House from market . models . loans import Investment from market . models . loans import LoanRequest , Mortgage , Campaign from market . models . profiles import BorrowersProfile from market . models . profiles import Profile from market . models . role import Role from market . models . user import User from market . api . crypto import get_public_key class APITestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . database = MarketDatabase ( MemoryBackend ( ) ) self . api = MarketAPI ( self . database ) self . ec = ECCrypto ( ) self . payload = { <str> : 1 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ ] } self . payload_investor = { <str> : 2 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_bank = { <str> : 3 } self . payload_loan_offer1 = { <str> : 1 , <str> : <str> , <str> : 1000 , <str> : 24 , <str> : 2.5 , <str> : UUID ( <str> ) , <str> : STATUS . PENDING } self . payload_loan_offer2 = { <str> : 1 , <str> : <str> , <str> : 20000 , <str> : 36 , <str> : 3.5 , <str> : UUID ( <str> ) , <str> : STATUS . ACCEPTED } self . payload_loan_offer3 = { <str> : 1 , <str> : <str> , <str> : 500 , <str> : 12 , <str> : 7.0 , <str> : UUID ( <str> ) , <str> : STATUS . REJECTED } self . payload_mortgage1 = { <str> : UUID ( <str> ) , <str> : UUID ( <str> ) , <str> : <str> , <str> : 150000 , <str> : 1 , <str> : 5.5 , <str> : 10.5 , <str> : 2.5 , <str> : 600 , <str> : <str> , <str> : [ ] , <str> : STATUS . PENDING } self . payload_mortgage2 = { <str> : UUID ( <str> ) , <str> : UUID ( <str> ) , <str> : <str> , <str> : 140000 , <str> : 1 , <str> : 4.5 , <str> : 8.5 , <str> : 6.5 , <str> : 588 , <str> : <str> , <str> : [ ] , <str> : STATUS . PENDING } self . payload_mortgage3 = { <str> : UUID ( <str> ) , <str> : UUID ( <str> ) , <str> : <str> , <str> : 150000 , <str> : 0 , <str> : 6.5 , <str> : 9.5 , <str> : 3.5 , <str> : 360 , <str> : <str> , <str> : [ ] , <str> : STATUS . ACCEPTED } self . payload_investment1 = { <str> : <str> , <str> : 2000 , <str> : 48 , <str> : 2.5 , <str> : UUID ( <str> ) , <str> : STATUS . PENDING } self . payload_investment2 = { <str> : <str> , <str> : 3000 , <str> : 60 , <str> : 4.5 , <str> : UUID ( <str> ) , <str> : STATUS . PENDING } self . payload_investment3 = { <str> : <str> , <str> : 1000 , <str> : 72 , <str> : 7.5 , <str> : UUID ( <str> ) , <str> : STATUS . PENDING } self . payload_loan_request1 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 150000 , <str> : 1 , <str> : UUID ( <str> ) , <str> : 1 , <str> : [ ] , <str> : unicode ( <str> ) , <str> : 200000 , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_loan_request2 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 160000 , <str> : 1 , <str> : UUID ( <str> ) , <str> : 1 , <str> : [ ] , <str> : unicode ( <str> ) , <str> : 250000 , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_loan_request = { <str> : UUID ( <str> ) , <str> : 1 , <str> : [ ] , <str> : unicode ( <str> ) , <str> : 123456 , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 123456 , <str> : <str> , <str> : <str> , <str> : <str> } self . payload_mortgage = { <str> : UUID ( <str> ) , <str> : 1 , <str> : 123000 , <str> : 5.5 , <str> : 7.0 , <str> : 9.0 , <str> : 30 , <str> : <str> , <str> : [ ] }  def test_create_user ( self ) :          user , pub , priv = self . api . create_user ( ) self . assertIsInstance ( user , User ) self . assertTrue ( self . ec . is_valid_public_bin ( pub . decode ( <str> ) ) ) self . assertTrue ( self . ec . is_valid_private_bin ( priv . decode ( <str> ) ) )  def test_login_user ( self ) :          user , pub , priv = self . api . create_user ( ) user_login = self . api . login_user ( priv . encode ( <str> ) ) self . assertEqual ( user , user_login )  def test_create_borrower_profile ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 1 profile = self . api . create_profile ( user , self . payload ) self . assertIsInstance ( profile , BorrowersProfile ) self . assertEqual ( user . profile_id , profile . id )  def test_create_investor_profile ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 2 profile = self . api . create_profile ( user , self . payload ) self . assertIsInstance ( profile , Profile ) self . assertEqual ( user . profile_id , profile . id )  def test_create_bank_profile ( self ) :          bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 3 profile = self . api . create_profile ( bank , self . payload ) self . assertTrue ( profile ) self . assertIsNone ( bank . profile_id ) self . assertEqual ( self . api . get_role ( bank ) . value , self . payload [ <str> ] )  def test_create_profile_keyerror ( self ) :          user , pub , priv = self . api . create_user ( ) del self . payload [ <str> ] profile = self . api . create_profile ( user , self . payload ) self . assertFalse ( profile )  def test_load_profile_borrower ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 1 profile = self . api . create_profile ( user , self . payload ) loaded_profile = self . api . load_profile ( user ) self . assertEqual ( profile , loaded_profile ) self . assertIsInstance ( profile , BorrowersProfile )  def test_load_profile_investor ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 2 profile = self . api . create_profile ( user , self . payload ) loaded_profile = self . api . load_profile ( user ) self . assertEqual ( profile , loaded_profile ) self . assertIsInstance ( profile , Profile )  def test_load_profile_bank ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 3 profile = self . api . create_profile ( user , self . payload ) loaded_profile = self . api . load_profile ( user ) self . assertTrue ( profile ) self . assertIsNone ( loaded_profile ) self . assertIsNone ( user . profile_id )  def test_place_loan_offer_investor ( self ) :          investor , pub0 , priv0 = self . api . create_user ( ) borrower , pub1 , priv1 = self . api . create_user ( ) bank , pub2 , priv2 = self . api . create_user ( ) self . payload [ <str> ] = 2 profile = self . api . create_profile ( investor , self . payload ) self . api . db . put ( User . type , investor . id , investor ) self . payload [ <str> ] = 1 profile2 = self . api . create_profile ( borrower , self . payload ) self . api . db . put ( User . type , borrower . id , borrower ) self . payload [ <str> ] = 3 profile3 = self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . payload_loan_offer1 [ <str> ] = borrower . id self . payload_loan_offer1 [ <str> ] = mortgage . id loan_offer = self . api . place_loan_offer ( investor , self . payload_loan_offer1 ) borrower = self . api . _get_user ( borrower ) self . assertIsInstance ( loan_offer , Investment ) self . assertIn ( loan_offer . id , investor . investment_ids ) self . assertIn ( loan_offer . id , borrower . investment_ids )  def test_place_loan_offer_borrower ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 1 self . payload_loan_offer1 [ <str> ] = 1 profile = self . api . create_profile ( user , self . payload ) self . payload_loan_offer1 [ <str> ] = user . id loan_offer = self . api . place_loan_offer ( user , self . payload_loan_offer1 ) self . assertIsInstance ( profile , Profile ) self . assertFalse ( loan_offer ) self . assertEqual ( user . investment_ids , [ ] )  def test_place_loan_offer_bank ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 3 self . payload_loan_offer1 [ <str> ] = 3 profile = self . api . create_profile ( user , self . payload ) self . payload_loan_offer1 [ <str> ] = user . id loan_offer = self . api . place_loan_offer ( user , self . payload_loan_offer1 ) self . assertTrue ( profile ) self . assertFalse ( loan_offer ) self . assertEqual ( user . investment_ids , [ ] )  def test_load_investments ( self ) :          investor , _ , _ = self . api . create_user ( ) borrower , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 2 self . api . create_profile ( investor , self . payload ) self . payload [ <str> ] = 1 self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = 3 self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . payload_loan_offer1 [ <str> ] = borrower . id self . payload_loan_offer1 [ <str> ] = mortgage . id loan_offer1 = self . api . place_loan_offer ( investor , self . payload_loan_offer1 ) loan_offer2 = self . api . place_loan_offer ( investor , self . payload_loan_offer1 ) loan_offer3 = self . api . place_loan_offer ( investor , self . payload_loan_offer1 ) self . api . accept_investment_offer ( borrower , { <str> : loan_offer2 . id } ) investments = self . api . load_investments ( investor ) self . assertIsInstance ( investments , list ) for investment , house , campaign , profile in investments :              self . assertIsInstance ( investment , Investment ) self . assertIsInstance ( house , House ) self . assertIsInstance ( campaign , Campaign )  self . assertIn ( loan_offer1 , investments [ 0 ] ) self . assertIn ( loan_offer2 , investments [ 1 ] ) self . assertIn ( loan_offer3 , investments [ 2 ] )  def test_load_borrowers_offers_mortgage_pending ( self ) :          user , _ , _ = self . api . create_user ( ) bank1 , _ , _ = self . api . create_user ( ) bank2 , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 1 self . api . create_profile ( user , self . payload ) self . api . create_profile ( bank1 , self . payload_bank ) self . api . create_profile ( bank2 , self . payload_bank ) loan_request = self . api . create_loan_request ( user , self . payload_loan_request2 ) self . payload_mortgage1 [ <str> ] = loan_request . id self . payload_mortgage2 [ <str> ] = loan_request . id self . payload_mortgage1 [ <str> ] = user . id self . payload_mortgage2 [ <str> ] = user . id self . payload_mortgage1 [ <str> ] = loan_request . house_id self . payload_mortgage2 [ <str> ] = loan_request . house_id self . payload_mortgage1 [ <str> ] = bank1 . id self . payload_mortgage2 [ <str> ] = bank2 . id loan_request1 , mortgage1 = self . api . accept_loan_request ( bank1 , self . payload_mortgage1 ) loan_request2 , mortgage2 = self . api . accept_loan_request ( bank2 , self . payload_mortgage2 ) offers = self . api . load_borrowers_offers ( user ) self . assertIsInstance ( offers [ 0 ] , Mortgage ) self . assertIsInstance ( offers [ 1 ] , Mortgage ) self . assertEqual ( offers [ 0 ] , mortgage1 ) self . assertEqual ( offers [ 1 ] , mortgage2 )  def test_load_borrowers_offers_mortgage_accepted ( self ) :          user , _ , _ = self . api . create_user ( ) investor1 , _ , _ = self . api . create_user ( ) investor2 , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 1 self . api . create_profile ( user , self . payload ) self . payload_investor [ <str> ] = 2 self . api . create_profile ( investor1 , self . payload_investor ) self . api . create_profile ( investor2 , self . payload_investor ) self . payload [ <str> ] = 3 self . api . create_profile ( bank , self . payload_bank ) self . payload_loan_request1 [ <str> ] = [ bank . id ] loan_request = self . api . create_loan_request ( user , self . payload_loan_request1 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = [ investor1 . id , investor2 . id ] self . payload_mortgage3 [ <str> ] = user . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( user , { <str> : mortgage . id } ) self . payload_investment1 [ <str> ] = mortgage . id self . payload_investment2 [ <str> ] = mortgage . id self . payload_investment1 [ <str> ] = user . id self . payload_investment2 [ <str> ] = user . id investment1 = self . api . place_loan_offer ( investor1 , self . payload_investment1 ) investment2 = self . api . place_loan_offer ( investor2 , self . payload_investment2 ) offers = self . api . load_borrowers_offers ( user ) self . assertIsInstance ( offers [ 0 ] , Investment ) self . assertIsInstance ( offers [ 1 ] , Investment ) self . assertEqual ( offers [ 0 ] , investment1 ) self . assertEqual ( offers [ 1 ] , investment2 )  def test_load_borrower_loans ( self ) :          borrower , _ , _ = self . api . create_user ( ) investor1 , _ , _ = self . api . create_user ( ) investor2 , _ , _ = self . api . create_user ( ) investor3 , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 1 self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = 2 self . api . create_profile ( investor1 , self . payload ) self . api . create_profile ( investor2 , self . payload ) self . api . create_profile ( investor3 , self . payload ) self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . payload_investment1 [ <str> ] = mortgage . id self . payload_investment2 [ <str> ] = mortgage . id self . payload_investment3 [ <str> ] = mortgage . id self . payload_investment1 [ <str> ] = investor1 . id self . payload_investment2 [ <str> ] = investor2 . id self . payload_investment3 [ <str> ] = investor3 . id investment1 = self . api . place_loan_offer ( investor1 , self . payload_investment1 ) investment2 = self . api . place_loan_offer ( investor2 , self . payload_investment2 ) investment3 = self . api . place_loan_offer ( investor3 , self . payload_investment3 ) updated_borrower = self . api . db . get ( User . type , borrower . id ) self . api . accept_investment_offer ( updated_borrower , { <str> : investment1 . id } ) self . api . accept_investment_offer ( updated_borrower , { <str> : investment2 . id } ) self . api . reject_investment_offer ( updated_borrower , { <str> : investment3 . id } ) loans = self . api . load_borrowers_loans ( updated_borrower ) self . assertIn ( mortgage , loans [ 0 ] ) self . assertIn ( investment1 , loans [ 1 ] ) self . assertIn ( investment2 , loans [ 2 ] ) self . assertEqual ( len ( loans ) , 3 )  def test_get_role_borrower ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 1 self . api . create_profile ( user , self . payload ) role = self . api . get_role ( user ) self . assertEqual ( role . value , user . role_id ) self . assertEqual ( role . name , <str> )  def test_get_role_investor ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 2 self . api . create_profile ( user , self . payload ) role = self . api . get_role ( user ) self . assertEqual ( role . value , user . role_id ) self . assertEqual ( role . name , <str> )  def test_get_role_bank ( self ) :          user , pub , priv = self . api . create_user ( ) self . payload [ <str> ] = 3 self . api . create_profile ( user , self . payload ) role = self . api . get_role ( user ) self . assertEqual ( role . value , user . role_id ) self . assertEqual ( role . name , <str> )  def test_load_open_market ( self ) :          self . database . backend . clear ( ) open_market = self . api . load_open_market ( ) self . assertFalse ( open_market ) borrower , _ , _ = self . api . create_user ( ) role_id = Role ( 1 ) borrower . role_id = role_id self . api . create_profile ( borrower , self . payload ) self . api . db . put ( User . type , borrower . id , borrower ) bank , _ , _ = self . api . create_user ( ) role_id = Role ( 3 ) bank . role_id = role_id self . api . db . put ( User . type , bank . id , bank ) self . payload_loan_request [ <str> ] = borrower . id self . payload_loan_request [ <str> ] = [ bank . id ] loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request ) self . assertIsInstance ( loan_request , LoanRequest ) self . payload_mortgage [ <str> ] = borrower . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage ) self . payload_mortgage [ <str> ] = mortgage . id self . api . accept_mortgage_offer ( borrower , self . payload_mortgage ) open_market = self . api . load_open_market ( ) self . assertTrue ( open_market ) campaigns = self . api . db . get_all ( Campaign . type ) for campaign in campaigns :              campaign . completed = True self . api . db . put ( Campaign . type , campaign . id , campaign )  open_market = self . api . load_open_market ( ) self . assertFalse ( open_market )  def test_create_loan_request_borrower ( self ) :          user , pub , priv = self . api . create_user ( ) role_id = Role ( 1 ) user . role_id = role_id self . api . create_profile ( user , self . payload ) self . api . db . put ( User . type , user . id , user ) bank1 , pub1 , priv1 = self . api . create_user ( ) bank2 , pub2 , priv2 = self . api . create_user ( ) self . payload_loan_request [ <str> ] = user . id self . payload_loan_request [ <str> ] = [ bank1 . id , bank2 . id ] loan_request_1 = self . api . create_loan_request ( user , self . payload_loan_request ) self . assertIsInstance ( loan_request_1 , LoanRequest ) self . assertEqual ( user . loan_request_ids , [ loan_request_1 . id ] ) for bank in loan_request_1 . status :              self . assertEqual ( loan_request_1 . status [ bank ] , STATUS . PENDING )  updated_bank1 = self . api . db . get ( User . type , bank1 . id ) updated_bank2 = self . api . db . get ( User . type , bank2 . id ) self . assertIn ( loan_request_1 . id , updated_bank1 . loan_request_ids ) self . assertIn ( loan_request_1 . id , updated_bank2 . loan_request_ids ) self . payload [ <str> ] = user . id loan_request_2 = self . api . create_loan_request ( user , self . payload_loan_request ) self . assertFalse ( loan_request_2 )  def test_create_loan_request_investor ( self ) :          user , pub , priv = self . api . create_user ( ) role_id = Role ( 2 ) user . role_id = role_id self . api . db . put ( User . type , user . id , user ) self . payload [ <str> ] = user . id loan_request = self . api . create_loan_request ( user , self . payload_loan_request ) self . assertFalse ( loan_request ) self . assertEquals ( user . loan_request_ids , [ ] )  def test_create_loan_request_bank ( self ) :          user , pub , priv = self . api . create_user ( ) role_id = Role ( 3 ) user . role_id = role_id self . api . db . put ( User . type , user . id , user ) self . payload [ <str> ] = user . id self . payload [ <str> ] = [ user ] loan_request = self . api . create_loan_request ( user , self . payload_loan_request ) self . assertFalse ( loan_request ) self . assertEquals ( user . loan_request_ids , [ ] )  def test_load_all_loan_requests ( self ) :          borrower1 , _ , _ = self . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . api . create_profile ( borrower1 , self . payload ) self . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . api . create_user ( ) role_id = Role . BORROWER . value borrower2 . role_id = role_id self . api . create_profile ( borrower2 , self . payload ) self . api . db . put ( User . type , borrower2 . id , borrower2 ) borrower3 , _ , _ = self . api . create_user ( ) role_id = Role . BORROWER . value borrower3 . role_id = role_id self . api . create_profile ( borrower3 , self . payload ) self . api . db . put ( User . type , borrower3 . id , borrower3 ) bank , _ , _ = self . api . create_user ( ) role_id = Role ( 3 ) . value bank . role_id = role_id self . api . db . put ( User . type , bank . id , bank ) loan_request_1 = self . api . create_loan_request ( borrower1 , self . payload_loan_request ) self . payload_loan_request [ <str> ] = [ bank . id ] loan_request_2 = self . api . create_loan_request ( borrower2 , self . payload_loan_request ) loan_request_3 = self . api . create_loan_request ( borrower3 , self . payload_loan_request ) updated_bank = self . api . db . get ( User . type , bank . id ) pending_loan_requests = self . api . load_all_loan_requests ( updated_bank ) self . assertIsInstance ( pending_loan_requests , list ) self . assertNotIn ( loan_request_1 , pending_loan_requests [ 0 ] ) self . assertIn ( loan_request_2 , pending_loan_requests [ 0 ] ) self . assertIn ( loan_request_3 , pending_loan_requests [ 1 ] )  def test_load_single_loan_request ( self ) :          borrower , pub0 , priv0 = self . api . create_user ( ) role_id = Role ( 1 ) borrower . role_id = role_id self . api . db . put ( User . type , borrower . id , borrower ) self . payload [ <str> ] = 1 profile = self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = borrower . id loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request ) self . assertIsInstance ( loan_request , LoanRequest ) self . payload_loan_request [ <str> ] = loan_request . id borrower . update ( self . api . db ) loaded_loan_request = self . api . load_single_loan_request ( self . payload_loan_request ) self . assertIsInstance ( loaded_loan_request [ 0 ] , LoanRequest ) self . assertEqual ( loan_request . id , loaded_loan_request [ 0 ] . id ) self . assertIsInstance ( loaded_loan_request [ 1 ] , BorrowersProfile ) self . assertEqual ( borrower . profile_id , loaded_loan_request [ 1 ] . id ) self . assertIsInstance ( loaded_loan_request [ 2 ] , House )  def test_accept_loan_request ( self ) :          borrower , pub0 , priv0 = self . api . create_user ( ) role_id = Role ( 1 ) borrower . role_id = role_id self . api . create_profile ( borrower , self . payload ) self . api . db . put ( User . type , borrower . id , borrower ) bank , pub1 , priv1 = self . api . create_user ( ) role_id = Role ( 3 ) bank . role_id = role_id self . api . db . put ( User . type , bank . id , bank ) self . payload_loan_request [ <str> ] = borrower . id self . payload_loan_request [ <str> ] = [ bank . id , bank . id ] loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request ) self . assertIsInstance ( loan_request , LoanRequest ) self . payload_mortgage [ <str> ] = borrower . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage ) self . assertEqual ( accepted_loan_request . status [ bank . id ] , STATUS . ACCEPTED ) updated_borrower = self . api . db . get ( User . type , borrower . id ) self . assertIn ( mortgage . id , updated_borrower . mortgage_ids ) updated_bank = self . api . db . get ( User . type , bank . id ) self . assertIn ( mortgage . id , updated_bank . mortgage_ids )  def test_reject_loan_request ( self ) :          borrower , pub0 , priv0 = self . api . create_user ( ) role_id = Role ( 1 ) borrower . role_id = role_id self . api . create_profile ( borrower , self . payload ) self . api . db . put ( User . type , borrower . id , borrower ) bank1 , pub1 , priv1 = self . api . create_user ( ) bank2 , pub2 , priv2 = self . api . create_user ( ) self . payload_loan_request [ <str> ] = borrower . id self . payload_loan_request [ <str> ] = [ bank1 . id , bank2 . id ] loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request ) self . assertIsInstance ( loan_request , LoanRequest ) self . assertNotEqual ( borrower . loan_request_ids , [ ] ) self . payload_loan_request [ <str> ] = loan_request . id bank1 = self . api . db . get ( User . type , bank1 . id ) rejected_loan_request1 = self . api . reject_loan_request ( bank1 , self . payload_loan_request ) self . assertEqual ( rejected_loan_request1 . status [ bank1 . id ] , STATUS . REJECTED ) self . assertNotIn ( rejected_loan_request1 , bank1 . loan_request_ids ) updated_borrower = self . api . db . get ( User . type , borrower . id ) self . assertTrue ( updated_borrower . loan_request_ids ) bank2 = self . api . db . get ( User . type , bank2 . id ) rejected_loan_request2 = self . api . reject_loan_request ( bank2 , self . payload_loan_request ) self . assertEqual ( rejected_loan_request2 . status [ bank2 . id ] , STATUS . REJECTED ) self . assertNotIn ( rejected_loan_request2 , bank2 . loan_request_ids ) updated_borrower = self . api . db . get ( User . type , borrower . id ) self . assertFalse ( updated_borrower . loan_request_ids )  def test_reject_investment ( self ) :          investor , _ , _ = self . api . create_user ( ) borrower , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 2 self . api . create_profile ( investor , self . payload ) self . payload [ <str> ] = 1 self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = 3 self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . payload_loan_offer1 [ <str> ] = borrower . id self . payload_loan_offer1 [ <str> ] = mortgage . id investment = self . api . place_loan_offer ( investor , self . payload_loan_offer1 ) borrower . update ( self . api . db ) self . api . reject_investment_offer ( borrower , { <str> : investment . id } ) investment . update ( self . api . db ) investor_investments = self . api . load_investments ( investor ) borrower_investments = self . api . load_investments ( borrower ) for borrower_investment in borrower_investments :              self . assertNotIn ( investment , borrower_investment )  for investor_investment in investor_investments :              self . assertNotIn ( investment , investor_investment )  self . assertIn ( investment . id , investor . investment_ids ) self . assertEqual ( investment . status , STATUS . REJECTED )  def test_reject_mortgage ( self ) :          investor , _ , _ = self . api . create_user ( ) borrower , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 2 self . api . create_profile ( investor , self . payload ) self . payload [ <str> ] = 1 self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = 3 self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . reject_mortgage_offer ( borrower , { <str> : mortgage . id } ) mortgage . update ( self . api . db ) loan_request . update ( self . api . db ) self . assertNotIn ( mortgage . id , borrower . mortgage_ids ) self . assertIn ( mortgage . id , bank . mortgage_ids ) self . assertEqual ( mortgage . status , STATUS . REJECTED ) self . assertEqual ( loan_request . status [ bank . id ] , STATUS . REJECTED )  def test_load_bids ( self ) :          self . database . backend . clear ( ) borrower , _ , _ = self . api . create_user ( ) role_id = Role ( 1 ) borrower . role_id = role_id self . api . create_profile ( borrower , self . payload ) self . api . db . put ( User . type , borrower . id , borrower ) investor , pub , priv = self . api . create_user ( ) role_id = Role ( 2 ) investor . role_id = role_id self . api . create_profile ( investor , self . payload_investor ) self . api . db . put ( User . type , investor . id , investor ) bank , _ , _ = self . api . create_user ( ) role_id = Role ( 3 ) bank . role_id = role_id self . api . db . put ( User . type , bank . id , bank ) self . payload_loan_request [ <str> ] = borrower . id self . payload_loan_request [ <str> ] = [ bank . id ] loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request ) self . assertIsInstance ( loan_request , LoanRequest ) self . payload_mortgage [ <str> ] = borrower . id self . payload_mortgage [ <str> ] = loan_request . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] accepted_loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage ) self . payload_mortgage [ <str> ] = mortgage . id self . api . accept_mortgage_offer ( borrower , self . payload_mortgage ) bids , house , campaign = self . api . load_bids ( self . payload_mortgage ) self . assertFalse ( bids ) self . api . place_loan_offer ( investor , self . payload_mortgage ) bids = self . api . load_bids ( self . payload_mortgage ) self . assertTrue ( bids ) self . assertIsInstance ( house , House ) self . assertIsInstance ( campaign , Campaign )  def test_load_mortgages ( self ) :          borrower1 , _ , _ = self . api . create_user ( ) role_id = Role . BORROWER . value borrower1 . role_id = role_id self . api . create_profile ( borrower1 , self . payload ) self . api . db . put ( User . type , borrower1 . id , borrower1 ) borrower2 , _ , _ = self . api . create_user ( ) role_id = Role . BORROWER . value borrower2 . role_id = role_id self . api . create_profile ( borrower2 , self . payload ) self . api . db . put ( User . type , borrower2 . id , borrower2 ) bank , _ , _ = self . api . create_user ( ) role_id = Role ( 3 ) bank . role_id = role_id self . api . db . put ( User . type , bank . id , bank ) self . payload_loan_request [ <str> ] = borrower1 . id self . payload_loan_request [ <str> ] = [ bank . id ] loan_request1 = self . api . create_loan_request ( borrower1 , self . payload_loan_request ) self . assertIsInstance ( loan_request1 , LoanRequest ) self . payload_loan_request [ <str> ] = borrower2 . id self . payload_loan_request [ <str> ] = [ bank . id ] loan_request2 = self . api . create_loan_request ( borrower2 , self . payload_loan_request ) self . assertIsInstance ( loan_request2 , LoanRequest ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] self . payload_mortgage [ <str> ] = self . payload_loan_request [ <str> ] _ , mortgage1 = self . api . accept_loan_request ( bank , self . payload_mortgage ) self . payload_mortgage [ <str> ] = borrower1 . id self . payload_mortgage [ <str> ] = loan_request1 . id _ , mortgage2 = self . api . accept_loan_request ( bank , self . payload_mortgage ) payload = { <str> : mortgage1 . id } self . api . accept_mortgage_offer ( borrower1 , payload ) bank = self . api . db . get ( User . type , bank . id ) mortgages = self . api . load_mortgages ( bank ) self . assertIn ( mortgage1 , mortgages [ 0 ] ) self . assertIn ( mortgage2 , mortgages [ 1 ] ) self . assertEqual ( len ( mortgages ) , 2 )  def test_reject_pending_campaign_bids ( self ) :          investor1 , _ , _ = self . api . create_user ( ) investor2 , _ , _ = self . api . create_user ( ) borrower , _ , _ = self . api . create_user ( ) bank , _ , _ = self . api . create_user ( ) self . payload [ <str> ] = 2 self . api . create_profile ( investor1 , self . payload ) self . api . create_profile ( investor2 , self . payload ) self . payload [ <str> ] = 1 self . api . create_profile ( borrower , self . payload ) self . payload [ <str> ] = 3 self . api . create_profile ( bank , self . payload_bank ) loan_request = self . api . create_loan_request ( borrower , self . payload_loan_request2 ) self . payload_mortgage3 [ <str> ] = loan_request . id self . payload_mortgage3 [ <str> ] = borrower . id self . payload_mortgage3 [ <str> ] = loan_request . house_id self . payload_mortgage3 [ <str> ] = bank . id loan_request , mortgage = self . api . accept_loan_request ( bank , self . payload_mortgage3 ) self . api . accept_mortgage_offer ( borrower , { <str> : mortgage . id } ) self . payload_loan_offer1 [ <str> ] = borrower . id self . payload_loan_offer1 [ <str> ] = mortgage . id investment1 = self . api . place_loan_offer ( investor1 , self . payload_loan_offer1 ) self . payload_loan_offer1 [ <str> ] = 300000 investment2 = self . api . place_loan_offer ( investor2 , self . payload_loan_offer1 ) borrower . update ( self . api . db ) self . api . accept_investment_offer ( borrower , { <str> : investment2 . id } ) investment1 . update ( self . api . db ) investment2 . update ( self . api . db ) self . assertEquals ( investment1 . status , STATUS . REJECTED ) self . assertEquals ( investment2 . status , STATUS . ACCEPTED )   class CryptoTestSuite ( unittest . TestCase ) :      def setUp ( self ) :          self . public = <str> <str> <str> <str> <str> self . private = <str> <str> <str> <str> <str> <str> <str>  def test_with_valid_private ( self ) :          generated_public_key = get_public_key ( self . private ) self . assertEqual ( self . public , generated_public_key )  def test_with_invalid_private ( self ) :          private_list = list ( self . private ) private_list [ 160 ] = <str> new_private = <str> . join ( private_list ) generated_public_key = get_public_key ( new_private ) self . assertIsNone ( generated_public_key ) self . assertNotEqual ( self . private , new_private )  def test_invalid_key ( self ) :          generated_public_key = get_public_key ( <str> ) self . assertIsNone ( generated_public_key )    