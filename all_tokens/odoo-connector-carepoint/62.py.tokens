import mock from odoo . addons . connector_carepoint . models import fdb_img_mfg from . . common import SetUpCarepointBase model = <str> class EndTestException ( Exception ) :      pass  class FdbImgMfgTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( FdbImgMfgTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model )  @ property def record ( self ) :          return { <str> : 123 , <str> : <str> , }   class TestFdbImgMfgImportMapper ( FdbImgMfgTestBase ) :      def setUp ( self ) :          super ( TestFdbImgMfgImportMapper , self ) . setUp ( ) self . Unit = fdb_img_mfg . FdbImgMfgImportMapper self . unit = self . Unit ( self . mock_env )  def test_carepoint_id ( self ) :          expect = { <str> : self . record [ <str> ] } res = self . unit . carepoint_id ( self . record ) self . assertDictEqual ( expect , res )  def test_manufacturer_id_search ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . manufacturer_id ( self . record ) env [ <str> ] . search . assert_called_once_with ( [ ( <str> , <str> , self . record [ <str> ] . strip ( ) ) ] , limit = 1 , )   def test_manufacturer_id_return ( self ) :          expect = mock . MagicMock ( ) with mock . patch . object ( self . unit . session , <str> ) as env :              env [ <str> ] . search . return_value = [ expect ] res = self . unit . manufacturer_id ( self . record ) self . assertDictEqual ( { <str> : expect . id } , res , )     