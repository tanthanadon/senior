import mock from odoo . addons . connector_carepoint . models import carepoint_vendor from . . common import SetUpCarepointBase class EndTestException ( Exception ) :      pass  class CarepointVendorTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( CarepointVendorTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : <str> , <str> : <str> , <str> : 123 , }   class TestCarepointVendorImportMapper ( CarepointVendorTestBase ) :      def setUp ( self ) :          super ( TestCarepointVendorImportMapper , self ) . setUp ( ) self . Unit = carepoint_vendor . CarepointVendorImportMapper self . unit = self . Unit ( self . mock_env )  def test_customer ( self ) :          res = self . unit . customer ( self . record ) self . assertDictEqual ( { <str> : False } , res )  def test_supplier ( self ) :          res = self . unit . supplier ( self . record ) self . assertDictEqual ( { <str> : True } , res )  def test_is_company ( self ) :          res = self . unit . is_company ( self . record ) self . assertDictEqual ( { <str> : True } , res )  def test_state_id_search ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . state_id ( self . record ) env [ <str> ] . search . assert_called_once_with ( [ ( <str> , <str> , self . record [ <str> ] . upper ( ) ) ] , limit = 1 , )   def test_state_id_return ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              expect = mock . MagicMock ( ) env [ <str> ] . search . return_value = [ expect ] res = self . unit . state_id ( self . record ) self . assertDictEqual ( { <str> : expect . id , <str> : expect . country_id . id } , res , )   def test_carepoint_id ( self ) :          res = self . unit . carepoint_id ( self . record ) self . assertDictEqual ( { <str> : self . record [ <str> ] } , res )  def test_odoo_id_search ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . odoo_id ( self . record ) env [ <str> ] . search . assert_called_once_with ( [ ( <str> , <str> , self . record [ <str> ] . strip ( ) ) ] , limit = 1 , )   def test_odoo_id_return ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              expect = [ mock . MagicMock ( ) ] env [ <str> ] . search . return_value = expect res = self . unit . odoo_id ( self . record ) self . assertDictEqual ( { <str> : expect [ 0 ] . id } , res , )    class TestCarepointVendorExportMapper ( CarepointVendorTestBase ) :      def setUp ( self ) :          super ( TestCarepointVendorExportMapper , self ) . setUp ( ) self . Unit = carepoint_vendor . CarepointVendorExportMapper self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( )  def state ( self ) :          res = self . unit . state ( self . record ) self . assertDictEqual ( { <str> : self . record . state_id . code } , res )    