import mock from odoo . addons . connector_carepoint . models import phone_abstract from . . common import SetUpCarepointBase try :      from carepoint . models . phone_mixin import EnumPhoneType  except ImportError :      pass  class EndTestException ( Exception ) :      pass  class PhoneAbstractTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( PhoneAbstractTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : 123 , <str> : EnumPhoneType . home , }  def new_partner ( self ) :          return self . env [ <str> ] . create ( { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } )  def new_patient ( self , partner = None ) :          if not partner :              partner = self . new_partner ( )  return self . env [ <str> ] . create ( { <str> : partner . id , } )   class TestCarepointPhoneAbstract ( PhoneAbstractTestBase ) :      def setUp ( self ) :          super ( TestCarepointPhoneAbstract , self ) . setUp ( ) self . model = self . env [ <str> ]  def new_phone ( self , partner = None , field = <str> ) :          if partner is None :              partner = self . new_partner ( )  vals = { <str> : field , <str> : partner [ field ] , } if partner :              vals [ <str> ] = partner . id  return self . env [ <str> ] . create ( vals )  def new_patient_phone ( self ) :          self . patient = self . new_patient ( ) self . phone = self . new_phone ( self . patient . partner_id ) return self . model . create ( { <str> : self . patient . partner_id . id , <str> : self . phone . id , <str> : <str> , } )  def test_compute_partner_id ( self ) :          phone = self . new_patient_phone ( ) self . assertEqual ( phone . partner_id , self . phone . partner_id , )  def test_set_partner_id_blank_phone ( self ) :          phone = self . new_patient_phone ( ) partner = self . new_partner ( ) phone . write ( { <str> : partner . id } ) self . assertEqual ( phone . phone , partner . phone , )  def test_set_partner_id_with_phone ( self ) :          phone = self . new_patient_phone ( ) partner = self . new_partner ( ) expect = <str> partner . phone = expect phone . write ( { <str> : partner . id } ) self . assertEqual ( expect , phone . phone , )  def test_medical_entity_id ( self ) :          phone = self . new_patient_phone ( ) self . assertEqual ( self . patient , phone . medical_entity_id , )  def test_compute_res_id ( self ) :          phone = self . new_patient_phone ( ) self . assertEqual ( self . patient . id , phone . res_id , )  def test_compute_res_id_empty ( self ) :          phone = self . new_patient_phone ( ) phone . res_model = False self . assertFalse ( phone . res_id , )  def test_get_by_partner_existing_phone ( self ) :          phone = self . new_patient_phone ( ) res = phone . _get_by_partner ( phone . partner_id , False , False ) self . assertEqual ( phone , res )  def test_get_by_partner_create ( self ) :          patient = self . new_patient ( ) res = self . model . _get_by_partner ( patient . partner_id , True , False ) for phone in res :              self . assertEqual ( patient . partner_id , phone . partner_id )   def test_get_by_partner_create_fields ( self ) :          patient = self . new_patient ( ) res = self . model . _get_by_partner ( patient . partner_id , True , False ) found_vals = [ ] for phone in res :              self . assertEqual ( patient [ phone . partner_field_name ] , phone . phone , ) found_vals . append ( phone . partner_field_name )  self . assertEqual ( 3 , len ( found_vals ) , <str> , )  def test_get_by_partner_edit ( self ) :          expect = { <str> : <str> , <str> : <str> , <str> : <str> , } partner = self . new_partner ( ) partner . write ( expect ) res = self . model . _get_by_partner ( partner , True , False , ) found_vals = [ ] for phone in res :              self . assertEqual ( partner [ phone . partner_field_name ] , phone . phone , ) found_vals . append ( phone . partner_field_name )  self . assertEqual ( 3 , len ( found_vals ) , <str> , )  def test_get_by_partner_recurse ( self ) :          parent , child = self . new_patient ( ) , self . new_patient ( ) child . parent_id = parent . partner_id . id self . model . _get_by_partner ( parent . partner_id , True , True ) phone = self . model . search ( [ ( <str> , <str> , child . partner_id . id ) ] ) self . assertTrue ( len ( phone ) )  def test_compute_partner_id ( self ) :          phone = self . new_patient_phone ( ) self . assertEqual ( self . patient . partner_id . id , phone . partner_id . id , )   class TestPhoneAbstractImportMapper ( PhoneAbstractTestBase ) :      def setUp ( self ) :          super ( TestPhoneAbstractImportMapper , self ) . setUp ( ) self . Unit = phone_abstract . CarepointPhoneAbstractImportMapper self . unit = self . Unit ( self . mock_env )  def test_partner_id_empty ( self ) :          patient = self . new_patient ( ) res = self . unit . partner_id ( self . record , patient , ) expect = { <str> : patient . commercial_partner_id . id } self . assertDictEqual ( expect , res )  def test_phone_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . phone_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_phone_id_to_odoo ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_odoo . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . phone_id ( self . record )  self . unit . binder_for ( ) . to_odoo . assert_called_once_with ( self . record [ <str> ] , )   def test_phone_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . phone_id ( self . record ) expect = self . unit . binder_for ( ) . to_odoo ( ) self . assertDictEqual ( { <str> : expect } , res )   def test_res_model_and_id ( self ) :          entity = mock . MagicMock ( ) expect = { <str> : entity . id , <str> : entity . _name , } res = self . unit . res_model_and_id ( None , entity ) self . assertDictEqual ( expect , res )  def test_partner_field_name ( self ) :          expect = { <str> : self . unit . PHONE_MAP [ <str> ] , } res = self . unit . partner_field_name ( self . record ) self . assertDictEqual ( expect , res )   class TestPhoneAbstractImporter ( PhoneAbstractTestBase ) :      def setUp ( self ) :          super ( TestPhoneAbstractImporter , self ) . setUp ( ) self . Unit = phone_abstract . CarepointPhoneAbstractImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_record = self . record  def test_import_dependencies ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _import_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record [ <str> ] , <str> , ) , ] )    class TestPhoneAbstractExportMapper ( PhoneAbstractTestBase ) :      def setUp ( self ) :          super ( TestPhoneAbstractExportMapper , self ) . setUp ( ) self . Unit = phone_abstract . CarepointPhoneAbstractExportMapper self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( )  def test_phone_id_get_binder ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . phone_id ( self . record )  self . unit . binder_for . assert_called_once_with ( <str> )   def test_phone_id_to_backend ( self ) :          with mock . patch . object ( self . unit , <str> ) :              self . unit . binder_for ( ) . to_backend . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . phone_id ( self . record )  self . unit . binder_for ( ) . to_backend . assert_called_once_with ( self . record . phone_id . id , )   def test_phone_id_return ( self ) :          with mock . patch . object ( self . unit , <str> ) :              res = self . unit . phone_id ( self . record ) expect = self . unit . binder_for ( ) . to_backend ( ) self . assertDictEqual ( { <str> : expect } , res )   def test_phone_type_cn ( self ) :          self . record . partner_field_name = <str> res = self . unit . phone_type_cn ( self . record ) expect = EnumPhoneType [ <str> ] self . assertDictEqual ( { <str> : expect . value } , res )  def test_static_defaults ( self ) :          self . assertIsInstance ( self . unit . static_defaults ( self . record ) , dict , )   class TestPhoneAbstractExporter ( PhoneAbstractTestBase ) :      def setUp ( self ) :          super ( TestPhoneAbstractExporter , self ) . setUp ( ) self . Unit = phone_abstract . CarepointPhoneAbstractExporter self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( ) self . unit . binding_record = self . record  def test_export_dependencies ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _export_dependencies ( ) mk . assert_has_calls ( [ mock . call ( self . record . phone_id , <str> , ) , ] )     