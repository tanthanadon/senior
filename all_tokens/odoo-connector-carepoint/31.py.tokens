import mock from contextlib import contextmanager from odoo import fields , _ from odoo . addons . connector_carepoint . unit import import_synchronizer from . common import SetUpCarepointBase model = <str> @ contextmanager def mock_base_importer ( obj , patches = None , add = True ) :      _patches = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] if patches :          if add :              patches = _patches + patches   else :          patches = _patches  patches = { p : mock . DEFAULT for p in patches } with mock . patch . multiple ( obj , ** patches ) as mk :          yield mk   class EndTestException ( Exception ) :      pass  class TestCarepointImporter ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( TestCarepointImporter , self ) . setUp ( ) self . model = <str> self . carepoint_id = <str> self . carepoint_record = { <str> : fields . Datetime . from_string ( <str> ) , } self . binding_id = 1234 self . Importer = import_synchronizer . CarepointImporter self . mock_env = self . get_carepoint_helper ( self . model )  def _new_record ( self , sync_date = <str> ) :          return self . env [ self . model ] . create ( { <str> : <str> , <str> : sync_date , <str> : self . env . ref ( <str> ) . id , } )  def _new_importer ( self , carepoint_id = None , carepoint_record = None ) :          importer = self . Importer ( self . mock_env ) if carepoint_id is not None :              importer . carepoint_id = carepoint_id  if carepoint_record is not None :              importer . carepoint_record = carepoint_record  return importer  def test_int_or_str_int ( self ) :          expect = 12345 res = import_synchronizer . int_or_str ( str ( expect ) ) self . assertEqual ( expect , res )  def test_int_or_str_str ( self ) :          expect = mock res = import_synchronizer . int_or_str ( expect ) self . assertEqual ( str ( expect ) , res )  def test_init_calls_sets_carepoint_id ( self ) :          res = self . _new_importer ( ) self . assertEqual ( None , res . carepoint_id )  def test_init_calls_sets_carepoint_record ( self ) :          res = self . _new_importer ( ) self . assertEqual ( None , res . carepoint_record )  def test_get_carepoint_data_read ( self ) :          importer = self . _new_importer ( self . carepoint_id ) with self . mock_adapter ( importer ) as mk :              importer . _get_carepoint_data ( ) mk . read . assert_called_once_with ( self . carepoint_id )   def test_get_carepoint_data_return ( self ) :          importer = self . _new_importer ( self . carepoint_id ) with self . mock_adapter ( importer ) as mk :              res = importer . _get_carepoint_data ( ) self . assertEqual ( mk . read ( ) , res )   def test_is_current_assert_record ( self ) :          with self . assertRaises ( AssertionError ) :              self . _new_importer ( ) . _is_current ( None )   def test_is_current_no_chg_date ( self ) :          res = self . _new_importer ( carepoint_record = { <str> : False } ) res = res . _is_current ( True ) self . assertEqual ( None , res )  def test_is_current_no_binding ( self ) :          res = self . _new_importer ( carepoint_record = self . carepoint_record ) res = res . _is_current ( False ) self . assertEqual ( None , res )  def test_is_current_no_sync_date ( self ) :          rec_id = self . _new_record ( None ) res = self . _new_importer ( carepoint_record = self . carepoint_record ) res = res . _is_current ( rec_id ) self . assertEqual ( None , res )  def test_is_current_should_sync ( self ) :          rec_id = self . _new_record ( fields . Datetime . now ( ) ) res = self . _new_importer ( carepoint_record = self . carepoint_record ) res = res . _is_current ( rec_id ) self . assertTrue ( res )  def test_is_current_should_not_sync ( self ) :          rec_id = self . _new_record ( ) res = self . _new_importer ( carepoint_record = self . carepoint_record ) res = res . _is_current ( rec_id ) self . assertFalse ( res )  def test_import_dependency_no_carepoint_id ( self ) :          res = self . _new_importer ( ) . _import_dependency ( False , True ) self . assertEqual ( None , res )  def test_import_dependency_gets_binder ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . binder_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _import_dependency ( True , self . model )  importer . binder_for . assert_called_once_with ( self . model )   def test_import_dependency_always ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . unit_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _import_dependency ( True , self . model , always = True )  importer . binder_for . to_odoo . assert_not_called ( )   def test_import_dependency_no_odoo_binder ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . _import_dependency ( self . carepoint_id , self . model , ) importer . binder_for ( ) . to_odoo . assert_called_once_with ( self . carepoint_id )   def test_import_dependency_gets_unit_default ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . unit_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _import_dependency ( True , self . model , always = True )  importer . unit_for . assert_called_once_with ( self . Importer , model = self . model , )   def test_import_dependency_gets_unit_defined ( self ) :          expect = mock . MagicMock ( ) importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . unit_for . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _import_dependency ( True , self . model , importer_class = expect , always = True )  importer . unit_for . assert_called_once_with ( expect , model = self . model , )   def test_import_dependency_runs_import ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . _import_dependency ( self . carepoint_id , self . model , always = True ) importer . unit_for ( ) . run . assert_called_once_with ( self . carepoint_id )   def test_import_dependencies_none ( self ) :          res = self . _new_importer ( ) . _import_dependencies ( ) self . assertEqual ( None , res )  def test_map_data_call ( self ) :          importer = self . _new_importer ( carepoint_record = self . carepoint_record ) with mock_base_importer ( importer , [ <str> ] ) :              importer . _map_data ( ) importer . mapper . map_record . assert_called_once_with ( self . carepoint_record )   def test_map_data_return ( self ) :          importer = self . _new_importer ( carepoint_record = self . carepoint_record ) with mock_base_importer ( importer , [ <str> ] ) :              res = importer . _map_data ( ) self . assertEqual ( importer . mapper . map_record ( ) , res )   def test_validate_data_none ( self ) :          res = self . _new_importer ( ) . _validate_data ( True ) self . assertEqual ( None , res )  def test_must_skip_none ( self ) :          res = self . _new_importer ( ) . _must_skip ( ) self . assertEqual ( None , res )  def test_get_binding_call ( self ) :          importer = self . _new_importer ( self . carepoint_id ) with mock_base_importer ( importer ) :              importer . _get_binding ( ) importer . binder . to_odoo . assert_called_once_with ( self . carepoint_id , unwrap = False , browse = True , )   def test_get_binding_return ( self ) :          importer = self . _new_importer ( self . carepoint_id ) with mock_base_importer ( importer ) :              res = importer . _get_binding ( ) self . assertEqual ( importer . binder . to_odoo ( ) , res )   def test_create_data_call ( self ) :          map_record = mock . MagicMock ( ) expect = { <str> : 123 , <str> : 456 } self . _new_importer ( self . carepoint_id ) . _create_data ( map_record , ** expect ) map_record . values . assert_called_once_with ( for_create = True , ** expect )  def test_create_data_return ( self ) :          map_record = mock . MagicMock ( ) res = self . _new_importer ( self . carepoint_id ) . _create_data ( map_record ) self . assertEqual ( map_record . values ( ) , res )  def test_create_validates_data ( self ) :          expect = <str> importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . _validate_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _create ( expect )  importer . _validate_data . assert_called_once_with ( expect )   def test_create_gets_model_with_context ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              importer . connector_env . model . with_context . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _create ( None )  importer . connector_env . model . with_context . assert_called_once_with ( connector_no_export = True , )   def test_create_does_create ( self ) :          expect = <str> importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              mk = importer . connector_env . model . with_context mk ( ) . create . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _create ( expect )  mk ( ) . create . assert_called_once_with ( expect )   def test_create_returns_binding ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              res = importer . _create ( None ) self . assertEqual ( importer . connector_env . model . with_context ( ) . create ( ) , res )   def test_update_data_call ( self ) :          map_record = mock . MagicMock ( ) expect = { <str> : 123 , <str> : 456 } self . _new_importer ( self . carepoint_id ) . _update_data ( map_record , ** expect ) map_record . values . assert_called_once_with ( ** expect )  def test_update_data_return ( self ) :          map_record = mock . MagicMock ( ) res = self . _new_importer ( self . carepoint_id ) . _update_data ( map_record ) self . assertEqual ( map_record . values ( ) , res )  def test_update_gets_binding_with_context ( self ) :          expect = <str> mk = mock . MagicMock ( ) importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              mk . with_context . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _update ( mk , expect )  mk . with_context . assert_called_once_with ( connector_no_export = True , )   def test_update_does_write ( self ) :          expect = <str> mk = mock . MagicMock ( ) importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              mk . with_context ( ) . write . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . _update ( mk , expect )  mk . with_context ( ) . write . assert_called_once_with ( expect )   def test_after_import_none ( self ) :          res = self . _new_importer ( ) . _after_import ( None ) self . assertEqual ( None , res )  def test_run_sets_carepoint_id ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . _get_carepoint_data . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id )  self . assertEqual ( self . carepoint_id , importer . carepoint_id )   def test_run_returns_skip_if_skip ( self ) :          expect = <str> importer = self . _new_importer ( ) with mock_base_importer ( importer ) :              importer . _must_skip . return_value = expect res = importer . run ( self . carepoint_id ) self . assertEqual ( expect , res )   def test_run_gets_binding ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              importer . _must_skip . return_value = False importer . _get_binding . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id )    def test_run_does_force ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> , <str> ] ) :              importer . _must_skip . return_value = False importer . _before_import . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )  importer . _is_current . assert_not_called ( )   def test_run_no_force ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              importer . _must_skip . return_value = False importer . _is_current . return_value = True res = importer . run ( self . carepoint_id ) self . assertEqual ( _ ( <str> ) , res , )   def test_run_import_depends ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              importer . _must_skip . return_value = False importer . _import_dependencies . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )    def test_run_gets_map_record ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> ] ) :              importer . _map_data . side_effect = EndTestException importer . _must_skip . return_value = False with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )    def test_run_update_data ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> , <str> , <str> , ] ) :              importer . _get_binding . return_value = True importer . _update_data . side_effect = EndTestException importer . _must_skip . return_value = False with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )  importer . _update_data . assert_called_once_with ( importer . _map_data ( ) , )   def test_run_update ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> , <str> , <str> , <str> , ] ) :              importer . _get_binding . return_value = True importer . _update . side_effect = EndTestException importer . _must_skip . return_value = False with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )  importer . _update . assert_called_once_with ( importer . _get_binding ( ) , importer . _update_data ( ) , )   def test_run_create_data ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> , <str> , <str> , ] ) :              importer . _get_binding . return_value = False importer . _create_data . side_effect = EndTestException importer . _must_skip . return_value = False with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )  importer . _create_data . assert_called_once_with ( importer . _map_data ( ) , )   def test_run_create ( self ) :          importer = self . _new_importer ( ) with mock_base_importer ( importer , [ <str> , <str> , <str> , <str> , ] ) :              importer . _get_binding . return_value = False importer . _create . side_effect = EndTestException importer . _must_skip . return_value = False with self . assertRaises ( EndTestException ) :                  importer . run ( self . carepoint_id , True )  importer . _create . assert_called_once_with ( importer . _create_data ( ) , )     