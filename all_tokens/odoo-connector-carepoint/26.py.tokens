import mock from odoo . addons . connector_carepoint import consumer from . common import SetUpCarepointBase mk_file = <str> class TestConsumer ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( TestConsumer , self ) . setUp ( ) self . model = <str> self . binding_id = self . _new_record ( )  def _new_record ( self ) :          return self . env [ self . model ] . create ( { <str> : <str> , <str> : 1234567 , <str> : self . backend . id , <str> : self . env . ref ( <str> ) . id , } )  def test_delay_export_context_no_export ( self ) :          self . session = mock . MagicMock ( ) self . session . context = { <str> : True } res = consumer . delay_export ( self . session , 0 , 0 , 0 ) self . assertEqual ( None , res )  def test_delay_export ( self ) :          fields = { <str> : 123 , <str> : 456 } expect = [ self . session , self . model , self . binding_id ] with mock . patch ( <str> % mk_file ) as mk :              consumer . delay_export ( * expect , vals = fields ) mk . delay . assert_called_once_with ( * expect , fields = fields . keys ( ) )   def test_delay_export_all_bindings_context_no_export ( self ) :          self . session = mock . MagicMock ( ) self . session . context = { <str> : True } res = consumer . delay_export_all_bindings ( self . session , 0 , 0 , 0 ) self . assertEqual ( None , res )  def test_delay_export_all_bindings ( self ) :          fields = { <str> : 123 , <str> : 456 } send = [ self . session , <str> , self . binding_id . odoo_id . id ] expect = [ self . session , self . model , self . binding_id . id ] with mock . patch ( <str> % mk_file ) as mk :              consumer . delay_export_all_bindings ( * send , vals = fields ) mk . delay . assert_called_once_with ( * expect , fields = fields . keys ( ) )     