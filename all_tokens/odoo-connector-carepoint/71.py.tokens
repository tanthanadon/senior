import mock from contextlib import contextmanager from odoo . addons . connector_carepoint . models import fdb_unit from . . common import SetUpCarepointBase model = <str> class EndTestException ( Exception ) :      pass  class FdbUnitTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( FdbUnitTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model )  @ property def record ( self ) :          return { <str> : <str> , <str> : <str> , }   class TestFdbUnitImportMapper ( FdbUnitTestBase ) :      def setUp ( self ) :          super ( TestFdbUnitImportMapper , self ) . setUp ( ) self . Unit = fdb_unit . FdbUnitImportMapper self . unit = self . Unit ( self . mock_env )  @ contextmanager def mock_pint ( self ) :          with mock . patch ( <str> % model ) as ureg :              with mock . patch ( <str> % model ) as infer :                  yield { <str> : ureg , <str> : infer , }    def test_carepoint_id ( self ) :          expect = { <str> : self . record [ <str> ] . strip ( ) } res = self . unit . carepoint_id ( self . record ) self . assertDictEqual ( expect , res )  def test_uom_category_id_search ( self ) :          expect = <str> with mock . patch . object ( self . unit . session , <str> ) as env :              mk = env [ <str> ] mk . search . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _uom_category_id ( expect )  mk . search . assert_called_once_with ( [ ( <str> , <str> , expect ) ] , limit = 1 , )   def test_uom_category_id_search_return ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              mk = env [ <str> ] mk . search . return_value = [ True ] res = self . unit . _uom_category_id ( None ) self . assertEqual ( mk . search ( ) , res )   def test_uom_category_id_create ( self ) :          expect = <str> with mock . patch . object ( self . unit . session , <str> ) as env :              mk = env [ <str> ] mk . search . return_value = [ ] mk . create . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . _uom_category_id ( expect )  mk . create . assert_called_once_with ( { <str> : expect , } )   def test_uom_category_id_create_return ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              mk = env [ <str> ] mk . search . return_value = [ ] res = self . unit . _uom_category_id ( None ) self . assertEqual ( mk . create ( ) , res )   def test_uom_id_ureg ( self ) :          with self . mock_pint ( ) as mk :              mk [ <str> ] . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . uom_id ( self . record )  mk [ <str> ] . assert_called_once_with ( self . record [ <str> ] . strip ( ) )   def test_uom_id_ureg_cc ( self ) :          record = self . record record [ <str> ] = <str> with self . mock_pint ( ) as mk :              mk [ <str> ] . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . uom_id ( record )  mk [ <str> ] . assert_called_once_with ( <str> )   def test_uom_id_ureg_days ( self ) :          record = self . record record [ <str> ] = <str> with self . mock_pint ( ) as mk :              mk [ <str> ] . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . uom_id ( record )  mk [ <str> ] . assert_called_once_with ( <str> )   def test_uom_id_infer_base_unit ( self ) :          with self . mock_pint ( ) as mk :              mk [ <str> ] . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . uom_id ( self . record )  mk [ <str> ] . assert_called_once_with ( mk [ <str> ] ( ) )   def test_uom_id_convert_units_to_base ( self ) :          with self . mock_pint ( ) as mk :              mk [ <str> ] ( ) . to . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                  self . unit . uom_id ( self . record )  mk [ <str> ] ( ) . to . assert_called_once_with ( mk [ <str> ] ( ) )   def test_uom_id_gets_category ( self ) :          with self . mock_pint ( ) as mk :              with mock . patch . object ( self . unit , <str> ) as categ :                  categ . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                      self . unit . uom_id ( self . record )  categ . assert_called_once_with ( str ( mk [ <str> ] ( ) ) )    def test_uom_id_search ( self ) :          with self . mock_pint ( ) as mk :              with mock . patch . object ( self . unit . session , <str> ) as env :                  env [ <str> ] . search . side_effect = EndTestException with self . assertRaises ( EndTestException ) :                      self . unit . uom_id ( self . record )  env [ <str> ] . search . assert_called_once_with ( [ ( <str> , <str> , str ( mk [ <str> ] ( ) ) ) ] , limit = 1 , )    def test_uom_id_returns_existing ( self ) :          expect = mock . MagicMock ( ) with self . mock_pint ( ) :              with mock . patch . object ( self . unit . session , <str> ) as env :                  env [ <str> ] . search . return_value = [ expect ] res = self . unit . uom_id ( self . record ) self . assertDictEqual ( { <str> : expect . id } , res )    def test_uom_id_root ( self ) :          expect = mock . MagicMock ( ) with self . mock_pint ( ) as mk :              with mock . patch . object ( self . unit , <str> ) as categ :                  with mock . patch . object ( self . unit . session , <str> ) :                      mk [ <str> ] . return_value = expect mk [ <str> ] . return_value = expect res = self . unit . uom_id ( self . record ) expect = { <str> : self . record [ <str> ] . strip ( ) , <str> : categ ( ) . id , <str> : <str> , } self . assertDictEqual ( expect , res )     def test_uom_id_smaller ( self ) :          with self . mock_pint ( ) as mk :              with mock . patch . object ( self . unit , <str> ) as categ :                  with mock . patch . object ( self . unit . session , <str> ) :                      mk [ <str> ] ( ) . to ( ) . m = - 100 mk [ <str> ] ( ) . m = 100 res = self . unit . uom_id ( self . record ) expect = { <str> : self . record [ <str> ] . strip ( ) , <str> : categ ( ) . id , <str> : <str> , <str> : mk [ <str> ] ( ) . m . __rmul__ ( ) , } self . assertDictEqual ( expect , res )     def test_uom_id_bigger ( self ) :          with self . mock_pint ( ) as mk :              with mock . patch . object ( self . unit , <str> ) as categ :                  with mock . patch . object ( self . unit . session , <str> ) :                      mk [ <str> ] ( ) . to ( ) . m = 100 mk [ <str> ] ( ) . m = - 100 res = self . unit . uom_id ( self . record ) expect = { <str> : self . record [ <str> ] . strip ( ) , <str> : categ ( ) . id , <str> : <str> , <str> : mk [ <str> ] ( ) . m . __rmul__ ( ) , } self . assertDictEqual ( expect , res )       