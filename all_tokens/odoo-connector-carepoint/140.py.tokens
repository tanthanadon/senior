from odoo import models , api , fields from odoo . addons . first_databank . models . fdb_pem_moe import TYPES class WebsiteFdbMedicamentDescription ( models . TransientModel ) :      _name = <str> _description = <str> medicament_ids = fields . Many2many ( string = <str> , comodel_name = <str> , default = lambda s : s . _default_medicament_ids ( ) , readonly = True , ) gcn_id = fields . Many2one ( comodel_name = <str> , compute = <str> , readonly = True , ) monograph_id = fields . Many2one ( string = <str> , comodel_name = <str> , default = lambda s : s . _default_monograph_id ( ) , domain = <str> , ) template_id = fields . Many2one ( string = <str> , comodel_name = <str> , default = lambda s : s . _default_template_id ( ) , ) monograph_html = fields . Html ( ) @ api . model def _default_medicament_ids ( self ) :          model = <str> if self . env . context . get ( <str> ) != model :              return  res = [ ] if self . env . context . get ( <str> ) :              res . append ( self . env . context [ <str> ] )  if self . env . context . get ( <str> ) :              res . extend ( self . env . context [ <str> ] )  return [ 6 , 0 , res ]  @ api . multi def _compute_gcn_id ( self ) :          for rec_id in self :              if rec_id . medicament_ids :                  rec_id . gcn_id = rec_id . medicament_ids [ 0 ] . gcn_id    @ api . model def _default_monograph_id ( self ) :          medicament_id = self . env [ <str> ] . browse ( self . _default_medicament_id ( ) ) fdb_gcn_id = self . env [ <str> ] . search ( [ ( <str> , <str> , medicament_id . gcn_id . id ) , ] , limit = 1 , ) if not fdb_gcn_id . monograph_ids :              return  return fdb_gcn_id . monograph_ids [ 0 ] . id  @ api . model def _default_template_id ( self ) :          template_id = self . env . ref ( <str> ) if template_id :              return template_id . id   @ api . multi @ api . onchange ( <str> ) def _onchange_template_id ( self ) :          self . _render_save ( )  @ api . multi def sync_description ( self ) :          for rec_id in self :              html = rec_id . monograph_html for medicament_id in rec_id . medicament_ids :                  medicament_id . product_id . website_description = html    @ api . multi def _render_save ( self ) :          for rec_id in self :              rec_id . monograph_html = rec_id . _render ( )   @ api . multi def _render ( self ) :          return self . template_id . render ( self . _get_template_values ( ) , engine = <str> , )  @ api . multi def _get_template_values ( self ) :          self . ensure_one ( ) return { <str> : self . medicament_ids [ 0 ] , <str> : self . monograph_id , <str> : self . monograph_id . _get_sections_dict ( ) , <str> : dict ( ( k , v ) for k , v in TYPES ) , }    