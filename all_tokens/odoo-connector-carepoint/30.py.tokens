import importlib import mock from contextlib import contextmanager import odoo . tests . common as common from odoo . addons . connector . session import ConnectorSession try :      from carepoint . db import Db as CarepointDb  except ImportError :      pass  backend_adapter = <str> @ contextmanager def mock_job_delay_to_direct ( job_path ) :      job_module , job_name = job_path . rsplit ( <str> , 1 ) module = importlib . import_module ( job_module ) job_func = getattr ( module , job_name , None ) assert job_func , <str> % ( job_name , job_module ) def clean_args_for_func ( * args , ** kwargs ) :          kwargs . pop ( <str> , None ) kwargs . pop ( <str> , None ) kwargs . pop ( <str> , None ) kwargs . pop ( <str> , None ) kwargs . pop ( <str> , None ) job_func ( * args , ** kwargs )  with mock . patch ( job_path ) as patched_job :          patched_job . delay . side_effect = clean_args_for_func yield patched_job   @ contextmanager def mock_api ( instantiated = False ) :      with mock . patch ( <str> % backend_adapter ) as API :          yield API ( ) if instantiated else API   @ contextmanager def mock_adapter ( unit ) :      with mock . patch . object ( unit , <str> ) as API :          yield API   class EndTestException ( Exception ) :      pass  class CarepointHelper ( object ) :      def __init__ ( self , env , model_name , backend ) :          self . cr = env . cr self . model = env [ model_name ] self . backend = backend . get_backend ( ) self . backend_record = backend self . session = ConnectorSession ( env . cr , env . uid , env . context , ) self . connector_unit = { }  def get_connector_unit ( self , unit_class ) :          try :              return self . connector_unit [ unit_class ]  except KeyError :              self . connector_unit [ unit_class ] = mock . MagicMock ( ) return self . connector_unit [ unit_class ]    class SetUpCarepointBase ( common . TransactionCase ) :      def setUp ( self ) :          super ( SetUpCarepointBase , self ) . setUp ( ) self . backend_model = self . env [ <str> ] self . session = ConnectorSession ( self . env . cr , self . env . uid , context = self . env . context , ) self . journal = self . env [ <str> ] . search ( [ ( <str> , <str> , <str> ) ] ) [ 0 ] self . cx_term = self . env . ref ( <str> ) self . vx_term = self . env . ref ( <str> ) self . cx_tax = self . env [ <str> ] . create ( { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 1.23 , } ) self . vx_tax = self . env [ <str> ] . create ( { <str> : <str> , <str> : <str> , <str> : <str> , <str> : 3.21 , } ) account_obj = self . env [ <str> ] self . account_payable = account_obj . search ( [ ( <str> , <str> , <str> ) ] , limit = 1 , ) self . account_receivable = account_obj . search ( [ ( <str> , <str> , <str> ) ] , limit = 1 , ) self . account_income = account_obj . search ( [ ( <str> , <str> , <str> ) ] , limit = 1 , ) self . account_expense = account_obj . search ( [ ( <str> , <str> , <str> ) ] , limit = 1 , ) self . backend = self . backend_model . create ( { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : CarepointDb . SQLITE , <str> : self . cx_term . id , <str> : self . vx_term . id , <str> : self . journal . id , <str> : self . vx_tax . id , <str> : self . cx_tax . id , <str> : self . account_payable . id , <str> : self . account_receivable . id , <str> : self . account_income . id , <str> : self . account_expense . id , } ) self . mock_api = mock_api self . mock_adapter = mock_adapter self . EndTestException = EndTestException  def get_carepoint_helper ( self , model_name ) :          return CarepointHelper ( self . env , model_name , self . backend )    