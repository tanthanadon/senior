import mock from odoo . addons . connector_carepoint . models import carepoint_organization from . . common import SetUpCarepointBase from ... models . carepoint_organization import CarepointAddressOrganizationUnit class EndTestException ( Exception ) :      pass  class CarepointOrganizationTestBase ( SetUpCarepointBase ) :      def setUp ( self ) :          super ( CarepointOrganizationTestBase , self ) . setUp ( ) self . model = <str> self . mock_env = self . get_carepoint_helper ( self . model ) self . record = { <str> : <str> , <str> : 123 , }   class TestCarepointOrganizationImportMapper ( CarepointOrganizationTestBase ) :      def setUp ( self ) :          super ( TestCarepointOrganizationImportMapper , self ) . setUp ( ) self . Unit = carepoint_organization . CarepointOrganizationImportMapper self . unit = self . Unit ( self . mock_env )  def test_odoo_id_organization ( self ) :          expect = self . env [ <str> ] . create ( self . record ) res = self . unit . odoo_id ( self . record ) expect = { <str> : expect . id } self . assertDictEqual ( expect , res )  def test_carepoint_id ( self ) :          res = self . unit . carepoint_id ( self . record ) expect = { <str> : self . record [ <str> ] } self . assertDictEqual ( expect , res )   class TestCarepointOrganizationImporter ( CarepointOrganizationTestBase ) :      def setUp ( self ) :          super ( TestCarepointOrganizationImporter , self ) . setUp ( ) self . Unit = carepoint_organization . CarepointOrganizationImporter self . unit = self . Unit ( self . mock_env ) self . unit . carepoint_id = 9876 self . unit . carepoint_record = self . record  def test_after_import_unit ( self ) :          with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _after_import ( None ) mk . assert_called_once_with ( CarepointAddressOrganizationUnit , model = <str> , )   def test_after_import_import_addresses ( self ) :          expect = <str> with mock . patch . object ( self . unit , <str> ) as mk :              self . unit . _after_import ( expect ) mk ( ) . _import_addresses . assert_called_once_with ( self . unit . carepoint_id , expect , )    class TestCarepointOrganizationExportMapper ( CarepointOrganizationTestBase ) :      def setUp ( self ) :          super ( TestCarepointOrganizationExportMapper , self ) . setUp ( ) self . Unit = carepoint_organization . CarepointOrganizationExportMapper self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( )  def test_addr_id ( self ) :          res = self . unit . addr_id ( self . record ) self . assertDictEqual ( { <str> : self . record . carepoint_id } , res , )   class TestCarepointOrganizationExporter ( CarepointOrganizationTestBase ) :      def setUp ( self ) :          super ( TestCarepointOrganizationExporter , self ) . setUp ( ) self . Unit = carepoint_organization . CarepointOrganizationExporter self . unit = self . Unit ( self . mock_env ) self . record = mock . MagicMock ( ) self . unit . binding_record = self . record  def test_after_export_address_get_by_partner ( self ) :          with mock . patch . object ( self . unit . session , <str> ) as env :              self . unit . _after_export ( ) get = env [ <str> ] . _get_by_partner call = mock . call ( self . record . commercial_partner_id , edit = True , recurse = True , ) get . assert_has_calls ( [ call , call ] )     