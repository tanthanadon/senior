class GenomeQuery ( object ) :      _DELIMITER = <str> class SortingOrder ( object ) :          BY_FDR = <str> BY_LOG_FOLD_CHANGE = <str> BY_LOG_COUNTS = <str>  class Filter ( object ) :          MAX_FDR = <str> MIN_LOG_FOLD_CHANGE = <str> MIN_LOG_COUNTS = <str> REGULATION = <str>  class Regulation ( object ) :          UP = <str> DOWN = <str>  def __init__ ( self ) :          self . _map = { <str> : { } }  def set_feature_ids ( self , features ) :          features = features if isinstance ( features , list ) else [ features ] self . _map [ <str> ] = self . _DELIMITER . join ( features ) return self  def set_offset ( self , offset ) :          self . _map [ <str> ] = offset return self  def set_limit ( self , limit ) :          self . _map [ <str> ] = limit return self  def set_order_ascending ( self , ascending ) :          self . _map [ <str> ] = ascending return self  def set_contrasts ( self , contrasts ) :          contrasts = contrasts if isinstance ( contrasts , list ) else [ contrasts ] self . _map [ <str> ] = self . _DELIMITER . join ( contrasts ) return self  def set_sorting_order ( self , order ) :          self . _map [ <str> ] = order return self  def add_filter ( self , key , value ) :          self . _map [ <str> ] [ key ] = str ( value )  def get_map ( self ) :          return self . _map . copy ( )    