from __future__ import print_function import os import re import sys from argparse import ArgumentParser from getpass import getpass from operator import attrgetter from genestack_client import GenestackAuthenticationException from genestack_client . genestack_shell import Command , GenestackShell from genestack_client . settings import DEFAULT_HOST , User , config from genestack_client . utils import interactive_select def input_host ( ) :      host = raw_input ( <str> % DEFAULT_HOST ) . strip ( ) return host or DEFAULT_HOST  def validate_alias ( alias ) :      expression = re . compile ( <str> ) return bool ( alias and expression . match ( alias ) )  def input_alias ( existing ) :      print ( <str> <str> ) while True :          alias = raw_input ( <str> ) . strip ( ) if not alias :              print ( <str> ) continue  if not validate_alias ( alias ) :              print ( <str> ) continue  if alias in existing :              print ( <str> ) continue  return alias   def create_user_from_input ( host , alias ) :      by_token = <str> items = [ by_token , <str> ] use_token = interactive_select ( items , <str> ) == by_token if use_token :          return create_user_from_token ( host , alias = alias )  else :          return create_user_from_input_email_and_password ( host , alias = alias )   def create_user_from_input_email_and_password ( host , alias = None ) :      print ( <str> % host , end = <str> ) if alias :          print ( <str> % alias )  else :          print ( )  user_login = None while True :          if user_login :              res = raw_input ( <str> % user_login ) . strip ( ) if res :                  user_login = res   else :              user_login = raw_input ( <str> ) . strip ( ) if not user_login :                  print ( <str> ) continue   user_password = getpass ( <str> % user_login ) if not user_password :              print ( <str> ) continue  if not user_login or not user_password :              print ( ) continue  user = User ( user_login , host = host , password = user_password , alias = alias ) try :              user . get_connection ( ) break  except GenestackAuthenticationException :              print ( <str> )   return user  def create_user_from_token ( host , alias = None ) :      print ( <str> % host ) msg = <str> with_alias = <str> if not alias else <str> % alias msg = msg % with_alias while True :          token = getpass ( msg ) if not token :              print ( <str> ) continue  user = User ( email = None , host = host , password = None , alias = alias , token = token ) try :              user . get_connection ( ) break  except GenestackAuthenticationException :              print ( <str> )   return user  def check_config ( ) :      config_path = config . get_settings_file ( ) if not os . path . exists ( config_path ) :          print ( <str> <str> ) exit ( 1 )   class AddUser ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def run ( self ) :          alias = input_alias ( config . users . keys ( ) ) host = input_host ( ) user = create_user_from_input ( host , alias ) config . add_user ( user ) print ( <str> % user . alias )   def select_user ( users , selected = None ) :      user_list = users . values ( ) user_list . sort ( key = lambda x : x . alias ) return interactive_select ( user_list , <str> , to_string = attrgetter ( <str> ) , selected = selected )  class ChangePassword ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def update_parser ( self , parent ) :          parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> )  def run ( self ) :          check_config ( ) users = config . users user = users . get ( self . args . alias ) if not user :              user = select_user ( users )  if not user . email :              print ( <str> ) return  while True :              user . password = getpass ( <str> % user . alias . encode ( <str> ) ) try :                  user . get_connection ( ) break  except GenestackAuthenticationException :                  continue   config . change_password ( user . alias , user . password ) print ( <str> )   class ChangeToken ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def update_parser ( self , parent ) :          parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> )  def run ( self ) :          check_config ( ) users = config . users user = users . get ( self . args . alias ) if not user :              user = select_user ( users )  new_user = create_user_from_token ( user . host , alias = user . alias ) user . token = new_user . token config . change_token ( user . alias , user . token ) print ( <str> )   class SetDefault ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def update_parser ( self , parent ) :          parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> )  def run ( self ) :          check_config ( ) users = config . users user = users . get ( self . args . alias ) if not user :              user = select_user ( users , selected = config . default_user )  if user . alias != config . default_user . alias :              config . set_default_user ( user ) print ( <str> % user . alias )  else :              print ( <str> )    class Remove ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def update_parser ( self , parent ) :          parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> )  def run ( self ) :          check_config ( ) users = config . users user = users . get ( self . args . alias ) if not user :              user = select_user ( users )  if user . alias == config . default_user . alias :              print ( <str> ) return  config . remove_user ( user ) print ( <str> % user . alias )   class RenameUser ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def update_parser ( self , parent ) :          parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> ) parent . add_argument ( <str> , metavar = <str> , help = <str> , nargs = <str> )  def run ( self ) :          check_config ( ) users = config . users user = users . get ( self . args . alias ) if not user :              print ( <str> ) user = select_user ( users )  if not self . args . new_alias or not validate_alias ( self . args . new_alias ) :              print ( <str> ) new_alias = input_alias ( users . keys ( ) )  else :              new_alias = self . args . new_alias  new_user = User ( email = user . email , alias = new_alias , host = user . host , password = user . password , token = user . token ) config . add_user ( new_user , save = False ) if user . alias == config . default_user . alias :              config . set_default_user ( new_user , save = False )  config . remove_user ( user ) print ( <str> % ( user . alias , new_user . alias ) )   class List ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def run ( self ) :          check_config ( ) users = sorted ( config . users . items ( ) ) default_user_alias = config . default_user and config . default_user . alias for key , user in users :              print ( ) print ( <str> % ( key , <str> if default_user_alias == key else <str> ) ) print ( <str> % ( <str> , user . email ) ) print ( <str> % ( <str> , user . host ) )    class Path ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def run ( self ) :          print ( config . get_settings_file ( ) )   class Init ( Command ) :      COMMAND = <str> DESCRIPTION = <str> OFFLINE = True def get_command_parser ( self , parser = None ) :          parser = parser or ArgumentParser ( description = self . DESCRIPTION ) parser . description = self . DESCRIPTION group = parser . add_argument_group ( <str> ) self . update_parser ( group ) group . add_argument ( <str> , <str> , default = DEFAULT_HOST , help = <str> <str> % DEFAULT_HOST , metavar = <str> ) return parser  def run ( self ) :          default_alias = <str> try :              config_path = config . get_settings_file ( ) if os . path . exists ( config_path ) :                  print ( <str> % config_path ) return  print ( <str> ) user = create_user_from_input ( self . args . host , default_alias ) config . add_user ( user ) print ( <str> % config_path )  except ( KeyboardInterrupt , EOFError ) :              sys . stdout . flush ( ) sys . stderr . write ( <str> ) exit ( 1 )    class UserManagement ( GenestackShell ) :      DESCRIPTION = <str> COMMAND_LIST = [ Init , List , AddUser , SetDefault , ChangePassword , ChangeToken , Path , Remove , RenameUser ] intro = <str> prompt = <str> def set_shell_user ( self , args ) :          config_path = config . get_settings_file ( ) if not os . path . exists ( config_path ) :              print ( <str> ) self . process_command ( Init ( ) , [ <str> , args . host or DEFAULT_HOST ] , False ) args . host = None    def main ( ) :      shell = UserManagement ( ) shell . cmdloop ( )  if __name__ == <str> :      main ( )   