from __future__ import print_function import csv from genestack_client import ( BioMetaKeys , DataImporter , Metainfo , get_connection , make_connection_parser ) FILE_ACCESSION = <str> PAIRED_ACCESSION = <str> VALID_FIELDS = { FILE_ACCESSION : Metainfo . NAME , <str> : None , <str> : BioMetaKeys . SEX , <str> : BioMetaKeys . ORGANISM , <str> : None , <str> : BioMetaKeys . CELL_TYPE , <str> : BioMetaKeys . PLATFORM } ENCODE_URL_PATTERN = <str> parser = make_connection_parser ( ) parser . add_argument ( <str> , metavar = <str> , help = <str> ) args = parser . parse_args ( ) tsv_input = args . tsv_file print ( <str> ) connection = get_connection ( args ) importer = DataImporter ( connection ) experiment = importer . create_experiment ( name = <str> , description = <str> ) print ( <str> % experiment ) created_pairs = set ( ) with open ( tsv_input , <str> ) as the_file :      reader = csv . DictReader ( the_file , dialect = <str> ) field_names = reader . fieldnames for file_data in reader :          if file_data [ FILE_ACCESSION ] in created_pairs :              continue  metainfo = Metainfo ( ) for key in VALID_FIELDS . keys ( ) :              metainfo . add_string ( VALID_FIELDS . get ( key ) or key , file_data [ key ] )  metainfo . add_external_link ( BioMetaKeys . READS_LINK , ENCODE_URL_PATTERN . format ( file_data [ FILE_ACCESSION ] ) ) if file_data . get ( PAIRED_ACCESSION ) :              metainfo . add_string ( FILE_ACCESSION , PAIRED_ACCESSION ) metainfo . add_external_link ( BioMetaKeys . READS_LINK , ENCODE_URL_PATTERN . format ( file_data [ PAIRED_ACCESSION ] ) ) created_pairs . add ( file_data [ PAIRED_ACCESSION ] )  created_file = importer . create_sequencing_assay ( experiment , metainfo = metainfo ) print ( <str> % ( file_data [ FILE_ACCESSION ] , created_file ) )   print ( <str> )  