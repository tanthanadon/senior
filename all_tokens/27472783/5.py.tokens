import os import sys import pytest sys . path . insert ( 0 , os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) from genestack_client . file_filters import * from genestack_client . metainfo_scalar_values import * from genestack_client import ( Metainfo , FilesUtil , get_connection , make_connection_parser , Permissions , FileTypes , SortOrder ) SOME_KEY = <str> PUBLIC_FOLDER = <str> PUBLIC_USER = <str> @ pytest . fixture ( scope = <str> ) def files_utils ( ) :      connection = get_connection ( make_connection_parser ( ) . parse_args ( ) ) files_utils = FilesUtil ( connection ) return files_utils  def test_find_files ( files_utils ) :      test_filter = ( OwnerFileFilter ( PUBLIC_USER ) | TypeFileFilter ( FileTypes . DATASET ) & FixedValueFileFilter ( True ) | MetainfoValuePatternFileFilter ( Metainfo . ACCESSION , <str> ) | ChildrenFileFilter ( PUBLIC_FOLDER ) | ContainsFileFilter ( PUBLIC_FOLDER ) | ActualOwnerFileFilter ( ) | ActualPermissionFileFilter ( Permissions . FILE_ACCESS ) | HasInProvenanceFileFilter ( <str> ) | PermissionFileFilter ( <str> , Permissions . FILE_ACCESS ) | KeyValueFileFilter ( Metainfo . NAME , <str> ) ) result = files_utils . find_files ( test_filter , SortOrder . BY_LAST_UPDATE , True , 4 , 80 ) assert result [ <str> ] > 0  def test_find_files_with_metainfo_scalar_values ( files_utils ) :      values = ( BooleanValue ( True ) , FileReference ( <str> ) , DateTimeValue ( <str> ) , IntegerValue ( 239 ) , DecimalValue ( 238.486 ) , StringValue ( <str> ) , MemorySizeValue ( 25738 ) , ExternalLink ( <str> <str> ) , Person ( <str> , <str> , <str> ) , Publication ( <str> , <str> , <str> , <str> , pages = <str> ) ) test_filter = reduce ( lambda x , y : x . OR ( y ) , [ KeyValueFileFilter ( SOME_KEY , v ) for v in values ] ) result = files_utils . find_files ( test_filter , SortOrder . DEFAULT ) assert result is not None  if __name__ == <str> :      pytest . main ( [ <str> , <str> , <str> , __file__ ] )   