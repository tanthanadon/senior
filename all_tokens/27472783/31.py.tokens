from __future__ import print_function import argparse import subprocess import sys from genestack_client import GenestackException def get_terminal_width ( ) :      try :          rows , columns = subprocess . check_output ( [ <str> , <str> ] ) . decode ( ) . split ( ) return int ( columns )  except Exception as e :          sys . stderr . write ( <str> % e ) return 80   def isatty ( ) :      try :          return sys . stdout . isatty ( )  except AttributeError :          return False   class GenestackArgumentParser ( argparse . ArgumentParser ) :      def parse_known_args ( self , args = None , namespace = None ) :          args , argv = super ( GenestackArgumentParser , self ) . parse_known_args ( args , namespace ) if args . token and args . user :              self . error ( <str> )  if args . pwd and not args . user :              self . error ( <str> )  return args , argv   def make_connection_parser ( user = None , password = None , host = None , token = None ) :      parser = GenestackArgumentParser ( ) group = parser . add_argument_group ( <str> ) group . add_argument ( <str> , <str> , default = host , help = <str> , metavar = <str> ) group . add_argument ( <str> , <str> , dest = <str> , metavar = <str> , default = user , help = <str> ) group . add_argument ( <str> , <str> , dest = <str> , default = password , metavar = <str> , help = <str> ) group . add_argument ( <str> , dest = <str> , default = token , metavar = <str> , help = <str> ) group . add_argument ( <str> , dest = <str> , action = <str> , help = <str> ) group . add_argument ( <str> , dest = <str> , action = <str> , help = <str> ) return parser  def get_user ( args = None ) :      from settings import config , User if args is None :          args = make_connection_parser ( ) . parse_args ( )  alias = args . user if args . token :          return User ( email = None , host = args . host , password = None , token = args . token )  if not args . host and not args . pwd :          if not alias and config . default_user :              return config . default_user  if alias in config . users :              return config . users [ alias ]   return User ( email = alias , host = args . host , password = args . pwd , token = args . token )  def get_connection ( args = None ) :      if args is None :          args = make_connection_parser ( ) . parse_args ( )  user = get_user ( args ) return user . get_connection ( interactive = True , debug = args . debug , show_logs = args . show_logs )  def ask_confirmation ( question , default = None ) :      if not isatty ( ) :          raise GenestackException ( <str> )  assert default in ( <str> , <str> , None ) , <str> question_suffix = <str> % tuple ( x . upper ( ) if x == default else x for x in <str> ) while True :          text = raw_input ( <str> % ( question , question_suffix ) ) . strip ( ) . lower ( ) if not text and default :              text = default  if text in ( <str> , <str> ) :              return True  if text in ( <str> , <str> ) :              return False  print ( <str> )   def interactive_select ( items , message , to_string = None , selected = None ) :      to_string = to_string or str if selected and selected not in items :          raise GenestackException ( <str> % ( selected , items ) )  about_default = <str> while True :          for i , option in enumerate ( items , start = 1 ) :              if option == selected :                  print ( <str> , end = <str> ) about_default = <str> % i  else :                  print ( <str> , end = <str> )  print ( <str> % ( <str> % i , to_string ( option ) ) )  raw_index = raw_input ( <str> % ( message , about_default ) ) . strip ( ) if not raw_index and selected :              return selected  if not raw_index . isdigit ( ) :              print ( <str> % raw_index ) continue  item_index = int ( raw_index ) - 1 if not 0 <= item_index < len ( items ) :              print ( <str> ) continue  return items [ item_index ]   def validate_constant ( cls , key ) :      constants = { v for k , v in cls . __dict__ . iteritems ( ) if ( not k . startswith ( <str> ) and isinstance ( v , basestring ) ) } return key in constants   