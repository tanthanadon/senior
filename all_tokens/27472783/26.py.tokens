from genestack_client import Application , FilesUtil , SpecialFolders , Metainfo , GenestackException class DatasetsUtil ( Application ) :      APPLICATION_ID = <str> BATCH_SIZE = 100 def create_dataset ( self , name , dataset_type , children , parent = None , dataset_metainfo = None ) :          if parent is None :              parent = self . __get_mydatasets_folder ( )  dataset_metainfo = self . _fill_dataset_metainfo ( dataset_metainfo , name ) return self . invoke ( <str> , parent , dataset_type , dataset_metainfo , children )  def create_empty_dataset ( self , name , dataset_type , parent = None , dataset_metainfo = None ) :          if parent is None :              parent = self . __get_mydatasets_folder ( )  dataset_metainfo = self . _fill_dataset_metainfo ( dataset_metainfo , name ) return self . invoke ( <str> , parent , dataset_type , dataset_metainfo )  @ staticmethod def _fill_dataset_metainfo ( dataset_metainfo , name ) :          dataset_metainfo = dataset_metainfo or Metainfo ( ) if Metainfo . NAME in dataset_metainfo :              raise GenestackException ( <str> % Metainfo . NAME )  dataset_metainfo . add_string ( Metainfo . NAME , name ) return dataset_metainfo  def get_dataset_size ( self , accession ) :          return self . invoke ( <str> , accession )  def get_dataset_children ( self , accession ) :          count = 0 while True :              children = self . invoke ( <str> , accession , count , self . BATCH_SIZE ) for child in children :                  yield child  count += len ( children ) if len ( children ) < self . BATCH_SIZE :                  break    def create_subset ( self , accession , children , parent = None ) :          if parent is None :              parent = self . __get_mydatasets_folder ( )  return self . invoke ( <str> , parent , accession , children )  def add_dataset_children ( self , accession , children ) :          return self . invoke ( <str> , accession , children )  def add_file_to_datasets ( self , file_accession , dataset_accessions ) :          return self . invoke ( <str> , file_accession , dataset_accessions )  def remove_dataset_children ( self , accession , children ) :          return self . invoke ( <str> , accession , children )  def merge_datasets ( self , datasets , parent = None ) :          if parent is None :              parent = self . __get_mydatasets_folder ( )  return self . invoke ( <str> , parent , datasets )  def __get_mydatasets_folder ( self ) :          return FilesUtil ( self . connection ) . get_special_folder ( SpecialFolders . MY_DATASETS )    