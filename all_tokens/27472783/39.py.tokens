import os import sys from urllib import quote from urlparse import urlparse from genestack_client import BioMetaKeys , GenestackException , Metainfo from genestack_client . metainfo_scalar_values import ExternalLink , FileReference , StringValue ANNOTATION_KEY = <str> SEQUENCE_KEY = <str> class DataImporter ( object ) :      AFFYMETRIX_ANNOTATION = <str> AGILENT_ANNOTATION = <str> TSV_ANNOTATION = <str> INFINIUM_ANNOTATION = <str> MICROARRAY_ANNOTATION_TYPES = ( AGILENT_ANNOTATION , AFFYMETRIX_ANNOTATION , TSV_ANNOTATION , INFINIUM_ANNOTATION ) def __init__ ( self , connection ) :          self . connection = connection self . importer = connection . application ( <str> )  def __process_links ( self , metainfo ) :          all_links = [ ( key , val ) for key , val in metainfo . items ( ) if val [ 0 ] [ <str> ] == <str> ] for key , external_link_list in all_links :              links = [ x [ <str> ] for x in external_link_list ] if self . __are_files_local ( links ) :                  del metainfo [ key ] for external_link in external_link_list :                      raw = self . load_raw ( external_link [ <str> ] ) metainfo . add_file_reference ( key , raw )   else :                  for x in external_link_list :                      if x [ <str> ] . startswith ( <str> ) :                          x [ <str> ] = <str> % quote ( x [ <str> ] [ 5 : ] )      @ staticmethod def __are_files_local ( links ) :          if not isinstance ( links , list ) :              links = [ links ]  if not links :              return False  local_flags = set ( map ( DataImporter . __is_file_local , links ) ) if len ( local_flags ) != 1 :              raise GenestackException ( <str> )  return local_flags . pop ( )  @ staticmethod def __is_file_local ( filepath ) :          return DataImporter . __get_local_path ( filepath ) is not None  @ staticmethod def __get_local_path ( filepath ) :          if os . path . exists ( filepath ) :              return True  url_parse = urlparse ( filepath ) if url_parse . scheme == <str> or url_parse . scheme == <str> :              if not os . path . exists ( url_parse . path ) :                  raise GenestackException ( <str> + url_parse . path )  return url_parse . path  return None  def __invoke_loader ( self , parent , importer_type , metainfo ) :          self . __process_links ( metainfo ) return self . importer . invoke ( <str> , parent , importer_type , metainfo ) [ <str> ]  @ staticmethod def __add_to_metainfo ( metainfo , key , value , value_type , required = False ) :          current_value = metainfo . get ( key ) if current_value is not None and value is not None :              raise GenestackException ( <str> <str> % key )  if current_value :              return  if required and value is None :              raise GenestackException ( <str> <str> <str> % key )  if value is not None :              value_list = value if isinstance ( value , list ) else [ value ] for val in value_list :                  metainfo . add_value ( key , value_type ( val ) )    def load_raw ( self , file_path ) :          return self . connection . application ( <str> ) . upload_chunked_file ( file_path )  def create_bed ( self , parent = None , name = None , reference_genome = None , url = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_vcf ( self , parent = None , name = None , reference_genome = None , url = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_wig ( self , parent = None , name = None , reference_genome = None , url = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_bam ( self , parent = None , name = None , url = None , organism = None , strain = None , reference_genome = None , metainfo = None , ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . STRAIN , strain , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . BAM_FILE_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  @ staticmethod def _copy_metainfo ( metainfo ) :          return Metainfo ( metainfo ) if metainfo else Metainfo ( )  def create_experiment ( self , parent = None , name = None , description = None , metainfo = None ) :          raise GenestackException ( <str> <str> )  def create_microarray_assay ( self , parent , name = None , urls = None , method = None , organism = None , metainfo = None ) :          raise GenestackException ( <str> <str> )  def create_microarray_data ( self , parent , name = None , urls = None , method = None , organism = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . METHOD , method , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , urls , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_infinium_microarray_data ( self , parent , name = None , urls = None , method = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . METHOD , method , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , urls , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_sequencing_assay ( self , parent , name = None , urls = None , method = None , organism = None , metainfo = None ) :          raise GenestackException ( <str> <str> )  def create_unaligned_read ( self , parent = None , name = None , urls = None , method = None , organism = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . METHOD , method , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . READS_LINK , urls , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_genome_annotation ( self , parent = None , url = None , name = None , organism = None , reference_genome = None , strain = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . STRAIN , strain , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_codon_table ( self , parent = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_dbnsfp ( self , parent = None , url = None , name = None , organism = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) metainfo . add_string ( BioMetaKeys . DATABASE_ID , <str> ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_reference_genome ( self , parent = None , name = None , description = <str> , sequence_urls = None , annotation_url = None , organism = None , assembly = None , release = None , strain = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . STRAIN , strain , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME_ASSEMBLY , assembly , StringValue ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME_RELEASE , release , StringValue ) self . __add_to_metainfo ( metainfo , ANNOTATION_KEY , annotation_url , ExternalLink , required = True ) self . __add_to_metainfo ( metainfo , metainfo . DESCRIPTION , description , StringValue ) self . __add_to_metainfo ( metainfo , SEQUENCE_KEY , sequence_urls , ExternalLink ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_report_file ( self , parent = None , name = None , urls = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , urls , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_mapped_reads_count ( self , parent = None , name = None , url = None , reference_genome = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . REFERENCE_GENOME , reference_genome , FileReference ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_expression_levels ( self , parent = None , unit = None , name = None , url = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . EXPRESSION_LEVEL_UNIT , unit , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_gene_list ( self , parent = None , name = None , url = None , organism = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_gene_expression_signature ( self , parent = None , name = None , url = None , organism = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . ORGANISM , organism , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_owl_ontology ( self , parent = None , name = None , url = None , metainfo = None ) :          sys . stderr . write ( <str> <str> ) return self . create_dictionary ( parent = parent , name = name , url = url , metainfo = metainfo )  def create_dictionary ( self , parent = None , name = None , url = None , term_type = None , metainfo = None , parent_dictionary = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) self . __add_to_metainfo ( metainfo , Metainfo . PARENT_DICTIONARY , parent_dictionary , FileReference ) self . __add_to_metainfo ( metainfo , <str> , term_type , StringValue ) return self . __invoke_loader ( parent , <str> , metainfo )  def create_microarray_annotation ( self , annotation_type , parent = None , name = None , url = None , metainfo = None ) :          if annotation_type not in self . MICROARRAY_ANNOTATION_TYPES :              raise GenestackException ( <str> <str> <str> % annotation_type )  metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) return self . __invoke_loader ( parent , annotation_type , metainfo )  def create_pathway_database ( self , db_name = None , version = None , parent = None , url = None , name = None , metainfo = None ) :          metainfo = DataImporter . _copy_metainfo ( metainfo ) self . __add_to_metainfo ( metainfo , Metainfo . NAME , name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , BioMetaKeys . DATA_LINK , url , ExternalLink , required = True ) self . __add_to_metainfo ( metainfo , <str> , db_name , StringValue , required = True ) self . __add_to_metainfo ( metainfo , <str> , version , StringValue , required = True ) return self . __invoke_loader ( parent , <str> , metainfo )    