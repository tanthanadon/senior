import sys from genestack_client import ( BooleanValue , DateTimeValue , DecimalValue , ExternalLink , FileReference , GenestackException , IntegerValue , MemorySizeValue , MetainfoScalarValue , Organization , Person , Publication , StringValue ) class Metainfo ( dict ) :      NAME = <str> DESCRIPTION = <str> ACCESSION = <str> ORGANIZATION = <str> CONTACT_PERSON = <str> EXTERNAL_LINK = <str> CREATION_DATE = <str> PARENT_DICTIONARY = <str> SOURCE_DATA = <str> INDEX_DATA_SIZE = <str> DATABASE_SIZE = <str> DATA_TYPE = <str> LAST_UPDATE_DATE = <str> SAMPLE_LINK = <str> STUDY_LINK = <str> YEAR = <str> MONTH = <str> WEEK = <str> DAY = <str> HOUR = <str> MINUTE = <str> SECOND = <str> MILLISECOND = <str> CELSIUS = <str> KELVIN = <str> FAHRENHEIT = <str> def _add_value ( self , key , value , type ) :          self . setdefault ( key , [ ] ) . append ( { <str> : type , <str> : MetainfoScalarValue . _xstr ( value ) } )  @ staticmethod def _create_dict_with_type ( type ) :          return { <str> : type }  def add_value ( self , key , value ) :          if not isinstance ( value , MetainfoScalarValue ) :              raise GenestackException ( <str> )  self . setdefault ( key , [ ] ) . append ( value )  def add_string ( self , key , value ) :          self . add_value ( key , StringValue ( value ) )  def add_boolean ( self , key , value ) :          self . add_value ( key , BooleanValue ( value ) )  def add_integer ( self , key , value ) :          self . add_value ( key , IntegerValue ( value ) )  def add_memory_size ( self , key , value ) :          self . add_value ( key , MemorySizeValue ( value ) )  def add_decimal ( self , key , value ) :          self . add_value ( key , DecimalValue ( value ) )  def add_external_link ( self , key , url , text = None , fmt = None ) :          self . add_value ( key , ExternalLink ( url , text , fmt ) )  def add_person ( self , key , name , phone = None , email = None ) :          self . _print_metainfo_type_deprecation_message ( <str> ) self . add_value ( key , Person ( name , phone , email ) )  def add_publication ( self , key , title , authors , journal_name , issue_date , identifiers = None , issue_number = None , pages = None ) :          self . _print_metainfo_type_deprecation_message ( <str> ) self . add_value ( key , Publication ( title , authors , journal_name , issue_date , identifiers , issue_number , pages ) )  def add_organization ( self , key , name , department = None , country = None , city = None , street = None , postal_code = None , state = None , phone = None , email = None , url = None ) :          self . _print_metainfo_type_deprecation_message ( <str> ) self . add_value ( key , Organization ( name , department , country , city , street , postal_code , state , phone , email , url ) )  def add_time ( self , key , value , unit ) :          self . _print_metainfo_type_deprecation_message ( <str> ) result = Metainfo . _create_dict_with_type ( <str> ) result [ <str> ] = MetainfoScalarValue . _xstr ( value ) result [ <str> ] = unit . upper ( ) self . setdefault ( key , [ ] ) . append ( result )  def add_temperature ( self , key , value , unit ) :          self . _print_metainfo_type_deprecation_message ( <str> ) result = Metainfo . _create_dict_with_type ( <str> ) result [ <str> ] = MetainfoScalarValue . _xstr ( value ) result [ <str> ] = unit . upper ( ) self . setdefault ( key , [ ] ) . append ( result )  def add_file_reference ( self , key , accession ) :          self . add_value ( key , FileReference ( accession ) )  def add_date_time ( self , key , time ) :          self . add_value ( key , DateTimeValue ( time ) )  @ classmethod def parse_metainfo_from_dict ( cls , source_dict ) :          output = Metainfo ( ) for key in source_dict :              for scalar_value in map ( cls . _parse_scalar_value , source_dict [ key ] ) :                  output . add_value ( key , scalar_value )   return output  @ staticmethod def _parse_scalar_value ( source_dict ) :          java_type = source_dict [ <str> ] if java_type == BooleanValue . _TYPE :              return BooleanValue ( source_dict [ <str> ] )  elif java_type == DateTimeValue . _TYPE :              return DateTimeValue ( source_dict [ <str> ] )  elif java_type == ExternalLink . _TYPE :              return ExternalLink ( source_dict [ <str> ] , source_dict [ <str> ] , source_dict . get ( <str> ) )  elif java_type == IntegerValue . _TYPE :              return IntegerValue ( source_dict [ <str> ] )  elif java_type == DecimalValue . _TYPE :              return DecimalValue ( source_dict [ <str> ] )  elif java_type == MemorySizeValue . _TYPE :              return MemorySizeValue ( source_dict [ <str> ] )  elif java_type == Organization . _TYPE :              return Organization ( source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] )  elif java_type == Person . _TYPE :              return Person ( source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] )  elif java_type == Publication . _TYPE :              return Publication ( source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] , source_dict [ <str> ] )  elif java_type == StringValue . _TYPE :              return StringValue ( source_dict [ <str> ] )  elif java_type == FileReference . _TYPE :              return FileReference ( source_dict [ <str> ] )  else :              return MetainfoScalarValue ( source_dict )   @ staticmethod def _print_metainfo_type_deprecation_message ( method_name ) :          sys . stderr . write ( <str> <str> % method_name )    