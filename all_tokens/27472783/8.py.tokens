import imp import os import sys from genestack_client import make_connection_parser from genestack_client . genestack_shell import get_help sys . path . append ( <str> ) template = def generate_rst_doc ( shell_name , file_name , class_name , footer_file_name , save_path ) :      with open ( os . path . join ( os . path . dirname ( __file__ ) , <str> , <str> , <str> , <str> , file_name ) ) as f :          shell_module = imp . new_module ( <str> ) exec ( f . read ( ) , shell_module . __dict__ )  shell = getattr ( shell_module , class_name ) tool_file_name = os . path . basename ( shell_name ) commands = [ ] script_help = get_help ( shell ( ) . get_shell_parser ( ) ) . replace ( <str> , <str> ) . replace ( <str> , tool_file_name ) for command in sorted ( shell . COMMAND_LIST , key = lambda x : x . COMMAND ) :          command = command ( ) parser = command . get_command_parser ( parser = None if command . OFFLINE else make_connection_parser ( ) ) help_text = get_help ( parser ) . replace ( <str> , <str> ) . replace ( <str> , tool_file_name ) text = <str> % ( command . COMMAND , help_text ) commands . append ( text )  if footer_file_name :          with open ( footer_file_name ) as f :              footer = f . read ( )   else :          footer = <str>  with open ( save_path , <str> ) as f :          f . write ( template . format ( name = tool_file_name , name_underline = <str> * len ( tool_file_name ) , commands = <str> . join ( commands ) , description = shell . DESCRIPTION , usage = script_help , footer = footer , ) )   def main ( ) :      generate_rst_doc ( <str> , <str> , <str> , <str> , os . path . join ( <str> , <str> ) ) generate_rst_doc ( <str> , <str> , <str> , None , os . path . join ( <str> , <str> ) ) generate_rst_doc ( <str> , <str> , <str> , None , os . path . join ( <str> , <str> ) )  if __name__ == <str> :      main ( )   