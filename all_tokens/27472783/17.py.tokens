import collections from genestack_client import Application class ShareUtil ( Application ) :      APPLICATION_ID = <str> SHARE_FOLDER_LIMIT = 100 class Permissions ( object ) :          VIEW = <str> EDIT = <str> SHARE = <str>  def share_files_for_view ( self , file_accessions , group_accession , destination_folder = None ) :          self . safe_share_files ( file_accessions , group_accession , [ ShareUtil . Permissions . VIEW ] , destination_folder )  def share_files_for_edit ( self , file_accessions , group_accession , destination_folder = None ) :          self . safe_share_files ( file_accessions , group_accession , [ ShareUtil . Permissions . EDIT ] , destination_folder )  def share_files ( self , file_accessions , group_accession , permissions , destination_folder = None ) :          permissions = self . __to_list ( permissions ) self . __share ( file_accessions , group_accession , destination_folder , <str> , permissions )  def safe_share_files ( self , file_accessions , group_accession , permissions , destination_folder = None ) :          permissions = self . __to_list ( permissions ) self . __share ( file_accessions , group_accession , destination_folder , <str> , permissions )  def __share ( self , file_accessions , group_accession , destination_folder , method , * args ) :          file_accessions = self . __to_list ( file_accessions ) self . invoke ( method , file_accessions , [ group_accession ] , * args ) if destination_folder is not None :              self . invoke ( <str> , file_accessions , destination_folder , group_accession )   def share_folder ( self , folder_accession , group_accession , permissions , destination_folder = None ) :          from time import sleep permissions = self . __to_list ( permissions ) self . share_files ( folder_accession , group_accession , permissions , destination_folder ) delay_seconds = 1 offset = 0 while True :              count = self . invoke ( <str> , folder_accession , group_accession , permissions , offset , self . SHARE_FOLDER_LIMIT ) if count == 0 and offset == 0 :                  return  if count < self . SHARE_FOLDER_LIMIT :                  sleep ( delay_seconds ) offset = 0  else :                  offset += self . SHARE_FOLDER_LIMIT    @ staticmethod def __to_list ( args ) :          if isinstance ( args , list ) :              return args  is_iterable = isinstance ( args , collections . Iterable ) if is_iterable and not isinstance ( args , basestring ) :              return list ( args )  else :              return [ args ]   def get_available_sharing_groups ( self ) :          return self . invoke ( <str> )    