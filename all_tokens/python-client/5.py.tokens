from __future__ import print_function from genestack_client import ( AlignedReadsQC , BioMetaKeys , BowtieApplication , FilesUtil , SpecialFolders , VariationCaller2Application , get_connection , make_connection_parser ) class BatchFilesCreator ( object ) :      def __init__ ( self , cla , base_folder , friendly_name , custom_args = None ) :          self . _cla = cla self . _files_util = FilesUtil ( cla . connection ) self . _base_folder = base_folder self . _friendly_name = friendly_name self . _custom_args = custom_args  def create_files ( self , sources ) :          print ( <str> % self . _friendly_name ) output_folder = self . _files_util . create_folder ( self . _friendly_name , parent = self . _base_folder ) output_files = [ ] for i , source in enumerate ( sources , 1 ) :              output = self . _create_output_file ( source ) self . _files_util . link_file ( output , output_folder ) print ( <str> % ( self . _friendly_name , output , i , len ( output ) ) ) output_files . append ( output )  return output_files  def _create_output_file ( self , source ) :          output = self . _cla . create_file ( source ) if self . _custom_args :              self . _cla . change_command_line_arguments ( output , self . _custom_args )  return output   class BowtieBatchFilesCreator ( BatchFilesCreator ) :      def __init__ ( self , cla , base_folder , friendly_name , custom_args = None , ref_genome = None ) :          BatchFilesCreator . __init__ ( self , cla , base_folder , friendly_name , custom_args ) self . _ref_genome = ref_genome  def _create_output_file ( self , source ) :          output = BatchFilesCreator . _create_output_file ( self , source ) if self . _ref_genome :              self . _files_util . remove_metainfo_value ( [ output ] , BioMetaKeys . REFERENCE_GENOME ) self . _cla . replace_file_reference ( output , BioMetaKeys . REFERENCE_GENOME , None , self . _ref_genome )  return output   VC_ARGUMENTS_NO_INDELS = [ <str> , <str> , <str> ] if __name__ == <str> :      parser = make_connection_parser ( ) parser . add_argument ( <str> , help = <str> ) parser . add_argument ( <str> , default = <str> , help = <str> ) parser . add_argument ( <str> , help = <str> ) args = parser . parse_args ( ) project_name = args . name print ( <str> ) connection = get_connection ( args ) files_util = FilesUtil ( connection ) created_files_folder = files_util . get_special_folder ( SpecialFolders . CREATED ) project_folder = files_util . create_folder ( project_name , parent = created_files_folder ) bowtie_app = BowtieApplication ( connection ) mapped_qc_app = AlignedReadsQC ( connection ) variant_calling_app = VariationCaller2Application ( connection ) bowtie_creator = BowtieBatchFilesCreator ( bowtie_app , project_folder , <str> , ref_genome = args . ref_genome ) mapped_qc_creator = BatchFilesCreator ( mapped_qc_app , project_folder , <str> ) vc_creator = BatchFilesCreator ( variant_calling_app , project_folder , <str> , custom_args = VC_ARGUMENTS_NO_INDELS ) print ( <str> ) raw_reads = files_util . get_file_children ( args . raw_reads_folder ) files_count = len ( raw_reads ) print ( <str> % files_count ) mapped_reads = bowtie_creator . create_files ( raw_reads ) mapped_reads_qcs = mapped_qc_creator . create_files ( mapped_reads ) vc_creator . create_files ( mapped_reads ) print ( <str> % project_folder )   