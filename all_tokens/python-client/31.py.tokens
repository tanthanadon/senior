import datetime import os import sys from pprint import pformat from urlparse import unquote , urlparse from genestack_client import GenestackException class MetainfoScalarValue ( dict ) :      _TYPE = None def _set_fields ( self , value , stringify = True ) :          if isinstance ( value , dict ) :              val = value . copy ( ) val [ <str> ] = self . _TYPE if stringify :                  for key in val :                      if not isinstance ( val [ key ] , dict ) :                          val [ key ] = self . _xstr ( val [ key ] )    self . update ( val )  else :              self . update ( { <str> : self . _TYPE , <str> : self . _xstr ( value ) } )   def __init__ ( self , value ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) self . _set_fields ( value )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get ( <str> ) )  def _print_deprecation_message ( self ) :          sys . stderr . write ( <str> <str> % self . _TYPE )  @ staticmethod def _xstr ( arg ) :          if arg is None :              return None  if isinstance ( arg , unicode ) :              return arg . encode ( <str> , errors = <str> )  return str ( arg )   class StringValue ( MetainfoScalarValue ) :      _TYPE = <str> def get_string ( self ) :          return self . _xstr ( self . get ( <str> ) )   class BooleanValue ( MetainfoScalarValue ) :      _TYPE = <str> def get_boolean ( self ) :          return bool ( self . get ( <str> ) )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_boolean ( ) )   class IntegerValue ( MetainfoScalarValue ) :      _TYPE = <str> def get_int ( self ) :          return int ( self . get ( <str> ) )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_int ( ) )   class MemorySizeValue ( MetainfoScalarValue ) :      _TYPE = <str> def get_int ( self ) :          return int ( self . get ( <str> ) )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_int ( ) )   class DecimalValue ( MetainfoScalarValue ) :      _TYPE = <str> def get_decimal ( self ) :          return float ( self . get ( <str> ) )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_decimal ( ) )   class ExternalLink ( MetainfoScalarValue ) :      _TYPE = <str> def __init__ ( self , url , text = None , fmt = None ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) if not text :              text = os . path . basename ( urlparse ( unquote ( url ) ) . path )  self . _set_fields ( { <str> : text , <str> : url , <str> : fmt } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_url ( ) )  def get_text ( self ) :          return self . get ( <str> )  def get_url ( self ) :          return self . get ( <str> )  def get_format ( self ) :          return self . get ( <str> )   class FileReference ( MetainfoScalarValue ) :      _TYPE = <str> def __init__ ( self , accession ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) self . _set_fields ( { <str> : accession } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_accession ( ) )  def get_accession ( self ) :          return self . get ( <str> )   class DateTimeValue ( MetainfoScalarValue ) :      _TYPE = <str> _DATE_TIME_FORMAT = <str> _DATE_FORMAT = <str> def __init__ ( self , time ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) milliseconds = self . _parse_date_time ( time ) self . _set_fields ( { <str> : milliseconds } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , self . get_date ( ) )  @ staticmethod def _can_be_cast_to_int ( time_str ) :          try :              int ( time_str ) return True  except ValueError :              return False   @ classmethod def _parse_date_time ( cls , time ) :          if isinstance ( time , basestring ) :              if cls . _can_be_cast_to_int ( time ) :                  return int ( time )  try :                  time = datetime . datetime . strptime ( time , cls . _DATE_TIME_FORMAT )  except ValueError :                  try :                      time = datetime . datetime . strptime ( time , cls . _DATE_FORMAT )  except ValueError :                      raise GenestackException ( <str> <str> % ( time , cls . _DATE_TIME_FORMAT , cls . _DATE_FORMAT ) )    if isinstance ( time , datetime . datetime ) :              diff = time - datetime . datetime ( 1970 , 1 , 1 ) milliseconds = ( diff . days * 24 * 60 * 60 + diff . seconds ) * 1000 + diff . microseconds / 1000  elif isinstance ( time , datetime . date ) :              diff = time - datetime . date ( 1970 , 1 , 1 ) milliseconds = diff . days * 24 * 60 * 60 * 1000  elif isinstance ( time , float ) :              milliseconds = int ( time * 1000 )  else :              raise GenestackException ( <str> % type ( time ) )  return milliseconds  def get_milliseconds ( self ) :          return float ( self . get ( <str> ) )  def get_date ( self ) :          return datetime . datetime . fromtimestamp ( self . get_milliseconds ( ) / 1000.0 )   class Person ( MetainfoScalarValue ) :      _TYPE = <str> def __init__ ( self , name , phone = None , email = None ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) self . _print_deprecation_message ( ) self . _set_fields ( { <str> : name , <str> : phone , <str> : email } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , pformat ( self . get_person ( ) ) )  def get_person ( self ) :          return { key : self . get ( key ) for key in { <str> , <str> , <str> } }   class Publication ( MetainfoScalarValue ) :      _TYPE = <str> def __init__ ( self , title , authors , journal_name , issue_date , identifiers = None , issue_number = None , pages = None ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) self . _print_deprecation_message ( ) self . _set_fields ( { <str> : identifiers if identifiers else { } , <str> : journal_name , <str> : issue_date , <str> : title , <str> : authors , <str> : issue_number , <str> : pages } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , pformat ( self . get_publication ( ) ) )  def get_publication ( self ) :          return { key : self . get ( key ) for key in { <str> , <str> , <str> , <str> , <str> , <str> , <str> } }   class Organization ( MetainfoScalarValue ) :      _TYPE = <str> def __init__ ( self , name , department = None , country = None , city = None , street = None , postal_code = None , state = None , phone = None , email = None , url = None ) :          super ( MetainfoScalarValue , self ) . __init__ ( ) self . _print_deprecation_message ( ) self . _set_fields ( { <str> : name , <str> : department , <str> : country , <str> : city , <str> : street , <str> : postal_code , <str> : state , <str> : phone , <str> : email , <str> : url } )  def __repr__ ( self ) :          return <str> . format ( self . __class__ . __name__ , pformat ( self . get_organization ( ) ) )  def get_organization ( self ) :          return { key : self . get ( key ) for key in { <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> } }    