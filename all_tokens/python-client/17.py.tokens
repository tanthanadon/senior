from genestack_client import Application , FilesUtil , GenestackException , Metainfo class DataFlowEditor ( Application ) :      APPLICATION_ID = <str> def __init__ ( self , connection , application_id = None ) :          Application . __init__ ( self , connection , application_id ) self . __cache = { }  def create_dataflow ( self , accession , name = None ) :          response = self . invoke ( <str> , <str> , accession ) if response [ <str> ] == <str> :              accession = response [ <str> ] [ <str> ]  elif response [ <str> ] == <str> :              file_info = response [ <str> ] [ - 1 ] accession = file_info [ <str> ]  else :              raise GenestackException ( <str> % response [ <str> ] )  if name :              FilesUtil ( self . connection ) . replace_metainfo_string_value ( [ accession ] , Metainfo . NAME , name )  return accession  def add_files ( self , page_accession , node_accession , files ) :          node = self . __get_node_by_accession ( page_accession , node_accession ) self . invoke ( <str> , files , node , page_accession )  def clear_node ( self , page_accession , node_accession ) :          node = self . __get_node_by_accession ( page_accession , node_accession ) self . invoke ( <str> , node , page_accession )  def __get_graph ( self , page_accession ) :          if page_accession not in self . __cache :              self . __cache [ page_accession ] = self . invoke ( <str> , page_accession )  return self . __cache [ page_accession ]  def __get_node_by_accession ( self , page_accession , accession ) :          for node , node_data in self . __get_graph ( page_accession ) [ <str> ] . items ( ) :              if accession in node_data [ <str> ] [ <str> ] :                  return node      