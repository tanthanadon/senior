import unittest try :      from nose_parameterized import parameterized  except :      print ( <str> ) exit ( 0 )  import oandapyV20 . contrib . requests as req import oandapyV20 . definitions . orders as OD import oandapyV20 . types as types class TestContribRequests ( unittest . TestCase ) :      @ parameterized . expand ( [ ( req . MarketOrderRequest , { <str> : <str> , <str> : 10000 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . MarketOrderRequest , { <str> : <str> , <str> : 12345 , <str> : <str> } , { <str> : <str> , <str> : types . PriceValue ( 12345 ) . value , <str> : <str> , <str> : <str> } ) , ( req . MarketOrderRequest , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . MarketOrderRequest , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . LimitOrderRequest , { <str> : <str> , <str> : 10000 , <str> : 1.08 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . LimitOrderRequest , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . LimitOrderRequest , { <str> : <str> , <str> : <str> , <str> : 10000 , <str> : 1.08 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . MITOrderRequest , { <str> : <str> , <str> : 10000 , <str> : 1.08 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . MITOrderRequest , { <str> : <str> , <str> : <str> , <str> : 10000 , <str> : 1.08 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . MITOrderRequest , { <str> : <str> , <str> : <str> , <str> : 10000 , <str> : 1.08 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . TakeProfitOrderRequest , { <str> : <str> , <str> : 1.22 } , { <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . TakeProfitOrderRequest , { <str> : <str> , <str> : <str> , <str> : 1.22 } , { <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . TakeProfitOrderRequest , { <str> : <str> , <str> : <str> , <str> : 1.22 } , { <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . StopLossOrderRequest , { <str> : <str> , <str> : 1.07 } , { <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . StopLossOrderRequest , { <str> : <str> , <str> : <str> , <str> : 1.07 } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . StopLossOrderRequest , { <str> : <str> , <str> : <str> , <str> : 1.07 } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . TrailingStopLossOrderRequest , { <str> : <str> , <str> : 20.5 } , { <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . TrailingStopLossOrderRequest , { <str> : <str> , <str> : <str> , <str> : 20.5 } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . TrailingStopLossOrderRequest , { <str> : <str> , <str> : <str> , <str> : 20.5 } , { <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ( req . StopOrderRequest , { <str> : <str> , <str> : 10000 , <str> : 1.07 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } ) , ( req . StopOrderRequest , { <str> : <str> , <str> : 10000 , <str> : <str> , <str> : 1.07 } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , ValueError ) , ] ) def test__orders ( self , cls , inpar , refpar , exc = None ) :          reference = dict ( { <str> : refpar } ) for k in inpar . keys ( ) :              if k not in reference [ <str> ] :                  reference [ <str> ] [ k ] = str ( inpar [ k ] )   if not exc :              r = cls ( ** inpar ) self . assertTrue ( r . data == reference )  else :              with self . assertRaises ( exc ) :                  r = cls ( ** inpar )    @ parameterized . expand ( [ ( req . PositionCloseRequest , { <str> : 10000 , <str> : 2000 } , { <str> : <str> , <str> : <str> } , ) , ( req . PositionCloseRequest , { } , { } , ValueError ) , ( req . PositionCloseRequest , { <str> : 10000 , <str> : 2000 , <str> : { <str> : <str> } } , { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } , ) , ( req . PositionCloseRequest , { <str> : 10000 , <str> : 2000 , <str> : { <str> : <str> } } , { <str> : <str> , <str> : <str> , <str> : { <str> : <str> } } , ) , ( req . TradeCloseRequest , { <str> : 10000 } , { <str> : <str> } ) , ( req . TradeCloseRequest , { } , { <str> : <str> } ) , ( req . TakeProfitDetails , { <str> : 1.10 } , { <str> : <str> , <str> : <str> } ) , ( req . TakeProfitDetails , { <str> : 1.10 , <str> : OD . TimeInForce . GTD } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . TakeProfitDetails , { <str> : 1.10 , <str> : OD . TimeInForce . FOK } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . StopLossDetails , { <str> : 1.10 } , { <str> : <str> , <str> : <str> } ) , ( req . StopLossDetails , { <str> : 1.10 , <str> : OD . TimeInForce . GTD } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . StopLossDetails , { <str> : 1.10 , <str> : OD . TimeInForce . FOK } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . TrailingStopLossDetails , { <str> : 25 } , { <str> : <str> , <str> : <str> } ) , ( req . TrailingStopLossDetails , { <str> : 100 , <str> : OD . TimeInForce . GTD } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . TrailingStopLossDetails , { <str> : 100 , <str> : OD . TimeInForce . FOK } , { <str> : <str> , <str> : <str> } , ValueError ) , ( req . ClientExtensions , { <str> : <str> } , { <str> : <str> } , ) , ( req . ClientExtensions , { <str> : <str> } , { <str> : <str> } , ) , ( req . ClientExtensions , { <str> : <str> } , { <str> : <str> } , ) , ( req . ClientExtensions , { } , { } , ValueError ) , ] ) def test__anonymous_body ( self , cls , inpar , refpar , exc = None ) :          if not exc :              r = cls ( ** inpar ) if inpar else cls ( ) self . assertTrue ( r . data == refpar )  else :              with self . assertRaises ( exc ) :                  r = cls ( ** inpar )     if __name__ == <str> :      unittest . main ( )   