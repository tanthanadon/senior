import sys import unittest import json from . import unittestsetup from . unittestsetup import environment as environment from . unittestsetup import fetchTestData import requests_mock from oandapyV20 import API from oandapyV20 . exceptions import StreamTerminated import oandapyV20 . endpoints . transactions as transactions from oandapyV20 . endpoints . transactions import responses access_token = None accountID = None account_cur = None api = None class TestTransactions ( unittest . TestCase ) :      def setUp ( self ) :          global access_token global accountID global account_cur global api try :              accountID , account_cur , access_token = unittestsetup . auth ( ) setattr ( sys . modules [ <str> ] , <str> , { <str> : { <str> : <str> , <str> : <str> , } } ) api = API ( environment = environment , access_token = access_token , headers = { <str> : <str> } ) api . api_url = <str>  except Exception as e :              print ( <str> % e ) exit ( 0 )   @ requests_mock . Mocker ( ) def test__transactions ( self , mock_get ) :          tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = transactions . TransactionList ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) api . request ( r ) self . assertTrue ( resp == r . response )  @ requests_mock . Mocker ( ) def test__transactions_details ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) transactionID = 2304 r = transactions . TransactionDetails ( accountID , transactionID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) api . request ( r ) self . assertTrue ( resp == r . response )  @ requests_mock . Mocker ( ) def test__transactions_idrange ( self , mock_get ) :          tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = transactions . TransactionIDRange ( accountID , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) api . request ( r ) self . assertTrue ( resp == r . response )  @ requests_mock . Mocker ( ) def test__transactions_sinceid ( self , mock_get ) :          tid = <str> resp , data , params = fetchTestData ( responses , tid ) r = transactions . TransactionsSinceID ( accountID , params = params ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = json . dumps ( resp ) ) api . request ( r ) self . assertTrue ( resp == r . response )  @ requests_mock . Mocker ( ) def test__transaction_stream ( self , mock_get ) :          tid = <str> resp , data = fetchTestData ( responses , tid ) text = <str> . join ( [ json . dumps ( t ) for t in resp ] ) r = transactions . TransactionsStream ( accountID ) mock_get . register_uri ( <str> , <str> . format ( api . api_url , r ) , text = text ) result = [ ] n = 0 m = 5 with self . assertRaises ( StreamTerminated ) :              api . request ( r ) for rv in r . response :                  result . append ( rv ) n += 1 if n == m :                      r . terminate ( )    self . assertTrue ( result == resp [ 0 : m ] )  def test__transaction_stream_termination_1 ( self ) :          r = transactions . TransactionsStream ( accountID ) with self . assertRaises ( ValueError ) :              r . terminate ( )    if __name__ == <str> :      unittest . main ( )   