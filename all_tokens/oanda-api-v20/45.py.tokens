from . apirequest import APIRequest from . decorators import dyndoc_insert , endpoint from . responses . positions import responses from abc import abstractmethod class Positions ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self , accountID , instrument = None ) :          endpoint = self . ENDPOINT . format ( accountID = accountID , instrument = instrument ) super ( Positions , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class PositionList ( Positions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID ) :          super ( PositionList , self ) . __init__ ( accountID )   @ endpoint ( <str> ) class OpenPositions ( Positions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID ) :          super ( OpenPositions , self ) . __init__ ( accountID )   @ endpoint ( <str> ) class PositionDetails ( Positions ) :      @ dyndoc_insert ( responses ) def __init__ ( self , accountID , instrument ) :          super ( PositionDetails , self ) . __init__ ( accountID , instrument )   @ endpoint ( <str> , <str> ) class PositionClose ( Positions ) :      HEADERS = { <str> : <str> } @ dyndoc_insert ( responses ) def __init__ ( self , accountID , instrument , data ) :          super ( PositionClose , self ) . __init__ ( accountID , instrument ) self . data = data    