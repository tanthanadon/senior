from . apirequest import APIRequest from . decorators import dyndoc_insert , endpoint from . responses . forexlabs import responses from abc import abstractmethod class ForexLabs ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self ) :          endpoint = self . ENDPOINT . format ( ) super ( ForexLabs , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class Calendar ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params ) :          super ( Calendar , self ) . __init__ ( ) self . params = params   @ endpoint ( <str> ) class HistoricalPositionRatios ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params ) :          super ( HistoricalPositionRatios , self ) . __init__ ( ) self . params = params   @ endpoint ( <str> ) class Spreads ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params ) :          super ( Spreads , self ) . __init__ ( ) self . params = params   @ endpoint ( <str> ) class CommitmentsOfTraders ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params ) :          super ( CommitmentsOfTraders , self ) . __init__ ( ) self . params = params   @ endpoint ( <str> ) class OrderbookData ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params ) :          super ( OrderbookData , self ) . __init__ ( ) self . params = params   @ endpoint ( <str> ) class Autochartist ( ForexLabs ) :      @ dyndoc_insert ( responses ) def __init__ ( self , params = None ) :          super ( Autochartist , self ) . __init__ ( ) self . params = params    