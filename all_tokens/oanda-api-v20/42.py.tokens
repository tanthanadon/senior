from . apirequest import APIRequest from . decorators import dyndoc_insert , endpoint from . responses . instruments import responses from abc import abstractmethod class Instruments ( APIRequest ) :      ENDPOINT = <str> METHOD = <str> @ abstractmethod @ dyndoc_insert ( responses ) def __init__ ( self , instrument ) :          endpoint = self . ENDPOINT . format ( instrument = instrument ) super ( Instruments , self ) . __init__ ( endpoint , method = self . METHOD )   @ endpoint ( <str> ) class InstrumentsCandles ( Instruments ) :      @ dyndoc_insert ( responses ) def __init__ ( self , instrument , params = None ) :          super ( InstrumentsCandles , self ) . __init__ ( instrument ) self . params = params   @ endpoint ( <str> ) class InstrumentsOrderBook ( Instruments ) :      @ dyndoc_insert ( responses ) def __init__ ( self , instrument , params = None ) :          super ( InstrumentsOrderBook , self ) . __init__ ( instrument ) self . params = params   @ endpoint ( <str> ) class InstrumentsPositionBook ( Instruments ) :      @ dyndoc_insert ( responses ) def __init__ ( self , instrument , params = None ) :          super ( InstrumentsPositionBook , self ) . __init__ ( instrument ) self . params = params    