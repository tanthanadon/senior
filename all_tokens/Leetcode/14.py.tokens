class Solution ( object ) :      kth = 0 result = 0 def kthSmallest ( self , root , k ) :          self . kth = k self . helper ( root ) return self . result  def helper ( self , root ) :          if root is None :              return  self . helper ( root . left ) if self . kth == 1 :              self . result = root . val self . kth -= 1 return  self . kth -= 1 self . helper ( root . right )   class Solution ( object ) :      def kthSmallest ( self , root , k ) :          stack = [ root ] while stack :              last_node = stack [ - 1 ] if last_node . left is not None :                  stack . append ( last_node . left ) last_node . left = None continue  node = stack . pop ( ) if k == 1 :                  return node . val  k -= 1 if node . right is not None :                  stack . append ( node . right )   return - 1   class Solution ( object ) :      def kthSmallest ( self , root , k ) :          c = self . count ( root . left ) if k == c + 1 :              return root . val  if k <= c :              return self . kthSmallest ( root . left , k )  return self . kthSmallest ( root . right , k - 1 - c )  def count ( self , root ) :          if root is None :              return 0  return 1 + self . count ( root . left ) + self . count ( root . right )    