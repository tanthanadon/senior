from __future__ import division from __future__ import print_function import numpy as np import ehtim as eh from ehtim . calibrating import self_cal as sc from ehtim . imaging import patch_prior as pp import ehtim . image as image from ehtim . imaging import starwarps as sw import matplotlib . pyplot as plt import sys , os , copy import scipy import scipy . optimize as opt obsname = <str> flux = 2.0 fwhm = 50 * eh . RADPERUAS fov = 100 * eh . RADPERUAS NPIX = 30 npixels = NPIX ** 2 warp_method = <str> measurement = { <str> : 1 } interiorPriors = True reassign_apxImgs = False numLinIters = 5 variance_img_diff = 1e-7 nIters = 30 NHIST = 5000 stop = 1e-10 maxit = 4000 SAVE = True dirname = <str> obs = eh . obsdata . load_uvfits ( obsname ) obs_List = sw . splitObs ( obs ) meanImg = [ ] emptyprior = eh . image . make_square ( obs , NPIX , fov ) gaussprior = emptyprior . add_gauss ( flux , ( fwhm , fwhm , 0 , 0 , 0 ) ) meanImg . append ( gaussprior . copy ( ) ) imCov = [ ] imCov . append ( sw . gaussImgCovariance_2 ( meanImg [ 0 ] , powerDropoff = 2.0 , frac = 1. / 2. ) ) noiseCov_img = np . eye ( npixels ) * variance_img_diff init_x , init_y , flowbasis_x , flowbasis_y , initTheta = sw . affineMotionBasis_noTranslation ( meanImg [ 0 ] ) expVal_t , expVal_t_t , expVal_tm1_t , loglikelihood , apxImgs = sw . computeSuffStatistics ( meanImg , imCov , obs_List , noiseCov_img , initTheta , init_x , init_y , flowbasis_x , flowbasis_y , initTheta , method = warp_method , measurement = measurement , interiorPriors = interiorPriors , numLinIters = numLinIters , compute_expVal_tm1_t = False ) if SAVE :      try :          os . stat ( dirname )  except :          os . mkdir ( dirname )  sw . movie ( expVal_t , out = dirname + <str> )  nbasis = flowbasis_x . shape [ 2 ] bnds = [ ] for b in range ( 0 , nbasis ) :      bnds . append ( ( - 1.5 , 1.5 ) )  newTheta = copy . deepcopy ( initTheta ) feval = 0.0 optdict = { <str> : maxit , <str> : stop , <str> : NHIST , <str> : True } negll = [ ] thetas = [ ] fevals = [ ] for iter in range ( 0 , nIters + 1 ) :      print ( <str> % ( iter , nIters + 1 ) ) if iter == 0 or reassign_apxImgs :          apxImgs = False  expVal_t , expVal_t_t , expVal_tm1_t , loglikelihood , apxImgs = sw . computeSuffStatistics ( meanImg , imCov , obs_List , noiseCov_img , newTheta , init_x , init_y , flowbasis_x , flowbasis_y , initTheta , method = warp_method , measurement = measurement , interiorPriors = interiorPriors , numLinIters = numLinIters , apxImgs = apxImgs ) negll . append ( - loglikelihood [ 2 ] ) thetas . append ( newTheta ) fevals . append ( feval ) if SAVE :          try :              os . stat ( dirname + <str> + str ( iter ) )  except :              os . mkdir ( dirname + <str> + str ( iter ) )  stdevImg = meanImg [ 0 ] . copy ( ) for i in range ( 0 , len ( obs_List ) ) :              stdevImg . imvec = np . sqrt ( np . diag ( expVal_t_t [ i ] ) ) expVal_t [ i ] . save_fits ( dirname + <str> + str ( iter ) + <str> + str ( i ) + <str> ) stdevImg . save_fits ( dirname + <str> + str ( iter ) + <str> + str ( i ) + <str> )  avgImg = meanImg [ 0 ] . copy ( ) avgImg . imvec = np . mean ( [ im . imvec for im in expVal_t ] , axis = 0 ) plt . figure ( ) , sw . plot_Flow ( avgImg , thetas [ iter ] , init_x , init_y , flowbasis_x , flowbasis_y , initTheta , step = 1 ) plt . savefig ( dirname + <str> + str ( iter ) + <str> ) sw . movie ( expVal_t , dirname + <str> + str ( iter ) + <str> ) scipy . io . savemat ( dirname + <str> + str ( iter ) + <str> , { <str> : negll , <str> : thetas , <str> : fevals } )  if iter < nIters :          result = opt . minimize ( sw . expnegloglikelihood , newTheta , args = ( expVal_t , expVal_t_t , expVal_tm1_t , meanImg , imCov , obs_List , noiseCov_img , init_x , init_y , flowbasis_x , flowbasis_y , initTheta , warp_method ) , method = <str> , jac = sw . deriv_expnegloglikelihood , bounds = bnds , options = optdict ) newTheta = result . x feval = result . fun    