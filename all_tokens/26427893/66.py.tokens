from __future__ import print_function import sys import os import argparse import numpy as np import ehtim as eh import matplotlib . pyplot as plt def pick ( obs , req_sites ) :      tlists = np . array ( obs . tlist ( ) ) mask = np . array ( [ req_sites . issubset ( set ( tlist [ <str> ] ) . union ( tlist [ <str> ] ) ) for tlist in tlists ] ) out = obs . copy ( ) if len ( tlists [ mask ] ) == 0 :          out . data = np . array ( [ ] )  else :          out . data = np . concatenate ( tlists [ mask ] )  return out  stepname = <str> outdir = <str> def multical ( obs , sites , master_caltab , n = 3 , amp0 = 8.0 , gain_tol = 0.1 , only_amp = True ) :      sites = set ( sites ) common = { <str> : sites , <str> : 10000000.0 , <str> : False , <str> : 0.0 , <str> : gain_tol , <str> : 0 , <str> : True } if len ( pick ( obs , sites ) . data ) == 0 :          return [ obs , master_caltab ]  for i in range ( n ) :          datadir = outdir + <str> . format ( stepname , i ) caltab = eh . network_cal ( pick ( obs , sites ) , amp0 , method = <str> , pol = <str> , ** common ) caltab = caltab . pad_scans ( ) obs = caltab . applycal ( obs , interp = <str> , extrapolate = True ) caltab . save_txt ( obs , datadir = datadir ) obs_cal_avg . save_uvfits ( datadir + <str> + args . output ) if master_caltab == None :              master_caltab = caltab  else :              master_caltab = master_caltab . merge ( caltab )  if only_amp :              continue  datadir = outdir + <str> . format ( stepname , i ) caltab = eh . network_cal ( pick ( obs , sites ) , amp0 , method = <str> , pol = <str> , ** common ) caltab = caltab . pad_scans ( ) obs = caltab . applycal ( obs , interp = <str> , extrapolate = True ) caltab . save_txt ( obs , datadir = datadir ) obs_cal_avg . save_uvfits ( datadir + <str> + args . output ) if master_caltab == None :              master_caltab = caltab  else :              master_caltab = master_caltab . merge ( caltab )   return [ obs , master_caltab ]  expt = { <str> : 3597 , <str> : 3598 , <str> : 3599 , <str> : 3600 , <str> : 3601 } parser = argparse . ArgumentParser ( description = <str> ) parser . add_argument ( <str> , help = <str> ) parser . add_argument ( <str> , <str> , default = None , help = <str> ) parser . add_argument ( <str> , <str> , default = None , help = <str> ) parser . add_argument ( <str> , <str> , default = 1 , type = int , help = <str> ) parser . add_argument ( <str> , <str> , default = 7.0 , type = float , help = <str> ) parser . add_argument ( <str> , <str> , default = 10.0 , type = float , help = <str> ) args = parser . parse_args ( ) if args . output is None :      file_label = os . path . basename ( <str> . join ( args . input . split ( <str> ) [ : - 2 ] ) ) args . output = file_label + <str>  else :      file_label = os . path . basename ( <str> . join ( args . input . split ( <str> ) [ : - 1 ] ) ) outdir = os . path . dirname ( args . output ) + <str> args . output = os . path . basename ( args . output )  print ( <str> ) print ( <str> , args . input ) print ( <str> , args . caldir ) print ( <str> , args . output ) print ( <str> , outdir ) print ( <str> , args . prune ) print ( <str> , args . ampzbl ) print ( <str> , args . tavg ) obs = eh . obsdata . load_uvfits ( args . input , polrep = <str> ) print ( <str> ) obs = obs . flag_sites ( [ <str> ] ) print ( <str> ) obs = obs . flag_anomalous ( <str> , robust_nsigma_cut = 3.0 ) obs = obs . flag_anomalous ( <str> , robust_nsigma_cut = 3.0 ) noise_scale_factor = obs . estimate_noise_rescale_factor ( ) print ( <str> ) if np . isnan ( noise_scale_factor ) :      print ( <str> )  else :      print ( <str> , noise_scale_factor ) if np . abs ( noise_scale_factor - 1.0 ) > 0.5 :          print ( <str> ) obs = obs . rescale_noise ( noise_scale_factor )  else :          print ( <str> )   if args . caldir != None :      print ( <str> ) caltab = eh . caltable . load_caltable ( obs , args . caldir ) obs_cal = caltab . applycal ( obs , interp = <str> , extrapolate = True )  else :      obs_cal = obs . copy ( )  if args . tavg > 0.0 :      obs_cal_avg = obs_cal . avg_coherent ( args . tavg ) obs_cal_avg . save_uvfits ( outdir + file_label + <str> )  else :      obs_cal_avg = obs . copy ( )  if args . prune > 1 :      print ( <str> , args . prune ) obs_cal_avg . data = np . concatenate ( obs_cal_avg . tlist ( ) [ : : args . prune ] )  master_caltab = None stepname = file_label + <str> sites = { <str> , <str> } [ obs_cal_avg , master_caltab ] = multical ( obs_cal_avg , sites , master_caltab , n = 2 , amp0 = args . ampzbl , gain_tol = 0.3 ) stepname = file_label + <str> sites = { <str> , <str> } [ obs_cal_avg , master_caltab ] = multical ( obs_cal_avg , sites , master_caltab , n = 2 , amp0 = args . ampzbl , gain_tol = 0.3 ) stepname = file_label + <str> sites = { <str> , <str> , <str> , <str> } [ obs_cal_avg , master_caltab ] = multical ( obs_cal_avg , sites , master_caltab , n = 2 , amp0 = args . ampzbl , gain_tol = 0.1 ) obs_cal_avg . save_uvfits ( outdir + args . output ) master_caltab . save_txt ( obs , datadir = outdir + file_label + <str> )  