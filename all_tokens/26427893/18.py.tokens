from __future__ import division from ehtim . observing . pulses import * import sys import matplotlib as mpl mpl . rc ( <str> , ** { <str> : <str> , <str> : 12 } ) EP = 1.0e-10 C = 299792458.0 DEGREE = 3.141592653589 / 180.0 HOUR = 15.0 * DEGREE RADPERAS = DEGREE / 3600.0 RADPERUAS = RADPERAS * 1.e-6 SOURCE_DEFAULT = <str> RA_DEFAULT = 17.761122472222223 DEC_DEFAULT = - 28.992189444444445 RF_DEFAULT = 230e9 MJD_DEFAULT = 51544 PULSE_DEFAULT = trianglePulse2D ELEV_LOW = 10.0 ELEV_HIGH = 85.0 TAUDEF = 0.1 GAINPDEF = 0.1 DTERMPDEF = 0.05 FWHM_MAJ = 1.309 * 1000 FWHM_MIN = 0.64 * 1000 POS_ANG = 78 NFFT_KERSIZE_DEFAULT = 20 GRIDDER_P_RAD_DEFAULT = 2 GRIDDER_CONV_FUNC_DEFAULT = <str> FFT_PAD_DEFAULT = 2 FFT_INTERP_DEFAULT = 3 DTARR = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTPOL_STOKES = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTPOL_CIRC = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTAMP = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTBIS = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTCPHASE = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTCAMP = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTCAL = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] DTSCANS = [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] POLDICT_STOKES = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } POLDICT_CIRC = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } vis_poldict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } amp_poldict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } sig_poldict = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } FIELDS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> , <str> , <str> , <str> , <str> ] FIELDS_AMPS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] FIELDS_SIGS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] FIELDS_PHASE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] FIELDS_SIGPHASE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] FIELDS_SNRS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] MARKERSIZE = 3 FIELD_LABELS = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } SCOLORS = [ ( 0.11764705882352941 , 0.5647058823529412 , 1.0 ) , ( 1.0 , 0.38823529411764707 , 0.2784313725490196 ) , ( 0.5411764705882353 , 0.16862745098039217 , 0.8862745098039215 ) , ( 0.4196078431372549 , 0.5568627450980392 , 0.13725490196078433 ) , ( 1.0 , 0.6470588235294118 , 0.0 ) , ( 0.5450980392156862 , 0.27058823529411763 , 0.07450980392156863 ) , ( 0.0 , 0.0 , 0.803921568627451 ) , ( 1.0 , 0.0 , 0.0 ) , ( 0.0 , 1.0 , 1.0 ) , ( 1.0 , 0.0 , 1.0 ) , ( 0.0 , 0.39215686274509803 , 0.0 ) , ( 0.8235294117647058 , 0.7058823529411765 , 0.5490196078431373 ) , ( 0.0 , 0.0 , 0.0 ) ] def recarr_to_ndarr ( x , typ ) :      fields = x . dtype . names shape = x . shape + ( len ( fields ) , ) dt = [ ( name , typ ) for name in fields ] y = x . astype ( dt ) . view ( typ ) . reshape ( shape ) return y  def prog_msg ( nscan , totscans , msgtype = <str> , nscan_last = 0 ) :      complete_percent_last = int ( 100 * float ( nscan_last ) / float ( totscans ) ) complete_percent = int ( 100 * float ( nscan ) / float ( totscans ) ) ndigit = str ( len ( str ( totscans ) ) ) if msgtype == <str> :          bar_width = 30 progress = int ( bar_width * complete_percent / float ( 100 ) ) barparams = ( nscan , totscans , ( <str> * progress ) + ( <str> * ( bar_width - progress ) ) , complete_percent ) printstr = <str> + ndigit + <str> sys . stdout . write ( printstr % barparams ) sys . stdout . flush ( )  elif msgtype == <str> :          bar_width = 30 progress = int ( bar_width * complete_percent / float ( 100 ) ) barparams = ( nscan , totscans , ( <str> * progress ) + ( <str> * ( bar_width - progress ) ) , complete_percent ) printstr = <str> + ndigit + <str> sys . stdout . write ( printstr % barparams ) sys . stdout . flush ( )  elif msgtype == <str> :          message_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] bar_width = len ( message_list ) progress = int ( bar_width * complete_percent / float ( 100 ) ) message = <str> . join ( message_list [ : progress ] ) barparams = ( nscan , totscans , message ) printstr = <str> + ndigit + <str> sys . stdout . write ( printstr % barparams ) sys . stdout . flush ( )  elif msgtype == <str> :          message_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] bar_width = len ( message_list ) progress = int ( bar_width * complete_percent / float ( 100 ) ) message = <str> . join ( message_list [ : progress ] ) if complete_percent < 100 :              message += <str> message += <str> * ( bar_width - progress - 1 )  barparams = ( nscan , totscans , message ) printstr = <str> + ndigit + <str> sys . stdout . write ( printstr % barparams ) sys . stdout . flush ( )  elif msgtype == <str> :          message_all = BHIMAGE bar_width = len ( message_all ) progress = int ( np . floor ( bar_width * complete_percent / float ( 100 ) ) ) - 1 progress_last = int ( np . floor ( bar_width * complete_percent_last / float ( 100 ) ) ) - 1 if progress > progress_last :              for i in range ( progress_last + 1 , progress + 1 ) :                  message_line = <str> . join ( message_all [ i ] ) message_line = <str> % int ( complete_percent ) + message_line print ( message_line )    elif msgtype == <str> :          message_all = EHTIMAGE bar_width = len ( message_all ) progress = int ( np . floor ( bar_width * complete_percent / float ( 100 ) ) ) - 1 progress_last = int ( np . floor ( bar_width * complete_percent_last / float ( 100 ) ) ) - 1 if progress > progress_last :              for i in range ( progress_last + 1 , progress + 1 ) :                  message_line = <str> . join ( message_all [ i ] ) message_line = <str> % int ( complete_percent ) + message_line print ( message_line )    elif msgtype == <str> :          message_all = GITSTASHIMAGE bar_width = len ( message_all ) progress = int ( np . floor ( bar_width * complete_percent / float ( 100 ) ) ) - 1 progress_last = int ( np . floor ( bar_width * complete_percent_last / float ( 100 ) ) ) - 1 if progress > progress_last :              for i in range ( progress_last + 1 , progress + 1 ) :                  message_line = <str> . join ( message_all [ i ] ) message_line = <str> % int ( complete_percent ) + message_line print ( message_line )    elif msgtype == <str> :          sys . stdout . write ( <str> ) sys . stdout . flush ( )  else :          barparams = ( nscan , totscans , complete_percent ) printstr = <str> + ndigit + <str> sys . stdout . write ( printstr % barparams ) sys . stdout . flush ( )   BHIMAGE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] EHTIMAGE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] GITSTASHIMAGE = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ]  