from __future__ import print_function import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from matplotlib . backends . backend_pdf import PdfPages from matplotlib . font_manager import FontProperties import argparse import math import os import datetime from ehtim . plotting . comp_plots import plotall_obs_compare , plot_bl_obs_compare , plot_cphase_obs_compare , plot_camp_obs_compare from ehtim . calibrating . self_cal import self_cal as selfcal from ehtim . const_def import * FONTSIZE = 22 WSPACE = 0.8 HSPACE = 0.3 MARGINS = 0.5 PROCESSES = 4 MARKERSIZE = 5 def imgsum ( im , obs , obs_uncal , outname , outdir = <str> , title = <str> , commentstr = <str> , fontsize = FONTSIZE , cfun = <str> , snrcut = 0. , gainplots = True , ampplots = True , cphaseplots = True , campplots = True , ebar = True , debias = True , cp_uv_min = False , sysnoise = 0 , syscnoise = 0 ) :      plt . rc ( <str> , family = <str> ) plt . rc ( <str> , usetex = True ) plt . rc ( <str> , size = FONTSIZE ) plt . rc ( <str> , titlesize = FONTSIZE ) plt . rc ( <str> , labelsize = FONTSIZE ) plt . rc ( <str> , labelsize = FONTSIZE ) plt . rc ( <str> , labelsize = FONTSIZE ) plt . rc ( <str> , fontsize = FONTSIZE ) plt . rc ( <str> , titlesize = FONTSIZE ) if fontsize == 0 : fontsize = FONTSIZE snrcut_dict = { key : 0. for key in [ <str> , <str> , <str> , <str> , <str> ] } if type ( snrcut ) is dict :          for key in snrcut . keys ( ) :              snrcut_dict [ key ] = snrcut [ key ]   else :          for key in snrcut_dict . keys ( ) :              snrcut_dict [ key ] = snrcut   with PdfPages ( outname ) as pdf :          titlestr = <str> % ( im . source , im . mjd ) d = pdf . infodict ( ) d [ <str> ] = title d [ <str> ] = <str> d [ <str> ] = titlestr d [ <str> ] = datetime . datetime . today ( ) d [ <str> ] = datetime . datetime . today ( ) fig = plt . figure ( 1 , figsize = ( 18 , 28 ) , dpi = 200 ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) if len ( commentstr ) > 1 :              titlestr = titlestr + <str> + str ( commentstr )  else :              titlestr = titlestr  plt . suptitle ( titlestr , y = .9 , va = <str> , fontsize = int ( 1.2 * fontsize ) ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 0 : 2 , 0 : 2 ] ) ax . set_title ( <str> ) ax = display_img ( im , axis = ax , show = False , has_title = False , cfun = cfun , fontsize = fontsize ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 0 : 2 , 2 : 5 ] ) ax . set_title ( <str> ) fwhm = obs . res ( ) print ( <str> , fwhm / RADPERUAS ) beamparams = [ fwhm , fwhm , 0 ] res = obs . res ( ) imblur = im . blur_gauss ( beamparams , frac = 1.0 ) ax = display_img ( imblur , beamparams = beamparams , axis = ax , show = False , has_title = False , cfun = cfun , fontsize = fontsize ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 2 , 0 : 2 ] ) ax . set_title ( <str> ) ax . set_yticks ( [ ] ) ax . set_xticks ( [ ] ) flux = im . total_flux ( ) maxset = False chi2vis = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = sysnoise , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2amp = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = sysnoise , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2cphase = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = sysnoise , systematic_cphase_noise = syscnoise , maxset = maxset , cp_uv_min = cp_uv_min , snrcut = snrcut_dict [ <str> ] ) chi2logcamp = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = sysnoise , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2camp = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = sysnoise , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2vis_uncal = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = 0 , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2amp_uncal = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = 0 , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2cphase_uncal = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = 0 , systematic_cphase_noise = 0 , maxset = maxset , cp_uv_min = cp_uv_min , snrcut = snrcut_dict [ <str> ] ) chi2logcamp_uncal = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = 0 , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) chi2camp_uncal = obs . chisq ( im , dtype = <str> , ttype = <str> , systematic_noise = 0 , maxset = maxset , snrcut = snrcut_dict [ <str> ] ) print ( <str> % ( chi2vis , chi2vis_uncal ) ) print ( <str> % ( chi2amp , chi2amp_uncal ) ) print ( <str> % ( chi2cphase , chi2cphase_uncal ) ) print ( <str> % ( chi2logcamp , chi2logcamp_uncal ) ) print ( <str> % ( chi2logcamp , chi2logcamp_uncal ) ) fs = int ( 1 * fontsize ) fs2 = int ( .8 * fontsize ) ax . text ( .05 , .9 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .05 , .7 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .05 , .5 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .05 , .3 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .05 , .1 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .23 , .9 , <str> % im . source , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .23 , .7 , <str> % im . mjd , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .23 , .5 , <str> % ( im . rf / 1.e9 ) , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .23 , .3 , <str> % ( im . fovx ( ) / RADPERUAS ) , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .23 , .1 , <str> % flux , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .5 , .9 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .5 , .7 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .5 , .5 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .5 , .3 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .5 , .1 , <str> , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .72 , .9 , <str> % chi2vis , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .72 , .7 , <str> % chi2amp , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .72 , .5 , <str> % chi2cphase , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .72 , .3 , <str> % chi2logcamp , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .72 , .1 , <str> % chi2camp , fontsize = fs , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .85 , .9 , <str> % chi2vis_uncal , fontsize = fs2 , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .85 , .7 , <str> % chi2amp_uncal , fontsize = fs2 , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .85 , .5 , <str> % chi2cphase_uncal , fontsize = fs2 , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .85 , .3 , <str> % chi2logcamp , fontsize = fs2 , ha = <str> , va = <str> , transform = ax . transAxes ) ax . text ( .85 , .1 , <str> % chi2camp_uncal , fontsize = fs2 , ha = <str> , va = <str> , transform = ax . transAxes ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 3 : 6 , 0 : 2 ] ) ax . set_title ( <str> ) ax . set_yticks ( [ ] ) ax . set_xticks ( [ ] ) cp = obs . c_phases ( mode = <str> , count = <str> , uv_min = cp_uv_min , snrcut = snrcut_dict [ <str> ] ) n_cphase = len ( cp ) alltris = [ ( str ( cpp [ <str> ] ) , str ( cpp [ <str> ] ) , str ( cpp [ <str> ] ) ) for cpp in cp ] uniqueclosure_tri = [ ] for tri in alltris :              if tri not in uniqueclosure_tri : uniqueclosure_tri . append ( tri )  obs_model = im . observe_same ( obs , add_th_noise = False , ttype = <str> ) cphases_obs = obs . c_phases ( mode = <str> , count = <str> , vtype = <str> , uv_min = cp_uv_min , snrcut = snrcut_dict [ <str> ] ) if snrcut_dict [ <str> ] > 0 :              cphases_obs_all = obs . c_phases ( mode = <str> , count = <str> , vtype = <str> , uv_min = cp_uv_min , snrcut = 0. ) cphases_model_all = obs_model . c_phases ( mode = <str> , count = <str> , vtype = <str> , uv_min = cp_uv_min , snrcut = 0. ) mask = [ cphase in cphases_obs for cphase in cphases_obs_all ] cphases_model = cphases_model_all [ mask ] print ( <str> , snrcut_dict [ <str> ] , <str> , len ( cphases_obs ) , <str> , len ( cphases_obs_all ) )  else :              cphases_model = obs_model . c_phases ( mode = <str> , count = <str> , vtype = <str> , uv_min = cp_uv_min , snrcut = 0. )  ncphase = 0 cphase_chisq_data = [ ] for c in range ( 0 , len ( uniqueclosure_tri ) ) :              cphases_obs_tri = obs . cphase_tri ( uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , vtype = <str> , ang_unit = <str> , cphases = cphases_obs ) if len ( cphases_obs_tri ) > 0 :                  cphases_model_tri = obs_model . cphase_tri ( uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , vtype = <str> , ang_unit = <str> , cphases = cphases_model ) chisq_tri = 2 * np . sum ( ( 1.0 - np . cos ( cphases_obs_tri [ <str> ] * DEGREE - cphases_model_tri [ <str> ] * DEGREE ) ) / ( ( cphases_obs_tri [ <str> ] * DEGREE ) ** 2 ) ) npts = len ( cphases_obs_tri ) data = [ uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , npts , chisq_tri ] cphase_chisq_data . append ( data )   idx = np . argsort ( [ data [ - 1 ] for data in cphase_chisq_data ] ) idx = list ( reversed ( idx ) ) chisqtab = <str> first = True for i in range ( len ( cphase_chisq_data ) ) :              if i > 30 : break data = cphase_chisq_data [ idx [ i ] ] tristr = <str> % ( data [ 0 ] , data [ 1 ] , data [ 2 ] ) nstr = <str> % data [ 3 ] chisqstr = <str> % data [ 4 ] rchisqstr = <str> % ( float ( data [ 4 ] ) / float ( data [ 3 ] ) ) rrchisqstr = <str> % ( float ( data [ 4 ] ) / float ( n_cphase ) ) if first :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr first = False  else :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr   chisqtab += <str> ax . text ( 0.5 , .975 , chisqtab , ha = <str> , va = <str> , transform = ax . transAxes , size = fontsize ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 2 : 6 , 2 : : ] ) ax . set_title ( <str> ) ax . set_yticks ( [ ] ) ax . set_xticks ( [ ] ) cp = obs . c_amplitudes ( mode = <str> , count = <str> , ctype = <str> , debias = debias ) n_camps = len ( cp ) allquads = [ ( str ( cpp [ <str> ] ) , str ( cpp [ <str> ] ) , str ( cpp [ <str> ] ) , str ( cpp [ <str> ] ) ) for cpp in cp ] uniqueclosure_quad = [ ] for quad in allquads :              if quad not in uniqueclosure_quad :                  uniqueclosure_quad . append ( quad )   camps_obs = obs . c_amplitudes ( mode = <str> , count = <str> , ctype = <str> , debias = debias , snrcut = snrcut_dict [ <str> ] ) if snrcut_dict [ <str> ] > 0 :              camps_obs_all = obs . c_amplitudes ( mode = <str> , count = <str> , ctype = <str> , debias = debias , snrcut = 0. ) camps_model_all = obs_model . c_amplitudes ( mode = <str> , count = <str> , ctype = <str> , debias = False , snrcut = 0. ) mask = [ camp [ <str> ] in camps_obs [ <str> ] for camp in camps_obs_all ] camps_model = camps_model_all [ mask ] print ( <str> , snrcut_dict [ <str> ] , <str> , len ( camps_obs ) , <str> , len ( camps_obs_all ) )  else :              camps_model = obs_model . c_amplitudes ( mode = <str> , count = <str> , ctype = <str> , debias = False , snrcut = 0. )  ncamp = 0 camp_chisq_data = [ ] for c in range ( 0 , len ( uniqueclosure_quad ) ) :              camps_obs_quad = obs . camp_quad ( uniqueclosure_quad [ c ] [ 0 ] , uniqueclosure_quad [ c ] [ 1 ] , uniqueclosure_quad [ c ] [ 2 ] , uniqueclosure_quad [ c ] [ 3 ] , vtype = <str> , camps = camps_obs , ctype = <str> ) if len ( camps_obs_quad ) > 0 :                  camps_model_quad = obs . camp_quad ( uniqueclosure_quad [ c ] [ 0 ] , uniqueclosure_quad [ c ] [ 1 ] , uniqueclosure_quad [ c ] [ 2 ] , uniqueclosure_quad [ c ] [ 3 ] , vtype = <str> , camps = camps_model , ctype = <str> ) chisq_quad = np . sum ( np . abs ( ( camps_obs_quad [ <str> ] - camps_model_quad [ <str> ] ) / camps_obs_quad [ <str> ] ) ** 2 ) npts = len ( camps_obs_quad ) data = ( uniqueclosure_quad [ c ] [ 0 ] , uniqueclosure_quad [ c ] [ 1 ] , uniqueclosure_quad [ c ] [ 2 ] , uniqueclosure_quad [ c ] [ 3 ] , npts , chisq_quad ) camp_chisq_data . append ( data )   idx = np . argsort ( [ data [ - 1 ] for data in camp_chisq_data ] ) idx = list ( reversed ( idx ) ) chisqtab = <str> for i in range ( len ( camp_chisq_data ) ) :              if i > 45 : break data = camp_chisq_data [ idx [ i ] ] tristr = <str> % ( data [ 0 ] , data [ 1 ] , data [ 2 ] , data [ 3 ] ) nstr = <str> % data [ 4 ] chisqstr = <str> % data [ 5 ] rchisqstr = <str> % ( data [ 5 ] / float ( data [ 4 ] ) ) rrchisqstr = <str> % ( data [ 5 ] / float ( n_camps ) ) if i == 0 :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr  else :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr   chisqtab += <str> ax . text ( 0.5 , .975 , chisqtab , ha = <str> , va = <str> , transform = ax . transAxes , size = fontsize ) print ( <str> ) pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( ) fig = plt . figure ( 2 , figsize = ( 18 , 28 ) , dpi = 200 ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 0 : 2 , 0 : 2 ] ) obs_tmp = obs_model . copy ( ) obs_tmp . data [ <str> ] *= 0. ax = plotall_obs_compare ( [ obs , obs_tmp ] , <str> , <str> , axis = ax , legend = False , clist = [ <str> , SCOLORS [ 1 ] ] , ttype = <str> , show = False , debias = debias , snrcut = snrcut_dict [ <str> ] , ebar = ebar , markersize = MARKERSIZE ) ax . set_title ( <str> ) ax . set_xlabel ( <str> ) ax . set_xlim ( [ 0 , 1.e10 ] ) ax . set_xticks ( [ 0 , 2.e9 , 4.e9 , 6.e9 , 8.e9 , 10.e9 ] ) ax . set_xticklabels ( [ <str> , <str> , <str> , <str> , <str> , <str> ] ) ax . set_xticks ( [ 1.e9 , 3.e9 , 5.e9 , 7.e9 , 9.e9 ] , minor = True ) ax . set_xticklabels ( [ ] , minor = True ) ax . set_ylabel ( <str> ) ax . set_ylim ( [ 0 , 1.2 * flux ] ) yticks_maj = np . array ( [ 0 , .2 , .4 , .6 , .8 , 1 ] ) * flux ax . set_yticks ( yticks_maj ) ax . set_yticklabels ( [ <str> % fl for fl in yticks_maj ] ) yticks_min = np . array ( [ .1 , .3 , .5 , .7 , .9 ] ) * flux ax . set_yticks ( yticks_min , minor = True ) ax . set_yticklabels ( [ ] , minor = True ) if gainplots :              print ( <str> ) print ( <str> ) ax2 = plt . subplot ( gs [ 0 : 2 , 2 : 6 ] ) obs_tmp = obs_uncal . copy ( ) for i in range ( 1 ) :                  ct = selfcal ( obs_tmp , im , method = <str> , ttype = <str> , caltable = True , gain_tol = .2 , processes = PROCESSES ) ct = ct . pad_scans ( ) obs_tmp = ct . applycal ( obs_tmp , interp = <str> , extrapolate = True ) if np . any ( np . isnan ( obs_tmp . data [ <str> ] ) ) :                      print ( <str> ) break  if i > 0 :                      ct_out = ct_out . merge ( [ ct ] )  else :                      ct_out = ct   ax2 = ct_out . plot_gains ( <str> , rangey = [ .1 , 10 ] , yscale = <str> , axis = ax2 , legend = True , show = False ) ax = plt . subplot ( gs [ 3 : 6 , 2 : 5 ] ) ax . set_title ( <str> ) ax . set_yticks ( [ ] ) ax . set_xticks ( [ ] ) gain_data = [ ] for station in ct_out . tarr [ <str> ] :                  try :                      gain = np . median ( np . abs ( ct_out . data [ station ] [ <str> ] ) )  except :                      continue  pdiff = np . abs ( gain - 1 ) * 100 data = ( station , gain , pdiff ) gain_data . append ( data )  idx = np . argsort ( [ data [ - 1 ] for data in gain_data ] ) idx = list ( reversed ( idx ) ) chisqtab = <str> for i in range ( len ( gain_data ) ) :                  if i > 45 : break data = gain_data [ idx [ i ] ] sitestr = <str> % ( data [ 0 ] ) gstr = <str> % data [ 1 ] pstr = <str> % data [ 2 ] if i == 0 :                      chisqtab += <str> + sitestr + <str> + gstr + <str> + pstr  else :                      chisqtab += <str> + sitestr + <str> + gstr + <str> + pstr   chisqtab += <str> ax . text ( 0.5 , .975 , chisqtab , ha = <str> , va = <str> , transform = ax . transAxes , size = fontsize )  print ( <str> ) print ( <str> ) ax = plt . subplot ( gs [ 3 : 6 , 0 : 2 ] ) ax . set_title ( <str> ) ax . set_yticks ( [ ] ) ax . set_xticks ( [ ] ) bl_unpk = obs . unpack ( [ <str> , <str> ] , debias = debias ) n_bl = len ( bl_unpk ) allbl = [ ( str ( bl [ <str> ] ) , str ( bl [ <str> ] ) ) for bl in bl_unpk ] uniquebl = [ ] for bl in allbl :              if bl not in uniquebl :                  uniquebl . append ( bl )   ncamp = 0 bl_chisq_data = [ ] for ii in range ( 0 , len ( uniquebl ) ) :              bl = uniquebl [ ii ] amps_bl = obs . unpack_bl ( bl [ 0 ] , bl [ 1 ] , [ <str> , <str> ] , debias = debias ) if len ( amps_bl ) > 0 :                  amps_bl_model = obs_model . unpack_bl ( bl [ 0 ] , bl [ 1 ] , [ <str> , <str> ] , debias = False ) if snrcut_dict [ <str> ] > 0 :                      amask = amps_bl [ <str> ] / amps_bl [ <str> ] > snrcut_dict [ <str> ] amps_bl = amps_bl [ amask ] amps_bl_model = amps_bl_model [ amask ]  chisq_bl = np . sum ( np . abs ( ( amps_bl [ <str> ] - amps_bl_model [ <str> ] ) / amps_bl [ <str> ] ) ** 2 ) npts = len ( amps_bl_model ) data = ( bl [ 0 ] , bl [ 1 ] , npts , chisq_bl ) bl_chisq_data . append ( data )   idx = np . argsort ( [ data [ - 1 ] for data in bl_chisq_data ] ) idx = list ( reversed ( idx ) ) chisqtab = <str> for i in range ( len ( bl_chisq_data ) ) :              if i > 45 : break data = bl_chisq_data [ idx [ i ] ] tristr = <str> % ( data [ 0 ] , data [ 1 ] ) nstr = <str> % data [ 2 ] chisqstr = <str> % data [ 3 ] rchisqstr = <str> % ( data [ 3 ] / float ( data [ 2 ] ) ) rrchisqstr = <str> % ( data [ 3 ] / float ( n_bl ) ) if i == 0 :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr  else :                  chisqtab += <str> + tristr + <str> + nstr + <str> + rchisqstr + <str> + rrchisqstr   chisqtab += <str> ax . text ( 0.5 , .975 , chisqtab , ha = <str> , va = <str> , transform = ax . transAxes , size = fontsize ) print ( <str> ) pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( ) page = 3 if ampplots :              print ( <str> ) print ( <str> ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) plt . suptitle ( <str> , y = .9 , va = <str> , fontsize = int ( 1.2 * fontsize ) ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False obs_model . data [ <str> ] *= 0 amax = 1.1 * np . max ( np . abs ( np . abs ( obs_model . data [ <str> ] ) ) ) obs_all = [ obs , obs_model ] for bl in uniquebl :                  ax = plt . subplot ( gs [ 2 * i : 2 * ( i + 1 ) , 2 * j : 2 * ( j + 1 ) ] ) ax = plot_bl_obs_compare ( obs_all , bl [ 0 ] , bl [ 1 ] , <str> , rangey = [ 0 , amax ] , markersize = MARKERSIZE , debias = debias , snrcut = snrcut_dict [ <str> ] , axis = ax , legend = False , clist = [ <str> , SCOLORS [ 1 ] ] , ttype = <str> , show = False , ebar = ebar ) if ax is None : continue if switch :                      i += 1 j = 0 switch = False  else :                      j = 1 switch = True  ax . set_xlabel ( <str> ) if i == 3 :                      print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False   print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( )  if cphaseplots :              print ( <str> ) print ( <str> ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) plt . suptitle ( <str> , y = .9 , va = <str> , fontsize = int ( 1.2 * fontsize ) ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False obs_all = [ obs , obs_model ] cphases_model [ <str> ] *= 0 cphases_all = [ cphases_obs , cphases_model ] for tri in uniqueclosure_tri :                  ax = plt . subplot ( gs [ 2 * i : 2 * ( i + 1 ) , 2 * j : 2 * ( j + 1 ) ] ) ax = plot_cphase_obs_compare ( obs_all , tri [ 0 ] , tri [ 1 ] , tri [ 2 ] , rangey = [ - 185 , 185 ] , cphases = cphases_all , markersize = MARKERSIZE , axis = ax , legend = False , clist = [ <str> , SCOLORS [ 1 ] ] , ttype = <str> , show = False , ebar = ebar ) if ax is None : continue if switch :                      i += 1 j = 0 switch = False  else :                      j = 1 switch = True  ax . set_xlabel ( <str> ) if i == 3 :                      print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False   print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( )  if campplots :              print ( <str> ) print ( <str> ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) plt . suptitle ( <str> , y = .9 , va = <str> , fontsize = int ( 1.2 * fontsize ) ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False obs_all = [ obs , obs_model ] camps_model [ <str> ] *= 0 camps_all = [ camps_obs , camps_model ] cmax = 1.1 * np . max ( np . abs ( camps_obs [ <str> ] ) ) for quad in uniqueclosure_quad :                  ax = plt . subplot ( gs [ 2 * i : 2 * ( i + 1 ) , 2 * j : 2 * ( j + 1 ) ] ) ax = plot_camp_obs_compare ( obs_all , quad [ 0 ] , quad [ 1 ] , quad [ 2 ] , quad [ 3 ] , markersize = MARKERSIZE , ctype = <str> , rangey = [ - cmax , cmax ] , camps = camps_all , axis = ax , legend = False , clist = [ <str> , SCOLORS [ 1 ] ] , ttype = <str> , show = False , ebar = ebar ) if ax is None : continue if switch :                      i += 1 j = 0 switch = False  else :                      j = 1 switch = True  ax . set_xlabel ( <str> ) if i == 3 :                      print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( ) fig = plt . figure ( 3 , figsize = ( 18 , 28 ) , dpi = 200 ) gs = gridspec . GridSpec ( 6 , 4 , wspace = WSPACE , hspace = HSPACE ) i = 0 j = 0 switch = False   print ( <str> % page ) page += 1 pdf . savefig ( pad_inches = MARGINS , bbox_inches = <str> ) plt . close ( )    def display_img ( im , beamparams = None , scale = <str> , gamma = 0.5 , cbar_lims = False , has_cbar = True , has_title = True , cfun = <str> , axis = False , show = False , fontsize = FONTSIZE ) :      interp = <str> if axis :          ax = axis  else :          fig = plt . figure ( ) ax = fig . add_subplot ( 1 , 1 , 1 )  imvec = np . array ( im . imvec ) . reshape ( - 1 ) imvec = imvec * 1.e3 fovfactor = im . xdim * im . psize * ( 1 / RADPERUAS ) factor = ( 1. / fovfactor ) ** 2 / ( 1. / im . xdim ) ** 2 imvec = imvec * factor imarr = ( imvec ) . reshape ( im . ydim , im . xdim ) unit = <str> if scale == <str> :          if ( imarr < 0.0 ) . any ( ) :              print ( <str> ) imarr [ imarr < 0.0 ] = 0.0  imarr = np . log ( imarr + np . max ( imarr ) / dynamic_range ) unit = <str> + unit + <str>  if scale == <str> :          if ( imarr < 0.0 ) . any ( ) :              print ( <str> ) imarr [ imarr < 0.0 ] = 0.0  imarr = ( imarr + np . max ( imarr ) / dynamic_range ) ** ( gamma ) unit = <str> + unit + <str>  if cbar_lims :          imarr [ imarr > cbar_lims [ 1 ] ] = cbar_lims [ 1 ] imarr [ imarr < cbar_lims [ 0 ] ] = cbar_lims [ 0 ]  if cbar_lims :          ax = ax . imshow ( imarr , cmap = plt . get_cmap ( cfun ) , interpolation = interp , vmin = cbar_lims [ 0 ] , vmax = cbar_lims [ 1 ] )  else :          ax = ax . imshow ( imarr , cmap = plt . get_cmap ( cfun ) , interpolation = interp )  if has_cbar :          cbar = plt . colorbar ( ax , fraction = 0.046 , pad = 0.04 , format = <str> ) cbar . set_label ( unit , fontsize = fontsize ) cbar . ax . xaxis . set_label_position ( <str> ) cbar . ax . tick_params ( labelsize = 16 ) if cbar_lims :              plt . clim ( cbar_lims [ 0 ] , cbar_lims [ 1 ] )   if not ( beamparams is None ) :          beamparams = [ beamparams [ 0 ] , beamparams [ 1 ] , beamparams [ 2 ] , - .35 * im . fovx ( ) , - .35 * im . fovy ( ) ] beamimage = im . copy ( ) beamimage . imvec *= 0 beamimage = beamimage . add_gauss ( 1 , beamparams ) halflevel = 0.5 * np . max ( beamimage . imvec ) beamimarr = ( beamimage . imvec ) . reshape ( beamimage . ydim , beamimage . xdim ) plt . contour ( beamimarr , levels = [ halflevel ] , colors = <str> , linewidths = 3 ) ax = plt . gca ( )  plt . axis ( <str> ) fov_uas = im . xdim * im . psize / RADPERUAS roughfactor = 1. / 3. fov_scale = 40 start = im . xdim * roughfactor / 3.0 end = start + fov_scale / fov_uas * im . xdim plt . plot ( [ start , end ] , [ im . ydim - start , im . ydim - start ] , color = <str> , lw = 1 ) plt . text ( x = ( start + end ) / 2.0 , y = im . ydim - start - im . ydim / 20 , s = str ( fov_scale ) + <str> , color = <str> , ha = <str> , va = <str> , fontsize = int ( 1.2 * fontsize ) , fontweight = <str> ) ax . axes . get_xaxis ( ) . set_visible ( False ) ax . axes . get_yaxis ( ) . set_visible ( False ) if show :          plt . show ( block = False )  return ax   