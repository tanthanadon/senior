from __future__ import division from __future__ import print_function from builtins import range import numpy as np import numpy as np from numpy import pi , cos , sin import ehtim . io . oifits from ehtim . const_def import * def writeOIFITS ( filename , RA , DEC , frequency , bandWidth , intTime , visamp , visamperr , visphi , visphierr , u , v , ant1 , ant2 , timeobs , t3amp , t3amperr , t3phi , t3phierr , uClosure , vClosure , antOrder , timeClosure , antennaNames , antennaDiam , antennaX , antennaY , antennaZ ) : 	 speedoflight = C ; flagVis = False ; data = ehtim . io . oifits . oifits ( ) ; name = <str> ; data . target = np . append ( data . target , ehtim . io . oifits . OI_TARGET ( name , RA , DEC , veltyp = <str> ) ) wavelength = speedoflight / frequency bandlow = speedoflight / ( frequency + ( 0.5 * bandWidth ) ) bandhigh = speedoflight / ( frequency - ( 0.5 * bandWidth ) ) bandpass = bandhigh - bandlow data . wavelength [ <str> ] = ehtim . io . oifits . OI_WAVELENGTH ( wavelength , eff_band = bandpass ) stations = [ ] ; for i in range ( 0 , len ( antennaNames ) ) : 		 stations . append ( ( antennaNames [ i ] , antennaNames [ i ] , i + 1 , antennaDiam [ i ] , [ antennaX [ i ] , antennaY [ i ] , antennaZ [ i ] ] ) )  data . array [ <str> ] = ehtim . io . oifits . OI_ARRAY ( <str> , [ 0 , 0 , 0 ] , stations ) ; print ( <str> ) print ( <str> ) for i in range ( 0 , len ( u ) ) : 		 station_curr = ( data . array [ <str> ] . station [ int ( ant1 [ i ] - 1 ) ] , data . array [ <str> ] . station [ int ( ant2 [ i ] - 1 ) ] ) ; currVis = ehtim . io . oifits . OI_VIS ( timeobs [ i ] , intTime , visamp [ i ] , visamperr [ i ] , visphi [ i ] , visphierr [ i ] , flagVis , u [ i ] * wavelength , v [ i ] * wavelength , data . wavelength [ <str> ] , data . target [ 0 ] , array = data . array [ <str> ] , station = station_curr , cflux = False , cfluxerr = False ) ; data . vis = np . append ( data . vis , currVis ) ;  for j in range ( 0 , len ( uClosure ) ) : 		 station_curr = ( data . array [ <str> ] . station [ int ( antOrder [ j ] [ 0 ] - 1 ) ] , data . array [ <str> ] . station [ int ( antOrder [ j ] [ 1 ] - 1 ) ] , data . array [ <str> ] . station [ int ( antOrder [ j ] [ 2 ] - 1 ) ] ) ; currT3 = ehtim . io . oifits . OI_T3 ( timeClosure [ j ] , intTime , t3amp [ j ] , t3amperr [ j ] , t3phi [ j ] , t3phierr [ j ] , flagVis , uClosure [ j ] [ 0 ] * wavelength , vClosure [ j ] [ 0 ] * wavelength , uClosure [ j ] [ 1 ] * wavelength , vClosure [ j ] [ 1 ] * wavelength , data . wavelength [ <str> ] , data . target [ 0 ] , array = data . array [ <str> ] , station = station_curr ) ; data . t3 = np . append ( data . t3 , currT3 ) ;  for k in range ( 0 , len ( u ) ) : 		 station_curr = ( data . array [ <str> ] . station [ int ( ant1 [ k ] - 1 ) ] , data . array [ <str> ] . station [ int ( ant2 [ k ] - 1 ) ] ) ; currVis2 = ehtim . io . oifits . OI_VIS2 ( timeobs [ k ] , intTime , visamp [ k ] ** 2 , 2.0 * visamp [ k ] * visamperr [ k ] , flagVis , u [ k ] * wavelength , v [ k ] * wavelength , data . wavelength [ <str> ] , data . target [ 0 ] , array = data . array [ <str> ] , station = station_curr ) ; data . vis2 = np . append ( data . vis2 , currVis2 ) ;  data . save ( filename )  def arrayUnion ( array , union ) :      for item in array :          if not ( item in list ( union . keys ( ) ) ) :              union [ item ] = len ( union ) + 1   return union  def convertStrings ( array , union ) :      returnarray = np . zeros ( array . shape ) for i in range ( len ( array ) ) :          returnarray [ i ] = union [ array [ i ] ]  return returnarray   