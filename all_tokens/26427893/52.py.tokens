from __future__ import print_function from builtins import range from builtins import object import numpy as np import scipy . signal import scipy . special as sps import scipy . integrate as integrate from scipy . optimize import minimize import matplotlib . pyplot as plt from IPython import display import ehtim . image as image import ehtim . movie as movie import ehtim . obsdata as obsdata from ehtim . observing . obs_helpers import * from ehtim . const_def import * import math import cmath class ScatteringModel ( object ) :      def __init__ ( self , model = <str> , scatt_alpha = 1.38 , observer_screen_distance = 2.82 * 3.086e21 , source_screen_distance = 5.53 * 3.086e21 , theta_maj_mas_ref = 1.380 , theta_min_mas_ref = 0.703 , POS_ANG = 81.9 , wavelength_reference_cm = 1.0 , r_in = 800e5 , r_out = 1e20 ) :          self . model = model self . POS_ANG = POS_ANG self . observer_screen_distance = observer_screen_distance self . source_screen_distance = source_screen_distance M = observer_screen_distance / source_screen_distance self . wavelength_reference = wavelength_reference_cm self . r_in = r_in self . r_out = r_out self . scatt_alpha = scatt_alpha FWHM_fac = ( 2.0 * np . log ( 2.0 ) ) ** 0.5 / np . pi self . Qbar = 2.0 / sps . gamma ( ( 2.0 - self . scatt_alpha ) / 2.0 ) * ( self . r_in ** 2 * ( 1.0 + M ) / ( FWHM_fac * ( self . wavelength_reference / ( 2.0 * np . pi ) ) ** 2 ) ) ** 2 * ( ( theta_maj_mas_ref ** 2 + theta_min_mas_ref ** 2 ) * ( 1.0 / 1000.0 / 3600.0 * np . pi / 180.0 ) ** 2 ) self . C_scatt_0 = ( self . wavelength_reference / ( 2.0 * np . pi ) ) ** 2 * self . Qbar * sps . gamma ( 1.0 - self . scatt_alpha / 2.0 ) / ( 8.0 * np . pi ** 2 * self . r_in ** 2 ) A = theta_maj_mas_ref / theta_min_mas_ref self . phi0 = ( 90 - self . POS_ANG ) * np . pi / 180.0 theta_maj_rad_ref = theta_maj_mas_ref / 1000.0 / 3600.0 * np . pi / 180.0 theta_min_rad_ref = theta_min_mas_ref / 1000.0 / 3600.0 * np . pi / 180.0 self . Amaj_0 = ( self . r_in * ( 1.0 + M ) * theta_maj_rad_ref / ( FWHM_fac * ( self . wavelength_reference / ( 2.0 * np . pi ) ) * 2.0 * np . pi ) ) ** 2 self . Amin_0 = ( self . r_in * ( 1.0 + M ) * theta_min_rad_ref / ( FWHM_fac * ( self . wavelength_reference / ( 2.0 * np . pi ) ) * 2.0 * np . pi ) ) ** 2 if model == <str> :              def avM_Anisotropy ( kzeta ) :                  return np . abs ( ( kzeta * sps . i0 ( kzeta ) / sps . i1 ( kzeta ) - 1.0 ) ** 0.5 - A )  self . kzeta = minimize ( avM_Anisotropy , A ** 2 , method = <str> , options = { <str> : 1e-8 , <str> : False } ) . x self . P_phi_prefac = 1.0 / ( 2.0 * np . pi * sps . i0 ( self . kzeta ) )  elif model == <str> :              def boxcar_Anisotropy ( kzeta ) :                  return np . abs ( np . sin ( np . pi / ( 1.0 + kzeta ) ) / ( np . pi / ( 1.0 + kzeta ) ) - ( theta_maj_mas_ref ** 2 - theta_min_mas_ref ** 2 ) / ( theta_maj_mas_ref ** 2 + theta_min_mas_ref ** 2 ) )  self . kzeta = minimize ( boxcar_Anisotropy , A , method = <str> , options = { <str> : 1e-8 , <str> : False } ) . x self . P_phi_prefac = ( 1.0 + self . kzeta ) / ( 2.0 * np . pi )  elif model == <str> :              def dipole_Anisotropy ( kzeta ) :                  return np . abs ( sps . hyp2f1 ( ( self . scatt_alpha + 2.0 ) / 2.0 , 0.5 , 2.0 , - kzeta ) / sps . hyp2f1 ( ( self . scatt_alpha + 2.0 ) / 2.0 , 1.5 , 2.0 , - kzeta ) - A ** 2 )  self . kzeta = minimize ( dipole_Anisotropy , A , method = <str> , options = { <str> : 1e-8 , <str> : False } ) . x self . P_phi_prefac = 1.0 / ( 2.0 * np . pi * sps . hyp2f1 ( ( self . scatt_alpha + 2.0 ) / 2.0 , 0.5 , 1.0 , - self . kzeta ) )  else :              print ( <str> )  int_maj = integrate . quad ( lambda phi_q : np . abs ( np . cos ( self . phi0 - phi_q ) ) ** self . scatt_alpha * self . P_phi ( phi_q ) , 0 , 2.0 * np . pi , limit = 250 ) [ 0 ] int_min = integrate . quad ( lambda phi_q : np . abs ( np . sin ( self . phi0 - phi_q ) ) ** self . scatt_alpha * self . P_phi ( phi_q ) , 0 , 2.0 * np . pi , limit = 250 ) [ 0 ] B_prefac = self . C_scatt_0 * 2.0 ** ( 2.0 - self . scatt_alpha ) * np . pi ** 0.5 / ( self . scatt_alpha * sps . gamma ( ( self . scatt_alpha + 1.0 ) / 2.0 ) ) self . Bmaj_0 = B_prefac * int_maj self . Bmin_0 = B_prefac * int_min return  def P_phi ( self , phi ) :          if self . model == <str> :              return self . P_phi_prefac * np . cosh ( self . kzeta * np . cos ( phi - self . phi0 ) )  elif self . model == <str> :              return self . P_phi_prefac * ( 1.0 - ( ( np . pi / ( 2.0 * ( 1.0 + self . kzeta ) ) < ( phi - self . phi0 ) % np . pi ) & ( ( phi - self . phi0 ) % np . pi < np . pi - np . pi / ( 2.0 * ( 1.0 + self . kzeta ) ) ) ) )  elif self . model == <str> :              return self . P_phi_prefac * ( 1.0 + self . kzeta * np . sin ( phi - self . phi0 ) ** 2 ) ** ( - ( self . scatt_alpha + 2.0 ) / 2.0 )   def rF ( self , wavelength ) :          return ( self . source_screen_distance * self . observer_screen_distance / ( self . source_screen_distance + self . observer_screen_distance ) * wavelength / ( 2.0 * np . pi ) ) ** 0.5  def Mag ( self ) :          return self . observer_screen_distance / self . source_screen_distance  def dDphi_dz ( self , r , phi , phi_q , wavelength ) :          return 4.0 * ( wavelength / self . wavelength_reference ) ** 2 * self . C_scatt_0 / self . scatt_alpha * ( sps . hyp1f1 ( - self . scatt_alpha / 2.0 , 0.5 , - r ** 2 / ( 4.0 * self . r_in ** 2 ) * np . cos ( phi - phi_q ) ** 2 ) - 1.0 )  def Dphi_exact ( self , x , y , wavelength_cm ) :          r = ( x ** 2 + y ** 2 ) ** 0.5 phi = np . arctan2 ( y , x ) return integrate . quad ( lambda phi_q : self . dDphi_dz ( r , phi , phi_q , wavelength_cm ) * self . P_phi ( phi_q ) , 0 , 2.0 * np . pi ) [ 0 ]  def Dmaj ( self , r , wavelength_cm ) :          return ( wavelength_cm / self . wavelength_reference ) ** 2 * self . Bmaj_0 * ( 2.0 * self . Amaj_0 / ( self . scatt_alpha * self . Bmaj_0 ) ) ** ( - self . scatt_alpha / ( 2.0 - self . scatt_alpha ) ) * ( ( 1.0 + ( 2.0 * self . Amaj_0 / ( self . scatt_alpha * self . Bmaj_0 ) ) ** ( 2.0 / ( 2.0 - self . scatt_alpha ) ) * ( r / self . r_in ) ** 2 ) ** ( self . scatt_alpha / 2.0 ) - 1.0 )  def Dmin ( self , r , wavelength_cm ) :          return ( wavelength_cm / self . wavelength_reference ) ** 2 * self . Bmin_0 * ( 2.0 * self . Amin_0 / ( self . scatt_alpha * self . Bmin_0 ) ) ** ( - self . scatt_alpha / ( 2.0 - self . scatt_alpha ) ) * ( ( 1.0 + ( 2.0 * self . Amin_0 / ( self . scatt_alpha * self . Bmin_0 ) ) ** ( 2.0 / ( 2.0 - self . scatt_alpha ) ) * ( r / self . r_in ) ** 2 ) ** ( self . scatt_alpha / 2.0 ) - 1.0 )  def Dphi_approx ( self , x , y , wavelength_cm ) :          r = ( x ** 2 + y ** 2 ) ** 0.5 phi = np . arctan2 ( y , x ) Dmaj_eval = self . Dmaj ( r , wavelength_cm ) Dmin_eval = self . Dmin ( r , wavelength_cm ) return ( Dmaj_eval + Dmin_eval ) / 2.0 + ( Dmaj_eval - Dmin_eval ) / 2.0 * np . cos ( 2.0 * ( phi - self . phi0 ) )  def Q ( self , qx , qy ) :          q = ( qx ** 2 + qy ** 2 ) ** 0.5 + 1e-12 / self . r_in phi_q = np . arctan2 ( qy , qx ) return self . Qbar * ( q * self . r_in ) ** ( - ( self . scatt_alpha + 2.0 ) ) * np . exp ( - ( q * self . r_in ) ** 2 ) * self . P_phi ( phi_q )  def sqrtQ_Matrix ( self , Reference_Image , Vx_km_per_s = 50.0 , Vy_km_per_s = 0.0 , t_hr = 0.0 ) :          FOV = Reference_Image . psize * Reference_Image . xdim * self . observer_screen_distance N = Reference_Image . xdim dq = 2.0 * np . pi / FOV screen_x_offset_pixels = ( Vx_km_per_s * 1.e5 ) * ( t_hr * 3600.0 ) / ( FOV / float ( N ) ) screen_y_offset_pixels = ( Vy_km_per_s * 1.e5 ) * ( t_hr * 3600.0 ) / ( FOV / float ( N ) ) s , t = np . meshgrid ( np . fft . fftfreq ( N , d = 1.0 / N ) , np . fft . fftfreq ( N , d = 1.0 / N ) ) sqrtQ = np . sqrt ( self . Q ( dq * s , dq * t ) ) * np . exp ( 2.0 * np . pi * 1j * ( s * screen_x_offset_pixels + t * screen_y_offset_pixels ) / float ( N ) ) sqrtQ [ 0 ] [ 0 ] = 0.0 return sqrtQ  def Ensemble_Average_Kernel ( self , Reference_Image , wavelength_cm = None , use_approximate_form = True ) :          if wavelength_cm == None :              wavelength_cm = C / Reference_Image . rf * 100.0  uvlist = np . fft . fftfreq ( Reference_Image . xdim ) / Reference_Image . psize if use_approximate_form == True :              u_grid , v_grid = np . meshgrid ( uvlist , uvlist ) ker_uv = self . Ensemble_Average_Kernel_Visibility ( u_grid , v_grid , wavelength_cm , use_approximate_form = use_approximate_form )  else :              ker_uv = np . array ( [ [ self . Ensemble_Average_Kernel_Visibility ( u , v , wavelength_cm , use_approximate_form = use_approximate_form ) for u in uvlist ] for v in uvlist ] )  ker = np . real ( np . fft . fftshift ( np . fft . fft2 ( ker_uv ) ) ) ker = ker / np . sum ( ker ) return ker  def Ensemble_Average_Kernel_Visibility ( self , u , v , wavelength_cm , use_approximate_form = True ) :          if use_approximate_form == True :              return np . exp ( - 0.5 * self . Dphi_approx ( u * wavelength_cm / ( 1.0 + self . Mag ( ) ) , v * wavelength_cm / ( 1.0 + self . Mag ( ) ) , wavelength_cm ) )  else :              return np . exp ( - 0.5 * self . Dphi_exact ( u * wavelength_cm / ( 1.0 + self . Mag ( ) ) , v * wavelength_cm / ( 1.0 + self . Mag ( ) ) , wavelength_cm ) )   def Ensemble_Average_Blur ( self , im , wavelength_cm = None , ker = None , use_approximate_form = True ) :          if wavelength_cm == None :              wavelength_cm = C / im . rf * 100.0  if ker is None :              ker = self . Ensemble_Average_Kernel ( im , wavelength_cm , use_approximate_form )  Iim = Wrapped_Convolve ( ( im . imvec ) . reshape ( im . ydim , im . xdim ) , ker ) out = image . Image ( Iim , im . psize , im . ra , im . dec , rf = C / ( wavelength_cm / 100.0 ) , source = im . source , mjd = im . mjd , pulse = im . pulse ) if len ( im . qvec ) :              Qim = Wrapped_Convolve ( ( im . qvec ) . reshape ( im . ydim , im . xdim ) , ker ) Uim = Wrapped_Convolve ( ( im . uvec ) . reshape ( im . ydim , im . xdim ) , ker ) out . add_qu ( Qim , Uim )  if len ( im . vvec ) :              Vim = Wrapped_Convolve ( ( im . vvec ) . reshape ( im . ydim , im . xdim ) , ker ) out . add_v ( Vim )  return out  def Deblur_obs ( self , obs , use_approximate_form = True ) :          datatable = ( obs . copy ( ) ) . data vis = datatable [ <str> ] qvis = datatable [ <str> ] uvis = datatable [ <str> ] vvis = datatable [ <str> ] sigma = datatable [ <str> ] qsigma = datatable [ <str> ] usigma = datatable [ <str> ] vsigma = datatable [ <str> ] u = datatable [ <str> ] v = datatable [ <str> ] for i in range ( len ( vis ) ) :              ker = self . Ensemble_Average_Kernel_Visibility ( u [ i ] , v [ i ] , wavelength_cm = C / obs . rf * 100.0 , use_approximate_form = use_approximate_form ) vis [ i ] = vis [ i ] / ker qvis [ i ] = qvis [ i ] / ker uvis [ i ] = uvis [ i ] / ker vvis [ i ] = vvis [ i ] / ker sigma [ i ] = sigma [ i ] / ker qsigma [ i ] = qsigma [ i ] / ker usigma [ i ] = usigma [ i ] / ker vsigma [ i ] = vsigma [ i ] / ker  datatable [ <str> ] = vis datatable [ <str> ] = qvis datatable [ <str> ] = uvis datatable [ <str> ] = vvis datatable [ <str> ] = sigma datatable [ <str> ] = qsigma datatable [ <str> ] = usigma datatable [ <str> ] = vsigma obsdeblur = obsdata . Obsdata ( obs . ra , obs . dec , obs . rf , obs . bw , datatable , obs . tarr , source = obs . source , mjd = obs . mjd , ampcal = obs . ampcal , phasecal = obs . phasecal , opacitycal = obs . opacitycal , dcal = obs . dcal , frcal = obs . frcal ) return obsdeblur  def MakePhaseScreen ( self , EpsilonScreen , Reference_Image , obs_frequency_Hz = 0.0 , Vx_km_per_s = 50.0 , Vy_km_per_s = 0.0 , t_hr = 0.0 , sqrtQ_init = None ) :          if obs_frequency_Hz == 0.0 :              obs_frequency_Hz = Reference_Image . rf  wavelength = C / obs_frequency_Hz * 100.0 wavelengthbar = wavelength / ( 2.0 * np . pi ) FOV = Reference_Image . psize * Reference_Image . xdim * self . observer_screen_distance rF = self . rF ( wavelength ) Nx = EpsilonScreen . shape [ 1 ] Ny = EpsilonScreen . shape [ 0 ] if Nx % 2 == 0 :              print ( <str> )  screen_x_offset_pixels = ( Vx_km_per_s * 1.e5 ) * ( t_hr * 3600.0 ) / ( FOV / float ( Nx ) ) screen_y_offset_pixels = ( Vy_km_per_s * 1.e5 ) * ( t_hr * 3600.0 ) / ( FOV / float ( Nx ) ) if sqrtQ_init is None :              sqrtQ = self . sqrtQ_Matrix ( Reference_Image , Vx_km_per_s = Vx_km_per_s , Vy_km_per_s = Vy_km_per_s , t_hr = t_hr )  else :              if screen_x_offset_pixels != 0.0 or screen_y_offset_pixels != 0.0 :                  s , t = np . meshgrid ( np . fft . fftfreq ( Nx , d = 1.0 / Nx ) , np . fft . fftfreq ( Ny , d = 1.0 / Ny ) ) sqrtQ = sqrtQ_init * np . exp ( 2.0 * np . pi * 1j * ( s * screen_x_offset_pixels + t * screen_y_offset_pixels ) / float ( Nx ) )  else :                  sqrtQ = sqrtQ_init   phi = np . real ( wavelengthbar / FOV * EpsilonScreen . shape [ 0 ] * EpsilonScreen . shape [ 1 ] * np . fft . ifft2 ( sqrtQ * EpsilonScreen ) ) phi_Image = image . Image ( phi , Reference_Image . psize , Reference_Image . ra , Reference_Image . dec , rf = Reference_Image . rf , source = Reference_Image . source , mjd = Reference_Image . mjd ) return phi_Image  def Scatter ( self , Unscattered_Image , Epsilon_Screen = np . array ( [ ] ) , obs_frequency_Hz = 0.0 , Vx_km_per_s = 50.0 , Vy_km_per_s = 0.0 , t_hr = 0.0 , ea_ker = None , sqrtQ = None , Linearized_Approximation = False , DisplayImage = False , Force_Positivity = False , use_approximate_form = True ) :          if obs_frequency_Hz == 0.0 :              obs_frequency_Hz = Unscattered_Image . rf  wavelength = C / obs_frequency_Hz * 100.0 wavelengthbar = wavelength / ( 2.0 * np . pi ) FOV = Unscattered_Image . psize * Unscattered_Image . xdim * self . observer_screen_distance rF = self . rF ( wavelength ) Nx = Unscattered_Image . xdim Ny = Unscattered_Image . ydim EA_Image = self . Ensemble_Average_Blur ( Unscattered_Image , wavelength , ker = ea_ker , use_approximate_form = use_approximate_form ) if Epsilon_Screen . shape [ 0 ] == 0 :              Epsilon_Screen = MakeEpsilonScreen ( Nx , Ny )  phi_Image = self . MakePhaseScreen ( Epsilon_Screen , Unscattered_Image , obs_frequency_Hz , Vx_km_per_s = Vx_km_per_s , Vy_km_per_s = Vy_km_per_s , t_hr = t_hr , sqrtQ_init = sqrtQ ) phi = phi_Image . imvec . reshape ( Ny , Nx ) phi_Gradient = Wrapped_Gradient ( phi / ( FOV / Nx ) ) phi_Gradient_x = - phi_Gradient [ 1 ] phi_Gradient_y = - phi_Gradient [ 0 ] if Linearized_Approximation == True :              EA_Gradient = Wrapped_Gradient ( ( EA_Image . imvec / ( FOV / Nx ) ) . reshape ( EA_Image . ydim , EA_Image . xdim ) ) EA_Gradient_x = - EA_Gradient [ 1 ] EA_Gradient_y = - EA_Gradient [ 0 ] AI = ( EA_Image . imvec ) . reshape ( Ny , Nx ) + rF ** 2.0 * ( EA_Gradient_x * phi_Gradient_x + EA_Gradient_y * phi_Gradient_y ) if len ( Unscattered_Image . qvec ) :                      EA_Gradient = Wrapped_Gradient ( ( EA_Image . qvec / ( FOV / Nx ) ) . reshape ( EA_Image . ydim , EA_Image . xdim ) ) EA_Gradient_x = - EA_Gradient [ 1 ] EA_Gradient_y = - EA_Gradient [ 0 ] AI_Q = ( EA_Image . qvec ) . reshape ( Ny , Nx ) + rF ** 2.0 * ( EA_Gradient_x * phi_Gradient_x + EA_Gradient_y * phi_Gradient_y ) EA_Gradient = Wrapped_Gradient ( ( EA_Image . uvec / ( FOV / Nx ) ) . reshape ( EA_Image . ydim , EA_Image . xdim ) ) EA_Gradient_x = - EA_Gradient [ 1 ] EA_Gradient_y = - EA_Gradient [ 0 ] AI_U = ( EA_Image . uvec ) . reshape ( Ny , Nx ) + rF ** 2.0 * ( EA_Gradient_x * phi_Gradient_x + EA_Gradient_y * phi_Gradient_y )  if len ( Unscattered_Image . vvec ) :                      EA_Gradient = Wrapped_Gradient ( ( EA_Image . vvec / ( FOV / Nx ) ) . reshape ( EA_Image . ydim , EA_Image . xdim ) ) EA_Gradient_x = - EA_Gradient [ 1 ] EA_Gradient_y = - EA_Gradient [ 0 ] AI_V = ( EA_Image . vvec ) . reshape ( Ny , Nx ) + rF ** 2.0 * ( EA_Gradient_x * phi_Gradient_x + EA_Gradient_y * phi_Gradient_y )   else :              EA_im = ( EA_Image . imvec ) . reshape ( Ny , Nx ) AI = np . copy ( ( EA_Image . imvec ) . reshape ( Ny , Nx ) ) if len ( Unscattered_Image . qvec ) :                  AI_Q = np . copy ( ( EA_Image . imvec ) . reshape ( Ny , Nx ) ) AI_U = np . copy ( ( EA_Image . imvec ) . reshape ( Ny , Nx ) ) EA_im_Q = ( EA_Image . qvec ) . reshape ( Ny , Nx ) EA_im_U = ( EA_Image . uvec ) . reshape ( Ny , Nx )  if len ( Unscattered_Image . vvec ) :                  AI_V = np . copy ( ( EA_Image . imvec ) . reshape ( Ny , Nx ) ) EA_im_V = ( EA_Image . vvec ) . reshape ( Ny , Nx )  for rx in range ( Nx ) :                  for ry in range ( Ny ) :                      rxp = int ( np . round ( rx - rF ** 2.0 * phi_Gradient_x [ ry , rx ] / self . observer_screen_distance / Unscattered_Image . psize ) ) % Nx ryp = int ( np . round ( ry - rF ** 2.0 * phi_Gradient_y [ ry , rx ] / self . observer_screen_distance / Unscattered_Image . psize ) ) % Ny AI [ ry , rx ] = EA_im [ ryp , rxp ] if len ( Unscattered_Image . qvec ) :                          AI_Q [ ry , rx ] = EA_im_Q [ ryp , rxp ] AI_U [ ry , rx ] = EA_im_U [ ryp , rxp ]  if len ( Unscattered_Image . vvec ) :                          AI_V [ ry , rx ] = EA_im_V [ ryp , rxp ]     if Force_Positivity == True :             AI = abs ( AI )  AI_Image = image . Image ( AI , EA_Image . psize , EA_Image . ra , EA_Image . dec , rf = EA_Image . rf , source = EA_Image . source , mjd = EA_Image . mjd ) if len ( Unscattered_Image . qvec ) :              AI_Image . add_qu ( AI_Q , AI_U )  if len ( Unscattered_Image . vvec ) :              AI_Image . add_v ( AI_V )  if DisplayImage :              plot_scatt ( Unscattered_Image . imvec , EA_Image . imvec , AI_Image . imvec , phi_Image . imvec , Unscattered_Image , 0 , 0 , ipynb = False )  return AI_Image  def Scatter_Movie ( self , Unscattered_Movie , Epsilon_Screen = np . array ( [ ] ) , obs_frequency_Hz = 0.0 , Vx_km_per_s = 50.0 , Vy_km_per_s = 0.0 , framedur_sec = None , N_frames = None , sqrtQ = None , Linearized_Approximation = False , Force_Positivity = False , Return_Image_List = False ) :          if type ( Unscattered_Movie ) != movie . Movie and framedur_sec == None :              print ( <str> ) return  if type ( Unscattered_Movie ) == image . Image and N_frames == None :              print ( <str> ) return  if framedur_sec == None :              framedur_sec = Unscattered_Movie . framedur  print ( <str> , framedur_sec ) if type ( Unscattered_Movie ) == movie . Movie :              N = Unscattered_Movie . xdim N_frames = len ( Unscattered_Movie . frames ) psize = Unscattered_Movie . psize ra = Unscattered_Movie . ra dec = Unscattered_Movie . dec rf = Unscattered_Movie . rf pulse = Unscattered_Movie . pulse source = Unscattered_Movie . source mjd = Unscattered_Movie . mjd start_hr = Unscattered_Movie . start_hr has_pol = len ( Unscattered_Movie . qframes )  elif type ( Unscattered_Movie ) == list :              N = Unscattered_Movie [ 0 ] . xdim N_frames = len ( Unscattered_Movie ) psize = Unscattered_Movie [ 0 ] . psize ra = Unscattered_Movie [ 0 ] . ra dec = Unscattered_Movie [ 0 ] . dec rf = Unscattered_Movie [ 0 ] . rf pulse = Unscattered_Movie [ 0 ] . pulse source = Unscattered_Movie [ 0 ] . source mjd = Unscattered_Movie [ 0 ] . mjd start_hr = 0.0 has_pol = len ( Unscattered_Movie [ 0 ] . qvec )  else :              N = Unscattered_Movie . xdim psize = Unscattered_Movie . psize ra = Unscattered_Movie . ra dec = Unscattered_Movie . dec rf = Unscattered_Movie . rf pulse = Unscattered_Movie . pulse source = Unscattered_Movie . source mjd = Unscattered_Movie . mjd start_hr = 0.0 has_pol = len ( Unscattered_Movie . qvec )  def get_frame ( j ) :              if type ( Unscattered_Movie ) == movie . Movie :                  im = image . Image ( Unscattered_Movie . frames [ j ] . reshape ( ( N , N ) ) , psize , ra , dec , rf , pulse , source , mjd ) if len ( Unscattered_Movie . qframes ) > 0 :                      im . add_qu ( Unscattered_Movie . qframes [ j ] . reshape ( ( N , N ) ) , Unscattered_Movie . uframes [ j ] . reshape ( ( N , N ) ) )  return im  elif type ( Unscattered_Movie ) == list :                  return Unscattered_Movie [ j ]  else :                  return Unscattered_Movie   if sqrtQ is None :              sqrtQ = self . sqrtQ_Matrix ( get_frame ( 0 ) )  if Epsilon_Screen . shape [ 0 ] == 0 :              Epsilon_Screen = MakeEpsilonScreen ( N , N )  scattered_im_List = [ self . Scatter ( get_frame ( j ) , Epsilon_Screen , obs_frequency_Hz = obs_frequency_Hz , Vx_km_per_s = Vx_km_per_s , Vy_km_per_s = Vy_km_per_s , t_hr = framedur_sec / 3600.0 * j , sqrtQ = sqrtQ , Linearized_Approximation = Linearized_Approximation , Force_Positivity = Force_Positivity ) for j in range ( N_frames ) ] if Return_Image_List == True :              return scattered_im_List  Scattered_Movie = movie . Movie ( [ im . imvec . reshape ( ( im . xdim , im . ydim ) ) for im in scattered_im_List ] , framedur = framedur_sec , psize = psize , ra = ra , dec = dec , rf = rf , pulse = pulse , source = source , mjd = mjd , start_hr = start_hr ) if has_pol :              Scattered_Movie_Q = [ im . qvec . reshape ( ( im . xdim , im . ydim ) ) for im in scattered_im_List ] Scattered_Movie_U = [ im . uvec . reshape ( ( im . xdim , im . ydim ) ) for im in scattered_im_List ] Scattered_Movie . add_qu ( Scattered_Movie_Q , Scattered_Movie_U )  return Scattered_Movie   def Wrapped_Convolve ( sig , ker ) :      N = sig . shape [ 0 ] return scipy . signal . fftconvolve ( np . pad ( sig , ( ( N , N ) , ( N , N ) ) , <str> ) , np . pad ( ker , ( ( N , N ) , ( N , N ) ) , <str> ) , mode = <str> ) [ N : ( 2 * N ) , N : ( 2 * N ) ]  def Wrapped_Gradient ( M ) :      G = np . gradient ( np . pad ( M , ( ( 1 , 1 ) , ( 1 , 1 ) ) , <str> ) ) Gx = G [ 0 ] [ 1 : - 1 , 1 : - 1 ] Gy = G [ 1 ] [ 1 : - 1 , 1 : - 1 ] return ( Gx , Gy )  def MakeEpsilonScreenFromList ( EpsilonList , N ) :      epsilon = np . zeros ( ( N , N ) , dtype = np . complex ) N_re = ( N * N - 1 ) // 2 i = 0 for x in range ( 1 , ( N + 1 ) // 2 ) :          epsilon [ 0 ] [ x ] = EpsilonList [ i ] + 1j * EpsilonList [ i + N_re ] epsilon [ 0 ] [ N - x ] = np . conjugate ( epsilon [ 0 ] [ x ] ) i = i + 1  for y in range ( 1 , ( N + 1 ) // 2 ) :          for x in range ( N ) :              epsilon [ y ] [ x ] = EpsilonList [ i ] + 1j * EpsilonList [ i + N_re ] x2 = N - x y2 = N - y if x2 == N :                  x2 = 0  if y2 == N :                  y2 = 0  epsilon [ y2 ] [ x2 ] = np . conjugate ( epsilon [ y ] [ x ] ) i = i + 1   return epsilon  def MakeEpsilonScreen ( Nx , Ny , rngseed = 0 ) :      if rngseed != 0 :          np . random . seed ( rngseed )  epsilon = np . random . normal ( loc = 0.0 , scale = 1.0 / math . sqrt ( 2 ) , size = ( Ny , Nx ) ) + 1j * np . random . normal ( loc = 0.0 , scale = 1.0 / math . sqrt ( 2 ) , size = ( Ny , Nx ) ) epsilon [ 0 ] [ 0 ] = 0.0 if Nx % 2 == 0 :          epsilon [ 0 ] [ Nx // 2 ] = np . real ( epsilon [ 0 ] [ Nx // 2 ] )  if Ny % 2 == 0 :          epsilon [ Ny // 2 ] [ 0 ] = np . real ( epsilon [ Ny // 2 ] [ 0 ] )  if Nx % 2 == 0 and Ny % 2 == 0 :          epsilon [ Ny // 2 ] [ Nx // 2 ] = np . real ( epsilon [ Ny // 2 ] [ Nx // 2 ] )  for x in range ( Nx ) :          if x > ( Nx - 1 ) // 2 :              epsilon [ 0 ] [ x ] = np . conjugate ( epsilon [ 0 ] [ Nx - x ] )  for y in range ( ( Ny - 1 ) // 2 , Ny ) :              x2 = Nx - x y2 = Ny - y if x2 == Nx :                  x2 = 0  if y2 == Ny :                  y2 = 0  epsilon [ y ] [ x ] = np . conjugate ( epsilon [ y2 ] [ x2 ] )   return epsilon  def plot_scatt ( im_unscatt , im_ea , im_scatt , im_phase , Prior , nit , chi2 , ipynb = False ) :      x = np . array ( [ [ i for i in range ( Prior . xdim ) ] for j in range ( Prior . ydim ) ] ) y = np . array ( [ [ j for i in range ( Prior . xdim ) ] for j in range ( Prior . ydim ) ] ) plt . ion ( ) plt . clf ( ) if chi2 > 0.0 :          plt . suptitle ( <str> % ( nit , chi2 ) , fontsize = 20 )  plt . subplot ( 141 ) plt . imshow ( im_unscatt . reshape ( Prior . ydim , Prior . xdim ) , cmap = plt . get_cmap ( <str> ) , interpolation = <str> , vmin = 0 ) xticks = ticks ( Prior . xdim , Prior . psize / RADPERAS / 1e-6 ) yticks = ticks ( Prior . ydim , Prior . psize / RADPERAS / 1e-6 ) plt . xticks ( xticks [ 0 ] , xticks [ 1 ] ) plt . yticks ( yticks [ 0 ] , yticks [ 1 ] ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) plt . subplot ( 142 ) plt . imshow ( im_ea . reshape ( Prior . ydim , Prior . xdim ) , cmap = plt . get_cmap ( <str> ) , interpolation = <str> , vmin = 0 ) xticks = ticks ( Prior . xdim , Prior . psize / RADPERAS / 1e-6 ) yticks = ticks ( Prior . ydim , Prior . psize / RADPERAS / 1e-6 ) plt . xticks ( xticks [ 0 ] , xticks [ 1 ] ) plt . yticks ( yticks [ 0 ] , yticks [ 1 ] ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) plt . subplot ( 143 ) plt . imshow ( im_scatt . reshape ( Prior . ydim , Prior . xdim ) , cmap = plt . get_cmap ( <str> ) , interpolation = <str> , vmin = 0 ) xticks = ticks ( Prior . xdim , Prior . psize / RADPERAS / 1e-6 ) yticks = ticks ( Prior . ydim , Prior . psize / RADPERAS / 1e-6 ) plt . xticks ( xticks [ 0 ] , xticks [ 1 ] ) plt . yticks ( yticks [ 0 ] , yticks [ 1 ] ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) plt . subplot ( 144 ) plt . imshow ( im_phase . reshape ( Prior . ydim , Prior . xdim ) , cmap = plt . get_cmap ( <str> ) , interpolation = <str> ) xticks = ticks ( Prior . xdim , Prior . psize / RADPERAS / 1e-6 ) yticks = ticks ( Prior . ydim , Prior . psize / RADPERAS / 1e-6 ) plt . xticks ( xticks [ 0 ] , xticks [ 1 ] ) plt . yticks ( yticks [ 0 ] , yticks [ 1 ] ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) plt . draw ( ) if ipynb :          display . clear_output ( ) display . display ( plt . gcf ( ) )    