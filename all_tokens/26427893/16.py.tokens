from __future__ import division from __future__ import print_function from builtins import range from builtins import object import numpy as np import re from astropy . time import Time import os import ehtim . array from ehtim . const_def import * from ehtim . observing . obs_helpers import * class Vex ( object ) :      def __init__ ( self , filename ) :          f = open ( filename ) raw = f . readlines ( ) f . close ( ) self . filename = filename metalist = [ ] for i in range ( len ( raw ) ) :              if raw [ i ] [ 0 ] == <str> :                  temp = [ raw [ i ] ] break   for j in range ( i + 1 , len ( raw ) ) :              if raw [ j ] [ 0 ] != <str> :                  temp . append ( raw [ j ] )  elif raw [ j ] [ 0 ] == <str> :                  metalist . append ( temp ) temp = [ raw [ j ] ]  else :                  print ( <str> )   metalist . append ( temp ) self . metalist = metalist SOURCE = self . get_sector ( <str> ) source = [ ] indef = False for i in range ( len ( SOURCE ) ) :              line = SOURCE [ i ] if line [ 0 : 3 ] == <str> :                  indef = True  if indef :                  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : source_name = ret ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : ra = ret ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : dec = ret ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : ref_coord_frame = ret if line [ 0 : 6 ] == <str> :                      source . append ( { <str> : source_name , <str> : ra , <str> : dec , <str> : ref_coord_frame } ) indef = False    self . source = source FREQ = self . get_sector ( <str> ) indef = False nfreq = 0 for i in range ( len ( FREQ ) ) :              line = FREQ [ i ] if line [ 0 : 3 ] == <str> :                  if nfreq > 0 : print ( <str> ) nfreq += 1 indef = True  if indef :                  idx = line . find ( <str> ) if idx >= 0 and line [ 0 ] != <str> :                      chan_def = re . findall ( <str> , line ) self . freq = float ( chan_def [ 0 ] ) * 1.e6 self . bw_hz = float ( chan_def [ 1 ] ) * 1.e6  if line [ 0 : 6 ] == <str> : indef = False   SITE = self . get_sector ( <str> ) sites = [ ] site_ID_dict = { } indef = False for i in range ( len ( SITE ) ) :              line = SITE [ i ] if line [ 0 : 3 ] == <str> : indef = True if indef :                  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 :                      site_name = ret SEFD = self . get_SEFD ( site_name )  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 :                      site_ID_dict [ ret ] = site_name  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 :                      site_position = re . findall ( <str> , line )  if line [ 0 : 6 ] == <str> :                      sites . append ( [ site_name , site_position [ 0 ] , site_position [ 1 ] , site_position [ 2 ] , SEFD ] ) indef = False    tdataout = [ np . array ( ( x [ 0 ] , float ( x [ 1 ] ) , float ( x [ 2 ] ) , float ( x [ 3 ] ) , float ( x [ 4 ] ) , float ( x [ 4 ] ) , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 ) , dtype = DTARR ) for x in sites ] tdataout = np . array ( tdataout ) self . array = ehtim . array . Array ( tdataout ) SCHED = self . get_sector ( <str> ) sched = [ ] inscan = False for i in range ( len ( SCHED ) ) :              line = SCHED [ i ] if line [ 0 : 4 ] == <str> :                  inscan = True temp = { } temp [ <str> ] = { } cnt = 0  if inscan :                  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 :                      mjd , hr = vexdate_to_MJD_hr ( ret ) temp [ <str> ] = mjd temp [ <str> ] = hr  ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : temp [ <str> ] = ret ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 : temp [ <str> ] = ret ret = self . get_variable ( <str> , line ) if len ( ret ) > 0 :                      site_ID = ret site_name = site_ID_dict [ site_ID ] sdur = re . findall ( <str> , line ) s_st = float ( sdur [ 0 ] ) s_en = float ( sdur [ 1 ] ) d_size = float ( sdur [ 2 ] ) temp [ <str> ] [ cnt ] = { <str> : site_name , <str> : s_st , <str> : s_en , <str> : d_size } cnt += 1  if line [ 0 : 7 ] == <str> :                      sched . append ( temp ) inscan = False    self . sched = sched  def get_sector ( self , sname ) :          for i in range ( len ( self . metalist ) ) :              if sname in self . metalist [ i ] [ 0 ] :                  return self . metalist [ i ]   print ( <str> % sname ) return False  def get_variable ( self , vname , line ) :          idx = self . find_variable ( vname , line ) name = <str> if idx >= 0 :              start = False for i in range ( idx + len ( vname ) , len ( line ) ) :                  if start == True :                      if line [ i ] == <str> or line [ i ] == <str> : break elif line [ i ] != <str> : name += line [ i ]  if start == False and line [ i ] != <str> and line [ i ] != <str> : break if line [ i ] == <str> : start = True   return name  def find_variable ( self , vname , line ) :          idx = line . find ( vname ) if ( ( idx > 0 and line [ idx - 1 ] == <str> ) or idx == 0 ) and line [ 0 ] != <str> :              if idx + len ( vname ) == len ( line ) : return idx if line [ idx + len ( vname ) ] == <str> or line [ idx + len ( vname ) ] == <str> or line [ idx + len ( vname ) ] == <str> or line [ idx + len ( vname ) ] == <str> : return idx  return - 1  def get_SEFD ( self , station ) :          f = open ( os . path . dirname ( os . path . abspath ( __file__ ) ) + <str> ) sites = f . readlines ( ) f . close ( ) for i in range ( len ( sites ) ) :              if sites [ i ] . split ( ) [ 0 ] == station :                  return float ( re . findall ( <str> , sites [ i ] ) [ 3 ] )   print ( <str> % station ) return 10000.  def get_obs_timerange ( self , source ) :          sched = self . sched first = True for i_scan in range ( len ( sched ) ) :              if sched [ i_scan ] [ <str> ] == source and first == True :                  Tstart_hr = sched [ i_scan ] [ <str> ] mjd_s = sched [ i_scan ] [ <str> ] + Tstart_hr / 24. first = False  if sched [ i_scan ] [ <str> ] == source and first == False :                  Tstop_hr = sched [ i_scan ] [ <str> ] + sched [ i_scan ] [ <str> ] [ 0 ] [ <str> ] / 3600. mjd_e = sched [ i_scan ] [ <str> ] + Tstop_hr / 24.   return mjd_s , mjd_e   def vexdate_to_MJD_hr ( vexdate ) :      time = re . findall ( <str> , vexdate ) year = int ( time [ 0 ] ) date = int ( time [ 1 ] ) yeardatetime = ( <str> % year ) + <str> + ( <str> % date ) + <str> t = Time ( yeardatetime , format = <str> ) mjd = t . mjd hour = int ( time [ 2 ] ) + float ( time [ 3 ] ) / 60. + float ( time [ 4 ] ) / 60. / 60. return mjd , hour   