from __future__ import division from __future__ import print_function import numpy as np import ehtim as eh import time im = eh . image . load_txt ( <str> ) eht = eh . array . load_txt ( <str> ) PADFAC = 10 PRAD_FFT = 12 PRAD_NFFT = 12 tint_sec = 5 tadv_sec = 600 tstart_hr = 0 tstop_hr = 24 bw_hz = 4e9 start = time . time ( ) obs_dft = im . observe ( eht , tint_sec , tadv_sec , tstart_hr , tstop_hr , bw_hz , sgrscat = False , ampcal = True , phasecal = False , ttype = <str> , add_th_noise = False ) stop = time . time ( ) print ( <str> , stop - start ) start = time . time ( ) obs_fft = im . observe ( eht , tint_sec , tadv_sec , tstart_hr , tstop_hr , bw_hz , sgrscat = False , ampcal = True , phasecal = False , ttype = <str> , fft_pad_factor = PADFAC , add_th_noise = False ) stop = time . time ( ) print ( <str> , stop - start ) start = time . time ( ) obs_nfft = im . observe ( eht , tint_sec , tadv_sec , tstart_hr , tstop_hr , bw_hz , sgrscat = False , ampcal = True , phasecal = False , ttype = <str> , fft_pad_factor = PADFAC , add_th_noise = False ) stop = time . time ( ) print ( <str> , stop - start ) prior = eh . image . make_square ( obs_dft , im . xdim , im . xdim * im . psize ) prior = prior . add_gauss ( im . total_flux ( ) , ( 50 * eh . RADPERUAS , 50 * eh . RADPERUAS , 0 , 0 , 0 ) ) im2 = prior . copy ( ) for j in range ( len ( im2 . imvec ) ) :      im2 . imvec [ j ] *= ( 1.0 + ( np . random . rand ( ) - 0.5 ) / 10.0 ) im2 . imvec [ j ] += ( np . random . rand ( ) / 10. ) * im . imvec [ j ]  mask = im2 . imvec > 0 test_imvec = im2 . imvec if len ( mask ) > 0 and np . any ( np . invert ( mask ) ) :      print ( <str> % len ( test_imvec ) ) test_imvec = test_imvec [ mask ] print ( <str> % len ( test_imvec ) )  for dtype in [ <str> , <str> , <str> , <str> , <str> , <str> ] :      print ( <str> , dtype ) chisqdata_dft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> ) chisqdata_fft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> , fft_pad_factor = PADFAC , p_rad = PRAD_FFT ) chisqdata_nfft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> , fft_pad_factor = PADFAC , p_rad = PRAD_NFFT ) chisq_dft = eh . imager . chisq ( test_imvec , chisqdata_dft [ 2 ] , chisqdata_dft [ 0 ] , chisqdata_dft [ 1 ] , dtype , ttype = <str> , mask = mask ) chisq_fft = eh . imager . chisq ( test_imvec , chisqdata_fft [ 2 ] , chisqdata_fft [ 0 ] , chisqdata_fft [ 1 ] , dtype , ttype = <str> , mask = mask ) chisq_nfft = eh . imager . chisq ( test_imvec , chisqdata_nfft [ 2 ] , chisqdata_nfft [ 0 ] , chisqdata_nfft [ 1 ] , dtype , ttype = <str> , mask = mask ) print ( <str> ) print ( <str> % chisq_dft ) print ( <str> % chisq_fft ) print ( <str> % chisq_nfft ) print ( <str> % np . abs ( ( chisq_dft - chisq_fft ) / ( np . abs ( chisq_dft ) ) ) ) print ( <str> % np . abs ( ( chisq_dft - chisq_nfft ) / ( np . abs ( chisq_dft ) ) ) ) print ( <str> % np . abs ( ( chisq_nfft - chisq_fft ) / ( np . abs ( chisq_nfft ) ) ) )  for dtype in [ <str> , <str> , <str> , <str> , <str> , <str> ] :      print ( <str> , dtype ) print ( <str> ) chisqdata_dft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> ) chisqdata_fft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> , fft_pad_factor = PADFAC , p_rad = PRAD_FFT ) chisqdata_nfft = eh . imager . chisqdata ( obs_dft , prior , mask , dtype , ttype = <str> , fft_pad_factor = PADFAC , p_rad = PRAD_NFFT ) chisq_dft_grad = eh . imager . chisqgrad ( test_imvec , chisqdata_dft [ 2 ] , chisqdata_dft [ 0 ] , chisqdata_dft [ 1 ] , dtype , ttype = <str> , mask = mask ) chisq_fft_grad = eh . imager . chisqgrad ( test_imvec , chisqdata_fft [ 2 ] , chisqdata_fft [ 0 ] , chisqdata_fft [ 1 ] , dtype , ttype = <str> , mask = mask ) chisq_nfft_grad = eh . imager . chisqgrad ( test_imvec , chisqdata_nfft [ 2 ] , chisqdata_nfft [ 0 ] , chisqdata_nfft [ 1 ] , dtype , ttype = <str> , mask = mask ) compare_floor = np . min ( np . abs ( chisq_dft_grad ) ) * 1.e-20 + 1.e-100 print ( <str> ) print ( <str> % np . median ( np . abs ( ( chisq_dft_grad - chisq_fft_grad ) / ( np . abs ( chisq_dft_grad ) + compare_floor ) ) ) ) print ( <str> % np . median ( np . abs ( ( chisq_dft_grad - chisq_nfft_grad ) / ( np . abs ( chisq_dft_grad ) + compare_floor ) ) ) ) print ( <str> % np . median ( np . abs ( ( chisq_nfft_grad - chisq_fft_grad ) / ( np . abs ( chisq_nfft_grad ) + compare_floor ) ) ) ) print ( <str> % np . max ( np . abs ( ( chisq_dft_grad - chisq_fft_grad ) / ( np . abs ( chisq_dft_grad ) + compare_floor ) ) ) ) print ( <str> % np . max ( np . abs ( ( chisq_dft_grad - chisq_nfft_grad ) / ( np . abs ( chisq_dft_grad ) + compare_floor ) ) ) ) print ( <str> % np . max ( np . abs ( ( chisq_nfft_grad - chisq_fft_grad ) / ( np . abs ( chisq_nfft_grad ) + compare_floor ) ) ) )   