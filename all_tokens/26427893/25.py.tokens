from builtins import range import numpy as np import numpy . matlib as matlib import matplotlib as mpl import matplotlib . pyplot as plt import itertools as it import copy from ehtim . const_def import * from ehtim . observing . obs_helpers import * from ehtim . obsdata import merge_obs COLORLIST = SCOLORS def plotall_compare ( obslist , imlist , field1 , field2 , conj = False , debias = True , sgrscat = False , ang_unit = <str> , timetype = <str> , ttype = <str> , axis = False , rangex = False , rangey = False , snrcut = 0. , clist = COLORLIST , legendlabels = None , markersize = MARKERSIZE , export_pdf = <str> , grid = False , ebar = True , axislabels = True , legend = True , show = True ) :      ( obslist_plot , clist_plot , legendlabels_plot , markers ) = prep_plot_lists ( obslist , imlist , clist = clist , legendlabels = legendlabels , sgrscat = sgrscat , ttype = ttype ) for i in range ( len ( obslist_plot ) ) :          obs = obslist_plot [ i ] axis = obs . plotall ( field1 , field2 , conj = conj , debias = debias , ang_unit = ang_unit , timetype = timetype , axis = axis , rangex = rangex , rangey = rangey , grid = grid , ebar = ebar , axislabels = axislabels , show = False , tag_bl = False , legend = False , snrcut = snrcut , label = legendlabels_plot [ i ] , color = clist_plot [ i % len ( clist_plot ) ] , marker = markers [ i ] , markersize = markersize )  if legend :          plt . legend ( )  if grid :          axis . grid ( )  if show :          plt . show ( block = False )  if export_pdf != <str> :          plt . savefig ( export_pdf , bbox_inches = <str> , pad_inches = 0 )  return axis  def plot_bl_compare ( obslist , imlist , site1 , site2 , field , debias = True , sgrscat = False , ang_unit = <str> , timetype = <str> , ttype = <str> , axis = False , rangex = False , rangey = False , snrcut = 0. , clist = COLORLIST , legendlabels = None , markersize = MARKERSIZE , export_pdf = <str> , grid = False , ebar = True , axislabels = True , legend = True , show = True ) :      ( obslist_plot , clist_plot , legendlabels_plot , markers ) = prep_plot_lists ( obslist , imlist , clist = clist , legendlabels = legendlabels , sgrscat = sgrscat , ttype = ttype ) for i in range ( len ( obslist_plot ) ) :          obs = obslist_plot [ i ] axis = obs . plot_bl ( site1 , site2 , field , debias = debias , ang_unit = ang_unit , timetype = timetype , axis = axis , rangex = rangex , rangey = rangey , grid = grid , ebar = ebar , axislabels = axislabels , show = False , legend = False , snrcut = snrcut , label = legendlabels_plot [ i ] , color = clist_plot [ i % len ( clist_plot ) ] , marker = markers [ i ] , markersize = markersize )  if legend :          plt . legend ( )  if grid :          axis . grid ( )  if show :          plt . show ( block = False )  if export_pdf != <str> :          plt . savefig ( export_pdf , bbox_inches = <str> , pad_inches = 0 )  return axis  def plot_cphase_compare ( obslist , imlist , site1 , site2 , site3 , vtype = <str> , cphases = [ ] , force_recompute = False , ang_unit = <str> , timetype = <str> , ttype = <str> , axis = False , rangex = False , rangey = False , snrcut = 0. , clist = COLORLIST , legendlabels = None , markersize = MARKERSIZE , export_pdf = <str> , grid = False , ebar = True , axislabels = True , legend = True , show = True ) :      try : len ( obslist ) except TypeError : obslist = [ obslist ] if len ( cphases ) == 0 :          cphases = matlib . repmat ( [ ] , len ( obslist ) , 1 )  if len ( cphases ) != len ( obslist ) :          raise Exception ( <str> )  cphases_back = [ ] for i in range ( len ( obslist ) ) :          cphases_back . append ( obslist [ i ] . cphase ) obslist [ i ] . cphase = cphases [ i ]  ( obslist_plot , clist_plot , legendlabels_plot , markers ) = prep_plot_lists ( obslist , imlist , clist = clist , legendlabels = legendlabels , sgrscat = False , ttype = ttype ) for i in range ( len ( obslist_plot ) ) :          obs = obslist_plot [ i ] axis = obs . plot_cphase ( site1 , site2 , site3 , vtype = vtype , force_recompute = force_recompute , ang_unit = ang_unit , timetype = timetype , axis = axis , rangex = rangex , rangey = rangey , grid = grid , ebar = ebar , axislabels = axislabels , show = False , legend = False , snrcut = snrcut , label = legendlabels_plot [ i ] , color = clist_plot [ i % len ( clist_plot ) ] , marker = markers [ i ] , markersize = markersize )  for i in range ( len ( obslist ) ) :          obslist [ i ] . cphase = cphases_back [ i ]  if legend :          plt . legend ( )  if grid :          axis . grid ( )  if show :          plt . show ( block = False )  if export_pdf != <str> :          plt . savefig ( export_pdf , bbox_inches = <str> , pad_inches = 0 )  return axis  def plot_camp_compare ( obslist , imlist , site1 , site2 , site3 , site4 , vtype = <str> , ctype = <str> , camps = [ ] , force_recompute = False , debias = True , sgrscat = False , timetype = <str> , ttype = <str> , axis = False , rangex = False , rangey = False , snrcut = 0. , clist = COLORLIST , legendlabels = None , markersize = MARKERSIZE , export_pdf = <str> , grid = False , ebar = True , axislabels = True , legend = True , show = True ) :      try : len ( obslist ) except TypeError : obslist = [ obslist ] if len ( camps ) == 0 :          camps = matlib . repmat ( [ ] , len ( obslist ) , 1 )  if len ( camps ) != len ( obslist ) :          raise Exception ( <str> )  camps_back = [ ] for i in range ( len ( obslist ) ) :          if ctype == <str> :              camps_back . append ( obslist [ i ] . camp ) obslist [ i ] . camp = camps [ i ]  elif ctype == <str> :              camps_back . append ( obslist [ i ] . logcamp ) obslist [ i ] . logcamp = camps [ i ]   ( obslist_plot , clist_plot , legendlabels_plot , markers ) = prep_plot_lists ( obslist , imlist , clist = clist , legendlabels = legendlabels , sgrscat = sgrscat , ttype = ttype ) for i in range ( len ( obslist_plot ) ) :          obs = obslist_plot [ i ] axis = obs . plot_camp ( site1 , site2 , site3 , site4 , vtype = vtype , ctype = ctype , force_recompute = force_recompute , debias = debias , timetype = timetype , axis = axis , rangex = rangex , rangey = rangey , grid = grid , ebar = ebar , axislabels = axislabels , show = False , legend = False , snrcut = 0. , label = legendlabels_plot [ i ] , color = clist_plot [ i % len ( clist_plot ) ] , marker = markers [ i ] , markersize = markersize )  for i in range ( len ( obslist ) ) :          if ctype == <str> :              obslist [ i ] . camp = camps_back [ i ]  elif ctype == <str> :              obslist [ i ] . logcamp = camps_back [ i ]   if legend :          plt . legend ( )  if grid :          axis . grid ( )  if show :          plt . show ( block = False )  if export_pdf != <str> :          plt . savefig ( export_pdf , bbox_inches = <str> , pad_inches = 0 )  return axis  def plotall_obs_compare ( obslist , field1 , field2 , ** kwargs ) :      axis = plotall_compare ( obslist , [ ] , field1 , field2 , ** kwargs ) return axis  def plotall_obs_im_compare ( obslist , imlist , field1 , field2 , ** kwargs ) :      axis = plotall_compare ( obslist , imlist , field1 , field2 , ** kwargs ) return axis  def plot_bl_obs_compare ( obslist , site1 , site2 , field , ** kwargs ) :      axis = plot_bl_compare ( obslist , [ ] , site1 , site2 , field , ** kwargs ) return axis  def plot_bl_obs_im_compare ( obslist , imlist , site1 , site2 , field , ** kwargs ) :      axis = plot_bl_compare ( obslist , imlist , site1 , site2 , field , ** kwargs ) return axis  def plot_cphase_obs_compare ( obslist , site1 , site2 , site3 , ** kwargs ) :      axis = plot_cphase_compare ( obslist , [ ] , site1 , site2 , site3 , ** kwargs ) return axis  def plot_cphase_obs_im_compare ( obslist , imlist , site1 , site2 , site3 , ** kwargs ) :      axis = plot_cphase_compare ( obslist , imlist , site1 , site2 , site3 , ** kwargs ) return axis  def plot_camp_obs_compare ( obslist , site1 , site2 , site3 , site4 , ** kwargs ) :      axis = plot_camp_compare ( obslist , [ ] , site1 , site2 , site3 , site4 , ** kwargs ) return axis  def plot_camp_obs_im_compare ( obslist , imlist , site1 , site2 , site3 , site4 , ** kwargs ) :      axis = plot_camp_compare ( obslist , imlist , site1 , site2 , site3 , site4 , ** kwargs ) return axis  def plotall_obs_im_cphases ( obs , imlist , vtype = <str> , ang_unit = <str> , timetype = <str> , ttype = <str> , sgrscat = False , rangex = False , rangey = [ - 180 , 180 ] , legend = False , legendlabels = None , show = True , ebar = True , axislabels = False , print_chisqs = True , display_mode = <str> ) :      try : len ( imlist ) except TypeError : imlist = [ imlist ] sites = [ ] for i in range ( 0 , len ( obs . tarr ) ) :          sites . append ( obs . tarr [ i ] [ 0 ] )  uniqueclosure_tri = list ( it . combinations ( sites , 3 ) ) cphases_obs = obs . c_phases ( mode = <str> , count = <str> , vtype = vtype ) obs_all = [ obs ] cphases_all = [ cphases_obs ] for image in imlist :          obs_model = image . observe_same ( obs , sgrscat = sgrscat , add_th_noise = False , ttype = ttype ) cphases_model = obs_model . c_phases ( mode = <str> , count = <str> , vtype = vtype ) obs_all . append ( obs_model ) cphases_all . append ( cphases_model )  if display_mode == <str> :          show = True  else :          nplots = len ( uniqueclosure_tri ) ncols = 4 nrows = nplots / ncols show = False fig = plt . figure ( figsize = ( nrows * 20 , 40 ) )  print ( <str> ) nplot = 0 for c in range ( 0 , len ( uniqueclosure_tri ) ) :          cphases_obs_tri = obs . cphase_tri ( uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , vtype = vtype , ang_unit = <str> , cphases = cphases_obs ) if len ( cphases_obs_tri ) > 0 :              if print_chisqs :                  printstr = <str> % ( uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] ) for i in range ( 1 , len ( obs_all ) ) :                      cphases_model_tri = obs_all [ i ] . cphase_tri ( uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , vtype = vtype , ang_unit = <str> , cphases = cphases_all [ i ] ) chisq_tri = np . sum ( ( 1.0 - np . cos ( cphases_obs_tri [ <str> ] * DEGREE - cphases_model_tri [ <str> ] * DEGREE ) ) / ( ( cphases_obs_tri [ <str> ] * DEGREE ) ** 2 ) ) chisq_tri *= ( 2.0 / len ( cphases_obs_tri ) ) printstr += <str> % ( i , chisq_tri )  print ( printstr )  if display_mode == <str> :                  ax = False  else :                  ax = plt . subplot2grid ( ( nrows , ncols ) , ( nplot / ncols , nplot % ncols ) , fig = fig ) axislabels = False  f = plot_cphase_obs_compare ( obs_all , uniqueclosure_tri [ c ] [ 0 ] , uniqueclosure_tri [ c ] [ 1 ] , uniqueclosure_tri [ c ] [ 2 ] , vtype = vtype , rangex = rangex , rangey = rangey , ebar = ebar , show = show , legend = legend , legendlabels = legendlabels , cphases = cphases_all , axis = ax , axislabels = axislabels ) nplot += 1   if display_mode != <str> :          plt . ion ( ) f = fig f . subplots_adjust ( wspace = 0.1 , hspace = 0.5 ) f . show ( )  return f  def prep_plot_lists ( obslist , imlist , clist = SCOLORS , legendlabels = None , sgrscat = False , ttype = <str> ) :      if imlist is None or imlist == False :          imlist = [ ]  try : len ( obslist ) except TypeError : obslist = [ obslist ] try : len ( imlist ) except TypeError : imlist = [ imlist ] if not ( ( len ( imlist ) == len ( obslist ) ) or len ( imlist ) <= 1 or len ( obslist ) <= 1 ) :          raise Exception ( <str> )  if not ( legendlabels is None ) and ( len ( legendlabels ) != max ( len ( imlist ) , len ( obslist ) ) ) :          raise Exception ( <str> )  if legendlabels is None :          legendlabels = [ str ( i + 1 ) for i in range ( max ( len ( imlist ) , len ( obslist ) ) ) ]  obslist_plot = [ ] clist_plot = copy . copy ( clist ) legendlabels_plot = copy . copy ( legendlabels ) if len ( imlist ) == 0 :          markers = [ ] for i in range ( len ( obslist ) ) :              obslist_plot . append ( obslist [ i ] ) markers . append ( <str> )   elif len ( imlist ) == 1 and len ( obslist ) > 1 :          obslist_true = [ ] markers = [ <str> ] clist_plot = [ <str> ] for i in range ( len ( obslist ) ) :              obslist_plot . append ( obslist [ i ] ) obstrue = imlist [ 0 ] . observe_same ( obslist [ i ] , sgrscat = sgrscat , add_th_noise = False , ttype = ttype ) for sigma_type in obstrue . data . dtype . names [ - 4 : ] :                  obstrue . data [ sigma_type ] *= 0  obslist_true . append ( obstrue ) markers . append ( <str> ) clist_plot . append ( clist [ i ] )  obstrue = merge_obs ( obslist_true ) obslist_plot . insert ( 0 , obstrue ) legendlabels_plot . insert ( 0 , <str> )  elif len ( obslist ) == 1 and len ( imlist ) > 1 :          obslist_plot . append ( obslist [ 0 ] ) markers = [ <str> ] for i in range ( len ( imlist ) ) :              obstrue = imlist [ i ] . observe_same ( obslist [ 0 ] , sgrscat = sgrscat , add_th_noise = False , ttype = ttype ) for sigma_type in obstrue . data . dtype . names [ - 4 : ] :                  obstrue . data [ sigma_type ] *= 0  obslist_plot . append ( obstrue ) markers . append ( <str> )  clist_plot . insert ( 0 , <str> ) legendlabels_plot . insert ( 0 , <str> )  elif len ( obslist ) == 1 and len ( imlist ) == 1 :          obslist_plot . append ( obslist [ 0 ] ) obstrue = imlist [ 0 ] . observe_same ( obslist [ 0 ] , sgrscat = sgrscat , add_th_noise = False , ttype = ttype ) for sigma_type in obstrue . data . dtype . names [ - 4 : ] :              obstrue . data [ sigma_type ] *= 0  obslist_plot . append ( obstrue ) markers = [ <str> , <str> ] clist_plot = [ <str> , clist [ 0 ] ] legendlabels_plot = [ legendlabels [ 0 ] + <str> , legendlabels [ 0 ] + <str> ]  else :          markers = [ ] legendlabels_plot = [ ] clist_plot = [ ] for i in range ( len ( obslist ) ) :              obstrue = imlist [ i ] . observe_same ( obslist [ i ] , sgrscat = sgrscat , add_th_noise = False , ttype = ttype ) for sigma_type in obstrue . data . dtype . names [ - 4 : ] :                  obstrue . data [ sigma_type ] *= 0  obslist_plot . append ( obstrue ) clist_plot . append ( clist [ i ] ) legendlabels_plot . append ( legendlabels [ i ] + <str> ) markers . append ( <str> ) obslist_plot . append ( obslist [ i ] ) clist_plot . append ( clist [ i ] ) legendlabels_plot . append ( legendlabels [ i ] + <str> ) markers . append ( <str> )   if len ( obslist_plot ) > len ( clist ) :          Exception ( <str> )  return ( obslist_plot , clist_plot , legendlabels_plot , markers )   