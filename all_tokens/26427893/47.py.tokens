from __future__ import division from __future__ import print_function from builtins import str from builtins import object import numpy as np from numpy import double , bool , ma try :      import pyfits  except :      from astropy . io import fits as pyfits  import datetime import copy __author__ = <str> __email__ = <str> __date__ = <str> __version__ = <str> _mjdzero = datetime . datetime ( 1858 , 11 , 17 ) matchtargetbyname = False matchstationbyname = False refdate = datetime . datetime ( 2000 , 1 , 1 ) def _plurals ( count ) :      if count != 1 : return <str> return <str>  def _array_eq ( a , b ) :      <str> try :          return not ( a != b ) . any ( )  except :          return not ( a != b )   class _angpoint ( float ) :      <str> def __init__ ( self , angle ) :          self . angle = angle  def __repr__ ( self ) :          return <str> % self . angle . __repr__ ( )  def __str__ ( self ) :          return <str> % ( self . angle )  def __eq__ ( self , other ) :          return self . angle == other . angle  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def asdms ( self ) :          angle = self . angle if angle < 0 :              negative = True angle *= - 1.0  else :              negative = False  degrees = np . floor ( angle ) minutes = np . floor ( ( angle - degrees ) * 60.0 ) seconds = ( angle - degrees - minutes / 60.0 ) * 3600.0 try :              if negative :                  return <str> % ( degrees , minutes , seconds )  else :                  return <str> % ( degrees , minutes , seconds )   except TypeError :              return self . __repr__ ( )   def ashms ( self ) :          angle = self . angle * 24.0 / 360.0 hours = np . floor ( angle ) minutes = np . floor ( ( angle - hours ) * 60.0 ) seconds = ( angle - hours - minutes / 60.0 ) * 3600.0 try :              return <str> % ( hours , minutes , seconds )  except TypeError :              return self . __repr__ ( )    class OI_TARGET ( object ) :      def __init__ ( self , target , raep0 , decep0 , equinox = 2000.0 , ra_err = 0.0 , dec_err = 0.0 , sysvel = 0.0 , veltyp = <str> , veldef = <str> , pmra = 0.0 , pmdec = 0.0 , pmra_err = 0.0 , pmdec_err = 0.0 , parallax = 0.0 , para_err = 0.0 , spectyp = <str> ) :          self . target = target self . raep0 = _angpoint ( raep0 ) self . decep0 = _angpoint ( decep0 ) self . equinox = equinox self . ra_err = ra_err self . dec_err = dec_err self . sysvel = sysvel self . veltyp = veltyp self . veldef = veldef self . pmra = pmra self . pmdec = pmdec self . pmra_err = pmra_err self . pmdec_err = pmdec_err self . parallax = parallax self . para_err = para_err self . spectyp = spectyp  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . target != other . target ) or ( self . raep0 != other . raep0 ) or ( self . decep0 != other . decep0 ) or ( self . equinox != other . equinox ) or ( self . ra_err != other . ra_err ) or ( self . dec_err != other . dec_err ) or ( self . sysvel != other . sysvel ) or ( self . veltyp != other . veltyp ) or ( self . veldef != other . veldef ) or ( self . pmra != other . pmra ) or ( self . pmdec != other . pmdec ) or ( self . pmra_err != other . pmra_err ) or ( self . pmdec_err != other . pmdec_err ) or ( self . parallax != other . parallax ) or ( self . para_err != other . para_err ) or ( self . spectyp != other . spectyp ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __str__ ( self ) :          return <str> % ( self . target , self . raep0 . ashms ( ) , self . decep0 . asdms ( ) , self . equinox )  def info ( self ) :          print ( str ( self ) )   class OI_WAVELENGTH ( object ) :      def __init__ ( self , eff_wave , eff_band = None ) :          self . eff_wave = np . array ( eff_wave , dtype = double ) . reshape ( - 1 ) if eff_band == None :              eff_band = np . zeros_like ( eff_wave )  self . eff_band = np . array ( eff_band , dtype = double ) . reshape ( - 1 )  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( not _array_eq ( self . eff_wave , other . eff_wave ) ) or ( not _array_eq ( self . eff_band , other . eff_band ) ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __repr__ ( self ) :          return <str> % ( len ( self . eff_wave ) , _plurals ( len ( self . eff_wave ) ) , 1e6 * np . min ( self . eff_wave ) , 1e6 * np . max ( self . eff_wave ) )  def info ( self ) :          print ( str ( self ) )   class OI_VIS ( object ) :      def __init__ ( self , timeobs , int_time , visamp , visamperr , visphi , visphierr , flag , ucoord , vcoord , wavelength , target , array = None , station = ( None , None ) , cflux = None , cfluxerr = None ) :          self . timeobs = timeobs self . array = array self . wavelength = wavelength self . target = target self . int_time = int_time self . _visamp = np . array ( visamp , dtype = double ) . reshape ( - 1 ) self . _visamperr = np . array ( visamperr , dtype = double ) . reshape ( - 1 ) self . _visphi = np . array ( visphi , dtype = double ) . reshape ( - 1 ) self . _visphierr = np . array ( visphierr , dtype = double ) . reshape ( - 1 ) if cflux != None : self . _cflux = np . array ( cflux , dtype = double ) . reshape ( - 1 ) else : self . _cflux = None if cfluxerr != None : self . _cfluxerr = np . array ( cfluxerr , dtype = double ) . reshape ( - 1 ) else : self . _cfluxerr = None self . flag = np . array ( flag , dtype = bool ) . reshape ( - 1 ) self . ucoord = ucoord self . vcoord = vcoord self . station = station  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . timeobs != other . timeobs ) or ( self . array != other . array ) or ( self . wavelength != other . wavelength ) or ( self . target != other . target ) or ( self . int_time != other . int_time ) or ( self . ucoord != other . ucoord ) or ( self . vcoord != other . vcoord ) or ( self . array != other . array ) or ( self . station != other . station ) or ( not _array_eq ( self . visamp , other . visamp ) ) or ( not _array_eq ( self . visamperr , other . visamperr ) ) or ( not _array_eq ( self . visphi , other . visphi ) ) or ( not _array_eq ( self . visphierr , other . visphierr ) ) or ( not _array_eq ( self . flag , other . flag ) ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __getattr__ ( self , attrname ) :          if attrname in ( <str> , <str> , <str> , <str> ) :              return ma . masked_array ( self . __dict__ [ <str> + attrname ] , mask = self . flag )  elif attrname in ( <str> , <str> ) :              if ( self . __dict__ [ <str> + attrname ] != None ) :                  return ma . masked_array ( self . __dict__ [ <str> + attrname ] , mask = self . flag )  else :                  return None   else :              raise AttributeError ( attrname )   def __setattr__ ( self , attrname , value ) :          if attrname in ( <str> , <str> , <str> , <str> , <str> , <str> ) :              self . __dict__ [ <str> + attrname ] = value  else :              self . __dict__ [ attrname ] = value   def __repr__ ( self ) :          meanvis = ma . mean ( self . visamp ) if self . station [ 0 ] and self . station [ 1 ] :              baselinename = <str> + self . station [ 0 ] . sta_name + self . station [ 1 ] . sta_name + <str>  else :              baselinename = <str>  return <str> % ( self . target . target , self . timeobs . strftime ( <str> ) , baselinename , len ( self . visamp ) , _plurals ( len ( self . visamp ) ) , np . sum ( self . flag ) , np . sqrt ( self . ucoord ** 2 + self . vcoord ** 2 ) , np . arctan ( self . ucoord / self . vcoord ) * 180.0 / np . pi % 180.0 , meanvis )  def info ( self ) :          print ( str ( self ) )   class OI_VIS2 ( object ) :      def __init__ ( self , timeobs , int_time , vis2data , vis2err , flag , ucoord , vcoord , wavelength , target , array = None , station = ( None , None ) ) :          self . timeobs = timeobs self . array = array self . wavelength = wavelength self . target = target self . int_time = int_time self . _vis2data = np . array ( vis2data , dtype = double ) . reshape ( - 1 ) self . _vis2err = np . array ( vis2err , dtype = double ) . reshape ( - 1 ) self . flag = np . array ( flag , dtype = bool ) . reshape ( - 1 ) self . ucoord = ucoord self . vcoord = vcoord self . station = station  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . timeobs != other . timeobs ) or ( self . array != other . array ) or ( self . wavelength != other . wavelength ) or ( self . target != other . target ) or ( self . int_time != other . int_time ) or ( self . ucoord != other . ucoord ) or ( self . vcoord != other . vcoord ) or ( self . array != other . array ) or ( self . station != other . station ) or ( not _array_eq ( self . vis2data , other . vis2data ) ) or ( not _array_eq ( self . vis2err , other . vis2err ) ) or ( not _array_eq ( self . flag , other . flag ) ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __getattr__ ( self , attrname ) :          if attrname in ( <str> , <str> ) :              return ma . masked_array ( self . __dict__ [ <str> + attrname ] , mask = self . flag )  else :              raise AttributeError ( attrname )   def __setattr__ ( self , attrname , value ) :          if attrname in ( <str> , <str> ) :              self . __dict__ [ <str> + attrname ] = value  else :              self . __dict__ [ attrname ] = value   def __repr__ ( self ) :          meanvis = ma . mean ( self . vis2data ) if self . station [ 0 ] and self . station [ 1 ] :              baselinename = <str> + self . station [ 0 ] . sta_name + self . station [ 1 ] . sta_name + <str>  else :              baselinename = <str>  return <str> % ( self . target . target , self . timeobs . strftime ( <str> ) , baselinename , len ( self . vis2data ) , _plurals ( len ( self . vis2data ) ) , np . sum ( self . flag ) , np . sqrt ( self . ucoord ** 2 + self . vcoord ** 2 ) , np . arctan ( self . ucoord / self . vcoord ) * 180.0 / np . pi % 180.0 , meanvis )  def info ( self ) :          print ( str ( self ) )   class OI_T3 ( object ) :      def __init__ ( self , timeobs , int_time , t3amp , t3amperr , t3phi , t3phierr , flag , u1coord , v1coord , u2coord , v2coord , wavelength , target , array = None , station = ( None , None , None ) ) :          self . timeobs = timeobs self . array = array self . wavelength = wavelength self . target = target self . int_time = int_time self . _t3amp = np . array ( t3amp , dtype = double ) . reshape ( - 1 ) self . _t3amperr = np . array ( t3amperr , dtype = double ) . reshape ( - 1 ) self . _t3phi = np . array ( t3phi , dtype = double ) . reshape ( - 1 ) self . _t3phierr = np . array ( t3phierr , dtype = double ) . reshape ( - 1 ) self . flag = np . array ( flag , dtype = bool ) . reshape ( - 1 ) self . u1coord = u1coord self . v1coord = v1coord self . u2coord = u2coord self . v2coord = v2coord self . station = station  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . timeobs != other . timeobs ) or ( self . array != other . array ) or ( self . wavelength != other . wavelength ) or ( self . target != other . target ) or ( self . int_time != other . int_time ) or ( self . u1coord != other . u1coord ) or ( self . v1coord != other . v1coord ) or ( self . u2coord != other . u2coord ) or ( self . v2coord != other . v2coord ) or ( self . array != other . array ) or ( self . station != other . station ) or ( not _array_eq ( self . t3amp , other . t3amp ) ) or ( not _array_eq ( self . t3amperr , other . t3amperr ) ) or ( not _array_eq ( self . t3phi , other . t3phi ) ) or ( not _array_eq ( self . t3phierr , other . t3phierr ) ) or ( not _array_eq ( self . flag , other . flag ) ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __getattr__ ( self , attrname ) :          if attrname in ( <str> , <str> , <str> , <str> ) :              return ma . masked_array ( self . __dict__ [ <str> + attrname ] , mask = self . flag )  else :              raise AttributeError ( attrname )   def __setattr__ ( self , attrname , value ) :          if attrname in ( <str> , <str> ) :              self . __dict__ [ <str> + attrname ] = value  else :              self . __dict__ [ attrname ] = value   def __repr__ ( self ) :          meant3 = np . mean ( self . t3amp [ np . where ( self . flag == False ) ] ) if self . station [ 0 ] and self . station [ 1 ] and self . station [ 2 ] :              baselinename = <str> + self . station [ 0 ] . sta_name + self . station [ 1 ] . sta_name + self . station [ 2 ] . sta_name + <str>  else :              baselinename = <str>  return <str> % ( self . target . target , self . timeobs . strftime ( <str> ) , baselinename , len ( self . t3amp ) , _plurals ( len ( self . t3amp ) ) , np . sum ( self . flag ) , np . sqrt ( self . u1coord ** 2 + self . v1coord ** 2 ) , np . sqrt ( self . u2coord ** 2 + self . v2coord ** 2 ) , meant3 )  def info ( self ) :          print ( str ( self ) )   class OI_STATION ( object ) :      def __init__ ( self , tel_name = None , sta_name = None , diameter = None , staxyz = [ None , None , None ] ) :          self . tel_name = tel_name self . sta_name = sta_name self . diameter = diameter self . staxyz = staxyz  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . tel_name != other . tel_name ) or ( self . sta_name != other . sta_name ) or ( self . diameter != other . diameter ) or ( not _array_eq ( self . staxyz , other . staxyz ) ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __repr__ ( self ) :          return <str> % ( self . sta_name , self . tel_name , self . diameter )   class OI_ARRAY ( object ) :      def __init__ ( self , frame , arrxyz , stations = ( ) ) :          self . frame = frame self . arrxyz = arrxyz self . station = np . empty ( 0 ) for station in stations :              tel_name , sta_name , sta_index , diameter , staxyz = station self . station = np . append ( self . station , OI_STATION ( tel_name = tel_name , sta_name = sta_name , diameter = diameter , staxyz = staxyz ) )   def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False equal = not ( ( self . frame != other . frame ) or ( not _array_eq ( self . arrxyz , other . arrxyz ) ) ) if not equal : return False if ( self . station != other . station ) . any ( ) :              return False  return True  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def __getattr__ ( self , attrname ) :          if attrname == <str> :              radius = np . sqrt ( ( self . arrxyz ** 2 ) . sum ( ) ) return _angpoint ( np . arcsin ( self . arrxyz [ 2 ] / radius ) * 180.0 / np . pi )  elif attrname == <str> :              radius = np . sqrt ( ( self . arrxyz ** 2 ) . sum ( ) ) xylen = np . sqrt ( self . arrxyz [ 0 ] ** 2 + self . arrxyz [ 1 ] ** 2 ) return _angpoint ( np . arcsin ( self . arrxyz [ 1 ] / xylen ) * 180.0 / np . pi )  elif attrname == <str> :              radius = np . sqrt ( ( self . arrxyz ** 2 ) . sum ( ) ) return radius - 6378100.0  else :              raise AttributeError ( attrname )   def __repr__ ( self ) :          return <str> % ( self . latitude . asdms ( ) , self . longitude . asdms ( ) , self . altitude , len ( self . station ) , _plurals ( len ( self . station ) ) )  def info ( self , verbose = 0 ) :          print ( str ( self ) ) if verbose >= 1 :              for station in self . station :                  print ( <str> % str ( station ) )    def get_station_by_name ( self , name ) :          for station in self . station :              if station . sta_name == name :                  return station   raise LookupError ( <str> % name )   class oifits ( object ) :      def __init__ ( self ) :          self . wavelength = { } self . target = np . empty ( 0 ) self . array = { } self . vis = np . empty ( 0 ) self . vis2 = np . empty ( 0 ) self . t3 = np . empty ( 0 )  def __add__ ( self , other ) :          if self . isconsistent ( ) == False or other . isconsistent ( ) == False :              print ( <str> ) return  new = copy . deepcopy ( self ) if len ( other . wavelength ) :              wavelengthmap = { } for key in list ( other . wavelength . keys ( ) ) :                  if key not in list ( new . wavelength . keys ( ) ) :                      new . wavelength [ key ] = copy . deepcopy ( other . wavelength [ key ] )  elif new . wavelength [ key ] != other . wavelength [ key ] :                      raise ValueError ( <str> )  wavelengthmap [ id ( other . wavelength [ key ] ) ] = new . wavelength [ key ]   if len ( other . target ) :              targetmap = { } for otarget in other . target :                  for ntarget in new . target :                      if matchtargetbyname and ntarget . target == otarget . target :                          targetmap [ id ( otarget ) ] = ntarget break  elif ntarget == otarget :                          targetmap [ id ( otarget ) ] = ntarget break  elif ntarget . target == otarget . target :                          print ( <str> )   if id ( otarget ) not in list ( targetmap . keys ( ) ) :                      try :                          newkey = list ( new . target . keys ( ) ) [ - 1 ] + 1  except :                          newkey = 1  target = copy . deepcopy ( otarget ) new . target = np . append ( new . target , target ) targetmap [ id ( otarget ) ] = target    if len ( other . array ) :              stationmap = { } arraymap = { } for key , otharray in other . array . items ( ) :                  arraymap [ id ( otharray ) ] = key if key not in list ( new . array . keys ( ) ) :                      new . array [ key ] = copy . deepcopy ( other . array [ key ] )  for othsta in other . array [ key ] . station :                      for newsta in new . array [ key ] . station :                          if newsta == othsta :                              stationmap [ id ( othsta ) ] = newsta break  elif matchstationbyname and newsta . sta_name == othsta . sta_name :                              stationmap [ id ( othsta ) ] = newsta break  elif newsta . sta_name == othsta . sta_name and matchstationbyname == False :                              raise ValueError ( <str> )   if id ( othsta ) not in list ( stationmap . keys ( ) ) :                          newsta = copy . deepcopy ( othsta ) new . array [ key ] . station = np . append ( new . array [ key ] . station , newsta ) stationmap [ id ( othsta ) ] = newsta newsta . staxyz = othsta . staxyz - other . array [ key ] . arrxyz + new . array [ key ] . arrxyz     for vis in other . vis :              if vis not in new . vis :                  newvis = copy . copy ( vis ) newvis . wavelength = wavelengthmap [ id ( vis . wavelength ) ] newvis . target = targetmap [ id ( vis . target ) ] if ( vis . array ) :                      newvis . array = new . array [ arraymap [ id ( vis . array ) ] ] newvis . station = [ None , None ] newvis . station [ 0 ] = stationmap [ id ( vis . station [ 0 ] ) ] newvis . station [ 1 ] = stationmap [ id ( vis . station [ 1 ] ) ]  new . vis = np . append ( new . vis , newvis )   for vis2 in other . vis2 :              if vis2 not in new . vis2 :                  newvis2 = copy . copy ( vis2 ) newvis2 . wavelength = wavelengthmap [ id ( vis2 . wavelength ) ] newvis2 . target = targetmap [ id ( vis2 . target ) ] if ( vis2 . array ) :                      newvis2 . array = new . array [ arraymap [ id ( vis2 . array ) ] ] newvis2 . station = [ None , None ] newvis2 . station [ 0 ] = stationmap [ id ( vis2 . station [ 0 ] ) ] newvis2 . station [ 1 ] = stationmap [ id ( vis2 . station [ 1 ] ) ]  new . vis2 = np . append ( new . vis2 , newvis2 )   for t3 in other . t3 :              if t3 not in new . t3 :                  newt3 = copy . copy ( t3 ) newt3 . wavelength = wavelengthmap [ id ( t3 . wavelength ) ] newt3 . target = targetmap [ id ( t3 . target ) ] if ( t3 . array ) :                      newt3 . array = new . array [ arraymap [ id ( t3 . array ) ] ] newt3 . station = [ None , None , None ] newt3 . station [ 0 ] = stationmap [ id ( t3 . station [ 0 ] ) ] newt3 . station [ 1 ] = stationmap [ id ( t3 . station [ 1 ] ) ] newt3 . station [ 2 ] = stationmap [ id ( t3 . station [ 2 ] ) ]  new . t3 = np . append ( new . t3 , newt3 )   return ( new )  def __eq__ ( self , other ) :          if type ( self ) != type ( other ) : return False return not ( ( self . wavelength != other . wavelength ) or ( self . target != other . target ) . any ( ) or ( self . array != other . array ) or ( self . vis != other . vis ) . any ( ) or ( self . vis2 != other . vis2 ) . any ( ) or ( self . t3 != other . t3 ) . any ( ) )  def __ne__ ( self , other ) :          return not self . __eq__ ( other )  def isvalid ( self ) :          warnings = [ ] errors = [ ] if not self . isconsistent ( ) :              errors . append ( <str> )  if not self . target . size :              errors . append ( <str> )  if not self . wavelength :              errors . append ( <str> )  else :              for wavelength in list ( self . wavelength . values ( ) ) :                  if len ( wavelength . eff_wave ) != len ( wavelength . eff_band ) :                      errors . append ( <str> % key )    if ( self . vis . size + self . vis2 . size + self . t3 . size == 0 ) :              errors . append ( <str> )  for vis in self . vis :              nwave = len ( vis . wavelength . eff_band ) if ( len ( vis . visamp ) != nwave ) or ( len ( vis . visamperr ) != nwave ) or ( len ( vis . visphi ) != nwave ) or ( len ( vis . visphierr ) != nwave ) or ( len ( vis . flag ) != nwave ) :                  errors . append ( <str> % ( id ( vis ) , nwave ) )   for vis2 in self . vis2 :              nwave = len ( vis2 . wavelength . eff_band ) if ( len ( vis2 . vis2data ) != nwave ) or ( len ( vis2 . vis2err ) != nwave ) or ( len ( vis2 . flag ) != nwave ) :                  errors . append ( <str> % ( id ( vis ) , nwave ) )   for t3 in self . t3 :              nwave = len ( t3 . wavelength . eff_band ) if ( len ( t3 . t3amp ) != nwave ) or ( len ( t3 . t3amperr ) != nwave ) or ( len ( t3 . t3phi ) != nwave ) or ( len ( t3 . t3phierr ) != nwave ) or ( len ( t3 . flag ) != nwave ) :                  errors . append ( <str> % ( id ( vis ) , nwave ) )   if warnings :              print ( <str> % ( len ( warnings ) , _plurals ( len ( warnings ) ) ) ) for warning in warnings :                  print ( <str> + warning )   if errors :              print ( <str> % ( len ( errors ) , _plurals ( len ( errors ) ) . upper ( ) ) ) for error in errors :                  print ( <str> + error )   return not ( len ( warnings ) or len ( errors ) )  def isconsistent ( self ) :          for vis in self . vis :              if vis . array and ( vis . array not in list ( self . array . values ( ) ) ) :                  print ( <str> % id ( vis ) ) return False  if ( ( vis . station [ 0 ] and ( vis . station [ 0 ] not in vis . array . station ) ) or ( vis . station [ 1 ] and ( vis . station [ 1 ] not in vis . array . station ) ) ) :                  print ( <str> % id ( vis ) ) return False  if vis . wavelength not in list ( self . wavelength . values ( ) ) :                  print ( <str> % id ( vis ) ) return False  if vis . target not in self . target :                  print ( <str> % id ( vis ) ) return False   for vis2 in self . vis2 :              if vis2 . array and ( vis2 . array not in list ( self . array . values ( ) ) ) :                  print ( <str> % id ( vis2 ) ) return False  if ( ( vis2 . station [ 0 ] and ( vis2 . station [ 0 ] not in vis2 . array . station ) ) or ( vis2 . station [ 1 ] and ( vis2 . station [ 1 ] not in vis2 . array . station ) ) ) :                  print ( <str> % id ( vis ) ) return False  if vis2 . wavelength not in list ( self . wavelength . values ( ) ) :                  print ( <str> % id ( vis2 ) ) return False  if vis2 . target not in self . target :                  print ( <str> % id ( vis2 ) ) return False   for t3 in self . t3 :              if t3 . array and ( t3 . array not in list ( self . array . values ( ) ) ) :                  print ( <str> % id ( t3 ) ) return False  if ( ( t3 . station [ 0 ] and ( t3 . station [ 0 ] not in t3 . array . station ) ) or ( t3 . station [ 1 ] and ( t3 . station [ 1 ] not in t3 . array . station ) ) or ( t3 . station [ 2 ] and ( t3 . station [ 2 ] not in t3 . array . station ) ) ) :                  print ( <str> % id ( t3 ) ) return False  if t3 . wavelength not in list ( self . wavelength . values ( ) ) :                  print ( <str> % id ( t3 ) ) return False  if t3 . target not in self . target :                  print ( <str> % id ( t3 ) ) return False   return True  def info ( self , recursive = True , verbose = 0 ) :          if self . wavelength :              wavelengths = 0 if recursive :                  print ( <str> ) print ( <str> ) print ( <str> )  for key in list ( self . wavelength . keys ( ) ) :                  wavelengths += len ( self . wavelength [ key ] . eff_wave ) if recursive : print ( <str> % ( key , str ( self . wavelength [ key ] ) ) )  print ( <str> % ( len ( self . wavelength ) , _plurals ( len ( self . wavelength ) ) , wavelengths , _plurals ( wavelengths ) ) )  if self . target . size :              if recursive :                  print ( <str> ) print ( <str> ) print ( <str> ) for target in self . target :                      target . info ( )   print ( <str> % ( len ( self . target ) , _plurals ( len ( self . target ) ) ) )  if self . array :              stations = 0 if recursive :                  print ( <str> ) print ( <str> ) print ( <str> )  for key in list ( self . array . keys ( ) ) :                  if recursive :                      print ( key + <str> ) self . array [ key ] . info ( verbose = verbose )  stations += len ( self . array [ key ] . station )  print ( <str> % ( len ( self . array ) , _plurals ( len ( self . array ) ) , stations , _plurals ( stations ) ) )  if self . vis . size :              if recursive :                  print ( <str> ) print ( <str> ) print ( <str> ) for vis in self . vis :                      vis . info ( )   print ( <str> % ( len ( self . vis ) , _plurals ( len ( self . vis ) ) ) )  if self . vis2 . size :              if recursive :                  print ( <str> ) print ( <str> ) print ( <str> ) for vis2 in self . vis2 :                      vis2 . info ( )   print ( <str> % ( len ( self . vis2 ) , _plurals ( len ( self . vis2 ) ) ) )  if self . t3 . size :              if recursive :                  print ( <str> ) print ( <str> ) print ( <str> ) for t3 in self . t3 :                      t3 . info ( )   print ( <str> % ( len ( self . t3 ) , _plurals ( len ( self . t3 ) ) ) )   def save ( self , filename ) :          if not self . isconsistent ( ) :              print ( <str> ) return  hdulist = pyfits . HDUList ( ) hdu = pyfits . PrimaryHDU ( ) hdu . header . update ( <str> , datetime . datetime . now ( ) . strftime ( format = <str> ) , comment = <str> ) hdu . header . add_comment ( <str> % __version__ ) hdu . header . add_comment ( <str> ) wavelengthmap = { } hdulist . append ( hdu ) for insname , wavelength in self . wavelength . items ( ) :              wavelengthmap [ id ( wavelength ) ] = insname hdu = pyfits . new_table ( pyfits . ColDefs ( ( pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = wavelength . eff_wave ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = wavelength . eff_band ) ) ) ) hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdu . header . update ( <str> , insname , <str> ) hdulist . append ( hdu )  targetmap = { } if self . target . size :              target_id = [ ] target = [ ] raep0 = [ ] decep0 = [ ] equinox = [ ] ra_err = [ ] dec_err = [ ] sysvel = [ ] veltyp = [ ] veldef = [ ] pmra = [ ] pmdec = [ ] pmra_err = [ ] pmdec_err = [ ] parallax = [ ] para_err = [ ] spectyp = [ ] for i , targ in enumerate ( self . target ) :                  key = i + 1 targetmap [ id ( targ ) ] = key target_id . append ( key ) target . append ( targ . target ) raep0 . append ( targ . raep0 ) decep0 . append ( targ . decep0 ) equinox . append ( targ . equinox ) ra_err . append ( targ . ra_err ) dec_err . append ( targ . dec_err ) sysvel . append ( targ . sysvel ) veltyp . append ( targ . veltyp ) veldef . append ( targ . veldef ) pmra . append ( targ . pmra ) pmdec . append ( targ . pmdec ) pmra_err . append ( targ . pmra_err ) pmdec_err . append ( targ . pmdec_err ) parallax . append ( targ . parallax ) para_err . append ( targ . para_err ) spectyp . append ( targ . spectyp )  hdu = pyfits . new_table ( pyfits . ColDefs ( ( pyfits . Column ( name = <str> , format = <str> , array = target_id ) , pyfits . Column ( name = <str> , format = <str> , array = target ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = raep0 ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = decep0 ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = equinox ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = ra_err ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = dec_err ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = sysvel ) , pyfits . Column ( name = <str> , format = <str> , array = veltyp ) , pyfits . Column ( name = <str> , format = <str> , array = veldef ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = pmra ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = pmdec ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = pmra_err ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = pmdec_err ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = parallax ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = para_err ) , pyfits . Column ( name = <str> , format = <str> , array = spectyp ) ) ) ) hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdulist . append ( hdu )  arraymap = { } stationmap = { } for arrname , array in self . array . items ( ) :              arraymap [ id ( array ) ] = arrname tel_name = [ ] sta_name = [ ] sta_index = [ ] diameter = [ ] staxyz = [ ] if array . station . size :                  for i , station in enumerate ( array . station , 1 ) :                      stationmap [ id ( station ) ] = i tel_name . append ( station . tel_name ) sta_name . append ( station . sta_name ) sta_index . append ( i ) diameter . append ( station . diameter ) staxyz . append ( station . staxyz )  hdu = pyfits . new_table ( pyfits . ColDefs ( ( pyfits . Column ( name = <str> , format = <str> , array = tel_name ) , pyfits . Column ( name = <str> , format = <str> , array = sta_name ) , pyfits . Column ( name = <str> , format = <str> , array = sta_index ) , pyfits . Column ( name = <str> , unit = <str> , format = <str> , array = diameter ) , pyfits . Column ( name = <str> , unit = <str> , format = <str> , array = staxyz ) ) ) )  hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdu . header . update ( <str> , arrname , comment = <str> ) hdu . header . update ( <str> , array . frame , comment = <str> ) hdu . header . update ( <str> , array . arrxyz [ 0 ] , comment = <str> ) hdu . header . update ( <str> , array . arrxyz [ 1 ] , comment = <str> ) hdu . header . update ( <str> , array . arrxyz [ 2 ] , comment = <str> ) hdulist . append ( hdu )  if self . vis . size :              tables = { } for vis in self . vis :                  nwave = vis . wavelength . eff_wave . size if vis . array :                      key = ( arraymap [ id ( vis . array ) ] , wavelengthmap [ id ( vis . wavelength ) ] )  else :                      key = ( None , wavelengthmap [ id ( vis . wavelength ) ] )  if key in list ( tables . keys ( ) ) :                      data = tables [ key ]  else :                      data = tables [ key ] = { <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] }  data [ <str> ] . append ( targetmap [ id ( vis . target ) ] ) if vis . timeobs :                      time = vis . timeobs - refdate data [ <str> ] . append ( time . days * 24.0 * 3600.0 + time . seconds ) mjd = ( vis . timeobs - _mjdzero ) . days + ( vis . timeobs - _mjdzero ) . seconds / 3600.0 / 24.0 data [ <str> ] . append ( mjd )  else :                      data [ <str> ] . append ( None ) data [ <str> ] . append ( None )  data [ <str> ] . append ( vis . int_time ) if nwave == 1 :                      data [ <str> ] . append ( vis . visamp [ 0 ] ) data [ <str> ] . append ( vis . visamperr [ 0 ] ) data [ <str> ] . append ( vis . visphi [ 0 ] ) data [ <str> ] . append ( vis . visphierr [ 0 ] ) data [ <str> ] . append ( vis . flag [ 0 ] ) if vis . cflux != None :                          data [ <str> ] . append ( vis . cflux [ 0 ] )  else :                          data [ <str> ] . append ( None )  if vis . cfluxerr != None :                          data [ <str> ] . append ( vis . cfluxerr [ 0 ] )  else :                          data [ <str> ] . append ( None )   else :                      data [ <str> ] . append ( vis . visamp ) data [ <str> ] . append ( vis . visamperr ) data [ <str> ] . append ( vis . visphi ) data [ <str> ] . append ( vis . visphierr ) data [ <str> ] . append ( vis . flag ) if vis . cflux != None :                          data [ <str> ] . append ( vis . cflux )  else :                          cflux = np . empty ( nwave ) cflux [ : ] = None data [ <str> ] . append ( cflux )  if vis . cfluxerr != None :                          data [ <str> ] . append ( vis . cfluxerr )  else :                          cfluxerr = np . empty ( nwave ) cfluxerr [ : ] = None data [ <str> ] . append ( cfluxerr )   data [ <str> ] . append ( vis . ucoord ) data [ <str> ] . append ( vis . vcoord ) if vis . station [ 0 ] and vis . station [ 1 ] :                      data [ <str> ] . append ( [ stationmap [ id ( vis . station [ 0 ] ) ] , stationmap [ id ( vis . station [ 1 ] ) ] ] )  else :                      data [ <str> ] . append ( [ - 1 , - 1 ] )   for key in list ( tables . keys ( ) ) :                  data = tables [ key ] nwave = self . wavelength [ key [ 1 ] ] . eff_wave . size hdu = pyfits . new_table ( pyfits . ColDefs ( [ pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , unit = <str> , format = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , unit = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , unit = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] , null = - 1 ) , pyfits . Column ( name = <str> , format = <str> % nwave ) ] ) ) hdu . data . field ( <str> ) . setfield ( data [ <str> ] , bool ) hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdu . header . update ( <str> , refdate . strftime ( <str> ) , comment = <str> ) if key [ 0 ] : hdu . header . update ( <str> , key [ 0 ] , <str> ) hdu . header . update ( <str> , key [ 1 ] , <str> ) hdulist . append ( hdu )   if self . vis2 . size :              tables = { } for vis in self . vis2 :                  nwave = vis . wavelength . eff_wave . size if vis . array :                      key = ( arraymap [ id ( vis . array ) ] , wavelengthmap [ id ( vis . wavelength ) ] )  else :                      key = ( None , wavelengthmap [ id ( vis . wavelength ) ] )  if key in list ( tables . keys ( ) ) :                      data = tables [ key ]  else :                      data = tables [ key ] = { <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] }  data [ <str> ] . append ( targetmap [ id ( vis . target ) ] ) if vis . timeobs :                      time = vis . timeobs - refdate data [ <str> ] . append ( time . days * 24.0 * 3600.0 + time . seconds ) mjd = ( vis . timeobs - _mjdzero ) . days + ( vis . timeobs - _mjdzero ) . seconds / 3600.0 / 24.0 data [ <str> ] . append ( mjd )  else :                      data [ <str> ] . append ( None ) data [ <str> ] . append ( None )  data [ <str> ] . append ( vis . int_time ) if nwave == 1 :                      data [ <str> ] . append ( vis . vis2data [ 0 ] ) data [ <str> ] . append ( vis . vis2err [ 0 ] ) data [ <str> ] . append ( vis . flag [ 0 ] )  else :                      data [ <str> ] . append ( vis . vis2data ) data [ <str> ] . append ( vis . vis2err ) data [ <str> ] . append ( vis . flag )  data [ <str> ] . append ( vis . ucoord ) data [ <str> ] . append ( vis . vcoord ) if vis . station [ 0 ] and vis . station [ 1 ] :                      data [ <str> ] . append ( [ stationmap [ id ( vis . station [ 0 ] ) ] , stationmap [ id ( vis . station [ 1 ] ) ] ] )  else :                      data [ <str> ] . append ( [ - 1 , - 1 ] )   for key in list ( tables . keys ( ) ) :                  data = tables [ key ] nwave = self . wavelength [ key [ 1 ] ] . eff_wave . size hdu = pyfits . new_table ( pyfits . ColDefs ( [ pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] , null = - 1 ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) ] ) ) hdu . data . field ( <str> ) . setfield ( data [ <str> ] , bool ) hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdu . header . update ( <str> , refdate . strftime ( <str> ) , comment = <str> ) if key [ 0 ] : hdu . header . update ( <str> , key [ 0 ] , <str> ) hdu . header . update ( <str> , key [ 1 ] , <str> ) hdulist . append ( hdu )   if self . t3 . size :              tables = { } for t3 in self . t3 :                  nwave = t3 . wavelength . eff_wave . size if t3 . array :                      key = ( arraymap [ id ( t3 . array ) ] , wavelengthmap [ id ( t3 . wavelength ) ] )  else :                      key = ( None , wavelengthmap [ id ( t3 . wavelength ) ] )  if key in list ( tables . keys ( ) ) :                      data = tables [ key ]  else :                      data = tables [ key ] = { <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] }  data [ <str> ] . append ( targetmap [ id ( t3 . target ) ] ) if t3 . timeobs :                      time = t3 . timeobs - refdate data [ <str> ] . append ( time . days * 24.0 * 3600.0 + time . seconds ) mjd = ( t3 . timeobs - _mjdzero ) . days + ( t3 . timeobs - _mjdzero ) . seconds / 3600.0 / 24.0 data [ <str> ] . append ( mjd )  else :                      data [ <str> ] . append ( None ) data [ <str> ] . append ( None )  data [ <str> ] . append ( t3 . int_time ) if nwave == 1 :                      data [ <str> ] . append ( t3 . t3amp [ 0 ] ) data [ <str> ] . append ( t3 . t3amperr [ 0 ] ) data [ <str> ] . append ( t3 . t3phi [ 0 ] ) data [ <str> ] . append ( t3 . t3phierr [ 0 ] ) data [ <str> ] . append ( t3 . flag [ 0 ] )  else :                      data [ <str> ] . append ( t3 . t3amp ) data [ <str> ] . append ( t3 . t3amperr ) data [ <str> ] . append ( t3 . t3phi ) data [ <str> ] . append ( t3 . t3phierr ) data [ <str> ] . append ( t3 . flag )  data [ <str> ] . append ( t3 . u1coord ) data [ <str> ] . append ( t3 . v1coord ) data [ <str> ] . append ( t3 . u2coord ) data [ <str> ] . append ( t3 . v2coord ) if t3 . station [ 0 ] and t3 . station [ 1 ] and t3 . station [ 2 ] :                      data [ <str> ] . append ( [ stationmap [ id ( t3 . station [ 0 ] ) ] , stationmap [ id ( t3 . station [ 1 ] ) ] , stationmap [ id ( t3 . station [ 2 ] ) ] ] )  else :                      data [ <str> ] . append ( [ - 1 , - 1 , - 1 ] )   for key in list ( tables . keys ( ) ) :                  data = tables [ key ] nwave = self . wavelength [ key [ 1 ] ] . eff_wave . size hdu = pyfits . new_table ( pyfits . ColDefs ( ( pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> % nwave , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , unit = <str> , array = data [ <str> ] ) , pyfits . Column ( name = <str> , format = <str> , array = data [ <str> ] , null = - 1 ) , pyfits . Column ( name = <str> , format = <str> % nwave , array = data [ <str> ] ) ) ) ) hdu . data . field ( <str> ) . setfield ( data [ <str> ] , bool ) hdu . header . update ( <str> , <str> ) hdu . header . update ( <str> , 1 , <str> ) hdu . header . update ( <str> , refdate . strftime ( <str> ) , <str> ) if key [ 0 ] : hdu . header . update ( <str> , key [ 0 ] , <str> ) hdu . header . update ( <str> , key [ 1 ] , <str> ) hdulist . append ( hdu )   hdulist . writeto ( filename , clobber = True )   def open ( filename , quiet = False ) :      newobj = oifits ( ) targetmap = { } sta_indices = { } if not quiet :          print ( <str> % filename )  hdulist = pyfits . open ( filename ) for hdu in hdulist :          header = hdu . header data = hdu . data if hdu . name == <str> :              if newobj . wavelength == None : newobj . wavelength = { } insname = header [ <str> ] newobj . wavelength [ insname ] = OI_WAVELENGTH ( data . field ( <str> ) , data . field ( <str> ) )  elif hdu . name == <str> :              for row in data :                  target_id = row [ <str> ] target = OI_TARGET ( target = row [ <str> ] , raep0 = row [ <str> ] , decep0 = row [ <str> ] , equinox = row [ <str> ] , ra_err = row [ <str> ] , dec_err = row [ <str> ] , sysvel = row [ <str> ] , veltyp = row [ <str> ] , veldef = row [ <str> ] , pmra = row [ <str> ] , pmdec = row [ <str> ] , pmra_err = row [ <str> ] , pmdec_err = row [ <str> ] , parallax = row [ <str> ] , para_err = row [ <str> ] , spectyp = row [ <str> ] ) newobj . target = np . append ( newobj . target , target ) targetmap [ target_id ] = target   elif hdu . name == <str> :              if newobj . array == None : newobj . array = { } arrname = header [ <str> ] frame = header [ <str> ] arrxyz = np . array ( [ header [ <str> ] , header [ <str> ] , header [ <str> ] ] ) newobj . array [ arrname ] = OI_ARRAY ( frame , arrxyz , stations = data ) sta_indices [ arrname ] = data . field ( <str> )   for hdu in hdulist :          header = hdu . header data = hdu . data if hdu . name in ( <str> , <str> , <str> ) :              if <str> in list ( header . keys ( ) ) :                  arrname = header [ <str> ]  else :                  arrname = None  if arrname and newobj . array :                  array = newobj . array [ arrname ]  else :                  array = None  wavelength = newobj . wavelength [ header [ <str> ] ]  if hdu . name == <str> :              for row in data :                  date = header [ <str> ] . split ( <str> ) timeobs = datetime . datetime ( int ( date [ 0 ] ) , int ( date [ 1 ] ) , int ( date [ 2 ] ) ) + datetime . timedelta ( seconds = np . around ( row . field ( <str> ) , 2 ) ) int_time = row . field ( <str> ) visamp = np . reshape ( row . field ( <str> ) , - 1 ) visamperr = np . reshape ( row . field ( <str> ) , - 1 ) visphi = np . reshape ( row . field ( <str> ) , - 1 ) visphierr = np . reshape ( row . field ( <str> ) , - 1 ) if <str> in row . array . names : cflux = np . reshape ( row . field ( <str> ) , - 1 ) else : cflux = None if <str> in row . array . names : cfluxerr = np . reshape ( row . field ( <str> ) , - 1 ) else : cfluxerr = None flag = np . reshape ( row . field ( <str> ) , - 1 ) ucoord = row . field ( <str> ) vcoord = row . field ( <str> ) target = targetmap [ row . field ( <str> ) ] if array :                      sta_index = row . field ( <str> ) s1 = array . station [ sta_indices [ arrname ] == sta_index [ 0 ] ] [ 0 ] s2 = array . station [ sta_indices [ arrname ] == sta_index [ 1 ] ] [ 0 ] station = [ s1 , s2 ]  else :                      station = [ None , None ]  newobj . vis = np . append ( newobj . vis , OI_VIS ( timeobs = timeobs , int_time = int_time , visamp = visamp , visamperr = visamperr , visphi = visphi , visphierr = visphierr , flag = flag , ucoord = ucoord , vcoord = vcoord , wavelength = wavelength , target = target , array = array , station = station , cflux = cflux , cfluxerr = cfluxerr ) )   elif hdu . name == <str> :              for row in data :                  date = header [ <str> ] . split ( <str> ) timeobs = datetime . datetime ( int ( date [ 0 ] ) , int ( date [ 1 ] ) , int ( date [ 2 ] ) ) + datetime . timedelta ( seconds = np . around ( row . field ( <str> ) , 2 ) ) int_time = row . field ( <str> ) vis2data = np . reshape ( row . field ( <str> ) , - 1 ) vis2err = np . reshape ( row . field ( <str> ) , - 1 ) flag = np . reshape ( row . field ( <str> ) , - 1 ) ucoord = row . field ( <str> ) vcoord = row . field ( <str> ) target = targetmap [ row . field ( <str> ) ] if array :                      sta_index = row . field ( <str> ) s1 = array . station [ sta_indices [ arrname ] == sta_index [ 0 ] ] [ 0 ] s2 = array . station [ sta_indices [ arrname ] == sta_index [ 1 ] ] [ 0 ] station = [ s1 , s2 ]  else :                      station = [ None , None ]  newobj . vis2 = np . append ( newobj . vis2 , OI_VIS2 ( timeobs = timeobs , int_time = int_time , vis2data = vis2data , vis2err = vis2err , flag = flag , ucoord = ucoord , vcoord = vcoord , wavelength = wavelength , target = target , array = array , station = station ) )   elif hdu . name == <str> :              for row in data :                  date = header [ <str> ] . split ( <str> ) timeobs = datetime . datetime ( int ( date [ 0 ] ) , int ( date [ 1 ] ) , int ( date [ 2 ] ) ) + datetime . timedelta ( seconds = np . around ( row . field ( <str> ) , 2 ) ) int_time = row . field ( <str> ) t3amp = np . reshape ( row . field ( <str> ) , - 1 ) t3amperr = np . reshape ( row . field ( <str> ) , - 1 ) t3phi = np . reshape ( row . field ( <str> ) , - 1 ) t3phierr = np . reshape ( row . field ( <str> ) , - 1 ) flag = np . reshape ( row . field ( <str> ) , - 1 ) u1coord = row . field ( <str> ) v1coord = row . field ( <str> ) u2coord = row . field ( <str> ) v2coord = row . field ( <str> ) target = targetmap [ row . field ( <str> ) ] if array :                      sta_index = row . field ( <str> ) s1 = array . station [ sta_indices [ arrname ] == sta_index [ 0 ] ] [ 0 ] s2 = array . station [ sta_indices [ arrname ] == sta_index [ 1 ] ] [ 0 ] s3 = array . station [ sta_indices [ arrname ] == sta_index [ 2 ] ] [ 0 ] station = [ s1 , s2 , s3 ]  else :                      station = [ None , None , None ]  newobj . t3 = np . append ( newobj . t3 , OI_T3 ( timeobs = timeobs , int_time = int_time , t3amp = t3amp , t3amperr = t3amperr , t3phi = t3phi , t3phierr = t3phierr , flag = flag , u1coord = u1coord , v1coord = v1coord , u2coord = u2coord , v2coord = v2coord , wavelength = wavelength , target = target , array = array , station = station ) )    hdulist . close ( ) if not quiet :          newobj . info ( recursive = False )  return newobj   