import ehtim as eh import matplotlib . pyplot as plt import numpy as np from os import path , makedirs makeModel = True sampleimage = <str> array = <str> npix = 128 fov = 200 * eh . RADPERUAS source = <str> ra = 19.414182210498385 dec = - 29.24170032236311 zbl = 0.8 rf = 230000000000.0 mjd = 57854 ring_radius = 22 * eh . RADPERUAS ring_width = 10 * eh . RADPERUAS nonun_frac = 0.5 theta_nonun_rad = 270 fracpol = 0.4 corr = 5 * eh . RADPERUAS add_th_noise = True phasecal = False ampcal = False stabilize_scan_phase = True stabilize_scan_amp = True jones = True inv_jones = False frcal = True dcal = False dterm_offset = 0.05 tint_sec = 10 tadv_sec = 600 tstart_hr = 0 tstop_hr = 24 bw_hz = 4e9 seed = 2 gain_offset = { <str> : 0.15 , <str> : 0.15 , <str> : 0.15 , <str> : 0.6 , <str> : 0.15 , <str> : 0.15 , <str> : 0.15 , <str> : 0.15 } gainp = { <str> : 0.05 , <str> : 0.05 , <str> : 0.05 , <str> : 0.5 , <str> : 0.05 , <str> : 0.05 , <str> : 0.05 , <str> : 0.05 } savefolder = <str> if not path . exists ( savefolder ) :      makedirs ( savefolder )  if makeModel :      simim = eh . image . make_empty ( npix , fov , ra , dec , rf = rf , source = source , mjd = mjd ) simim = simim . add_ring_m1 ( zbl , nonun_frac , ring_radius , theta_nonun_rad * np . pi / 180. , ring_width , x = 0 , y = 0 ) simim . imvec *= zbl / simim . total_flux ( ) simim = simim . add_random_pol ( fracpol , corr , seed = 0 )  else :      simim = eh . image . load_txt ( sampleimage ) simim . mjd = mjd simim . ra = ra simim . dec = dec simim . imvec = zbl * simim . imvec / np . sum ( simim . imvec )  simim . display ( ) simim . display ( plotp = True ) eht = eh . array . load_txt ( array ) obs = simim . observe ( eht , tint_sec , tadv_sec , tstart_hr , tstop_hr , bw_hz , add_th_noise = add_th_noise , ampcal = ampcal , phasecal = phasecal , stabilize_scan_phase = stabilize_scan_phase , stabilize_scan_amp = stabilize_scan_amp , gain_offset = gain_offset , gainp = gainp , jones = jones , inv_jones = inv_jones , dcal = dcal , frcal = frcal , dterm_offset = dterm_offset , seed = seed ) obs . plotall ( <str> , <str> , conj = True , rangey = [ - 1e10 , 1e10 ] , rangex = [ - 1e10 , 1e10 ] ) obs . plotall ( <str> , <str> ) site1 = obs . tarr [ 0 ] [ <str> ] site2 = obs . tarr [ 1 ] [ <str> ] site3 = obs . tarr [ 2 ] [ <str> ] obs . plot_bl ( site1 , site2 , <str> , rangey = [ - 180 , 180 ] ) obs . plot_cphase ( site1 , site2 , site3 ) obs . save_uvfits ( savefolder + <str> ) simim . save_fits ( savefolder + <str> ) simim . display ( label_type = <str> , has_title = False , cbar_unit = ( <str> , <str> ) , export_pdf = savefolder + <str> )  