import filesystem , log import xbmc SOURCES_XML_PATH = <str> SOURCES_REAL_PATH = xbmc . translatePath ( SOURCES_XML_PATH ) def need_create ( settings ) : 	 if not filesystem . exists ( settings . base_path ( ) ) : 		 return True  if settings . anime_save and not filesystem . exists ( settings . anime_tvshow_path ( ) ) : 		 return True  if settings . animation_save and not filesystem . exists ( settings . animation_path ( ) ) : 		 return True  if settings . animation_tvshows_save and not filesystem . exists ( settings . animation_tvshow_path ( ) ) : 		 return True  if settings . tvshows_save and not filesystem . exists ( settings . tvshow_path ( ) ) : 		 return True  if settings . documentary_save and not filesystem . exists ( settings . documentary_path ( ) ) : 		 return True  return False  def create ( settings ) : 	 need_restart = False sources = Sources ( ) with filesystem . save_make_chdir_context ( settings . base_path ( ) , <str> ) : 		 if settings . anime_save : 			 path = settings . anime_tvshow_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True  if settings . animation_save : 			 path = settings . animation_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True  if settings . animation_tvshows_save : 			 path = settings . animation_tvshow_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True  if settings . tvshows_save : 			 path = settings . tvshow_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True  if settings . documentary_save : 			 path = settings . documentary_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True  if settings . movies_save : 			 path = settings . movies_path ( ) if not filesystem . exists ( path ) : 				 filesystem . makedirs ( path )  sources . add_video ( path , <str> , <str> ) need_restart = True   return need_restart  from collections import namedtuple import xml . etree . ElementTree as ET Source = namedtuple ( <str> , [ <str> , <str> , <str> ] ) class SourcesException ( Exception ) : 	 pass  class SourceAlreadyExists ( SourcesException ) : 	 def __init__ ( self , * args , ** kwargs ) : 		 label = kwargs . pop ( <str> ) super ( SourceAlreadyExists , self ) . __init__ ( self , <str> % label , * args , ** kwargs )   class UnknownMediaType ( SourcesException ) : 	 def __init__ ( self , * args , ** kwargs ) : 		 media_type = kwargs . pop ( <str> ) super ( UnknownMediaType , self ) . __init__ ( self , <str> % media_type , * args , ** kwargs )   def comp_str_nc ( s1 , s2 ) : 	 if s1 and s2 : 		 return s1 . lower ( ) == s2 . lower ( )  return s1 == s2  class Sources ( object ) : 	 def __init__ ( self ) : 		 if not filesystem . exists ( SOURCES_REAL_PATH ) : 			 with filesystem . fopen ( SOURCES_REAL_PATH , <str> ) as src : 				 src . write ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> )   self . xml_tree = ET . parse ( SOURCES_REAL_PATH ) self . sources = None  def get ( self , media_type = None , normalize = True ) : 		 if self . sources is None : 			 self . sources = [ ] for t in self . xml_tree . getroot ( ) : 				 m_type = t . tag if media_type is not None and m_type != media_type : 					 continue  for s in t . findall ( <str> ) : 					 label = s . find ( <str> ) . text if normalize : 						 path = filesystem . normpath ( s . find ( <str> ) . text )  else : 						 path = s . find ( <str> ) . text  self . sources . append ( Source ( m_type , path , label ) )    return self . sources  def has ( self , media_type = None , label = None , path = None ) : 		 if path : 			 path = filesystem . normpath ( path )  return any ( ( comp_str_nc ( s . path , path ) or path is None ) and ( s . label == label or label is None ) for s in self . get ( media_type ) )  def add ( self , media_type , path , label ) : 		 if self . has ( media_type , label ) : 			 raise SourceAlreadyExists ( label = label )  for t in self . xml_tree . getroot ( ) : 			 if t . tag == media_type : 				 s = ET . SubElement ( t , <str> ) ET . SubElement ( s , <str> ) . text = label ET . SubElement ( s , <str> , { <str> : <str> } ) . text = path ET . SubElement ( s , <str> ) . text = <str> self . xml_tree . write ( SOURCES_REAL_PATH , <str> ) return   raise UnknownMediaType ( media_type = media_type )  def add_video ( self , path , label , content ) : 		 path = filesystem . join ( path , <str> ) try : 			 self . add ( <str> , path , label )  except SourceAlreadyExists as e : 			 log . print_tb ( e )  db = VideoDB ( ) scan_recursive = bool ( content is <str> ) db . update_path ( path , content , scan_recursive , 0 , 0 )   import kodidb class VideoDB ( kodidb . VideoDatabase ) : 	 def __init__ ( self ) : 		 kodidb . VideoDatabase . __init__ ( self ) self . conn = self . create_connection ( )  def get_path ( self , path ) : 		 c = self . conn . cursor ( ) c . execute ( self . sql_request ( <str> ) , ( path , ) ) return c . fetchone ( )  def path_exists ( self , path ) : 		 return bool ( self . get_path ( path ) )  def update_path ( self , path , content , scan_recursive = False , use_folder_names = False , no_update = False ) : 		 scan_recursive = 2147483647 if scan_recursive else 0 c = self . conn . cursor ( ) if self . path_exists ( path ) : 			 c . execute ( self . sql_request ( <str> <str> ) , ( content , <str> , scan_recursive , use_folder_names , <str> , no_update , path ) )  else : 			 now_func = <str> if self . DB == <str> else <str> c . execute ( self . sql_request ( <str> <str> <str> + now_func + <str> ) , ( path , content , <str> , scan_recursive , use_folder_names , <str> , no_update ) )  self . conn . commit ( )    