__author__ = [ <str> , <str> ] __license__ = <str> import sys , codecs , itertools , re import cltk . corpus . sanskrit . itrans . langinfo as langinfo import cltk . corpus . sanskrit . itrans . itrans_transliterator as itrans_transliterator from cltk . corpus . sanskrit . itrans . sinhala_transliterator import SinhalaDevanagariTransliterator as sdt try :      unicode = unicode  except NameError :      str = str unicode = str bytes = bytes basestring = ( str , bytes )  else :      str = str unicode = unicode bytes = str basestring = basestring  def py23char ( x ) :      return chr ( x )  class UnicodeIndicTransliterator ( object ) :      @ staticmethod def _correct_tamil_mapping ( offset ) :          if offset >= 0x15 and offset <= 0x28 and offset != 0x1c and not ( ( offset - 0x15 ) % 5 == 0 or ( offset - 0x15 ) % 5 == 4 ) :              subst_char = ( offset - 0x15 ) / 5 offset = 0x15 + 5 * subst_char  if offset in [ 0x2b , 0x2c , 0x2d ] :              offset = 0x2a  if offset == 0x36 :              offset = 0x37  return offset  @ staticmethod def transliterate ( text , lang1_code , lang2_code ) :          if ( lang1_code in langinfo . SCRIPT_RANGES ) and ( lang2_code in langinfo . SCRIPT_RANGES ) :              if lang1_code == <str> :                  text = sdt . sinhala_to_devanagari ( text ) lang1_code = <str>  org_lang2_code = <str> if lang2_code == <str> :                  lang2_code = <str> org_lang2_code = <str>  trans_lit_text = [ ] for c in text :                  newc = c offset = ord ( c ) - langinfo . SCRIPT_RANGES [ lang1_code ] [ 0 ] if offset >= langinfo . COORDINATED_RANGE_START_INCLUSIVE and offset <= langinfo . COORDINATED_RANGE_END_INCLUSIVE :                      if lang2_code == <str> :                          offset = UnicodeIndicTransliterator . _correct_tamil_mapping ( offset )  newc = py23char ( langinfo . SCRIPT_RANGES [ lang2_code ] [ 0 ] + offset )  trans_lit_text . append ( newc )  if org_lang2_code == <str> :                  return sdt . devanagari_to_sinhala ( <str> . join ( trans_lit_text ) )  return ( <str> . join ( trans_lit_text ) )  else :              return text    class ItransTransliterator ( object ) :      @ staticmethod def to_itrans ( text , lang_code ) :          if lang_code in langinfo . SCRIPT_RANGES :              if lang_code == <str> :                  text = text . replace ( <str> , <str> ) text = text . replace ( <str> , <str> ) text = text . replace ( <str> , <str> ) text = text . replace ( <str> , <str> ) text = text . replace ( <str> , <str> ) text = text . replace ( <str> , <str> )  devnag = UnicodeIndicTransliterator . transliterate ( text , lang_code , <str> ) itrans = itrans_transliterator . transliterate ( devnag . encode ( <str> ) , <str> , <str> , { <str> : False , <str> : itrans_transliterator . UNRECOGNISED_ECHO } ) return itrans . decode ( <str> )  else :              return text   @ staticmethod def from_itrans ( text , lang_code ) :          if lang_code in langinfo . SCRIPT_RANGES :              devnag_text = itrans_transliterator . transliterate ( text . encode ( <str> ) , <str> , <str> , { <str> : False , <str> : itrans_transliterator . UNRECOGNISED_ECHO } ) lang_text = UnicodeIndicTransliterator . transliterate ( devnag_text . decode ( <str> ) , <str> , lang_code ) return lang_text  else :              return text     