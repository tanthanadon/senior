__author__ = [ <str> ] __license__ = <str> SUFFIXES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] PREFIXES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ENDS = [ <str> , <str> , <str> , <str> , <str> ] exceptions = dict ( ) def affix_stemmer ( words , exception_list = exceptions , strip_pref = True , strip_suf = True ) :      for i , w in enumerate ( words ) :          try :              words [ i ] = exception_list [ w ]  except :              if len ( w ) <= 4 :                  continue  word = w if strip_pref :                  for prefix in PREFIXES :                      if word . startswith ( prefix ) :                          word = word [ len ( prefix ) : ] break    if strip_suf :                  for en in ENDS :                      if len ( word ) <= 4 :                          break  for suffix in SUFFIXES :                          if len ( suffix ) <= len ( en ) :                              break  if ( word + en ) . endswith ( suffix ) :                              word = word [ : - len ( suffix ) + len ( en ) ] break   if len ( word ) <= 4 :                          break    words [ i ] = word   return <str> . join ( words )   