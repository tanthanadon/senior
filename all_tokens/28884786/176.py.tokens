__author__ = [ <str> ] __license__ = <str> import unittest from cltk . text_reuse . levenshtein import Levenshtein from cltk . text_reuse . text_reuse import TextReuse from cltk . text_reuse . comparison import long_substring from cltk . text_reuse . comparison import minhash from cltk . text_reuse . comparison import Needleman_Wunsch from cltk . text_reuse . comparison import Default_Matrix demo_verg = demo_prop = class TestSequenceFunctions ( unittest . TestCase ) :      def test_distance_ratio ( self ) :          l = Levenshtein ( ) ratio = l . ratio ( <str> , <str> ) self . assertEqual ( ratio , 0.71 )  def test_levenshtein_distance ( self ) :          l = Levenshtein ( ) dist = l . Levenshtein_Distance ( <str> , <str> ) self . assertEqual ( dist , 36 )  def test_damerau_levenshtein_distance ( self ) :          l = Levenshtein ( ) dist = l . Damerau_Levenshtein_Distance ( <str> , <str> ) self . assertEqual ( dist , 35 )  def test_distance_sliding_window ( self ) :          t = TextReuse ( ) comparisons = t . compare_sliding_window ( demo_verg , demo_prop ) self . assertEqual ( comparisons [ 19 ] [ 3 ] . ratio , 0.64 )  def test_long_substring ( self ) :          substring = long_substring ( demo_verg , demo_prop ) self . assertEqual ( substring , <str> )  def test_minhash ( self ) :          score = minhash ( demo_verg , demo_prop ) self . assertEqual ( score , 0.17163120567375886 )  def test_Needleman_Wunsch ( self ) :          w1 , w2 = <str> , <str> al = Needleman_Wunsch ( w1 , w2 ) self . assertEqual ( al , ( <str> , <str> ) )  def test_Default_Matrix ( self ) :          A = Default_Matrix ( 3 , 1 , - 1 ) self . assertEqual ( A , [ [ 1 , - 1 , - 1 ] , [ - 1 , 1 , - 1 ] , [ - 1 , - 1 , 1 ] ] )   if __name__ == <str> :      unittest . main ( )   