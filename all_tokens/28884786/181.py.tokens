__license__ = <str> from cltk . corpus . utils . importer import CorpusImporter from cltk . stem . latin . j_v import JVReplacer from cltk . stem . latin . stem import Stemmer from cltk . stem . lemma import LemmaReplacer from cltk . stem . latin . syllabifier import Syllabifier from cltk . stem . latin . declension import CollatinusDecliner from cltk . exceptions import UnknownLemma from cltk . stem . sanskrit . indian_syllabifier import Syllabifier as IndianSyllabifier from cltk . stem . akkadian . bound_form import BoundForm as AkkadianBoundForm from cltk . stem . akkadian . cv_pattern import CVPattern as AkkadianCVPattern from cltk . stem . akkadian . declension import NaiveDecliner as AkkadianNaiveDecliner from cltk . stem . akkadian . stem import Stemmer as AkkadianStemmer from cltk . stem . akkadian . syllabifier import Syllabifier as AkkadianSyllabifier from cltk . stem . akkadian . atf_converter import ATFConverter from cltk . stem . french . stem import stem from cltk . stem . middle_english . stem import affix_stemmer as MiddleEnglishAffixStemmer import os import unittest class TestSequenceFunctions ( unittest . TestCase ) :      @ classmethod def setUpClass ( self ) :          try :              corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> )  except :              raise Exception ( <str> )   def test_latin_i_u_transform ( self ) :          jv_replacer = JVReplacer ( ) trans = jv_replacer . replace ( <str> ) self . assertEqual ( trans , <str> )  def test_latin_stemmer ( self ) :          sentence = <str> stemmer = Stemmer ( ) stemmed_text = stemmer . stem ( sentence . lower ( ) ) target = <str> self . assertEqual ( stemmed_text , target )  def test_lemmatizer_inlist_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outlemma_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outstring_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outlemma_outstring_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outlemma_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outstring_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outlemma_outstring_latin ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outlemma_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outstring_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_inlist_outlemma_outstring_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = [ <str> , <str> , <str> ] lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outlemma_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = False ) target = [ <str> , <str> , <str> ] self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outstring_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = False , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_lemmatizer_instr_outlemma_outstring_greek ( self ) :          replacer = LemmaReplacer ( <str> ) unlemmatized = <str> lemmatized = replacer . lemmatize ( unlemmatized , return_raw = True , return_string = True ) target = <str> self . assertEqual ( lemmatized , target )  def test_latin_syllabifier ( self ) :          word = <str> syllabifier = Syllabifier ( ) syllables = syllabifier . syllabify ( word ) target = [ <str> , <str> , <str> ] self . assertEqual ( syllables , target ) macronized_word = <str> macronized_syllables = syllabifier . syllabify ( macronized_word ) macronized_target = [ <str> , <str> , <str> ] self . assertEqual ( macronized_syllables , macronized_target ) macronized_word2 = <str> macronized_syllables2 = syllabifier . syllabify ( macronized_word2 ) macronized_target2 = [ <str> , <str> , <str> , <str> ] self . assertEqual ( macronized_syllables2 , macronized_target2 ) macronized_word3 = <str> macronized_syllables3 = syllabifier . syllabify ( macronized_word3 ) macronized_target3 = [ <str> ] self . assertEqual ( macronized_syllables3 , macronized_target3 )  def test_syllabify ( self ) :          correct = [ <str> , <str> , <str> ] syllabifier = IndianSyllabifier ( <str> ) current = syllabifier . orthographic_syllabify ( <str> ) self . assertEqual ( current , correct )  def test_get_offset ( self ) :          correct = 40 syllabifier = IndianSyllabifier ( <str> ) current = syllabifier . get_offset ( <str> , <str> ) self . assertEqual ( current , correct )  def test_coordinated_range ( self ) :          syllabifier = IndianSyllabifier ( <str> ) current = syllabifier . get_offset ( <str> , <str> ) current1 = syllabifier . in_coordinated_range_offset ( current ) self . assertTrue ( current1 )  def test_akkadian_bound_form ( self ) :          bound_former = AkkadianBoundForm ( ) word = <str> bound_form = bound_former . get_bound_form ( word , <str> ) target = <str> self . assertEqual ( bound_form , target )  def test_akkadian_cv_pattern ( self ) :          cv_patterner = AkkadianCVPattern ( ) word = <str> cv_pattern = cv_patterner . get_cv_pattern ( word , pprint = True ) target = <str> self . assertEqual ( cv_pattern , target )  def test_akkadian_declension ( self ) :          decliner = AkkadianNaiveDecliner ( ) word = <str> declension = decliner . decline_noun ( word , <str> ) target = [ ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) , ( <str> , { <str> : <str> , <str> : <str> } ) ] self . assertEqual ( sorted ( declension ) , sorted ( target ) )  def test_akkadian_stemmer ( self ) :          stemmer = AkkadianStemmer ( ) word = <str> stem = stemmer . get_stem ( word , <str> ) target = <str> self . assertEqual ( stem , target )  def test_akkadian_syllabifier ( self ) :          syllabifier = AkkadianSyllabifier ( ) word = <str> syllables = syllabifier . syllabify ( word ) target = [ <str> , <str> , <str> , <str> ] self . assertEqual ( syllables , target )  def test_is_misc ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertFalse ( syllabifier . is_misc ( v ) )  def test_is_consonant ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertTrue ( syllabifier . is_consonant ( v ) )  def test_is_vowel ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertFalse ( syllabifier . is_vowel ( v ) )  def test_is_anusvaar ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertFalse ( syllabifier . is_anusvaar ( v ) )  def test_is_plosive ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertTrue ( syllabifier . is_plosive ( v ) )  def test_is_nukta ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertFalse ( syllabifier . is_nukta ( v ) )  def test_is_valid ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertTrue ( syllabifier . is_valid ( v ) )  def test_is_dependent_vowel ( self ) :          syllabifier = IndianSyllabifier ( <str> ) v = syllabifier . get_phonetic_feature_vector ( <str> , <str> ) self . assertFalse ( syllabifier . is_dependent_vowel ( v ) )  def test_collatinus_decline ( self ) :          decliner = CollatinusDecliner ( ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 1 : [ <str> ] , 2 : [ <str> ] , 3 : [ <str> ] , 4 : [ <str> ] , 5 : [ <str> ] , 6 : [ <str> ] , 7 : [ <str> ] , 8 : [ <str> ] , 9 : [ <str> ] , 10 : [ <str> ] , 11 : [ <str> ] , 12 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 13 : [ <str> ] , 14 : [ <str> ] , 15 : [ <str> ] , 16 : [ <str> ] , 17 : [ <str> ] , 18 : [ <str> ] , 19 : [ <str> ] , 20 : [ <str> ] , 21 : [ <str> ] , 22 : [ <str> ] , 23 : [ <str> ] , 24 : [ <str> ] , 25 : [ <str> ] , 26 : [ <str> ] , 27 : [ <str> ] , 28 : [ <str> ] , 29 : [ <str> ] , 30 : [ <str> ] , 31 : [ <str> ] , 32 : [ <str> ] , 33 : [ <str> ] , 34 : [ <str> ] , 35 : [ <str> ] , 36 : [ <str> ] , 37 : [ <str> ] , 38 : [ <str> ] , 39 : [ <str> ] , 40 : [ <str> ] , 41 : [ <str> ] , 42 : [ <str> ] , 43 : [ <str> ] , 44 : [ <str> ] , 45 : [ <str> ] , 46 : [ <str> ] , 47 : [ <str> ] , 48 : [ <str> ] , 49 : [ <str> ] , 50 : [ <str> ] , 51 : [ <str> ] , 52 : [ <str> ] , 53 : [ <str> ] , 54 : [ <str> ] , 55 : [ <str> ] , 56 : [ <str> ] , 57 : [ <str> ] , 58 : [ <str> ] , 59 : [ <str> ] , 60 : [ <str> ] , 61 : [ <str> ] , 62 : [ <str> ] , 63 : [ <str> ] , 64 : [ <str> ] , 65 : [ <str> ] , 66 : [ <str> ] , 67 : [ <str> ] , 68 : [ <str> ] , 69 : [ <str> ] , 70 : [ <str> ] , 71 : [ <str> ] , 72 : [ <str> ] , 73 : [ <str> ] , 74 : [ <str> ] , 75 : [ <str> ] , 76 : [ <str> ] , 77 : [ <str> ] , 78 : [ <str> ] , 79 : [ <str> ] , 80 : [ <str> ] , 81 : [ <str> ] , 82 : [ <str> ] , 83 : [ <str> ] , 85 : [ <str> ] , 86 : [ <str> ] , 87 : [ <str> ] , 88 : [ <str> ] , 89 : [ <str> ] , 90 : [ <str> ] , 91 : [ <str> ] , 92 : [ <str> ] , 93 : [ <str> ] , 94 : [ <str> ] , 95 : [ <str> ] , 96 : [ <str> ] , 97 : [ <str> ] , 98 : [ <str> ] , 99 : [ <str> ] , 100 : [ <str> ] , 101 : [ <str> ] , 102 : [ <str> ] , 103 : [ <str> ] , 104 : [ <str> ] , 105 : [ <str> ] , 106 : [ <str> ] , 107 : [ <str> ] , 108 : [ <str> ] , 109 : [ <str> ] , 110 : [ <str> ] , 111 : [ <str> ] , 112 : [ <str> ] , 113 : [ <str> ] , 114 : [ <str> ] , 115 : [ <str> ] , 116 : [ <str> ] , 117 : [ <str> ] , 118 : [ <str> ] , 119 : [ <str> ] , 120 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 1 : [ <str> ] , 2 : [ <str> ] , 3 : [ <str> ] , 4 : [ <str> ] , 5 : [ <str> ] , 6 : [ <str> ] , 7 : [ <str> ] , 8 : [ <str> ] , 9 : [ <str> ] , 10 : [ <str> ] , 11 : [ <str> ] , 12 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 121 : [ <str> ] , 122 : [ <str> ] , 123 : [ <str> ] , 124 : [ <str> ] , 125 : [ <str> ] , 126 : [ <str> ] , 127 : [ <str> ] , 128 : [ <str> ] , 129 : [ <str> ] , 130 : [ <str> ] , 131 : [ <str> ] , 132 : [ <str> ] , 133 : [ <str> ] , 134 : [ <str> ] , 135 : [ <str> ] , 136 : [ <str> ] , 137 : [ <str> ] , 138 : [ <str> ] , 139 : [ <str> ] , 140 : [ <str> ] , 141 : [ <str> ] , 142 : [ <str> ] , 143 : [ <str> ] , 144 : [ <str> , <str> ] , 145 : [ <str> ] , 146 : [ <str> ] , 147 : [ <str> ] , 148 : [ <str> ] , 149 : [ <str> ] , 150 : [ <str> ] , 151 : [ <str> ] , 152 : [ <str> ] , 153 : [ <str> ] , 154 : [ <str> ] , 155 : [ <str> ] , 156 : [ <str> ] , 157 : [ <str> ] , 158 : [ <str> ] , 159 : [ <str> ] , 160 : [ <str> ] , 161 : [ <str> ] , 162 : [ <str> ] , 163 : [ <str> ] , 164 : [ <str> ] , 165 : [ <str> ] , 166 : [ <str> ] , 167 : [ <str> ] , 168 : [ <str> ] , 169 : [ <str> ] , 170 : [ <str> ] , 171 : [ <str> ] , 172 : [ <str> ] , 173 : [ <str> ] , 174 : [ <str> ] , 175 : [ <str> ] , 176 : [ <str> ] , 177 : [ <str> ] , 178 : [ <str> ] , 179 : [ <str> ] , 180 : [ <str> ] , 181 : [ <str> ] , 182 : [ <str> ] , 183 : [ <str> ] , 184 : [ <str> ] , 185 : [ <str> ] , 186 : [ <str> ] , 187 : [ <str> ] , 188 : [ <str> ] , 189 : [ <str> ] , 190 : [ <str> ] , 191 : [ <str> ] , 192 : [ <str> ] , 193 : [ <str> ] , 194 : [ <str> ] , 195 : [ <str> ] , 196 : [ <str> ] , 197 : [ <str> ] , 198 : [ <str> , <str> ] , 199 : [ <str> ] , 200 : [ <str> ] , 201 : [ <str> ] , 202 : [ <str> ] , 203 : [ <str> ] , 204 : [ <str> ] , 205 : [ <str> ] , 206 : [ <str> ] , 207 : [ <str> ] , 208 : [ <str> ] , 209 : [ <str> ] , 210 : [ <str> , <str> ] , 211 : [ <str> ] , 212 : [ <str> ] , 213 : [ <str> ] , 214 : [ <str> ] , 215 : [ <str> ] , 216 : [ <str> ] , 217 : [ <str> ] , 218 : [ <str> ] , 219 : [ <str> ] , 220 : [ <str> ] , 221 : [ <str> ] , 222 : [ <str> , <str> ] , 223 : [ <str> ] , 224 : [ <str> ] , 225 : [ <str> ] , 226 : [ <str> ] , 227 : [ <str> ] , 228 : [ <str> ] , 229 : [ <str> ] , 230 : [ <str> ] , 231 : [ <str> ] , 232 : [ <str> ] , 233 : [ <str> ] , 234 : [ <str> ] , 235 : [ <str> ] , 236 : [ <str> ] , 237 : [ <str> ] , 238 : [ <str> ] , 239 : [ <str> ] , 240 : [ <str> ] , 241 : [ <str> ] , 242 : [ <str> ] , 243 : [ <str> ] , 244 : [ <str> ] , 245 : [ <str> ] , 246 : [ <str> ] , 247 : [ <str> ] , 248 : [ <str> ] , 249 : [ <str> ] , 250 : [ <str> ] , 251 : [ <str> ] , 252 : [ <str> ] , 253 : [ <str> ] , 254 : [ <str> ] , 255 : [ <str> ] , 256 : [ <str> ] , 257 : [ <str> ] , 258 : [ <str> ] , 259 : [ <str> ] , 260 : [ <str> ] , 261 : [ <str> ] , 262 : [ <str> ] , 263 : [ <str> ] , 264 : [ <str> ] , 265 : [ <str> ] , 266 : [ <str> ] , 267 : [ <str> ] , 268 : [ <str> , <str> ] , 269 : [ <str> ] , 270 : [ <str> ] , 271 : [ <str> ] , 272 : [ <str> ] , 273 : [ <str> ] , 274 : [ <str> , <str> ] , 275 : [ <str> ] , 276 : [ <str> ] , 277 : [ <str> ] , 278 : [ <str> ] , 279 : [ <str> ] , 280 : [ <str> , <str> ] , 281 : [ <str> ] , 282 : [ <str> ] , 283 : [ <str> ] , 284 : [ <str> ] , 285 : [ <str> ] , 286 : [ <str> , <str> ] , 287 : [ <str> ] , 288 : [ <str> ] , 289 : [ <str> ] , 290 : [ <str> ] , 291 : [ <str> ] , 292 : [ <str> , <str> ] , 293 : [ <str> ] , 294 : [ <str> ] , 295 : [ <str> ] , 296 : [ <str> ] , 297 : [ <str> ] , 298 : [ <str> ] , 299 : [ <str> ] , 300 : [ <str> ] , 301 : [ <str> ] , 302 : [ <str> ] , 303 : [ <str> ] , 304 : [ <str> ] , 305 : [ <str> ] , 306 : [ <str> ] , 307 : [ <str> ] , 308 : [ <str> ] , 309 : [ <str> ] , 310 : [ <str> ] , 311 : [ <str> ] , 312 : [ <str> ] , 313 : [ <str> ] , 314 : [ <str> ] , 315 : [ <str> ] , 316 : [ <str> ] , 317 : [ <str> ] , 318 : [ <str> ] , 319 : [ <str> ] , 320 : [ <str> ] , 321 : [ <str> ] , 322 : [ <str> ] , 323 : [ <str> ] , 324 : [ <str> ] , 325 : [ <str> ] , 326 : [ <str> ] , 327 : [ <str> ] , 328 : [ <str> ] , 329 : [ <str> ] , 330 : [ <str> ] , 331 : [ <str> ] , 332 : [ <str> ] , 333 : [ <str> ] , 334 : [ <str> ] , 335 : [ <str> ] , 336 : [ <str> ] , 337 : [ <str> ] , 338 : [ <str> ] , 339 : [ <str> ] , 340 : [ <str> ] , 341 : [ <str> ] , 342 : [ <str> ] , 343 : [ <str> ] , 344 : [ <str> ] , 345 : [ <str> ] , 346 : [ <str> ] , 347 : [ <str> ] , 348 : [ <str> ] , 349 : [ <str> ] , 350 : [ <str> ] , 351 : [ <str> ] , 352 : [ <str> ] , 353 : [ <str> ] , 354 : [ <str> ] , 355 : [ <str> ] , 356 : [ <str> ] , 357 : [ <str> ] , 358 : [ <str> ] , 359 : [ <str> ] , 360 : [ <str> ] , 361 : [ <str> ] , 362 : [ <str> ] , 363 : [ <str> ] , 364 : [ <str> ] , 365 : [ <str> ] , 366 : [ <str> ] , 367 : [ <str> ] , 368 : [ <str> ] , 369 : [ <str> ] , 370 : [ <str> ] , 371 : [ <str> ] , 372 : [ <str> ] , 373 : [ <str> ] , 374 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 1 : [ <str> ] , 2 : [ <str> ] , 3 : [ <str> , <str> , <str> ] , 4 : [ <str> , <str> ] , 5 : [ <str> ] , 6 : [ <str> ] , 7 : [ <str> ] , 8 : [ <str> ] , 9 : [ <str> , <str> ] , 10 : [ <str> ] , 11 : [ <str> ] , 12 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 13 : [ <str> , <str> , <str> ] , 15 : [ <str> ] , 16 : [ <str> , <str> ] , 17 : [ <str> ] , 18 : [ <str> , <str> ] , 19 : [ <str> ] , 21 : [ <str> , <str> ] , 22 : [ <str> ] , 23 : [ <str> , <str> ] , 24 : [ <str> , <str> ] , 25 : [ <str> , <str> , <str> , <str> ] , 27 : [ <str> ] , 28 : [ <str> , <str> ] , 29 : [ <str> ] , 30 : [ <str> ] , 31 : [ <str> ] , 33 : [ <str> , <str> ] , 34 : [ <str> ] , 35 : [ <str> , <str> ] , 36 : [ <str> , <str> ] , 37 : [ <str> , <str> ] , 39 : [ <str> , <str> ] , 40 : [ <str> , <str> ] , 41 : [ <str> ] , 42 : [ <str> , <str> ] , 43 : [ <str> , <str> , <str> ] , 45 : [ <str> , <str> , <str> ] , 46 : [ <str> ] , 47 : [ <str> , <str> ] , 48 : [ <str> , <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 13 : [ <str> , <str> ] , 15 : [ <str> , <str> ] , 16 : [ <str> , <str> , <str> , <str> ] , 17 : [ <str> , <str> , <str> , <str> ] , 18 : [ <str> , <str> ] , 19 : [ <str> , <str> ] , 21 : [ <str> , <str> ] , 22 : [ <str> , <str> ] , 23 : [ <str> , <str> ] , 25 : [ <str> , <str> ] , 27 : [ <str> , <str> ] , 28 : [ <str> , <str> , <str> , <str> ] , 29 : [ <str> , <str> , <str> , <str> ] , 30 : [ <str> , <str> ] , 31 : [ <str> , <str> ] , 33 : [ <str> , <str> ] , 34 : [ <str> , <str> ] , 35 : [ <str> , <str> ] , 37 : [ <str> , <str> ] , 39 : [ <str> , <str> ] , 40 : [ <str> , <str> , <str> , <str> ] , 41 : [ <str> , <str> , <str> , <str> ] , 42 : [ <str> , <str> ] , 43 : [ <str> , <str> ] , 45 : [ <str> , <str> ] , 46 : [ <str> , <str> ] , 47 : [ <str> , <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) , { 19 : [ <str> ] , 20 : [ <str> ] , 21 : [ <str> ] , 22 : [ <str> ] , 23 : [ <str> ] , 24 : [ <str> ] , 31 : [ <str> ] , 32 : [ <str> ] , 33 : [ <str> ] , 34 : [ <str> ] , 35 : [ <str> ] , 36 : [ <str> ] , 43 : [ <str> ] , 44 : [ <str> ] , 45 : [ <str> ] , 46 : [ <str> ] , 47 : [ <str> ] , 48 : [ <str> ] } , <str> ) self . assertEqual ( decliner . decline ( <str> , collatinus_dict = True ) [ 122 ] + decliner . decline ( <str> , collatinus_dict = True ) [ 163 ] , [ <str> , <str> ] + [ <str> , <str> ] , <str> )  def test_collatinus_flatten_decline ( self ) :          decliner = CollatinusDecliner ( ) self . assertEqual ( decliner . decline ( <str> , flatten = True ) , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> ) self . assertEqual ( decliner . decline ( <str> , flatten = True ) , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> )  def test_collatinus_POS_decline ( self ) :          decliner = CollatinusDecliner ( ) self . assertEqual ( decliner . decline ( <str> ) , [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , <str> ) self . assertEqual ( decliner . decline ( <str> ) , [ ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) , ( <str> , <str> ) ] , <str> )  def test_collatinus_raise ( self ) :          def decline ( ) :              decliner = CollatinusDecliner ( ) decliner . decline ( <str> )  self . assertRaises ( UnknownLemma , decline )  def french_stemmer_test ( self ) :          sentence = <str> <str> stemmed_text = stem ( sentence ) target = <str> <str> self . assertEqual ( stemmed_text , target )  def test_middle_english_stemmer ( self ) :          sentence = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stemmed = MiddleEnglishAffixStemmer ( sentence ) target = <str> self . assertEqual ( stemmed , target )  def test_convert_consonant ( self ) :          atf = ATFConverter ( ) signs = [ <str> , <str> , <str> , <str> , <str> , <str> ] target = [ <str> , <str> , <str> , <str> , <str> , <str> ] output = [ atf . _convert_consonant ( s ) for s in signs ] self . assertEqual ( output , target )  def test_get_number_from_sign ( self ) :          atf = ATFConverter ( ) signs = [ <str> , <str> , <str> , <str> , <str> ] target = [ 0 , 1 , 2 , 3 , 14 ] output = [ atf . _get_number_from_sign ( s ) [ 1 ] for s in signs ] self . assertEqual ( output , target )  def test_single_sign ( self ) :          atf = ATFConverter ( two_three = True ) signs = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] output = atf . process ( signs ) self . assertEqual ( output , target )  def test_accents ( self ) :          atf = ATFConverter ( two_three = False ) signs = [ <str> , <str> , <str> , <str> , <str> , <str> ] target = [ <str> , <str> , <str> , <str> , <str> , <str> ] output = atf . process ( signs ) self . assertEqual ( output , target )  def test_unknown_token ( self ) :          atf = ATFConverter ( two_three = True ) signs = [ <str> , <str> , <str> ] target = [ <str> , <str> , <str> ] output = atf . process ( signs ) self . assertEqual ( output , target )   if __name__ == <str> :      unittest . main ( )   