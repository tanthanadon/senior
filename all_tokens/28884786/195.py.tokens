import ast from collections import defaultdict from collections import OrderedDict import os import re from typing import Dict from typing import List from typing import Generator from typing import Pattern from typing import Union from typing import Tuple from typing import IO from cltk . utils . cltk_logger import logger __author__ = [ <str> ] __license__ = <str> def eval_str_to_list ( input_str : str ) -> List [ str ] :      inner_cast = ast . literal_eval ( input_str ) if isinstance ( inner_cast , list ) :          return inner_cast  else :          raise ValueError   def get_authors ( filepath : str ) -> List [ str ] :      str_oneline = <str> comp_oneline = re . compile ( str_oneline , re . MULTILINE ) with open ( filepath ) as file_open :          file_read = file_open . read ( )  match = comp_oneline . findall ( file_read ) if match :          inner_list_as_str = match [ 0 ] [ 1 ] inner_list = eval_str_to_list ( inner_list_as_str ) return inner_list  return list ( )  def scantree ( path : str ) -> Generator :      for entry in os . scandir ( path ) :          if entry . is_dir ( follow_symlinks = False ) :              yield from scantree ( entry . path )  else :              if entry . name . endswith ( <str> ) :                  yield entry     def write_contribs ( def_dict_list : Dict [ str , List [ str ] ] ) -> None :      file_str = <str> note = <str> file_str += note for contrib in def_dict_list :          file_str += <str> + contrib + <str> for module in def_dict_list [ contrib ] :              file_str += <str> + module + <str>  file_str += <str>  file_name = <str> with open ( file_name , <str> ) as file_open :          file_open . write ( file_str )  logger . info ( <str> , file_name )  def sort_def_dict ( def_dict : Dict [ str , List [ str ] ] ) -> Dict [ str , List [ str ] ] :      for _ , dd_list in def_dict . items ( ) :          dd_list . sort ( )  return def_dict  def find_write_contribs ( ) -> None :      map_file_auth = { } for filename in scantree ( <str> ) :          filepath = filename . path . replace ( <str> , <str> ) authors_list = get_authors ( filepath ) if authors_list :              map_file_auth [ filepath ] = authors_list   map_auth_file = defaultdict ( list ) for file , authors_file in map_file_auth . items ( ) :          for author in authors_file :              map_auth_file [ author ] . append ( file )   map_auth_file = sort_def_dict ( map_auth_file ) map_auth_file_sorted = sorted ( map_auth_file . items ( ) ) map_auth_file = OrderedDict ( map_auth_file_sorted ) write_contribs ( map_auth_file )  if __name__ == <str> :      find_write_contribs ( )   