import os import unittest from cltk . corpus . swadesh import Swadesh import cltk . phonology . old_norse . transcription as ont from cltk . stop . old_norse . stops import STOPS_LIST as OLD_NORSE_STOPS from nltk . tokenize . punkt import PunktLanguageVars from cltk . phonology import utils as ut from cltk . tokenize . word import WordTokenizer from cltk . phonology . syllabify import Syllabifier from cltk . tag . pos import POSTag from cltk . corpus . utils . importer import CorpusImporter from cltk . tokenize . word import WordTokenizer from cltk . corpus . old_norse . syllabifier import invalid_onsets from cltk . inflection . old_norse import pronouns , nouns import cltk . inflection . utils as decl_utils from cltk . prosody . old_norse . verse import Fornyrdhislag , Ljoodhhaattr , MetreManager , UnspecifiedStanza , PoetryTools , PoeticWord from cltk . phonology . old_norse . orthophonology import on __author__ = [ <str> , ] class TestOldNorse ( unittest . TestCase ) :      def setUp ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists )  def test_swadesh_old_norse ( self ) :          swadesh = Swadesh ( <str> ) first_word = <str> match = swadesh . words ( ) [ 0 ] self . assertEqual ( first_word , match )  def test_old_norse_transcriber ( self ) :          example_sentence = <str> <str> <str> tr = ut . Transcriber ( ont . DIPHTHONGS_IPA , ont . DIPHTHONGS_IPA_class , ont . IPA_class , ont . old_norse_rules ) transcribed_sentence = tr . text_to_phonetic_representation ( example_sentence ) target = <str> <str> self . assertEqual ( target , transcribed_sentence )  def test_old_norse_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in OLD_NORSE_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_pos_tnt_tagger_old_norse ( self ) :          tagger = POSTag ( <str> ) tagged = tagger . tag_tnt ( <str> ) print ( tagged ) self . assertTrue ( tagged )  def test_old_norse_word_tokenizer ( self ) :          text = <str> <str> target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] word_tokenizer = WordTokenizer ( <str> ) result = word_tokenizer . tokenize ( text ) self . assertTrue ( result == target )  def test_syllabification_old_norse ( self ) :          s = Syllabifier ( language = <str> , break_geminants = True ) text = <str> <str> tokenizer = WordTokenizer ( <str> ) words = tokenizer . tokenize ( text ) s . set_invalid_onsets ( invalid_onsets ) syllabified_words = [ s . syllabify_ssp ( word . lower ( ) ) for word in words if word not in <str> ] target = [ [ <str> , <str> ] , [ <str> ] , [ <str> ] , [ <str> , <str> ] , [ <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> ] , [ <str> ] , [ <str> ] , [ <str> , <str> , <str> , <str> ] , [ <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> ] , [ <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] self . assertListEqual ( syllabified_words , target )  def test_declension_pronouns ( self ) :          thessi_declension = [ [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] , [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] , [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] ] self . assertListEqual ( pronouns . pro_demonstrative_pronouns_this . declension , thessi_declension )  def test_declension_nouns ( self ) :          noun_sumar = decl_utils . DeclinableOneGender ( <str> , decl_utils . Gender . neuter ) noun_sumar . set_declension ( nouns . sumar ) self . assertEqual ( noun_sumar . get_declined ( decl_utils . Case . nominative , decl_utils . Number . plural ) , <str> )  def test_prosody_fornyrdhislag ( self ) :          poem = <str> <str> fo = Fornyrdhislag ( ) fo . from_short_lines_text ( poem ) fo . to_phonetics ( ) res_alliterations , res_n_alliterations_lines = fo . find_alliteration ( ) self . assertEqual ( res_alliterations , [ [ ( <str> , <str> ) ] , [ ( <str> , <str> ) , ( <str> , <str> ) ] , [ ] , [ ( <str> , <str> ) , ( <str> , <str> ) ] ] )  def test_prosody_ljoodhhaattr ( self ) :          poem = <str> <str> lj = Ljoodhhaattr ( ) lj . from_short_lines_text ( poem ) lj . to_phonetics ( ) verse_alliterations , n_alliterations_lines = lj . find_alliteration ( ) self . assertEqual ( verse_alliterations , [ [ ( <str> , <str> ) , ( <str> , <str> ) ] , [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] ] )  def test_poem ( self ) :          fake_poetic_text = [ <str> <str> , <str> <str> , <str> <str> <str> <str> ] fake_poem = MetreManager . load_poem_from_paragraphs ( fake_poetic_text ) self . assertIsInstance ( fake_poem [ 0 ] , Fornyrdhislag ) self . assertIsInstance ( fake_poem [ 1 ] , Ljoodhhaattr ) self . assertIsInstance ( fake_poem [ 2 ] , UnspecifiedStanza )  def test_syllable_length_1 ( self ) :          syllabifier = Syllabifier ( language = <str> ) word = [ ont . a , ont . s , ont . g , ont . a , ont . r , ont . dh , ont . r ] syllabified_word = syllabifier . syllabify_phonemes ( word ) lengths = [ ] for syllable in syllabified_word :              lengths . append ( ont . measure_old_norse_syllable ( syllable ) )  self . assertListEqual ( lengths , [ ut . Length . short , ut . Length . long ] )  def test_syllable_length_2 ( self ) :          ont . o . length = ont . Length . long word = [ ont . n , ont . o , ont . t . lengthen ( ) ] syllabified_word = [ word ] lengths = [ ] for syllable in syllabified_word :              lengths . append ( ont . measure_old_norse_syllable ( syllable ) )  self . assertListEqual ( lengths , [ ut . Length . overlong ] )  def test_syllable_length_3 ( self ) :          word = [ ont . t , ont . t ] lengths = [ ] for syllable in [ word ] :              lengths . append ( ont . measure_old_norse_syllable ( syllable ) )  self . assertListEqual ( lengths , [ None ] )  def test_prosody_tools_1 ( self ) :          pt = PoetryTools ( ) helgar = PoeticWord ( <str> ) helgar . parse_word_with ( pt ) self . assertEqual ( <str> , helgar . text ) self . assertListEqual ( helgar . ipa_transcription , [ [ <str> , <str> , <str> ] , [ <str> , <str> , <str> ] ] ) self . assertListEqual ( helgar . length , [ <str> , <str> ] ) self . assertListEqual ( helgar . stress , [ 1 , 0 ] )  def test_transcriber_edda_snorra ( self ) :          example_sentence = <str> <str> <str> res = on . transcribe ( example_sentence . lower ( ) ) target = <str> <str> self . assertEqual ( res , target )   if __name__ == <str> :      unittest . main ( )   