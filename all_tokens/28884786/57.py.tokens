__author__ = [ <str> ] __license__ = <str> AKKADIAN = { <str> : [ <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] } class Syllabifier ( object ) :      def __init__ ( self , language = AKKADIAN ) :          self . language = language  def _is_consonant ( self , char ) :          return char in self . language [ <str> ]  def _is_vowel ( self , char ) :          return char in self . language [ <str> ] + self . language [ <str> ] + self . language [ <str> ]  def syllabify ( self , word ) :          syllables = [ ] if len ( word ) == 1 :              return [ word ]  if self . _is_vowel ( word [ 0 ] ) :              if len ( word ) > 2 and not self . _is_consonant ( word [ 2 ] ) :                  syllables . append ( word [ 0 ] ) word = word [ 1 : ]   word = word [ : : - 1 ] syllables_reverse = [ ] i = 0 while i < len ( word ) :              char = word [ i ] if self . _is_vowel ( char ) :                  if self . _is_vowel ( word [ i + 1 ] ) :                      syllables_reverse . append ( word [ i ] ) i += 1  else :                      syllables_reverse . append ( word [ i + 1 ] + word [ i ] ) i += 2   elif self . _is_consonant ( char ) :                  if self . _is_vowel ( word [ i + 1 ] ) :                      if i + 2 >= len ( word ) :                          syllables_reverse . append ( word [ i + 1 ] + word [ i ] ) break  elif self . _is_consonant ( word [ i + 2 ] ) :                          syllables_reverse . append ( word [ i + 2 ] + word [ i + 1 ] + word [ i ] ) i += 3  elif self . _is_vowel ( word [ i + 2 ] ) :                          syllables_reverse . append ( word [ i + 1 ] + word [ i ] ) i += 2     return syllables + syllables_reverse [ : : - 1 ]    