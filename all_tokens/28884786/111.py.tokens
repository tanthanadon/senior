from cltk . phonology . utils import * __author__ = [ <str> , ] a = Vowel ( Height . open , Backness . front , False , Length . short , <str> ) long_a = a . lengthen ( ) ee = Vowel ( Height . open_mid , Backness . front , False , Length . short , <str> ) long_ee = ee . lengthen ( ) e = Vowel ( Height . close_mid , Backness . front , False , Length . short , <str> ) long_e = e . lengthen ( ) i = Vowel ( Height . close , Backness . front , False , Length . short , <str> ) long_i = i . lengthen ( ) y = Vowel ( Height . close , Backness . front , True , Length . short , <str> ) oo = Vowel ( Height . open_mid , Backness . back , True , Length . short , <str> ) long_oo = oo . lengthen ( ) o = Vowel ( Height . close_mid , Backness . back , True , Length . short , <str> ) long_o = o . lengthen ( ) u = Vowel ( Height . close , Backness . back , True , Length . short , <str> ) long_u = u . lengthen ( ) b = Consonant ( Place . bilabial , Manner . stop , True , <str> , False ) bh = Consonant ( Place . bilabial , Manner . fricative , True , <str> , False ) d = Consonant ( Place . alveolar , Manner . stop , True , <str> , False ) f = Consonant ( Place . labio_dental , Manner . fricative , False , <str> , False ) g = Consonant ( Place . velar , Manner . stop , True , <str> , False ) gh = Consonant ( Place . velar , Manner . fricative , True , <str> , False ) h = Consonant ( Place . glottal , Manner . fricative , False , <str> , False ) j = Consonant ( Place . palatal , Manner . fricative , True , <str> , False ) k = Consonant ( Place . velar , Manner . stop , False , <str> , False ) kh = Consonant ( Place . velar , Manner . fricative , False , <str> , False ) l = Consonant ( Place . alveolar , Manner . lateral , True , <str> , False ) m = Consonant ( Place . bilabial , Manner . nasal , True , <str> , False ) n = Consonant ( Place . labio_dental , Manner . nasal , True , <str> , False ) ng = Consonant ( Place . velar , Manner . nasal , True , <str> , False ) p = Consonant ( Place . bilabial , Manner . stop , False , <str> , False ) ph = Consonant ( Place . bilabial , Manner . fricative , False , <str> , False ) r = Consonant ( Place . alveolar , Manner . trill , False , <str> , False ) s = Consonant ( Place . alveolar , Manner . fricative , False , <str> , False ) t = Consonant ( Place . alveolar , Manner . stop , False , <str> , False ) v = Consonant ( Place . labio_dental , Manner . fricative , True , <str> , False ) w = Consonant ( Place . bilabial , Manner . spirant , True , <str> , False ) x = k + s z = Consonant ( Place . alveolar , Manner . fricative , True , <str> , False ) th = Consonant ( Place . dental , Manner . fricative , False , <str> , False ) dh = Consonant ( Place . dental , Manner . fricative , True , <str> , False ) GOTHIC_PHONOLOGY = [ a , ee , e , i , y , oo , u , long_a , long_e , long_ee , long_i , long_oo , long_o , long_u , b , d , f , g , h , k , l , m , n , p , r , s , t , v , th , dh ] DIPHTHONGS_IPA = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } DIPHTHONGS_IPA_class = { <str> : Vowel ( Height . open , Backness . front , True , Length . short , <str> ) , <str> : ee , <str> : i . lengthen ( ) , <str> : oo } ORIGINAL_IPA = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } IPA = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } IPA_class = { <str> : a , <str> : e . lengthen ( ) , <str> : i , <str> : o . lengthen ( ) , <str> : u , <str> : y , <str> : b , <str> : d , <str> : f , <str> : g , <str> : h , <str> : j , <str> : k , <str> : l , <str> : m , <str> : n , <str> : p , <str> : r , <str> : s , <str> : t , <str> : v , <str> : w , <str> : x , <str> : th , <str> : dh , <str> : h + w } GEMINATE_CONSONANTS = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } GEMINATE_CONSONANTS_class = { <str> : b . lengthen ( ) , <str> : d . lengthen ( ) , <str> : f . lengthen ( ) , <str> : ng + g , <str> : k . lengthen ( ) , <str> : l . lengthen ( ) , <str> : m . lengthen ( ) , <str> : n . lengthen ( ) , <str> : p . lengthen ( ) , <str> : r . lengthen ( ) , <str> : s . lengthen ( ) , <str> : t . lengthen ( ) , <str> : v . lengthen ( ) , } DIPHTHONGS_IPA . update ( GEMINATE_CONSONANTS ) DIPHTHONGS_IPA_class . update ( GEMINATE_CONSONANTS_class ) gothic_rules = [ ] gothic_rules_i = [ Rule ( AbstractPosition ( Rank . first , None , [ AbstractVowel ( ) ] ) , i , j ) , ] gothic_rules_b = [ Rule ( AbstractPosition ( Rank . first , None , [ ] ) , b , b ) , Rule ( AbstractPosition ( Rank . inner , [ n . to_abstract ( ) , m . to_abstract ( ) ] , [ ] ) , b , b ) , Rule ( AbstractPosition ( Rank . inner , [ r . to_abstract ( ) , l . to_abstract ( ) ] , [ ] ) , b , b ) , Rule ( AbstractPosition ( Rank . inner , [ AbstractVowel ( ) ] , [ AbstractVowel ( ) ] ) , b , bh ) , Rule ( AbstractPosition ( Rank . last , [ ] , None ) , b , ph ) ] gothic_rules_d = [ Rule ( AbstractPosition ( Rank . first , None , [ ] ) , d , d ) , Rule ( AbstractPosition ( Rank . inner , [ n . to_abstract ( ) , m . to_abstract ( ) ] , [ ] ) , d , d ) , Rule ( AbstractPosition ( Rank . inner , [ r . to_abstract ( ) , l . to_abstract ( ) ] , [ ] ) , d , d ) , Rule ( AbstractPosition ( Rank . inner , [ AbstractVowel ( ) ] , [ AbstractVowel ( ) ] ) , d , dh ) , Rule ( AbstractPosition ( Rank . last , [ ] , None ) , b , th ) ] gothic_rules_g = [ Rule ( AbstractPosition ( Rank . first , None , None ) , g , g ) , Rule ( AbstractPosition ( Rank . inner , [ n . to_abstract ( ) , m . to_abstract ( ) ] , None ) , g , g ) , Rule ( AbstractPosition ( Rank . inner , [ r . to_abstract ( ) , l . to_abstract ( ) ] , None ) , g , g ) , Rule ( AbstractPosition ( Rank . inner , [ AbstractVowel ( ) ] , [ AbstractVowel ( ) ] ) , g , gh ) , Rule ( AbstractPosition ( Rank . last , [ ] , None ) , b , kh ) ] gothic_rules_s = [ Rule ( AbstractPosition ( Rank . first , None , None ) , s , z ) , ] gothic_rules_ks = [ Rule ( AbstractPosition ( Rank . first , None , [ AbstractConsonant ( ) ] ) , x , k ) , Rule ( AbstractPosition ( Rank . inner , [ ] , [ AbstractConsonant ( ) ] ) , x , k ) , ] gothic_rules_h = [ Rule ( AbstractPosition ( Rank . first , None , [ AbstractVowel ( ) ] ) , h , h ) , Rule ( AbstractPosition ( Rank . first , None , [ AbstractConsonant ( ) ] ) , h , kh ) , Rule ( AbstractPosition ( Rank . inner , [ ] , [ s . to_abstract ( ) , t . to_abstract ( ) ] ) , h , h ) , ] gothic_rules . extend ( gothic_rules_i ) gothic_rules . extend ( gothic_rules_b ) gothic_rules . extend ( gothic_rules_d ) gothic_rules . extend ( gothic_rules_g ) gothic_rules . extend ( gothic_rules_s ) gothic_rules . extend ( gothic_rules_ks ) gothic_rules . extend ( gothic_rules_h )  