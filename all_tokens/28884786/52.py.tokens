__author__ = [ <str> ] __license__ = <str> import re from cltk . stop . latin import STOPS_LIST class Stemmer ( object ) :      def __init__ ( self , stops = STOPS_LIST ) :          self . stops = stops return  def stem ( self , text ) :          stemmed_text = <str> for word in text . split ( <str> ) :              if word not in self . stops :                  word , in_que_pass_list = self . _checkremove_que ( word ) if not in_que_pass_list :                      word , was_stemmed = self . _matchremove_simple_endings ( word ) if not was_stemmed :                          word = self . _matchremove_verb_endings ( word )    stemmed_text += word + <str>  return stemmed_text  def _checkremove_que ( self , word ) :          in_que_pass_list = False que_pass_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] if word not in que_pass_list :              word = re . sub ( <str> , <str> , word )  else :              in_que_pass_list = True  return word , in_que_pass_list  def _matchremove_simple_endings ( self , word ) :          was_stemmed = False simple_endings = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for ending in simple_endings :              if word . endswith ( ending ) :                  word = re . sub ( <str> . format ( ending ) , <str> , word ) was_stemmed = True break   return word , was_stemmed  def _matchremove_verb_endings ( self , word ) :          i_verb_endings = [ <str> , <str> , <str> , <str> , <str> ] bi_verb_endings = [ <str> , <str> , <str> ] eri_verb_endings = [ <str> ] verb_endings = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] for ending in i_verb_endings :              if word . endswith ( ending ) :                  word = re . sub ( <str> . format ( ending ) , <str> , word ) return word   for ending in bi_verb_endings :              if word . endswith ( ending ) :                  word = re . sub ( <str> . format ( ending ) , <str> , word ) return word   for ending in eri_verb_endings :              if word . endswith ( ending ) :                  word = re . sub ( <str> . format ( ending ) , <str> , word ) return word   for ending in verb_endings :              if word . endswith ( ending ) :                  word = re . sub ( <str> . format ( ending ) , <str> , word ) break   return word    