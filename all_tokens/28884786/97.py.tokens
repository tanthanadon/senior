import re from math import floor from cltk . phonology . utils import Transcriber from cltk . phonology . old_norse . transcription import Consonant , Vowel , old_norse_rules , IPA_class , DIPHTHONGS_IPA_class , DIPHTHONGS_IPA , measure_old_norse_syllable from cltk . phonology . syllabify import Syllabifier from cltk . tokenize . word import WordTokenizer import cltk . corpus . old_norse . syllabifier as old_norse_syllabifier from cltk . stop . old_norse . stops import STOPS_LIST from cltk . utils . cltk_logger import logger from cltk . tag . pos import POSTag __author__ = [ <str> , ] stops_for_poetry = [ <str> , <str> ] STOPS_LIST . extend ( stops_for_poetry ) def normalize ( text ) :      res = text . lower ( ) res = re . sub ( <str> , <str> , res ) res = re . sub ( <str> , <str> , res ) return res  class MetreManager :      @ staticmethod def is_fornyrdhislag ( text : str ) :          lines = [ line for line in text . split ( <str> ) if line ] return len ( lines ) == 8  @ staticmethod def is_ljoodhhaattr ( text : str ) :          lines = [ line for line in text . split ( <str> ) if line ] return len ( lines ) == 6  @ staticmethod def load_poem_from_paragraphs ( paragraphs ) :          poem = [ ] for paragraph in paragraphs :              if MetreManager . is_fornyrdhislag ( paragraph ) :                  fnl = Fornyrdhislag ( ) fnl . from_short_lines_text ( paragraph ) fnl . syllabify ( old_norse_syllabifier . hierarchy ) fnl . to_phonetics ( ) poem . append ( fnl )  elif MetreManager . is_ljoodhhaattr ( paragraph ) :                  lh = Ljoodhhaattr ( ) lh . from_short_lines_text ( paragraph ) lh . syllabify ( old_norse_syllabifier . hierarchy ) lh . to_phonetics ( ) poem . append ( lh )  else :                  stanza = UnspecifiedStanza ( ) stanza . from_short_lines_text ( paragraph ) stanza . syllabify ( old_norse_syllabifier . hierarchy ) stanza . to_phonetics ( ) poem . append ( stanza )   return poem   class ShortLine :      def __init__ ( self , text ) :          self . text = text self . tokenizer = WordTokenizer ( <str> ) self . tokenized_text = self . tokenizer . tokenize ( text ) self . first_sounds = [ ] self . syllabified = [ ] self . transcribed = [ ] self . alliterations = { } self . phonological_features_text = [ ] self . n_alliterations = 0 self . syllabified_phonological_features_text = [ ]  def syllabify ( self , syllabifier ) :          for viisuordh in self . tokenized_text :              word = normalize ( viisuordh ) if word :                  self . syllabified . append ( syllabifier . syllabify ( word ) )    def to_phonetics ( self , transcriber ) :          for viisuordh in self . tokenized_text :              word = normalize ( viisuordh ) if word :                  transcribed_word = transcriber . text_to_phonetic_representation ( word ) pfl = transcriber . text_to_phonemes ( word ) self . transcribed . append ( transcribed_word ) self . phonological_features_text . append ( pfl )   self . get_first_sounds ( )  def get_first_sounds ( self ) :          self . first_sounds = [ ] for viisuord in self . phonological_features_text :              self . first_sounds . append ( viisuord [ 0 ] )   def find_alliterations ( self , other_short_line ) :          self . n_alliterations = 0 self . alliterations = [ ] for j , sound1 in enumerate ( self . first_sounds ) :              word1 = normalize ( self . tokenized_text [ j ] ) for k , sound2 in enumerate ( other_short_line . first_sounds ) :                  word2 = normalize ( other_short_line . tokenized_text [ k ] ) if word1 not in STOPS_LIST and word2 not in STOPS_LIST :                      if isinstance ( sound1 , Consonant ) and isinstance ( sound2 , Consonant ) and sound1 . ipar == sound2 . ipar :                          self . alliterations . append ( ( word1 , word2 ) ) self . n_alliterations += 1  elif isinstance ( sound1 , Vowel ) and isinstance ( sound2 , Vowel ) :                          self . alliterations . append ( ( word1 , word2 ) ) self . n_alliterations += 1     return self . alliterations , self . n_alliterations   class LongLine :      def __init__ ( self , text ) :          self . text = text self . tokenizer = WordTokenizer ( <str> ) self . tokenized_text = self . tokenizer . tokenize ( text ) self . short_lines = None self . first_sounds = [ ] self . syllabified = [ ] self . transcribed = [ ] self . alliterations = [ ] self . phonological_features_text = [ ] self . n_alliterations = 0 self . syllabified_phonological_features_text = [ ]  def syllabify ( self , syllabifier ) :          for viisuordh in self . tokenized_text :              word = normalize ( viisuordh ) if word :                  self . syllabified . append ( syllabifier . syllabify ( word ) )    def to_phonetics ( self , transcriber ) :          for viisuordh in self . tokenized_text :              word = normalize ( viisuordh ) if word :                  transcribed_word = transcriber . text_to_phonetic_representation ( word ) pfl = transcriber . text_to_phonemes ( word ) self . transcribed . append ( transcribed_word ) self . phonological_features_text . append ( pfl )   self . get_first_sounds ( )  def get_first_sounds ( self ) :          self . first_sounds = [ ] for viisuord in self . phonological_features_text :              self . first_sounds . append ( viisuord [ 0 ] )   def find_alliterations ( self ) :          self . n_alliterations = 0 self . alliterations = [ ] for j , sound1 in enumerate ( self . first_sounds ) :              word1 = normalize ( self . tokenized_text [ j ] ) if j < len ( self . first_sounds ) - 1 :                  for k , sound2 in enumerate ( self . first_sounds [ j + 1 : ] ) :                      word2 = normalize ( self . tokenized_text [ k ] ) if word1 not in STOPS_LIST and sound2 not in STOPS_LIST :                          if isinstance ( sound1 , Consonant ) and sound1 . ipar == sound2 . ipar :                              self . alliterations . append ( ( word1 , word2 ) ) self . n_alliterations += 1  elif isinstance ( sound1 , Vowel ) and isinstance ( sound2 , Vowel ) :                              self . alliterations . append ( ( word1 , word2 ) ) self . n_alliterations += 1      return self . alliterations , self . n_alliterations   class Metre :      def __init__ ( self ) :          self . text = <str> self . short_lines = [ ] self . long_lines = [ ] self . syllabified_text = [ ] self . transcribed_text = [ ] self . phonological_features_text = [ ] self . syllabified_phonological_features_text = [ ]  def from_short_lines_text ( self , text : str ) :          self . text = text  def syllabify ( self , hierarchy ) :          if len ( self . long_lines ) == 0 :              logger . error ( <str> ) self . syllabified_text = [ ]  else :              syllabifier = Syllabifier ( language = <str> , break_geminants = True ) syllabifier . set_hierarchy ( hierarchy ) syllabified_text = [ ] for i , long_line in enumerate ( self . long_lines ) :                  syllabified_text . append ( [ ] ) for short_line in long_line :                      assert isinstance ( short_line , ShortLine ) or isinstance ( short_line , LongLine ) short_line . syllabify ( syllabifier ) syllabified_text [ i ] . append ( short_line . syllabified )   self . syllabified_text = syllabified_text   def to_phonetics ( self ) :          if len ( self . long_lines ) == 0 :              logger . error ( <str> ) self . syllabified_text = [ ]  else :              transcriber = Transcriber ( DIPHTHONGS_IPA , DIPHTHONGS_IPA_class , IPA_class , old_norse_rules ) transcribed_text = [ ] phonological_features_text = [ ] for i , long_line in enumerate ( self . long_lines ) :                  transcribed_text . append ( [ ] ) phonological_features_text . append ( [ ] ) for short_line in long_line :                      assert isinstance ( short_line , ShortLine ) or isinstance ( short_line , LongLine ) short_line . to_phonetics ( transcriber ) transcribed_text [ i ] . append ( short_line . transcribed ) phonological_features_text [ i ] . append ( short_line . phonological_features_text )   self . transcribed_text = transcribed_text self . phonological_features_text = phonological_features_text   def find_alliteration ( self ) :          if len ( self . phonological_features_text ) == 0 :              logger . error ( <str> ) raise ValueError  else :              first_sounds = [ ] for i , line in enumerate ( self . phonological_features_text ) :                  first_sounds . append ( [ ] ) for j , short_line in enumerate ( line ) :                      first_sounds [ i ] . append ( [ ] ) for viisuord in short_line :                          first_sounds [ i ] [ j ] . append ( viisuord [ 0 ] )    verse_alliterations = [ ] n_alliterations_lines = [ ] for i , first_sound_line in enumerate ( first_sounds ) :                  if isinstance ( self . long_lines [ i ] [ 0 ] , ShortLine ) and isinstance ( self . long_lines [ i ] [ 1 ] , ShortLine ) :                      self . long_lines [ i ] [ 0 ] . get_first_sounds ( ) self . long_lines [ i ] [ 1 ] . get_first_sounds ( ) alli , counter = self . long_lines [ i ] [ 0 ] . find_alliterations ( self . long_lines [ i ] [ 1 ] ) verse_alliterations . append ( alli ) n_alliterations_lines . append ( counter )  elif isinstance ( self . long_lines [ i ] [ 0 ] , LongLine ) :                      self . long_lines [ i ] [ 0 ] . get_first_sounds ( ) alli , counter = self . long_lines [ i ] [ 0 ] . find_alliterations ( ) verse_alliterations . append ( alli ) n_alliterations_lines . append ( counter )   return verse_alliterations , n_alliterations_lines    class UnspecifiedStanza ( Metre ) :      def __init__ ( self ) :          Metre . __init__ ( self )  def from_short_lines_text ( self , text : str ) :          Metre . from_short_lines_text ( self , text ) self . short_lines = [ ShortLine ( line ) for line in text . split ( <str> ) if line ] self . long_lines = None  def syllabify ( self , hierarchy ) :          syllabifier = Syllabifier ( language = <str> , break_geminants = True ) syllabifier . set_hierarchy ( hierarchy ) syllabified_text = [ ] for short_line in self . short_lines :              assert isinstance ( short_line , ShortLine ) short_line . syllabify ( syllabifier ) syllabified_text . append ( short_line . syllabified )  self . syllabified_text = syllabified_text  def to_phonetics ( self ) :          transcriber = Transcriber ( DIPHTHONGS_IPA , DIPHTHONGS_IPA_class , IPA_class , old_norse_rules ) transcribed_text = [ ] phonological_features_text = [ ] for short_line in self . short_lines :              assert isinstance ( short_line , ShortLine ) or isinstance ( short_line , LongLine ) short_line . to_phonetics ( transcriber ) transcribed_text . append ( short_line . transcribed ) phonological_features_text . append ( short_line . phonological_features_text )  self . transcribed_text = transcribed_text self . phonological_features_text = phonological_features_text  def find_alliteration ( self ) :          return [ ] , 0   class Fornyrdhislag ( Metre ) :      def __init__ ( self ) :          Metre . __init__ ( self )  def from_short_lines_text ( self , text : str ) :          self . text = text self . short_lines = [ ShortLine ( line ) for line in text . split ( <str> ) if line ] self . long_lines = [ self . short_lines [ 2 * i : 2 * i + 2 ] for i in range ( int ( floor ( len ( self . short_lines ) / 2 ) ) ) ]  def syllabify ( self , hierarchy ) :          Metre . syllabify ( self , hierarchy )  def to_phonetics ( self ) :          Metre . to_phonetics ( self )  def find_alliteration ( self ) :          return Metre . find_alliteration ( self )   class Ljoodhhaattr ( Metre ) :      def __init__ ( self ) :          Metre . __init__ ( self )  def from_short_lines_text ( self , text : str ) :          Metre . from_short_lines_text ( self , text ) lines = [ line for line in text . split ( <str> ) if line ] self . short_lines = [ ShortLine ( lines [ 0 ] ) , ShortLine ( lines [ 1 ] ) , LongLine ( lines [ 2 ] ) , ShortLine ( lines [ 3 ] ) , ShortLine ( lines [ 4 ] ) , LongLine ( lines [ 5 ] ) ] self . long_lines = [ self . short_lines [ 0 : 2 ] , [ self . short_lines [ 2 ] ] , self . short_lines [ 3 : 5 ] , [ self . short_lines [ 5 ] ] ]  def syllabify ( self , hierarchy ) :          Metre . syllabify ( self , hierarchy )  def to_phonetics ( self ) :          Metre . to_phonetics ( self )  def find_alliteration ( self ) :          return Metre . find_alliteration ( self )   class PoetryTools :      def __init__ ( self ) :          self . syllabifier = Syllabifier ( language = <str> ) self . tr = Transcriber ( DIPHTHONGS_IPA , DIPHTHONGS_IPA_class , IPA_class , old_norse_rules ) self . tagger = POSTag ( <str> )   class PoeticWord :      def __init__ ( self , text ) :          self . text = text self . syl = [ ] self . length = [ ] self . stress = [ ] self . ipa_transcription = [ ]  def parse_word_with ( self , poetry_tools : PoetryTools ) :          phonemes = poetry_tools . tr . text_to_phonemes ( self . text ) self . syl = poetry_tools . syllabifier . syllabify_phonemes ( phonemes ) for i , syllable in enumerate ( self . syl ) :              self . ipa_transcription . append ( [ ] ) syl_len = measure_old_norse_syllable ( syllable ) . value syl_stress = 1 if i == 0 else 0 self . length . append ( syl_len ) self . stress . append ( syl_stress ) for c in syllable :                  self . ipa_transcription [ i ] . append ( c . ipar )      