__author__ = [ <str> ] __license__ = <str> class PrettyPrint ( object ) :      def __init__ ( self ) :           def markdown_single_text ( self , catalog , cdli_number ) :          if cdli_number in catalog :              pnum = catalog [ cdli_number ] [ <str> ] edition = catalog [ cdli_number ] [ <str> ] metadata = <str> . join ( catalog [ cdli_number ] [ <str> ] ) transliteration = <str> . join ( catalog [ cdli_number ] [ <str> ] ) normalization = <str> . join ( catalog [ cdli_number ] [ <str> ] ) translation = <str> . join ( catalog [ cdli_number ] [ <str> ] ) m_d = . format ( pnum = pnum , edition = edition , metadata = metadata , trans = transliteration , norm = normalization , translation = translation ) self . markdown_text = m_d   def html_print_file ( self , catalog , destination ) :          with open ( destination , mode = <str> , encoding = <str> ) as t_f :              for text in catalog :                  pnum = catalog [ text ] [ <str> ] edition = catalog [ text ] [ <str> ] metadata = <str> . join ( catalog [ text ] [ <str> ] ) transliteration = <str> . join ( catalog [ text ] [ <str> ] ) normalization = <str> . join ( catalog [ text ] [ <str> ] ) translation = <str> . join ( catalog [ text ] [ <str> ] ) self . html_file = . format ( pnum = pnum , edition = edition , metadata = metadata , trans = transliteration , norm = normalization , translation = translation ) t_f . write ( self . html_file )    def html_print_single_text ( self , catalog , cdli_number , destination ) :          if cdli_number in catalog :              pnum = catalog [ cdli_number ] [ <str> ] edition = catalog [ cdli_number ] [ <str> ] metadata = <str> . join ( catalog [ cdli_number ] [ <str> ] ) transliteration = <str> . join ( catalog [ cdli_number ] [ <str> ] ) normalization = <str> . join ( catalog [ cdli_number ] [ <str> ] ) translation = <str> . join ( catalog [ cdli_number ] [ <str> ] ) self . html_single = . format ( pnum = pnum , edition = edition , metadata = metadata , trans = transliteration , norm = normalization , translation = translation ) with open ( destination , mode = <str> , encoding = <str> ) as t_f :                  t_f . write ( self . html_single )      