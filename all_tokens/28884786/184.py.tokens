import unittest from cltk . ir . query import _window_match from cltk . ir . query import _regex_span from cltk . ir . query import _paragraph_context from cltk . ir . query import _sentence_context from cltk . ir . query import match_regex __license__ = <str> class TestSequenceFunctions ( unittest . TestCase ) :      def test_regex_span ( self ) :          text = <str> _matches = _regex_span ( <str> , text ) matches_list = [ ] for match in _matches :              matches_list . append ( match . span ( ) )  self . assertEqual ( matches_list , [ ( 12 , 13 ) , ( 22 , 23 ) ] )  def test_regex_span_case_insens ( self ) :          text = <str> _matches = _regex_span ( <str> , text , case_insensitive = True ) matches_list = [ ] for match in _matches :              matches_list . append ( match . span ( ) )  self . assertEqual ( matches_list , [ ( 12 , 13 ) , ( 22 , 23 ) ] )  def test_regex_span_case_sens ( self ) :          text = <str> _matches = _regex_span ( <str> , text , case_insensitive = False ) matches_list = [ ] for match in _matches :              matches_list . append ( match . span ( ) )  self . assertEqual ( matches_list , [ ] )  def test_sentence_context ( self ) :          sentence = None paragraph = _matches = _regex_span ( <str> , paragraph ) for _match in _matches :              sentence = _sentence_context ( _match , language = <str> )  sentence_target = <str> self . assertEqual ( sentence , sentence_target )  def test_highlight_match ( self ) :          sentence = None paragraph = _matches = _regex_span ( <str> , paragraph ) for _match in _matches :              sentence = _window_match ( _match , window = 10 )  sentence_target = <str> self . assertEqual ( sentence , sentence_target )  def test_paragraph_context ( self ) :          text = _matches = _regex_span ( <str> , text ) for _match in _matches :              para = _paragraph_context ( _match )  target = <str> self . assertEqual ( para , target )  def test_match_regex_para ( self ) :          text = _matches = match_regex ( text , <str> , language = <str> , context = <str> ) for _match in _matches :              para = _match  para_target = <str> self . assertEqual ( para , para_target )  def test_match_regex_sentence ( self ) :          text = _matches = match_regex ( text , <str> , language = <str> , context = <str> ) for _match in _matches :              sent = _match  sent_target = <str> self . assertEqual ( sent , sent_target )  def test_match_regex_window ( self ) :          text = _matches = match_regex ( text , <str> , language = <str> , context = 40 ) for _match in _matches :              sent = _match  sent_target = <str> self . assertEqual ( sent , sent_target )   if __name__ == <str> :      unittest . main ( )   