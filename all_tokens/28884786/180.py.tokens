import unittest import cltk . inflection . utils as decl_utils from cltk . inflection . old_norse import nouns from cltk . inflection . old_norse import pronouns __author__ = [ <str> , ] class TestInflection ( unittest . TestCase ) :      def test_declinable ( self ) :          saa = decl_utils . Declinable ( <str> ) saa . set_declension ( pronouns . demonstrative_pronouns_that ) self . assertEqual ( saa . get_declined ( decl_utils . Case . dative , decl_utils . Number . plural , decl_utils . Gender . neuter ) , <str> )  def test_declinable_no_gender ( self ) :          ek = decl_utils . DeclinableNoGender ( <str> ) ek . set_declension ( pronouns . personal_pronouns_ek ) self . assertEqual ( ek . get_declined ( decl_utils . Case . dative , decl_utils . Number . singular ) , <str> )  def test_declinable_one_gender ( self ) :          noun_sumar = decl_utils . DeclinableOneGender ( <str> , decl_utils . Gender . neuter ) noun_sumar . set_declension ( nouns . sumar ) self . assertEqual ( noun_sumar . get_declined ( decl_utils . Case . nominative , decl_utils . Number . plural ) , <str> )  def test_declensions ( self ) :          thessi_declension = [ [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] , [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] , [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] ] ] self . assertListEqual ( pronouns . pro_demonstrative_pronouns_this . declension , thessi_declension )   if __name__ == <str> :      unittest . main ( )   