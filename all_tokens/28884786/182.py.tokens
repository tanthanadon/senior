__license__ = <str> from cltk . prosody . latin . scanner import Scansion as ScansionLatin from cltk . prosody . latin . clausulae_analysis import Clausulae from cltk . prosody . greek . scanner import Scansion as ScansionGreek from cltk . prosody . latin . macronizer import Macronizer import unittest class TestSequenceFunctions ( unittest . TestCase ) :      test = <str> def test_clean_text_greek ( self ) :          correct = <str> current = ScansionGreek ( ) . _clean_text ( self . test ) self . assertEqual ( current , correct )  def test_clean_accents_greek ( self ) :          correct = <str> current = ScansionGreek ( ) . _clean_accents ( self . test ) self . assertEqual ( current , correct )  def test_tokenize_greek ( self ) :          correct = [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> ] ] current = ScansionGreek ( ) . _tokenize ( self . test ) self . assertEqual ( current , correct )  def test_make_syllables_greek ( self ) :          correct = [ [ [ <str> , <str> ] , [ <str> ] , [ <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] ] , [ [ <str> ] , [ <str> ] , [ <str> , <str> , <str> ] ] ] current = ScansionGreek ( ) . _make_syllables ( self . test ) self . assertEqual ( current , correct )  def test_scan_text_greek ( self ) :          correct = [ <str> , <str> ] current = ScansionGreek ( ) . scan_text ( self . test ) self . assertEqual ( current , correct )  def test_retrieve_morpheus_entry ( self ) :          correct = [ ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) ] current = Macronizer ( <str> ) . _retrieve_morpheus_entry ( <str> ) self . assertEqual ( current , correct )  def test_macronize_word ( self ) :          correct = ( <str> , <str> , <str> ) current = Macronizer ( <str> ) . _macronize_word ( ( <str> , <str> ) ) self . assertEqual ( current , correct )  def test_macronize_tags ( self ) :          text = <str> correct = [ ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , None , <str> ) ] current = Macronizer ( <str> ) . macronize_tags ( text ) self . assertEqual ( current , correct )  def test_macronize_text ( self ) :          text = <str> correct = <str> current = Macronizer ( <str> ) . macronize_text ( text ) self . assertEqual ( current , correct )   if __name__ == <str> :      unittest . main ( )   