__license__ = <str> import unittest from cltk . prosody . latin . hexameter_scanner import HexameterScanner from cltk . prosody . latin . pentameter_scanner import PentameterScanner from cltk . prosody . latin . hendecasyllable_scanner import HendecasyllableScanner from cltk . prosody . latin . syllabifier import Syllabifier class TestScansionFunctions ( unittest . TestCase ) :      def test_hexameter_scanner ( self ) :          scanner = HexameterScanner ( ) original_line = <str> verse = scanner . scan ( original_line ) self . assertEqual ( verse . scansion , <str> ) self . assertEqual ( verse . meter , <str> ) self . assertEqual ( verse . syllable_count , 15 ) self . assertTrue ( verse . valid ) self . assertTrue ( verse ) self . assertEqual ( verse . accented , <str> ) self . assertEqual ( verse . original , original_line ) self . assertEqual ( repr ( verse ) , <str> ) count = 0 for idx , val in enumerate ( verse ) :              count += 1  self . assertEqual ( count , 8 ) self . assertFalse ( scanner . scan ( <str> ) . valid ) self . assertFalse ( scanner . scan ( <str> ) . valid )  def test_pentameter_scanner ( self ) :          scanner = PentameterScanner ( ) original_line = <str> verse = scanner . scan ( original_line ) self . assertTrue ( verse . valid ) self . assertTrue ( verse ) self . assertEqual ( verse . original , original_line ) self . assertEqual ( verse . meter , <str> ) self . assertEqual ( verse . syllable_count , 12 ) self . assertEqual ( repr ( verse ) , <str> ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertFalse ( verse . valid ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . scansion , <str> ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) self . assertFalse ( scanner . scan ( <str> ) . valid ) self . assertFalse ( scanner . scan ( <str> ) . valid )  def test_hendecasyllable_scanner ( self ) :          scanner = HendecasyllableScanner ( ) original_line = <str> verse = scanner . scan ( original_line ) self . assertTrue ( verse . valid ) self . assertTrue ( verse ) self . assertEqual ( verse . original , original_line ) self . assertEqual ( verse . meter , <str> ) self . assertEqual ( verse . syllable_count , 11 ) self . assertEqual ( verse . accented , <str> ) self . assertEqual ( repr ( verse ) , <str> ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertFalse ( verse . valid ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertFalse ( verse . valid ) self . assertEqual ( verse . accented , <str> ) self . assertEqual ( verse . scansion , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) self . assertEqual ( verse . scansion , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) verse = scanner . scan ( <str> ) self . assertEqual ( verse . scansion , <str> ) self . assertTrue ( verse . valid ) self . assertEqual ( verse . accented , <str> ) self . assertFalse ( scanner . scan ( <str> ) . valid ) self . assertFalse ( scanner . scan ( <str> ) . valid )  def test_syllabifier ( self ) :          syllabifier = Syllabifier ( ) self . assertEqual ( syllabifier . syllabify ( <str> ) , [ <str> , <str> , <str> ] ) self . assertEqual ( syllabifier . syllabify ( <str> ) , [ <str> , <str> , <str> , <str> , <str> , <str> ] ) self . assertEqual ( syllabifier . syllabify ( <str> ) , [ <str> , <str> ] )    