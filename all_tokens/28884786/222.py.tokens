from cltk . corpus . greek . tlg . author_date import AUTHOR_DATE from cltk . corpus . greek . tlg . author_epithet import AUTHOR_EPITHET from cltk . corpus . greek . tlg . author_female import AUTHOR_FEMALE from cltk . corpus . greek . tlg . author_geo import AUTHOR_GEO from cltk . corpus . greek . tlg . id_author import ID_AUTHOR from cltk . corpus . greek . tlg . index_lists import INDEX_LIST from cltk . corpus . greek . tlg . work_numbers import WORK_NUMBERS import regex import os import json __author__ = [ <str> , <str> , <str> ] __license__ = <str> THIS_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) def get_female_authors ( ) :      return set ( AUTHOR_FEMALE [ <str> ] )  def get_epithet_index ( ) :      _dict = { } for k , v in AUTHOR_EPITHET . items ( ) :          _dict [ k ] = set ( v )  return _dict  def get_epithets ( ) :      return sorted ( AUTHOR_EPITHET . keys ( ) )  def select_authors_by_epithet ( query ) :      for epithet , ids in AUTHOR_EPITHET . items ( ) :          if epithet . casefold ( ) == query . casefold ( ) :              return set ( ids )    def get_epithet_of_author ( _id ) :      for epithet , ids in AUTHOR_EPITHET . items ( ) :          if _id in ids :              return epithet    def get_geo_index ( ) :      _dict = { } for k , v in AUTHOR_EPITHET . items ( ) :          _dict [ k ] = set ( v )  return _dict  def get_geographies ( ) :      return sorted ( AUTHOR_GEO . keys ( ) )  def select_authors_by_geo ( query ) :      for geo , ids in AUTHOR_GEO . items ( ) :          if geo . casefold ( ) == query . casefold ( ) :              return set ( ids )    def get_geo_of_author ( _id ) :      for geo , ids in AUTHOR_GEO . items ( ) :          if _id in ids :              return geo    def get_lists ( ) :      return INDEX_LIST  def get_id_author ( ) :      return ID_AUTHOR  def select_id_by_name ( query ) :      id_author = get_id_author ( ) comp = regex . compile ( <str> . format ( query . casefold ( ) ) , flags = regex . VERSION1 ) matches = [ ] for _id , author in id_author . items ( ) :          match = comp . findall ( author . casefold ( ) ) if match :              matches . append ( ( _id , author ) )   return matches  def open_json ( _file ) :      with open ( _file ) as f :          return json . load ( f )   def get_works_by_id ( _id ) :      return WORK_NUMBERS [ _id ]  def check_id ( _id ) :      return ID_AUTHOR [ _id ]  def get_date_author ( ) :      _path = os . path . join ( THIS_DIR , <str> ) return open_json ( _path )  def get_dates ( ) :      _dict = get_date_author ( ) return sorted ( _dict . keys ( ) )  def get_date_of_author ( _id ) :      _dict = get_date_author ( ) for date , ids in _dict . items ( ) :          if _id in ids :              return date   return None  def _get_epoch ( _str ) :      _return = None if _str . startswith ( <str> ) :          _return = <str>  elif _str . startswith ( <str> ) :          _return = None  elif _str . startswith ( <str> ) :          _return = <str>  elif regex . match ( <str> , _str ) :          _return = <str>  elif regex . match ( <str> , _str ) :          _return = <str>  elif regex . match ( <str> , _str ) :          _return = None  elif _str == <str> or _str == <str> :          _return = _str  return _return  def _check_number ( _str ) :      if regex . match ( <str> , _str ) :          return True  return False  def _handle_splits ( _str ) :      _str = _str . replace ( <str> , <str> ) _tmp_dict = { } if <str> in _str :          start , stop = _str . split ( <str> ) if _check_number ( start ) :              start = regex . sub ( <str> , start , stop )  elif _check_number ( stop ) :              stop = regex . sub ( <str> , stop , start )   else :          start = _str stop = _str  _tmp_dict [ <str> ] = start _tmp_dict [ <str> ] = stop _tmp_dict [ <str> ] = _get_epoch ( start ) _tmp_dict [ <str> ] = _get_epoch ( stop ) return _tmp_dict  def normalize_dates ( ) :      _dict = get_date_author ( ) for tlg_date in _dict :          date = { } if tlg_date == <str> :              pass  elif tlg_date == <str> :              pass  else :              tmp_date = _handle_splits ( tlg_date ) date . update ( tmp_date )  print ( date )   if __name__ == <str> :      print ( get_date_author ( ) ) pass   