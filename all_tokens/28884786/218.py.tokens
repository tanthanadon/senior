import glob import os bs4_installed = True try :      from bs4 import BeautifulSoup  except ImportError :      bs4_installed = False  mycapitains_installed = True try :      from MyCapytain . resources . texts . local . capitains . cts import CapitainsCtsText from MyCapytain . common . constants import Mimetypes , XPATH_NAMESPACES from lxml . etree import tostring  except ImportError :      mycapitains_installed = False  from cltk . utils . cltk_logger import logger def onekgreek_tei_xml_to_text ( ) :      if not bs4_installed :          logger . error ( <str> ) raise ImportError  xml_dir = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) xml_paths = glob . glob ( xml_dir ) if not len ( xml_paths ) :          logger . error ( <str> ) raise FileNotFoundError  xml_paths = [ path for path in xml_paths if <str> not in path ] new_dir = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) if not os . path . isdir ( new_dir ) :          os . makedirs ( new_dir )  for xml_path in xml_paths :          _ , xml_name = os . path . split ( xml_path ) xml_name = xml_name . rstrip ( <str> ) xml_name += <str> with open ( xml_path ) as file_open :              soup = BeautifulSoup ( file_open , <str> )  body = soup . body text = body . get_text ( ) new_plaintext_path = os . path . join ( new_dir , xml_name ) with open ( new_plaintext_path , <str> ) as file_open :              file_open . write ( text )    def onekgreek_tei_xml_to_text_capitains ( ) :      file = os . path . expanduser ( get_cltk_data_dir ( ) + <str> ) xml_dir = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) xml_paths = glob . glob ( xml_dir ) if not len ( xml_paths ) :          logger . error ( <str> ) raise FileNotFoundError  xml_paths = [ path for path in xml_paths if <str> not in path ] new_dir = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) if not os . path . isdir ( new_dir ) :          os . makedirs ( new_dir )  for xml_path in xml_paths :          _ , xml_name = os . path . split ( xml_path ) xml_name = xml_name . rstrip ( <str> ) xml_name += <str> plain_text = <str> with open ( xml_path ) as file_open :              text = CapitainsCtsText ( resource = file_open ) for ref in text . getReffs ( level = len ( text . citation ) ) :                  psg = text . getTextualNode ( subreference = ref , simple = True ) text_line = psg . export ( Mimetypes . PLAINTEXT , exclude = [ <str> ] ) plain_text += text_line   new_plaintext_path = os . path . join ( new_dir , xml_name ) with open ( new_plaintext_path , <str> ) as file_open :              file_open . write ( plain_text )     