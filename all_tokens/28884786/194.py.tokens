import os . path import hashlib import pickle from cltk . utils . cltk_logger import logger __author__ = [ <str> , <str> , <str> ] __license__ = <str> def make_cltk_path ( * fp_list ) :      return os . path . join ( get_cltk_data_dir ( ) , * fp_list )  def open_pickle ( path : str ) :      try :          with open ( path , <str> ) as opened_pickle :              try :                  return pickle . load ( opened_pickle )  except Exception as pickle_error :                  logger . error ( pickle_error ) raise    except FileNotFoundError as fnf_error :          logger . error ( fnf_error ) raise  except IOError as io_err :          logger . error ( io_err ) raise  except EOFError as eof_error :          logger . error ( eof_error ) raise  except pickle . UnpicklingError as unp_error :          logger . error ( unp_error ) raise   def md5 ( filename : str ) -> str :      hash_md5 = hashlib . md5 ( ) with open ( filename , <str> ) as f :          for chunk in iter ( lambda : f . read ( 4096 ) , <str> ) :              hash_md5 . update ( chunk )   return hash_md5 . hexdigest ( )   