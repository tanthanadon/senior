import re from cltk . corpus . arabic . utils . pyarabic import stack __author__ = [ <str> ] __license__ = <str> COMMA = <str> SEMICOLON = <str> QUESTION = <str> HAMZA = <str> ALEF_MADDA = <str> ALEF_HAMZA_ABOVE = <str> WAW_HAMZA = <str> ALEF_HAMZA_BELOW = <str> YEH_HAMZA = <str> ALEF = <str> BEH = <str> TEH_MARBUTA = <str> TEH = <str> THEH = <str> JEEM = <str> HAH = <str> KHAH = <str> DAL = <str> THAL = <str> REH = <str> ZAIN = <str> SEEN = <str> SHEEN = <str> SAD = <str> DAD = <str> TAH = <str> ZAH = <str> AIN = <str> GHAIN = <str> TATWEEL = <str> FEH = <str> QAF = <str> KAF = <str> LAM = <str> MEEM = <str> NOON = <str> HEH = <str> WAW = <str> ALEF_MAKSURA = <str> YEH = <str> MADDA_ABOVE = <str> HAMZA_ABOVE = <str> HAMZA_BELOW = <str> ZERO = <str> ONE = <str> TWO = <str> THREE = <str> FOUR = <str> FIVE = <str> SIX = <str> SEVEN = <str> EIGHT = <str> NINE = <str> PERCENT = <str> DECIMAL = <str> THOUSANDS = <str> STAR = <str> MINI_ALEF = <str> ALEF_WASLA = <str> FULL_STOP = <str> BYTE_ORDER_MARK = <str> FATHATAN = <str> DAMMATAN = <str> KASRATAN = <str> FATHA = <str> DAMMA = <str> KASRA = <str> SHADDA = <str> SUKUN = <str> SMALL_ALEF = <str> SMALL_WAW = <str> SMALL_YEH = <str> LAM_ALEF = <str> LAM_ALEF_HAMZA_ABOVE = <str> LAM_ALEF_HAMZA_BELOW = <str> LAM_ALEF_MADDA_ABOVE = <str> SIMPLE_LAM_ALEF = <str> SIMPLE_LAM_ALEF_HAMZA_ABOVE = <str> SIMPLE_LAM_ALEF_HAMZA_BELOW = <str> SIMPLE_LAM_ALEF_MADDA_ABOVE = <str> LETTERS = ( ALEF , BEH , TEH , TEH_MARBUTA , THEH , JEEM , HAH , KHAH , DAL , THAL , REH , ZAIN , SEEN , SHEEN , SAD , DAD , TAH , ZAH , AIN , GHAIN , FEH , QAF , KAF , LAM , MEEM , NOON , HEH , WAW , YEH , HAMZA , ALEF_MADDA , ALEF_HAMZA_ABOVE , WAW_HAMZA , ALEF_HAMZA_BELOW , YEH_HAMZA , ) TASHKEEL = ( FATHATAN , DAMMATAN , KASRATAN , FATHA , DAMMA , KASRA , SUKUN , SHADDA ) HARAKAT = ( FATHATAN , DAMMATAN , KASRATAN , FATHA , DAMMA , KASRA , SUKUN ) SHORTHARAKAT = ( FATHA , DAMMA , KASRA , SUKUN ) TANWIN = ( FATHATAN , DAMMATAN , KASRATAN ) NOT_DEF_HARAKA = TATWEEL LIGUATURES = ( LAM_ALEF , LAM_ALEF_HAMZA_ABOVE , LAM_ALEF_HAMZA_BELOW , LAM_ALEF_MADDA_ABOVE , ) HAMZAT = ( HAMZA , WAW_HAMZA , YEH_HAMZA , HAMZA_ABOVE , HAMZA_BELOW , ALEF_HAMZA_BELOW , ALEF_HAMZA_ABOVE , ) ALEFAT = ( ALEF , ALEF_MADDA , ALEF_HAMZA_ABOVE , ALEF_HAMZA_BELOW , ALEF_WASLA , ALEF_MAKSURA , SMALL_ALEF , ) WEAK = ( ALEF , WAW , YEH , ALEF_MAKSURA ) YEHLIKE = ( YEH , YEH_HAMZA , ALEF_MAKSURA , SMALL_YEH ) WAWLIKE = ( WAW , WAW_HAMZA , SMALL_WAW ) TEHLIKE = ( TEH , TEH_MARBUTA ) SMALL = ( SMALL_ALEF , SMALL_WAW , SMALL_YEH ) MOON = ( HAMZA , ALEF_MADDA , ALEF_HAMZA_ABOVE , ALEF_HAMZA_BELOW , ALEF , BEH , JEEM , HAH , KHAH , AIN , GHAIN , FEH , QAF , KAF , MEEM , HEH , WAW , YEH ) SUN = ( TEH , THEH , DAL , THAL , REH , ZAIN , SEEN , SHEEN , SAD , DAD , TAH , ZAH , LAM , NOON , ) ALPHABETIC_ORDER = { ALEF : 1 , BEH : 2 , TEH : 3 , TEH_MARBUTA : 3 , THEH : 4 , JEEM : 5 , HAH : 6 , KHAH : 7 , DAL : 8 , THAL : 9 , REH : 10 , ZAIN : 11 , SEEN : 12 , SHEEN : 13 , SAD : 14 , DAD : 15 , TAH : 16 , ZAH : 17 , AIN : 18 , GHAIN : 19 , FEH : 20 , QAF : 21 , KAF : 22 , LAM : 23 , MEEM : 24 , NOON : 25 , HEH : 26 , WAW : 27 , YEH : 28 , HAMZA : 29 , ALEF_MADDA : 29 , ALEF_HAMZA_ABOVE : 29 , WAW_HAMZA : 29 , ALEF_HAMZA_BELOW : 29 , YEH_HAMZA : 29 , } NAMES = { ALEF : <str> , BEH : <str> , TEH : <str> , TEH_MARBUTA : <str> , THEH : <str> , JEEM : <str> , HAH : <str> , KHAH : <str> , DAL : <str> , THAL : <str> , REH : <str> , ZAIN : <str> , SEEN : <str> , SHEEN : <str> , SAD : <str> , DAD : <str> , TAH : <str> , ZAH : <str> , AIN : <str> , GHAIN : <str> , FEH : <str> , QAF : <str> , KAF : <str> , LAM : <str> , MEEM : <str> , NOON : <str> , HEH : <str> , WAW : <str> , YEH : <str> , HAMZA : <str> , TATWEEL : <str> , ALEF_MADDA : <str> , ALEF_MAKSURA : <str> , ALEF_HAMZA_ABOVE : <str> , WAW_HAMZA : <str> , ALEF_HAMZA_BELOW : <str> , YEH_HAMZA : <str> , FATHATAN : <str> , DAMMATAN : <str> , KASRATAN : <str> , FATHA : <str> , DAMMA : <str> , KASRA : <str> , SHADDA : <str> , SUKUN : <str> , } HARAKAT_PATTERN = re . compile ( <str> + <str> . join ( HARAKAT ) + <str> , re . UNICODE ) LASTHARAKA_PATTERN = re . compile ( <str> % ( <str> . join ( HARAKAT ) , <str> . join ( TANWIN ) ) , re . UNICODE ) SHORTHARAKAT_PATTERN = re . compile ( <str> + <str> . join ( SHORTHARAKAT ) + <str> , re . UNICODE ) TASHKEEL_PATTERN = re . compile ( <str> + <str> . join ( TASHKEEL ) + <str> , re . UNICODE ) HAMZAT_PATTERN = re . compile ( <str> + <str> . join ( HAMZAT ) + <str> , re . UNICODE ) ALEFAT_PATTERN = re . compile ( <str> + <str> . join ( ALEFAT ) + <str> , re . UNICODE ) LIGUATURES_PATTERN = re . compile ( <str> + <str> . join ( LIGUATURES ) + <str> , re . UNICODE ) TOKEN_PATTERN = re . compile ( <str> % <str> . join ( TASHKEEL ) , re . UNICODE ) TOKEN_REPLACE = re . compile ( <str> ) def is_sukun ( archar ) :      return archar == SUKUN  def is_shadda ( archar ) :      return archar == SHADDA  def is_tatweel ( archar ) :      return archar == TATWEEL  def is_tanwin ( archar ) :      return archar in TANWIN  def is_tashkeel ( archar ) :      return archar in TASHKEEL  def is_haraka ( archar ) :      return archar in HARAKAT  def is_shortharaka ( archar ) :      return archar in SHORTHARAKAT  def is_ligature ( archar ) :      return archar in LIGUATURES  def is_hamza ( archar ) :      return archar in HAMZAT  def is_alef ( archar ) :      return archar in ALEFAT  def is_yehlike ( archar ) :      return archar in YEHLIKE  def is_wawlike ( archar ) :      return archar in WAWLIKE  def is_teh ( archar ) :      return archar in TEHLIKE  def is_small ( archar ) :      return archar in SMALL  def is_weak ( archar ) :      return archar in WEAK  def is_moon ( archar ) :      return archar in MOON  def is_sun ( archar ) :      return archar in SUN  def order ( archar ) :      return ALPHABETIC_ORDER . get ( archar , 0 )  def name ( archar ) :      return NAMES . get ( archar , <str> )  def arabicrange ( ) :      <str> mylist = [ ] for i in range ( 0x0600 , 0x00653 ) :          try :              mylist . append ( unichr ( i ) )  except NameError :              mylist . append ( chr ( i ) )  except ValueError :              pass   return mylist  def has_shadda ( word ) :      if re . search ( SHADDA , word ) :          return True  return False  def is_vocalized ( word ) :      if word . isalpha ( ) :          return False  for char in word :          if is_tashkeel ( char ) :              return True   else :          return False   def is_vocalizedtext ( text ) :      if re . search ( HARAKAT_PATTERN , text ) :          return True  else :          return False   def is_arabicstring ( text ) :      if re . search ( <str> % ( LAM_ALEF , LAM_ALEF_HAMZA_ABOVE , LAM_ALEF_MADDA_ABOVE ) , text ) :          return False  return True  def is_arabicrange ( text ) :      if re . search ( <str> , text ) :          return False  return True  def is_arabicword ( word ) :      if len ( word ) == 0 :          return False  elif re . search ( <str> % ( LAM_ALEF , LAM_ALEF_HAMZA_ABOVE , LAM_ALEF_MADDA_ABOVE ) , word ) :          return False  elif is_haraka ( word [ 0 ] ) or word [ 0 ] in ( WAW_HAMZA , YEH_HAMZA ) :          return False  elif re . match ( <str> % ALEF_MAKSURA , word ) :          return False  elif re . match ( <str> % ( TEH_MARBUTA , DAMMA , KASRA , FATHA ) , word ) :          return False  else :          return True   def first_char ( word ) :      return word [ 0 ]  def second_char ( word ) :      return word [ 1 : 2 ]  def last_char ( word ) :      return word [ - 1 : ]  def secondlast_char ( word ) :      return word [ - 2 : - 1 ]  def strip_harakat ( text ) :      if not text :          return text  elif is_vocalized ( text ) :          for char in HARAKAT :              text = text . replace ( char , <str> )   return text  def strip_lastharaka ( text ) :      if text :          if is_vocalized ( text ) :              return re . sub ( LASTHARAKA_PATTERN , <str> , text )   return text  def strip_tashkeel ( text ) :      if not text :          return text  elif is_vocalized ( text ) :          for char in TASHKEEL :              text = text . replace ( char , <str> )   return text  def strip_tatweel ( text ) :      return text . replace ( TATWEEL , <str> )  def strip_shadda ( text ) :      return text . replace ( SHADDA , <str> )  def normalize_ligature ( text ) :      if text :          return LIGUATURES_PATTERN . sub ( <str> % ( LAM , ALEF ) , text )  return text  def normalize_hamza ( word ) :      if word . startswith ( ALEF_MADDA ) :          if len ( word ) >= 3 and ( word [ 1 ] not in HARAKAT ) and ( word [ 2 ] == SHADDA or len ( word ) == 3 ) :              word = HAMZA + ALEF + word [ 1 : ]  else :              word = HAMZA + HAMZA + word [ 1 : ]   word = word . replace ( ALEF_MADDA , HAMZA + HAMZA ) word = HAMZAT_PATTERN . sub ( HAMZA , word ) return word  def separate ( word , extract_shadda = False ) :      stack1 = stack . Stack ( word ) stack1 . items . reverse ( ) letters = stack . Stack ( ) marks = stack . Stack ( ) vowels = HARAKAT last1 = stack1 . pop ( ) while last1 in vowels :          last1 = stack1 . pop ( )  while last1 != None :          if last1 in vowels :              marks . pop ( ) marks . push ( last1 )  elif last1 == SHADDA :              marks . pop ( ) marks . push ( SUKUN ) marks . push ( NOT_DEF_HARAKA ) letters . push ( SHADDA )  else :              marks . push ( NOT_DEF_HARAKA ) letters . push ( last1 )  last1 = stack1 . pop ( )  if extract_shadda :          wordletters = <str> . join ( letters . items ) shaddaplaces = re . sub ( <str> % SHADDA , TATWEEL , wordletters ) shaddaplaces = re . sub ( <str> % ( TATWEEL , SHADDA ) , SHADDA , shaddaplaces ) wordletters = strip_shadda ( wordletters ) return ( wordletters , <str> . join ( marks . items ) , shaddaplaces )  else :          return ( <str> . join ( letters . items ) , <str> . join ( marks . items ) )   def joint ( letters , marks ) :      if len ( letters ) != len ( marks ) :          return <str>  stack_letter = stack . Stack ( letters ) stack_letter . items . reverse ( ) stack_mark = stack . Stack ( marks ) stack_mark . items . reverse ( ) word_stack = stack . Stack ( ) last_letter = stack_letter . pop ( ) last_mark = stack_mark . pop ( ) vowels = HARAKAT while last_letter != None and last_mark != None :          if last_letter == SHADDA :              top = word_stack . pop ( ) if top not in vowels :                  word_stack . push ( top )  word_stack . push ( last_letter ) if last_mark != NOT_DEF_HARAKA :                  word_stack . push ( last_mark )   else :              word_stack . push ( last_letter ) if last_mark != NOT_DEF_HARAKA :                  word_stack . push ( last_mark )   last_letter = stack_letter . pop ( ) last_mark = stack_mark . pop ( )  if not ( stack_letter . is_empty ( ) and stack_mark . is_empty ( ) ) :          return False  else :          return <str> . join ( word_stack . items )   def vocalizedlike ( word1 , word2 ) :      if vocalized_similarity ( word1 , word2 ) < 0 :          return False  else :          return True   def waznlike ( word1 , wazn ) :      stack1 = stack . Stack ( word1 ) stack2 = stack . Stack ( wazn ) root = stack . Stack ( ) last1 = stack1 . pop ( ) last2 = stack2 . pop ( ) vowels = HARAKAT while last1 != None and last2 != None :          if last1 == last2 and last2 not in ( FEH , AIN , LAM ) :              last1 = stack1 . pop ( ) last2 = stack2 . pop ( )  elif last1 not in vowels and last2 in ( FEH , AIN , LAM ) :              root . push ( last1 ) last1 = stack1 . pop ( ) last2 = stack2 . pop ( )  elif last1 in vowels and last2 not in vowels :              last1 = stack1 . pop ( )  elif last1 not in vowels and last2 in vowels :              last2 = stack2 . pop ( )  else :              break   root . items . reverse ( ) if not ( stack1 . is_empty ( ) and stack2 . is_empty ( ) ) :          return False  else :          return True   def shaddalike ( partial , fully ) :      if not has_shadda ( partial ) :          return True  elif not has_shadda ( fully ) and has_shadda ( partial ) :          return False  partial = strip_harakat ( partial ) fully = strip_harakat ( fully ) pstack = stack . Stack ( partial ) vstack = stack . Stack ( fully ) plast = pstack . pop ( ) vlast = vstack . pop ( ) while plast != None and vlast != None :          if plast == vlast :              plast = pstack . pop ( ) vlast = vstack . pop ( )  elif plast == SHADDA and vlast != SHADDA :              break  elif plast != SHADDA and vlast == SHADDA :              vlast = vstack . pop ( )  else :              break   if not ( pstack . is_empty ( ) and vstack . is_empty ( ) ) :          return False  else :          return True   def reduce_tashkeel ( text ) :      patterns = [ <str> % ( WAW , YEH , SUKUN , FATHA ) , <str> % ( DAMMA , WAW ) , <str> % ( KASRA , YEH ) , <str> % ( FATHA , ALEF ) , <str> % ( WAW , YEH , FATHA ) , <str> % ( ALEF_HAMZA_BELOW , KASRA ) , ] reduced = text for pat in patterns :          reduced = re . sub ( pat , <str> , reduced )  return reduced  def vocalized_similarity ( word1 , word2 ) :      stack1 = stack . Stack ( word1 ) stack2 = stack . Stack ( word2 ) last1 = stack1 . pop ( ) last2 = stack2 . pop ( ) err_count = 0 vowels = HARAKAT while last1 != None and last2 != None :          if last1 == last2 :              last1 = stack1 . pop ( ) last2 = stack2 . pop ( )  elif last1 in vowels and last2 not in vowels :              last1 = stack1 . pop ( )  elif last1 not in vowels and last2 in vowels :              last2 = stack2 . pop ( )  else :              if last1 == SHADDA :                  last1 = stack1 . pop ( )  elif last2 == SHADDA :                  last2 = stack2 . pop ( )  else :                  last1 = stack1 . pop ( ) last2 = stack2 . pop ( ) err_count += 1    if err_count > 0 :          return - err_count  else :          return True   def tokenize ( text = <str> ) :      if text == <str> :          return [ ]  else :          mylist = TOKEN_PATTERN . split ( text ) mylist = [ TOKEN_REPLACE . sub ( <str> , x ) for x in mylist if x ] mylist = [ x for x in mylist if x ] return mylist   if __name__ == <str> :      print ( <str> , vocalizedlike ( <str> , <str> ) ) print ( <str> , vocalized_similarity ( <str> , <str> ) ) print ( <str> , vocalizedlike ( <str> , <str> ) ) print ( <str> , vocalized_similarity ( <str> , <str> ) ) print ( <str> , vocalizedlike ( <str> , <str> ) ) print ( <str> , vocalized_similarity ( <str> , <str> ) ) print ( <str> , vocalized_similarity ( <str> , <str> ) )   