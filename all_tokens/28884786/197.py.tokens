__author__ = [ <str> ] __license__ = <str> from cltk . corpus . utils . formatter import assemble_tlg_author_filepaths from cltk . corpus . utils . formatter import assemble_phi5_author_filepaths from cltk . corpus . utils . formatter import tlg_plaintext_cleanup from cltk . corpus . utils . formatter import phi5_plaintext_cleanup from cltk . utils . cltk_logger import logger from collections import Counter from nltk . tokenize . punkt import PunktLanguageVars class Frequency :      def __init__ ( self ) :          self . punkt = PunktLanguageVars ( ) self . punctuation = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ]  def counter_from_str ( self , string ) :          string_list = [ chars for chars in string if chars not in self . punctuation ] string_joined = <str> . join ( string_list ) tokens = self . punkt . word_tokenize ( string_joined ) return Counter ( tokens )  def counter_from_corpus ( self , corpus ) :          assert corpus in [ <str> , <str> ] , <str> . format ( corpus ) all_strings = self . _assemble_corpus_string ( corpus = corpus ) return self . counter_from_str ( all_strings )  def _assemble_corpus_string ( self , corpus ) :          if corpus == <str> :              filepaths = assemble_phi5_author_filepaths ( ) file_cleaner = phi5_plaintext_cleanup  elif corpus == <str> :              filepaths = assemble_tlg_author_filepaths ( ) file_cleaner = tlg_plaintext_cleanup  for filepath in filepaths :              with open ( filepath ) as file_open :                  file_read = file_open . read ( ) . lower ( )  file_clean = file_cleaner ( file_read ) yield file_clean     