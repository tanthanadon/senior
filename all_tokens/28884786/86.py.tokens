__author__ = [ <str> ] __license__ = <str> class Verse :      def __init__ ( self , original , scansion = <str> , meter = None , valid = False , syllable_count = 0 , accented = <str> , scansion_notes = None , syllables = None ) :          if scansion_notes is None :              scansion_notes = [ ]  if syllables is None :              syllables = [ ]  self . original = original self . scansion = scansion self . meter = meter self . valid = valid self . syllable_count = syllable_count self . accented = accented self . scansion_notes = scansion_notes self . syllables = syllables self . working_line = <str>  def __repr__ ( self ) -> str :          class_name = type ( self ) . __name__ return <str> <str> . format ( class_name , self . original , self . scansion , self . meter , self . valid , self . syllable_count , self . accented , self . scansion_notes , self . syllables )  def __iter__ ( self ) :          return ( i for i in ( self . original , self . scansion , self . meter , self . valid , self . syllable_count , self . accented , <str> . join ( self . scansion_notes ) , <str> . join ( self . syllables ) ) )  def __hash__ ( self ) :          base = hash ( self . original ) ^ hash ( self . scansion ) ^ hash ( self . meter ) ^ hash ( self . valid ) ^ hash ( self . syllable_count ) ^ hash ( self . accented ) for note in self . scansion_notes :              base = base ^ hash ( note )  for syl in self . syllables :              base = base ^ hash ( syl )  return base  def __eq__ ( self , other ) :          return tuple ( self ) == tuple ( other )  def __bool__ ( self ) :          return self . valid    