import unittest import unicodedata from cltk . corpus . middle_high_german . alphabet import normalize_middle_high_german from cltk . stem . middle_high_german . stem import stemmer_middle_high_german as middle_high_german_stemmer from cltk . stop . middle_high_german . stops import STOPS_LIST as MIDDLE_HIGH_GERMAN_STOPS from cltk . phonology . middle_high_german import transcription as mhg from cltk . phonology . syllabify import Syllabifier from cltk . tokenize . word import WordTokenizer __author__ = [ <str> ] __license__ = <str> class TestMiddleHighGerman ( unittest . TestCase ) :      def test_middle_high_german_tokenize ( self ) :          word_tokenizer = WordTokenizer ( <str> ) text = <str> tokenized = word_tokenizer . tokenize ( text ) target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( tokenized , target )  def test_middle_high_german_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) tokenizer = WordTokenizer ( <str> ) tokens = tokenizer . tokenize ( lowered ) no_stops = [ w for w in tokens if w not in MIDDLE_HIGH_GERMAN_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_middle_high_german_transcriber ( self ) :          inputs = <str> transcriber = mhg . Transcriber ( ) . transcribe transcription = [ unicodedata . normalize ( <str> , x ) for x in transcriber ( inputs ) ] target = [ unicodedata . normalize ( <str> , x ) for x in <str> ] self . assertEqual ( target , transcription )  def test_middle_high_german_ascii_encoding ( self ) :          s1 = mhg . Word ( <str> ) . ASCII_encoding ( ) s2 = mhg . Word ( <str> ) . ASCII_encoding ( ) target = [ <str> , <str> ] self . assertEqual ( [ s1 , s2 ] , target )  def test_middle_high_german_normalizer ( self ) :          normalized = normalize_middle_high_german ( <str> ) target = <str> self . assertEqual ( normalized , target )  def test_middle_high_german_normalizer_spelling ( self ) :          normalized = normalize_middle_high_german ( <str> , alpha_conv = True ) target = <str> self . assertEqual ( normalized , target )  def test_middle_high_german_normalizer ( self ) :          normalized = normalize_middle_high_german ( <str> , punct = True ) target = <str> self . assertEqual ( normalized , target )  def test_middle_high_german_stemmer ( self ) :          stemmed = middle_high_german_stemmer ( <str> ) target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( stemmed , target )  def test_middle_high_german_stemmer_strip_umlaut ( self ) :          stemmed = middle_high_german_stemmer ( <str> , rem_umlauts = False ) target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( stemmed , target )  def test_middle_high_german_stemmer_dictionary ( self ) :          exception_dic = { <str> : <str> } stemmed = middle_high_german_stemmer ( <str> , rem_umlauts = False , exceptions = exception_dic ) target = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( stemmed , target )  def test_middle_high_german_syllabification ( self ) :          mhg_syllabifier = Syllabifier ( language = <str> ) syllabified = mhg_syllabifier . syllabify ( <str> ) target = [ <str> , <str> , <str> , <str> ] self . assertEqual ( syllabified , target )   if __name__ == <str> :      unittest . main ( )   