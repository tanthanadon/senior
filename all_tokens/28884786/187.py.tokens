__license__ = <str> from cltk . corpus . utils . importer import CorpusImporter from cltk . stop . stop import Stoplist , BaseCorpusStoplist from cltk . stop . greek . stops import STOPS_LIST as GREEK_STOPS from cltk . stop . latin import STOPS_LIST as LATIN_STOPS from cltk . stop . french . stops import STOPS_LIST as FRENCH_STOPS from cltk . stop . middle_high_german . stops import STOPS_LIST as MHG_STOPS from cltk . stop . classical_hindi . stops import STOPS_LIST as HINDI_STOPS from cltk . stop . arabic . stopword_filter import stopwords_filter as arabic_stop_filter from cltk . stop . old_norse . stops import STOPS_LIST as OLD_NORSE_STOPS from cltk . stop . classical_chinese import CorpusStoplist as ClassicalChineseCorpusStoplist from cltk . stop . latin import CorpusStoplist as LatinCorpusStoplist from cltk . stop . akkadian . stops import STOP_LIST as AKKADIAN_STOPS from cltk . tokenize . sentence import TokenizeSentence from nltk . tokenize . punkt import PunktLanguageVars from cltk . tokenize . word import WordTokenizer import os import sys import unittest class TestSequenceFunctions ( unittest . TestCase ) :      def setUp ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists )  def test_greek_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in GREEK_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_latin_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in LATIN_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_arabic_stopwords ( self ) :          sentence = <str> no_stops = arabic_stop_filter ( sentence ) target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_french_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in FRENCH_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_old_norse_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in OLD_NORSE_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_akkadian_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) punkt = PunktLanguageVars ( ) tokens = punkt . word_tokenize ( lowered ) no_stops = [ w for w in tokens if w not in AKKADIAN_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )   class TestStop_General ( unittest . TestCase ) :      @ classmethod def setUpClass ( self ) :          self . test_1 = self . test_2 = self . test_corpus = [ self . test_1 , self . test_2 ]  def test_corpus_stop_list_freq ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_freq_inc_values ( self ) :          target_list = [ ( <str> , 8 ) , ( <str> , 5 ) , ( <str> , 6 ) , ( <str> , 8 ) , ( <str> , 15 ) , ( <str> , 18 ) , ( <str> , 6 ) , ( <str> , 5 ) , ( <str> , 7 ) , ( <str> , 9 ) ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = True ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_tfidf ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_freq_exclude ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False , exclude = [ <str> ] ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_freq_include ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , include = [ <str> ] ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_freq_sort_words ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False , sort_words = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_mean ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_variance ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_variance ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_entropy ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )  def test_corpus_stop_list_zou ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )   class TestStop_LanguageSpecific ( unittest . TestCase ) :      @ classmethod def setUpClass ( self ) :          self . test_1 = self . test_2 = self . latin_test_corpus = [ self . test_1 , self . test_2 ]  def test_corpus_latin ( self ) :          target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] S = LatinCorpusStoplist ( ) stoplist = S . build_stoplist ( self . latin_test_corpus , size = 10 , basis = <str> , inc_values = False ) self . assertEqual ( stoplist , target_list )   class TestPackageImports ( unittest . TestCase ) :      @ classmethod def setUpClass ( self ) :          self . S = Stoplist ( ) self . S . numpy_installed = False self . S . sklearn_installed = False  def test_numpy_installed ( self ) :          self . assertFalse ( self . S . numpy_installed )  def test_sklearn_installed ( self ) :          self . assertFalse ( self . S . sklearn_installed )  def test_middle_high_german_stopwords ( self ) :          sentence = <str> lowered = sentence . lower ( ) tokenizer = WordTokenizer ( <str> ) tokens = tokenizer . tokenize ( lowered ) no_stops = [ w for w in tokens if w not in MHG_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )  def test_classical_hindi_stops ( self ) :          sentence = <str> tokens = sentence . split ( ) no_stops = [ word for word in tokens if word not in HINDI_STOPS ] target_list = [ <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( no_stops , target_list )   if __name__ == <str> :      unittest . main ( )   