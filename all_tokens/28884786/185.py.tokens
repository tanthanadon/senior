from collections import Counter from collections import defaultdict from importlib import reload import os from pickle import UnpicklingError import unittest from cltk . corpus . utils . importer import CorpusImporter from cltk . utils . cltk_logger import logger from cltk . utils . contributors import find_write_contribs from cltk . utils . contributors import write_contribs from cltk . utils . contributors import scantree from cltk . utils . contributors import get_authors from cltk . utils . file_operations import make_cltk_path from cltk . utils . file_operations import open_pickle from cltk . utils . frequency import Frequency from cltk . utils import philology __license__ = <str> class TestSequenceFunctions ( unittest . TestCase ) :      def setUp ( self ) :          corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists ) corpus_importer = CorpusImporter ( <str> ) corpus_importer . import_corpus ( <str> ) file_rel = os . path . join ( get_cltk_data_dir ( ) + <str> ) file = os . path . expanduser ( file_rel ) file_exists = os . path . isfile ( file ) self . assertTrue ( file_exists )  def test_open_pickle_fail_missing ( self ) :          bad_file = <str> with self . assertRaises ( FileNotFoundError ) :              open_pickle ( bad_file )   def test_open_pickle_fail_corrupt ( self ) :          bad_file = <str> with self . assertRaises ( UnpicklingError ) :              open_pickle ( bad_file )   def test_logger ( self ) :          home_dir = get_cltk_data_dir ( ) log_path = os . path . join ( home_dir , <str> ) self . assertTrue ( log_path )  def test_open_pickle ( self ) :          pickle_path_rel = get_cltk_data_dir ( ) + <str> pickle_path = os . path . expanduser ( pickle_path_rel ) a_pickle = open_pickle ( pickle_path ) self . assertTrue ( a_pickle )  def test_make_frequencies ( self ) :          frequencies = Frequency ( ) text = <str> . lower ( ) count = frequencies . counter_from_str ( text ) target = Counter ( { <str> : 4 , <str> : 3 , <str> : 2 , <str> : 1 , <str> : 1 , <str> : 1 , <str> : 1 } ) self . assertEqual ( count , target )  def test_make_list_from_corpus_assert ( self ) :          frequencies = Frequency ( ) with self . assertRaises ( AssertionError ) :              frequencies . counter_from_corpus ( <str> )   def test_concordance_from_string ( self ) :          text = <str> philology . write_concordance_from_string ( text , <str> ) file = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) is_file = os . path . isfile ( file ) self . assertTrue ( is_file )  def test_concordance_from_file ( self ) :          text_file = <str> philology . write_concordance_from_file ( text_file , <str> ) file_conc = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) is_file = os . path . isfile ( file_conc ) self . assertTrue ( is_file )  def test_concordance_from_file_ioerror ( self ) :          non_existent_file = <str> with self . assertRaises ( IOError ) :              philology . write_concordance_from_file ( non_existent_file , <str> )   def test_contribs_find_write_contribs ( self ) :          file_contribs = <str> try :              os . remove ( file_contribs )  except FileNotFoundError :              logger . info ( <str> , file_contribs )  find_write_contribs ( ) contribs_file = os . path . isfile ( file_contribs ) self . assertTrue ( contribs_file )  def test_get_authors ( self ) :          auths = get_authors ( <str> ) self . assertEqual ( type ( auths ) , list )  def test_scantree ( self ) :          a_generator = scantree ( <str> ) self . assertEqual ( str ( type ( a_generator ) ) , <str> )  def test_write_contribs ( self ) :          file = <str> try :              os . remove ( file )  except FileNotFoundError :              logger . info ( <str> , file )  def_dict = defaultdict ( list ) def_dict [ <str> ] . append ( <str> ) def_dict [ <str> ] . append ( <str> ) write_contribs ( def_dict ) contribs_file = os . path . isfile ( file ) self . assertTrue ( contribs_file )   class TestPathCreation ( unittest . TestCase ) :      def test_empty_path ( self ) :          self . assertEqual ( make_cltk_path ( ) , get_cltk_data_dir ( ) )  def test_path ( self ) :          self . assertEqual ( make_cltk_path ( <str> , <str> ) , os . path . expanduser ( os . path . join ( get_cltk_data_dir ( ) , <str> , <str> ) ) )  def test_data_envvar ( self ) :          os . environ [ <str> ] = <str> with self . assertRaises ( FileNotFoundError ) :              import cltk reload ( cltk )  os . environ [ <str> ] = <str> with self . assertRaises ( PermissionError ) :              import cltk reload ( cltk )  del os . environ [ <str> ] import cltk reload ( cltk )   if __name__ == <str> :      unittest . main ( )   