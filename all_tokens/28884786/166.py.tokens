__author__ = [ <str> , <str> ] __license__ = <str> from cltk . phonology . akkadian . stress import StressFinder from cltk . corpus . akkadian . cdli_corpus import CDLICorpus from cltk . corpus . akkadian . pretty_print import PrettyPrint from cltk . corpus . akkadian . file_importer import FileImport from cltk . corpus . akkadian . tokenizer import Tokenizer import unittest import os TOKENIZER = Tokenizer ( preserve_damage = False ) SAMPLE_TEXT = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] class TestSequenceFunctions ( unittest . TestCase ) :      def test_lesson_1_exercise_d ( self ) :          nouns = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stresser = StressFinder ( ) stress = [ ] for noun in nouns :              stress . append ( stresser . find_stress ( noun ) )  target = [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] self . assertEqual ( stress , target )  def test_lesson_1_exercise_e ( self ) :          nouns = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stresser = StressFinder ( ) stress = [ ] for noun in nouns :              stress . append ( stresser . find_stress ( noun ) )  target = [ [ <str> , <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] self . assertEqual ( stress , target )  def test_lesson_2_exercise_b ( self ) :          nouns = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] stresser = StressFinder ( ) stress = [ ] for noun in nouns :              stress . append ( stresser . find_stress ( noun ) )  target = [ [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] self . assertEqual ( stress , target )   class TestcasesfromGSOC ( unittest . TestCase ) :      def test_read_file ( self ) :          cdli = FileImport ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) cdli . read_file ( ) final = cdli . file_lines goal = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] print ( os . getcwd ( ) ) self . assertEqual ( final , goal )  def test_file_catalog ( self ) :          cdli = FileImport ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) cdli . file_catalog ( ) final = cdli . catalog goal = [ <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( final , goal )  def test_parse_file ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . chunks goal = [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> ] ] self . assertEqual ( output , goal )  def test_call_text ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . catalog [ <str> ] [ <str> ] goal = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( output , goal )  def test_find_cdli_number ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . list_pnums ( ) goal = [ <str> , <str> ] self . assertEqual ( output , goal )  def test_find_edition ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . list_editions ( ) goal = [ <str> , <str> ] self . assertEqual ( output , goal )  def test_find_metadata ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = [ cdli . catalog [ text ] [ <str> ] for text in cdli . catalog ] goal = [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ] self . assertEqual ( output , goal )  def test_find_transliteration ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = [ cdli . catalog [ text ] [ <str> ] for text in cdli . catalog ] goal = [ [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ] self . assertEqual ( output , goal )  def test_table_of_contents ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . toc ( ) goal = [ <str> , <str> ] self . assertEqual ( output , goal )  def test_abnormalities ( self ) :          f_i = FileImport ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) f_i . read_file ( ) text_file = f_i . file_lines cdli = CDLICorpus ( ) cdli . parse_file ( text_file ) goal = { <str> : { <str> : <str> , <str> : [ ] , <str> : [ ] , <str> : <str> , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] } , <str> : { <str> : <str> , <str> : [ ] , <str> : [ ] , <str> : <str> , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> ] , <str> : [ ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> <str> , <str> <str> ] } } self . assertEqual ( cdli . catalog , goal )  def test_print_catalog ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) output = cdli . print_catalog ( catalog_filter = [ <str> ] ) goal = print ( output ) self . assertEqual ( output , goal )  def test_string_tokenizer ( self ) :          text = <str> <str> <str> <str> <str> <str> output = TOKENIZER . string_tokenizer ( text , include_blanks = False ) goal = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( output , goal )  def test_line_tokenizer ( self ) :          output = TOKENIZER . line_tokenizer ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) goal = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] self . assertEqual ( output [ 30 : 40 ] , goal )  def test_markdown_single_text ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) p_p = PrettyPrint ( ) p_p . markdown_single_text ( cdli . catalog , <str> ) output = p_p . markdown_text goal = self . assertEqual ( output , goal )  def test_html_print_file ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) p_p = PrettyPrint ( ) p_p . html_print_file ( cdli . catalog , os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) f_o = FileImport ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) f_o . read_file ( ) output = f_o . raw_file goal = self . assertEqual ( output , goal )  def test_html_print_single_text ( self ) :          cdli = CDLICorpus ( ) cdli . parse_file ( SAMPLE_TEXT ) p_p = PrettyPrint ( ) p_p . html_print_single_text ( cdli . catalog , <str> , os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) f_o = FileImport ( os . path . join ( os . path . dirname ( __file__ ) , <str> ) ) f_o . read_file ( ) output = f_o . raw_file goal = self . assertEqual ( output , goal )   if __name__ == <str> :      unittest . main ( )   