from cltk . corpus . akkadian . corpora import AKKADIAN_CORPORA from cltk . corpus . arabic . corpora import ARABIC_CORPORA from cltk . corpus . chinese . corpora import CHINESE_CORPORA from cltk . corpus . coptic . corpora import COPTIC_CORPORA from cltk . corpus . greek . corpora import GREEK_CORPORA from cltk . corpus . hebrew . corpora import HEBREW_CORPORA from cltk . corpus . latin . corpora import LATIN_CORPORA from cltk . corpus . sanskrit . corpora import SANSKRIT_CORPORA from cltk . corpus . multilingual . corpora import MULTILINGUAL_CORPORA from cltk . corpus . pali . corpora import PALI_CORPORA from cltk . corpus . punjabi . corpora import PUNJABI_CORPORA from cltk . corpus . tibetan . corpora import TIBETAN_CORPORA from cltk . corpus . old_english . corpora import OLD_ENGLISH_CORPORA from cltk . corpus . bengali . corpora import BENGALI_CORPORA from cltk . corpus . old_church_slavonic . corpora import OCS_CORPORA from cltk . corpus . prakrit . corpora import PRAKRIT_CORPORA from cltk . corpus . hindi . corpora import HINDI_CORPORA from cltk . corpus . javanese . corpora import JAVANESE_CORPORA from cltk . corpus . malayalam . corpora import MALAYALAM_CORPORA from cltk . corpus . old_norse . corpora import OLD_NORSE_CORPORA from cltk . corpus . telugu . corpora import TELUGU_CORPORA from cltk . corpus . classical_hindi . corpora import CLASSICAL_HINDI_CORPORA from cltk . corpus . french . corpora import FRENCH_CORPORA from cltk . corpus . marathi . corpora import MARATHI_CORPORA from cltk . corpus . gujarati . corpora import GUJARATI_CORPORA from cltk . corpus . middle_low_german . corpora import MIDDLE_LOW_GERMAN_CORPORA from cltk . utils . cltk_logger import logger import errno from git import RemoteProgress from git import Repo import os import sys import shutil from urllib . parse import urljoin import yaml __author__ = [ <str> , <str> ] __license__ = <str> AVAILABLE_LANGUAGES = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] CLTK_DATA_DIR = get_cltk_data_dir ( ) LANGUAGE_CORPORA = { <str> : AKKADIAN_CORPORA , <str> : ARABIC_CORPORA , <str> : CHINESE_CORPORA , <str> : COPTIC_CORPORA , <str> : GREEK_CORPORA , <str> : HEBREW_CORPORA , <str> : LATIN_CORPORA , <str> : MULTILINGUAL_CORPORA , <str> : PALI_CORPORA , <str> : PUNJABI_CORPORA , <str> : TIBETAN_CORPORA , <str> : SANSKRIT_CORPORA , <str> : OLD_ENGLISH_CORPORA , <str> : BENGALI_CORPORA , <str> : OCS_CORPORA , <str> : PRAKRIT_CORPORA , <str> : HINDI_CORPORA , <str> : MALAYALAM_CORPORA , <str> : MARATHI_CORPORA , <str> : JAVANESE_CORPORA , <str> : OLD_NORSE_CORPORA , <str> : TELUGU_CORPORA , <str> : CLASSICAL_HINDI_CORPORA , <str> : FRENCH_CORPORA , <str> : GUJARATI_CORPORA , <str> : MIDDLE_LOW_GERMAN_CORPORA } class CorpusImportError ( Exception ) :      pass  class ProgressPrinter ( RemoteProgress ) :      def update ( self , op_code , cur_count , max_count = None , message = <str> ) :          if message :              percentage = <str> % ( 100 * cur_count / ( max_count or 100.0 ) ) sys . stdout . write ( <str> % ( percentage , message ) )    class CorpusImporter :      def __init__ ( self , language , testing = False ) :          self . language = language . lower ( ) assert isinstance ( testing , bool ) , <str> self . testing = testing self . user_defined_corpora = self . _setup_language_variables ( ) if self . user_defined_corpora :              logger . info ( <str> . format ( self . language ) ) try :                  logger . debug ( <str> . format ( self . language ) ) logger . debug ( <str> ) self . official_corpora = LANGUAGE_CORPORA [ self . language ] self . all_corpora = self . official_corpora for corpus in self . user_defined_corpora :                      self . all_corpora . append ( corpus )   except KeyError :                  logger . debug ( <str> <str> <str> . format ( self . language ) ) self . all_corpora = [ ] for corpus in self . user_defined_corpora :                      self . all_corpora . append ( corpus )    else :              logger . info ( <str> . format ( self . language ) ) self . all_corpora = LANGUAGE_CORPORA [ self . language ]   def __repr__ ( self ) :          return <str> . format ( self . language )  def _check_distributed_corpora_file ( self ) :          if self . testing :              distributed_corpora_fp = os . path . normpath ( get_cltk_data_dir ( ) + <str> )  else :              distributed_corpora_fp = os . path . normpath ( get_cltk_data_dir ( ) + <str> )  try :              with open ( distributed_corpora_fp ) as file_open :                  corpora_dict = yaml . safe_load ( file_open )   except FileNotFoundError :              logger . info ( <str> ) return [ ]  except yaml . parser . ParserError as parse_err :              logger . debug ( <str> % parse_err ) return [ ]  user_defined_corpora = [ ] for corpus_name in corpora_dict :              about = corpora_dict [ corpus_name ] if about [ <str> ] . lower ( ) == self . language :                  user_defined_corpus = dict ( ) user_defined_corpus [ <str> ] = about [ <str> ] user_defined_corpus [ <str> ] = about [ <str> ] user_defined_corpus [ <str> ] = corpus_name user_defined_corpora . append ( user_defined_corpus )   return user_defined_corpora  def _setup_language_variables ( self ) :          if self . language not in AVAILABLE_LANGUAGES :              user_defined_corpora = self . _check_distributed_corpora_file ( ) if user_defined_corpora :                  return user_defined_corpora  else :                  msg = <str> . format ( self . language ) logger . info ( msg ) raise CorpusImportError ( msg )   else :              user_defined_corpora = self . _check_distributed_corpora_file ( ) return user_defined_corpora   @ property def list_corpora ( self ) :          try :              corpora = self . all_corpora corpus_names = [ corpus [ <str> ] for corpus in corpora ] return corpus_names  except ( NameError , KeyError ) as error :              msg = <str> . format ( self . language , error ) logger . error ( msg ) raise CorpusImportError ( msg )   @ staticmethod def _copy_dir_recursive ( src_rel , dst_rel ) :          src = os . path . expanduser ( src_rel ) dst = os . path . expanduser ( dst_rel ) try :              shutil . copytree ( src , dst ) logger . info ( <str> , src , dst )  except OSError as exc :              if exc . errno == errno . ENOTDIR :                  shutil . copy ( src , dst ) logger . info ( <str> , src , dst )  else :                  raise    def _get_corpus_properties ( self , corpus_name ) :          try :              corpora = self . all_corpora  except NameError as name_error :              msg = <str> <str> % ( self . language , name_error ) logger . error ( msg ) raise CorpusImportError ( msg )  for corpus_properties in corpora :              if corpus_properties [ <str> ] == corpus_name :                  return corpus_properties   msg = <str> <str> % ( corpus_name , self . language ) logger . error ( msg ) raise CorpusImportError ( msg )  def _git_user_defined_corpus ( self , corpus_name , corpus_type , uri : str , branch = <str> ) :          type_dir_rel = os . path . join ( CLTK_DATA_DIR , self . language , corpus_type ) type_dir = os . path . expanduser ( type_dir_rel ) repo_name = uri . split ( <str> ) [ - 1 ] repo_name = repo_name . rstrip ( <str> ) target_dir = os . path . join ( type_dir , repo_name ) target_file = os . path . join ( type_dir , repo_name , <str> ) if not os . path . isfile ( target_file ) :              if not os . path . isdir ( type_dir ) :                  os . makedirs ( type_dir )  try :                  msg = <str> . format ( corpus_name , uri ) logger . info ( msg ) Repo . clone_from ( uri , target_dir , branch = branch , depth = 1 , progress = ProgressPrinter ( ) )  except CorpusImportError as corpus_imp_err :                  msg = <str> . format ( uri , corpus_imp_err ) logger . error ( msg )   else :              try :                  repo = Repo ( target_dir ) assert not repo . bare git_origin = repo . remotes . origin msg = <str> . format ( corpus_name , uri ) logger . info ( msg ) git_origin . pull ( )  except CorpusImportError as corpus_imp_err :                  msg = <str> . format ( uri , corpus_imp_err ) logger . error ( msg )    def import_corpus ( self , corpus_name , local_path = None , branch = <str> ) :          corpus_properties = self . _get_corpus_properties ( corpus_name ) try :              location = corpus_properties [ <str> ]  except KeyError :              git_name = corpus_properties [ <str> ] git_uri = corpus_properties [ <str> ] git_type = corpus_properties [ <str> ] self . _git_user_defined_corpus ( git_name , git_type , git_uri ) return  corpus_type = corpus_properties [ <str> ] if location == <str> :              git_uri = corpus_properties [ <str> ] type_dir_rel = os . path . join ( CLTK_DATA_DIR , self . language , corpus_type ) type_dir = os . path . expanduser ( type_dir_rel ) target_dir = os . path . join ( type_dir , corpus_name ) target_file = os . path . join ( type_dir , corpus_name , <str> ) if not os . path . isfile ( target_file ) :                  if not os . path . isdir ( type_dir ) :                      os . makedirs ( type_dir )  try :                      msg = <str> . format ( corpus_name , git_uri ) logger . info ( msg ) Repo . clone_from ( git_uri , target_dir , branch = branch , depth = 1 , progress = ProgressPrinter ( ) )  except CorpusImportError as corpus_imp_err :                      msg = <str> . format ( git_uri , corpus_imp_err ) logger . error ( msg )   else :                  try :                      repo = Repo ( target_dir ) assert not repo . bare git_origin = repo . remotes . origin msg = <str> . format ( corpus_name , git_uri ) logger . info ( msg ) git_origin . pull ( )  except CorpusImportError as corpus_imp_err :                      msg = <str> . format ( git_uri , corpus_imp_err ) logger . error ( msg )    elif location == <str> :              msg = <str> . format ( local_path ) logger . info ( msg ) if corpus_name in ( <str> , <str> , <str> ) :                  if corpus_name == <str> :                      if local_path . endswith ( <str> ) :                          local_path = local_path [ : - 1 ]  if os . path . split ( local_path ) [ 1 ] != <str> :                          logger . info ( <str> )   if corpus_name == <str> :                      if local_path . endswith ( <str> ) :                          local_path = local_path [ : - 1 ]  if os . path . split ( local_path ) [ 1 ] != <str> :                          logger . info ( <str> )   if corpus_name == <str> :                      if local_path . endswith ( <str> ) :                          local_path = local_path [ : - 1 ]  if os . path . split ( local_path ) [ 1 ] != <str> :                          logger . info ( <str> )   data_dir = os . path . expanduser ( CLTK_DATA_DIR ) originals_dir = os . path . join ( data_dir , <str> ) if not os . path . isdir ( originals_dir ) :                      os . makedirs ( originals_dir ) msg = <str> . format ( originals_dir ) logger . info ( msg )  tlg_originals_dir = os . path . join ( data_dir , <str> , corpus_name ) if os . path . isdir ( tlg_originals_dir ) :                      shutil . rmtree ( tlg_originals_dir ) msg = <str> . format ( tlg_originals_dir ) logger . info ( msg )  if not os . path . isdir ( tlg_originals_dir ) :                      self . _copy_dir_recursive ( local_path , tlg_originals_dir )      if __name__ == <str> :      c = CorpusImporter ( <str> ) c . import_corpus ( <str> )   