__author__ = [ <str> ] __license__ = <str> import os . path import nltk from nltk . tokenize . punkt import PunktLanguageVars from cltk . tokenize . sentence import BaseSentenceTokenizer , BasePunktSentenceTokenizer from cltk . tokenize . latin . params import LatinLanguageVars , PUNCTUATION , STRICT_PUNCTUATION from cltk . utils . file_operations import open_pickle def SentenceTokenizer ( tokenizer : str = <str> , strict : bool = False ) :      if tokenizer == <str> :          return LatinPunktSentenceTokenizer ( strict = strict )   class LatinPunktSentenceTokenizer ( BasePunktSentenceTokenizer ) :      models_path = os . path . normpath ( get_cltk_data_dir ( ) + <str> ) missing_models_message = <str> def __init__ ( self : object , language : str = <str> , strict : bool = False ) :          self . lang_vars = LatinLanguageVars ( ) self . strict = strict super ( ) . __init__ ( language = <str> , lang_vars = self . lang_vars ) self . models_path = LatinPunktSentenceTokenizer . models_path try :              self . model = open_pickle ( os . path . join ( self . models_path , <str> ) )  except FileNotFoundError as err :              raise type ( err ) ( LatinPunktSentenceTokenizer . missing_models_message )  if self . strict :              PunktLanguageVars . sent_end_chars = STRICT_PUNCTUATION  else :              PunktLanguageVars . sent_end_chars = PUNCTUATION     