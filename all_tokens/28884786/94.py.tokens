import logging from cltk . prosody . latin . scansion_constants import ScansionConstants LOG = logging . getLogger ( __name__ ) LOG . addHandler ( logging . NullHandler ( ) ) __author__ = [ <str> ] __license__ = <str> class ScansionFormatter :      def __init__ ( self , constants = ScansionConstants ( ) ) :          self . constants = constants self . stress_accent_dict = dict ( zip ( list ( self . constants . VOWELS + self . constants . ACCENTED_VOWELS ) , list ( self . constants . ACCENTED_VOWELS + self . constants . ACCENTED_VOWELS ) ) )  def hexameter ( self , line : str ) -> str :          mylist = list ( line ) items = len ( mylist ) idx_start = items - 2 idx_end = items while idx_start > 0 :              potential_foot = <str> . join ( mylist [ idx_start : idx_end ] ) if potential_foot == self . constants . HEXAMETER_ENDING or potential_foot == self . constants . SPONDEE :                  mylist . insert ( idx_start , self . constants . FOOT_SEPARATOR ) idx_start -= 1 idx_end -= 2  if potential_foot == self . constants . DACTYL :                  mylist . insert ( idx_start , <str> ) idx_start -= 1 idx_end -= 3  idx_start -= 1  return <str> . join ( mylist )  def merge_line_scansion ( self , line : str , scansion : str ) -> str :          letters = list ( line ) marks = list ( scansion ) if len ( scansion ) < len ( line ) :              marks += ( ( len ( line ) - len ( scansion ) ) * <str> ) . split ( )  for idx in range ( 0 , len ( marks ) ) :              if marks [ idx ] == self . constants . STRESSED :                  vowel = letters [ idx ] if vowel not in self . stress_accent_dict :                      LOG . error ( <str> . format ( vowel , line ) ) pass  else :                      if idx > 1 :                          if ( letters [ idx - 2 ] + letters [ idx - 1 ] ) . lower ( ) == <str> :                              new_vowel = self . stress_accent_dict [ vowel ] letters [ idx ] = new_vowel continue   if idx > 0 :                          if letters [ idx - 1 ] + vowel in self . constants . DIPTHONGS :                              continue  new_vowel = self . stress_accent_dict [ vowel ] letters [ idx ] = new_vowel  else :                          new_vowel = self . stress_accent_dict [ vowel ] letters [ idx ] = new_vowel     return <str> . join ( letters ) . rstrip ( )    