__author__ = [ <str> , <str> ] __license__ = <str> LC_TA = <str> SCRIPT_RANGES = { <str> : [ 0x0a00 , 0x0a7f ] , <str> : [ 0x0a80 , 0x0aff ] , <str> : [ 0x0b00 , 0x0b7f ] , <str> : [ 0x0b80 , 0x0bff ] , <str> : [ 0x0c00 , 0x0c7f ] , <str> : [ 0x0c80 , 0x0cff ] , <str> : [ 0x0d00 , 0x0d7f ] , <str> : [ 0x0d80 , 0x0dff ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0900 , 0x097f ] , <str> : [ 0x0980 , 0x09ff ] , <str> : [ 0x0980 , 0x09ff ] , } URDU_RANGES = [ [ 0x0600 , 0x06ff ] , [ 0x0750 , 0x077f ] , [ 0xfb50 , 0xfdff ] , [ 0xfe70 , 0xfeff ] , ] COORDINATED_RANGE_START_INCLUSIVE = 0 COORDINATED_RANGE_END_INCLUSIVE = 0x6f NUMERIC_OFFSET_START = 0x66 NUMERIC_OFFSET_END = 0x6f HALANTA_OFFSET = 0x4d AUM_OFFSET = 0x50 NUKTA_OFFSET = 0x3c RUPEE_SIGN = 0x20b9 DANDA = 0x0964 DOUBLE_DANDA = 0x0965 VELAR_RANGE = [ 0x15 , 0x19 ] PALATAL_RANGE = [ 0x1a , 0x1e ] RETROFLEX_RANGE = [ 0x1f , 0x23 ] DENTAL_RANGE = [ 0x24 , 0x29 ] LABIAL_RANGE = [ 0x2a , 0x2e ] VOICED_LIST = [ 0x17 , 0x18 , 0x1c , 0x1d , 0x21 , 0x22 , 0x26 , 0x27 , 0x2c , 0x2d ] UNVOICED_LIST = [ 0x15 , 0x16 , 0x1a , 0x1b , 0x1f , 0x20 , 0x24 , 0x25 , 0x2a , 0x2b ] ASPIRATED_LIST = [ 0x16 , 0x18 , 0x1b , 0x1d , 0x20 , 0x22 , 0x25 , 0x27 , 0x2b , 0x2d ] UNASPIRATED_LIST = [ 0x15 , 0x17 , 0x1a , 0x1c , 0x1f , 0x21 , 0x24 , 0x26 , 0x2a , 0x2c ] NASAL_LIST = [ 0x19 , 0x1e , 0x23 , 0x28 , 0x29 , 0x2d ] FRICATIVE_LIST = [ 0x36 , 0x37 , 0x38 ] APPROXIMANT_LIST = [ 0x2f , 0x30 , 0x31 , 0x32 , 0x33 , 0x34 , 0x35 ] def get_offset ( c , lang ) :      return ord ( c ) - SCRIPT_RANGES [ lang ] [ 0 ]  def offset_to_char ( c , lang ) :      return chr ( c + SCRIPT_RANGES [ lang ] [ 0 ] )  def in_coordinated_range ( c_offset ) :      return ( c_offset >= COORDINATED_RANGE_START_INCLUSIVE and c_offset <= COORDINATED_RANGE_END_INCLUSIVE )  def is_indiclang_char ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= 0 and o <= 0x7f ) or ord ( c ) == DANDA or ord ( c ) == DOUBLE_DANDA  def is_vowel ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= 0x04 and o <= 0x14 )  def is_vowel_sign ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= 0x3e and o <= 0x4c )  def is_halanta ( c , lang ) :      o = get_offset ( c , lang ) return ( o == HALANTA_OFFSET )  def is_nukta ( c , lang ) :      o = get_offset ( c , lang ) return ( o == NUKTA_OFFSET )  def is_aum ( c , lang ) :      o = get_offset ( c , lang ) return ( o == AUM_OFFSET )  def is_consonant ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= 0x15 and o <= 0x39 )  def is_velar ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= VELAR_RANGE [ 0 ] and o <= VELAR_RANGE [ 1 ] )  def is_palatal ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= PALATAL_RANGE [ 0 ] and o <= PALATAL_RANGE [ 1 ] )  def is_retroflex ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= RETROFLEX_RANGE [ 0 ] and o <= RETROFLEX_RANGE [ 1 ] )  def is_dental ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= DENTAL_RANGE [ 0 ] and o <= DENTAL_RANGE [ 1 ] )  def is_labial ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= LABIAL_RANGE [ 0 ] and o <= LABIAL_RANGE [ 1 ] )  def is_voiced ( c , lang ) :      o = get_offset ( c , lang ) return o in VOICED_LIST  def is_unvoiced ( c , lang ) :      o = get_offset ( c , lang ) return o in UNVOICED_LIST  def is_aspirated ( c , lang ) :      o = get_offset ( c , lang ) return o in ASPIRATED_LIST  def is_unaspirated ( c , lang ) :      o = get_offset ( c , lang ) return o in UNASPIRATED_LIST  def is_nasal ( c , lang ) :      o = get_offset ( c , lang ) return o in NASAL_LIST  def is_fricative ( c , lang ) :      o = get_offset ( c , lang ) return o in FRICATIVE_LIST  def is_approximant ( c , lang ) :      o = get_offset ( c , lang ) return o in APPROXIMANT_LIST  def is_number ( c , lang ) :      o = get_offset ( c , lang ) return ( o >= 0x66 and o <= 0x6f )   