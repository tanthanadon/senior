import unittest from cltk . semantics . latin . lookup import Lemmata from cltk . semantics . latin . lookup import Synonyms from cltk . stem . latin . j_v import JVReplacer from cltk . tokenize . word import WordTokenizer from cltk . corpus . utils . importer import CorpusImporter from cltk . lemmatize . french . lemma import LemmaReplacer import os __author__ = [ <str> , <str> , <str> ] __license__ = <str> class TestSequenceFunctions ( unittest . TestCase ) :      def test_latin_lemmata ( self ) :          lemmatizer = Lemmata ( dictionary = <str> , language = <str> ) test_str = <str> target = [ ( <str> , [ ( <str> , 1.0 ) ] ) , ( <str> , [ ( <str> , 1.0 ) ] ) , ( <str> , [ ( <str> , 0.25 ) , ( <str> , 0.25 ) , ( <str> , 0.25 ) , ( <str> , 0.25 ) ] ) , ( <str> , [ ( <str> , 1.0 ) ] ) ] jv_replacer = JVReplacer ( ) tokenizer = WordTokenizer ( <str> ) test_str = test_str . lower ( ) test_str = jv_replacer . replace ( test_str ) tokens = tokenizer . tokenize ( test_str ) lemmas = lemmatizer . lookup ( tokens ) self . assertEqual ( lemmas , target )  def test_latin_synonyms ( self ) :          lemmatizer = Lemmata ( dictionary = <str> , language = <str> ) test_str = <str> jv_replacer = JVReplacer ( ) tokenizer = WordTokenizer ( <str> ) test_str = test_str . lower ( ) test_str = jv_replacer . replace ( test_str ) tokens = tokenizer . tokenize ( test_str ) lemmas = lemmatizer . lookup ( tokens ) lemmas = lemmatizer . isolate ( lemmas ) synonyms = Synonyms ( dictionary = <str> , language = <str> ) syns = synonyms . lookup_synonyms ( lemmas ) target = [ ( <str> , [ ( <str> , 0.5 ) , ( <str> , 0.5 ) ] ) , ( <str> , [ ( <str> , 0.5 ) , ( <str> , 0.5 ) ] ) ] self . assertEqual ( syns , target )  def test_latin_translations ( self ) :          lemmatizer = Lemmata ( dictionary = <str> , language = <str> ) test_str = <str> jv_replacer = JVReplacer ( ) tokenizer = WordTokenizer ( <str> ) test_str = test_str . lower ( ) test_str = jv_replacer . replace ( test_str ) tokens = tokenizer . tokenize ( test_str ) lemmas = lemmatizer . lookup ( tokens ) lemmas = lemmatizer . isolate ( lemmas ) translations = Synonyms ( dictionary = <str> , language = <str> ) translations = translations . lookup_synonyms ( lemmas ) target = [ ( <str> , [ ( <str> , 1.0 ) ] ) , ( <str> , [ ( <str> , 1.0 ) ] ) ] self . assertEqual ( translations , target )   if __name__ == <str> :      unittest . main ( )   