import re import cltk . corpus . persian . alphabet as alphabet from cltk . corpus . arabic . alphabet import * to_reform = [ { <str> : [ HAMZA , HAMZA_BELOW , HAMZA_ABOVE , HAMZA_ISOLATED , MINI_ALEF , SMALL_ALEF , SMALL_WAW , SMALL_YEH , KASHEEDA , FATHATAN , DAMMATAN , KASRATAN , FATHA , DAMMA , KASRA , SHADDA , SUKUN , alphabet . THOUSANDS , alphabet . DECIMAL ] , <str> : <str> } , { <str> : [ ALEF_MADDA , ALEF_WASLA , HAMZA_BELOW_ALEF , HAMZA_ABOVE_ALEF , ] , <str> : alphabet . ALEF } , { <str> : [ ALEF_MAKSURA , YEH , ] , <str> : alphabet . YE } , { <str> : [ KAF ] , <str> : alphabet . KAF } , { <str> : [ LAM_ALEF , LAM_ALEF_HAMZA_ABOVE , LAM_ALEF_HAMZA_BELOW , LAM_ALEF_MADDA_ABOVE , ] , <str> : alphabet . LAM + alphabet . ALEF } , { <str> : [ TEH_MARBUTA ] , <str> : alphabet . HE2 } , ] replacementDict = { } for rule in toReform :      for character in rule [ <str> ] :          replacementDict [ character ] = rule [ <str> ]   for originalForm , shapedForms in SHAPED_FORMS . items ( ) :      for form in shapedForms :          replacementDict [ form ] = replacementDict . get ( originalForm , originalForm )   for i in range ( 10 ) :      replacementDict [ EASTERN_ARABIC_NUMERALS [ i ] ] = alphabet . NUMERALS [ i ] replacementDict [ WESTERN_ARABIC_NUMERALS [ i ] ] = alphabet . NUMERALS [ i ]  replacementRegex = re . compile ( <str> % <str> . join ( map ( re . escape , replacementDict . keys ( ) ) ) ) def standardize ( text ) :      return replacementRegex . sub ( lambda mo : replacementDict [ mo . string [ mo . start ( ) : mo . end ( ) ] ] , text )   