import hashlib import logging from lib . python import common_constants from lib . python import opencsw from lib . python import representations from lib . python import sharedlib_utils def ComposeFakeSrv4Md5 ( pkgname , osrel , arch ) :    key = pkgname + osrel + arch md5_sum = hashlib . md5 ( key ) . hexdigest ( ) return md5_sum  def CreateFakeElfdumpInfo ( soname ) :    return { <str> : [ ] , <str> : [ ] , <str> : [ representations . ElfSymInfo ( soname = soname , symbol = <str> , flags = <str> , shndx = <str> , bind = <str> , version = None ) ] }  class PkgstatsListComposer ( object ) :    def __init__ ( self , osrel , arch ) :      self . osrel = osrel self . arch = arch self . pkgstats_by_pkgname = { } self . elfdump_info = { }  def AddPkgname ( self , pkgname ) :      <str> logging . debug ( <str> , pkgname ) if pkgname not in self . pkgstats_by_pkgname :        self . pkgstats_by_pkgname [ pkgname ] = self . _GetTemplate ( pkgname )   def _GetTemplate ( self , pkgname ) :      version = <str> md5_sum = ComposeFakeSrv4Md5 ( pkgname , self . osrel , self . arch ) catalogname = opencsw . PkgnameToCatName ( pkgname ) rev = <str> basename = ( <str> % ( catalogname , version , rev , self . osrel , self . arch ) ) pkgchk = { <str> : 0 , <str> : [ ] , <str> : [ <str> ] } basic_stats = { <str> : catalogname , <str> : md5_sum , <str> : { <str> : self . arch , <str> : None , <str> : version + <str> + rev , <str> : self . osrel , <str> : { <str> : <str> , } , <str> : None , <str> : version , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , } , } , <str> : basename , <str> : None , <str> : pkgname , <str> : 0 , <str> : 10 L } binaries_dump_info = [ ] files_metadata = [ ] binaries_list = [ ] isalist = [ ] if self . arch in common_constants . ARCHITECTURES :        if self . arch in common_constants . PHYSICAL_ARCHITECTURES :          isalist = common_constants . ISALISTS_BY_ARCH [ self . arch ]  else :          isalist = [ <str> ]   else :        raise PackageError ( <str> , self . arch , common_constants . ARCHITECTURES )  isalist = list ( isalist ) pkginfo = { <str> : self . arch , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : catalogname , <str> : pkgname , <str> : <str> , <str> : <str> , <str> : <str> , } pkgmap = [ ] tmpl = { <str> : { } , <str> : basic_stats , <str> : binaries_list , <str> : binaries_dump_info , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : files_metadata , <str> : isalist , <str> : <str> , <str> : [ ] , <str> : pkgchk , <str> : pkginfo , <str> : pkgmap , } return tmpl  def GetPkgstats ( self ) :      return self . pkgstats_by_pkgname . values ( )  def FakeBinaryMd5 ( self , pkgname , binary_path ) :      h = hashlib . md5 ( ) h . update ( pkgname ) h . update ( binary_path ) return h . hexdigest ( )  def AddFile ( self , pkgname , pkgmap_entry , file_metadata , binary_dump_info , elfinfo ) :      if pkgname not in self . pkgstats_by_pkgname :        raise DataError ( <str> % pkgname )  pkgstats = self . pkgstats_by_pkgname [ pkgname ] pkgmap = pkgstats [ <str> ] pkgmap . append ( pkgmap_entry ) file_path = pkgmap_entry . path if pkgmap_entry . path . startswith ( <str> ) :        file_path = file_path [ 1 : ]  local_metadata = file_metadata . _asdict ( ) local_metadata [ <str> ] = file_path if local_metadata [ <str> ] is not None :        if sharedlib_utils . IsBinary ( local_metadata ) :          pkgstats [ <str> ] . append ( local_metadata [ <str> ] )   local_metadata = representations . FileMetadata ( ** local_metadata ) local_metadata = tuple ( local_metadata ) pkgstats [ <str> ] . append ( local_metadata ) if binary_dump_info :        fake_binary_md5 = self . FakeBinaryMd5 ( pkgname , binary_dump_info . path ) pkgstats [ <str> ] . append ( tuple ( binary_dump_info ) ) pkgstats [ <str> ] . append ( ( binary_dump_info . path , fake_binary_md5 ) )  if elfinfo :        self . elfdump_info [ fake_binary_md5 ] = elfinfo  elif binary_dump_info :        self . elfdump_info [ fake_binary_md5 ] = CreateFakeElfdumpInfo ( <str> )   def GetElfdumpInfo ( self , md5_sum ) :      return self . elfdump_info [ md5_sum ]    