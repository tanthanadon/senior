import socket import os import sqlobject import logging import ConfigParser import time from lib . python import common_constants from lib . python import configuration from lib . python import models as m CONFIG_DB_SCHEMA = <str> DB_SCHEMA_VERSION = 13 L TABLES = ( m . Architecture , m . CatalogRelease , m . CswConfig , m . Maintainer , m . OsRelease , m . Pkginst , m . ElfdumpInfoBlob , m . Srv4FileStatsBlob , m . CatalogGenData , m . Srv4FileStats , m . CheckpkgErrorTag , m . CswFile , m . CheckpkgOverride , m . Srv4DependsOn , m . Srv4IncompatibleWith , m . Srv4FileInCatalog , ) SYSTEM_PKGMAP = <str> CONFIG_MTIME = <str> class Error ( Exception ) :     class DatabaseError ( Error ) :     class CheckpkgDatabaseMixin ( object ) :    def PurgeDatabase ( self , drop_tables = False ) :      if drop_tables :        for table in TABLES :          if table . tableExists ( ) :            table . dropTable ( )    else :        logging . debug ( <str> ) for table in TABLES :          table . clearTable ( )    def CreateTables ( self ) :      for table in TABLES :        try :          logging . debug ( <str> , table ) table . createTable ( ifNotExists = True )  except sqlobject . dberrors . OperationalError , e :          logging . error ( <str> , table , e ) raise    def InitialDataImport ( self ) :      for arch in common_constants . ARCHITECTURES :        try :          m . Architecture ( name = arch )  except sqlobject . dberrors . DuplicateEntryError :          pass   for osrel in common_constants . OS_RELS :        try :          m . OsRelease ( short_name = osrel , full_name = osrel )  except sqlobject . dberrors . DuplicateEntryError :          pass   for relname in common_constants . DEFAULT_CATALOG_RELEASES :        try :          m . CatalogRelease ( name = relname )  except sqlobject . dberrors . DuplicateEntryError :          pass   self . SetDatabaseSchemaVersion ( )  def IsDatabaseGoodSchema ( self ) :      good_version = self . GetDatabaseSchemaVersion ( ) == DB_SCHEMA_VERSION if not good_version :        logging . fatal ( <str> <str> , self . GetDatabaseSchemaVersion ( ) , DB_SCHEMA_VERSION )  return good_version  def GetDatabaseSchemaVersion ( self ) :      schema_on_disk = 1 L if not m . CswConfig . tableExists ( ) :        return schema_on_disk ;  res = m . CswConfig . select ( m . CswConfig . q . option_key == CONFIG_DB_SCHEMA ) if res . count ( ) < 1 :        logging . debug ( <str> , schema_on_disk )  elif res . count ( ) == 1 :        schema_on_disk = res . getOne ( ) . int_value  return schema_on_disk  def SetDatabaseSchemaVersion ( self ) :      try :        config_option = m . CswConfig . select ( m . CswConfig . q . option_key == CONFIG_DB_SCHEMA ) . getOne ( ) config_option . int_value = DB_SCHEMA_VERSION  except sqlobject . main . SQLObjectNotFound , e :        version = m . CswConfig ( option_key = CONFIG_DB_SCHEMA , int_value = DB_SCHEMA_VERSION )    class CatalogDatabase ( CheckpkgDatabaseMixin ) :    def __init__ ( self , uri ) :      super ( CheckpkgDatabaseMixin , self ) . __init__ ( ) self . uri = uri self . sqo_conn = sqlobject . connectionForURI ( self . uri ) sqlobject . sqlhub . processConnection = self . sqo_conn   def InitDB ( config ) :    db_uri = configuration . ComposeDatabaseUri ( config ) dbc = CatalogDatabase ( uri = db_uri ) dbc . CreateTables ( ) dbc . InitialDataImport ( )   