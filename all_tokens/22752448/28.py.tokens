import os import re import logging from lib . python import common_constants from lib . python import configuration as c from lib . python import representations RUNPATH = <str> NEEDED_SONAMES = <str> SONAME = <str> class LddEmulator ( object ) :    def __init__ ( self ) :      self . runpath_expand_cache = { } self . runpath_origin_expand_cache = { } self . symlink_expand_cache = { } self . symlink64_cache = { } self . runpath_sanitize_cache = { }  def ExpandRunpath ( self , runpath , isalist , binary_path ) :      key = ( runpath , tuple ( isalist ) ) if key not in self . runpath_expand_cache :        origin_present = False if <str> in runpath :          origin_present = True  if origin_present :          key_o = ( runpath , tuple ( isalist ) , binary_path ) if key_o in self . runpath_origin_expand_cache :            return self . runpath_origin_expand_cache [ key_o ]  else :            if not binary_path . startswith ( <str> ) :              binary_path = <str> + binary_path  runpath = runpath . replace ( <str> , binary_path )   if <str> in runpath :          expanded_list = [ runpath . replace ( <str> , <str> ) ] expanded_list += [ runpath . replace ( <str> , isa ) for isa in isalist ]  else :          expanded_list = [ runpath ]  expanded_list = [ os . path . abspath ( p ) for p in expanded_list ] if not origin_present :          self . runpath_expand_cache [ key ] = expanded_list  else :          self . runpath_origin_expand_cache [ key_o ] = expanded_list return self . runpath_origin_expand_cache [ key_o ]   return self . runpath_expand_cache [ key ]  def ExpandSymlink ( self , symlink , target , input_path ) :      key = ( symlink , target , input_path ) if key not in self . symlink_expand_cache :        symlink_re = re . compile ( <str> % symlink ) if re . search ( symlink_re , input_path ) :          result = input_path . replace ( symlink , target )  else :          result = input_path  self . symlink_expand_cache [ key ] = result  return self . symlink_expand_cache [ key ]  def Emulate64BitSymlinks ( self , runpath_list ) :      key = tuple ( runpath_list ) if key not in self . symlink64_cache :        symlinked_list = [ ] for runpath in runpath_list :          for symlink , expansion_list in common_constants . SYSTEM_SYMLINKS :            for target in expansion_list :              expanded = self . ExpandSymlink ( symlink , target , runpath ) if expanded not in symlinked_list :                symlinked_list . append ( expanded )     self . symlink64_cache [ key ] = symlinked_list  return self . symlink64_cache [ key ]  def SanitizeRunpath ( self , runpath ) :      if runpath not in self . runpath_sanitize_cache :        self . runpath_sanitize_cache [ runpath ] = os . path . normpath ( runpath )  return self . runpath_sanitize_cache [ runpath ]  def ResolveSoname ( self , runpath_list , soname , isalist , path_list , binary_path ) :      original_paths_by_expanded_paths = { } for p in path_list :        expanded_p_list = self . Emulate64BitSymlinks ( [ p ] ) for expanded_p in expanded_p_list :          original_paths_by_expanded_paths [ expanded_p ] = p   for runpath_expanded in runpath_list :        if runpath_expanded in original_paths_by_expanded_paths :          return original_paths_by_expanded_paths [ runpath_expanded ]      