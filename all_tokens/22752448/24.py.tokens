import logging import optparse import os import pipes import re import common_constants import rest USAGE = class Error ( Exception ) :     class UsageError ( Error ) :     class CatalogGarbageCollector ( object ) :    ADDITIONAL_CATALOGS = ( <str> , ) def __init__ ( self , d , dest_dir ) :      logging . debug ( <str> , repr ( d ) ) self . catalog_dir = d self . dest_dir = dest_dir  def GarbageCollect ( self ) :      allpkgs_path = os . path . join ( self . catalog_dir , <str> ) allpkgs = set ( ) files_in_catalogs = set ( ) catalogs_by_files = { } for p in os . listdir ( allpkgs_path ) :        allpkgs . add ( p )  catalogs_to_check = tuple ( common_constants . DEFAULT_CATALOG_RELEASES ) catalogs_to_check += self . ADDITIONAL_CATALOGS rest_client = rest . RestClient ( ) catalog_triplet_list = rest_client . GetCatalogList ( ) catalogs_to_check += tuple ( set ( [ x [ 2 ] for x in catalog_triplet_list ] ) ) catalogs_to_check = tuple ( set ( catalogs_to_check ) ) logging . info ( <str> , catalogs_to_check ) file_sizes = { } for catrel in catalogs_to_check :        for arch in common_constants . PHYSICAL_ARCHITECTURES :          for osrel_long in common_constants . OS_RELS :            osrel_short = re . sub ( <str> , <str> , osrel_long ) catalog_path = os . path . join ( self . catalog_dir , catrel , arch , osrel_short ) if not os . path . exists ( catalog_path ) :              logging . debug ( <str> , catalog_path ) continue  pkg_re = re . compile ( <str> ) for p in os . listdir ( catalog_path ) :              if pkg_re . search ( p ) :                full_path = os . path . join ( catalog_path , p ) files_in_catalogs . add ( p ) l = catalogs_by_files . setdefault ( p , [ ] ) l . append ( ( catrel , arch , osrel_short ) ) if full_path not in file_sizes :                  s = os . stat ( full_path ) file_sizes [ full_path ] = s . st_size      logging . info ( <str> , catrel , len ( files_in_catalogs ) , len ( allpkgs ) )  to_remove = allpkgs . difference ( files_in_catalogs ) logging . debug ( <str> ) total_size = sum ( os . stat ( os . path . join ( allpkgs_path , x ) ) . st_size for x in to_remove ) logging . info ( <str> , len ( to_remove ) , float ( total_size ) / 1024 ** 2 ) for p in to_remove :        full_path = os . path . join ( allpkgs_path , p ) print <str> , pipes . quote ( full_path ) , pipes . quote ( self . dest_dir )    def main ( ) :    parser = optparse . OptionParser ( ) parser . add_option ( <str> , dest = <str> , help = ( <str> <str> ) ) parser . add_option ( <str> , dest = <str> , help = ( <str> ) ) options , args = parser . parse_args ( ) logging . basicConfig ( level = logging . DEBUG ) if not options . catalog_tree or not options . dest_dir :      parser . print_usage ( ) raise UsageError ( <str> )  gcg = CatalogGarbageCollector ( options . catalog_tree , options . dest_dir ) gcg . GarbageCollect ( )  if __name__ == <str> :    main ( )   