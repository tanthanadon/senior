import ConfigParser import errno import logging import os import re import sqlobject WS_RE = re . compile ( <str> ) CHECKPKG_CONFIG_FILENAME = <str> CHECKPKG_RELMGR_CONFIG_FILENAME = <str> CHECKPKG_AUTO_CONFIG_FILENAME = <str> CHECKPKG_DEFAULTS_FILENAME = <str> CHECKPKG_DIR = <str> CHECKPKG_SITE_CONFIG_DIR = <str> CHECKPKG_SRC_BASEDIR = os . path . dirname ( __file__ ) USER_CONFIG_FILE_TMPL = os . path . join ( CHECKPKG_DIR , CHECKPKG_CONFIG_FILENAME ) AUTO_CONFIG_FILE_TMPL = os . path . join ( CHECKPKG_DIR , CHECKPKG_AUTO_CONFIG_FILENAME ) SITE_CONFIG_FILE = os . path . join ( CHECKPKG_SITE_CONFIG_DIR , CHECKPKG_CONFIG_FILENAME ) SITE_CONFIG_RELMGR_FILE = os . path . join ( CHECKPKG_SITE_CONFIG_DIR , CHECKPKG_RELMGR_CONFIG_FILENAME ) DEFAULTS_FILE = os . path . join ( CHECKPKG_SRC_BASEDIR , CHECKPKG_DEFAULTS_FILENAME ) CONFIGURATION_FILE_LOCATIONS = [ ( DEFAULTS_FILE , True ) , ( AUTO_CONFIG_FILE_TMPL , False ) , ( SITE_CONFIG_FILE , False ) , ( SITE_CONFIG_RELMGR_FILE , False ) , ( USER_CONFIG_FILE_TMPL , False ) ] CONFIG_DEFAULTS = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } class Error ( Exception ) :    <str>  class ConfigurationError ( Error ) :    <str>  def MkdirP ( p ) :    try :      os . makedirs ( p )  except OSError as e :      if e . errno == errno . EEXIST : pass else : raise   def HomeExists ( ) :    if <str> not in os . environ :      return False  return True  def GetConfig ( ) :    config = ConfigParser . SafeConfigParser ( CONFIG_DEFAULTS ) file_was_found = False filenames_read = [ ] for file_name_tmpl , default_file in CONFIGURATION_FILE_LOCATIONS :      filename = None try :        filename = file_name_tmpl % os . environ if os . path . exists ( filename ) :          if not default_file :            file_was_found = True  filename_found = file_name_tmpl % os . environ filenames_read . append ( filename_found ) config . read ( filename_found )   except KeyError as e :        logging . warn ( e )   if not file_was_found :      if HomeExists ( ) :        db_file = os . path . join ( CHECKPKG_DIR % os . environ , <str> ) checkpkg_dir = CHECKPKG_DIR % os . environ MkdirP ( checkpkg_dir ) config_file = AUTO_CONFIG_FILE_TMPL % os . environ logging . warning ( <str> <str> % repr ( config_file ) ) if not config . has_section ( <str> ) :          config . add_section ( <str> )  config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , db_file ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) if not config . has_section ( <str> ) :          config . add_section ( <str> )  config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) if not config . has_section ( <str> ) :          config . add_section ( <str> )  config . set ( <str> , <str> , <str> ) with open ( config_file , <str> ) as fd :          config . write ( fd )  logging . debug ( <str> )   if not config . has_section ( <str> ) :      logging . fatal ( <str> <str> <str> % filenames_read ) raise SystemExit  return config  def ComposeDatabaseUri ( config , cache = False ) :    db_data = { <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , <str> : config . get ( <str> , <str> ) , } display_db_data = dict ( db_data ) display_db_data [ <str> ] = <str> logging . debug ( <str> % display_db_data ) if db_data [ <str> ] == <str> :      db_uri_tmpl = ( <str> <str> )  elif db_data [ <str> ] == <str> :      connector = <str> if db_data [ <str> ] == <str> :        connector = <str>  db_uri_tmpl = <str> db_uri_tmpl += connector db_uri_tmpl += <str> db_uri_tmpl += <str> db_uri_tmpl += <str>  else :      raise ConfigurationError ( <str> % db_data [ <str> ] )  db_uri = db_uri_tmpl % db_data return db_uri  def SetUpSqlobjectConnection ( ) :    config = GetConfig ( ) db_uri = ComposeDatabaseUri ( config ) sqo_conn = sqlobject . connectionForURI ( db_uri ) sqlobject . sqlhub . processConnection = sqo_conn  def TearDownSqlobjectConnection ( ) :    sqlobject . sqlhub . processConnection = None   