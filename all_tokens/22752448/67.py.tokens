try :    import unittest2 as unittest  except ImportError :    import unittest  from lib . python import pkgmap from lib . python import representations PKGMAP_1 = PKGMAP_2 = PKGMAP_3 = class PkgmapUnitTest ( unittest . TestCase ) :    def test_1 ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_1 . splitlines ( ) ) entry = representations . PkgmapEntry ( cksum = None , class_ = <str> , group = <str> , line = ( <str> <str> ) , major = None , minor = None , mode = <str> , modtime = None , owner = <str> , path = <str> , pkgnames = [ ] , size = None , target = None , type_ = <str> , ) self . assertEqual ( 1 , len ( pm . entries ) ) self . assertEqual ( entry , pm . entries [ 0 ] )  def test_2 ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_2 . splitlines ( ) ) line = <str> self . assertTrue ( line in pm . entries_by_line )  def test_3 ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_2 . splitlines ( ) ) self . assertTrue ( <str> in pm . entries_by_class )  def test_4 ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_3 . splitlines ( ) ) self . assertTrue ( <str> in pm . entries_by_class )  def testPkgmapSortedByPaths ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_2 . splitlines ( ) ) paths = [ x . path for x in pm . entries ] self . assertEquals ( paths , sorted ( paths ) )  def test_ParseLineSymlink ( self ) :      pm = pkgmap . Pkgmap ( PKGMAP_2 . splitlines ( ) ) line = ( <str> <str> ) line_to_add = ( <str> <str> ) entry = representations . PkgmapEntry ( cksum = None , class_ = <str> , group = None , line = ( <str> <str> ) , major = None , minor = None , mode = None , modtime = None , owner = None , path = <str> , pkgnames = [ ] , size = None , target = <str> , type_ = <str> , ) self . assertEqual ( ( entry , line_to_add ) , pm . _ParseLine ( line ) )   if __name__ == <str> :    unittest . main ( )   