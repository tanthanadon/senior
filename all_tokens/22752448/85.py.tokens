import logging import requests import argparse import datetime import jinja2 from lib . python import activity REMOVE_SUGGESTION_CUTOFF = 4 REPORT_TMPL = <str> class BadDateError ( Exception ) :     def StalePkgsReport ( output_file_name , revdeps , maintainers , pkgs_by_pkgname ) :    packages_to_drop = [ ] for username in maintainers :      pkgs = maintainers [ username ] . pkgs for catalogname in pkgs :        entry = pkgs [ catalogname ] maintainer = maintainers [ username ] if ( entry [ <str> ] > datetime . timedelta ( days = REMOVE_SUGGESTION_CUTOFF * 365 ) and not revdeps [ entry [ <str> ] ] and not maintainer . active ) :          packages_to_drop . append ( entry )    for username in maintainers :      pkgs = maintainers [ username ] . pkgs for catalogname in pkgs :        entry = pkgs [ catalogname ] entry [ <str> ] = False for revdep_pkgname in revdeps [ entry [ <str> ] ] :          revdep = pkgs_by_pkgname [ revdep_pkgname ] if not revdep [ <str> ] and entry [ <str> ] :            entry [ <str> ] = True     with open ( output_file_name , <str> ) as fd :      template = jinja2 . Template ( REPORT_TMPL ) fd . write ( template . render ( maintainers = maintainers , revdeps = revdeps , inactive_maint_cutoff = activity . INACTIVE_MAINTAINER_CUTOFF , stale_pkg_cutoff = activity . STALE_PACKAGE_CUTOFF , packages_to_drop = packages_to_drop , remove_suggestion_cutoff = REMOVE_SUGGESTION_CUTOFF ) . encode ( <str> ) )   def main ( ) :    parser = argparse . ArgumentParser ( ) parser . add_argument ( <str> , help = <str> ) args = parser . parse_args ( ) url = ( <str> <str> ) pkgs = requests . get ( url ) . json ( ) maintainers , bad_dates = activity . Maintainers ( pkgs ) revdeps = activity . RevDeps ( pkgs ) pkgs_by_pkgname = activity . ByPkgname ( pkgs ) StalePkgsReport ( args . output , revdeps , maintainers , pkgs_by_pkgname )  if __name__ == <str> :    main ( )   