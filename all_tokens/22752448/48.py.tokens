try :    import unittest2 as unittest  except ImportError :    import unittest  import pprint import logging import datetime from lib . python import common_constants from lib . python import models from lib . python import representations from lib . python import shell from lib . python import system_pkgmap from lib . python import test_base PKGINFO_LINE_1 = ( <str> ) PKGINFO_LINE_2 = ( <str> ) PKGLIST_LINE_1 = ( <str> <str> ) PKGLIST_LINE_2 = ( <str> <str> ) PKGMAP_LINE_1 = ( <str> <str> ) PKGMAP_LINE_2 = ( <str> <str> ) PKGMAP_LINE_3 = ( <str> <str> ) PKGMAP_LINE_4 = ( <str> <str> <str> <str> ) PKGMAP_LINE_5 = ( <str> <str> ) PKGMAP_LINE_6 = ( <str> <str> ) PKGMAP_LINE_7 = ( <str> <str> ) PKGMAP_LINE_8 = ( <str> ) PKGCONTENT_LINE_1 = ( <str> ) PKGCONTENT_LINE_2 = ( <str> ) PKGCONTENT_LINE_3 = ( <str> <str> ) PKGCONTENT_LINE_4 = ( <str> ) EX1_PKGINFO = { <str> : <str> , } EX1_CONTENTS = [ [ <str> , <str> , <str> , <str> , <str> , <str> , None , <str> , None , None , None , None , None , [ <str> ] ] , [ <str> , <str> , <str> , <str> , <str> , <str> , None , <str> , None , None , None , None , None , [ <str> ] ] , ] EX1_FILES_METADATA = [ ( <str> , <str> , 3 ) , ( <str> , <str> , None ) , ] EX1_BINARIES_DUMP_INFO = [ ( <str> , <str> , None , ( <str> , <str> ) , ( <str> , ) , True , True , True ) , ] EX1_PKGSTATS = ( { <str> : { } , <str> : { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : { <str> : <str> } , <str> : None , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } } , <str> : <str> <str> , <str> : None , <str> : <str> , <str> : 0 , <str> : 10 L } , <str> : [ <str> ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ( <str> , <str> , 3 ) , ( <str> , <str> , None ) , ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : <str> , <str> : [ ] , <str> : { <str> : 0 , <str> : [ ] , <str> : [ <str> ] } , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } , <str> : [ representations . PkgmapEntry ( line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , path = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ <str> ] ) , representations . PkgmapEntry ( line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , path = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ <str> ] ) , ] } ) class IndexerUnitTest ( unittest . TestCase ) :    def setUp ( self ) :      super ( IndexerUnitTest , self ) . setUp ( ) self . maxDiff = None  def test_ParseSrv4PkginfoLine ( self ) :      spi = system_pkgmap . Indexer ( ) expected = ( <str> , <str> ) self . assertEqual ( expected , spi . _ParseSrv4PkginfoLine ( PKGINFO_LINE_1 ) )  def test_ParseIpsPkgListLine ( self ) :      spi = system_pkgmap . Indexer ( ) expected = ( <str> , <str> ) self . assertEqual ( expected , spi . _ParseIpsPkgListLine ( PKGLIST_LINE_1 ) )  def test_ParseSrv4PkgmapLineFile ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> , <str> : PKGMAP_LINE_1 } self . assertEqual ( expected , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_1 ) . _asdict ( ) )  def test_ParseSrv4PkgmapLineTypeSymlink ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : None , <str> : <str> , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : None , <str> : <str> , <str> : [ <str> ] , <str> : None , <str> : <str> , <str> : <str> , <str> : PKGMAP_LINE_3 , } self . assertEqual ( expected , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_3 ) . _asdict ( ) )  def test_ParseSrv4PkgmapLineTypeQuestionMark ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : None , <str> : None , <str> : [ <str> , <str> ] , <str> : None , <str> : None , <str> : <str> , <str> : PKGMAP_LINE_5 , <str> : <str> , <str> : None , <str> : None , <str> : None , <str> : None , <str> : <str> , <str> : None , } self . assertEqual ( expected , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_5 ) . _asdict ( ) )  def test_ParseSrv4PkgmapLineTypePipe ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : None , <str> : None , <str> : [ <str> ] , <str> : None , <str> : <str> , <str> : <str> , <str> : PKGMAP_LINE_8 , <str> : <str> , <str> : None , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : None , } self . assertEqual ( expected , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_8 ) . _asdict ( ) )  def test_ParseSrv4PkgmapLibc ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : <str> , <str> : None , <str> : [ <str> ] , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : None , } self . assertEqual ( expected , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_6 ) . _asdict ( ) )  def test_ParseSrv4PkgmapExclamationMark ( self ) :      spi = system_pkgmap . Indexer ( ) self . assertEqual ( [ <str> ] , spi . _ParseSrv4PkgmapLine ( PKGMAP_LINE_7 ) . pkgnames )  def test_ParseSrv4PkgmapLineTypeWrongSyntax ( self ) :      spi = system_pkgmap . Indexer ( ) self . assertRaises ( system_pkgmap . ParsingError , spi . _ParseSrv4PkgmapLine , <str> )  def test_ParseIpsPkgContentsLineLink ( self ) :      spi = system_pkgmap . Indexer ( ) line = PKGCONTENT_LINE_1 expected = representations . PkgmapEntry ( line = PKGCONTENT_LINE_1 , class_ = None , mode = None , owner = None , group = None , type_ = <str> , major = None , minor = None , size = None , path = <str> , target = <str> , cksum = None , modtime = None , pkgnames = [ <str> ] , ) self . assertEqual ( expected , spi . _ParseIpsPkgContentsLine ( line ) )  def test_ParseIpsPkgContentsLineDir ( self ) :      spi = system_pkgmap . Indexer ( ) line = PKGCONTENT_LINE_2 expected = representations . PkgmapEntry ( line = PKGCONTENT_LINE_2 , class_ = None , mode = <str> , owner = <str> , group = <str> , path = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ <str> ] , ) self . assertEqual ( expected , spi . _ParseIpsPkgContentsLine ( line ) )  def test_ParseIpsPkgContentsLineHardlink ( self ) :      spi = system_pkgmap . Indexer ( ) line = PKGCONTENT_LINE_3 expected = representations . PkgmapEntry ( line = PKGCONTENT_LINE_3 , class_ = None , mode = None , owner = None , group = None , type_ = <str> , major = None , minor = None , size = None , path = <str> , target = <str> , cksum = None , modtime = None , pkgnames = [ <str> ] , ) self . assertEqual ( expected , spi . _ParseIpsPkgContentsLine ( line ) )  def test_ParseIpsPkgContentsLineFile ( self ) :      spi = system_pkgmap . Indexer ( ) line = PKGCONTENT_LINE_4 expected = representations . PkgmapEntry ( line = PKGCONTENT_LINE_4 , class_ = None , mode = <str> , owner = <str> , group = <str> , type_ = <str> , major = None , minor = None , size = None , path = <str> , target = None , cksum = None , modtime = None , pkgnames = [ <str> ] , ) self . assertEqual ( expected , spi . _ParseIpsPkgContentsLine ( line ) )  def test_IpsNameToSrv4Name ( self ) :      spi = system_pkgmap . Indexer ( ) self . assertEqual ( <str> , spi . _IpsNameToSrv4Name ( <str> ) )  def test_ParsePkgContents ( self ) :      spi = system_pkgmap . Indexer ( ) srv4_stream = ( PKGMAP_LINE_1 , PKGMAP_LINE_2 , PKGMAP_LINE_3 , PKGMAP_LINE_4 ) ips_stream = ( PKGCONTENT_LINE_1 , PKGCONTENT_LINE_2 , PKGCONTENT_LINE_3 , PKGCONTENT_LINE_4 ) self . assertEqual ( 4 , len ( spi . _ParsePkgContents ( srv4_stream , spi . _ParseSrv4PkgmapLine , False ) ) ) self . assertEqual ( 4 , len ( spi . _ParsePkgContents ( ips_stream , spi . _ParseIpsPkgContentsLine , False ) ) )  def Disabledtest_GetDataStructure ( self ) :      spi = system_pkgmap . Indexer ( ) expected = { <str> : <str> , <str> : <str> , <str> : [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , { <str> : None , <str> : <str> , <str> : None , <str> : None , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : None , <str> : <str> } ] , <str> : { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } } srv4_pkginfos_stream = ( PKGINFO_LINE_1 , PKGINFO_LINE_2 , ) ips_pkginfos_stream = ( PKGLIST_LINE_1 , PKGLIST_LINE_2 , ) srv4_pkgcontents_stream = ( PKGMAP_LINE_1 , PKGMAP_LINE_2 , ) ips_pkgcontents_stream = ( PKGCONTENT_LINE_1 , PKGCONTENT_LINE_2 , ) self . assertEqual ( expected , spi . GetDataStructure ( srv4_pkgcontents_stream , srv4_pkginfos_stream , ips_pkgcontents_stream , ips_pkginfos_stream , <str> , <str> , False ) )   class InstallContentsImporterUnitTest ( test_base . SqlObjectTestMixin , unittest . TestCase ) :    def setUp ( self ) :      super ( InstallContentsImporterUnitTest , self ) . setUp ( ) self . importer = system_pkgmap . InstallContentsImporter ( <str> , <str> )  def Disabledtest_GetFakeSrv4 ( self ) :      self . dbc . InitialDataImport ( ) importer = self . importer data = { <str> : { <str> : <str> , } , } importer . _ImportPackages ( data ) fake_srv4 = importer . _GetFakeSrv4 ( <str> , <str> , <str> ) self . assertEqual ( <str> , fake_srv4 . md5_sum )  def Disabledtest_ImportFiles ( self ) :      self . dbc . InitialDataImport ( ) contents = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , ] data = { <str> : { <str> : <str> , } , <str> : contents , <str> : <str> , <str> : <str> , } importer = self . importer importer . _ImportPackages ( data ) importer . _ImportFiles ( data ) self . assertEqual ( 1 , len ( list ( models . Srv4FileStats . select ( ) ) ) ) self . assertEqual ( 1 , len ( list ( models . CswFile . select ( ) ) ) )  def Disabledtest_ImportFilesAddToCatalog ( self ) :      self . dbc . InitialDataImport ( ) contents = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , ] data = { <str> : { <str> : <str> , } , <str> : contents , <str> : <str> , <str> : <str> , } importer = self . importer importer . _ImportPackages ( data ) importer . _ImportFiles ( data ) self . assertEqual ( 1 , len ( list ( models . Srv4FileStats . select ( ) ) ) ) self . assertEqual ( 1 , len ( list ( models . CswFile . select ( ) ) ) ) self . assertEqual ( len ( common_constants . DEFAULT_CATALOG_RELEASES ) , len ( list ( models . Srv4FileInCatalog . select ( ) ) ) )  def Disabledtest_CompilePkgstatsList ( self ) :      self . dbc . InitialDataImport ( ) contents = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , { <str> : <str> , <str> : None , <str> : <str> , <str> : None , <str> : [ <str> ] , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> } ] indexed_metadata = [ { <str> : <str> , <str> : <str> , } , { <str> : <str> , <str> : <str> , <str> : 3 , <str> : <str> , <str> : <str> } ] indexed_binaries_dump_info = [ { <str> : True , <str> : True , <str> : True , <str> : <str> , <str> : ( <str> , ) , <str> : <str> , <str> : ( <str> , <str> ) } ] data = { <str> : { <str> : <str> , <str> : <str> , } , <str> : contents , <str> : <str> , <str> : <str> , <str> : indexed_metadata , } importer = self . importer parsed_basename = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } , <str> : { <str> : <str> } , <str> : None , <str> : <str> , <str> : <str> , <str> : None } basic_stats = { <str> : <str> , <str> : <str> , <str> : parsed_basename , <str> : <str> , <str> : None , <str> : <str> , <str> : 0 , <str> : 10 L } files_metadata = [ { <str> : <str> , <str> : <str> , } ] isalist = frozenset ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) pkgchk = { <str> : 0 , <str> : [ ] , <str> : [ <str> ] } pkginfo = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } pkgmap = [ { <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : <str> , <str> : <str> , } , ] binaries_dump_info = [ { <str> : True , <str> : True , <str> : True , <str> : <str> , <str> : ( <str> , ) , <str> : <str> , <str> : ( <str> , <str> ) } ] expected = [ { <str> : { } , <str> : basic_stats , <str> : [ <str> ] , <str> : binaries_dump_info , <str> : frozenset ( ) , <str> : files_metadata , <str> : isalist , <str> : datetime . datetime ( 2010 , 7 , 5 , 23 , 48 , 10 ) , <str> : [ ] , <str> : pkgchk , <str> : pkginfo , <str> : pkgmap } ] result = importer . _ComposePkgstats ( data , show_progress = False ) expected , result = expected [ 0 ] , result [ 1 ] self . assertEqual ( expected . keys ( ) , result . keys ( ) ) self . assertEqual ( expected [ <str> ] [ <str> ] , result [ <str> ] [ <str> ] ) self . assertEqual ( expected [ <str> ] , result [ <str> ] ) self . assertEqual ( expected [ <str> ] , result [ <str> ] ) self . assertEqual ( expected , result )  def Disabledtest_ImportFilesAddToCatalogTwoFiles ( self ) :      self . dbc . InitialDataImport ( ) contents = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , ] data = { <str> : { <str> : <str> , } , <str> : contents , <str> : <str> , <str> : <str> , } importer = self . importer importer . _ImportPackages ( data ) importer . _ImportFiles ( data ) self . assertEqual ( 1 , len ( list ( models . Srv4FileStats . select ( ) ) ) ) self . assertEqual ( 2 , len ( list ( models . CswFile . select ( ) ) ) )  def Disabledtest_ImportFilesCsw ( self ) :      contents = [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : ( <str> <str> <str> ) , <str> : None , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : [ <str> ] , <str> : <str> , <str> : None , <str> : <str> } , ] data = { <str> : { <str> : <str> , } , <str> : contents , <str> : <str> , <str> : <str> , } importer = self . importer importer . _ImportPackages ( data ) importer . _ImportFiles ( data , show_progress = False ) self . assertEqual ( 0 , len ( list ( models . Srv4FileStats . select ( ) ) ) ) self . assertEqual ( 0 , len ( list ( models . CswFile . select ( ) ) ) )  def testSanitizeInstallContentsPkgnameNone ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )  def testSanitizeInstallContentsPkgnameTilde ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )  def testSanitizeInstallContentsPkgnameJ3link ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )  def testSanitizeInstallContentsPkgnameJ3linkAi ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )  def testSanitizeInstallContentsPkgnameJ5linkAi ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )  def testSanitizeInstallContentsPkgnameInstallError ( self ) :      importer = self . importer self . assertEqual ( <str> , importer . SanitizeInstallContentsPkgname ( <str> ) )   class PkgstatsListComposerUnitTest ( unittest . TestCase ) :    DATA = { <str> : EX1_PKGINFO , <str> : EX1_CONTENTS , <str> : EX1_FILES_METADATA , <str> : EX1_BINARIES_DUMP_INFO , <str> : <str> , <str> : <str> , } def setUp ( self ) :      super ( PkgstatsListComposerUnitTest , self ) . setUp ( ) self . importer = system_pkgmap . InstallContentsImporter ( <str> , <str> )  def AssertDictEqual ( self , d1 , d2 ) :      self . assertEqual ( d1 . keys ( ) , d2 . keys ( ) ) for key in d1 :        if isinstance ( d1 [ key ] , dict ) and isinstance ( d2 [ key ] , dict ) :          self . AssertDictEqual ( d1 [ key ] , d2 [ key ] )  else :          self . assertEqual ( d1 [ key ] , d2 [ key ] )    def testComposeFakePackages ( self ) :      generated_pkgstats = self . importer . _ComposePkgstats ( self . DATA , show_progress = False ) self . assertEqual ( 1 , len ( generated_pkgstats ) ) self . AssertDictEqual ( EX1_PKGSTATS , generated_pkgstats [ 0 ] )   if __name__ == <str> :    logging . basicConfig ( level = logging . CRITICAL ) unittest . main ( )   