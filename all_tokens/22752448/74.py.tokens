try :    import unittest2 as unittest  except ImportError :    import unittest  import copy import datetime import logging import mox import os . path import pprint from lib . python import checkpkg_lib from lib . python import fake_pkgstats_composer from lib . python import package_checks as pc from lib . python import representations from lib . python import test_base from lib . python . testdata import rpaths from lib . python . testdata import stubs from lib . python . testdata . berkeleydb48_stats import pkgstats as bdb48_stats from lib . python . testdata . djvulibre_rt_stats import pkgstats as djvulibre_rt_stats from lib . python . testdata . neon_stats import pkgstats as neon_stats from lib . python . testdata . rsync_stats import pkgstats as rsync_stats from lib . python . testdata . sudo_stats import pkgstats as sudo_stats from lib . python . testdata . tree_stats import pkgstats as tree_stats from lib . python . testdata . vsftpd_stats import pkgstats as vsftpd_stats DEFAULT_PKG_STATS = None DEFAULT_PKG_DATA = rsync_stats [ 0 ] class CheckTestHelper ( test_base . PackageStatsMixin ) :    def setUp ( self ) :      super ( CheckTestHelper , self ) . setUp ( ) self . mox = mox . Mox ( ) self . pkg_data = copy . deepcopy ( DEFAULT_PKG_DATA ) self . PrepareElfinfo ( self . pkg_data ) self . logger_mock = stubs . LoggerStub ( ) self . SetMessenger ( ) if self . FUNCTION_NAME . startswith ( <str> ) :        self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . SetCheckInterface )  else :        self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . IndividualCheckInterface )  self . mox . ResetAll ( )  def SetMessenger ( self ) :      self . messenger = stubs . MessengerStub ( )  def tearDown ( self ) :      super ( CheckTestHelper , self ) . tearDown ( ) self . mox . ReplayAll ( ) function_under_test = getattr ( pc , self . FUNCTION_NAME ) function_under_test ( self . pkg_data , self . error_mgr_mock , self . logger_mock , self . messenger ) self . mox . VerifyAll ( )  def TestPkgmapEntry ( self , entry_path , class_ = <str> , type_ = <str> , target = None ) :      return representations . PkgmapEntry ( line = None , class_ = class_ , mode = None , owner = None , group = None , path = entry_path , target = target , type_ = type_ , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ ] , )  def TestBinaryDumpInfo ( self , binary_path , needed_sonames , runpath ) :      return representations . BinaryDumpInfo ( base_name = os . path . basename ( binary_path ) , needed_sonames = needed_sonames , path = binary_path , rpath_set = True , runpath_rpath_the_same = True , runpath_set = True , runpath = runpath , soname = None )   class TestMultipleDepends ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testMultipleDependency ( self ) :      self . pkg_data [ <str> ] . append ( ( <str> , <str> ) ) self . error_mgr_mock . ReportError ( <str> , <str> )   class TestDescription ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testMissingDescription ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )  def testLongDescription ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> + ( <str> * 200 ) self . error_mgr_mock . ReportError ( <str> , <str> )  def testUppercaseDescription ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> )   class TestCheckEmailGood ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testGoodEmail ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str>  def testBadDomain ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> )   class TestCheckCatalogname ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testPkginfoAndFileDisagreement ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )  def testWithDash ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> )  def testGoodComplex ( self ) :      self . pkg_data [ <str> ] [ <str> ] = ( <str> <str> ) self . pkg_data [ <str> ] [ <str> ] = <str>  def testUppercase ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )  def testLowercase ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str>  def testBadCharacters ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> )   class TestCheckSmfIntegrationBad ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testMissingSmfClass ( self ) :      self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> ) ) self . error_mgr_mock . ReportError ( <str> , <str> )  def testSmfIntegrationGood ( self ) :      self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , class_ = <str> ) )  def testWrongLocation ( self ) :      self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , class_ = <str> ) ) self . error_mgr_mock . ReportError ( <str> , <str> )   class TestSetCheckDependencies ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testUnidentifiedDependency ( self ) :      self . pkg_data_single = self . pkg_data self . pkg_data = [ self . pkg_data_single ] self . pkg_data [ 0 ] [ <str> ] . append ( [ <str> , <str> ] ) installed = [ <str> , <str> , <str> , <str> ] self . error_mgr_mock . GetInstalledPackages ( ) . AndReturn ( installed ) self . error_mgr_mock . ReportError ( <str> , <str> , <str> )  def testInterfaceInTestSetCheckDependencies ( self ) :      self . pkg_data_single = self . pkg_data self . pkg_data = [ self . pkg_data_single ] installed = [ <str> , <str> , <str> , <str> ] self . error_mgr_mock . GetInstalledPackages ( ) . AndReturn ( installed )  def testTwoPackagesBad ( self ) :      self . pkg_data_single = self . pkg_data self . pkg_data = [ self . pkg_data_single , copy . deepcopy ( self . pkg_data_single ) ] self . pkg_data [ 1 ] [ <str> ] [ <str> ] = <str> self . pkg_data [ 1 ] [ <str> ] . append ( [ <str> , <str> ] ) installed = [ <str> , <str> , <str> , <str> ] self . error_mgr_mock . GetInstalledPackages ( ) . AndReturn ( installed ) self . error_mgr_mock . ReportError ( <str> , <str> , <str> )  def testTwoPackagesGood ( self ) :      self . pkg_data_single = self . pkg_data self . pkg_data = [ self . pkg_data_single , copy . deepcopy ( self . pkg_data_single ) ] self . pkg_data [ 1 ] [ <str> ] [ <str> ] = <str> self . pkg_data [ 1 ] [ <str> ] . append ( [ <str> , <str> ] ) installed = [ <str> , <str> , <str> , <str> ] self . error_mgr_mock . GetInstalledPackages ( ) . AndReturn ( installed )   class TestSetCheckDependencies ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testDependencyOnSelf ( self ) :      self . pkg_data [ <str> ] . append ( ( <str> , <str> ) ) installed = [ <str> , <str> , <str> , <str> ] self . error_mgr_mock . ReportError ( <str> )   class DatabaseMockingMixin ( object ) :    def MockDbInteraction ( self ) :      self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) , <str> : ( <str> ) , } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) , <str> : ( <str> ) , } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : ( <str> , ) , <str> : ( <str> ) , } ) common_path_pkgs = [ <str> , <str> , <str> ] paths_to_check = [ <str> , <str> , <str> , <str> , <str> ] for pth in paths_to_check :        self . error_mgr_mock . GetPkgByPath ( pth ) . AndReturn ( common_path_pkgs )    class TestCheckArchitectureSanity ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testSimple ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> <str> )   class TestCheckArchitectureVsContents ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testArchallDevel ( self ) :      self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , None , None )  def testArchitectureVsContents ( self ) :      self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] = [ ] self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , None , None )   class TestCheckFileNameSanity ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testMissingRevision ( self ) :      del ( self . pkg_data [ <str> ] [ <str> ] [ <str> ] [ <str> ] ) self . error_mgr_mock . ReportError ( <str> )   class TestCheckPstamp ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testPstampRegex ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> , <str> <str> )   class TestCheckRpath ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testRpathList ( self ) :      binaries_dump_info = self . pkg_data [ <str> ] binaries_dump_info = [ representations . BinaryDumpInfo . _make ( x ) for x in binaries_dump_info ] d = binaries_dump_info [ 0 ] . _asdict ( ) d [ <str> ] = sorted ( rpaths . all_rpaths ) binaries_dump_info [ 0 ] = representations . BinaryDumpInfo ( ** d ) self . pkg_data [ <str> ] = binaries_dump_info [ 0 : 1 ] BAD_PATHS = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] for bad_path in BAD_PATHS :        self . error_mgr_mock . ReportError ( <str> , <str> % bad_path )    class TestSharedLibsInAnInstalledPackageToo ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> @ property def CSWbar_DATA ( self ) :      return { <str> : { <str> : <str> , <str> : <str> , <str> : 1 , <str> : { <str> : <str> } } , <str> : [ representations . BinaryDumpInfo ( base_name = <str> , needed_sonames = [ <str> ] , path = <str> , rpath_set = False , runpath_rpath_the_same = False , runpath_set = True , runpath = ( <str> , ) , soname = None , ) , ] , <str> : [ ( <str> , <str> ) , ] , <str> : ( ( <str> , None ) , ) , <str> : ( ) , <str> : [ ] , <str> : [ { <str> : <str> , <str> : 3 , <str> : <str> , <str> : <str> , <str> : <str> } , ] , <str> : { <str> : { <str> : [ ] , <str> : [ ] , <str> : [ representations . ElfSymInfo ( soname = <str> , symbol = <str> , flags = <str> , shndx = <str> , bind = <str> , version = None ) ] } } , }  CSWlibfoo_DATA = { <str> : { <str> : <str> , <str> : <str> , <str> : 1 } , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : [ ] , <str> : ( ) , <str> : [ ] , } def testMissingLibFromNewPackage ( self ) :      self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , } ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( { <str> : [ ] , <str> : [ ] , <str> : [ representations . ElfSymInfo ( soname = <str> , symbol = <str> , flags = <str> , shndx = <str> , bind = <str> , version = None ) ] } ) self . error_mgr_mock . ReportError ( <str> , <str> , <str> ) self . pkg_data = [ self . CSWbar_DATA , self . CSWlibfoo_DATA ]   class TestSharedLibsOnlyIsalist ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def setUp ( self ) :      super ( TestSharedLibsOnlyIsalist , self ) . setUp ( ) self . plc = fake_pkgstats_composer . PkgstatsListComposer ( <str> , <str> ) self . plc . AddPkgname ( <str> ) elfinfo_1 = { <str> : [ ] , <str> : [ ] , <str> : [ representations . ElfSymInfo ( soname = <str> , symbol = <str> , flags = <str> , shndx = <str> , bind = <str> , version = None ) ] } self . plc . AddFile ( <str> , self . TestPkgmapEntry ( <str> ) , representations . FileMetadata ( path = <str> , mime_type = <str> , machine_id = 3 ) , self . TestBinaryDumpInfo ( <str> , [ <str> ] , [ <str> ] ) , elfinfo_1 ) elfinfo_2 = { <str> : [ ] , <str> : [ ] , <str> : [ ] } self . plc . AddFile ( <str> , self . TestPkgmapEntry ( <str> ) , representations . FileMetadata ( path = <str> , mime_type = <str> , machine_id = 3 ) , self . TestBinaryDumpInfo ( <str> , [ ] , [ <str> ] ) , elfinfo_2 )  def testInterface ( self ) :      self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { } ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> ] ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) bin_md5_1 = <str> self . error_mgr_mock . GetElfdumpInfo ( bin_md5_1 ) . AndReturn ( self . plc . GetElfdumpInfo ( bin_md5_1 ) ) bin_md5_2 = <str> self . error_mgr_mock . GetElfdumpInfo ( bin_md5_2 ) . AndReturn ( self . plc . GetElfdumpInfo ( bin_md5_2 ) ) self . pkg_data = self . plc . GetPkgstats ( )   class TestCheckVendorURL ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testBadUrl ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> , <str> )  def testGoodUrl ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str>  def testHttps ( self ) :      self . pkg_data [ <str> ] [ <str> ] = <str>   class TestCheckPackageDoesNotBreakPython26 ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testBad ( self ) :      self . pkg_data [ <str> ] . append ( representations . PkgmapEntry ( path = <str> <str> , line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ ] ) ) self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )  def testGood ( self ) :      self . pkg_data [ <str> ] . append ( representations . PkgmapEntry ( path = <str> , line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ ] ) ) self . pkg_data [ <str> ] [ <str> ] = <str> self . pkg_data [ <str> ] [ <str> ] = <str>   class TestCheckDisallowedPaths ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testManDir ( self ) :      self . pkg_data [ <str> ] . append ( representations . PkgmapEntry ( path = <str> , line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ ] ) ) self . error_mgr_mock . GetCommonPaths ( <str> ) . AndReturn ( [ ] ) self . error_mgr_mock . ReportError ( <str> , <str> , <str> <str> )  def testManFile ( self ) :      self . pkg_data [ <str> ] . append ( representations . PkgmapEntry ( path = <str> , line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = [ ] ) ) self . error_mgr_mock . GetCommonPaths ( <str> ) . AndReturn ( [ ] ) self . error_mgr_mock . ReportError ( <str> , <str> , <str> <str> )   class TestCheckArchitecture ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testBadSparcv8Plus ( self ) :      self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 18 , mime_type = <str> , path = <str> ) ] self . error_mgr_mock . ReportError ( <str> , <str> )  def testGoodSparcv8Plus ( self ) :      self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 18 , mime_type = <str> , path = <str> ) ]  def testGoodSparcv8PlusInBin ( self ) :      parsed_basename = self . pkg_data [ <str> ] [ <str> ] parsed_basename [ <str> ] = <str> self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 18 , mime_type = <str> , path = <str> ) ]  def testGoodBinary ( self ) :      self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 2 , mime_type = <str> , path = <str> ) ]  def testGoodLibrary ( self ) :      self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 2 , mime_type = <str> , path = <str> ) ]  def testBadPlacement ( self ) :      self . pkg_data [ <str> ] = [ representations . FileMetadata ( machine_id = 2 , mime_type = <str> , path = <str> ) ] self . error_mgr_mock . ReportError ( <str> , <str> <str> )   class TestSetCheckSharedLibraryConsistencyIvtools ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def LeaveNamedBinaries ( self , pkg_data , names_list ) :      def NameMatches ( name ) :        return any ( y in name for y in names_list )  pkg_data [ 0 ] [ <str> ] = [ x for x in pkg_data [ 0 ] [ <str> ] if NameMatches ( x ) ] pkg_data [ 0 ] [ <str> ] = [ x for x in pkg_data [ 0 ] [ <str> ] if NameMatches ( x [ 0 ] ) ] pkg_data [ 0 ] [ <str> ] = [ x for x in pkg_data [ 0 ] [ <str> ] if NameMatches ( x [ 0 ] ) ] pkg_data [ 0 ] [ <str> ] = [ x for x in pkg_data [ 0 ] [ <str> ] if NameMatches ( x [ 0 ] ) ] return pkg_data   class TestSetCheckDirectoryDepsMissing ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testNeededDirectories ( self ) :      self . pkg_data = sudo_stats self . PrepareElfinfo ( self . pkg_data [ 0 ] ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPathsAndPkgnamesByBasename ( <str> ) . AndReturn ( { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( fake_pkgstats_composer . CreateFakeElfdumpInfo ( <str> ) ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( fake_pkgstats_composer . CreateFakeElfdumpInfo ( <str> ) ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( fake_pkgstats_composer . CreateFakeElfdumpInfo ( <str> ) ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( fake_pkgstats_composer . CreateFakeElfdumpInfo ( <str> ) ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( fake_pkgstats_composer . CreateFakeElfdumpInfo ( <str> ) )   class TestCheckLicenseFilePlacementLicense ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testBadLicensePlacement ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( <str> ) ) self . error_mgr_mock . ReportError ( <str> , <str> <str> )  def testGoodRandomFileWithSuffix ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( <str> ) )  def testGoodRandomFile ( self ) :      <str> self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( <str> ) )   class TestCheckObsoleteDepsCups ( CheckTestHelper , unittest . TestCase ) :    <str> FUNCTION_NAME = <str> def testObsoleteDependency ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( ( <str> , None ) ) self . error_mgr_mock . ReportError ( <str> , <str> )   class TestCheckBaseDirs ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testBaseDirectoryNeeded ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , type_ = <str> , target = <str> ) ) self . error_mgr_mock . NeedFile ( <str> , mox . IsA ( str ) )   class TestCheckBaseDirsNotNoneClass ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testNeedBaseDir ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , class_ = <str> ) ) self . error_mgr_mock . NeedFile ( <str> , mox . IsA ( str ) )   class TestCheckDanglingSymlinks ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testSymlinkTargetNeeded ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , class_ = <str> , type_ = <str> , target = <str> , ) ) self . error_mgr_mock . NeedFile ( <str> , mox . IsA ( str ) )  def disabledtestHardlinkTargetNeeded ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) self . pkg_data [ <str> ] . append ( self . TestPkgmapEntry ( entry_path = <str> , class_ = <str> , type_ = <str> , target = <str> , ) ) self . error_mgr_mock . NeedFile ( <str> , mox . IsA ( str ) )   class TestCheckCatalognameMatchesPkgname ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testMismatch ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) basic_stats = self . pkg_data [ <str> ] basic_stats [ <str> ] = <str> basic_stats [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> , <str> <str> )  def testGoodMatch ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] )   class TestCheckCatalognameMatchesPkgname ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testRepositoryInfoGood ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] )  def testRepositoryInfoMissing ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) del self . pkg_data [ <str> ] [ <str> ] self . error_mgr_mock . ReportError ( <str> )  def testRepositoryInfoUncommitted ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats [ 0 ] ) self . pkg_data [ <str> ] [ <str> ] = ( <str> <str> ) self . error_mgr_mock . ReportError ( <str> )   class TestCheck64bitBinariesPresence ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testFull32bitsPackage ( self ) :      self . pkg_data = copy . deepcopy ( vsftpd_stats [ 0 ] )  def testMissingIntel64bitLibraries ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) bdi = self . pkg_data [ <str> ] bdi = [ representations . BinaryDumpInfo . _make ( x ) for x in bdi ] bdi = [ x for x in bdi if <str> not in x . path ] self . pkg_data [ <str> ] = bdi self . error_mgr_mock . ReportError ( <str> )  def testMissingPkginfoEntry ( self ) :      del self . pkg_data [ <str> ] [ <str> ] self . error_mgr_mock . ReportError ( <str> , <str> )  def testMissingSparc64bitLibraries ( self ) :      self . pkg_data = copy . deepcopy ( sudo_stats [ 0 ] ) self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )  def testMissing64bitExecutable ( self ) :      self . pkg_data = copy . deepcopy ( sudo_stats [ 0 ] ) self . pkg_data [ <str> ] [ <str> ] = <str> self . error_mgr_mock . ReportError ( <str> )   class TestRemovePackagesUnderInstallation ( unittest . TestCase ) :    def testRemoveNone ( self ) :      paths_and_pkgs_by_soname = { <str> : { <str> : [ <str> ] } } packages_to_be_installed = [ <str> ] self . assertEqual ( paths_and_pkgs_by_soname , pc . RemovePackagesUnderInstallation ( paths_and_pkgs_by_soname , packages_to_be_installed ) )  def testRemoveOne ( self ) :      paths_and_pkgs_by_soname = { <str> : { <str> : [ <str> ] } } packages_to_be_installed = [ <str> ] self . assertEqual ( { <str> : { } } , pc . RemovePackagesUnderInstallation ( paths_and_pkgs_by_soname , packages_to_be_installed ) )   class TestCheckBadContent ( CheckTestHelper , unittest . TestCase ) :    FUNCTION_NAME = <str> def testGoodFiles ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] = { <str> : [ <str> ] , }  def testBadFiles ( self ) :      self . pkg_data = copy . deepcopy ( neon_stats [ 0 ] ) self . pkg_data [ <str> ] = { <str> : [ <str> ] , } self . error_mgr_mock . ReportError ( <str> , <str> )   if __name__ == <str> :    unittest . main ( )   