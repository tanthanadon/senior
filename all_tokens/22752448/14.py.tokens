import cjson import jinja2 import logging import optparse import os import sys from collections import namedtuple from lib . python import common_constants from lib . python import configuration from lib . python import rest from lib . python . safe_remove_package import RevDeps logging . basicConfig ( format = <str> ) logger = logging . getLogger ( __name__ ) DATA_DIR = configuration . CHECKPKG_DIR % os . environ CATALOG_CACHE_FILENAME_TMPL = os . path . join ( DATA_DIR , <str> ) PKGS_TO_REMOVE_TMPL = <str> PKGS_TO_REBUILD_TMPL = <str> CatSubSet = namedtuple ( <str> , [ <str> , <str> , <str> , <str> , <str> , <str> ] ) REBUILD_TMPL = class CompCatalog ( object ) :    def __init__ ( self , name , arch , osrel , rest_client ) :      self . catrel = name self . arch = arch self . osrel = osrel self . rest_client = rest_client self . cached_stats = rest . CachedPkgstats ( os . path . join ( DATA_DIR , <str> ) , rest_client )  def CatSubSetFromFull ( self , pkgitems ) :      pkgname = pkgitems [ <str> ] [ <str> ] pkgdeplst = [ i [ 0 ] for i in pkgitems [ <str> ] ] maintainer = pkgitems [ <str> ] [ <str> ] . split ( <str> ) [ 0 ] return CatSubSet ( pkgname , pkgitems [ <str> ] [ <str> ] , pkgitems [ <str> ] [ <str> ] , pkgitems [ <str> ] [ <str> ] [ <str> ] , tuple ( pkgdeplst ) , maintainer )  def __getCat ( self , catrel , arch , osrel ) :      logging . info ( <str> % ( catrel , arch , osrel ) ) pkg_by_pkgname = { } cat = self . rest_client . GetCatalog ( catrel , arch , osrel ) for pkg in cat :        pkgitems = self . rest_client . GetPkgstatsByMd5 ( pkg [ <str> ] ) catsubset = self . CatSubSetFromFull ( pkgitems ) pkg_by_pkgname [ catsubset . pkgname ] = catsubset  return pkg_by_pkgname  def getCatalog ( self ) :      return self . __getCat ( self . catrel , self . arch , self . osrel )   def processCat ( catrel , arch , osrel , rest_client ) :      logger . info ( <str> % ( catrel , arch , osrel ) ) cc = CompCatalog ( catrel , arch , osrel , rest_client ) pkg_by_pkgname = cc . getCatalog ( ) logger . info ( <str> % ( catrel ) ) rev_deps_access = RevDeps ( rest_client ) rev_deps_by_pkg = { } for pkgname in pkg_by_pkgname :          pkg = pkg_by_pkgname [ pkgname ] revdeps = rev_deps_access . RevDepsByPkg ( catrel , arch , osrel , pkgname ) revdep_pkgs = [ ] for _ , pkgname in revdeps :            revdep_pkg = pkg_by_pkgname [ pkgname ] revdep_pkgs . append ( revdep_pkg )  try :            rev_deps_by_pkg [ pkg ] = revdep_pkgs  except TypeError :            logging . fatal ( <str> , pkg ) raise   logger . info ( <str> % ( catrel , arch , osrel ) ) return pkg_by_pkgname , rev_deps_by_pkg  def ComputeRemoveAndRebuild ( oldcatrel , newcatrel , arch , osrel , rest_client ) :      newcatlst , newrevdeplst = processCat ( newcatrel , arch , osrel , rest_client ) oldcatlst , oldrevdeplst = processCat ( oldcatrel , arch , osrel , rest_client ) obsolete_pkgs_by_pkgname = { } to_remove_candidates = [ ] rebuildlst = set ( ) logger . debug ( <str> % newcatrel ) for pkg in newrevdeplst :          catalogname = pkg . catalogname if catalogname . endswith ( <str> ) :              obsolete_pkgs_by_pkgname [ pkg . pkgname ] = pkg if not newrevdeplst [ pkg ] :                  to_remove_candidates . append ( pkg ) logger . debug ( <str> . format ( pkg . pkgname , catalogname ) )  else :                  for new_rev_dep in newrevdeplst [ pkg ] :                      is_newpkg_stub = new_rev_dep . catalogname . endswith ( <str> ) if new_rev_dep not in rebuildlst and not is_newpkg_stub :                            rebuildlst . add ( new_rev_dep ) logger . info ( <str> . format ( pkg . pkgname , pkg . catalogname , newcatrel , <str> % ( new_rev_dep . pkgname , new_rev_dep . catalogname ) ) )      pkgs_to_drop = [ ] logger . debug ( <str> % newcatrel ) for pkg in to_remove_candidates :          if pkg in oldrevdeplst :              pkgs_to_drop . append ( pkg ) logger . info ( <str> . format ( pkg . pkgname , pkg . catalogname , newcatrel ) )  else :              logger . info ( <str> . format ( pkg . pkgname , oldcatrel ) )   return pkgs_to_drop , rebuildlst , obsolete_pkgs_by_pkgname  def WriteToTextFiles ( pkgs_to_drop , pkgs_to_rebuild , newcatrel , arch , osrel , obsolete ) :      print ( <str> % ( PKGS_TO_REMOVE_TMPL % ( newcatrel , osrel , arch ) ) ) with open ( PKGS_TO_REMOVE_TMPL % ( newcatrel , osrel , arch ) , <str> ) as fd :          for pkg in sorted ( pkgs_to_drop , key = lambda p : p . catalogname ) :              fd . write ( pkg . catalogname + <str> )   logger . info ( <str> % len ( pkgs_to_drop ) ) print ( <str> % ( PKGS_TO_REBUILD_TMPL % ( newcatrel , osrel , arch ) ) ) with open ( PKGS_TO_REBUILD_TMPL % ( newcatrel , osrel , arch ) , <str> ) as fd :          template = jinja2 . Template ( REBUILD_TMPL ) pkgs = sorted ( pkgs_to_rebuild , key = lambda p : ( p . maintainer , p . catalogname ) ) fd . write ( template . render ( catrel = newcatrel , osrel = osrel , arch = arch , pkgs = pkgs , obsolete = obsolete ) )  logger . info ( <str> % len ( pkgs_to_rebuild ) )  def GetCLIOptions ( ) :      parser = optparse . OptionParser ( ) parser . add_option ( <str> , dest = <str> , action = <str> ) parser . add_option ( <str> , dest = <str> , action = <str> ) parser . add_option ( <str> , dest = <str> , default = <str> , help = <str> , metavar = <str> ) parser . add_option ( <str> , dest = <str> , default = <str> , help = <str> , metavar = <str> ) parser . add_option ( <str> , dest = <str> , default = <str> , help = <str> , metavar = <str> ) parser . add_option ( <str> , dest = <str> , default = <str> , help = <str> , metavar = <str> ) options , args = parser . parse_args ( ) opterror = False if options . verbose :          logger . setLevel ( logging . INFO )  if options . debug :          logger . setLevel ( logging . DEBUG )  if options . newcatalog in common_constants . DEFAULT_CATALOG_RELEASES :          newcatrel = options . newcatalog  else :          logger . error ( <str> , options . newcatalog ) opterror = True  if options . oldcatalog in common_constants . DEFAULT_CATALOG_RELEASES :          oldcatrel = options . oldcatalog  else :          logger . error ( <str> , options . newcatalog ) opterror = True  if options . arch in common_constants . PHYSICAL_ARCHITECTURES :          arch = options . arch  else :          logger . error ( <str> , options . arch ) opterror = True  if options . osrel in common_constants . OS_RELS :          osrel = options . osrel  else :          logger . error ( <str> , options . osrel ) opterror = True  if opterror :          sys . exit ( 1 )  return oldcatrel , newcatrel , arch , osrel  def main ( ) :      oldcatrel , newcatrel , arch , osrel = GetCLIOptions ( ) config = configuration . GetConfig ( ) username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password ) removelst , rebuildlst , obsolete = ( ComputeRemoveAndRebuild ( oldcatrel , newcatrel , arch , osrel , rest_client ) ) WriteToTextFiles ( removelst , rebuildlst , newcatrel , arch , osrel , obsolete )  if __name__ == <str> :      main ( )   