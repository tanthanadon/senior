import unittest import overrides import re import tag class ParseOverrideLineUnitTest ( unittest . TestCase ) :    def setUp ( self ) :      line1 = <str> line2 = <str> line3 = <str> line4 = ( <str> <str> <str> ) self . o1 = overrides . ParseOverrideLine ( line1 ) self . o2 = overrides . ParseOverrideLine ( line2 ) self . o3 = overrides . ParseOverrideLine ( line3 ) self . o4 = overrides . ParseOverrideLine ( line4 )  def test_ParseOverridesLine1 ( self ) :      self . assertEqual ( <str> , self . o1 . pkgname )  def test_ParseOverridesLine2 ( self ) :      self . assertEqual ( <str> , self . o1 . tag_name )  def test_ParseOverridesLine3 ( self ) :      self . assertEqual ( None , self . o1 . tag_info )  def test_ParseOverridesLine4 ( self ) :      self . assertEqual ( <str> , self . o2 . tag_info )  def test_ParseOverridesLine5 ( self ) :      self . assertEqual ( <str> , self . o3 . pkgname )  def test_ParseOverridesLine6 ( self ) :      self . assertEqual ( <str> , self . o3 . tag_name )  def test_ParseOverridesLine7 ( self ) :      self . assertEqual ( <str> , self . o3 . tag_info )  def test_ParseOverridesLine_4_1 ( self ) :      self . assertEqual ( <str> , self . o4 . pkgname )  def test_ParseOverridesLine_4_2 ( self ) :      self . assertEqual ( <str> , self . o4 . tag_name )  def test_ParseOverridesLine_4_3 ( self ) :      self . assertEqual ( <str> , self . o4 . tag_info )   class DisabledApplyOverridesUnitTest ( object ) :    DATA_1 = ( ( None , <str> , <str> , None , <str> , <str> , None ) , ) def test_1a ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> ) ] oo = [ ] self . assertEqual ( ( tags , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_1b ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> ) ] oo = [ overrides . Override ( None , <str> , None ) ] self . assertEqual ( ( [ ] , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_1c ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> ) ] oo = [ overrides . Override ( None , <str> , None ) ] self . assertEqual ( ( [ ] , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_2 ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> ) ] oo = [ overrides . Override ( None , <str> , None ) ] self . assertEqual ( ( [ ] , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_3 ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> , <str> ) ] oo = [ overrides . Override ( None , <str> , <str> ) ] self . assertEqual ( ( tags , set ( oo ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_4 ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> , <str> ) ] oo = [ overrides . Override ( None , <str> , <str> ) ] self . assertEqual ( ( [ ] , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_5 ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> , <str> ) ] oo = [ overrides . Override ( <str> , <str> , <str> ) ] self . assertEqual ( ( [ ] , set ( [ ] ) ) , overrides . ApplyOverrides ( tags , oo ) )  def test_6 ( self ) :      tags = [ tag . CheckpkgTag ( <str> , <str> , <str> ) ] oo = [ overrides . Override ( <str> , <str> , <str> ) ] self . assertEqual ( ( tags , set ( oo ) ) , overrides . ApplyOverrides ( tags , oo ) )   if __name__ == <str> :    unittest . main ( )   