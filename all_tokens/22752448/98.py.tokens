import Cheetah import mox import unittest from lib . python import integrate_catalogs OUT_1 = <str> OUT_2 = OUT_1 + class TemplateUnitTest ( mox . MoxTestBase ) :    def testTemplateMinimal ( self ) :      self . maxDiff = None bundles_by_catalogname = { } bundles_by_md5 = { } diffs_by_catalogname = { } namespace = { <str> : bundles_by_catalogname , <str> : bundles_by_md5 , <str> : diffs_by_catalogname , <str> : <str> , <str> : <str> , <str> : <str> , } t = Cheetah . Template . Template ( integrate_catalogs . CATALOG_MOD_TMPL , searchList = [ namespace ] ) self . assertEqual ( OUT_1 . splitlines ( ) , unicode ( t ) . splitlines ( ) )  def testTemplateUpgrade ( self ) :      self . maxDiff = None bundles_by_catalogname = { <str> : [ ] , <str> : [ ] , } bundles_by_md5 = { <str> : [ ] , } catalogs = { ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } , { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } , ] , ( <str> , <str> , <str> ) : [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } , ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } , ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , ( <str> , <str> , <str> ) : [ ] , } diffs_by_catalogname = integrate_catalogs . ComposeDiffsByCatalogname ( catalogs , <str> , <str> , True , True ) namespace = { <str> : bundles_by_catalogname , <str> : bundles_by_md5 , <str> : diffs_by_catalogname , <str> : <str> , <str> : <str> , <str> : <str> , } t = Cheetah . Template . Template ( integrate_catalogs . CATALOG_MOD_TMPL , searchList = [ namespace ] ) self . assertEqual ( OUT_2 . splitlines ( ) , unicode ( t ) . splitlines ( ) )   if __name__ == <str> :    unittest . main ( )   