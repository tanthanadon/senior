try :    import unittest2 as unittest  except ImportError :    import unittest  import mox import copy from lib . python import csw_upload_pkg from lib . python import rest GDB_STRUCT_8 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 7616184 , <str> : <str> , } GDB_STRUCT_9 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 7616184 , <str> : <str> , } GDB_STRUCT_10 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 7617270 , <str> : <str> , } GDB_STRUCT_11 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : None , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : 7617270 , <str> : <str> , } TEST_PLANNED_MODIFICATIONS_1 = [ ( <str> , <str> , <str> , <str> , <str> , <str> ) , ( <str> , <str> , <str> , <str> , <str> , <str> ) , ( <str> , <str> , <str> , <str> , <str> , <str> ) , ] class Srv4UploaderUnitTest ( mox . MoxTestBase ) :    def MockRestClient ( self , rest_client_mock ) :      rest . RestClient ( password = None , username = None , pkgdb_url = mox . IsA ( str ) , releases_url = mox . IsA ( str ) , ) . AndReturn ( rest_client_mock )  def test_MatchSrv4ToCatalogsSame ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsDifferent ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsNewerPackage ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsSameSpecificOsrel ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , os_release = <str> ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsAbsentFromAll ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( None ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( None ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( None ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsSameSpecificOsrelAlreadyPresent ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , os_release = <str> ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsNotPresent ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_9 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( None ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , os_release = <str> ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsFirstNotPresent ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( None ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_10 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )  def test_MatchSrv4ToCatalogsSolaris8 ( self ) :      rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) self . MockRestClient ( rest_client_mock ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_8 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_8 ) rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> , <str> ) . AndReturn ( GDB_STRUCT_8 ) self . mox . ReplayAll ( ) su = csw_upload_pkg . Srv4Uploader ( None , None ) result = su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) expected = ( ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ) self . assertEquals ( expected , result )   class Srv4UploaderDataDrivenUnitTest ( mox . MoxTestBase ) :    DATA = ( ( ( None , None , None ) , 9 , None , ( 9 , 10 , 11 ) ) , ( ( None , None , 9 ) , 9 , None , ( 9 , 10 , 11 ) ) , ( ( None , 9 , 9 ) , 9 , None , ( 9 , 10 , 11 ) ) , ( ( 8 , 8 , 8 ) , 9 , None , ( 9 , 10 , 11 ) ) , ( ( 9 , 9 , 9 ) , 9 , None , ( 9 , 10 , 11 ) ) , ( ( None , 9 , 10 ) , 9 , None , ( 9 , 10 ) ) , ( ( 9 , 9 , 10 ) , 9 , None , ( 9 , 10 ) ) , ( ( 9 , 10 , 10 ) , 9 , None , ( 9 , ) ) , ( ( 9 , 10 , 10 ) , 9 , 9 , ( 9 , ) ) , ( ( 9 , 10 , 10 ) , 9 , 10 , ( 10 , ) ) , ( ( 9 , 9 , 10 ) , 9 , 10 , ( 10 , ) ) , ( ( 9 , 9 , 10 ) , 9 , 11 , ( 11 , ) ) , ( ( None , None ) , 10 , None , ( 10 , 11 ) ) , ( ( None , 10 ) , 10 , None , ( 10 , 11 ) ) , ( ( 10 , 10 ) , 10 , None , ( 10 , 11 ) ) , ( ( 10 , 11 ) , 10 , None , ( 10 , ) ) , ( ( None , 10 ) , 10 , None , ( 10 , 11 , ) ) , ) BASENAME = <str> MD5_SUM = <str> def testAllPossibilities ( self ) :      for ( in_catalog , pkg_osrel , osrel_spec , expected_rels ) in self . DATA :        self . DataPointTest ( in_catalog , pkg_osrel , osrel_spec , expected_rels )   def DataPointTest ( self , in_catalog , pkg_osrel , osrel_spec , expected_rels ) :      pkg_struct_map = { None : None , 8 : GDB_STRUCT_8 , 9 : GDB_STRUCT_9 , 10 : GDB_STRUCT_10 , 11 : GDB_STRUCT_11 , } rest_client_mock = self . mox . CreateMock ( rest . RestClient ) self . mox . StubOutWithMock ( rest , <str> ) rest . RestClient ( password = None , username = None , pkgdb_url = mox . IsA ( str ) , releases_url = mox . IsA ( str ) , ) . AndReturn ( rest_client_mock ) for i , os_n in enumerate ( in_catalog , 3 - len ( in_catalog ) ) :        pkg_struct = pkg_struct_map [ os_n ] rest_client_mock . Srv4ByCatalogAndCatalogname ( <str> , <str> , <str> % ( i + 9 ) , <str> ) . AndReturn ( pkg_struct )  self . mox . ReplayAll ( ) os_release_to_specify = <str> % osrel_spec if osrel_spec else None su = csw_upload_pkg . Srv4Uploader ( None , os_release = os_release_to_specify ) result = su . _MatchSrv4ToCatalogs ( self . BASENAME , <str> , <str> , <str> % pkg_osrel , self . MD5_SUM ) expected = [ ] for n in expected_rels :        expected . append ( ( <str> , <str> , <str> % n ) )  expected = tuple ( expected ) self . assertEquals ( expected , result ) self . mox . ResetAll ( ) self . mox . UnsetStubs ( )  def test_CheckpkgSets ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) expected = { ( <str> , <str> ) : [ ( <str> , <str> ) ] , ( <str> , <str> ) : [ ( <str> , <str> ) , ( <str> , <str> ) ] } self . assertEqual ( expected , su . _CheckpkgSets ( TEST_PLANNED_MODIFICATIONS_1 ) )  def testSortFilenames ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) wrong_order = [ <str> , <str> , <str> , <str> , ] good_order = [ <str> , <str> , <str> , <str> , ] self . assertEqual ( good_order , su . SortFilenames ( wrong_order ) )  def testSortFilenamesThrowsDataError ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) wrong_order = [ <str> , <str> , <str> , <str> , ] self . assertRaises ( csw_upload_pkg . DataError , su . SortFilenames , wrong_order )  def testPluralS0 ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) self . assertEqual ( <str> , su . _PluralS ( 0 ) )  def testPluralS1 ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) self . assertEqual ( <str> , su . _PluralS ( 1 ) )  def testPluralSMany ( self ) :      su = csw_upload_pkg . Srv4Uploader ( None , None ) self . assertEqual ( <str> , su . _PluralS ( 2 ) )   class Srv4UploaderIntegrationUnitTest ( mox . MoxTestBase ) :    def testUploadOrder ( self ) :      wrong_order = [ <str> , <str> , ] su = csw_upload_pkg . Srv4Uploader ( wrong_order , <str> , output_to_screen = False ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) import_metadata_mock = self . mox . StubOutWithMock ( su , <str> ) rest_mock = self . mox . CreateMock ( rest . RestClient ) rest_mock . RegisterLevelTwo ( <str> ) rest_mock . RegisterLevelTwo ( <str> ) su . _rest_client = rest_mock su . _ImportMetadata ( <str> ) su . _GetFileMd5sum ( wrong_order [ 1 ] ) . AndReturn ( <str> ) su . _GetSrv4FileMetadata ( <str> ) . AndReturn ( ( True , GDB_STRUCT_9 ) ) su . _ImportMetadata ( <str> ) su . _GetFileMd5sum ( wrong_order [ 0 ] ) . AndReturn ( <str> ) su . _GetSrv4FileMetadata ( <str> ) . AndReturn ( ( True , GDB_STRUCT_10 ) ) su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) . AndReturn ( ( ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ) ) su . _MatchSrv4ToCatalogs ( <str> , <str> , <str> , <str> , <str> ) . AndReturn ( ( ( <str> , <str> , <str> ) , ) ) su . _RunCheckpkg ( { ( <str> , <str> ) : [ ( <str> , <str> ) , ( <str> , <str> ) ] , ( <str> , <str> ) : [ ( <str> , <str> ) ] } ) . AndReturn ( True ) su . _InsertIntoCatalog ( <str> , <str> , <str> , GDB_STRUCT_9 ) su . _InsertIntoCatalog ( <str> , <str> , <str> , GDB_STRUCT_10 ) su . _InsertIntoCatalog ( <str> , <str> , <str> , GDB_STRUCT_9 ) self . mox . ReplayAll ( ) su . Upload ( )   if __name__ == <str> :    unittest . main ( )   