import cjson import copy import dateutil . parser import itertools import logging import mute_progressbar import os import pprint import progressbar import progressbar . widgets import re import sqlobject import subprocess import sys from sqlobject import sqlbuilder from lib . python import catalog from lib . python import configuration from lib . python import database from lib . python import errors from lib . python import models from lib . python import opencsw from lib . python import overrides from lib . python import rest from lib . python import sharedlib_utils from lib . python import shell from lib . python import tag class PackageError ( errors . Error ) :     class PackageStats ( object ) :    def __init__ ( self , srv4_pkg , stats_basedir = None , md5sum = None , debug = False ) :      super ( PackageStats , self ) . __init__ ( ) self . srv4_pkg = srv4_pkg self . md5sum = md5sum self . dir_format_pkg = None self . all_stats = { } self . db_pkg_stats = None config = configuration . GetConfig ( ) self . rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) )  def __unicode__ ( self ) :      return ( <str> % ( self . srv4_pkg , self . md5sum ) )  def GetDbObject ( self ) :      if not self . db_pkg_stats :        md5_sum = self . GetMd5sum ( ) logging . debug ( <str> , self , md5_sum ) res = models . Srv4FileStats . select ( models . Srv4FileStats . q . md5_sum == md5_sum ) try :          self . db_pkg_stats = res . getOne ( )  except sqlobject . SQLObjectNotFound as e :          logging . debug ( <str> , md5_sum ) return None  logging . debug ( <str> , md5_sum )  return self . db_pkg_stats  def GetAllStats ( self ) :      if not self . all_stats and self . StatsExist ( ) :        self . all_stats = self . ReadSavedStats ( )  elif not self . all_stats :        self . all_stats = self . CollectStats ( )  return self . all_stats  def GetSavedOverrides ( self ) :      if not self . StatsExist ( ) :        raise PackageError ( <str> )  pkg_stats = self . GetDbObject ( ) res = models . CheckpkgOverride . select ( models . CheckpkgOverride . q . srv4_file == pkg_stats ) override_list = [ ] for db_override in res :        d = { <str> : db_override . pkgname , <str> : db_override . tag_name , <str> : db_override . tag_info , } override_list . append ( overrides . Override ( ** d ) )  return override_list  def GetSavedErrorTags ( self ) :      pkg_stats = self . GetDbObject ( ) res = models . CheckpkgErrorTag . select ( models . CheckpkgErrorTag . q . srv4_file == pkg_stats ) tag_list = [ tag . CheckpkgTag ( x . pkgname , x . tag_name , x . tag_info , x . msg ) for x in res ] return tag_list  def ReadSavedStats ( self ) :      return self . rest_client . GetBlob ( <str> , self . GetMd5sum ( ) )   class StatsCollector ( object ) :    def __init__ ( self , logger = None , debug = False ) :      if logger :        self . logger = logger  else :        self . logger = logging  self . debug = debug self . config = configuration . GetConfig ( ) self . rest_client = rest . RestClient ( pkgdb_url = self . config . get ( <str> , <str> ) , releases_url = self . config . get ( <str> , <str> ) )  def CollectStatsFromCatalogEntries ( self , catalog_entries , force_unpack = False ) :      args_display = [ x [ <str> ] for x in catalog_entries ] if len ( args_display ) > 5 :        args_display = args_display [ : 5 ] + [ <str> ]  self . logger . debug ( <str> , args_display ) md5_sum_list = [ ] total_packages = len ( catalog_entries ) if not total_packages :        raise PackageError ( <str> )  counter = itertools . count ( 1 ) self . logger . info ( <str> ) if self . debug :        pbar = mute_progressbar . MuteProgressBar ( )  else :        pbar = progressbar . ProgressBar ( widgets = [ progressbar . widgets . Percentage ( ) , <str> , progressbar . widgets . ETA ( ) , <str> , progressbar . widgets . Bar ( ) ] ) pbar . maxval = total_packages pbar . start ( )  base_dir , _ = os . path . split ( __file__ ) collect_pkg_metadata = os . path . join ( base_dir , <str> ) for catalog_entry in catalog_entries :        pkg_file_name = catalog_entry [ <str> ] args = [ collect_pkg_metadata ] stderr_file = subprocess . PIPE if self . debug :          args . append ( <str> ) stderr_file = None  if force_unpack :          args += [ <str> ]  args += [ <str> , pkg_file_name ] ret_code , stdout , stderr = shell . ShellCommand ( args , allow_error = False , stderr = stderr_file ) try :          data_back = cjson . decode ( stdout ) if data_back [ <str> ] != catalog_entry [ <str> ] :            msg = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> % ( catalog_entry [ <str> ] , catalog_entry [ <str> ] , catalog_entry [ <str> ] , data_back [ <str> ] ) ) raise PackageError ( msg )  md5_sum_list . append ( data_back [ <str> ] )  except cjson . DecodeError :          logging . fatal ( <str> , stdout ) raise  pbar . update ( counter . next ( ) )  pbar . finish ( ) return md5_sum_list    