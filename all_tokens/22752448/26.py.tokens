import copy import mox import unittest import pprint from lib . python import checkpkg_lib from lib . python import dependency_checks from lib . python import representations from lib . python import test_base from lib . python . testdata import stubs from lib . python . testdata import tree_stats from lib . python . testdata . javasvn_stats import pkgstats as javasvn_stats from lib . python . testdata . sudo_stats import pkgstats as sudo_stats class TestGetPkgByFullPath ( unittest . TestCase ) :    def testOneCall ( self ) :      path_list = [ <str> , <str> ] pkg_by_path = { <str> : [ <str> ] } expected = { <str> : [ <str> ] , <str> : [ <str> ] } self . mox = mox . Mox ( ) self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . SetCheckInterface ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> ] ) self . mox . ReplayAll ( ) logger_stub = stubs . LoggerStub ( ) self . assertEqual ( expected , dependency_checks . GetPkgByFullPath ( self . error_mgr_mock , logger_stub , path_list , pkg_by_path ) ) self . mox . VerifyAll ( )  def testDodgyCall ( self ) :      paths_to_verify = set ( [ <str> , <str> , <str> , <str> ] ) pkg_by_path = { <str> : [ <str> ] , <str> : [ <str> ] } self . mox = mox . Mox ( ) self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . SetCheckInterface ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> ] ) self . error_mgr_mock . GetPkgByPath ( <str> ) . AndReturn ( [ <str> ] ) self . mox . ReplayAll ( ) logger_stub = stubs . LoggerStub ( ) expected = { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } self . assertEqual ( expected , dependency_checks . GetPkgByFullPath ( self . error_mgr_mock , logger_stub , paths_to_verify , pkg_by_path ) ) self . mox . VerifyAll ( )   class TestByDirectory ( unittest . TestCase ) :    def setUp ( self ) :      self . mox = mox . Mox ( ) self . logger_stub = stubs . LoggerStub ( ) self . messenger_stub = stubs . MessengerStub ( ) self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . SetCheckInterface ) self . pkg_data = copy . deepcopy ( tree_stats . pkgstats [ 0 ] )  def testByDirectory_1 ( self ) :      path_and_pkg_by_basename = { <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } } pkg_by_path = { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } result = dependency_checks . ByDirectory ( self . pkg_data , self . error_mgr_mock , self . logger_stub , self . messenger_stub , path_and_pkg_by_basename , pkg_by_path )  def testByDirectory_2 ( self ) :      path_and_pkg_by_basename = { <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } } pkg_by_path = { <str> : [ <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } result = dependency_checks . ByDirectory ( self . pkg_data , self . error_mgr_mock , self . logger_stub , self . messenger_stub , path_and_pkg_by_basename , pkg_by_path ) expected = [ [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] , [ ( <str> , <str> ) ] ] self . assertEquals ( expected , result )   class TestLibraries ( test_base . PackageStatsMixin , mox . MoxTestBase ) :    def setUp ( self ) :      super ( TestLibraries , self ) . setUp ( ) self . logger_stub = stubs . LoggerStub ( ) self . messenger_stub = stubs . MessengerStub ( ) self . error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . SetCheckInterface ) self . pkg_data = copy . deepcopy ( sudo_stats [ 0 ] )  def testLibrariesRpathOrder ( self ) :      pass  def testByFilename ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats . pkgstats [ 0 ] ) self . PrepareElfinfo ( self . pkg_data ) self . pkg_data [ <str> ] = [ representations . PkgmapEntry ( line = <str> , class_ = <str> , mode = <str> , owner = <str> , group = <str> , path = <str> , target = None , type_ = <str> , major = None , minor = None , size = None , cksum = None , modtime = None , pkgnames = None ) ] self . error_mgr_mock . NeedPackage ( <str> , <str> , <str> <str> ) self . mox . ReplayAll ( ) result = dependency_checks . ByFilename ( self . pkg_data , self . error_mgr_mock , self . logger_stub , self . messenger_stub , None , None ) self . mox . VerifyAll ( )  def testLibraries_1 ( self ) :      self . pkg_data = copy . deepcopy ( tree_stats . pkgstats [ 0 ] ) self . PrepareElfinfo ( self . pkg_data ) path_and_pkg_by_basename = { <str> : { <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } , <str> : { <str> : [ <str> ] , <str> : [ <str> ] } , <str> : { <str> : [ <str> ] } } pkg_by_path = { <str> : [ <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> , <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] , <str> : [ <str> , <str> ] , <str> : [ <str> ] , <str> : [ <str> ] } self . error_mgr_mock . NeedFile ( <str> , <str> , <str> ) self . error_mgr_mock . GetElfdumpInfo ( <str> ) . AndReturn ( self . pkg_data [ <str> ] [ <str> ] ) self . mox . ReplayAll ( ) result = dependency_checks . Libraries ( self . pkg_data , self . error_mgr_mock , self . logger_stub , self . messenger_stub , path_and_pkg_by_basename , pkg_by_path ) self . mox . VerifyAll ( )   class SuggestLibraryPackage ( mox . MoxTestBase ) :    def testBasic ( self ) :      error_mgr_mock = self . mox . CreateMock ( checkpkg_lib . IndividualCheckInterface ) messenger_mock = self . mox . CreateMock ( checkpkg_lib . CheckpkgMessenger ) pkgname = <str> catalogname = <str> description = <str> lib_path = <str> lib_basename = <str> lib_soname = <str> base_pkgname = <str> messenger_mock . SuggestGarLine ( <str> ) messenger_mock . SuggestGarLine ( <str> ) messenger_mock . SuggestGarLine ( <str> ) messenger_mock . SuggestGarLine ( <str> <str> ) messenger_mock . SuggestGarLine ( <str> <str> ) messenger_mock . SuggestGarLine ( <str> ) messenger_mock . SuggestGarLine ( <str> ) messenger_mock . SuggestGarLine ( <str> ) self . mox . ReplayAll ( ) dependency_checks . SuggestLibraryPackage ( error_mgr_mock , messenger_mock , pkgname , catalogname , description , lib_path , lib_basename , lib_soname , base_pkgname )   if __name__ == <str> :    unittest . main ( )   