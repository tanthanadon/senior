import copy import datetime import opencsw import os . path import re import unittest from Cheetah import Template CATALOG_DATA_1 = TEST_PKGINFO = SUBMITPKG_DATA_1 = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : datetime . datetime ( 2010 , 2 , 21 , 12 , 52 , 44 , 295766 ) , <str> : None , <str> : [ { <str> : <str> , <str> : ( <str> , <str> ) , <str> : [ { <str> : <str> } , { <str> : <str> } ] , <str> : <str> , <str> : opencsw . PATCHLEVEL , } ] , <str> : <str> } SUBMITPKG_EXPECTED_1 = <str> class ParsePackageFileNameTest ( unittest . TestCase ) :    def testParsePackageFileName1 ( self ) :      test_data = open ( os . path . join ( os . path . split ( __file__ ) [ 0 ] , <str> ) ) split_re = re . compile ( <str> ) for line in test_data :        fields = re . split ( split_re , line ) catalogname = fields [ 0 ] pkg_version = fields [ 1 ] pkgname = fields [ 2 ] file_name = fields [ 3 ] pkg_md5 = fields [ 4 ] pkg_size = fields [ 5 ] depends_on = fields [ 6 ] compiled = opencsw . ParsePackageFileName ( file_name ) self . assertTrue ( compiled , <str> % repr ( file_name ) ) self . assertEqual ( catalogname , compiled [ <str> ] ) self . assertEqual ( pkg_version , compiled [ <str> ] )   def testParsePackageFileName_RichpSe ( self ) :      file_name = <str> parsed = opencsw . ParsePackageFileName ( file_name ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> )  def testParsePackageFileName_OneDashTooMany ( self ) :      file_name = ( <str> <str> ) parsed = opencsw . ParsePackageFileName ( file_name ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> )  def testParsePackageFileName_Achievo ( self ) :      file_name = ( <str> ) parsed = opencsw . ParsePackageFileName ( file_name ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> ) self . assertEqual ( parsed [ <str> ] , <str> )  def testParsePackageFileName_Nonsense ( self ) :      file_name = <str> parsed = opencsw . ParsePackageFileName ( file_name )   class ParsePackageFileNameTest_2 ( unittest . TestCase ) :    def setUp ( self ) :      self . file_name = <str> self . parsed = opencsw . ParsePackageFileName ( self . file_name )  def testParsePackageFileName_2_1 ( self ) :      self . assertTrue ( <str> in self . parsed ) self . assertEqual ( self . parsed [ <str> ] , <str> )  def testParsePackageFileName_2_2 ( self ) :      self . assertTrue ( <str> in self . parsed ) self . assertEqual ( self . parsed [ <str> ] , <str> )  def testParsePackageFileName_2_3 ( self ) :      self . assertTrue ( <str> in self . parsed ) self . assertEqual ( self . parsed [ <str> ] , <str> )  def testParsePackageFileName_OldFormat ( self ) :      file_name = <str> parsed = opencsw . ParsePackageFileName ( file_name ) self . assertEqual ( <str> , parsed [ <str> ] )   class ComposePackageFileNameUnitTest ( unittest . TestCase ) :    def setUp ( self ) :      self . parsed = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : { <str> : <str> } , <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> , <str> : <str> } }  def testSimple ( self ) :      file_name = <str> self . assertEquals ( file_name , opencsw . ComposePackageFileName ( self . parsed ) )  def testMoreRev ( self ) :      file_name = <str> self . parsed [ <str> ] [ <str> ] = <str> self . assertEquals ( file_name , opencsw . ComposePackageFileName ( self . parsed ) )   class ParseVersionStringTest ( unittest . TestCase ) :    def test_NoRev ( self ) :      data = <str> expected = ( <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { } ) self . assertEqual ( expected , opencsw . ParseVersionString ( data ) )  def test_Text ( self ) :      data = <str> self . assertEquals ( tuple , type ( opencsw . ParseVersionString ( data ) ) )  def test_Empty ( self ) :      data = <str> expected = ( <str> , { <str> : <str> } , { } ) self . assertEqual ( expected , opencsw . ParseVersionString ( data ) )  def testSmallRev ( self ) :      data = <str> expected = ( <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : <str> , <str> : <str> } ) self . assertEqual ( expected , opencsw . ParseVersionString ( data ) )  def testExtraStringsHashable ( self ) :      data = <str> expected = ( <str> , { <str> : <str> , <str> : <str> } , { <str> : ( <str> , ) , <str> : <str> , } ) result = opencsw . ParseVersionString ( data ) hash ( result [ 2 ] [ <str> ] ) self . assertEqual ( expected , opencsw . ParseVersionString ( data ) )  def testThePflag ( self ) :      data = <str> expected = ( <str> , { <str> : <str> , <str> : <str> , <str> : <str> } , { <str> : ( <str> , ) , <str> : <str> } ) self . assertEqual ( expected , opencsw . ParseVersionString ( data ) )   class CompareVersionsTest ( unittest . TestCase ) :    V1 = <str> V2 = <str> def testLessThan ( self ) :      self . assertEqual ( - 1 , opencsw . CompareVersions ( self . V1 , self . V2 ) )  def testGreaterThan ( self ) :      self . assertEqual ( 1 , opencsw . CompareVersions ( self . V2 , self . V1 ) )  def testEquals ( self ) :      self . assertEqual ( 0 , opencsw . CompareVersions ( self . V1 , self . V1 ) )  def testRevNoRev ( self ) :      self . assertEqual ( - 1 , opencsw . CompareVersions ( <str> , self . V1 ) )  def testRevNoRevIgnoreVersion ( self ) :      self . assertEqual ( - 1 , opencsw . CompareVersions ( <str> , self . V1 ) )  def testNoRev ( self ) :      self . assertEqual ( - 1 , opencsw . CompareVersions ( <str> , <str> ) )  def testNoEqual ( self ) :      self . assertEqual ( 0 , opencsw . CompareVersions ( <str> , <str> ) )  def testParseRevisionInfo ( self ) :      r1 = { <str> : <str> } self . assertEqual ( ( 2010 , 0 7 , 13 ) , opencsw . ParseRevisionInfo ( r1 ) )  def testParseRevisionInfoEmpty ( self ) :      r1 = { } self . assertEqual ( ( ) , opencsw . ParseRevisionInfo ( r1 ) )   class UpgradeTypeTest ( unittest . TestCase ) :    def testUpgradeType_1 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) expected_data = { <str> : <str> , <str> : <str> , <str> : { <str> : <str> , <str> : <str> } , <str> : <str> , <str> : { <str> : <str> } , <str> : <str> , <str> : <str> , <str> : <str> } self . assertEqual ( expected_data , pkg . GetCatalogPkgData ( ) )  def testUpgradeType_2 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . REVISION , upgrade_type )  def testUpgradeType_3 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . MINOR_VERSION , upgrade_type )  def testUpgradeType_4 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . MAJOR_VERSION , upgrade_type )  def testUpgradeType_5 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . NEW_PACKAGE , upgrade_type )  def testUpgradeType_6 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . NO_VERSION_CHANGE , upgrade_type )  def testUpgradeType_7 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . REVISION_ADDED , upgrade_type )  def testUpgradeType_8 ( self ) :      pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) unused_old_version_string = <str> new_version_string = <str> upgrade_type , upgrade_description , vs = pkg . UpgradeType ( new_version_string ) self . assertEqual ( opencsw . PATCHLEVEL , upgrade_type )   class PackageTest ( unittest . TestCase ) :    def test_2 ( self ) :      expected = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } self . assertEquals ( expected , opencsw . ParsePkginfo ( TEST_PKGINFO . splitlines ( ) ) )  def testSplitByCase1 ( self ) :      self . assertEquals ( [ <str> , <str> ] , opencsw . SplitByCase ( <str> ) )  def testSplitByCase2 ( self ) :      self . assertEquals ( [ <str> , <str> , <str> ] , opencsw . SplitByCase ( <str> ) )  def testPkgnameToCatName1 ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatName2 ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatName3 ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatName4 ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatNameDifferentiatesByDigit ( self ) :      self . assertNotEquals ( opencsw . PkgnameToCatName ( <str> ) , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatNameDigit ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def testPkgnameToCatNameTwoDigits ( self ) :      self . assertEquals ( <str> , opencsw . PkgnameToCatName ( <str> ) )  def test_4 ( self ) :      pkginfo_dict = opencsw . ParsePkginfo ( TEST_PKGINFO . splitlines ( ) ) expected = <str> self . assertEquals ( expected , opencsw . PkginfoToSrv4Name ( pkginfo_dict ) )   class PackageGroupNameTest ( unittest . TestCase ) :    @ classmethod def CreatePkgList ( self , catalogname_list ) :      pkg_list = [ ] for name in catalogname_list :        pkg = opencsw . CatalogBasedOpencswPackage ( <str> ) pkg . LazyDownloadCatalogData ( CATALOG_DATA_1 . splitlines ( ) ) pkg_list . append ( pkg )  return pkg_list  def testPackageGroupName_0 ( self ) :      data = [ ( <str> , [ <str> ] ) , ( <str> , [ <str> , <str> ] ) , ( <str> , [ <str> , <str> , <str> ] ) , ( <str> , [ <str> , <str> ] ) , ( <str> , [ <str> , <str> ] ) , ( <str> , [ <str> , <str> , <str> , <str> ] ) , ] for expected_name , catalogname_list in data :        result = opencsw . CatalogNameGroupName ( catalogname_list ) self . assertEqual ( expected_name , result , <str> % ( catalogname_list , repr ( expected_name ) , repr ( result ) ) )    class SubmitpkgTemplateUnitTest ( unittest . TestCase ) :    def testTypicalUpgradeStrict ( self ) :      t = Template . Template ( opencsw . SUBMITPKG_TMPL , searchList = [ SUBMITPKG_DATA_1 ] ) self . assertEquals ( SUBMITPKG_EXPECTED_1 , unicode ( t ) )  def testWarningOnNoChange ( self ) :      submitpkg_data = copy . deepcopy ( SUBMITPKG_DATA_1 ) submitpkg_data [ <str> ] [ 0 ] [ <str> ] = opencsw . NO_VERSION_CHANGE t = Template . Template ( opencsw . SUBMITPKG_TMPL , searchList = [ submitpkg_data ] ) self . assertTrue ( re . search ( <str> , unicode ( t ) ) , unicode ( t ) )  def testNewPackage ( self ) :      submitpkg_data = copy . deepcopy ( SUBMITPKG_DATA_1 ) submitpkg_data [ <str> ] [ 0 ] [ <str> ] = opencsw . NEW_PACKAGE t = Template . Template ( opencsw . SUBMITPKG_TMPL , searchList = [ submitpkg_data ] ) self . assertTrue ( re . search ( <str> , unicode ( t ) ) , unicode ( t ) )   if __name__ == <str> :    unittest . main ( )   