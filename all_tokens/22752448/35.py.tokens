import unittest import mox import catalog_notifier import catalog import catalog_test import copy import pprint import rest class NotificationFormatterTest ( mox . MoxTestBase ) :    def disabled_testOne ( self ) :      f = catalog_notifier . NotificationFormatter ( ) rest_client_mock = self . mox . CreateMock ( rest . RestClient ) url = <str> cat_a = self . mox . CreateMock ( catalog . OpencswCatalog ) cat_b = self . mox . CreateMock ( catalog . OpencswCatalog ) catalogs = [ ( <str> , <str> , <str> , cat_a , cat_b ) , ] maintainers = { <str> : { <str> : <str> } , } cat_a . GetDataByCatalogname ( ) . AndReturn ( { } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 } ) self . mox . ReplayAll ( ) self . assertEqual ( <str> , f . FormatNotification ( url , catalogs , rest_client_mock ) )  def test_GetPkgsByMaintainerNew ( self ) :      f = catalog_notifier . NotificationFormatter ( ) rest_client_mock = self . mox . CreateMock ( rest . RestClient ) cat_a = self . mox . CreateMock ( catalog . OpencswCatalog ) cat_b = self . mox . CreateMock ( catalog . OpencswCatalog ) catalogs = [ ( <str> , <str> , <str> , cat_a , cat_b ) , ( <str> , <str> , <str> , cat_a , cat_b ) , ( <str> , <str> , <str> , cat_a , cat_b ) , ( <str> , <str> , <str> , cat_a , cat_b ) , ] rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) cat_a . GetDataByCatalogname ( ) . AndReturn ( { } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) cat_a . GetDataByCatalogname ( ) . AndReturn ( { } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) cat_a . GetDataByCatalogname ( ) . AndReturn ( { } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) cat_a . GetDataByCatalogname ( ) . AndReturn ( { } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) self . mox . ReplayAll ( ) expected = { <str> : { <str> : { catalog_test . PKG_STRUCT_1 [ <str> ] : { <str> : catalog_test . PKG_STRUCT_1 , <str> : [ ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ( <str> , <str> , <str> ) , ] , } , } } } result = f . _GetPkgsByMaintainer ( catalogs , rest_client_mock ) self . assertEqual ( expected , result )  def test_GetPkgsByMaintainerRemoved ( self ) :      f = catalog_notifier . NotificationFormatter ( ) rest_client_mock = self . mox . CreateMock ( rest . RestClient ) cat_a = self . mox . CreateMock ( catalog . OpencswCatalog ) cat_b = self . mox . CreateMock ( catalog . OpencswCatalog ) catalogs = [ ( <str> , <str> , <str> , cat_a , cat_b ) , ] rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) cat_a . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { } ) self . mox . ReplayAll ( ) expected = { <str> : { <str> : { catalog_test . PKG_STRUCT_1 [ <str> ] : { <str> : catalog_test . PKG_STRUCT_1 , <str> : [ ( <str> , <str> , <str> ) , ] , } , } } } self . assertEqual ( expected , f . _GetPkgsByMaintainer ( catalogs , rest_client_mock ) ) expected_text = <str>  def test_GetPkgsByMaintainerTakeover ( self ) :      f = catalog_notifier . NotificationFormatter ( ) rest_client_mock = self . mox . CreateMock ( rest . RestClient ) cat_a = self . mox . CreateMock ( catalog . OpencswCatalog ) cat_b = self . mox . CreateMock ( catalog . OpencswCatalog ) catalogs = [ ( <str> , <str> , <str> , cat_a , cat_b ) , ] previous_pkg = copy . deepcopy ( catalog_test . PKG_STRUCT_1 ) previous_pkg [ <str> ] = <str> previous_pkg [ <str> ] = <str> cat_a . GetDataByCatalogname ( ) . AndReturn ( { <str> : previous_pkg , } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) self . mox . ReplayAll ( ) result = f . _GetPkgsByMaintainer ( catalogs , rest_client_mock ) self . assertTrue ( <str> in result ) self . assertEqual ( { <str> : { catalog_test . PKG_STRUCT_1 [ <str> ] : { <str> : { previous_pkg [ <str> ] : previous_pkg } , <str> : catalog_test . PKG_STRUCT_1 , <str> : [ ( <str> , <str> , <str> ) ] , } } } , result [ <str> ] ) self . assertEqual ( { <str> : { catalog_test . PKG_STRUCT_1 [ <str> ] : { <str> : { previous_pkg [ <str> ] : previous_pkg } , <str> : catalog_test . PKG_STRUCT_1 , <str> : [ ( <str> , <str> , <str> ) ] , } } } , result [ <str> ] )  def test_GetPkgsByMaintainerUpgrade ( self ) :      f = catalog_notifier . NotificationFormatter ( ) rest_client_mock = self . mox . CreateMock ( rest . RestClient ) cat_a = self . mox . CreateMock ( catalog . OpencswCatalog ) cat_b = self . mox . CreateMock ( catalog . OpencswCatalog ) catalogs = [ ( <str> , <str> , <str> , cat_a , cat_b ) , ] previous_pkg = copy . deepcopy ( catalog_test . PKG_STRUCT_1 ) previous_pkg [ <str> ] = <str> previous_pkg [ <str> ] = <str> cat_a . GetDataByCatalogname ( ) . AndReturn ( { <str> : previous_pkg , } ) cat_b . GetDataByCatalogname ( ) . AndReturn ( { <str> : catalog_test . PKG_STRUCT_1 , } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) rest_client_mock . GetMaintainerByMd5 ( <str> ) . AndReturn ( { <str> : <str> } ) self . mox . ReplayAll ( ) result = f . _GetPkgsByMaintainer ( catalogs , rest_client_mock ) self . assertTrue ( <str> in result ) self . assertEqual ( { <str> : { catalog_test . PKG_STRUCT_1 [ <str> ] : { <str> : { previous_pkg [ <str> ] : previous_pkg } , <str> : catalog_test . PKG_STRUCT_1 , <str> : [ ( <str> , <str> , <str> ) ] , } } } , result [ <str> ] )   if __name__ == <str> :    unittest . main ( )   