__author__ = <str> import re import unittest import mox import sharedlib_utils as su class UtilitiesUnitTest ( unittest . TestCase ) :    def testIsLibraryLinkableTrue ( self ) :      self . assertTrue ( su . IsLibraryLinkable ( <str> ) )  def testIsLibraryLinkableNeonTrue ( self ) :      p = <str> self . assertTrue ( su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkableSparc ( self ) :      p = <str> self . assertEqual ( True , su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkableSparcPlusVis ( self ) :      p = <str> self . assertEqual ( True , su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkableAmd64 ( self ) :      self . assertTrue ( su . IsLibraryLinkable ( <str> ) )  def testIsLibraryLinkableLibexecFalse ( self ) :      p = <str> self . assertEqual ( False , su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkableFalse ( self ) :      p = <str> self . assertEqual ( False , su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkableSubdir ( self ) :      p = <str> self . assertEqual ( False , su . IsLibraryLinkable ( p ) )  def testIsLibraryLinkablePrivateLib ( self ) :      self . assertFalse ( su . IsLibraryLinkable ( <str> <str> ) )  def testIsLibraryLinkableInShared ( self ) :      self . assertFalse ( su . IsLibraryLinkable ( <str> <str> ) )  def testIsLibraryLinkablePrefix ( self ) :      self . assertTrue ( su . IsLibraryLinkable ( <str> ) )  def testIsLibraryLinkableInPrefix ( self ) :      self . assertTrue ( su . IsLibraryLinkable ( <str> <str> ) )  def testIsLibraryLinkableWithPrefix ( self ) :      self . assertTrue ( su . IsLibraryLinkable ( <str> ) )   class MakePackageNameBySonameUnitTest ( unittest . TestCase ) :    def testMakePackageNameBySonameSimple ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameMinorVersion ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameApr ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameDot ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameMoreDot ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameComplexApr ( self ) :      soname = <str> expected = ( [ <str> , <str> ] , [ <str> , <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonamePlus ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameNoVersion ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameUppercase ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameDashesNoDashes ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameDashesNoDashesPython ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameComplexApr ( self ) :      soname = <str> expected = ( [ <str> ] , [ <str> ] ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname ) )  def testMakePackageNameBySonameWithPath ( self ) :      soname = <str> path = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname , path ) )  def testMakePackageNameBySonameWithPathSparcv9 ( self ) :      soname = <str> path = <str> expected = ( [ <str> ] , [ <str> ] , ) self . assertEqual ( expected , su . MakePackageNameBySoname ( soname , path ) )   class ParseLibPathTest ( unittest . TestCase ) :    def testSimple ( self ) :      self . assertEquals ( { <str> : None } , su . ParseLibPath ( <str> ) )  def testPrefix ( self ) :      self . assertEquals ( { <str> : <str> } , su . ParseLibPath ( <str> ) )  def testWithArch ( self ) :      self . assertEquals ( { <str> : <str> } , su . ParseLibPath ( <str> ) )   class SanitizationUnitTest ( unittest . TestCase ) :    def testSanitizeWithChar ( self ) :      self . assertEqual ( <str> , su . SanitizeWithChar ( <str> , <str> ) )  def testSanitizeWithChar ( self ) :      self . assertEqual ( <str> , su . SanitizeWithChar ( <str> , <str> ) )  def testSonameToStringWithCharAlphaDigit ( self ) :      self . assertEqual ( <str> , su . SonameToStringWithChar ( <str> , <str> ) )  def testSonameToStringWithCharDigitDigit ( self ) :      self . assertEqual ( <str> , su . SonameToStringWithChar ( <str> , <str> ) )  def testSonameToStringWithCharDigitDigit ( self ) :      self . assertEqual ( <str> , su . SonameToStringWithChar ( <str> , <str> ) )  def testSonameToStringWithCharPython ( self ) :      self . assertEqual ( <str> , su . SonameToStringWithChar ( <str> , <str> ) )   class GetIsalistUnitTest ( unittest . TestCase ) :    def testGetIsalistSparc ( self ) :      self . assertTrue ( <str> in su . GetIsalist ( <str> ) )   class ExtractPrefixTest ( unittest . TestCase ) :    def testNoPrefix ( self ) :      self . assertEquals ( None , su . ExtractPrefix ( <str> ) )  def testSimple ( self ) :      self . assertEquals ( <str> , su . ExtractPrefix ( <str> ) )  def testWithArch ( self ) :      self . assertEquals ( <str> , su . ExtractPrefix ( <str> ) )   if __name__ == <str> :    unittest . main ( )   