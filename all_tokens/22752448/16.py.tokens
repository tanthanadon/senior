import cjson import gdbm import logging import optparse import os import pprint import sys import urllib2 from lib . python import common_constants from lib . python import configuration from lib . python . representations import CatalogSpec from lib . python import rest USAGE = UNSTABLE = <str> EVERY_N_DOTS = 100 datadir = configuration . CHECKPKG_DIR % os . environ fn_revdeps = os . path . join ( datadir , <str> ) fn_pkgstatsdb = os . path . join ( datadir , <str> ) class Error ( Exception ) :     class DataError ( Exception ) :     class RevDeps ( object ) :    def __init__ ( self , rest_client ) :      self . cached_catalogs = { } self . pkgs_by_md5 = { } self . pkgs_by_pkgname = { } self . cp = rest . CachedPkgstats ( fn_pkgstatsdb , rest_client ) self . rest_client = rest_client  def MakeRevIndex ( self , catrel , arch , osrel , quiet = False ) :      def PkgnameListFromString ( s ) :        if s == <str> :          return [ ]  return s . split ( <str> )  logging . info ( <str> , catrel , arch , osrel , quiet ) key = CatalogSpec ( catrel = catrel , arch = arch , osrel = osrel ) if key in self . cached_catalogs :        return  catalog = self . rest_client . GetCatalogForGenerationAsDicts ( catrel , arch , osrel ) rev_deps = { } for pkg in catalog :        self . pkgs_by_pkgname [ pkg [ <str> ] ] = pkg self . pkgs_by_md5 [ pkg [ <str> ] ] = pkg  for pkg in catalog :        deps = PkgnameListFromString ( pkg [ <str> ] ) for dep_pkgname in deps :          rev_dep_lst = rev_deps . setdefault ( dep_pkgname , [ ] ) rev_dep_lst . append ( ( pkg [ <str> ] , pkg [ <str> ] ) )   self . cached_catalogs [ key ] = rev_deps  def RevDepsByMD5 ( self , catrel , arch , osrel , md5_sum ) :      self . MakeRevIndex ( catrel , arch , osrel ) pkg = self . pkgs_by_md5 [ md5_sum ] pkgname = pkg [ <str> ] key = CatalogSpec ( catrel = catrel , arch = arch , osrel = osrel ) if pkgname in self . cached_catalogs [ key ] :        return self . cached_catalogs [ key ] [ pkgname ]  else :        return [ ]   def RevDepsByPkg ( self , catrel , arch , osrel , pkgname ) :      self . MakeRevIndex ( catrel , arch , osrel ) key = CatalogSpec ( catrel = catrel , arch = arch , osrel = osrel ) if pkgname in self . cached_catalogs [ key ] :        return self . cached_catalogs [ key ] [ pkgname ]  else :        return [ ]    class PackageRemover ( object ) :    def __init__ ( self , rest_client ) :      self . rest_client = rest_client  def CachePackageIsGone ( self , catalogname ) :      with open ( <str> , <str> ) as fd :        fd . write ( <str> . format ( catalogname ) )   def RemovePackage ( self , catalogname , execute = False , os_releases = None ) :      if not os_releases :        os_releases = common_constants . OS_RELS  username , password = rest . GetUsernameAndPassword ( ) rd = RevDeps ( self . rest_client ) rev_deps = { } to_remove = [ ] found_anywhere = False for osrel in os_releases :        if osrel not in common_constants . OS_RELS :          logging . warning ( <str> , osrel , common_constants . OS_RELS ) continue  if osrel in common_constants . OBSOLETE_OS_RELS :          logging . info ( <str> , osrel ) continue  for arch in common_constants . PHYSICAL_ARCHITECTURES :          try :            pkg_simple = self . rest_client . Srv4ByCatalogAndCatalogname ( UNSTABLE , arch , osrel , catalogname )  except urllib2 . HTTPError , e :            logging . warning ( <str> , catalogname , arch , osrel , e ) pkg_simple = None  if not pkg_simple :            pkg_simple = self . rest_client . Srv4ByCatalogAndPkgname ( UNSTABLE , arch , osrel , catalogname ) if not pkg_simple :              msg = <str> logging . debug ( msg . format ( repr ( catalogname ) , arch , osrel ) ) continue   if pkg_simple :            found_anywhere = True  md5 = pkg_simple [ <str> ] key = UNSTABLE , arch , osrel cat_rev_deps = rd . RevDepsByMD5 ( UNSTABLE , arch , osrel , md5 ) if cat_rev_deps :            rev_deps [ key ] = cat_rev_deps  to_remove . append ( ( UNSTABLE , arch , osrel , md5 ) )   if not found_anywhere :        self . CachePackageIsGone ( catalogname )  if rev_deps :        print <str> , print pkg_simple [ <str> ] , <str> , <str> . join ( [ <str> % ( x [ 0 ] , x [ 1 ] , x [ 2 ] , <str> . join ( y [ 1 ] for y in rev_deps [ x ] ) ) for x in rev_deps ] )  else :        for catrel , arch , osrel , md5_sum in to_remove :          print <str> % pkg_simple [ <str> ] , catrel , arch , osrel , md5_sum if execute :            self . rest_client . RemoveSvr4FromCatalog ( catrel , arch , osrel , md5_sum )   if found_anywhere :          self . CachePackageIsGone ( catalogname )     def main ( ) :    parser = optparse . OptionParser ( USAGE ) parser . add_option ( <str> , <str> , dest = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , help = ( <str> <str> ) ) parser . add_option ( <str> , dest = <str> , action = <str> ) parser . add_option ( <str> , dest = <str> , default = False , action = <str> , help = ( <str> ) ) options , args = parser . parse_args ( ) logging_level = logging . INFO if options . debug :      logging_level = logging . DEBUG  fmt = <str> logging . basicConfig ( format = fmt , level = logging_level ) if not options . catalogname :      logging . error ( <str> , USAGE ) sys . exit ( 1 )  os_releases = common_constants . OS_RELS if options . os_releases :      os_releases = options . os_releases . split ( <str> )  config = configuration . GetConfig ( ) username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password ) pr = PackageRemover ( rest_client ) pr . RemovePackage ( options . catalogname , not options . dry_run , os_releases )  if __name__ == <str> :    main ( )   