import unittest import struct_util class IndexByUnitTest ( unittest . TestCase ) :    def testIndexDictsBy_1 ( self ) :      list_of_dicts = [ { <str> : 1 } , { <str> : 2 } , { <str> : 3 } , ] expected = { 1 : [ { <str> : 1 } ] , 2 : [ { <str> : 2 } ] , 3 : [ { <str> : 3 } ] , } self . assertEquals ( expected , struct_util . IndexDictsBy ( list_of_dicts , <str> ) )  def testIndexDictsBy_2 ( self ) :      list_of_dicts = [ { <str> : 1 , <str> : 1 } , { <str> : 1 , <str> : 2 } , { <str> : 1 , <str> : 3 } , ] expected = { 1 : [ { <str> : 1 , <str> : 1 } , { <str> : 1 , <str> : 2 } , { <str> : 1 , <str> : 3 } , ] } self . assertEquals ( expected , struct_util . IndexDictsBy ( list_of_dicts , <str> ) )   class ResolveSymlinkUnitTest ( unittest . TestCase ) :    def testRelative ( self ) :      self . assertEquals ( <str> , struct_util . ResolveSymlink ( <str> , <str> ) )  def testAsolute ( self ) :      self . assertEquals ( <str> , struct_util . ResolveSymlink ( <str> , <str> ) )   class OsReleaseToLongTest ( unittest . TestCase ) :    def testLong ( self ) :      self . assertEqual ( <str> , struct_util . OsReleaseToLong ( <str> ) )  def testShort ( self ) :      self . assertEqual ( <str> , struct_util . OsReleaseToLong ( <str> ) )   class MakeCatalognameByPkgnameTest ( unittest . TestCase ) :    def testSimple ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )  def testWithDash ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )  def testCollapseSeparators ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )  def testWithDigits ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )  def testPluses ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )  def testWithDigits ( self ) :      self . assertEqual ( <str> , struct_util . MakeCatalognameByPkgname ( <str> ) )   if __name__ == <str> : 	 unittest . main ( )   