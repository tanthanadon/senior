import unittest import mox from lib . python import ldd_emul from lib . python import representations import lib . python . testdata . dump_output_1 as dump_1 import lib . python . testdata . dump_output_2 as dump_2 import lib . python . testdata . dump_output_3 as dump_3 class GetLinesBySonameUnitTest ( unittest . TestCase ) :    def setUp ( self ) :      self . pkgmap_mocker = mox . Mox ( ) self . e = ldd_emul . LddEmulator ( )  def testExpandRunpath_1 ( self ) :      isalist = [ <str> , <str> ] runpath = <str> expected = [ <str> , <str> , <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_2 ( self ) :      isalist = [ <str> , <str> ] runpath = <str> expected = [ <str> , <str> , <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_OriginSimple ( self ) :      isalist = ( ) runpath = <str> expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_OriginDots ( self ) :      isalist = ( ) runpath = <str> expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_Caching ( self ) :      isalist = ( ) runpath = <str> expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) ) expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_OriginCaching ( self ) :      isalist = ( ) runpath = <str> expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) ) expected = [ <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testExpandRunpath_OnlyIsalist ( self ) :      isalist = ( <str> , ) runpath = <str> expected = [ <str> , <str> ] bin_path = <str> self . assertEquals ( expected , self . e . ExpandRunpath ( runpath , isalist , bin_path ) )  def testEmulate64BitSymlinks_1 ( self ) :      runpath_list = [ <str> ] expected = <str> self . assertTrue ( expected in self . e . Emulate64BitSymlinks ( runpath_list ) )  def testEmulate64BitSymlinks_2 ( self ) :      runpath_list = [ <str> ] expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertTrue ( expected in result , <str> % ( expected , result ) )  def testEmulate64BitSymlinks_3 ( self ) :      runpath_list = [ <str> ] expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertTrue ( expected in result , <str> % ( expected , result ) )  def testEmulate64BitSymlinks_4 ( self ) :      runpath_list = [ <str> ] expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertEquals ( 1 , len ( result ) , <str> % ( result , 1 ) )  def testEmulateSymlinks_3 ( self ) :      runpath_list = [ <str> ] expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertTrue ( expected in result , <str> % ( expected , result ) )  def testEmulateSymlinks_4 ( self ) :      runpath_list = [ <str> ] expected = <str> not_expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertTrue ( expected in result , <str> % ( expected , result ) ) self . assertFalse ( not_expected in result , <str> % ( not_expected , result ) )  def SystemLibSymlinkExpansion_LibPresent ( self , lib_symlink ) :      runpath_list = [ lib_symlink ] expected = <str> result = self . e . Emulate64BitSymlinks ( runpath_list ) self . assertTrue ( expected in result , <str> % ( expected , result ) )  def SystemLibSymlinkExpansion_LibSubdirAbsent ( self , lib_symlink ) :      runpath_list = [ lib_symlink ] expected = <str> not_expected = lib_symlink result = self . e . ExpandSymlink ( lib_symlink , <str> , lib_symlink ) self . assertTrue ( expected in result , <str> % ( expected , result ) ) self . assertFalse ( not_expected in result , <str> % ( not_expected , result ) )  def testLibPresent_i386 ( self ) :      self . SystemLibSymlinkExpansion_LibPresent ( <str> )  def testLibPresent_sparcv8 ( self ) :      self . SystemLibSymlinkExpansion_LibPresent ( <str> )  def testLibSubdirAbsent_i386 ( self ) :      self . SystemLibSymlinkExpansion_LibSubdirAbsent ( <str> )  def testLibSubdirAbsent_sparcv8 ( self ) :      self . SystemLibSymlinkExpansion_LibSubdirAbsent ( <str> )  def testSanitizeRunpath_1 ( self ) :      self . assertEqual ( <str> , self . e . SanitizeRunpath ( <str> ) )  def testSanitizeRunpath_2 ( self ) :      self . assertEqual ( <str> , self . e . SanitizeRunpath ( <str> ) )   class LddEmulartorUnitTest ( unittest . TestCase ) :    def setUp ( self ) :      self . pkgmap_mocker = mox . Mox ( ) self . e = ldd_emul . LddEmulator ( )  def testResolveSoname_1 ( self ) :      runpath_list = [ <str> , <str> ] soname = <str> path_list = [ <str> , <str> , <str> ] binary_path = <str> isalist = [ <str> ] result = self . e . ResolveSoname ( runpath_list , soname , isalist , path_list , binary_path ) self . assertEqual ( <str> , result )   if __name__ == <str> :    unittest . main ( )   