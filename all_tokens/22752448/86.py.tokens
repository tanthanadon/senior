import ConfigParser import datetime import getpass import hashlib import itertools import logging import optparse import os import os . path import progressbar import progressbar . widgets import re import socket import sqlobject import sys from sqlobject import sqlbuilder from Cheetah . Template import Template from lib . python import catalog from lib . python import checkpkg_lib from lib . python import common_constants from lib . python import configuration from lib . python import database from lib . python import models as m from lib . python import package_checks from lib . python import package_stats from lib . python import rest from lib . python import shell from lib . python import struct_util from lib . python import system_pkgmap USAGE = SHOW_PKG_TMPL = DEFAULT_TEMPLATE_FILENAME = <str> CATALOGS_ALLOWED_TO_GENERATE = frozenset ( [ <str> , <str> , <str> , <str> , <str> , <str> , ] ) CATALOGS_ALLOWED_TO_BE_IMPORTED = frozenset ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] ) class Error ( Exception ) :    <str>  class UsageError ( Error ) :    <str>  class OpencswTreeError ( Error ) :    <str>  class HtmlGenerator ( object ) :    def __init__ ( self , identifiers , template = None , rest_client = None , debug = False ) :      self . template = template self . identifiers = identifiers self . debug = debug assert rest_client is not None , <str> self . rest_client = rest_client  def GetErrorTagsResult ( self , srv4 ) :      res = m . CheckpkgErrorTag . select ( m . CheckpkgErrorTag . q . srv4_file == srv4 ) return res  def GetOverrideResult ( self , srv4 ) :      res = m . CheckpkgOverride . select ( m . CheckpkgOverride . q . srv4_file == srv4 ) return res  def GenerateHtml ( self ) :      pkgstats = [ ] for identifier in self . identifiers :        srv4 = GetPkg ( identifier ) data = self . rest_client . GetPkgstatsByMd5 ( srv4 . md5_sum ) build_src_url_svn = srv4 . GetSvnUrl ( ) build_src_url_trac = srv4 . GetTracUrl ( ) if <str> in data [ <str> ] :          data [ <str> ] = data [ <str> ] [ <str> ]  else :          data [ <str> ] = <str>  data [ <str> ] = build_src_url_svn data [ <str> ] = build_src_url_trac data [ <str> ] = list ( self . GetErrorTagsResult ( srv4 ) ) data [ <str> ] = list ( self . GetOverrideResult ( srv4 ) ) pkgstats . append ( data )  if not self . template :        tmpl_filename = os . path . join ( os . path . split ( __file__ ) [ 0 ] , DEFAULT_TEMPLATE_FILENAME )  else :        tmpl_filename = self . template  tmpl_str = open ( tmpl_filename , <str> ) . read ( ) t = Template ( tmpl_str , searchList = [ { <str> : pkgstats , <str> : common_constants . MACHINE_ID_METADATA , } ] ) return unicode ( t )   def NormalizeId ( some_id ) :    if not struct_util . IsMd5 ( some_id ) :      logging . warning ( <str> <str> , repr ( some_id ) )  return os . path . basename ( some_id )  def GetPkg ( some_id ) :    some_id = NormalizeId ( some_id ) logging . debug ( <str> , repr ( some_id ) ) res = m . Srv4FileStats . select ( sqlobject . OR ( m . Srv4FileStats . q . md5_sum == some_id , m . Srv4FileStats . q . catalogname == some_id ) ) try :      srv4 = res . getOne ( )  except sqlobject . main . SQLObjectIntegrityError , e :      logging . warning ( e ) for row in res :        print <str> % ( row . md5_sum , row . version_string , row . mtime )  raise  except sqlobject . main . SQLObjectNotFound , e :      logging . fatal ( <str> , repr ( some_id ) ) raise  logging . debug ( <str> , srv4 ) return srv4  class CatalogImporter ( object ) :    def __init__ ( self , debug = False ) :      self . debug = debug config = configuration . GetConfig ( ) username , password = rest . GetUsernameAndPassword ( ) self . rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password , debug = debug )  def SyncFromCatalogFile ( self , osrel , arch , catrel , catalog_file , force_unpack = False ) :      if catrel not in CATALOGS_ALLOWED_TO_BE_IMPORTED :        raise UsageError ( <str> % CATALOGS_ALLOWED_TO_BE_IMPORTED )  catalog_dir = os . path . dirname ( catalog_file ) logging . debug ( <str> ) src_catalog = catalog . OpencswCatalog ( open ( catalog_file , <str> ) ) catalog_data = src_catalog . GetCatalogData ( ) cat_entry_by_md5 = { } cat_entry_by_basename = { } for catalog_entry in catalog_data :        cat_entry_by_md5 [ catalog_entry [ <str> ] ] = catalog_entry cat_entry_by_basename [ catalog_entry [ <str> ] ] = catalog_entry  entries_to_import = [ ] logging . debug ( <str> ) existence_data = ( self . rest_client . BulkQueryStatsExistence ( list ( cat_entry_by_md5 ) ) ) entries_to_import = [ cat_entry_by_md5 [ x ] for x in existence_data [ <str> ] ] md5_sums = [ ] if entries_to_import :        collector = package_stats . StatsCollector ( logger = logging , debug = self . debug ) for entry in entries_to_import :          entry [ <str> ] = os . path . join ( catalog_dir , entry [ <str> ] )  if len ( entries_to_import ) < 15 :          logging . info ( <str> ) for basename in sorted ( x [ <str> ] for x in entries_to_import ) :            logging . info ( <str> , basename )   else :          logging . info ( <str> , len ( entries_to_import ) )  md5_sums = collector . CollectStatsFromCatalogEntries ( entries_to_import , force_unpack = force_unpack )  logging . debug ( <str> ) sqo_osrel = m . OsRelease . selectBy ( short_name = osrel ) . getOne ( ) sqo_arch = m . Architecture . selectBy ( name = arch ) . getOne ( ) sqo_catrel = m . CatalogRelease . selectBy ( name = catrel ) . getOne ( ) res = m . Srv4FileInCatalog . select ( sqlobject . AND ( m . Srv4FileInCatalog . q . osrel == sqo_osrel , m . Srv4FileInCatalog . q . arch == sqo_arch , m . Srv4FileInCatalog . q . catrel == sqo_catrel ) ) db_srv4s_in_cat_by_md5 = { } for srv4_in_cat in res :        try :          srv4 = srv4_in_cat . srv4file if srv4 . use_to_generate_catalogs :            db_srv4s_in_cat_by_md5 [ srv4 . md5_sum ] = srv4_in_cat   except sqlobject . main . SQLObjectNotFound as e :          logging . warning ( <str> , e ) srv4_in_cat . destroySelf ( )   disk_md5s = set ( cat_entry_by_md5 ) db_md5s = set ( db_srv4s_in_cat_by_md5 ) md5_sums_to_add = disk_md5s . difference ( db_md5s ) md5_sums_to_remove = db_md5s . difference ( disk_md5s ) logging . info ( <str> , len ( md5_sums_to_remove ) , len ( md5_sums_to_add ) ) if md5_sums_to_remove :        logging . info ( <str> , osrel , arch , catrel ) for md5 in md5_sums_to_remove :          logging . info ( <str> , db_srv4s_in_cat_by_md5 [ md5 ] . srv4file . basename )   if md5_sums_to_add and len ( md5_sums_to_add ) < 15 :        logging . info ( <str> , osrel , arch , catrel ) for md5 in md5_sums_to_add :          logging . info ( <str> , cat_entry_by_md5 [ md5 ] [ <str> ] )   user = getpass . getuser ( ) if md5_sums_to_remove :        logging . info ( <str> , len ( md5_sums_to_remove ) , osrel , arch , catrel ) for md5 in md5_sums_to_remove :          db_srv4s_in_cat_by_md5 [ md5 ] . destroySelf ( )   if not md5_sums_to_add :        return  logging . info ( <str> , len ( md5_sums_to_add ) , osrel , arch , catrel ) pbar = progressbar . ProgressBar ( widgets = [ progressbar . widgets . Percentage ( ) , <str> , progressbar . widgets . ETA ( ) , <str> , progressbar . widgets . Bar ( ) ] ) pbar . maxval = len ( md5_sums_to_add ) pbar . start ( ) counter = itertools . count ( 1 ) for md5 in md5_sums_to_add :        logging . debug ( <str> , cat_entry_by_md5 [ md5 ] [ <str> ] ) try :          pkg = m . Srv4FileStats . selectBy ( md5_sum = md5 ) . getOne ( ) if ( not pkg . registered_level_two or not pkg . use_to_generate_catalogs ) :            self . rest_client . RegisterLevelTwo ( md5 , use_in_catalogs = True )   except sqlobject . main . SQLObjectNotFound :          pass  self . rest_client . AddSvr4ToCatalog ( catrel , arch , osrel , md5 ) pbar . update ( counter . next ( ) )  pbar . finish ( )  def SyncFromCatalogTree ( self , catrel , base_dir , force_unpack = False ) :      logging . debug ( <str> , repr ( catrel ) , repr ( base_dir ) , force_unpack ) if not os . path . isdir ( base_dir ) :        raise UsageError ( <str> % repr ( base_dir ) )  if catrel not in common_constants . DEFAULT_CATALOG_RELEASES :        logging . warning ( <str> , repr ( catrel ) )  sqo_catrel = m . CatalogRelease . selectBy ( name = catrel ) . getOne ( ) for osrel in common_constants . OS_RELS :        logging . info ( <str> , repr ( osrel ) ) sqo_osrel = m . OsRelease . selectBy ( short_name = osrel ) . getOne ( ) for arch in common_constants . PHYSICAL_ARCHITECTURES :          logging . info ( <str> , repr ( arch ) ) sqo_arch = m . Architecture . selectBy ( name = arch ) . getOne ( ) catalog_file = self . ComposeCatalogFilePath ( base_dir , osrel , arch ) if not os . path . exists ( catalog_file ) :            logging . warning ( <str> , repr ( catalog_file ) ) continue  logging . info ( <str> , catalog_file ) self . SyncFromCatalogFile ( osrel , arch , catrel , catalog_file , force_unpack = force_unpack )    def ComposeCatalogFilePath ( self , base_dir , osrel , arch ) :      short_osrel = osrel . replace ( <str> , <str> ) return os . path . join ( base_dir , arch , short_osrel , <str> )   def main ( ) :    parser = optparse . OptionParser ( USAGE ) parser . add_option ( <str> , <str> , dest = <str> , default = False , action = <str> , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , default = <str> , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , default = <str> , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , default = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , default = False , action = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , default = False , action = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , default = False , action = <str> , help = <str> ) options , args = parser . parse_args ( ) logging_level = logging . INFO if options . debug :      logging_level = logging . DEBUG  fmt = <str> logging . basicConfig ( format = fmt , level = logging_level ) if not args :      raise UsageError ( <str> )  configuration . SetUpSqlobjectConnection ( ) command = args [ 0 ] args = args [ 1 : ] if command == <str> :      subcommand = args [ 0 ] args = args [ 1 : ]  elif command == <str> :      subcommand = args [ 0 ] args = args [ 1 : ]  else :      subcommand = None  md5_sums = args if ( command , subcommand ) == ( <str> , <str> ) :      for md5_sum in md5_sums :        srv4 = GetPkg ( md5_sum ) res = m . CheckpkgErrorTag . select ( m . CheckpkgErrorTag . q . srv4_file == srv4 ) for row in res :          print <str> if row . overridden else <str> , print row . pkgname , row . tag_name , row . tag_info , row . catrel . name , row . arch . name , print row . os_rel . short_name    elif ( command , subcommand ) == ( <str> , <str> ) :      for md5_sum in md5_sums :        srv4 = GetPkg ( md5_sum ) res = m . CheckpkgOverride . select ( m . CheckpkgOverride . q . srv4_file == srv4 ) for row in res :          print row . pkgname , row . tag_name , row . tag_info    elif ( command , subcommand ) == ( <str> , <str> ) :      for md5_sum in md5_sums :        srv4 = GetPkg ( md5_sum ) t = Template ( SHOW_PKG_TMPL , searchList = [ srv4 ] ) sys . stdout . write ( unicode ( t ) )   elif command == <str> :      config = configuration . GetConfig ( ) username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password , debug = options . debug ) g = HtmlGenerator ( md5_sums , options . pkg_review_template , rest_client , options . debug ) sys . stdout . write ( g . GenerateHtml ( ) )  elif command == <str> :      config = configuration . GetConfig ( ) database . InitDB ( config )  elif command == <str> :      collector = package_stats . StatsCollector ( logger = logging , debug = options . debug ) file_list = args catalog_entries = [ ] for file_name in file_list :        file_hash = hashlib . md5 ( ) chunk_size = 2 * 1024 * 1024 with open ( file_name , <str> ) as fd :          data = fd . read ( chunk_size ) while data :            file_hash . update ( data ) data = fd . read ( chunk_size )   data_md5_sum = file_hash . hexdigest ( ) catalog_entry = { <str> : data_md5_sum , <str> : os . path . basename ( file_name ) , <str> : file_name , } catalog_entries . append ( catalog_entry )  md5_list = collector . CollectStatsFromCatalogEntries ( catalog_entries , force_unpack = options . force_unpack ) config = configuration . GetConfig ( ) rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , debug = options . debug ) for md5_sum in md5_list :        logging . debug ( <str> , md5_sum ) rest_client . RegisterLevelTwo ( md5_sum )   elif command == <str> :      for md5_sum in md5_sums :        srv4 = GetPkg ( md5_sum ) in_catalogs = list ( srv4 . in_catalogs ) if in_catalogs :          for in_catalog in in_catalogs :            logging . warning ( <str> , in_catalog )  logging . warning ( <str> <str> )  else :          logging . info ( <str> , srv4 ) srv4 . DeleteAllDependentObjects ( ) srv4 . destroySelf ( )    elif command == <str> :      if len ( args ) < 4 :        raise UsageError ( <str> )  user = getpass . getuser ( ) osrel , arch , catrel = args [ : 3 ] username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( username = username , password = password ) md5_sums = args [ 3 : ] for md5_sum in md5_sums :        rest_client . AddSvr4ToCatalog ( catrel , arch , osrel , md5_sum )   elif command == <str> :      if len ( args ) < 4 :        raise UsageError ( <str> )  osrel , arch , catrel = args [ : 3 ] md5_sums = args [ 3 : ] username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( username = username , password = password ) for md5_sum in md5_sums :        rest_client . RemoveSvr4FromCatalog ( catrel , arch , osrel , md5_sum )   elif command == <str> :      logging . debug ( <str> , args ) outfile = None infile_contents = common_constants . DEFAULT_INSTALL_CONTENTS_FILE infile_pkginfo = None osrel , arch = ( None , None ) if len ( args ) >= 2 :        infile_contents = args [ 0 ] infile_pkginfo = args [ 1 ]  if len ( args ) >= 3 :        outfile = args [ 2 ]  if len ( args ) >= 4 :        if len ( args ) == 5 :          osrel , arch = args [ 3 : 5 ]  else :          raise UsageError ( <str> % len ( args ) )   spi = system_pkgmap . Indexer ( outfile , infile_contents , infile_pkginfo , osrel , arch ) spi . IndexAndSave ( )  elif command == <str> :      if len ( args ) < 2 :        raise UsageError ( <str> )  osrel = args [ 0 ] arch = args [ 1 ] importer = system_pkgmap . InstallContentsImporter ( osrel , arch , debug = options . debug ) importer . Import ( show_progress = ( not options . debug ) )  elif ( command , subcommand ) == ( <str> , <str> ) :      logging . debug ( <str> , args ) sqo_osrel = m . OsRelease . selectBy ( short_name = options . osrel ) . getOne ( ) sqo_arch = m . Architecture . selectBy ( name = options . arch ) . getOne ( ) sqo_catrel = m . CatalogRelease . selectBy ( name = options . catrel ) . getOne ( ) if len ( args ) < 1 :        logging . fatal ( <str> , len ( args ) ) raise SystemExit  for catalogname in args :        join = [ sqlbuilder . INNERJOINOn ( None , m . Srv4FileInCatalog , m . Srv4FileInCatalog . q . srv4file == m . Srv4FileStats . q . id ) , ] res = m . Srv4FileStats . select ( sqlobject . AND ( m . Srv4FileInCatalog . q . osrel == sqo_osrel , m . Srv4FileInCatalog . q . arch == sqo_arch , m . Srv4FileInCatalog . q . catrel == sqo_catrel , m . Srv4FileStats . q . catalogname . contains ( catalogname ) , m . Srv4FileStats . q . use_to_generate_catalogs == True ) , join = join , ) . orderBy ( <str> ) for sqo_srv4 in res :          print <str> % ( sqo_srv4 . basename , sqo_srv4 . md5_sum )    elif command == <str> :      if len ( args ) != 4 :        raise UsageError ( <str> )  osrel , arch , catrel , catalog_file = args ci = CatalogImporter ( debug = options . debug ) ci . SyncFromCatalogFile ( osrel , arch , catrel , catalog_file )  elif command == <str> :      if len ( args ) != 2 :        raise UsageError ( <str> )  ci = CatalogImporter ( debug = options . debug ) catrel , base_dir = args ci . SyncFromCatalogTree ( catrel , base_dir , options . force_unpack )  elif ( command , subcommand ) == ( <str> , <str> ) :      sqo_osrel , sqo_arch , sqo_catrel = m . GetSqoTriad ( options . osrel , options . arch , options . catrel ) res = m . GetCatPackagesResult ( sqo_osrel , sqo_arch , sqo_catrel ) for obj in res :        print obj . catalogname , obj . basename , obj . md5_sum   elif ( command , subcommand ) == ( <str> , <str> ) :      md5_sum = args [ 0 ] join = [ sqlbuilder . INNERJOINOn ( None , m . Srv4FileStats , m . CswFile . q . srv4_file == m . Srv4FileStats . q . id ) , ] res = m . CswFile . select ( m . Srv4FileStats . q . md5_sum == md5_sum , join = join , ) for obj in res :        print os . path . join ( obj . path , obj . basename )   elif ( command , subcommand ) == ( <str> , <str> ) :      db_catalog = checkpkg_lib . Catalog ( ) for arg in args :        pkgs_by_path = db_catalog . GetPathsAndPkgnamesByBasename ( arg , options . osrel , options . arch , options . catrel ) for file_path in pkgs_by_path :          print os . path . join ( file_path , arg ) , <str> . join ( pkgs_by_path [ file_path ] )    elif ( command , subcommand ) == ( <str> , <str> ) :      db_catalog = checkpkg_lib . Catalog ( ) for arg in args :        pkgs = db_catalog . GetPkgByPath ( arg , options . osrel , options . arch , options . catrel ) print <str> . join ( pkgs )   else :      raise UsageError ( <str> % command )   if __name__ == <str> :    if <str> in sys . argv :      import cProfile t_str = datetime . datetime . now ( ) . strftime ( <str> ) home = os . environ [ <str> ] cprof_file_name = os . path . join ( home , <str> , <str> % t_str ) cProfile . run ( <str> , sort = 1 , filename = cprof_file_name )  else :      main ( )    