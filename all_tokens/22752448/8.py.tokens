import cjson import ConfigParser import logging import mock import unittest import webtest from lib . python import configuration from lib . python import database from lib . web import pkgdb_web from lib . web import releases_web from lib . web import web_lib from lib . python . testdata . neon_stats import pkgstats as neon_stats class PkgdbWebUnitTest ( unittest . TestCase ) :    def GetConfigForTest ( self ) :      config = ConfigParser . SafeConfigParser ( configuration . CONFIG_DEFAULTS ) config . add_section ( <str> ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) config . set ( <str> , <str> , <str> ) return config  def setUp ( self ) :      super ( PkgdbWebUnitTest , self ) . setUp ( ) with mock . patch ( <str> ) as config_getter :        config = self . GetConfigForTest ( ) config_getter . return_value = config web_lib . ConnectToDatabase ( ) database . InitDB ( config )  self . pkgdbapp = webtest . TestApp ( pkgdb_web . app . wsgifunc ( ) ) self . relapp = webtest . TestApp ( releases_web . app . wsgifunc ( ) )  def tearDown ( self ) :      super ( PkgdbWebUnitTest , self ) . tearDown ( ) configuration . TearDownSqlobjectConnection ( )  def testGetRoot ( self ) :      resp = self . pkgdbapp . get ( <str> ) resp . mustcontain ( <str> )  def testGetCatalogList ( self ) :      with mock . patch ( <str> ) as config_getter :        resp = self . pkgdbapp . get ( <str> ) resp . mustcontain ( <str> ) resp . mustcontain ( <str> )   def testGetCatalogDetail ( self ) :      pass  def testPutBlobMissingField ( self ) :      self . assertRaises ( webtest . AppError , self . relapp . put , <str> )  def testPutBlobGood1 ( self ) :      neon_json = cjson . encode ( neon_stats ) self . assertRaises ( webtest . AppError , self . relapp . get , <str> ) self . relapp . put ( <str> , params = { <str> : neon_json , <str> : <str> } ) resp = self . relapp . get ( <str> ) self . assertEqual ( resp . text , neon_json ) resp = self . relapp . delete ( <str> )   if __name__ == <str> :    logging . basicConfig ( level = logging . ERROR ) unittest . main ( )   