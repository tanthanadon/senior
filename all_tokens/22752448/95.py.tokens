import cjson import datetime import logging import os . path import re import sqlobject from sqlobject import sqlbuilder logger = logging . getLogger ( <str> ) def SanitizeDatetime ( d ) :    if isinstance ( d , datetime . datetime ) :      return d . isoformat ( )  else :      return d   class Error ( Exception ) :     class DataError ( Error ) :     class CatalogRelease ( sqlobject . SQLObject ) :    <str> name = sqlobject . UnicodeCol ( length = 255 , unique = True , notNone = True ) def __unicode__ ( self ) :      return <str> % self . name   class OsRelease ( sqlobject . SQLObject ) :    <str> short_name = sqlobject . UnicodeCol ( length = 40 , unique = True , notNone = True ) full_name = sqlobject . UnicodeCol ( length = 255 , unique = True , notNone = True ) def __unicode__ ( self ) :      return <str> % self . full_name   class Architecture ( sqlobject . SQLObject ) :    <str> name = sqlobject . UnicodeCol ( length = 40 , unique = True , notNone = True ) def __unicode__ ( self ) :      return <str> % self . name   class Maintainer ( sqlobject . SQLObject ) :    email = sqlobject . UnicodeCol ( length = 255 , unique = True , notNone = True ) full_name = sqlobject . UnicodeCol ( length = 255 , default = None ) def ObfuscatedEmail ( self ) :      if self . email :        email = self . email . split ( <str> )  else :        email = [ <str> ]  if len ( email ) == 2 :        username , domain = email if len ( domain ) > 4 :          domain = domain [ : 4 ] + <str>   else :        username , domain = email [ 0 ] , <str>  return <str> . join ( ( username , domain ) )  def __unicode__ ( self ) :      return <str> % ( self . full_name or <str> , self . ObfuscatedEmail ( ) )  def Username ( self ) :      if <str> in self . email :        return self . email . split ( <str> ) [ 0 ]  else :        return unicode ( self )   def GetRestRepr ( self ) :      return { <str> : self . email , <str> : self . full_name , <str> : self . id , }   class CswConfig ( sqlobject . SQLObject ) :    option_key = sqlobject . UnicodeCol ( length = 255 , unique = True ) float_value = sqlobject . FloatCol ( default = None ) int_value = sqlobject . IntCol ( default = None ) str_value = sqlobject . UnicodeCol ( default = None , length = 250 )  class Pkginst ( sqlobject . SQLObject ) :    pkgname = sqlobject . UnicodeCol ( length = 250 , unique = True , notNone = True ) catalogname = sqlobject . UnicodeCol ( default = None , length = 250 ) pkg_desc = sqlobject . UnicodeCol ( default = None , length = 250 ) srv4_files = sqlobject . MultipleJoin ( <str> )  class CswFile ( sqlobject . SQLObject ) :    class sqlmeta :      createSQL = { <str> : [ <str> <str> ] }  basename = sqlobject . UnicodeCol ( length = 255 , notNone = True ) path = sqlobject . UnicodeCol ( notNone = True , length = 900 ) line = sqlobject . UnicodeCol ( notNone = True , length = 900 ) perm_user = sqlobject . UnicodeCol ( notNone = False , length = 255 ) perm_group = sqlobject . UnicodeCol ( notNone = False , length = 255 ) perm_mode = sqlobject . UnicodeCol ( notNone = False , length = 5 ) target = sqlobject . UnicodeCol ( notNone = False , length = 900 ) mimetype = sqlobject . UnicodeCol ( notNone = False , length = 255 ) machine = sqlobject . UnicodeCol ( notNone = False , length = 255 ) pkginst = sqlobject . ForeignKey ( <str> , notNone = True ) srv4_file = sqlobject . ForeignKey ( <str> ) basename_idx = sqlobject . DatabaseIndex ( <str> ) path_idx = sqlobject . DatabaseIndex ( { <str> : <str> , <str> : 255 } ) def FullPath ( self ) :      return os . path . join ( self . path , self . basename )  def __unicode__ ( self ) :      return <str> % ( self . perm_user , self . perm_group , self . perm_mode , self . FullPath ( ) , self . mimetype )   class Srv4FileStatsBlob ( sqlobject . SQLObject ) :    class sqlmeta :      cacheValues = False  md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = True , length = 32 ) json = sqlobject . BLOBCol ( notNone = True , length = ( 2 ** 24 ) ) content_md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = False , length = 32 ) mime_type = sqlobject . UnicodeCol ( notNone = True , length = 250 ) created_on = sqlobject . DateTimeCol ( notNone = True , default = sqlobject . DateTimeCol . now )  class CatalogGenData ( sqlobject . SQLObject ) :    deps = sqlobject . BLOBCol ( notNone = True , length = ( 2 ** 14 - 1 ) ) i_deps = sqlobject . BLOBCol ( notNone = True , length = ( 2 ** 14 - 1 ) ) pkginfo_name = sqlobject . BLOBCol ( notNone = True , length = ( 2 ** 14 - 1 ) ) pkgname = sqlobject . UnicodeCol ( default = None , length = 250 ) md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = True , length = 32 )  class ElfdumpInfoBlob ( sqlobject . SQLObject ) :    class sqlmeta :      cacheValues = False  md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = True , length = 32 ) json = sqlobject . BLOBCol ( notNone = True , length = ( 2 ** 24 - 1 ) ) content_md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = False , length = 32 ) mime_type = sqlobject . UnicodeCol ( notNone = True , length = 250 )  class Srv4FileStats ( sqlobject . SQLObject ) :    arch = sqlobject . ForeignKey ( <str> , notNone = True ) basename = sqlobject . UnicodeCol ( notNone = True , length = 250 ) catalogname = sqlobject . UnicodeCol ( notNone = True , length = 250 ) filename_arch = sqlobject . ForeignKey ( <str> , notNone = True ) maintainer = sqlobject . ForeignKey ( <str> , notNone = False ) md5_sum = sqlobject . UnicodeCol ( notNone = True , unique = True , length = 32 ) size = sqlobject . IntCol ( ) mtime = sqlobject . DateTimeCol ( notNone = False ) os_rel = sqlobject . ForeignKey ( <str> , notNone = True ) osrel_str = sqlobject . UnicodeCol ( notNone = True , length = 9 ) pkginst = sqlobject . ForeignKey ( <str> , notNone = True ) pkginst_str = sqlobject . UnicodeCol ( notNone = True , length = 255 ) registered_level_one = sqlobject . BoolCol ( notNone = True ) registered_level_two = sqlobject . BoolCol ( notNone = True ) use_to_generate_catalogs = sqlobject . BoolCol ( notNone = True ) rev = sqlobject . UnicodeCol ( notNone = False , length = 250 ) stats_version = sqlobject . IntCol ( notNone = True ) version_string = sqlobject . UnicodeCol ( notNone = True , length = 250 ) bundle = sqlobject . UnicodeCol ( length = 250 ) in_catalogs = sqlobject . MultipleJoin ( <str> , joinColumn = <str> ) files = sqlobject . MultipleJoin ( <str> , joinColumn = <str> ) catalog_idx = sqlobject . DatabaseIndex ( <str> ) basename_idx = sqlobject . DatabaseIndex ( <str> ) pkginst_idx = sqlobject . DatabaseIndex ( <str> ) def __init__ ( self , * args , ** kwargs ) :      super ( Srv4FileStats , self ) . __init__ ( * args , ** kwargs )  def __unicode__ ( self ) :      return <str> % ( self . pkginst . pkgname , self . catalogname , self . md5_sum )  def __str__ ( self ) :      return str ( unicode ( self ) )  def DeleteAllDependentObjects ( self ) :      self . DeleteDependentObjectsPopulatedFromPackageItself ( ) logger . debug ( <str> <str> , self ) self . RemoveCatalogAssignments ( ) self . RemoveAllCheckpkgResults ( )  def DeleteDependentObjectsPopulatedFromPackageItself ( self ) :      logger . debug ( <str> <str> , self ) self . RemoveAllCswFiles ( ) self . RemoveOverrides ( ) self . RemoveDepends ( ) self . RemoveIncompatibles ( )  def RemoveAllCswFiles ( self ) :      sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( CswFile . sqlmeta . table , CswFile . q . srv4_file == self ) ) )  def RemoveDepends ( self ) :      sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( Srv4DependsOn . sqlmeta . table , Srv4DependsOn . q . srv4_file == self ) ) )  def RemoveIncompatibles ( self ) :      sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( Srv4IncompatibleWith . sqlmeta . table , Srv4IncompatibleWith . q . srv4_file == self ) ) )  def RemoveCatalogAssignments ( self ) :      sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( Srv4FileInCatalog . sqlmeta . table , Srv4FileInCatalog . q . srv4file == self ) ) )  def GetOverridesResult ( self ) :      return CheckpkgOverride . select ( CheckpkgOverride . q . srv4_file == self )  def GetErrorTagsResult ( self , os_rel , arch , catrel ) :      assert arch . name != <str> , ( <str> <str> ) return CheckpkgErrorTag . select ( sqlobject . AND ( CheckpkgErrorTag . q . srv4_file == self , CheckpkgErrorTag . q . os_rel == os_rel , CheckpkgErrorTag . q . arch == arch , CheckpkgErrorTag . q . catrel == catrel ) )  def RemoveCheckpkgResults ( self , os_rel , arch , catrel ) :      logger . debug ( <str> , self , os_rel , arch , catrel ) sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( CheckpkgErrorTag . sqlmeta . table , sqlobject . AND ( CheckpkgErrorTag . q . srv4_file == self , CheckpkgErrorTag . q . os_rel == os_rel , CheckpkgErrorTag . q . arch == arch , CheckpkgErrorTag . q . catrel == catrel ) ) ) )  def RemoveAllCheckpkgResults ( self ) :      logger . debug ( <str> , self ) sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( CheckpkgErrorTag . sqlmeta . table , CheckpkgErrorTag . q . srv4_file == self ) ) )  def RemoveOverrides ( self ) :      logger . debug ( <str> , self ) sqlobject . sqlhub . processConnection . query ( sqlobject . sqlhub . processConnection . sqlrepr ( sqlbuilder . Delete ( CheckpkgOverride . sqlmeta . table , CheckpkgOverride . q . srv4_file == self ) ) )  def GetUnicodeOrNone ( self , s ) :      if s is None :        return None  if type ( s ) != unicode :        try :          s = unicode ( s , <str> )  except UnicodeDecodeError , e :          s = s . decode ( <str> , <str> ) s = s + <str>   return s  def GetStatsStruct ( self ) :      pkg_stats_sqo = Srv4FileStatsBlob . selectBy ( md5_sum = self . md5_sum ) . getOne ( ) return cjson . decode ( pkg_stats_sqo . json )  def _GetBuildSource ( self ) :      data = self . GetStatsStruct ( ) build_src = None if <str> in data [ <str> ] :        build_src = data [ <str> ] [ <str> ]  return build_src  def GetSvnUrl ( self ) :      build_src = self . _GetBuildSource ( ) svn_url = None if build_src :        svn_url = re . sub ( <str> , <str> , build_src )  return svn_url  def GetTracUrl ( self ) :      build_src = self . _GetBuildSource ( ) trac_url = None if build_src :        trac_url = re . sub ( <str> , <str> , build_src )  return trac_url  def GetVendorUrl ( self ) :      data = self . GetStatsStruct ( ) vendor_url = None if <str> in data [ <str> ] :        vendor_url = re . split ( <str> , data [ <str> ] [ <str> ] ) [ 0 ]  return vendor_url  def GetRestRepr ( self , quick = False ) :      mimetype = <str> data = { <str> : self . basename , <str> : self . basename , <str> : self . catalogname , <str> : self . md5_sum , <str> : SanitizeDatetime ( self . mtime ) , <str> : self . rev , <str> : self . size , <str> : self . version_string , <str> : self . version_string , <str> : self . osrel_str , <str> : self . pkginst_str , } if not quick :        data [ <str> ] = self . arch . name data [ <str> ] = self . filename_arch . name data [ <str> ] = self . maintainer . email data [ <str> ] = self . maintainer . full_name data [ <str> ] = self . maintainer . id data [ <str> ] = self . GetVendorUrl ( ) data [ <str> ] = self . GetSvnUrl ( )  return mimetype , data   class CheckpkgErrorTagMixin ( object ) :    def ToGarSyntax ( self ) :      msg_lines = [ ] if self . tag_info :        tag_postfix = <str> % self . tag_info . replace ( <str> , <str> )  else :        tag_postfix = <str>  msg_lines . append ( <str> % ( self . pkgname , self . tag_name , tag_postfix ) ) return <str> . join ( msg_lines )  def __eq__ ( self , other ) :      value = ( self . pkgname == other . pkgname and self . tag_name == other . tag_name and self . tag_info == other . tag_info ) return value   class CheckpkgErrorTag ( CheckpkgErrorTagMixin , sqlobject . SQLObject ) :    srv4_file = sqlobject . ForeignKey ( <str> , notNone = True ) pkgname = sqlobject . UnicodeCol ( default = None , length = 250 ) tag_name = sqlobject . UnicodeCol ( notNone = True , length = 250 ) tag_info = sqlobject . UnicodeCol ( default = None , length = 250 ) msg = sqlobject . UnicodeCol ( default = None , length = 250 ) overridden = sqlobject . BoolCol ( default = False ) os_rel = sqlobject . ForeignKey ( <str> , notNone = True ) arch = sqlobject . ForeignKey ( <str> , notNone = True ) catrel = sqlobject . ForeignKey ( <str> , notNone = True ) def __unicode__ ( self ) :      return ( <str> % ( self . pkgname , self . tag_name , self . tag_info ) )   class CheckpkgOverride ( sqlobject . SQLObject ) :    srv4_file = sqlobject . ForeignKey ( <str> , notNone = True ) pkgname = sqlobject . UnicodeCol ( default = None , length = 250 ) tag_name = sqlobject . UnicodeCol ( notNone = True , length = 250 ) tag_info = sqlobject . UnicodeCol ( default = None , length = 250 ) def __unicode__ ( self ) :      return ( <str> % ( self . pkgname , self . tag_name , self . tag_info or <str> ) )  def DoesApply ( self , tag ) :      basket_a = { } basket_b = { } if self . pkgname :        basket_a [ <str> ] = self . pkgname basket_b [ <str> ] = tag . pkgname  if self . tag_info :        basket_a [ <str> ] = self . tag_info basket_b [ <str> ] = tag . tag_info  basket_a [ <str> ] = self . tag_name basket_b [ <str> ] = tag . tag_name return basket_a == basket_b   class Srv4FileInCatalog ( sqlobject . SQLObject ) :    arch = sqlobject . ForeignKey ( <str> , notNone = True ) osrel = sqlobject . ForeignKey ( <str> , notNone = True ) catrel = sqlobject . ForeignKey ( <str> , notNone = True ) srv4file = sqlobject . ForeignKey ( <str> , notNone = True ) created_on = sqlobject . DateTimeCol ( notNone = True , default = sqlobject . DateTimeCol . now ) created_by = sqlobject . UnicodeCol ( length = 50 , notNone = True ) uniqueness_idx = sqlobject . DatabaseIndex ( <str> , <str> , <str> , <str> , unique = True ) class sqlmeta :      cacheValues = False  def __unicode__ ( self ) :      return ( <str> % ( self . srv4file , self . arch . name , self . osrel . full_name , self . catrel . name ) )   class Srv4DependsOn ( sqlobject . SQLObject ) :    srv4_file = sqlobject . ForeignKey ( <str> , notNone = True ) pkginst = sqlobject . ForeignKey ( <str> , notNone = True ) dep_uniq_idx = sqlobject . DatabaseIndex ( <str> , <str> )  class Srv4IncompatibleWith ( sqlobject . SQLObject ) :    srv4_file = sqlobject . ForeignKey ( <str> , notNone = True ) pkginst = sqlobject . ForeignKey ( <str> , notNone = True ) dep_uniq_idx = sqlobject . DatabaseIndex ( <str> , <str> )  def GetCatPackagesResult ( sqo_osrel , sqo_arch , sqo_catrel ) :    join = [ sqlbuilder . INNERJOINOn ( None , Srv4FileInCatalog , Srv4FileInCatalog . q . srv4file == Srv4FileStats . q . id ) , ] res = Srv4FileStats . select ( sqlobject . AND ( Srv4FileInCatalog . q . osrel == sqo_osrel , Srv4FileInCatalog . q . arch == sqo_arch , Srv4FileInCatalog . q . catrel == sqo_catrel , Srv4FileStats . q . use_to_generate_catalogs == True , ) , join = join , ) . orderBy ( <str> ) return res  def GetCatalogGenerationResult ( sqo_osrel , sqo_arch , sqo_catrel ) :    join = [ sqlbuilder . INNERJOINOn ( None , Srv4FileInCatalog , Srv4FileInCatalog . q . srv4file == Srv4FileStats . q . id ) , sqlbuilder . INNERJOINOn ( None , CatalogGenData , Srv4FileStats . q . md5_sum == CatalogGenData . q . md5_sum ) , sqlbuilder . INNERJOINOn ( None , Maintainer , Srv4FileStats . q . maintainer == Maintainer . q . id ) , ] where = sqlbuilder . AND ( Srv4FileInCatalog . q . osrel == sqo_osrel , Srv4FileInCatalog . q . arch == sqo_arch , Srv4FileInCatalog . q . catrel == sqo_catrel , Srv4FileStats . q . use_to_generate_catalogs == True , ) select = sqlbuilder . Select ( [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , ] , where = where , orderBy = <str> , join = join ) query = sqlobject . sqlhub . processConnection . sqlrepr ( select ) rows = sqlobject . sqlhub . processConnection . queryAll ( query ) return rows  def GetRecentlyBuiltPackages ( ) :    join = [ ] where = sqlbuilder . AND ( ) select = sqlbuilder . Select ( [ <str> , <str> , <str> , <str> , ] , where = where , orderBy = <str> , join = join , limit = 30 ) query = sqlobject . sqlhub . processConnection . sqlrepr ( select ) rows = sqlobject . sqlhub . processConnection . queryAll ( query ) return rows  def GetSqoTriad ( osrel , arch , catrel ) :    sqo_osrel = OsRelease . selectBy ( short_name = osrel ) . getOne ( ) sqo_arch = Architecture . selectBy ( name = arch ) . getOne ( ) sqo_catrel = CatalogRelease . selectBy ( name = catrel ) . getOne ( ) return sqo_osrel , sqo_arch , sqo_catrel   