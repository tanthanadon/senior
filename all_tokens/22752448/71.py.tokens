import sys import os import re from optparse import OptionParser from datetime import date from datetime import timedelta catalog = { } ; class CommandLineParser ( object ) :      def __init__ ( self ) :          self . parser = OptionParser ( ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> , type = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> ) self . parser . add_option ( <str> , <str> , help = <str> , action = <str> , dest = <str> )  def parse ( self ) :          ( self . options , self . args ) = self . parser . parse_args ( ) return self . options , self . args   class ConfigurationParser ( object ) :      def __init__ ( self , args ) :          if args . verbose != None :              self . verbose = args . verbose  else :              self . verbose = False  if args . simulate != None :              self . simulate = args . simulate  else :              self . simulate = False  if args . catalog != None :              self . catalog = args . catalog  else :              self . catalog = <str>  if args . tier1 != None :              self . tier1 = args . tier1  else :              self . tier1 = <str>  if args . tier2 != None :              self . tier2 = args . tier2  else :              self . tier2 = <str>  if args . tier3 != None :              self . tier3 = args . tier3  else :              self . tier3 = <str>  self . minage = args . minage self . maxage = args . maxage  def getCatalog ( self ) :          return self . catalog  def getTierInputFile ( self , tier ) : 	 if ( tier == 1 ) : 	         return self . tier1  if ( tier == 2 ) :         	 return self . tier2  if ( tier == 3 ) : 	         return self . tier3  return None  def getTierOutputFile ( self , tier ) : 	 return <str> % { <str> : self . getTierInputFile ( tier ) }  def getSimulate ( self ) :          return self . simulate  def getVerbose ( self ) :          return self . verbose  def getMinAge ( self ) :          return self . minage  def getMaxAge ( self ) :          return self . maxage   class Package : 	 def __init__ ( self , name = None , version = None , depends = None ) : 		 self . name = name if ( depends != <str> ) : 			 self . depends = depends  else : 			 self . depends = None  self . tier = 3 self . date = None self . age = None re_revisionString = re . compile ( <str> ) d1 = re_revisionString . search ( version ) if d1 : 			 d2 = d1 . group ( <str> ) . split ( <str> ) self . date = date ( year = int ( d2 [ 0 ] ) , month = int ( d2 [ 1 ] ) , day = int ( d2 [ 2 ] ) ) self . age = date . today ( ) - self . date if self . age . days > 365 : 				 self . tier = 3  else : 				 self . tier = 2   self . original = self . tier  def setTier ( self , tier ) : 		 global catalog if self . tier >= tier : 			 self . tier = tier if ( self . depends != None ) : 				 for pkg in self . depends . split ( <str> ) : 					 catalog [ pkg ] . setTier ( tier )      def main ( ) : 	 global catalog outputFile = { } countPkg = [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] cliParser = CommandLineParser ( ) ( opts , args ) = cliParser . parse ( ) configParser = ConfigurationParser ( opts ) for line in open ( configParser . getCatalog ( ) , <str> ) : 		 pkgInfo = line . split ( <str> ) version = pkgInfo [ 1 ] name = pkgInfo [ 2 ] depends = pkgInfo [ 6 ] catalog [ name ] = Package ( name , version , depends )  for pkg in catalog : 		 countPkg [ 0 ] [ catalog [ pkg ] . tier - 1 ] += 1  for pkg in catalog : 		 catalog [ pkg ] . setTier ( catalog [ pkg ] . tier )  for pkg in catalog : 		 countPkg [ 1 ] [ catalog [ pkg ] . tier - 1 ] += 1  for tier in ( 1 , 2 , 3 ) : 		 outputFile [ tier ] = open ( configParser . getTierOutputFile ( tier ) , <str> ) if os . path . isfile ( configParser . getTierInputFile ( tier ) ) : 			 for line in open ( configParser . getTierInputFile ( tier ) , <str> ) : 				 name = line . split ( <str> ) catalog [ name [ 0 ] ] . setTier ( tier )   else : 			 if configParser . getVerbose ( ) == True : 				 print <str> % { <str> : configParser . getTierInputFile ( tier ) }    for pkg in catalog : 		 if configParser . getSimulate ( ) == False : 			 if ( configParser . getMinAge ( ) == None ) and ( configParser . getMaxAge ( ) == None ) : 					 outputFile [ catalog [ pkg ] . tier ] . write ( <str> % { <str> : catalog [ pkg ] . name } )  else : 				 if ( catalog [ pkg ] . age != None ) : 					 if ( configParser . getMinAge ( ) == None ) or ( ( configParser . getMinAge ( ) != None ) and ( catalog [ pkg ] . age . days > configParser . getMinAge ( ) ) ) : 						 if ( configParser . getMaxAge ( ) == None ) or ( ( configParser . getMaxAge ( ) != None ) and ( catalog [ pkg ] . age . days < configParser . getMaxAge ( ) ) ) : 							 outputFile [ catalog [ pkg ] . tier ] . write ( <str> % { <str> : catalog [ pkg ] . name , <str> : catalog [ pkg ] . age . days } )      countPkg [ 2 ] [ catalog [ pkg ] . tier - 1 ] += 1  for tier in ( 1 , 2 , 3 ) : 		 outputFile [ tier ] . close ( )  if configParser . getSimulate ( ) == True : 		 print <str> for tier in ( 0 , 1 , 2 ) : 			 print <str> % { <str> : tier + 1 , <str> : countPkg [ 0 ] [ tier ] , <str> : countPkg [ 1 ] [ tier ] , <str> : countPkg [ 2 ] [ tier ] , <str> : countPkg [ 2 ] [ tier ] - countPkg [ 1 ] [ tier ] }    if __name__ == <str> :      sys . exit ( main ( ) )   