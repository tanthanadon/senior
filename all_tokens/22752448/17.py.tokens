import cjson import dateutil . parser import logging import os import re import sqlobject from sqlobject import sqlbuilder from lib . python import errors from lib . python import models from lib . python import representations PACKAGE_STATS_VERSION = 13 L logger = logging . getLogger ( <str> ) def GetOrSetPkginst ( pkgname ) :    try :      pkginst = models . Pkginst . selectBy ( pkgname = pkgname ) . getOne ( )  except sqlobject . main . SQLObjectNotFound as exc :      logger . debug ( <str> % ( pkgname , exc ) ) pkginst = models . Pkginst ( pkgname = pkgname )  return pkginst  def StatsStructToDatabaseLevelOne ( md5_sum , use_in_catalogs = True ) :    pkg_stats_sqo = models . Srv4FileStatsBlob . selectBy ( md5_sum = md5_sum ) . getOne ( ) pkg_stats = cjson . decode ( pkg_stats_sqo . json ) pkgname = pkg_stats [ <str> ] [ <str> ] pkginst = GetOrSetPkginst ( pkgname ) arch_name = pkg_stats [ <str> ] [ <str> ] arch = models . Architecture . selectBy ( name = arch_name ) . getOne ( ) filename_arch_str = pkg_stats [ <str> ] [ <str> ] [ <str> ] filename_arch = models . Architecture . selectBy ( name = filename_arch_str ) . getOne ( ) parsed_basename = pkg_stats [ <str> ] [ <str> ] os_rel_name = parsed_basename [ <str> ] try :      os_rel = models . OsRelease . selectBy ( short_name = os_rel_name ) . getOne ( )  except sqlobject . main . SQLObjectNotFound :      msg = ( <str> <str> % ( os_rel_name , md5_sum , pkg_stats [ <str> ] [ <str> ] ) ) logger . warning ( msg ) os_rel = models . OsRelease . selectBy ( short_name = <str> ) . getOne ( )  maint_email = pkg_stats [ <str> ] [ <str> ] try :      maintainer = models . Maintainer . selectBy ( email = maint_email ) . getOne ( )  except sqlobject . main . SQLObjectNotFound as exc :      logger . debug ( exc ) maint_name = None vendor_str = pkg_stats [ <str> ] [ <str> ] maint_name_magic_str = <str> if maint_name_magic_str in vendor_str :        maint_name = re . sub ( <str> % maint_name_magic_str , <str> , vendor_str )  maintainer = models . Maintainer ( email = maint_email , full_name = maint_name )  rev = None if <str> in parsed_basename :      if <str> in parsed_basename [ <str> ] :        rev = parsed_basename [ <str> ] [ <str> ]   db_pkg_stats = None try :      db_pkg_stats = models . Srv4FileStats . selectBy ( md5_sum = md5_sum ) . getOne ( )  except sqlobject . main . SQLObjectNotFound :      logger . debug ( <str> <str> , parsed_basename )  register = True bundle = pkg_stats [ <str> ] . get ( <str> , None ) if db_pkg_stats :      db_pkg_stats . arch = arch db_pkg_stats . basename = pkg_stats [ <str> ] [ <str> ] db_pkg_stats . catalogname = pkg_stats [ <str> ] [ <str> ] db_pkg_stats . use_to_generate_catalogs = use_in_catalogs db_pkg_stats . filename_arch = filename_arch db_pkg_stats . maintainer = maintainer db_pkg_stats . md5_sum = pkg_stats [ <str> ] [ <str> ] db_pkg_stats . size = pkg_stats [ <str> ] [ <str> ] db_pkg_stats . mtime = dateutil . parser . parse ( pkg_stats [ <str> ] ) db_pkg_stats . os_rel = os_rel db_pkg_stats . osrel_str = os_rel . short_name db_pkg_stats . pkginst = pkginst db_pkg_stats . pkginst_str = pkginst . pkgname db_pkg_stats . registered_level_one = register db_pkg_stats . registered_level_two = False db_pkg_stats . rev = rev db_pkg_stats . stats_version = PACKAGE_STATS_VERSION db_pkg_stats . version_string = parsed_basename [ <str> ] db_pkg_stats . bundle = bundle  else :      db_pkg_stats = models . Srv4FileStats ( arch = arch , basename = pkg_stats [ <str> ] [ <str> ] , catalogname = pkg_stats [ <str> ] [ <str> ] , use_to_generate_catalogs = use_in_catalogs , filename_arch = filename_arch , maintainer = maintainer , md5_sum = md5_sum , size = pkg_stats [ <str> ] [ <str> ] , mtime = dateutil . parser . parse ( pkg_stats [ <str> ] ) , os_rel = os_rel , osrel_str = os_rel . short_name , pkginst = pkginst , pkginst_str = pkginst . pkgname , registered_level_one = register , registered_level_two = False , rev = rev , stats_version = PACKAGE_STATS_VERSION , version_string = parsed_basename [ <str> ] , bundle = bundle )  db_pkg_stats . RemoveOverrides ( ) for override_dict in pkg_stats [ <str> ] :      models . CheckpkgOverride ( srv4_file = db_pkg_stats , ** override_dict )  db_pkg_stats . registered_level_one = True return db_pkg_stats , pkg_stats  def StatsStructToDatabaseLevelTwo ( md5_sum , use_in_catalogs ) :    db_pkg_stats , pkg_stats = StatsStructToDatabaseLevelOne ( md5_sum , use_in_catalogs = use_in_catalogs ) if db_pkg_stats . registered_level_two :      return db_pkg_stats , pkg_stats  pkginst = db_pkg_stats . pkginst try :      models . CatalogGenData . selectBy ( md5_sum = md5_sum ) . getOne ( ) . destroySelf ( )  except sqlobject . SQLObjectNotFound :      pass  finally :      catalog_gen_data = models . CatalogGenData ( md5_sum = pkg_stats [ <str> ] [ <str> ] , deps = cjson . encode ( pkg_stats [ <str> ] ) , pkgname = pkg_stats [ <str> ] [ <str> ] , i_deps = cjson . encode ( pkg_stats [ <str> ] ) , pkginfo_name = pkg_stats [ <str> ] [ <str> ] )  files_metadata = [ representations . FileMetadata . _make ( x ) for x in pkg_stats [ <str> ] ] mimetype_by_path = dict ( ( os . path . join ( <str> , x . path ) , x . mime_type ) for x in files_metadata ) machine_by_path = dict ( ( x . path , x . mime_type ) for x in files_metadata ) for pkgmap_tuple in pkg_stats [ <str> ] :      pkgmap_entry = representations . PkgmapEntry . _make ( pkgmap_tuple ) if not pkgmap_entry . path :        continue  try :        line_u = pkgmap_entry . line . decode ( <str> ) f_path , basename = os . path . split ( pkgmap_entry . path . decode ( <str> ) )  except UnicodeDecodeError as e :        line_u = pkgmap_entry . line . decode ( <str> ) f_path , basename = os . path . split ( pkgmap_entry . path . decode ( <str> ) )  except UnicodeEncodeError as e :        line_u = pkgmap_entry . line f_path , basename = os . path . split ( pkgmap_entry . path )  mimetype = None if pkgmap_entry . path in mimetype_by_path :        mimetype = mimetype_by_path [ pkgmap_entry . path ]  machine = None if pkgmap_entry . path in machine_by_path :        machine = machine_by_path [ pkgmap_entry . path ]  models . CswFile ( basename = basename , path = f_path , line = line_u , pkginst = pkginst , srv4_file = db_pkg_stats , perm_user = pkgmap_entry . owner , perm_group = pkgmap_entry . group , perm_mode = pkgmap_entry . mode , target = pkgmap_entry . target , mimetype = mimetype , machine = machine , )  deps_res = models . Srv4DependsOn . selectBy ( srv4_file = db_pkg_stats ) for dep_obj in deps_res :      dep_obj . destroySelf ( )  for dep_pkgname , unused_desc in pkg_stats [ <str> ] :      dep_pkginst = GetOrSetPkginst ( dep_pkgname ) models . Srv4DependsOn ( srv4_file = db_pkg_stats , pkginst = dep_pkginst )  deps_res = models . Srv4IncompatibleWith . selectBy ( srv4_file = db_pkg_stats ) for dep_obj in deps_res :      dep_obj . destroySelf ( )  for dep_pkgname in pkg_stats [ <str> ] :      dep_pkginst = GetOrSetPkginst ( dep_pkgname ) models . Srv4IncompatibleWith ( srv4_file = db_pkg_stats , pkginst = dep_pkginst )  db_pkg_stats . registered_level_two = True return db_pkg_stats , pkg_stats   