import copy import logging import magic import os import re from lib . python import common_constants from lib . python import errors from lib . python import ldd_emul from lib . python import representations from lib . python import sharedlib_utils from lib . python import shell from lib . python . collect_binary_elfinfo import ElfExtractor ROOT_RE = re . compile ( <str> ) class MimeTypeError ( errors . Error ) :     def StripRe ( string_to_strip , strip_re ) :    return re . sub ( strip_re , <str> , string_to_strip )  class FileMagic ( object ) :    def __init__ ( self ) :      self . cookie_count = 0 self . _magic_cookie = None  def Close ( self ) :      if self . _magic_cookie is not None :        self . _magic_cookie . close ( ) self . _magic_cookie = None   @ property def magic_cookie ( self ) :      if not self . _magic_cookie :        self . _magic_cookie = magic . open ( self . cookie_count ) self . cookie_count += 1 self . _magic_cookie . load ( ) if <str> in dir ( magic ) :          flag = magic . MAGIC_MIME  elif <str> in dir ( magic ) :          flag = magic . MIME  self . _magic_cookie . setflags ( flag )  return self . _magic_cookie  def GetFileMimeType ( self , full_path ) :      logging . debug ( <str> , full_path ) mime = self . magic_cookie . file ( full_path ) if not mime :        raise MimeTypeError ( <str> % ( full_path ) )  return mime   def GetFileMetadata ( file_magic , base_dir , file_path ) :    full_path = unicode ( os . path . join ( base_dir , file_path ) ) if not os . access ( full_path , os . R_OK ) :      return representations . FileMetadata ( file_path , None , None )  file_info_path = StripRe ( file_path , ROOT_RE ) file_info_mime_type = file_magic . GetFileMimeType ( full_path ) if base_dir :      file_info_path = os . path . join ( base_dir , file_info_path )  if not file_info_mime_type :      logging . error ( <str> , full_path ) msg = ( <str> <str> <str> <str> <str> <str> <str> <str> % full_path ) if <str> in full_path :        file_info_mime_type = <str> logging . error ( msg )  else :        raise MimeTypeError ( msg )   if sharedlib_utils . IsBinary ( { <str> : file_info_mime_type } , check_consistency = False ) :      elffile = ElfExtractor ( full_path ) file_info_machine_id = elffile . GetMachineIdOfBinary ( )  else :      file_info_machine_id = None  return representations . FileMetadata ( file_path , file_info_mime_type , file_info_machine_id )  def GetBinaryDumpInfo ( binary_abs_path , binary ) :    binary_base_name = os . path . basename ( binary ) elf_extractor = ElfExtractor ( binary_abs_path ) binary_dump_info = elf_extractor . CollectBinaryDumpinfo ( ) runpath_to_save = [ ] if binary_dump_info [ <str> ] :        runpath_to_save . extend ( binary_dump_info [ <str> ] )  elif binary_dump_info [ <str> ] :        runpath_to_save . extend ( binary_dump_info [ <str> ] )  binary_dump_info = representations . BinaryDumpInfo ( binary , binary_base_name , binary_dump_info [ <str> ] , tuple ( binary_dump_info [ <str> ] ) , tuple ( runpath_to_save ) , ( binary_dump_info [ <str> ] == binary_dump_info [ <str> ] ) , bool ( binary_dump_info [ <str> ] ) , bool ( binary_dump_info [ <str> ] ) , ) return binary_dump_info   