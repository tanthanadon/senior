import datetime import hashlib import logging import operator import optparse import os import sqlobject import sys import textwrap from lib . python import checkpkg_lib from lib . python import common_constants from lib . python import configuration from lib . python import errors from lib . python import models from lib . python import overrides from lib . python import package_stats from lib . python import rest from lib . python import struct_util USAGE = CHECKPKG_MODULE_NAME = <str> BEFORE_OVERRIDES = AFTER_OVERRIDES = ( <str> , <str> <str> <str> , <str> , ) UNAPPLIED_OVERRIDES = ( ) cc = common_constants class UsageError ( errors . Error ) :     def VerifyContents ( sqo_osrel , sqo_arch ) :    res = models . Srv4FileStats . select ( sqlobject . AND ( models . Srv4FileStats . q . use_to_generate_catalogs == False , models . Srv4FileStats . q . registered_level_two == True , models . Srv4FileStats . q . os_rel == sqo_osrel , models . Srv4FileStats . q . arch == sqo_arch ) ) system_pkgs = res . count ( ) logging . debug ( <str> , sqo_osrel , sqo_arch , system_pkgs ) if system_pkgs < 10 :      msg = ( <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> <str> % ( sqo_osrel . short_name , sqo_arch . name , sqo_arch . name , sqo_osrel . short_name , sqo_osrel . short_name , sqo_arch . name ) ) logging . fatal ( msg ) raise errors . DatabaseContentsError ( <str> )   def main ( ) :    parser = optparse . OptionParser ( USAGE ) parser . add_option ( <str> , <str> , dest = <str> , action = <str> , default = False , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , action = <str> , default = False , help = <str> ) parser . add_option ( <str> , dest = <str> , default = <str> , help = <str> ) parser . add_option ( <str> , <str> , dest = <str> , help = ( <str> <str> ) ) parser . add_option ( <str> , <str> , dest = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , default = False , action = <str> , help = <str> ) options , args = parser . parse_args ( ) assert len ( args ) , <str> logging_level = logging . INFO if options . quiet :      logging_level = logging . WARNING  elif options . debug :      logging_level = logging . DEBUG  fmt = <str> logging . basicConfig ( format = fmt , level = logging_level ) logging . debug ( <str> ) configuration . SetUpSqlobjectConnection ( ) err_msg_list = [ ] if not options . osrel_commas :      err_msg_list . append ( <str> )  if not options . arch :      err_msg_list . append ( <str> )  if options . arch not in cc . PHYSICAL_ARCHITECTURES :      err_msg_list . append ( <str> % ( cc . PHYSICAL_ARCHITECTURES , options . arch ) )  if err_msg_list :      raise UsageError ( <str> . join ( err_msg_list ) )  md5_sums_from_files = [ ] collector = package_stats . StatsCollector ( logger = logging , debug = options . debug ) md5_sums , file_list = [ ] , [ ] for arg in args :      if struct_util . IsMd5 ( arg ) :        md5_sums . append ( arg )  else :        file_list . append ( arg )   config = configuration . GetConfig ( ) username , password = rest . GetUsernameAndPassword ( ) rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password ) if file_list :      def MakeEntry ( file_name ) :        file_hash = hashlib . md5 ( ) with open ( file_name , <str> ) as fd :          chunk_size = 2 * 1024 * 1024 data = fd . read ( chunk_size ) while data :            file_hash . update ( data ) data = fd . read ( chunk_size )  md5_sum = file_hash . hexdigest ( ) del file_hash  _ , file_basename = os . path . split ( file_name ) return { <str> : file_name , <str> : md5_sum , <str> : file_basename , }  entries = [ MakeEntry ( x ) for x in file_list ] md5_sums_from_files = collector . CollectStatsFromCatalogEntries ( entries , False ) for md5_sum in md5_sums_from_files :        if not rest_client . IsRegisteredLevelOne ( md5_sum ) :          rest_client . RegisterLevelOne ( md5_sum )    md5_sums . extend ( md5_sums_from_files ) assert md5_sums , <str> logging . debug ( <str> , md5_sums ) osrel_list = options . osrel_commas . split ( <str> ) logging . debug ( <str> ) sqo_pkgs = list ( models . Srv4FileStats . select ( sqlobject . IN ( models . Srv4FileStats . q . md5_sum , md5_sums ) ) ) tags_for_all_osrels = [ ] try :      sqo_catrel = models . CatalogRelease . selectBy ( name = options . catrel ) . getOne ( )  except sqlobject . main . SQLObjectNotFound as e :      logging . fatal ( <str> , repr ( str ( options . catrel ) ) ) logging . fatal ( <str> ) sqo_catrels = models . CatalogRelease . select ( ) for sqo_catrel in sqo_catrels :        logging . fatal ( <str> , sqo_catrel . name )  raise  sqo_arch = models . Architecture . selectBy ( name = options . arch ) . getOne ( ) for osrel in osrel_list :      sqo_osrel = models . OsRelease . selectBy ( short_name = osrel ) . getOne ( ) VerifyContents ( sqo_osrel , sqo_arch ) check_manager = checkpkg_lib . CheckpkgManager2 ( CHECKPKG_MODULE_NAME , sqo_pkgs , osrel , options . arch , options . catrel , debug = options . debug , show_progress = ( os . isatty ( 1 ) and not options . quiet ) ) exit_code , screen_report , tags_report = check_manager . Run ( ) screen_report = unicode ( screen_report ) if not options . quiet and screen_report :        sys . stdout . write ( screen_report )  else :        logging . debug ( <str> )  overrides_list = [ list ( pkg . GetOverridesResult ( ) ) for pkg in sqo_pkgs ] override_list = reduce ( operator . add , overrides_list ) args = ( sqo_osrel , sqo_arch , sqo_catrel ) tag_lists = [ list ( pkg . GetErrorTagsResult ( * args ) ) for pkg in sqo_pkgs ] error_tags = reduce ( operator . add , tag_lists ) ( tags_after_overrides , unapplied_overrides ) = overrides . ApplyOverrides ( error_tags , override_list ) tags_for_all_osrels . extend ( tags_after_overrides ) if not options . quiet :        if tags_after_overrides :          print ( textwrap . fill ( BEFORE_OVERRIDES , 80 ) ) for checkpkg_tag in tags_after_overrides :            print checkpkg_tag . ToGarSyntax ( )  print for paragraph in AFTER_OVERRIDES :            print ( textwrap . fill ( paragraph , 80 ) ) print   elif error_tags :          msg = ( <str> <str> <str> <str> % len ( error_tags ) ) print  else :          print ( <str> )  if unapplied_overrides :          print textwrap . fill ( UNAPPLIED_OVERRIDES , 80 ) for override in unapplied_overrides :            print <str> % override     exit_code = bool ( tags_for_all_osrels ) sys . exit ( exit_code )  if __name__ == <str> :    if <str> in sys . argv :      import cProfile t_str = datetime . datetime . now ( ) . strftime ( <str> ) home = os . environ [ <str> ] cprof_file_name = os . path . join ( home , <str> , <str> % t_str ) cProfile . run ( <str> , sort = 1 , filename = cprof_file_name )  else :      main ( )    