from StringIO import StringIO import getpass import hashlib import json import logging import optparse import os . path import pycurl import rest import socket import subprocess import sys import urllib2 import common_constants import configuration import errors import file_set_checker import opencsw import struct_util DEFAULT_CATREL = <str> USAGE = class PackageCheckError ( errors . Error ) :     class DataError ( errors . Error ) :     class WorkflowError ( errors . Error ) :     class OurInfrastructureSucksError ( errors . Error ) :     class Srv4Uploader ( object ) :    def __init__ ( self , filenames , os_release = None , debug = False , output_to_screen = True , username = None , password = None , catrel = DEFAULT_CATREL ) :      super ( Srv4Uploader , self ) . __init__ ( ) if filenames :        filenames = self . SortFilenames ( filenames )  self . filenames = filenames self . md5_by_filename = { } self . debug = debug self . os_release = os_release config = configuration . GetConfig ( ) self . _rest_client = rest . RestClient ( pkgdb_url = config . get ( <str> , <str> ) , releases_url = config . get ( <str> , <str> ) , username = username , password = password ) self . output_to_screen = output_to_screen self . username = username self . password = password self . catrel = catrel  def _SetAuth ( self , c ) :      if self . username :        logging . debug ( <str> , self . username ) c . setopt ( pycurl . HTTPAUTH , pycurl . HTTPAUTH_BASIC ) c . setopt ( pycurl . USERPWD , <str> % ( self . username , self . password ) )  else :        logging . debug ( <str> )  return c  def _ImportMetadata ( self , filename ) :      md5_sum = self . _GetFileMd5sum ( filename ) metadata = self . _rest_client . GetPkgByMd5 ( md5_sum ) if metadata :        return  logging . fatal ( <str> , filename , md5_sum ) raise OurInfrastructureSucksError ( <str> <str> <str> <str> <str> <str> <str> )  def Upload ( self ) :      do_upload = True planned_modifications = [ ] metadata_by_md5 = { } if self . output_to_screen :        print <str> % ( len ( self . filenames ) , )  for filename in self . filenames :        self . _ImportMetadata ( filename ) md5_sum = self . _GetFileMd5sum ( filename ) if not self . _rest_client . IsRegisteredLevelTwo ( md5_sum ) :          self . _rest_client . RegisterLevelTwo ( md5_sum )  file_in_allpkgs , file_metadata = self . _GetSrv4FileMetadata ( md5_sum ) if file_in_allpkgs :          logging . debug ( <str> , filename )  else :          if do_upload :            logging . debug ( <str> , filename ) self . _rest_client . PostFile ( filename , md5_sum ) file_in_allpkgs , file_metadata = self . _GetSrv4FileMetadata ( md5_sum )   logging . debug ( <str> , repr ( file_metadata ) ) if not file_metadata :          logging . error ( <str> <str> <str> <str> <str> ) raise DataError ( <str> % repr ( file_metadata ) )  osrel = file_metadata [ <str> ] arch = file_metadata [ <str> ] metadata_by_md5 [ md5_sum ] = file_metadata catalogs = self . _MatchSrv4ToCatalogs ( filename , self . catrel , arch , osrel , md5_sum ) for unused_catrel , cat_arch , cat_osrel in catalogs :          planned_modifications . append ( ( filename , md5_sum , arch , osrel , cat_arch , cat_osrel ) )   checkpkg_sets = self . _CheckpkgSets ( planned_modifications ) checks_successful = self . _RunCheckpkg ( checkpkg_sets ) if checks_successful :        if self . output_to_screen :          print <str>  for arch , osrel in sorted ( checkpkg_sets ) :          for filename , md5_sum in checkpkg_sets [ ( arch , osrel ) ] :            file_metadata = metadata_by_md5 [ md5_sum ] self . _InsertIntoCatalog ( filename , arch , osrel , file_metadata )     def _GetFileMd5sum ( self , filename ) :      if filename not in self . md5_by_filename :        logging . debug ( <str> , filename ) with open ( filename , <str> ) as fd :          hash = hashlib . md5 ( ) hash . update ( fd . read ( ) ) md5_sum = hash . hexdigest ( ) self . md5_by_filename [ filename ] = md5_sum   return self . md5_by_filename [ filename ]  def _MatchSrv4ToCatalogs ( self , filename , catrel , srv4_arch , srv4_osrel , md5_sum ) :      basename = os . path . basename ( filename ) parsed_basename = opencsw . ParsePackageFileName ( basename ) osrels = None for idx , known_osrel in enumerate ( common_constants . OS_RELS ) :        if srv4_osrel == known_osrel :          osrels = common_constants . OS_RELS [ idx : ]   assert osrels , <str> if srv4_arch == <str> :        archs = ( <str> , <str> )  else :        archs = ( srv4_arch , )  catalogname = parsed_basename [ <str> ] catalogs = [ ] first_cat_osrel_seen = None for arch in archs :        for osrel in osrels :          logging . debug ( <str> , catrel , arch , osrel ) cat_key = ( catrel , arch , osrel ) try :            srv4_in_catalog = self . _rest_client . Srv4ByCatalogAndCatalogname ( catrel , arch , osrel , catalogname )  except urllib2 . HTTPError :            srv4_in_catalog = None  if srv4_in_catalog :            logging . debug ( <str> , arch , osrel , srv4_in_catalog [ <str> ] , catalogname )  else :            logging . debug ( <str> , arch , osrel , catalogname )  if not first_cat_osrel_seen :            if srv4_in_catalog :              first_cat_osrel_seen = srv4_in_catalog [ <str> ]  else :              first_cat_osrel_seen = srv4_osrel  logging . debug ( <str> , first_cat_osrel_seen )  if ( not srv4_in_catalog or srv4_in_catalog [ <str> ] == srv4_osrel or srv4_in_catalog [ <str> ] == first_cat_osrel_seen ) :            if ( not self . os_release or ( self . os_release and osrel == self . os_release ) ) :              catalogs . append ( cat_key )   else :            if self . os_release and osrel == self . os_release :              logging . debug ( <str> , osrel ) catalogs . append ( cat_key )  else :              logging . debug ( <str> , catalogname , srv4_osrel , osrel , srv4_in_catalog [ <str> ] )  logging . debug ( <str> , catrel , arch , osrel , catalogname )    return tuple ( catalogs )  def _InsertIntoCatalog ( self , filename , arch , osrel , file_metadata ) :      logging . debug ( <str> , repr ( arch ) , repr ( osrel ) , repr ( filename ) ) print ( <str> % ( file_metadata [ <str> ] , file_metadata [ <str> ] , file_metadata [ <str> ] , self . catrel , arch , osrel ) ) md5_sum = self . _GetFileMd5sum ( filename ) basename = os . path . basename ( filename ) parsed_basename = opencsw . ParsePackageFileName ( basename ) logging . debug ( <str> , parsed_basename ) return self . _rest_client . AddSvr4ToCatalog ( self . catrel , arch , osrel , md5_sum )  def _GetSrv4FileMetadata ( self , md5_sum ) :      return self . _rest_client . GetSrv4FileMetadataForReleases ( md5_sum )  def _CheckpkgSets ( self , planned_modifications ) :      by_catalog = { } for fields in planned_modifications :        filename , md5_sum , pkg_arch , pkg_osrel , cat_arch , cat_osrel = fields key = cat_arch , cat_osrel by_catalog . setdefault ( key , [ ] ) by_catalog [ key ] . append ( ( filename , md5_sum ) )  return by_catalog  def SortFilenames ( self , filenames ) :      by_osrel = { } sorted_filenames = [ ] for filename in filenames :        basename = os . path . basename ( filename ) parsed_basename = opencsw . ParsePackageFileName ( basename ) by_osrel . setdefault ( parsed_basename [ <str> ] , [ ] ) . append ( filename )  for osrel in common_constants . OS_RELS :        if osrel in by_osrel :          for filename in by_osrel . pop ( osrel ) :            sorted_filenames . append ( filename )    if by_osrel :        raise DataError ( <str> % ( repr ( by_osrel ) , ) )  return sorted_filenames  def _PluralS ( self , number ) :      return <str> if number == 0 or number >= 2 else <str>  def _RunCheckpkg ( self , checkpkg_sets ) :      bin_dir = os . path . dirname ( __file__ ) checkpkg_executable = os . path . join ( bin_dir , <str> ) assert os . path . exists ( checkpkg_executable ) , ( <str> <str> <str> % checkpkg_executable ) checks_failed_for_catalogs = [ ] args_by_cat = { } for arch , osrel in checkpkg_sets :        number_checked = len ( checkpkg_sets [ ( arch , osrel ) ] ) print ( <str> % ( number_checked , self . _PluralS ( number_checked ) , self . catrel , arch , osrel ) ) md5_sums = [ ] basenames = [ ] for filename , md5_sum in checkpkg_sets [ ( arch , osrel ) ] :          md5_sums . append ( md5_sum ) basenames . append ( os . path . basename ( filename ) )  args_by_cat [ ( arch , osrel ) ] = [ checkpkg_executable , <str> , self . catrel , <str> , osrel , <str> , arch , ] + md5_sums ret = subprocess . call ( args_by_cat [ ( arch , osrel ) ] + [ <str> ] ) if ret :          checks_failed_for_catalogs . append ( ( arch , osrel , basenames ) )   if checks_failed_for_catalogs :        print <str> for arch , osrel , basenames in checks_failed_for_catalogs :          print <str> % ( arch , osrel ) for basename in basenames :            print <str> % basename  print <str> print <str> , <str> . join ( args_by_cat [ ( arch , osrel ) ] ) print <str> for md5s in md5_sums :            print <str> % md5s   print ( <str> % self . catrel )  return not checks_failed_for_catalogs   if __name__ == <str> :    parser = optparse . OptionParser ( USAGE ) parser . add_option ( <str> , <str> , dest = <str> , default = False , action = <str> ) parser . add_option ( <str> , dest = <str> , help = <str> <str> . format ( <str> . join ( common_constants . OS_RELS ) ) ) parser . add_option ( <str> , dest = <str> , default = True , action = <str> , help = <str> ) parser . add_option ( <str> , dest = <str> , default = DEFAULT_CATREL , help = ( <str> <str> <str> ) ) options , args = parser . parse_args ( ) logging_level = logging . INFO if options . debug :      logging_level = logging . DEBUG  fmt = <str> logging . basicConfig ( format = fmt , level = logging_level ) logging . debug ( <str> , args ) hostname = socket . gethostname ( ) if not hostname . startswith ( <str> ) :      logging . warning ( <str> )  os_release = options . os_release if os_release :      os_release = struct_util . OsReleaseToLong ( os_release )  if not args :      parser . print_usage ( ) sys . exit ( 1 )  fc = file_set_checker . FileSetChecker ( ) error_tags = fc . CheckFiles ( args ) if error_tags :      print <str> for error_tag in error_tags :        print <str> , error_tag  if options . filename_check :        sys . exit ( 1 )  else :        print <str>   if os_release and os_release not in common_constants . OS_RELS :      raise DataError ( <str> % ( os_release , common_constants . OS_RELS ) )  username , password = rest . GetUsernameAndPassword ( ) uploader = Srv4Uploader ( args , os_release = os_release , debug = options . debug , username = username , password = password , catrel = options . catrel ) uploader . Upload ( )   