import optparse import rest import common_constants import pprint import gdbm import logging import sys import os import cjson import subprocess import makeStdLibDb catrel = <str> cache_file_bins = <str> cache_file_links = <str> cache_file_needed_bins = <str> fn_stdlibs = <str> fn_report = <str> class FindBins ( object ) :    def __init__ ( self ) :      self . cached_catalogs_bins = { } self . cached_catalogs_links = { } self . cached_catalogs_needed_bins = { } self . rest_client = rest . RestClient ( ) self . cp = rest . CachedPkgstats ( <str> )  def MakeRevIndex ( self , catrel , arch , osrel ) :      key = ( catrel , arch , osrel ) if key in self . cached_catalogs_bins :        return  fn_bins = cache_file_bins % key fn_links = cache_file_links % key fn_needed_bins = cache_file_needed_bins % key if os . path . exists ( fn_bins ) and os . path . exists ( fn_needed_bins ) and os . path . exists ( fn_links ) :        with open ( fn_bins , <str> ) as fd :          self . cached_catalogs_bins [ key ] = cjson . decode ( fd . read ( ) )  with open ( fn_links , <str> ) as fd :          self . cached_catalogs_links [ key ] = cjson . decode ( fd . read ( ) )  with open ( fn_needed_bins , <str> ) as fd :          self . cached_catalogs_needed_bins [ key ] = cjson . decode ( fd . read ( ) )  return  catalog = self . rest_client . GetCatalog ( * key ) bins = { } links = { } needed_bins = { } i = 0 for pkg_simple in catalog :        i = i + 1 cb = [ ] cl = [ ] nb = [ ] md5 = pkg_simple [ <str> ] pkg = self . cp . GetPkgstats ( md5 ) if not pkg :          logging . warning ( <str> , md5 ) continue  try :          pkg_name = pkg [ <str> ] [ <str> ] for p in pkg [ <str> ] :            for b in p [ <str> ] :              if b not in nb :                nb . append ( b )    for b in pkg [ <str> ] :              if b not in cb :                cb . append ( b )  else :                logging . debug ( <str> )   for pm in pkg [ <str> ] :              if pm [ <str> ] == <str> :                cl . append ( pm [ <str> ] . split ( <str> ) [ 3 ] . split ( <str> ) [ 0 ] )    except KeyError :          logging . warning ( <str> )  bins [ pkg_name ] = cb needed_bins [ pkg_name ] = nb links [ pkg_name ] = cl sys . stdout . write ( <str> % ( i , pkg_name ) ) sys . stdout . flush ( )  sys . stdout . write ( <str> ) self . cached_catalogs_bins [ key ] = bins self . cached_catalogs_links [ key ] = links self . cached_catalogs_needed_bins [ key ] = needed_bins with open ( fn_bins , <str> ) as fd :        fd . write ( cjson . encode ( self . cached_catalogs_bins [ key ] ) )  fd . close ( ) with open ( fn_links , <str> ) as fd :        fd . write ( cjson . encode ( self . cached_catalogs_links [ key ] ) )  fd . close ( ) with open ( fn_needed_bins , <str> ) as fd :        fd . write ( cjson . encode ( self . cached_catalogs_needed_bins [ key ] ) )  fd . close ( )  def getBins ( self , catrel , arch , osrel ) :      self . MakeRevIndex ( catrel , arch , osrel ) key = ( catrel , arch , osrel ) return self . cached_catalogs_bins [ key ]  def getLinks ( self , catrel , arch , osrel ) :      self . MakeRevIndex ( catrel , arch , osrel ) key = ( catrel , arch , osrel ) return self . cached_catalogs_links [ key ]  def getNeededBins ( self , catrel , arch , osrel ) :      self . MakeRevIndex ( catrel , arch , osrel ) key = ( catrel , arch , osrel ) return self . cached_catalogs_needed_bins [ key ]   class PackageScanner ( object ) :    def scanPackage ( self ) :      rest_client = rest . RestClient ( ) rd = FindBins ( ) needed_bins = { } osrel_list = [ ] with open ( fn_stdlibs , <str> ) as fd :          stdlibs = cjson . decode ( fd . read ( ) )  fl = open ( fn_report , <str> ) for osrel in common_constants . OS_RELS :        if osrel in common_constants . OBSOLETE_OS_RELS :          logging . debug ( <str> % osrel ) continue  for arch in common_constants . PHYSICAL_ARCHITECTURES :          bins = rd . getBins ( catrel , arch , osrel ) needed_bins = rd . getNeededBins ( catrel , arch , osrel ) links = rd . getLinks ( catrel , arch , osrel ) i = 0 checked = [ ] for pkg in needed_bins :            i = i + 1 for nb in needed_bins [ pkg ] :              if nb in checked : continue checked . append ( nb ) found = False for npkg in bins :                for b in bins [ npkg ] :                  if nb in b :                    found = True break   if found : break  if not found :                  for lpkg in links :                    for l in links [ lpkg ] :                      if nb in l :                        found = True break   if found : break   if not found :                  if nb in stdlibs :                      found = True   if not found :                fl . write ( <str> % ( nb , pkg , arch , osrel ) ) print <str> % ( nb , pkg , arch , osrel )  sys . stdout . write ( <str> % ( i , pkg ) ) sys . stdout . flush ( )     fl . close ( )   def main ( ) :    parser = optparse . OptionParser ( ) parser . add_option ( <str> , dest = <str> , action = <str> ) options , args = parser . parse_args ( ) if options . debug :      logging . basicConfig ( level = logging . DEBUG )  if not os . path . exists ( fn_stdlibs ) :      print <str> % fn_stdlibs makeStdLibDb . buildStdlibList ( )  pr = PackageScanner ( ) pr . scanPackage ( ) print <str>  if __name__ == <str> :    main ( )   