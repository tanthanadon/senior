import odl from matplotlib import pyplot as plt space = odl . rn ( 2 ) f = odl . solvers . RosenbrockFunctional ( space ) line_search = odl . solvers . BacktrackingLineSearch ( f ) callback = odl . solvers . CallbackShowConvergence ( f , logx = True , logy = True , color = <str> ) x = space . zero ( ) odl . solvers . steepest_descent ( f , x , line_search = line_search , callback = callback ) legend_artists = [ callback . ax . collections [ - 1 ] , ] legend_labels = [ <str> , ] callback = odl . solvers . CallbackShowConvergence ( f , logx = True , logy = True , color = <str> ) x = space . zero ( ) odl . solvers . conjugate_gradient_nonlinear ( f , x , line_search = line_search , callback = callback ) legend_artists . append ( callback . ax . collections [ - 1 ] ) legend_labels . append ( <str> ) callback = odl . solvers . CallbackShowConvergence ( f , logx = True , logy = True , color = <str> ) x = space . zero ( ) odl . solvers . bfgs_method ( f , x , line_search = line_search , callback = callback ) legend_artists . append ( callback . ax . collections [ - 1 ] ) legend_labels . append ( <str> ) callback = odl . solvers . CallbackShowConvergence ( f , logx = True , logy = True , color = <str> ) x = space . zero ( ) odl . solvers . newtons_method ( f , x , line_search = line_search , callback = callback ) legend_artists . append ( callback . ax . collections [ - 1 ] ) legend_labels . append ( <str> ) plt . legend ( legend_artists , legend_labels ) plt . show ( )  