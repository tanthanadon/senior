import odl import scipy . signal class Convolution ( odl . Operator ) :      def __init__ ( self , kernel ) :          self . kernel = kernel super ( Convolution , self ) . __init__ ( domain = kernel . space , range = kernel . space , linear = True )  def _call ( self , x ) :          return scipy . signal . fftconvolve ( self . kernel , x , mode = <str> )  @ property def adjoint ( self ) :          return Convolution ( self . kernel [ : : - 1 , : : - 1 ] )   space = odl . uniform_discr ( [ - 1 , - 1 ] , [ 1 , 1 ] , [ 100 , 100 ] ) kernel = odl . phantom . cuboid ( space , [ - 0.05 , - 0.05 ] , [ 0.05 , 0.05 ] ) A = Convolution ( kernel ) phantom = odl . phantom . shepp_logan ( space , modified = True ) g = A ( phantom ) kernel . show ( <str> ) phantom . show ( <str> ) g . show ( <str> )  