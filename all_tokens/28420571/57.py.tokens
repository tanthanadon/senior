from __future__ import division import numpy as np import odl from odl import vector from odl . space . npy_tensors import NumpyTensor from odl . util . testutils import all_equal def test_vector_numpy ( ) :      inp = [ [ 1.0 , 2.0 , 3.0 ] , [ 4.0 , 5.0 , 6.0 ] ] x = vector ( inp ) assert isinstance ( x , NumpyTensor ) assert x . dtype == np . dtype ( <str> ) assert all_equal ( x , inp ) x = vector ( [ 1.0 , 2.0 , float ( <str> ) ] ) assert x . dtype == np . dtype ( <str> ) assert isinstance ( x , NumpyTensor ) x = vector ( [ 1.0 , 2.0 , float ( <str> ) ] ) assert x . dtype == np . dtype ( <str> ) assert isinstance ( x , NumpyTensor ) x = vector ( [ 1 , 2 , 3 ] , dtype = <str> ) assert x . dtype == np . dtype ( <str> ) assert isinstance ( x , NumpyTensor ) inp = [ [ 1 + 1j , 2 , 3 - 2j ] , [ 4 + 1j , 5 , 6 - 1j ] ] x = vector ( inp ) assert isinstance ( x , NumpyTensor ) assert x . dtype == np . dtype ( <str> ) assert all_equal ( x , inp ) x = vector ( [ 1 , 2 , 3 ] , dtype = <str> ) assert isinstance ( x , NumpyTensor ) inp = [ 1 , 2 , 3 ] x = vector ( inp ) assert isinstance ( x , NumpyTensor ) assert x . dtype == np . dtype ( <str> ) assert all_equal ( x , inp ) inp = [ <str> , <str> , <str> ] x = vector ( inp ) assert isinstance ( x , NumpyTensor ) assert np . issubdtype ( x . dtype , np . str_ ) assert all_equal ( x , inp ) x = vector ( [ 1 , 2 , <str> ] ) assert isinstance ( x , NumpyTensor ) assert np . issubdtype ( x . dtype , np . str_ ) assert all_equal ( x , [ <str> , <str> , <str> ] ) x = vector ( 5.0 ) assert x . shape == ( 1 , ) x = vector ( [ ] ) assert x . shape == ( 0 , )  if __name__ == <str> :      odl . util . test_file ( __file__ )   