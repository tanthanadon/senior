from __future__ import print_function import theano import theano . tensor as T import numpy as np import odl import odl . contrib . theano matrix = np . array ( [ [ 1. , 2. ] , [ 0. , 0. ] , [ 0. , 1. ] ] ) odl_op = odl . MatrixOperator ( matrix ) x = [ 1. , 2. ] x_theano = T . fvector ( <str> ) odl_op_layer = odl . contrib . theano . TheanoOperator ( odl_op ) y_theano = odl_op_layer ( x_theano ) y_theano_func = theano . function ( [ x_theano ] , y_theano ) print ( <str> , y_theano_func ( x ) ) print ( <str> , odl_op ( x ) ) odl_cost = odl . solvers . L2NormSquared ( odl_op . range ) odl_functional = odl_cost * odl_op cost_theano_layer = odl . contrib . theano . TheanoOperator ( odl_cost ) y_theano = odl_op_layer ( x_theano ) cost_theano = cost_theano_layer ( y_theano ) cost_grad_theano = theano . grad ( cost_theano , x_theano ) cost_theano_grad_func = theano . function ( [ x_theano ] , cost_grad_theano ) print ( <str> , cost_theano_grad_func ( x ) ) print ( <str> , odl_functional . gradient ( x ) )  