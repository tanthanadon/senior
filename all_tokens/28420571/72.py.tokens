from __future__ import division import pytest import numpy as np import odl import odl . tomo as tomo from odl . util . testutils import skip_if_no_largescale , simple_fixture from odl . tomo . util . testutils import ( skip_if_no_astra , skip_if_no_astra_cuda , skip_if_no_skimage ) filter_type = simple_fixture ( <str> , [ <str> , <str> , <str> , <str> , <str> ] ) frequency_scaling = simple_fixture ( <str> , [ 0.5 , 0.9 , 1.0 ] ) weighting = simple_fixture ( <str> , [ None , 1.0 ] ) projectors = [ skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_skimage ( <str> ) ] projector_ids = [ <str> <str> . format ( * p . args [ 1 ] . split ( ) ) for p in projectors ] largescale = <str> projectors = [ pytest . mark . skipif ( p . args [ 0 ] + largescale , p . args [ 1 ] ) for p in projectors ] @ pytest . fixture ( scope = <str> , params = projectors , ids = projector_ids ) def projector ( request , weighting ) :      n_angles = 500 dtype = <str> geom , impl , angle = request . param . split ( ) if angle == <str> :          apart = odl . uniform_partition ( 0 , 2 * np . pi , n_angles )  elif angle == <str> :          min_pt = 2 * ( 2.0 * np . pi ) / n_angles max_pt = ( 2.0 * np . pi ) - 2 * ( 2.0 * np . pi ) / n_angles points = np . linspace ( min_pt , max_pt , n_angles ) points += np . random . rand ( n_angles ) * ( max_pt - min_pt ) / ( 5 * n_angles ) apart = odl . nonuniform_partition ( points )  elif angle == <str> :          min_pt = 2 * ( 2.0 * np . pi ) / n_angles max_pt = ( 2.0 * np . pi ) - 2 * ( 2.0 * np . pi ) / n_angles points = np . linspace ( min_pt ** 0.5 , max_pt ** 0.5 , n_angles ) ** 2 apart = odl . nonuniform_partition ( points )  else :          raise ValueError ( <str> )  if geom == <str> :          discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 ] , [ 20 , 20 ] , [ 100 , 100 ] , dtype = dtype , weighting = weighting ) dpart = odl . uniform_partition ( - 30 , 30 , 500 ) geom = tomo . Parallel2dGeometry ( apart , dpart ) return tomo . RayTransform ( discr_reco_space , geom , impl = impl )  elif geom == <str> :          discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 , - 20 ] , [ 20 , 20 , 20 ] , [ 100 , 100 , 100 ] , dtype = dtype , weighting = weighting ) dpart = odl . uniform_partition ( [ - 30 , - 30 ] , [ 30 , 30 ] , [ 200 , 200 ] ) geom = tomo . Parallel3dAxisGeometry ( apart , dpart , axis = [ 1 , 1 , 0 ] ) return tomo . RayTransform ( discr_reco_space , geom , impl = impl )  elif geom == <str> :          discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 ] , [ 20 , 20 ] , [ 100 , 100 ] , dtype = dtype , weighting = weighting ) dpart = odl . uniform_partition ( - 40 , 40 , 200 ) geom = tomo . FanFlatGeometry ( apart , dpart , src_radius = 100 , det_radius = 100 ) return tomo . RayTransform ( discr_reco_space , geom , impl = impl )  elif geom == <str> :          discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 , - 20 ] , [ 20 , 20 , 20 ] , [ 100 , 100 , 100 ] , dtype = dtype , weighting = weighting ) dpart = odl . uniform_partition ( [ - 50 , - 50 ] , [ 50 , 50 ] , [ 200 , 200 ] ) geom = tomo . ConeFlatGeometry ( apart , dpart , src_radius = 100 , det_radius = 100 , axis = [ 1 , 0 , 0 ] ) return tomo . RayTransform ( discr_reco_space , geom , impl = impl )  elif geom == <str> :          discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 , 0 ] , [ 20 , 20 , 40 ] , [ 100 , 100 , 100 ] , dtype = dtype , weighting = weighting ) n_angle = 2000 apart = odl . uniform_partition ( 0 , 8 * 2 * np . pi , n_angle ) dpart = odl . uniform_partition ( [ - 50 , - 4 ] , [ 50 , 4 ] , [ 200 , 20 ] ) geom = tomo . ConeFlatGeometry ( apart , dpart , src_radius = 100 , det_radius = 100 , pitch = 5.0 ) return tomo . RayTransform ( discr_reco_space , geom , impl = impl )  else :          raise ValueError ( <str> )   @ skip_if_no_largescale def test_fbp_reconstruction ( projector ) :      vol = odl . phantom . shepp_logan ( projector . domain , modified = False ) projections = projector ( vol ) fbp_operator = odl . tomo . fbp_op ( projector ) if ( isinstance ( projector . geometry , odl . tomo . ConeFlatGeometry ) and projector . geometry . pitch != 0 ) :          fbp_operator = fbp_operator * odl . tomo . tam_danielson_window ( projector )  fbp_result = fbp_operator ( projections ) maxerr = vol . norm ( ) * 0.3 error = vol . dist ( fbp_result ) assert error < maxerr  @ skip_if_no_astra_cuda @ skip_if_no_largescale def test_fbp_reconstruction_filters ( filter_type , frequency_scaling , weighting ) :      apart = odl . uniform_partition ( 0 , np . pi , 500 ) discr_reco_space = odl . uniform_discr ( [ - 20 , - 20 ] , [ 20 , 20 ] , [ 100 , 100 ] , dtype = <str> , weighting = weighting ) dpart = odl . uniform_partition ( - 30 , 30 , 500 ) geom = tomo . Parallel2dGeometry ( apart , dpart ) projector = tomo . RayTransform ( discr_reco_space , geom , impl = <str> ) vol = odl . phantom . shepp_logan ( projector . domain , modified = False ) projections = projector ( vol ) fbp_operator = odl . tomo . fbp_op ( projector , filter_type = filter_type , frequency_scaling = frequency_scaling ) fbp_result = fbp_operator ( projections ) maxerr = vol . norm ( ) / 5.0 error = vol . dist ( fbp_result ) assert error < maxerr  if __name__ == <str> :      odl . util . test_file ( __file__ , [ <str> ] )   