import odl space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 300 , 300 ] ) data = odl . phantom . shepp_logan ( space , modified = True ) data = odl . phantom . salt_pepper_noise ( data ) grad = odl . Gradient ( space ) l1_norm = odl . solvers . L1Norm ( space ) data_discrepancy = l1_norm . translated ( data ) regularizer = 0.05 * odl . solvers . L2NormSquared ( grad . range ) * grad gamma = 0.01 callback = ( odl . solvers . CallbackPrintIteration ( ) & odl . solvers . CallbackShow ( ) ) x = space . zero ( ) odl . solvers . proximal_gradient ( x , f = data_discrepancy , g = regularizer , niter = 200 , gamma = gamma , callback = callback ) callback . reset ( ) x_acc = space . zero ( ) odl . solvers . accelerated_proximal_gradient ( x_acc , f = data_discrepancy , g = regularizer , niter = 50 , gamma = gamma , callback = callback ) data . show ( title = <str> ) x . show ( title = <str> ) x_acc . show ( title = <str> , force_show = True )  