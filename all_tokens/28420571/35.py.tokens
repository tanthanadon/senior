from __future__ import division import numpy as np import pytest import sys import odl from odl . tomo . backends . astra_cpu import ( astra_cpu_forward_projector , astra_cpu_back_projector ) from odl . tomo . util . testutils import skip_if_no_astra @ pytest . mark . xfail ( sys . platform == <str> , run = False , reason = <str> ) @ skip_if_no_astra def test_astra_cpu_projector_parallel2d ( ) :      reco_space = odl . uniform_discr ( [ - 4 , - 5 ] , [ 4 , 5 ] , ( 4 , 5 ) , dtype = <str> ) phantom = odl . phantom . cuboid ( reco_space , min_pt = [ 0 , 0 ] , max_pt = [ 4 , 5 ] ) angle_part = odl . uniform_partition ( 0 , 2 * np . pi , 8 ) det_part = odl . uniform_partition ( - 6 , 6 , 6 ) geom = odl . tomo . Parallel2dGeometry ( angle_part , det_part ) proj_space = odl . uniform_discr_frompartition ( geom . partition , dtype = <str> ) proj_data = astra_cpu_forward_projector ( phantom , geom , proj_space ) assert proj_data . shape == proj_space . shape assert proj_data . norm ( ) > 0 backproj = astra_cpu_back_projector ( proj_data , geom , reco_space ) assert backproj . shape == reco_space . shape assert backproj . norm ( ) > 0  @ skip_if_no_astra def test_astra_cpu_projector_fanflat ( ) :      reco_space = odl . uniform_discr ( [ - 4 , - 5 ] , [ 4 , 5 ] , ( 4 , 5 ) , dtype = <str> ) phantom = odl . phantom . cuboid ( reco_space , min_pt = [ 0 , 0 ] , max_pt = [ 4 , 5 ] ) angle_part = odl . uniform_partition ( 0 , 2 * np . pi , 8 ) det_part = odl . uniform_partition ( - 6 , 6 , 6 ) src_rad = 100 det_rad = 10 geom = odl . tomo . FanFlatGeometry ( angle_part , det_part , src_rad , det_rad ) proj_space = odl . uniform_discr_frompartition ( geom . partition , dtype = <str> ) proj_data = astra_cpu_forward_projector ( phantom , geom , proj_space ) assert proj_data . shape == proj_space . shape assert proj_data . norm ( ) > 0 backproj = astra_cpu_back_projector ( proj_data , geom , reco_space ) assert backproj . shape == reco_space . shape assert backproj . norm ( ) > 0  if __name__ == <str> :      odl . util . test_file ( __file__ )   