import numpy as np import odl class MyFunctional ( odl . solvers . Functional ) :      def __init__ ( self , space ) :          super ( MyFunctional , self ) . __init__ ( space = space , linear = False , grad_lipschitz = 2 )  def _call ( self , x ) :          return x . norm ( ) ** 2  @ property def gradient ( self ) :          return 2.0 * odl . IdentityOperator ( self . domain )  @ property def convex_conj ( self ) :          return 1.0 / 4.0 * MyFunctional ( self . domain )   n = 10 space = odl . rn ( n ) my_func = MyFunctional ( space = space ) x = space . element ( np . random . randn ( n ) ) print ( my_func ( x ) == x . norm ( ) ** 2 ) my_gradient = my_func . gradient print ( my_gradient ( x ) == 2.0 * x ) p = space . element ( np . random . randn ( n ) ) my_deriv = my_func . derivative ( x ) print ( my_deriv ( p ) == my_gradient ( x ) . inner ( p ) ) my_func_conj = my_func . convex_conj print ( my_func_conj ( x ) == 1.0 / 4.0 * x . norm ( ) ** 2 ) scal = np . random . rand ( ) transl = space . element ( np . random . randn ( n ) ) scal_and_transl_func_gradient = ( scal * my_func . translated ( transl ) ) . gradient print ( scal_and_transl_func_gradient ( x ) == scal * my_func . gradient ( x - transl ) )  