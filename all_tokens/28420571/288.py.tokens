import numpy as np import scipy . misc import odl image = np . rot90 ( scipy . misc . ascent ( ) [ : : 2 , : : 2 ] , 3 ) . astype ( <str> ) shape = image . shape image /= image . max ( ) space = odl . uniform_discr ( [ 0 , 0 ] , shape , shape ) orig = space . element ( image ) image += 0.1 * odl . phantom . white_noise ( orig . space ) noisy = space . element ( image ) gradient = odl . Gradient ( space ) op = odl . BroadcastOperator ( odl . IdentityOperator ( space ) , gradient ) l2_norm = odl . solvers . L2NormSquared ( space ) . translated ( noisy ) l1_norm = 0.15 * odl . solvers . L1Norm ( gradient . range ) g = odl . solvers . SeparableSum ( l2_norm , l1_norm ) f = odl . solvers . IndicatorNonnegativity ( op . domain ) op_norm = 1.1 * odl . power_method_opnorm ( op , xstart = noisy ) niter = 200 tau = 1.0 / op_norm sigma = 1.0 / op_norm callback = ( odl . solvers . CallbackPrintIteration ( ) & odl . solvers . CallbackShow ( step = 5 ) ) x = op . domain . zero ( ) odl . solvers . pdhg ( x , f , g , op , niter = niter , tau = tau , sigma = sigma , callback = callback ) orig . show ( title = <str> ) noisy . show ( title = <str> ) x . show ( title = <str> , force_show = True )  