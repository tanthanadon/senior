 from __future__ import print_function , division , absolute_import from builtins import object from functools import wraps import numpy as np __all__ = ( <str> , <str> , <str> , <str> , <str> , <str> ) def is_valid_input_array ( x , ndim = None ) :      x = np . asarray ( x ) if ndim is None or ndim == 1 :          return x . ndim == 1 and x . size > 1 or x . ndim == 2 and x . shape [ 0 ] == 1  else :          return x . ndim == 2 and x . shape [ 0 ] == ndim   def is_valid_input_meshgrid ( x , ndim ) :      if ndim is None :          return False  if not isinstance ( x , tuple ) :          return False  if ndim > 1 :          try :              np . broadcast ( * x )  except ( ValueError , TypeError ) :              return False   return ( len ( x ) == ndim and all ( isinstance ( xi , np . ndarray ) for xi in x ) and all ( xi . ndim == ndim for xi in x ) )  def out_shape_from_meshgrid ( mesh ) :      if len ( mesh ) == 1 :          return ( len ( mesh [ 0 ] ) , )  else :          return np . broadcast ( * mesh ) . shape   def out_shape_from_array ( arr ) :      arr = np . asarray ( arr ) if arr . ndim == 1 :          return arr . shape  else :          return ( arr . shape [ 1 ] , )   class OptionalArgDecorator ( object ) :      def __new__ ( cls , * args , ** kwargs ) :          instance = super ( OptionalArgDecorator , cls ) . __new__ ( cls ) if ( not kwargs and len ( args ) == 1 and callable ( args [ 0 ] ) ) :              func = args [ 0 ] return instance . _wrapper ( func )  else :              instance . wrapper_args = args instance . wrapper_kwargs = kwargs return instance   def __call__ ( self , func ) :          return self . _wrapper ( func , * self . wrapper_args , ** self . wrapper_kwargs )  @ staticmethod def _wrapper ( func , * wrapper_args , ** wrapper_kwargs ) :          return func   class vectorize ( OptionalArgDecorator ) :      @ staticmethod def _wrapper ( func , * vect_args , ** vect_kwargs ) :          if not hasattr ( func , <str> ) :              func . __name__ = <str> . format ( func . __class__ . __name__ )  return wraps ( func ) ( _NumpyVectorizeWrapper ( func , * vect_args , ** vect_kwargs ) )   class _NumpyVectorizeWrapper ( object ) :      def __init__ ( self , func , * vect_args , ** vect_kwargs ) :          super ( _NumpyVectorizeWrapper , self ) . __init__ ( ) self . func = func self . vfunc = None self . vect_args = vect_args self . vect_kwargs = vect_kwargs  def __call__ ( self , x , out = None , ** kwargs ) :          if np . isscalar ( x ) :              x = np . array ( [ x ] )  elif isinstance ( x , np . ndarray ) and x . ndim == 1 :              x = x [ None , : ]  if self . vfunc is None :              def _func ( * x , ** kw ) :                  return self . func ( np . array ( x ) , ** kw )  self . vfunc = np . vectorize ( _func , * self . vect_args , ** self . vect_kwargs )  if out is None :              return self . vfunc ( * x , ** kwargs )  else :              out [ : ] = self . vfunc ( * x , ** kwargs )    if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   