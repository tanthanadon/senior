from __future__ import division import numpy as np import pytest import odl from odl . deform import LinDeformFixedTempl , LinDeformFixedDisp from odl . space . entry_points import tensor_space_impl from odl . util . testutils import simple_fixture dtype = simple_fixture ( <str> , [ <str> , <str> ] ) interp = simple_fixture ( <str> , [ <str> , <str> ] ) ndim = simple_fixture ( <str> , [ 1 , 2 , 3 ] ) @ pytest . fixture def space ( request , ndim , interp , dtype , odl_tspace_impl ) :      impl = odl_tspace_impl supported_dtypes = tensor_space_impl ( impl ) . available_dtypes ( ) if np . dtype ( dtype ) not in supported_dtypes :          pytest . skip ( <str> )  return odl . uniform_discr ( [ - 1 ] * ndim , [ 1 ] * ndim , [ 20 ] * ndim , interp = interp , impl = impl , dtype = dtype )  SIGMA = 0.3 EPS = 0.25 def error_bound ( interp ) :      if interp == <str> :          return 0.1  elif interp == <str> :          return 0.2   def prod ( x ) :      prod = 1 for xi in x :          prod = prod * xi  return prod  def template_function ( x ) :      return np . exp ( - sum ( xi ** 2 for xi in x ) / SIGMA ** 2 )  def template_grad_factory ( n ) :      def template_grad_i ( i ) :          return lambda x : - 2 * x [ i ] / SIGMA ** 2 * template_function ( x )  return [ template_grad_i ( i ) for i in range ( n ) ]  def disp_field_factory ( n ) :      def coordinate_projection_i ( i ) :          return lambda x : EPS * x [ i ]  lst = [ lambda x : EPS * prod ( x ) ] lst . extend ( coordinate_projection_i ( i ) for i in range ( 1 , n ) ) return lst  def exp_div_inv_disp ( x ) :      return np . exp ( - EPS * ( prod ( x [ 1 : ] ) + ( len ( x ) - 1 ) ) )  def displaced_points ( x ) :      disp = [ dsp ( x ) for dsp in disp_field_factory ( len ( x ) ) ] return [ xi + di for xi , di in zip ( x , disp ) ]  def deformed_template ( x ) :      return template_function ( displaced_points ( x ) )  def vector_field_factory ( n ) :      def vector_field_i ( i ) :          return lambda x : x [ i ]  return [ vector_field_i ( i ) for i in range ( n ) ]  def template_deformed_grad_factory ( n ) :      templ_grad = template_grad_factory ( n ) def template_deformed_gradi ( i ) :          return lambda x : templ_grad [ i ] ( displaced_points ( x ) )  return [ template_deformed_gradi ( i ) for i in range ( n ) ]  def fixed_templ_deriv ( x ) :      dg = [ tdgf ( x ) for tdgf in template_deformed_grad_factory ( len ( x ) ) ] v = [ vff ( x ) for vff in vector_field_factory ( len ( x ) ) ] return sum ( dgi * vi for dgi , vi in zip ( dg , v ) )  def inv_deformed_template ( x ) :      disp = [ dsp ( x ) for dsp in disp_field_factory ( len ( x ) ) ] disp_x = [ xi - di for xi , di in zip ( x , disp ) ] return template_function ( disp_x )  def test_fixed_templ_init ( ) :      space = odl . uniform_discr ( 0 , 1 , 5 ) template = space . element ( template_function ) op = LinDeformFixedTempl ( template ) assert repr ( op ) != <str> op = LinDeformFixedTempl ( template , domain = space . astype ( <str> ) ** 1 ) assert repr ( op ) != <str> with pytest . raises ( TypeError ) :          LinDeformFixedTempl ( template_function )   def test_fixed_templ_call ( space ) :      template = space . element ( template_function ) deform_op = LinDeformFixedTempl ( template ) true_deformed_templ = space . element ( deformed_template ) deformed_templ = deform_op ( disp_field_factory ( space . ndim ) ) error = ( true_deformed_templ - deformed_templ ) . norm ( ) rlt_err = error / deformed_templ . norm ( ) assert rlt_err < error_bound ( space . interp )  def test_fixed_templ_deriv ( space ) :      if not space . is_real :          pytest . skip ( <str> )  template = space . element ( template_function ) disp_field = disp_field_factory ( space . ndim ) vector_field = vector_field_factory ( space . ndim ) fixed_templ_op = LinDeformFixedTempl ( template ) fixed_templ_op_deriv = fixed_templ_op . derivative ( disp_field ) fixed_templ_deriv_comp = fixed_templ_op_deriv ( vector_field ) fixed_templ_deriv_exact = space . element ( fixed_templ_deriv ) error = ( fixed_templ_deriv_exact - fixed_templ_deriv_comp ) . norm ( ) rlt_err = error / fixed_templ_deriv_comp . norm ( ) assert rlt_err < error_bound ( space . interp )  def test_fixed_disp_init ( ) :      space = odl . uniform_discr ( 0 , 1 , 5 ) disp_field = space . tangent_bundle . element ( disp_field_factory ( space . ndim ) ) op = LinDeformFixedDisp ( disp_field ) assert repr ( op ) != <str> op = LinDeformFixedDisp ( disp_field , templ_space = space ) assert repr ( op ) != <str> with pytest . raises ( TypeError ) :          LinDeformFixedDisp ( space . one ( ) )  with pytest . raises ( TypeError ) :          LinDeformFixedDisp ( disp_field , space . tangent_bundle )  with pytest . raises ( TypeError ) :          bad_pspace = odl . ProductSpace ( space , odl . rn ( 3 ) ) LinDeformFixedDisp ( disp_field , bad_pspace )  with pytest . raises ( TypeError ) :          bad_pspace = odl . ProductSpace ( odl . rn ( 2 ) , 1 ) LinDeformFixedDisp ( disp_field , bad_pspace )  with pytest . raises ( TypeError ) :          wrong_dtype = odl . ProductSpace ( space . astype ( complex ) , 1 ) LinDeformFixedDisp ( disp_field , wrong_dtype )  with pytest . raises ( ValueError ) :          bad_space = odl . uniform_discr ( 0 , 1 , 10 ) LinDeformFixedDisp ( disp_field , bad_space )   def test_fixed_disp_call ( space ) :      template = space . element ( template_function ) disp_field = space . real_space . tangent_bundle . element ( disp_field_factory ( space . ndim ) ) deform_op = LinDeformFixedDisp ( disp_field , templ_space = space ) deformed_templ = deform_op ( template ) true_deformed_templ = space . element ( deformed_template ) error = ( true_deformed_templ - deformed_templ ) . norm ( ) rlt_err = error / deformed_templ . norm ( ) assert rlt_err < error_bound ( space . interp )  def test_fixed_disp_inv ( space ) :      template = space . element ( template_function ) disp_field = space . real_space . tangent_bundle . element ( disp_field_factory ( space . ndim ) ) deform_op = LinDeformFixedDisp ( disp_field , templ_space = space ) result_op_inv = deform_op ( deform_op . inverse ( template ) ) error = ( result_op_inv - template ) . norm ( ) rel_err = error / template . norm ( ) assert rel_err < 2 * error_bound ( space . interp ) result_inv_op = deform_op . inverse ( deform_op ( template ) ) error = ( result_inv_op - template ) . norm ( ) rel_err = error / template . norm ( ) assert rel_err < 2 * error_bound ( space . interp )  def test_fixed_disp_adj ( space ) :      template = space . element ( template_function ) disp_field = space . real_space . tangent_bundle . element ( disp_field_factory ( space . ndim ) ) deform_op = LinDeformFixedDisp ( disp_field , templ_space = space ) deformed_templ_adj = deform_op . adjoint ( template ) true_deformed_templ_adj = space . element ( inv_deformed_template ) exp_div = space . element ( exp_div_inv_disp ) true_deformed_templ_adj *= exp_div error = ( deformed_templ_adj - true_deformed_templ_adj ) . norm ( ) rel_err = error / true_deformed_templ_adj . norm ( ) assert rel_err < error_bound ( space . interp ) deformed_templ = deform_op ( template ) inner1 = deformed_templ . inner ( template ) inner2 = template . inner ( deformed_templ_adj ) assert inner1 == pytest . approx ( inner2 , abs = .1 )  if __name__ == <str> :      odl . util . test_file ( __file__ )   