import numpy as np import odl __all__ = ( <str> , <str> , <str> , <str> , <str> , <str> ) def elekta_icon_geometry ( sad = 780.0 , sdd = 1000.0 , piercing_point = ( 390.0 , 0.0 ) , angles = None , num_angles = None , detector_shape = ( 780 , 720 ) ) :      sad = float ( sad ) assert sad > 0 sdd = float ( sdd ) assert sdd > sad piercing_point = np . array ( piercing_point , dtype = float ) assert piercing_point . shape == ( 2 , ) if angles is not None and num_angles is not None :          raise ValueError ( <str> )  elif angles is not None :          angles = odl . nonuniform_partition ( angles ) assert angles . ndim == 1  elif num_angles is not None :          angles = odl . uniform_partition ( 1.2 , 5.0 , num_angles )  else :          angles = odl . uniform_partition ( 1.2 , 5.0 , 332 )  detector_shape = np . array ( detector_shape , dtype = int ) pixel_size = 0.368 det_extent_mm = np . array ( [ 287.04 , 264.96 ] ) piercing_point_mm = pixel_size * piercing_point det_min_pt = - piercing_point_mm det_max_pt = det_min_pt + det_extent_mm detector_partition = odl . uniform_partition ( min_pt = det_min_pt , max_pt = det_max_pt , shape = detector_shape ) geometry = odl . tomo . ConeBeamGeometry ( angles , detector_partition , src_radius = sad , det_radius = sdd - sad ) return geometry  def elekta_icon_space ( shape = ( 448 , 448 , 448 ) , ** kwargs ) :      if <str> not in kwargs :          kwargs [ <str> ] = <str>  return odl . uniform_discr ( min_pt = [ - 112.0 , - 112.0 , 0.0 ] , max_pt = [ 112.0 , 112.0 , 224.0 ] , shape = shape , ** kwargs )  def elekta_icon_fbp ( ray_transform , padding = False , filter_type = <str> , frequency_scaling = 0.6 , parker_weighting = True ) :      fbp_op = odl . tomo . fbp_op ( ray_transform , padding = padding , filter_type = filter_type , frequency_scaling = frequency_scaling ) if parker_weighting :          parker_weighting = odl . tomo . parker_weighting ( ray_transform ) fbp_op = fbp_op * parker_weighting  return fbp_op  def elekta_xvi_geometry ( sad = 1000.0 , sdd = 1500.0 , piercing_point = ( 512.0 , 512.0 ) , angles = None , num_angles = None , detector_shape = ( 1024 , 1024 ) ) :      sad = float ( sad ) assert sad > 0 sdd = float ( sdd ) assert sdd > sad piercing_point = np . array ( piercing_point , dtype = float ) assert piercing_point . shape == ( 2 , ) if angles is not None and num_angles is not None :          raise ValueError ( <str> )  elif angles is not None :          angles = odl . nonuniform_partition ( angles ) assert angles . ndim == 1  elif num_angles is not None :          angles = odl . uniform_partition ( 0 , 2 * np . pi , num_angles )  else :          angles = odl . uniform_partition ( 0 , 2 * np . pi , 650 )  detector_shape = np . array ( detector_shape , dtype = int ) pixel_size = 0.4 det_extent_mm = np . array ( [ 409.6 , 409.6 ] ) piercing_point_mm = pixel_size * piercing_point det_min_pt = - piercing_point_mm det_max_pt = det_min_pt + det_extent_mm detector_partition = odl . uniform_partition ( min_pt = det_min_pt , max_pt = det_max_pt , shape = detector_shape ) geometry = odl . tomo . ConeBeamGeometry ( angles , detector_partition , src_radius = sad , det_radius = sdd - sad ) return geometry  def elekta_xvi_space ( shape = ( 512 , 512 , 512 ) , ** kwargs ) :      if <str> not in kwargs :          kwargs [ <str> ] = <str>  return odl . uniform_discr ( min_pt = [ - 128.0 , - 128 , - 128.0 ] , max_pt = [ 128.0 , 128.0 , 128.0 ] , shape = shape , ** kwargs )  def elekta_xvi_fbp ( ray_transform , padding = False , filter_type = <str> , frequency_scaling = 0.6 ) :      fbp_op = odl . tomo . fbp_op ( ray_transform , padding = padding , filter_type = filter_type , frequency_scaling = frequency_scaling ) return fbp_op  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   