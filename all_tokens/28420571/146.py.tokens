from __future__ import print_function , division , absolute_import from odl . space . npy_tensors import NumpyTensorSpace __all__ = ( ) IS_INITIALIZED = False TENSOR_SPACE_IMPLS = { <str> : NumpyTensorSpace } def _initialize_if_needed ( ) :      global IS_INITIALIZED , TENSOR_SPACE_IMPLS if not IS_INITIALIZED :          from pkg_resources import iter_entry_points for entry_point in iter_entry_points ( group = <str> , name = None ) :              try :                  module = entry_point . load ( )  except ImportError :                  pass  else :                  TENSOR_SPACE_IMPLS . update ( module . tensor_space_impls ( ) )   IS_INITIALIZED = True   def tensor_space_impl_names ( ) :      _initialize_if_needed ( ) return tuple ( TENSOR_SPACE_IMPLS . keys ( ) )  def tensor_space_impl ( impl ) :      if impl != <str> :          _initialize_if_needed ( )  try :          return TENSOR_SPACE_IMPLS [ impl ]  except KeyError :          raise ValueError ( <str> <str> . format ( impl ) )    