from __future__ import division from itertools import permutations import pytest import numpy as np import tempfile import odl from odl . contrib . mrc import ( mrc_header_from_params , FileWriterMRC , FileReaderMRC ) from odl . util . testutils import all_equal , simple_fixture mode_dtype_params = [ ( 0 , <str> ) , ( 1 , <str> ) , ( 2 , <str> ) , ( 6 , <str> ) ] mode_dtype_ids = [ <str> . format ( p = p ) for p in mode_dtype_params ] @ pytest . fixture ( scope = <str> , ids = mode_dtype_ids , params = mode_dtype_params ) def mrc_mode_dtype ( request ) :      mode , dtype = request . param return mode , np . dtype ( dtype )  axis_order = simple_fixture ( name = <str> , params = list ( permutations ( ( 0 , 1 , 2 ) ) ) ) shape = simple_fixture ( name = <str> , params = [ ( 5 , 10 , 20 ) , ( 1 , 5 , 6 ) , ( 10 , 1 , 1 ) , ( 1 , 1 , 1 ) ] ) ispg_kind_params = [ ( 0 , <str> ) , ( 1 , <str> ) ] ispg_kind_ids = [ <str> . format ( p = p ) for p in ispg_kind_params ] @ pytest . fixture ( scope = <str> , ids = ispg_kind_ids , params = ispg_kind_params ) def ispg_kind ( request ) :      return request . param  def test_mrc_header_from_params_defaults ( shape , mrc_mode_dtype , ispg_kind ) :      mode , dtype = mrc_mode_dtype true_ispg , kind = ispg_kind header = mrc_header_from_params ( shape , dtype , kind ) nx = header [ <str> ] [ <str> ] ny = header [ <str> ] [ <str> ] nz = header [ <str> ] [ <str> ] assert all_equal ( [ nx , ny , nz ] , shape ) assert header [ <str> ] [ <str> ] == mode mx = header [ <str> ] [ <str> ] my = header [ <str> ] [ <str> ] mz = header [ <str> ] [ <str> ] assert all_equal ( [ mx , my , mz ] , shape ) cella = header [ <str> ] [ <str> ] assert all_equal ( cella , np . ones ( 3 ) * shape ) mapc = header [ <str> ] [ <str> ] mapr = header [ <str> ] [ <str> ] maps = header [ <str> ] [ <str> ] assert all_equal ( [ mapc , mapr , maps ] , [ 1 , 2 , 3 ] ) dmin = header [ <str> ] [ <str> ] dmax = header [ <str> ] [ <str> ] dmean = header [ <str> ] [ <str> ] rms = header [ <str> ] [ <str> ] assert all_equal ( [ dmin , dmax , dmean , rms ] , [ 1.0 , 0.0 , - 1.0 , - 1.0 ] ) ispg = header [ <str> ] [ <str> ] assert ispg == true_ispg nsymbt = header [ <str> ] [ <str> ] assert nsymbt == 0 exttype = header [ <str> ] [ <str> ] assert np . array_equal ( exttype , np . fromstring ( <str> , dtype = <str> ) ) nversion = header [ <str> ] [ <str> ] assert nversion == 20140 origin = header [ <str> ] [ <str> ] assert all_equal ( origin , [ 0 , 0 , 0 ] ) map = header [ <str> ] [ <str> ] assert np . array_equal ( map , np . fromstring ( <str> , dtype = <str> ) ) machst = header [ <str> ] [ <str> ] assert np . array_equal ( machst , np . fromiter ( <str> , dtype = <str> ) ) nlabl = header [ <str> ] [ <str> ] assert nlabl == 0 label = header [ <str> ] [ <str> ] assert np . array_equal ( label , np . zeros ( [ 10 , 80 ] , dtype = <str> ) ) int32_vars = [ nx , ny , nz , mx , my , mz , mapc , mapr , maps , ispg , nsymbt , nversion , origin , nlabl ] for v in int32_vars :          assert v . dtype == np . dtype ( <str> )  float32_vars = [ cella , dmin , dmax , dmean , rms ] for v in float32_vars :          assert v . dtype == np . dtype ( <str> )  string_vars = [ exttype , map , machst , label ] for v in string_vars :          assert v . dtype == np . dtype ( <str> )   def test_mrc_header_from_params_kwargs ( ) :      shape = ( 10 , 20 , 30 ) dtype = np . dtype ( <str> ) kind = <str> kwargs = { <str> : [ 10.0 , 1.5 , 0.1 ] , <str> : ( 2 , 0 , 1 ) , <str> : 1.0 , <str> : 5.0 , <str> : 2.0 , <str> : 0.5 , <str> : ( 2014 , 1 ) , <str> : [ <str> , <str> ] } header = mrc_header_from_params ( shape , dtype , kind , ** kwargs ) cella = header [ <str> ] [ <str> ] assert np . allclose ( cella , [ 10.0 , 1.5 , 0.1 ] ) mapc = header [ <str> ] [ <str> ] mapr = header [ <str> ] [ <str> ] maps = header [ <str> ] [ <str> ] assert all_equal ( [ mapc , mapr , maps ] , ( 3 , 1 , 2 ) ) dmin = header [ <str> ] [ <str> ] dmax = header [ <str> ] [ <str> ] dmean = header [ <str> ] [ <str> ] rms = header [ <str> ] [ <str> ] assert all_equal ( [ dmin , dmax , dmean , rms ] , [ 1.0 , 5.0 , 2.0 , 0.5 ] ) nversion = header [ <str> ] [ <str> ] assert nversion == 20141 nlabl = header [ <str> ] [ <str> ] assert nlabl == 2 label = header [ <str> ] [ <str> ] true_label = np . zeros ( [ 10 , 80 ] , dtype = <str> ) true_label [ 0 ] = np . fromstring ( <str> . ljust ( 80 ) , dtype = <str> ) true_label [ 1 ] = np . fromstring ( <str> . ljust ( 80 ) , dtype = <str> ) assert np . array_equal ( label , true_label ) for v in [ mapc , mapr , maps , nversion , nlabl ] :          assert v . dtype == np . dtype ( <str> )  for v in [ cella , dmin , dmax , dmean , rms ] :          assert v . dtype == np . dtype ( <str> )  assert label . dtype == np . dtype ( <str> )  def test_mrc_io ( shape , mrc_mode_dtype , ispg_kind , axis_order ) :      _ , dtype = mrc_mode_dtype _ , kind = ispg_kind data_storage_shape = tuple ( shape [ ax ] for ax in np . argsort ( axis_order ) ) header = mrc_header_from_params ( shape , dtype , kind , axis_order = axis_order ) with tempfile . NamedTemporaryFile ( ) as named_file :          file = named_file . file writer = FileWriterMRC ( file , header ) assert writer . header_size == 1024 assert all_equal ( writer . data_shape , shape ) assert all_equal ( writer . data_storage_shape , data_storage_shape ) assert writer . data_dtype == dtype assert all_equal ( writer . data_axis_order , axis_order ) data = np . random . randint ( 0 , 10 , size = shape ) . astype ( dtype ) writer . write_data ( data ) writer . file . seek ( 0 , 2 ) file_size = writer . file . tell ( ) assert file_size == writer . header_size + data . nbytes file . seek ( 1024 ) raw_data = np . fromfile ( file , dtype = dtype ) flat_data = np . transpose ( data , axes = np . argsort ( axis_order ) ) flat_data = flat_data . reshape ( - 1 , order = <str> ) assert np . array_equal ( raw_data , flat_data ) with FileWriterMRC ( file , header ) as writer :              writer . write ( data )  reader = FileReaderMRC ( file ) reader . read_header ( ) assert writer . header_size == 1024 assert all_equal ( reader . data_shape , shape ) assert all_equal ( reader . data_storage_shape , data_storage_shape ) assert reader . data_dtype == dtype assert reader . data_kind == kind assert all_equal ( reader . data_axis_order , axis_order ) assert np . allclose ( reader . cell_sides_angstrom , 1.0 ) assert all_equal ( reader . mrc_version , ( 2014 , 0 ) ) assert reader . extended_header_type == <str> assert reader . labels == ( )   if __name__ == <str> :      odl . util . test_file ( __file__ )   