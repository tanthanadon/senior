from __future__ import print_function , division , absolute_import import numpy as np from odl . solvers . functional . functional import Functional from odl . operator import Operator , MatrixOperator from odl . space . base_tensors import TensorSpace __all__ = ( <str> , ) class RosenbrockFunctional ( Functional ) :      def __init__ ( self , space , scale = 100.0 ) :          self . scale = float ( scale ) if not isinstance ( space , TensorSpace ) :              raise ValueError ( <str> <str> . format ( space ) )  if space . ndim > 1 :              raise ValueError ( <str> )  if space . size < 2 :              raise ValueError ( <str> <str> . format ( space . size ) )  super ( RosenbrockFunctional , self ) . __init__ ( space , linear = False , grad_lipschitz = np . inf )  def _call ( self , x ) :          result = 0 for i in range ( 0 , self . domain . size - 1 ) :              result += ( self . scale * ( x [ i + 1 ] - x [ i ] ** 2 ) ** 2 + ( x [ i ] - 1 ) ** 2 )  return result  @ property def gradient ( self ) :          functional = self c = self . scale class RosenbrockGradient ( Operator ) :              def __init__ ( self ) :                  super ( RosenbrockGradient , self ) . __init__ ( functional . domain , functional . domain , linear = False )  def _call ( self , x , out ) :                  for i in range ( 1 , self . domain . size - 1 ) :                      out [ i ] = ( 2 * c * ( x [ i ] - x [ i - 1 ] ** 2 ) - 4 * c * ( x [ i + 1 ] - x [ i ] ** 2 ) * x [ i ] - 2 * ( 1 - x [ i ] ) )  out [ 0 ] = ( - 4 * c * ( x [ 1 ] - x [ 0 ] ** 2 ) * x [ 0 ] + 2 * ( x [ 0 ] - 1 ) ) out [ - 1 ] = 2 * c * ( x [ - 1 ] - x [ - 2 ] ** 2 )  def derivative ( self , x ) :                  shape = ( functional . domain . size , functional . domain . size ) matrix = np . zeros ( shape ) for i in range ( 0 , self . domain . size - 1 ) :                      matrix [ i , i ] = ( 2 * c + 2 + 12 * c * x [ i ] ** 2 - 4 * c * x [ i + 1 ] ) matrix [ i + 1 , i ] = - 4 * c * x [ i ] matrix [ i , i + 1 ] = - 4 * c * x [ i ]  matrix [ - 1 , - 1 ] = 2 * c matrix [ 0 , 0 ] = 2 + 12 * c * x [ 0 ] ** 2 - 4 * c * x [ 1 ] return MatrixOperator ( matrix , self . domain , self . range )   return RosenbrockGradient ( )   if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   