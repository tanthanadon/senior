from __future__ import division import odl from odl . solvers import admm_linearized , Callback from odl . util . testutils import all_almost_equal , noise_element def test_admm_lin_input_handling ( ) :      space = odl . uniform_discr ( 0 , 1 , 10 ) L = odl . ZeroOperator ( space ) f = g = odl . solvers . ZeroFunctional ( space ) x0 = noise_element ( space ) x = x0 . copy ( ) niter = 3 admm_linearized ( x , f , g , L , tau = 1.0 , sigma = 1.0 , niter = niter ) assert x == x0 class CallbackTest ( Callback ) :          was_called = False def __call__ ( self , * args , ** kwargs ) :              self . was_called = True   callback = CallbackTest ( ) assert not callback . was_called admm_linearized ( x , f , g , L , tau = 1.0 , sigma = 1.0 , niter = niter , callback = callback ) assert callback . was_called  def test_admm_lin_l1 ( ) :      space = odl . rn ( 5 ) L = odl . IdentityOperator ( space ) data_1 = odl . util . testutils . noise_element ( space ) data_2 = odl . util . testutils . noise_element ( space ) f = odl . solvers . L1Norm ( space ) . translated ( data_1 ) g = 0.5 * odl . solvers . L1Norm ( space ) . translated ( data_2 ) x = space . zero ( ) admm_linearized ( x , f , g , L , tau = 1.0 , sigma = 2.0 , niter = 10 ) assert all_almost_equal ( x , data_1 , ndigits = 2 )  if __name__ == <str> :      odl . util . test_file ( __file__ )   