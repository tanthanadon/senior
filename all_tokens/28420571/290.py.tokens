<str> import matplotlib . pyplot as plt import numpy as np import odl space = odl . rn ( 2 ) rectangles = [ [ [ 0 , 0 ] , [ 1 , 1 ] ] , [ [ 0 , 2 ] , [ 1 , 3 ] ] , [ [ 2 , 2 ] , [ 3 , 3 ] ] ] lin_ops = [ odl . IdentityOperator ( space ) ] * len ( rectangles ) f = odl . solvers . ZeroFunctional ( space ) g = [ odl . solvers . L2Norm ( space ) ] * len ( rectangles ) l = [ odl . solvers . IndicatorBox ( space , minp , maxp ) for minp , maxp in rectangles ] tau = 1.0 / len ( rectangles ) sigma = [ 1.0 ] * len ( rectangles ) def lam ( n ) :      return 1.0 + 1.0 / ( n + 1 )  def print_objective ( x ) :      value = 0 for minp , maxp in rectangles :          x_proj = np . minimum ( np . maximum ( x , minp ) , maxp ) value += ( x - x_proj ) . norm ( )  print ( <str> . format ( x [ 0 ] , x [ 1 ] , value ) )  x = space . zero ( ) odl . solvers . douglas_rachford_pd ( x , f , g , lin_ops , tau = tau , sigma = sigma , niter = 20 , lam = lam , callback = print_objective , l = l ) for minp , maxp in rectangles :      xp = [ minp [ 0 ] , maxp [ 0 ] , maxp [ 0 ] , minp [ 0 ] , minp [ 0 ] ] yp = [ minp [ 1 ] , minp [ 1 ] , maxp [ 1 ] , maxp [ 1 ] , minp [ 1 ] ] plt . plot ( xp , yp )  plt . scatter ( x [ 0 ] , x [ 1 ] ) plt . xlim ( - 1 , 4 ) plt . ylim ( - 1 , 4 ) plt . show ( )  