import odl import numpy as np reco_space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 128 , 128 ] , dtype = <str> ) geometry = odl . tomo . parallel_beam_geometry ( reco_space , num_angles = 100 ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry ) discr_phantom = odl . phantom . shepp_logan ( reco_space , modified = True ) noise_free_data = ray_trafo ( discr_phantom ) noise = odl . phantom . white_noise ( ray_trafo . range ) noise *= 0.10 / noise . norm ( ) * noise_free_data . norm ( ) data = noise_free_data + noise l2_norm = 0.5 * odl . solvers . L2NormSquared ( ray_trafo . range ) . translated ( data ) gradient = odl . Gradient ( reco_space ) reg_param = 0.3 l12_norm = reg_param * odl . solvers . GroupL1Norm ( gradient . range ) f = odl . solvers . ZeroFunctional ( reco_space ) g = [ l2_norm , l12_norm ] L = [ ray_trafo , gradient ] ray_trafo_norm = odl . power_method_opnorm ( ray_trafo , maxiter = 20 ) gradient_norm = odl . power_method_opnorm ( gradient , maxiter = 20 ) niter_inner = 200 tau = 0.01 sigma_ray_trafo = 45.0 / ray_trafo_norm ** 2 sigma_gradient = 45.0 / gradient_norm ** 2 sigma = [ sigma_ray_trafo , sigma_gradient ] niter_bregman = 7 x = reco_space . zero ( ) p = reco_space . zero ( ) for breg_iter in range ( niter_bregman ) :      print ( <str> . format ( breg_iter ) ) constant = l12_norm ( gradient ( x ) ) linear_part = reg_param * odl . solvers . QuadraticForm ( vector = - p , constant = constant ) callback_inner = odl . solvers . CallbackPrintIteration ( step = 50 ) odl . solvers . forward_backward_pd ( x = x , f = f , g = g , L = L , h = linear_part , tau = tau , sigma = sigma , niter = niter_inner , callback = callback_inner ) p -= ( 1 / reg_param ) * ray_trafo . adjoint ( l2_norm . gradient ( ray_trafo ( x ) ) ) x . show ( title = <str> . format ( breg_iter ) , force_show = True )  fbp_op = odl . tomo . fbp_op ( ray_trafo , filter_type = <str> , frequency_scaling = 0.4 ) fbp_reco = fbp_op ( data ) fbp_reco . show ( title = <str> ) discr_phantom . show ( title = <str> ) data . show ( title = <str> )  