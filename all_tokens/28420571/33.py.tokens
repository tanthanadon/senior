from __future__ import division import numpy as np import pytest import odl from odl . tomo . backends . astra_setup import ( astra_algorithm , astra_data , astra_projection_geometry , astra_projector , astra_supports , astra_volume_geometry ) from odl . util . testutils import is_subdict try :      import astra  except ImportError :      pass  pytestmark = pytest . mark . skipif ( <str> ) def _discrete_domain ( ndim ) :      max_pt = np . arange ( 1 , ndim + 1 ) min_pt = - max_pt shape = np . arange ( 1 , ndim + 1 ) * 10 return odl . uniform_discr ( min_pt , max_pt , shape = shape , dtype = <str> )  def _discrete_domain_anisotropic ( ndim ) :      min_pt = [ - 1 ] * ndim max_pt = [ 1 ] * ndim shape = np . arange ( 1 , ndim + 1 ) * 10 return odl . uniform_discr ( min_pt , max_pt , shape = shape , dtype = <str> )  def test_vol_geom_2d ( ) :      x_pts = 10 y_pts = 20 discr_dom = _discrete_domain ( 2 ) correct_dict = { <str> : y_pts , <str> : x_pts , <str> : { <str> : - 2.0 , <str> : 2.0 , <str> : - 1.0 , <str> : 1.0 } } vol_geom = astra_volume_geometry ( discr_dom ) assert vol_geom == correct_dict discr_dom = _discrete_domain_anisotropic ( 2 ) correct_dict = { <str> : y_pts , <str> : x_pts , <str> : { <str> : - 1.0 , <str> : 1.0 , <str> : - 1.0 , <str> : 1.0 } } if astra_supports ( <str> ) :          vol_geom = astra_volume_geometry ( discr_dom ) assert vol_geom == correct_dict  else :          with pytest . raises ( NotImplementedError ) :              astra_volume_geometry ( discr_dom )    def test_vol_geom_3d ( ) :      x_pts = 10 y_pts = 20 z_pts = 30 discr_dom = _discrete_domain ( 3 ) correct_dict = { <str> : z_pts , <str> : y_pts , <str> : x_pts , <str> : { <str> : - 3.0 , <str> : 3.0 , <str> : - 2.0 , <str> : 2.0 , <str> : - 1.0 , <str> : 1.0 } } vol_geom = astra_volume_geometry ( discr_dom ) assert vol_geom == correct_dict discr_dom = _discrete_domain_anisotropic ( 3 ) correct_dict = { <str> : z_pts , <str> : y_pts , <str> : x_pts , <str> : { <str> : - 1.0 , <str> : 1.0 , <str> : - 1.0 , <str> : 1.0 , <str> : - 1.0 , <str> : 1.0 } } if astra_supports ( <str> ) :          vol_geom = astra_volume_geometry ( discr_dom ) assert vol_geom == correct_dict  else :          with pytest . raises ( NotImplementedError ) :              astra_volume_geometry ( discr_dom )    def test_proj_geom_parallel_2d ( ) :      apart = odl . uniform_partition ( 0 , 2 , 5 ) dpart = odl . uniform_partition ( - 1 , 1 , 10 ) geom = odl . tomo . Parallel2dGeometry ( apart , dpart ) proj_geom = astra_projection_geometry ( geom ) correct_subdict = { <str> : <str> , <str> : 10 , <str> : 0.2 } assert is_subdict ( correct_subdict , proj_geom ) assert <str> in proj_geom  def test_astra_projection_geometry ( ) :      with pytest . raises ( TypeError ) :          astra_projection_geometry ( None )  apart = odl . uniform_partition ( 0 , 2 * np . pi , 5 ) dpart = odl . uniform_partition ( - 40 , 40 , 10 ) dpart_0 = odl . RectPartition ( odl . IntervalProd ( 0 , 3 ) , odl . RectGrid ( [ 0 , 1 , 3 ] ) ) geom_p2d = odl . tomo . Parallel2dGeometry ( apart , dpart = dpart_0 ) with pytest . raises ( ValueError ) :          astra_projection_geometry ( geom_p2d )  geom_p2d = odl . tomo . Parallel2dGeometry ( apart , dpart ) astra_projection_geometry ( geom_p2d ) geom_p2d = odl . tomo . Parallel2dGeometry ( apart , dpart ) astra_geom = astra_projection_geometry ( geom_p2d ) assert astra_geom [ <str> ] == <str> src_rad = 10 det_rad = 5 geom_ff = odl . tomo . FanBeamGeometry ( apart , dpart , src_rad , det_rad ) astra_geom = astra_projection_geometry ( geom_ff ) assert astra_geom [ <str> ] == <str> dpart = odl . uniform_partition ( [ - 40 , - 3 ] , [ 40 , 3 ] , ( 10 , 5 ) ) geom_p3d = odl . tomo . Parallel3dAxisGeometry ( apart , dpart ) astra_projection_geometry ( geom_p3d ) astra_geom = astra_projection_geometry ( geom_p3d ) assert astra_geom [ <str> ] == <str> geom_ccf = odl . tomo . ConeBeamGeometry ( apart , dpart , src_rad , det_rad ) astra_geom = astra_projection_geometry ( geom_ccf ) assert astra_geom [ <str> ] == <str> pitch = 1 geom_hcf = odl . tomo . ConeBeamGeometry ( apart , dpart , src_rad , det_rad , pitch = pitch ) astra_geom = astra_projection_geometry ( geom_hcf ) assert astra_geom [ <str> ] == <str>  VOL_GEOM_2D = { <str> : 20 , <str> : 10 , <str> : { <str> : - 2.0 , <str> : 2.0 , <str> : - 1.0 , <str> : 1.0 } } def test_volume_data_2d ( ) :      data_id = astra_data ( VOL_GEOM_2D , <str> , ndim = 2 ) data_out = astra . data2d . get_shared ( data_id ) assert data_out . shape == ( 10 , 20 ) discr_dom = _discrete_domain ( 2 ) data_in = discr_dom . element ( np . ones ( ( 10 , 20 ) , dtype = <str> ) ) data_id = astra_data ( VOL_GEOM_2D , <str> , data = data_in ) data_out = astra . data2d . get_shared ( data_id ) assert data_out . shape == ( 10 , 20 )  VOL_GEOM_3D = { <str> : 30 , <str> : 20 , <str> : 10 , <str> : { } } def test_volume_data_3d ( ) :      data_id = astra_data ( VOL_GEOM_3D , <str> , ndim = 3 ) data_out = astra . data3d . get_shared ( data_id ) assert data_out . shape == ( 10 , 20 , 30 ) discr_dom = _discrete_domain ( 3 ) data_in = discr_dom . element ( np . ones ( ( 10 , 20 , 30 ) , dtype = <str> ) ) data_id = astra_data ( VOL_GEOM_3D , <str> , data = data_in ) data_out = astra . data3d . get_shared ( data_id ) assert data_out . shape == ( 10 , 20 , 30 )  PROJ_GEOM_2D = { <str> : <str> , <str> : 15 , <str> : 1.5 , <str> : np . linspace ( 0 , 2 , 5 ) } PROJ_GEOM_3D = { <str> : <str> , <str> : 15 , <str> : 25 , <str> : 1.5 , <str> : 2.5 , <str> : np . linspace ( 0 , 2 , 5 ) } def test_parallel_2d_projector ( ) :      astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = 2 ) astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = 2 ) with pytest . raises ( ValueError ) :          astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = 2 )  with pytest . raises ( ValueError ) :          astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = 2 )   @ pytest . mark . xfail ( reason = <str> ) def test_parallel_3d_projector ( ) :      astra_projector ( <str> , VOL_GEOM_3D , PROJ_GEOM_3D , ndim = 3 )  @ pytest . mark . skipif ( not odl . tomo . ASTRA_CUDA_AVAILABLE , reason = <str> ) def test_parallel_3d_projector_gpu ( ) :      astra_projector ( <str> , VOL_GEOM_3D , PROJ_GEOM_3D , ndim = 3 )  def test_astra_algorithm ( ) :      direction = <str> ndim = 2 impl = <str> vol_id = astra_data ( VOL_GEOM_2D , <str> , ndim = ndim ) sino_id = astra_data ( PROJ_GEOM_2D , <str> , ndim = ndim ) proj_id = astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = ndim ) with pytest . raises ( ValueError ) :          astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , impl )  with pytest . raises ( ValueError ) :          astra_algorithm ( direction , 0 , vol_id , sino_id , proj_id , impl )  with pytest . raises ( ValueError ) :          astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , <str> )  with pytest . raises ( ValueError ) :          astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id = None , impl = <str> )  alg_id = astra_algorithm ( direction , ndim , vol_id , sino_id , proj_id , impl ) astra . algorithm . delete ( alg_id ) ndim = 2 impl = <str> for direction in { <str> , <str> } :          alg_id = astra_algorithm ( direction , ndim , vol_id , sino_id , proj_id , impl ) astra . algorithm . delete ( alg_id )   @ pytest . mark . skipif ( not odl . tomo . ASTRA_CUDA_AVAILABLE , reason = <str> ) def test_astra_algorithm_gpu ( ) :      direction = <str> ndim = 2 vol_id = astra_data ( VOL_GEOM_2D , <str> , ndim = ndim ) rec_id = astra_data ( VOL_GEOM_2D , <str> , ndim = ndim ) sino_id = astra_data ( PROJ_GEOM_2D , <str> , ndim = ndim ) proj_id = astra_projector ( <str> , VOL_GEOM_2D , PROJ_GEOM_2D , ndim = ndim ) alg_id = astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id = proj_id , impl = <str> ) astra . algorithm . delete ( alg_id ) alg_id = astra_algorithm ( <str> , ndim , rec_id , sino_id , proj_id = proj_id , impl = <str> ) astra . algorithm . delete ( alg_id ) ndim = 3 vol_id = astra_data ( VOL_GEOM_3D , <str> , ndim = ndim ) sino_id = astra_data ( PROJ_GEOM_3D , <str> , ndim = ndim ) proj_id = astra_projector ( <str> , VOL_GEOM_3D , PROJ_GEOM_3D , ndim = ndim ) with pytest . raises ( NotImplementedError ) :          astra_algorithm ( direction , ndim , vol_id , sino_id , proj_id = proj_id , impl = <str> )  for direction in { <str> , <str> } :          astra_algorithm ( direction , ndim , vol_id , sino_id , proj_id = proj_id , impl = <str> )   def test_geom_to_vec ( ) :      apart = odl . uniform_partition ( 0 , 2 * np . pi , 5 ) dpart = odl . uniform_partition ( - 40 , 40 , 10 ) src_rad = 10 det_rad = 5 geom_ff = odl . tomo . FanBeamGeometry ( apart , dpart , src_rad , det_rad ) vec = odl . tomo . astra_conebeam_2d_geom_to_vec ( geom_ff ) assert vec . shape == ( apart . size , 6 ) dpart = odl . uniform_partition ( [ - 40 , - 3 ] , [ 40 , 3 ] , ( 10 , 5 ) ) geom_ccf = odl . tomo . ConeBeamGeometry ( apart , dpart , src_rad , det_rad ) vec = odl . tomo . astra_conebeam_3d_geom_to_vec ( geom_ccf ) assert vec . shape == ( apart . size , 12 ) pitch = 1 geom_hcf = odl . tomo . ConeBeamGeometry ( apart , dpart , src_rad , det_rad , pitch = pitch ) vec = odl . tomo . astra_conebeam_3d_geom_to_vec ( geom_hcf ) assert vec . shape == ( apart . size , 12 )  if __name__ == <str> :      odl . util . test_file ( __file__ )   