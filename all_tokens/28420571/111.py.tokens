from __future__ import print_function , division , absolute_import import numpy as np import sys __all__ = ( <str> , <str> ) def submarine ( space , smooth = True , taper = 20.0 ) :      if space . ndim == 2 :          if smooth :              return _submarine_2d_smooth ( space , taper )  else :              return _submarine_2d_nonsmooth ( space )   else :          raise ValueError ( <str> <str> . format ( space . ndim ) )   def _submarine_2d_smooth ( space , taper ) :      def logistic ( x , c ) :          return 1. / ( 1 + np . exp ( - c * x ) )  def blurred_ellipse ( x ) :          halfaxes = np . array ( [ 0.4 , 0.14 ] ) * space . domain . extent center = np . array ( [ 0.6 , 0.3 ] ) * space . domain . extent center += space . domain . min ( ) sq_ndist = np . zeros_like ( x [ 0 ] ) for xi , rad , cen in zip ( x , halfaxes , center ) :              sq_ndist = sq_ndist + ( ( xi - cen ) / rad ) ** 2  out = np . sqrt ( sq_ndist ) out -= 1 return logistic ( out , - taper )  def blurred_rect ( x ) :          xlower = np . array ( [ 0.56 , 0.4 ] ) * space . domain . extent xlower += space . domain . min ( ) xupper = np . array ( [ 0.76 , 0.6 ] ) * space . domain . extent xupper += space . domain . min ( ) out = np . ones_like ( x [ 0 ] ) for xi , low , upp in zip ( x , xlower , xupper ) :              length = upp - low out = out * ( logistic ( ( xi - low ) / length , taper ) * logistic ( ( upp - xi ) / length , taper ) )  return out  out = space . element ( blurred_ellipse ) out += space . element ( blurred_rect ) return out . ufuncs . minimum ( 1 , out = out )  def _submarine_2d_nonsmooth ( space ) :      def ellipse ( x ) :          halfaxes = np . array ( [ 0.4 , 0.14 ] ) * space . domain . extent center = np . array ( [ 0.6 , 0.3 ] ) * space . domain . extent center += space . domain . min ( ) sq_ndist = np . zeros_like ( x [ 0 ] ) for xi , rad , cen in zip ( x , halfaxes , center ) :              sq_ndist = sq_ndist + ( ( xi - cen ) / rad ) ** 2  return np . where ( sq_ndist <= 1 , 1 , 0 )  def rect ( x ) :          xlower = np . array ( [ 0.56 , 0.4 ] ) * space . domain . extent xlower += space . domain . min ( ) xupper = np . array ( [ 0.76 , 0.6 ] ) * space . domain . extent xupper += space . domain . min ( ) out = np . ones_like ( x [ 0 ] ) for xi , low , upp in zip ( x , xlower , xupper ) :              out = out * ( ( xi >= low ) & ( xi <= upp ) )  return out  out = space . element ( ellipse ) out += space . element ( rect ) return out . ufuncs . minimum ( 1 , out = out )  def text ( space , text , font = None , border = 0.2 , inverted = True ) :      from PIL import Image , ImageDraw , ImageFont if space . ndim != 2 :          raise ValueError ( <str> )  if font is None :          platform = sys . platform if platform == <str> :              font = <str>  elif platform == <str> :              font = <str>  else :              font = <str>   text = str ( text ) init_size = 1000 init_pil_font = ImageFont . truetype ( font + <str> , size = init_size , encoding = <str> ) init_text_width , init_text_height = init_pil_font . getsize ( text ) scaled_init_size = ( 1.0 - border ) * init_size size = scaled_init_size * min ( [ space . shape [ 0 ] / init_text_width , space . shape [ 1 ] / init_text_height ] ) size = int ( size ) pil_font = ImageFont . truetype ( font + <str> , size = size , encoding = <str> ) text_width , text_height = pil_font . getsize ( text ) canvas = Image . new ( <str> , space . shape , ( 255 , 255 , 255 ) ) draw = ImageDraw . Draw ( canvas ) offset = ( ( space . shape [ 0 ] - text_width ) // 2 , ( space . shape [ 1 ] - text_height ) // 2 ) white = <str> draw . text ( offset , text , font = pil_font , fill = white ) arr = np . asarray ( canvas ) arr = np . sum ( arr , - 1 ) arr = arr / np . max ( arr ) arr = np . rot90 ( arr , - 1 ) if inverted :          arr = 1 - arr  return space . element ( arr )  if __name__ == <str> :      import odl from odl . util . testutils import run_doctests space = odl . uniform_discr ( [ - 1 , - 1 ] , [ 1 , 1 ] , [ 300 , 300 ] ) submarine ( space , smooth = False ) . show ( <str> ) submarine ( space , smooth = True ) . show ( <str> ) submarine ( space , smooth = True , taper = 50 ) . show ( <str> ) text ( space , text = <str> ) . show ( <str> ) run_doctests ( )   