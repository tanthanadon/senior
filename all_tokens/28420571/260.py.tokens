import numpy as np import odl reco_space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 300 , 300 ] , dtype = <str> ) angle_partition = odl . uniform_partition ( 0 , np . pi , 1000 ) detector_partition = odl . uniform_partition ( - 30 , 30 , 500 ) geometry = odl . tomo . Parallel2dGeometry ( angle_partition , detector_partition ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = <str> ) fbp = odl . tomo . fbp_op ( ray_trafo ) phantom = ( odl . phantom . shepp_logan ( reco_space , modified = True ) + 1j * odl . phantom . cuboid ( reco_space ) ) proj_data = ray_trafo ( phantom ) fbp_reconstruction = fbp ( proj_data ) phantom . show ( title = <str> ) proj_data . show ( title = <str> ) fbp_reconstruction . show ( title = <str> ) ( phantom - fbp_reconstruction ) . show ( title = <str> , force_show = True )  