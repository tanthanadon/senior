from __future__ import division import pytest import odl from odl . set . sets import ( EmptySet , UniversalSet , Strings , ComplexNumbers , RealNumbers , Integers ) def test_empty_set ( ) :      X = EmptySet ( ) Z = Integers ( ) assert None in X assert 1 not in X assert X . contains_set ( X ) assert not X . contains_set ( Z ) assert X == X assert X != Z assert X . element ( ) is None  def test_universal_set ( ) :      X = UniversalSet ( ) Z = Integers ( ) assert None in X assert 1 in X assert X . contains_set ( X ) assert X . contains_set ( Z ) assert not X . contains_set ( 1 ) assert X == X assert X != Z assert X . element ( ) is None assert X . element ( 1 ) == 1  def test_strings ( ) :      S1 = Strings ( 1 ) S6 = Strings ( 6 ) Z = Integers ( ) with pytest . raises ( ValueError ) :          Strings ( <str> )  with pytest . raises ( ValueError ) :          Strings ( - 2 )  assert <str> in S1 assert <str> not in S1 assert <str> not in S6 assert <str> in S6 assert 1 not in S1 assert 1 not in S6 assert S1 == S1 assert S1 != S6 assert S6 != S1 assert S6 == S6 assert S1 != Z assert S1 . element ( ) == <str> assert S6 . element ( ) == <str> * 6 assert S1 . element ( <str> ) == <str> assert S6 . element ( <str> ) == <str> * 6 assert S1 . element ( <str> ) == <str> assert S1 . element ( <str> ) == <str> assert S6 . element ( <str> ) == <str> assert S6 . element ( <str> ) == <str>  def test_complex ( ) :      C = ComplexNumbers ( ) R = RealNumbers ( ) Z = Integers ( ) assert - 1 in C assert 1 in C assert 0 in C assert - 1.0 in C assert 1.0 in C assert 0.0 in C assert 2j in C assert 2 + 2j in C assert <str> not in C assert C . contains_set ( C ) assert C . contains_set ( R ) assert C . contains_set ( Z ) assert C == C assert C != R assert C != Z assert C . element ( ) == complex ( 0.0 , 0.0 ) assert C . element ( 1 ) == complex ( 1.0 , 0.0 ) assert C . element ( 1 + 2j ) == complex ( 1.0 , 2.0 )  def test_real ( ) :      C = ComplexNumbers ( ) R = RealNumbers ( ) Z = Integers ( ) assert - 1 in R assert 1 in R assert 0 in R assert - 1.0 in R assert 1.0 in R assert 0.0 in R assert 2j not in R assert 2 + 2j not in R assert <str> not in R assert not R . contains_set ( C ) assert R . contains_set ( R ) assert C . contains_set ( Z ) assert R != C assert R == R assert R != Z assert C . element ( ) == float ( 0.0 ) assert C . element ( 1 ) == float ( 1.0 )  def test_integers ( ) :      C = ComplexNumbers ( ) R = RealNumbers ( ) Z = Integers ( ) assert - 1 in Z assert 1 in Z assert 0 in Z assert - 1.0 not in Z assert 1.0 not in Z assert 0.0 not in Z assert 2j not in Z assert 2 + 2j not in Z assert <str> not in Z assert not Z . contains_set ( C ) assert not Z . contains_set ( R ) assert Z . contains_set ( Z ) assert Z != C assert Z != R assert Z == Z assert Z . element ( ) == int ( 0 ) assert Z . element ( 1 ) == int ( 1 ) assert Z . element ( 1.5 ) == int ( 1.5 )  if __name__ == <str> :      odl . util . test_file ( __file__ )   