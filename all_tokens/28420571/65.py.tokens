from __future__ import division import numpy as np import pytest import odl from odl . discr . discr_utils import ( linear_interpolator , nearest_interpolator , per_axis_interpolator , point_collocation ) from odl . discr . grid import sparse_meshgrid from odl . util . testutils import all_almost_equal , all_equal def test_nearest_interpolation_1d_complex ( ) :      coord_vecs = [ [ 0.1 , 0.3 , 0.5 , 0.7 , 0.9 ] ] f = np . array ( [ 0 + 1j , 1 + 2j , 2 + 3j , 3 + 4j , 4 + 5j ] , dtype = <str> ) interpolator = nearest_interpolator ( f , coord_vecs ) val = interpolator ( 0.35 ) assert val == 1.0 + 2.0j pts = np . array ( [ 0.39 , 0.0 , 0.65 , 0.95 ] ) true_arr = [ 1 + 2j , 0 + 1j , 3 + 4j , 4 + 5j ] assert all_equal ( interpolator ( pts ) , true_arr ) pts = pts [ None , : ] assert all_equal ( interpolator ( pts ) , true_arr ) out = np . empty ( 4 , dtype = <str> ) interpolator ( pts , out = out ) assert all_equal ( out , true_arr ) mg = sparse_meshgrid ( [ 0.39 , 0.0 , 0.65 , 0.95 ] ) true_mg = [ 1 + 2j , 0 + 1j , 3 + 4j , 4 + 5j ] assert all_equal ( interpolator ( mg ) , true_mg ) interpolator ( mg , out = out ) assert all_equal ( out , true_mg )  def test_nearest_interpolation_2d ( ) :      coord_vecs = [ [ 0.125 , 0.375 , 0.625 , 0.875 ] , [ 0.25 , 0.75 ] ] f = np . array ( [ [ 0 , 1 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] , dtype = <str> ) interpolator = nearest_interpolator ( f , coord_vecs ) val = interpolator ( [ 0.3 , 0.6 ] ) assert val == 3.0 pts = np . array ( [ [ 0.3 , 0.6 ] , [ 1.0 , 1.0 ] ] ) true_arr = [ 3 , 7 ] assert all_equal ( interpolator ( pts . T ) , true_arr ) out = np . empty ( 2 , dtype = <str> ) interpolator ( pts . T , out = out ) assert all_equal ( out , true_arr ) mg = sparse_meshgrid ( [ 0.3 , 1.0 ] , [ 0.4 , 1.0 ] ) true_mg = [ [ 2 , 3 ] , [ 6 , 7 ] ] assert all_equal ( interpolator ( mg ) , true_mg ) out = np . empty ( ( 2 , 2 ) , dtype = <str> ) interpolator ( mg , out = out ) assert all_equal ( out , true_mg )  def test_nearest_interpolation_2d_string ( ) :      coord_vecs = [ [ 0.125 , 0.375 , 0.625 , 0.875 ] , [ 0.25 , 0.75 ] ] f = np . array ( [ [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] , [ <str> , <str> ] ] , dtype = <str> ) interpolator = nearest_interpolator ( f , coord_vecs ) val = interpolator ( [ 0.3 , 0.6 ] ) assert val == <str> pts = np . array ( [ [ 0.3 , 0.6 ] , [ 1.0 , 1.0 ] ] ) true_arr = np . array ( [ <str> , <str> ] , dtype = <str> ) assert all_equal ( interpolator ( pts . T ) , true_arr ) out = np . empty ( 2 , dtype = <str> ) interpolator ( pts . T , out = out ) assert all_equal ( out , true_arr ) mg = sparse_meshgrid ( [ 0.3 , 1.0 ] , [ 0.4 , 1.0 ] ) true_mg = np . array ( [ [ <str> , <str> ] , [ <str> , <str> ] ] , dtype = <str> ) assert all_equal ( interpolator ( mg ) , true_mg ) out = np . empty ( ( 2 , 2 ) , dtype = <str> ) interpolator ( mg , out = out ) assert all_equal ( out , true_mg )  def test_linear_interpolation_1d ( ) :      coord_vecs = [ [ 0.1 , 0.3 , 0.5 , 0.7 , 0.9 ] ] f = np . array ( [ 1 , 2 , 3 , 4 , 5 ] , dtype = <str> ) interpolator = linear_interpolator ( f , coord_vecs ) val = interpolator ( 0.35 ) true_val = 0.75 * 2 + 0.25 * 3 assert val == pytest . approx ( true_val ) pts = np . array ( [ 0.4 , 0.0 , 0.65 , 0.95 ] ) true_arr = [ 2.5 , 0.5 , 3.75 , 3.75 ] assert all_almost_equal ( interpolator ( pts ) , true_arr )  def test_linear_interpolation_2d ( ) :      coord_vecs = [ [ 0.125 , 0.375 , 0.625 , 0.875 ] , [ 0.25 , 0.75 ] ] f = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] , [ 7 , 8 ] ] , dtype = <str> ) interpolator = linear_interpolator ( f , coord_vecs ) val = interpolator ( [ 0.3 , 0.6 ] ) l1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) l2 = ( 0.6 - 0.25 ) / ( 0.75 - 0.25 ) true_val = ( ( 1 - l1 ) * ( 1 - l2 ) * f [ 0 , 0 ] + ( 1 - l1 ) * l2 * f [ 0 , 1 ] + l1 * ( 1 - l2 ) * f [ 1 , 0 ] + l1 * l2 * f [ 1 , 1 ] ) assert val == pytest . approx ( true_val ) pts = np . array ( [ [ 0.3 , 0.6 ] , [ 0.1 , 0.25 ] , [ 1.0 , 1.0 ] ] ) l1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) l2 = ( 0.6 - 0.25 ) / ( 0.75 - 0.25 ) true_val_1 = ( ( 1 - l1 ) * ( 1 - l2 ) * f [ 0 , 0 ] + ( 1 - l1 ) * l2 * f [ 0 , 1 ] + l1 * ( 1 - l2 ) * f [ 1 , 0 ] + l1 * l2 * f [ 1 , 1 ] ) l1 = ( 0.125 - 0.1 ) / ( 0.375 - 0.125 ) true_val_2 = ( 1 - l1 ) * f [ 0 , 0 ] l1 = ( 1.0 - 0.875 ) / ( 0.875 - 0.625 ) l2 = ( 1.0 - 0.75 ) / ( 0.75 - 0.25 ) true_val_3 = ( 1 - l1 ) * ( 1 - l2 ) * f [ 3 , 1 ] true_arr = [ true_val_1 , true_val_2 , true_val_3 ] assert all_equal ( interpolator ( pts . T ) , true_arr ) out = np . empty ( 3 , dtype = <str> ) interpolator ( pts . T , out = out ) assert all_equal ( out , true_arr ) mg = sparse_meshgrid ( [ 0.3 , 1.0 ] , [ 0.4 , 0.75 ] ) lx1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) lx2 = ( 1.0 - 0.875 ) / ( 0.875 - 0.625 ) ly1 = ( 0.4 - 0.25 ) / ( 0.75 - 0.25 ) true_val_11 = ( ( 1 - lx1 ) * ( 1 - ly1 ) * f [ 0 , 0 ] + ( 1 - lx1 ) * ly1 * f [ 0 , 1 ] + lx1 * ( 1 - ly1 ) * f [ 1 , 0 ] + lx1 * ly1 * f [ 1 , 1 ] ) true_val_12 = ( ( 1 - lx1 ) * f [ 0 , 1 ] + lx1 * f [ 1 , 1 ] ) true_val_21 = ( ( 1 - lx2 ) * ( 1 - ly1 ) * f [ 3 , 0 ] + ( 1 - lx2 ) * ly1 * f [ 3 , 1 ] ) true_val_22 = ( 1 - lx2 ) * f [ 3 , 1 ] true_mg = [ [ true_val_11 , true_val_12 ] , [ true_val_21 , true_val_22 ] ] assert all_equal ( interpolator ( mg ) , true_mg ) out = np . empty ( ( 2 , 2 ) , dtype = <str> ) interpolator ( mg , out = out ) assert all_equal ( out , true_mg )  def test_per_axis_interpolation ( ) :      coord_vecs = [ [ 0.125 , 0.375 , 0.625 , 0.875 ] , [ 0.25 , 0.75 ] ] interp = [ <str> , <str> ] f = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] , [ 7 , 8 ] ] , dtype = <str> ) interpolator = per_axis_interpolator ( f , coord_vecs , interp ) val = interpolator ( [ 0.3 , 0.5 ] ) l1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) true_val = ( 1 - l1 ) * f [ 0 , 1 ] + l1 * f [ 1 , 1 ] assert val == pytest . approx ( true_val ) pts = np . array ( [ [ 0.3 , 0.6 ] , [ 0.1 , 0.25 ] , [ 1.0 , 1.0 ] ] ) l1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) true_val_1 = ( 1 - l1 ) * f [ 0 , 1 ] + l1 * f [ 1 , 1 ] l1 = ( 0.125 - 0.1 ) / ( 0.375 - 0.125 ) true_val_2 = ( 1 - l1 ) * f [ 0 , 0 ] l1 = ( 1.0 - 0.875 ) / ( 0.875 - 0.625 ) true_val_3 = ( 1 - l1 ) * f [ 3 , 1 ] true_arr = [ true_val_1 , true_val_2 , true_val_3 ] assert all_equal ( interpolator ( pts . T ) , true_arr ) out = np . empty ( 3 , dtype = <str> ) interpolator ( pts . T , out = out ) assert all_equal ( out , true_arr ) mg = sparse_meshgrid ( [ 0.3 , 1.0 ] , [ 0.4 , 0.85 ] ) lx1 = ( 0.3 - 0.125 ) / ( 0.375 - 0.125 ) lx2 = ( 1.0 - 0.875 ) / ( 0.875 - 0.625 ) true_val_11 = ( 1 - lx1 ) * f [ 0 , 0 ] + lx1 * f [ 1 , 0 ] true_val_12 = ( ( 1 - lx1 ) * f [ 0 , 1 ] + lx1 * f [ 1 , 1 ] ) true_val_21 = ( 1 - lx2 ) * f [ 3 , 0 ] true_val_22 = ( 1 - lx2 ) * f [ 3 , 1 ] true_mg = [ [ true_val_11 , true_val_12 ] , [ true_val_21 , true_val_22 ] ] assert all_equal ( interpolator ( mg ) , true_mg ) out = np . empty ( ( 2 , 2 ) , dtype = <str> ) interpolator ( mg , out = out ) assert all_equal ( out , true_mg )  def test_collocation_interpolation_identity ( ) :      coord_vecs = [ [ 0.125 , 0.375 , 0.625 , 0.875 ] , [ 0.25 , 0.75 ] ] f = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] , [ 7 , 8 ] ] , dtype = <str> ) interpolators = [ nearest_interpolator ( f , coord_vecs ) , linear_interpolator ( f , coord_vecs ) , per_axis_interpolator ( f , coord_vecs , interp = [ <str> , <str> ] ) , ] for interpolator in interpolators :          mg = sparse_meshgrid ( * coord_vecs ) ident_f = point_collocation ( interpolator , mg ) assert all_almost_equal ( ident_f , f )   if __name__ == <str> :      odl . util . test_file ( __file__ )   