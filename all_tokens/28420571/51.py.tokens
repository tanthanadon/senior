from __future__ import division import pytest import odl from odl . solvers import douglas_rachford_pd from odl . util . testutils import all_almost_equal , noise_element HIGH_ACCURACY = 8 LOW_ACCURACY = 4 def test_primal_dual_input_handling ( ) :      space1 = odl . uniform_discr ( 0 , 1 , 10 ) lin_ops = [ odl . ZeroOperator ( space1 ) , odl . ZeroOperator ( space1 ) ] g = [ odl . solvers . ZeroFunctional ( space1 ) , odl . solvers . ZeroFunctional ( space1 ) ] f = odl . solvers . ZeroFunctional ( space1 ) x0 = noise_element ( space1 ) x = x0 . copy ( ) niter = 3 douglas_rachford_pd ( x , f , g , lin_ops , tau = 1.0 , sigma = [ 1.0 , 1.0 ] , niter = niter ) assert x == x0 with pytest . raises ( ValueError ) :          douglas_rachford_pd ( x , f , g , lin_ops , tau = 1.0 , sigma = [ 1.0 ] , niter = niter )  g_too_many = [ odl . solvers . ZeroFunctional ( space1 ) , odl . solvers . ZeroFunctional ( space1 ) , odl . solvers . ZeroFunctional ( space1 ) ] with pytest . raises ( ValueError ) :          douglas_rachford_pd ( x , f , g_too_many , lin_ops , tau = 1.0 , sigma = [ 1.0 , 1.0 ] , niter = niter )  space2 = odl . uniform_discr ( 1 , 2 , 10 ) x = noise_element ( space2 ) with pytest . raises ( ValueError ) :          douglas_rachford_pd ( x , f , g , lin_ops , tau = 1.0 , sigma = [ 1.0 , 1.0 ] , niter = niter )   def test_primal_dual_l1 ( ) :      space = odl . rn ( 5 ) L = [ odl . IdentityOperator ( space ) ] data_1 = odl . util . testutils . noise_element ( space ) data_2 = odl . util . testutils . noise_element ( space ) f = odl . solvers . L1Norm ( space ) . translated ( data_1 ) g = [ 0.5 * odl . solvers . L1Norm ( space ) . translated ( data_2 ) ] x = space . zero ( ) douglas_rachford_pd ( x , f , g , L , tau = 3.0 , sigma = [ 1.0 ] , niter = 10 ) assert all_almost_equal ( x , data_1 , ndigits = 2 )  def test_primal_dual_no_operator ( ) :      space = odl . rn ( 5 ) L = [ ] data_1 = odl . util . testutils . noise_element ( space ) f = odl . solvers . L1Norm ( space ) . translated ( data_1 ) g = [ ] x = space . zero ( ) douglas_rachford_pd ( x , f , g , L , tau = 3.0 , sigma = [ ] , niter = 10 ) assert all_almost_equal ( x , data_1 , ndigits = 2 )  def test_primal_dual_with_li ( ) :      upper_lim = - 1 lower_lim = - 3 space = odl . rn ( 1 ) lin_ops = [ odl . IdentityOperator ( space ) ] g = [ odl . solvers . IndicatorBox ( space , lower = lower_lim , upper = upper_lim ) ] f = odl . solvers . ZeroFunctional ( space ) l = [ odl . solvers . L2NormSquared ( space ) ] x = space . element ( 10 ) douglas_rachford_pd ( x , f , g , lin_ops , tau = 0.5 , sigma = [ 1.0 ] , niter = 20 , l = l ) assert lower_lim - 10 ** - LOW_ACCURACY <= float ( x ) assert float ( x ) <= upper_lim + 10 ** - LOW_ACCURACY  if __name__ == <str> :      odl . util . test_file ( __file__ )   