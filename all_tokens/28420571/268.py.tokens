import astra import numpy as np import matplotlib . pyplot as plt import scipy . misc import odl domain_size = np . array ( [ 512 , 512 ] ) n_angles = 180 det_size = 362 niter = 20 phantom = np . rot90 ( scipy . misc . ascent ( ) . astype ( <str> ) , - 1 ) vol_geom = astra . create_vol_geom ( domain_size [ 0 ] , domain_size [ 1 ] ) proj_geom = astra . create_proj_geom ( <str> , np . linalg . norm ( domain_size ) / det_size , det_size , np . linspace ( 0 , np . pi , n_angles ) ) proj_id = astra . create_projector ( <str> , proj_geom , vol_geom ) sinogram_id , sinogram = astra . create_sino ( phantom , proj_id ) rec_id = astra . data2d . create ( <str> , vol_geom ) cfg = astra . astra_dict ( <str> ) cfg [ <str> ] = rec_id cfg [ <str> ] = sinogram_id cfg [ <str> ] = proj_id alg_id = astra . algorithm . create ( cfg ) with odl . util . Timer ( <str> ) :      astra . algorithm . run ( alg_id , niter )  rec = astra . data2d . get ( rec_id ) astra . algorithm . delete ( alg_id ) astra . data2d . delete ( rec_id ) astra . data2d . delete ( sinogram_id ) astra . projector . delete ( proj_id ) reco_space = odl . uniform_discr ( - domain_size / 2 , domain_size / 2 , domain_size ) geometry = odl . tomo . parallel_beam_geometry ( reco_space , n_angles , det_size ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = <str> ) data = ray_trafo ( phantom ) x = reco_space . zero ( ) with odl . util . Timer ( <str> ) :      odl . solvers . conjugate_gradient_normal ( ray_trafo , x , data , niter = niter )  plt . figure ( <str> ) plt . imshow ( phantom . T , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( sinogram . T , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( rec . T , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( data . asarray ( ) . T , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( x . asarray ( ) . T , origin = <str> , cmap = <str> ) plt . show ( )  