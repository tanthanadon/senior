import astra import numpy as np import matplotlib . pyplot as plt import odl domain_size = np . array ( [ 256 , 256 , 256 ] ) n_angles = 360 det_size = 512 niter = 10 reco_space = odl . uniform_discr ( - domain_size / 2 , domain_size / 2 , domain_size ) apart = odl . uniform_partition ( 0 , 2 * np . pi , n_angles ) dpart = odl . uniform_partition ( [ - 500 , - 500 ] , [ 500 , 500 ] , [ det_size , det_size ] ) geometry = odl . tomo . ConeFlatGeometry ( apart , dpart , src_radius = 500 , det_radius = 500 ) phantom = odl . phantom . shepp_logan ( reco_space , modified = True ) . asarray ( ) astra_vol_geom = astra . create_vol_geom ( * domain_size ) det_row_count = geometry . det_partition . shape [ 1 ] det_col_count = geometry . det_partition . shape [ 0 ] vec = odl . tomo . backends . astra_setup . astra_conebeam_3d_geom_to_vec ( geometry ) astra_proj_geom = astra . create_proj_geom ( <str> , det_row_count , det_col_count , vec ) proj_cfg = { } proj_cfg [ <str> ] = <str> proj_cfg [ <str> ] = astra_vol_geom proj_cfg [ <str> ] = astra_proj_geom proj_cfg [ <str> ] = { } proj_id = astra . projector3d . create ( proj_cfg ) sinogram_id , sinogram = astra . create_sino3d_gpu ( phantom , astra_proj_geom , astra_vol_geom ) rec_id = astra . data3d . create ( <str> , astra_vol_geom ) cfg = astra . astra_dict ( <str> ) cfg [ <str> ] = rec_id cfg [ <str> ] = sinogram_id cfg [ <str> ] = proj_id alg_id = astra . algorithm . create ( cfg ) with odl . util . Timer ( <str> ) :      astra . algorithm . run ( alg_id , niter )  rec = astra . data3d . get ( rec_id ) astra . algorithm . delete ( alg_id ) astra . data3d . delete ( rec_id ) astra . data3d . delete ( sinogram_id ) astra . projector3d . delete ( proj_id ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = <str> ) data = ray_trafo ( phantom ) x = reco_space . zero ( ) with odl . util . Timer ( <str> ) :      odl . solvers . conjugate_gradient_normal ( ray_trafo , x , data , niter = niter )  coords = ( slice ( None ) , slice ( None ) , 128 ) plt . figure ( <str> ) plt . imshow ( phantom . T [ coords ] , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( rec . T [ coords ] , origin = <str> , cmap = <str> ) plt . figure ( <str> ) plt . imshow ( x . asarray ( ) . T [ coords ] , origin = <str> , cmap = <str> ) plt . show ( )  