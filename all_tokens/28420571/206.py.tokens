import odl import numpy as np import pyshearlab from threading import Lock __all__ = ( <str> , ) class PyShearlabOperator ( odl . Operator ) :      def __init__ ( self , space , num_scales ) :          self . shearlet_system = pyshearlab . SLgetShearletSystem2D ( 0 , space . shape [ 0 ] , space . shape [ 1 ] , num_scales ) range = space ** self . shearlet_system [ <str> ] self . mutex = Lock ( ) super ( PyShearlabOperator , self ) . __init__ ( space , range , True )  def _call ( self , x ) :          with self . mutex :              result = pyshearlab . SLsheardec2D ( x , self . shearlet_system ) return np . moveaxis ( result , - 1 , 0 )   @ property def adjoint ( self ) :          return PyShearlabOperatorAdjoint ( self )  @ property def inverse ( self ) :          return PyShearlabOperatorInverse ( self )   class PyShearlabOperatorAdjoint ( odl . Operator ) :      def __init__ ( self , op ) :          self . op = op super ( PyShearlabOperatorAdjoint , self ) . __init__ ( op . range , op . domain , True )  def _call ( self , x ) :          with self . op . mutex :              x = np . moveaxis ( x , 0 , - 1 ) return pyshearlab . SLshearadjoint2D ( x , self . op . shearlet_system )   @ property def adjoint ( self ) :          return self . op  @ property def inverse ( self ) :          return PyShearlabOperatorAdjointInverse ( self . op )   class PyShearlabOperatorInverse ( odl . Operator ) :      def __init__ ( self , op ) :          self . op = op super ( PyShearlabOperatorInverse , self ) . __init__ ( op . range , op . domain , True )  def _call ( self , x ) :          with self . op . mutex :              x = np . moveaxis ( x , 0 , - 1 ) return pyshearlab . SLshearrec2D ( x , self . op . shearlet_system )   @ property def adjoint ( self ) :          return PyShearlabOperatorAdjointInverse ( self . op )  @ property def inverse ( self ) :          return self . op   class PyShearlabOperatorAdjointInverse ( odl . Operator ) :      def __init__ ( self , op ) :          self . op = op super ( PyShearlabOperatorAdjointInverse , self ) . __init__ ( op . domain , op . range , True )  def _call ( self , x ) :          with self . op . mutex :              result = pyshearlab . SLshearrecadjoint2D ( x , self . op . shearlet_system ) return np . moveaxis ( result , - 1 , 0 )   @ property def adjoint ( self ) :          return self . op . inverse  @ property def inverse ( self ) :          return self . op . adjoint   if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   