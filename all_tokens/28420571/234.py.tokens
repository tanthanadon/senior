from __future__ import division import numpy as np from odl . contrib . datasets . util import get_data from odl . discr import uniform_partition from odl . tomo import FanFlatGeometry __all__ = ( <str> , <str> , <str> , <str> ) DATA_SUBSET = <str> def walnut_data ( ) :      url = <str> dct = get_data ( <str> , subset = DATA_SUBSET , url = url ) data = np . swapaxes ( dct [ <str> ] , 0 , 1 ) [ : : - 1 , : : - 1 ] data = data . astype ( <str> ) data = - np . log ( data / np . max ( data , axis = 1 ) [ : , None ] ) return data  def walnut_geometry ( ) :      a_offset = - np . pi / 2 apart = uniform_partition ( a_offset , a_offset + 2 * np . pi , 1200 ) d_offset = - 0.279 dpart = uniform_partition ( d_offset - 57.4 , d_offset + 57.4 , 2296 ) geometry = FanFlatGeometry ( apart , dpart , src_radius = 110 , det_radius = 190 ) return geometry  def lotus_root_data ( ) :      url = <str> dct = get_data ( <str> , subset = DATA_SUBSET , url = url ) data = np . swapaxes ( dct [ <str> ] , 0 , 1 ) [ : , : ] data = data . astype ( <str> ) return data  def lotus_root_geometry ( ) :      a_offset = np . pi / 2 apart = uniform_partition ( a_offset , a_offset + 2 * np . pi * 366. / 360. , 366 ) d_offset = 0.35 dpart = uniform_partition ( d_offset - 60 , d_offset + 60 , 2240 ) geometry = FanFlatGeometry ( apart , dpart , src_radius = 540 , det_radius = 90 ) return geometry  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   