import numpy as np import odl reco_space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 300 , 300 ] , dtype = <str> ) angle_partition = odl . uniform_partition ( 0 , np . pi , 360 ) detector_partition = odl . uniform_partition ( - 30 , 30 , 300 ) geometry = odl . tomo . Parallel2dGeometry ( angle_partition , detector_partition ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry ) discr_phantom = odl . phantom . shepp_logan ( reco_space , modified = True ) data = ray_trafo ( discr_phantom ) data += odl . phantom . white_noise ( ray_trafo . range ) * np . mean ( data ) * 0.1 callback = ( odl . solvers . CallbackPrintIteration ( ) & odl . solvers . CallbackShow ( ) ) x = ray_trafo . domain . zero ( ) odl . solvers . conjugate_gradient_normal ( ray_trafo , x , data , niter = 20 , callback = callback ) discr_phantom . show ( title = <str> ) data . show ( title = <str> ) x . show ( title = <str> , force_show = True )  