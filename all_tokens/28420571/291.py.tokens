import numpy as np import odl n = 10 space = odl . rn ( n ) offset = space . element ( [ 1 , 1 , 1 , 1 , 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ) lam = 0.5 f = odl . solvers . IndicatorNonnegativity ( space ) g = lam * odl . solvers . L1Norm ( space ) L = odl . IdentityOperator ( space ) h = 1.0 / 2.0 * odl . solvers . L2NormSquared ( space ) . translated ( offset ) niter = 50 tau = 0.5 sigma = 0.5 x = space . element ( np . random . randn ( n ) ) print ( <str> . format ( x ) ) callback = odl . solvers . CallbackPrintIteration ( ) odl . solvers . forward_backward_pd ( x = x , f = f , g = [ g ] , L = [ L ] , h = h , tau = tau , sigma = [ sigma ] , niter = niter , callback = callback ) print ( <str> . format ( x ) )  