import numpy as np import scipy . misc import odl image = np . rot90 ( scipy . misc . ascent ( ) [ : : 2 , : : 2 ] , 3 ) n , m = image . shape space = odl . uniform_discr ( [ 0 , 0 ] , [ n , m ] , [ n , m ] ) data = space . element ( image ) noise = odl . phantom . white_noise ( space ) * 10.0 noisy_data = data + noise data . show ( <str> ) noisy_data . show ( <str> ) gradient = odl . Gradient ( space ) lin_ops = [ gradient ] g = [ 1e1 * odl . solvers . L1Norm ( gradient . range ) ] f = odl . solvers . IndicatorBox ( space , 0 , 255 ) h = 0.5 * odl . solvers . L2NormSquared ( space ) . translated ( noisy_data ) x = noisy_data . copy ( ) callback = ( odl . solvers . CallbackShow ( step = 20 , clim = [ 0 , 255 ] ) & odl . solvers . CallbackPrintIteration ( ) ) odl . solvers . forward_backward_pd ( x , f , g , lin_ops , h , tau = 1.0 , sigma = [ 0.01 ] , niter = 1000 , callback = callback ) x . show ( title = <str> , force_show = True )  