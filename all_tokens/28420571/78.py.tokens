from __future__ import absolute_import , division , print_function import numpy as np from odl . discr import DiscreteLp , DiscreteLpElement from odl . tomo . backends . astra_setup import ( astra_algorithm , astra_data , astra_projection_geometry , astra_projector , astra_volume_geometry ) from odl . tomo . geometry import ( DivergentBeamGeometry , Geometry , ParallelBeamGeometry ) from odl . util import writable_array try :      import astra  except ImportError :      pass  __all__ = ( <str> , <str> , <str> , ) def default_astra_proj_type ( geom ) :      if isinstance ( geom , ParallelBeamGeometry ) :          return <str> if geom . ndim == 2 else <str>  elif isinstance ( geom , DivergentBeamGeometry ) :          return <str> if geom . ndim == 2 else <str>  else :          raise TypeError ( <str> <str> . format ( type ( geom ) ) )   def astra_cpu_forward_projector ( vol_data , geometry , proj_space , out = None , astra_proj_type = None ) :      if not isinstance ( vol_data , DiscreteLpElement ) :          raise TypeError ( <str> <str> . format ( vol_data ) )  if vol_data . space . impl != <str> :          raise TypeError ( <str> <str> . format ( vol_data . space . impl ) )  if not isinstance ( geometry , Geometry ) :          raise TypeError ( <str> <str> . format ( geometry ) )  if not isinstance ( proj_space , DiscreteLp ) :          raise TypeError ( <str> <str> . format ( proj_space ) )  if proj_space . impl != <str> :          raise TypeError ( <str> <str> . format ( proj_space . impl ) )  if vol_data . ndim != geometry . ndim :          raise ValueError ( <str> <str> <str> . format ( vol_data . ndim , geometry . ndim ) )  if out is None :          out = proj_space . element ( )  else :          if out not in proj_space :              raise TypeError ( <str> <str> . format ( out ) )   ndim = vol_data . ndim vol_geom = astra_volume_geometry ( vol_data . space ) proj_geom = astra_projection_geometry ( geometry ) if astra_proj_type is None :          astra_proj_type = default_astra_proj_type ( geometry )  proj_id = astra_projector ( astra_proj_type , vol_geom , proj_geom , ndim ) vol_data_arr = np . asarray ( vol_data ) vol_id = astra_data ( vol_geom , datatype = <str> , data = vol_data_arr , allow_copy = True ) with writable_array ( out , dtype = <str> , order = <str> ) as out_arr :          sino_id = astra_data ( proj_geom , datatype = <str> , data = out_arr , ndim = proj_space . ndim ) algo_id = astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , impl = <str> ) astra . algorithm . run ( algo_id )  astra . algorithm . delete ( algo_id ) astra . data2d . delete ( ( vol_id , sino_id ) ) astra . projector . delete ( proj_id ) return out  def astra_cpu_back_projector ( proj_data , geometry , vol_space , out = None , astra_proj_type = None ) :      if not isinstance ( proj_data , DiscreteLpElement ) :          raise TypeError ( <str> <str> . format ( proj_data ) )  if proj_data . space . impl != <str> :          raise TypeError ( <str> <str> <str> . format ( proj_data . space . impl ) )  if not isinstance ( geometry , Geometry ) :          raise TypeError ( <str> <str> . format ( geometry ) )  if not isinstance ( vol_space , DiscreteLp ) :          raise TypeError ( <str> <str> . format ( vol_space ) )  if vol_space . impl != <str> :          raise TypeError ( <str> <str> . format ( vol_space . impl ) )  if vol_space . ndim != geometry . ndim :          raise ValueError ( <str> <str> . format ( vol_space . ndim , geometry . ndim ) )  if out is None :          out = vol_space . element ( )  else :          if out not in vol_space :              raise TypeError ( <str> <str> . format ( out ) )   ndim = proj_data . ndim vol_geom = astra_volume_geometry ( vol_space ) proj_geom = astra_projection_geometry ( geometry ) sino_id = astra_data ( proj_geom , datatype = <str> , data = proj_data , allow_copy = True ) if astra_proj_type is None :          astra_proj_type = default_astra_proj_type ( geometry )  proj_id = astra_projector ( astra_proj_type , vol_geom , proj_geom , ndim ) with writable_array ( out , dtype = <str> , order = <str> ) as out_arr :          vol_id = astra_data ( vol_geom , datatype = <str> , data = out_arr , ndim = vol_space . ndim ) algo_id = astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , impl = <str> ) astra . algorithm . run ( algo_id )  scaling_factor = float ( proj_data . space . weighting . const ) scaling_factor /= float ( vol_space . weighting . const ) out *= scaling_factor astra . algorithm . delete ( algo_id ) astra . data2d . delete ( ( vol_id , sino_id ) ) astra . projector . delete ( proj_id ) return out  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   