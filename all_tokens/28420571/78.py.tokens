from __future__ import print_function , division , absolute_import import numpy as np try :      import astra  except ImportError :      pass  from odl . discr import DiscreteLp , DiscreteLpElement from odl . tomo . backends . astra_setup import ( astra_projection_geometry , astra_volume_geometry , astra_data , astra_projector , astra_algorithm ) from odl . tomo . geometry import Geometry from odl . util import writable_array __all__ = ( <str> , <str> ) def astra_cpu_forward_projector ( vol_data , geometry , proj_space , out = None ) :      if not isinstance ( vol_data , DiscreteLpElement ) :          raise TypeError ( <str> <str> . format ( vol_data ) )  if vol_data . space . impl != <str> :          raise TypeError ( <str> <str> . format ( vol_data . space . impl ) )  if not isinstance ( geometry , Geometry ) :          raise TypeError ( <str> <str> . format ( geometry ) )  if not isinstance ( proj_space , DiscreteLp ) :          raise TypeError ( <str> <str> . format ( proj_space ) )  if proj_space . impl != <str> :          raise TypeError ( <str> <str> . format ( proj_space . impl ) )  if vol_data . ndim != geometry . ndim :          raise ValueError ( <str> <str> <str> . format ( vol_data . ndim , geometry . ndim ) )  if out is None :          out = proj_space . element ( )  else :          if out not in proj_space :              raise TypeError ( <str> <str> . format ( out ) )   ndim = vol_data . ndim vol_geom = astra_volume_geometry ( vol_data . space ) proj_geom = astra_projection_geometry ( geometry ) if not all ( s == vol_data . space . interp_byaxis [ 0 ] for s in vol_data . space . interp_byaxis ) :          raise ValueError ( <str> <str> . format ( vol_data . space . interp ) )  vol_interp = vol_data . space . interp proj_id = astra_projector ( vol_interp , vol_geom , proj_geom , ndim , impl = <str> ) vol_data_arr = np . asarray ( vol_data ) vol_id = astra_data ( vol_geom , datatype = <str> , data = vol_data_arr , allow_copy = True ) with writable_array ( out , dtype = <str> , order = <str> ) as out_arr :          sino_id = astra_data ( proj_geom , datatype = <str> , data = out_arr , ndim = proj_space . ndim ) algo_id = astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , impl = <str> ) astra . algorithm . run ( algo_id )  astra . algorithm . delete ( algo_id ) astra . data2d . delete ( ( vol_id , sino_id ) ) astra . projector . delete ( proj_id ) return out  def astra_cpu_back_projector ( proj_data , geometry , reco_space , out = None ) :      if not isinstance ( proj_data , DiscreteLpElement ) :          raise TypeError ( <str> <str> . format ( proj_data ) )  if proj_data . space . impl != <str> :          raise TypeError ( <str> <str> <str> . format ( proj_data . space . impl ) )  if not isinstance ( geometry , Geometry ) :          raise TypeError ( <str> <str> . format ( geometry ) )  if not isinstance ( reco_space , DiscreteLp ) :          raise TypeError ( <str> <str> . format ( reco_space ) )  if reco_space . impl != <str> :          raise TypeError ( <str> <str> . format ( reco_space . impl ) )  if reco_space . ndim != geometry . ndim :          raise ValueError ( <str> <str> . format ( reco_space . ndim , geometry . ndim ) )  if out is None :          out = reco_space . element ( )  else :          if out not in reco_space :              raise TypeError ( <str> <str> . format ( out ) )   ndim = proj_data . ndim vol_geom = astra_volume_geometry ( reco_space ) proj_geom = astra_projection_geometry ( geometry ) sino_id = astra_data ( proj_geom , datatype = <str> , data = proj_data , allow_copy = True ) if not all ( s == proj_data . space . interp_byaxis [ 0 ] for s in proj_data . space . interp_byaxis ) :          raise ValueError ( <str> <str> <str> . format ( proj_data . space . interp_byaxis ) )  proj_interp = proj_data . space . interp proj_id = astra_projector ( proj_interp , vol_geom , proj_geom , ndim , impl = <str> ) with writable_array ( out , dtype = <str> , order = <str> ) as out_arr :          vol_id = astra_data ( vol_geom , datatype = <str> , data = out_arr , ndim = reco_space . ndim ) algo_id = astra_algorithm ( <str> , ndim , vol_id , sino_id , proj_id , impl = <str> ) astra . algorithm . run ( algo_id )  scaling_factor = float ( proj_data . space . weighting . const ) scaling_factor /= float ( reco_space . weighting . const ) out *= scaling_factor astra . algorithm . delete ( algo_id ) astra . data2d . delete ( ( vol_id , sino_id ) ) astra . projector . delete ( proj_id ) return out  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   