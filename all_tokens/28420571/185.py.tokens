from __future__ import print_function import numpy as np import torch import odl from odl . contrib . torch import OperatorFunction matrix = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , dtype = float ) op = odl . MatrixOperator ( matrix ) x = torch . ones ( 3 , dtype = torch . float64 , requires_grad = True ) odl_res = op ( x . detach ( ) . numpy ( ) ) torch_res = OperatorFunction . apply ( op , x ) print ( <str> , torch_res . detach ( ) . numpy ( ) ) print ( <str> , np . asarray ( odl_res ) ) l2sq = odl . solvers . L2NormSquared ( op . range ) z = OperatorFunction . apply ( op , x ) loss = OperatorFunction . apply ( l2sq , z ) loss . backward ( ) odl_grad = ( l2sq * op ) . gradient ( x . detach ( ) . numpy ( ) ) print ( <str> , x . grad . detach ( ) . numpy ( ) ) print ( <str> , np . asarray ( odl_grad ) ) l2sq = odl . solvers . L2NormSquared ( odl . rn ( 3 ) ) def mse ( x , y ) :      return OperatorFunction . apply ( l2sq , x - y ) . mean ( )  x = torch . ones ( ( 2 , 1 , 3 ) , dtype = torch . float64 , requires_grad = True ) y = - torch . ones ( ( 2 , 1 , 3 ) , dtype = torch . float64 ) loss = mse ( x , y ) loss . backward ( ) print ( <str> ) print ( x . grad . detach ( ) . numpy ( ) )  