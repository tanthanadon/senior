import numpy as np import odl impl = None shift = np . array ( [ 0.0 , 25.0 , 0.0 ] ) vol_shape = ( 100 , 150 , 200 ) vol_max_pt = np . array ( vol_shape , dtype = float ) / 2 vol_min_pt = - vol_max_pt reco_space = odl . uniform_discr ( vol_min_pt + shift , vol_max_pt + shift , vol_shape , dtype = <str> ) phantom = odl . phantom . indicate_proj_axis ( reco_space ) assert np . allclose ( reco_space . cell_sides , 1 ) grid = odl . RectGrid ( np . linspace ( 0 , 2 * np . pi , 360 , endpoint = False ) ) angle_partition = odl . uniform_partition_fromgrid ( grid ) src_radius = 500 det_radius = 1000 cone_angle = np . arctan ( vol_max_pt [ 2 ] / src_radius ) det_size = np . floor ( 1.1 * ( src_radius + det_radius ) * np . sin ( cone_angle ) ) det_shape = ( int ( det_size ) , int ( det_size ) ) det_max_pt = np . array ( [ det_size / 2 , det_size / 2 ] ) det_min_pt = - det_max_pt detector_partition = odl . uniform_partition ( det_min_pt , det_max_pt , det_shape ) assert np . allclose ( detector_partition . cell_sides , 1 ) geometry = odl . tomo . ConeFlatGeometry ( angle_partition , detector_partition , src_radius , det_radius , axis = [ 0 , 0 , 1 ] ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = impl ) proj_data = ray_trafo ( phantom ) backproj = ray_trafo . adjoint ( proj_data ) backproj . show ( <str> , indices = [ None , None , 100 ] ) phantom . show ( <str> , indices = [ None , None , 100 ] ) geometry = odl . tomo . ConeFlatGeometry ( angle_partition , detector_partition , src_radius , det_radius , axis = [ 0 , 1 , 0 ] ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = impl ) proj_data = ray_trafo ( phantom ) backproj = ray_trafo . adjoint ( proj_data ) backproj . show ( <str> , indices = [ None , 75 , None ] ) phantom . show ( <str> , indices = [ None , 75 , None ] ) geometry = odl . tomo . ConeFlatGeometry ( angle_partition , detector_partition , src_radius , det_radius , axis = [ 1 , 0 , 0 ] ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry , impl = impl ) proj_data = ray_trafo ( phantom ) backproj = ray_trafo . adjoint ( proj_data ) backproj . show ( <str> , indices = [ 95 , None , None ] ) phantom . show ( <str> , indices = [ 95 , None , None ] )  