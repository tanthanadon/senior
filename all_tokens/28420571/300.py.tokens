import numpy as np import scipy . misc import odl image = np . rot90 ( scipy . misc . ascent ( ) [ : : 2 , : : 2 ] , 3 ) . astype ( <str> ) shape = image . shape image *= 100 / image . max ( ) noisy_image = np . random . poisson ( 1 + image ) space = odl . uniform_discr ( [ 0 , 0 ] , shape , shape ) orig = space . element ( image ) noisy = space . element ( noisy_image ) gradient = odl . Gradient ( space , method = <str> ) op = odl . BroadcastOperator ( odl . IdentityOperator ( space ) , gradient ) f = odl . solvers . IndicatorNonnegativity ( op . domain ) kl_divergence = odl . solvers . KullbackLeibler ( space , prior = noisy ) l1_norm = 0.1 * odl . solvers . L1Norm ( gradient . range ) g = odl . solvers . SeparableSum ( kl_divergence , l1_norm ) callback = ( odl . solvers . CallbackPrintIteration ( ) & odl . solvers . CallbackShow ( step = 5 ) ) op_norm = 1.1 * odl . power_method_opnorm ( op ) tau = 10.0 / op_norm sigma = 0.1 / op_norm x = op . domain . zero ( ) odl . solvers . pdhg ( x , f , g , op , niter = 100 , tau = tau , sigma = sigma , callback = callback ) orig . show ( title = <str> ) noisy . show ( title = <str> ) x . show ( title = <str> , force_show = True )  