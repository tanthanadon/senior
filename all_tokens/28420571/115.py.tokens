from __future__ import absolute_import , division , print_function import numpy as np from odl . util import npy_random_seed __all__ = ( <str> , <str> , <str> , <str> ) def white_noise ( space , mean = 0 , stddev = 1 , seed = None ) :      from odl . space import ProductSpace with npy_random_seed ( seed ) :          if isinstance ( space , ProductSpace ) :              values = [ white_noise ( subspace , mean , stddev ) for subspace in space ]  else :              if space . is_complex :                  real = np . random . normal ( loc = mean . real , scale = stddev , size = space . shape ) imag = np . random . normal ( loc = mean . imag , scale = stddev , size = space . shape ) values = real + 1j * imag  else :                  values = np . random . normal ( loc = mean , scale = stddev , size = space . shape )    return space . element ( values )  def uniform_noise ( space , low = 0 , high = 1 , seed = None ) :      from odl . space import ProductSpace with npy_random_seed ( seed ) :          if isinstance ( space , ProductSpace ) :              values = [ uniform_noise ( subspace , low , high ) for subspace in space ]  else :              if space . is_complex :                  real = np . random . uniform ( low = low . real , high = high . real , size = space . shape ) imag = np . random . uniform ( low = low . imag , high = high . imag , size = space . shape ) values = real + 1j * imag  else :                  values = np . random . uniform ( low = low , high = high , size = space . shape )    return space . element ( values )  def poisson_noise ( intensity , seed = None ) :      <str> from odl . space import ProductSpace with npy_random_seed ( seed ) :          if isinstance ( intensity . space , ProductSpace ) :              values = [ poisson_noise ( subintensity ) for subintensity in intensity ]  else :              values = np . random . poisson ( intensity . asarray ( ) )   return intensity . space . element ( values )  def salt_pepper_noise ( vector , fraction = 0.05 , salt_vs_pepper = 0.5 , low_val = None , high_val = None , seed = None ) :      from odl . space import ProductSpace fraction , fraction_in = float ( fraction ) , fraction if not ( 0 <= fraction <= 1 ) :          raise ValueError ( <str> <str> . format ( fraction_in ) )  salt_vs_pepper , salt_vs_pepper_in = float ( salt_vs_pepper ) , salt_vs_pepper if not ( 0 <= salt_vs_pepper <= 1 ) :          raise ValueError ( <str> <str> . format ( salt_vs_pepper_in ) )  with npy_random_seed ( seed ) :          if isinstance ( vector . space , ProductSpace ) :              values = [ salt_pepper_noise ( subintensity , fraction , salt_vs_pepper , low_val , high_val ) for subintensity in vector ]  else :              values = vector . asarray ( ) . flatten ( ) if low_val is None :                  low_val = np . min ( values )  if high_val is None :                  high_val = np . max ( values )  a = np . arange ( vector . size ) np . random . shuffle ( a ) salt_indices = a [ : int ( fraction * vector . size * salt_vs_pepper ) ] pepper_indices = a [ int ( fraction * vector . size * salt_vs_pepper ) : int ( fraction * vector . size ) ] values [ salt_indices ] = high_val values [ pepper_indices ] = - low_val values = values . reshape ( vector . space . shape )   return vector . space . element ( values )  if __name__ == <str> :      import odl from odl . util . testutils import run_doctests r100 = odl . rn ( 100 ) white_noise ( r100 ) . show ( <str> ) uniform_noise ( r100 ) . show ( <str> ) white_noise ( r100 , mean = 5 ) . show ( <str> ) c100 = odl . cn ( 100 ) white_noise ( c100 ) . show ( <str> ) uniform_noise ( c100 ) . show ( <str> ) discr = odl . uniform_discr ( [ - 1 , - 1 ] , [ 1 , 1 ] , [ 300 , 300 ] ) white_noise ( discr ) . show ( <str> ) uniform_noise ( discr ) . show ( <str> ) vector = odl . phantom . shepp_logan ( discr , modified = True ) poisson_noise ( vector * 100 ) . show ( <str> ) salt_pepper_noise ( vector ) . show ( <str> ) run_doctests ( )   