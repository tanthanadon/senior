import numpy as np import odl templ_space = odl . uniform_discr ( [ - 1 , - 1 ] , [ 1 , 1 ] , ( 100 , 100 ) , interp = <str> ) template = odl . phantom . cuboid ( templ_space , [ - 0.5 , - 0.25 ] , [ 0.5 , 0.25 ] ) disp_field_space = templ_space . tangent_bundle sigma = 0.5 disp_func = [ lambda x : 0.4 * np . exp ( - ( x [ 0 ] ** 2 + x [ 1 ] ** 2 ) / ( 2 * sigma ** 2 ) ) , lambda x : - 0.3 * np . exp ( - ( x [ 0 ] ** 2 + x [ 1 ] ** 2 ) / ( 2 * sigma ** 2 ) ) ] disp_field = disp_field_space . element ( disp_func ) template . show ( <str> ) disp_field . show ( <str> ) deform_op = odl . deform . LinDeformFixedTempl ( template ) deformed_template = deform_op ( disp_field ) deform_op_deriv = deform_op . derivative ( disp_field ) deriv_result = deform_op_deriv ( disp_field_space . one ( ) ) deriv_adj_result = deform_op_deriv . adjoint ( templ_space . one ( ) ) deformed_template . show ( <str> ) deriv_result . show ( <str> ) deriv_adj_result . show ( <str> , force_show = True )  