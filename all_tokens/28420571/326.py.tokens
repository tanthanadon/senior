import odl square = odl . ufunc_ops . square ( ) space = odl . rn ( 3 ) l2_norm = odl . solvers . L2Norm ( space ) l2_norm_squared_comp = square * odl . solvers . L2Norm ( space ) l2_norm_squared_raw = odl . solvers . L2NormSquared ( space ) x = space . element ( [ 1 , 2 , 3 ] ) print ( <str> . format ( l2_norm_squared_comp ( x ) ) ) print ( <str> . format ( l2_norm_squared_raw ( x ) ) ) print ( <str> . format ( l2_norm_squared_comp . gradient ( x ) ) ) print ( <str> . format ( l2_norm_squared_raw . gradient ( x ) ) ) square = odl . ufunc_ops . square ( space ) l2_norm_composed_pointwise = l2_norm * square print ( <str> . format ( l2_norm_composed_pointwise ( x ) ) ) print ( <str> . format ( l2_norm ( x ** 2 ) ) )  