from __future__ import division import doctest from doctest import IGNORE_EXCEPTION_DETAIL , ELLIPSIS , NORMALIZE_WHITESPACE import os import pytest try :      import matplotlib matplotlib . use ( <str> ) import matplotlib . pyplot as plt  except ImportError :      pass  import numpy import odl try :      import proximal  except ImportError :      proximal = None  doctest_extraglobs = { <str> : odl , <str> : numpy , <str> : proximal } root_dir = os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , os . pardir , os . pardir , <str> , <str> ) root_dir = os . path . normpath ( root_dir ) test_dirs = [ <str> , <str> ] test_suffixes = [ <str> , <str> ] exclude_files = [ <str> ] doc_src_files = [ ] doctest_optionflags = NORMALIZE_WHITESPACE | ELLIPSIS | IGNORE_EXCEPTION_DETAIL for test_dir in test_dirs :      for path , _ , filenames in os . walk ( os . path . join ( root_dir , test_dir ) ) :          for filename in filenames :              if ( any ( filename . endswith ( suffix ) for suffix in test_suffixes ) and filename not in exclude_files ) :                  doc_src_files . append ( os . path . join ( path , filename ) )     @ pytest . fixture ( scope = <str> , ids = doc_src_files , params = doc_src_files ) def doc_src_file ( request ) :      return request . param  @ pytest . mark . skipif ( <str> , reason = <str> ) def test_file ( doc_src_file ) :      doctest . testfile ( doc_src_file , module_relative = False , report = True , extraglobs = doctest_extraglobs , verbose = True , optionflags = doctest_optionflags ) plt . close ( <str> )  if __name__ == <str> :      odl . util . test_file ( __file__ )   