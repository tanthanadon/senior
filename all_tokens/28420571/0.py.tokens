from __future__ import print_function , absolute_import from setuptools import setup , find_packages from setuptools . command . test import test as TestCommand import os import sys root_path = os . path . dirname ( __file__ ) requires = open ( os . path . join ( root_path , <str> ) ) . readlines ( ) test_requires = open ( os . path . join ( root_path , <str> ) ) . readlines ( ) class PyTest ( TestCommand ) :      user_options = [ ( <str> , <str> , <str> ) ] def initialize_options ( self ) :          TestCommand . initialize_options ( self ) self . pytest_args = [ ]  def finalize_options ( self ) :          TestCommand . finalize_options ( self ) self . test_args = [ ] self . test_suite = True  def run_tests ( self ) :          import pytest errno = pytest . main ( self . pytest_args ) sys . exit ( errno )   test_path = os . path . join ( root_path , <str> , <str> ) def find_tests ( ) :      tests = [ ] for path , _ , filenames in os . walk ( os . path . join ( root_path , test_path ) ) :          for filename in filenames :              basename , suffix = os . path . splitext ( filename ) if ( suffix == <str> and ( basename . startswith ( <str> ) or basename . endswith ( <str> ) ) ) :                  tests . append ( os . path . join ( path , filename ) )    return tests  with open ( os . path . join ( root_path , <str> , <str> ) ) as f :      for line in f :          if line . startswith ( <str> ) :              version = line . strip ( ) . split ( ) [ - 1 ] [ 1 : - 1 ] break    long_description = setup ( name = <str> , version = version , description = <str> , long_description = long_description , url = <str> , author = <str> , author_email = <str> , license = <str> , classifiers = [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , keywords = <str> , packages = find_packages ( ) , package_dir = { <str> : <str> } , package_data = { <str> : find_tests ( ) + [ <str> ] } , include_package_data = True , entry_points = { <str> : [ <str> ] } , install_requires = [ requires ] , tests_require = [ <str> ] , extras_require = { <str> : test_requires , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , } , cmdclass = { <str> : PyTest } , )  