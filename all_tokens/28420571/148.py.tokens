 from __future__ import print_function , division , absolute_import import numpy as np from odl . set import RealNumbers , ComplexNumbers from odl . space . entry_points import tensor_space_impl __all__ = ( <str> , <str> , <str> , <str> ) def vector ( array , dtype = None , order = None , impl = <str> ) :      arr = np . array ( array , copy = False , order = order , ndmin = 1 ) if arr . dtype is object :          raise ValueError ( <str> )  if dtype is not None :          space_dtype = dtype  else :          space_dtype = arr . dtype  space = tensor_space ( arr . shape , dtype = space_dtype , impl = impl ) return space . element ( arr )  def tensor_space ( shape , dtype = None , impl = <str> , ** kwargs ) :      tspace_cls = tensor_space_impl ( impl ) if dtype is None :          dtype = tspace_cls . default_dtype ( )  return tspace_cls ( shape = shape , dtype = dtype , ** kwargs )  def cn ( shape , dtype = None , impl = <str> , ** kwargs ) :      cn_cls = tensor_space_impl ( impl ) if dtype is None :          dtype = cn_cls . default_dtype ( ComplexNumbers ( ) )  cn = cn_cls ( shape = shape , dtype = dtype , ** kwargs ) if not cn . is_complex :          raise ValueError ( <str> <str> . format ( dtype ) )  return cn  def rn ( shape , dtype = None , impl = <str> , ** kwargs ) :      rn_cls = tensor_space_impl ( impl ) if dtype is None :          dtype = rn_cls . default_dtype ( RealNumbers ( ) )  rn = rn_cls ( shape = shape , dtype = dtype , ** kwargs ) if not rn . is_real :          raise ValueError ( <str> <str> . format ( dtype ) )  return rn  if __name__ == <str> :      from odl . util . testutils import run_doctests run_doctests ( )   