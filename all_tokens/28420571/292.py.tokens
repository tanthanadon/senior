import numpy as np import odl import proximal space = odl . uniform_discr ( [ 0 , 0 ] , [ 100 , 100 ] , [ 100 , 100 ] ) laplacian = odl . Laplacian ( space ) phantom = odl . phantom . shepp_logan ( space , modified = True ) phantom . show ( <str> ) rhs = laplacian ( phantom ) rhs += odl . phantom . white_noise ( space ) * np . std ( rhs ) * 0.1 rhs . show ( <str> ) proximal_lang_laplacian = odl . as_proximal_lang_operator ( laplacian ) rhs_arr = rhs . asarray ( ) x = proximal . Variable ( space . shape ) funcs = [ 10 * proximal . sum_squares ( proximal_lang_laplacian ( x ) - rhs_arr ) , proximal . norm1 ( proximal . grad ( x ) ) ] prob = proximal . Problem ( funcs ) prob . solve ( verbose = True ) result_odl = space . element ( x . value ) result_odl . show ( <str> , force_show = True )  