import numpy as np import odl import proximal reco_space = odl . uniform_discr ( min_pt = [ - 20 , - 20 ] , max_pt = [ 20 , 20 ] , shape = [ 300 , 300 ] , dtype = <str> ) angle_partition = odl . uniform_partition ( 0 , np . pi , 360 ) detector_partition = odl . uniform_partition ( - 30 , 30 , 512 ) geometry = odl . tomo . Parallel2dGeometry ( angle_partition , detector_partition ) ray_trafo = odl . tomo . RayTransform ( reco_space , geometry ) proximal_lang_ray_trafo = odl . as_proximal_lang_operator ( ray_trafo ) phantom = odl . phantom . shepp_logan ( reco_space , modified = True ) phantom . show ( <str> ) data = ray_trafo ( phantom ) data += odl . phantom . white_noise ( ray_trafo . range ) * np . mean ( data ) * 0.1 data . show ( <str> ) rhs_arr = data . asarray ( ) x = proximal . Variable ( reco_space . shape ) funcs = [ proximal . sum_squares ( proximal_lang_ray_trafo ( x ) - rhs_arr ) , 0.2 * proximal . norm1 ( proximal . grad ( x ) ) , proximal . nonneg ( x ) , proximal . nonneg ( 1 - x ) ] prob = proximal . Problem ( funcs ) prob . solve ( verbose = True ) result_odl = reco_space . element ( x . value ) result_odl . show ( <str> , force_show = True )  