from __future__ import division import numpy as np import pytest import odl from odl . discr . grid import sparse_meshgrid from odl . util import is_int_dtype from odl . util . testutils import all_equal from odl . util . vectorization import ( is_valid_input_array , is_valid_input_meshgrid , out_shape_from_meshgrid , out_shape_from_array , vectorize ) def test_is_valid_input_array ( ) :      valid_shapes = [ ( 1 , 1 ) , ( 1 , 2 ) , ( 1 , 20 ) , ( 20 , ) ] invalid_shapes = [ ( 2 , 1 ) , ( 1 , 1 , 1 ) , ( 1 , ) , ( ) ] for shp in valid_shapes :          arr = np . zeros ( shp ) assert is_valid_input_array ( arr , ndim = 1 )  for shp in invalid_shapes :          arr = np . zeros ( shp ) assert not is_valid_input_array ( arr , ndim = 1 )  valid_shapes = [ ( 3 , 1 ) , ( 3 , 2 ) , ( 3 , 20 ) ] invalid_shapes = [ ( 3 , ) , ( 20 , ) , ( 4 , 1 ) , ( 3 , 1 , 1 ) , ( ) ] for shp in valid_shapes :          arr = np . zeros ( shp ) assert is_valid_input_array ( arr , ndim = 3 )  for shp in invalid_shapes :          arr = np . zeros ( shp ) assert not is_valid_input_array ( arr , ndim = 3 )  assert is_valid_input_array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , ndim = 2 ) invalid_input = [ 1 , [ [ [ 1 , 2 ] , [ 3 , 4 ] ] ] , ( 5 , ) ] for inp in invalid_input :          assert not is_valid_input_array ( inp , ndim = 2 )   def test_is_valid_input_meshgrid ( ) :      x = np . zeros ( 2 ) valid_mg = sparse_meshgrid ( x ) assert is_valid_input_meshgrid ( valid_mg , ndim = 1 ) invalid_mg = sparse_meshgrid ( x , x ) assert not is_valid_input_meshgrid ( invalid_mg , ndim = 1 ) x = np . zeros ( ( 2 , 2 ) ) invalid_mg = sparse_meshgrid ( x ) assert not is_valid_input_meshgrid ( invalid_mg , ndim = 1 ) x , y , z = np . zeros ( 2 ) , np . zeros ( 3 ) , np . zeros ( 4 ) valid_mg = sparse_meshgrid ( x , y , z ) assert is_valid_input_meshgrid ( valid_mg , ndim = 3 ) invalid_mg = sparse_meshgrid ( x , x , y , z ) assert not is_valid_input_meshgrid ( invalid_mg , ndim = 3 ) x = np . zeros ( ( 3 , 3 ) ) invalid_mg = sparse_meshgrid ( x ) assert not is_valid_input_meshgrid ( invalid_mg , ndim = 3 ) invalid_input = [ 1 , [ 1 , 2 ] , ( [ 1 , 2 ] , [ 3 , 4 ] ) , ( 5 , ) , np . zeros ( ( 2 , 2 ) ) ] for inp in invalid_input :          assert not is_valid_input_meshgrid ( inp , ndim = 1 ) assert not is_valid_input_meshgrid ( inp , ndim = 2 )   def test_out_shape_from_array ( ) :      arr = np . zeros ( ( 1 , 1 ) ) assert out_shape_from_array ( arr ) == ( 1 , ) arr = np . zeros ( ( 1 , 2 ) ) assert out_shape_from_array ( arr ) == ( 2 , ) arr = np . zeros ( ( 1 , ) ) assert out_shape_from_array ( arr ) == ( 1 , ) arr = np . zeros ( ( 20 , ) ) assert out_shape_from_array ( arr ) == ( 20 , ) arr = np . zeros ( ( 3 , 1 ) ) assert out_shape_from_array ( arr ) == ( 1 , ) arr = np . zeros ( ( 3 , 2 ) ) assert out_shape_from_array ( arr ) == ( 2 , ) arr = np . zeros ( ( 3 , 20 ) ) assert out_shape_from_array ( arr ) == ( 20 , )  def test_out_shape_from_meshgrid ( ) :      x = np . zeros ( 2 ) mg = sparse_meshgrid ( x ) assert out_shape_from_meshgrid ( mg ) == ( 2 , ) x , y , z = np . zeros ( 2 ) , np . zeros ( 3 ) , np . zeros ( 4 ) mg = sparse_meshgrid ( x , y , z ) assert out_shape_from_meshgrid ( mg ) == ( 2 , 3 , 4 ) x , y , z = np . zeros ( 2 ) , np . zeros ( 3 ) , np . zeros ( 4 ) mg = np . meshgrid ( x , y , z , sparse = False , indexing = <str> , copy = True ) assert out_shape_from_meshgrid ( mg ) == ( 2 , 3 , 4 ) mg = np . meshgrid ( x , y , z , sparse = False , indexing = <str> , copy = True ) mg = tuple ( reversed ( [ np . asfortranarray ( arr ) for arr in mg ] ) ) assert out_shape_from_meshgrid ( mg ) == ( 2 , 3 , 4 )  def test_vectorize_1d_otype ( ) :      import sys arr = ( np . arange ( 5 ) - 2 ) [ None , : ] mg = sparse_meshgrid ( np . arange ( 5 ) - 3 ) val_1 = - 1 val_2 = 2 @ vectorize ( otypes = [ <str> ] ) def simple_func ( x ) :          return 0 if x < 0 else 1  true_result_arr = [ 0 , 0 , 1 , 1 , 1 ] true_result_mg = [ 0 , 0 , 0 , 1 , 1 ] out = simple_func ( arr ) assert isinstance ( out , np . ndarray ) assert out . dtype == np . dtype ( <str> ) assert out . shape == ( 5 , ) assert all_equal ( out , true_result_arr ) out = simple_func ( mg ) assert isinstance ( out , np . ndarray ) assert out . shape == ( 5 , ) assert out . dtype == np . dtype ( <str> ) assert all_equal ( out , true_result_mg ) assert simple_func ( val_1 ) == 0 assert simple_func ( val_2 ) == 1 bogus_input = [ lambda x : x , object , Exception ] if sys . version_info . major > 2 :          for b in bogus_input :              with pytest . raises ( TypeError ) :                  simple_func ( b )    out = np . empty ( 5 , dtype = <str> ) simple_func ( arr , out = out ) assert all_equal ( out , true_result_arr ) out = np . empty ( 5 , dtype = <str> ) simple_func ( mg , out = out ) assert all_equal ( out , true_result_mg )  def test_vectorize_1d_lazy ( ) :      arr = ( np . arange ( 5 ) - 2 ) [ None , : ] mg = sparse_meshgrid ( np . arange ( 5 ) - 3 ) val_1 = - 1 val_2 = 2 @ vectorize def simple_func ( x ) :          return 0 if x < 0 else 1  true_result_arr = [ 0 , 0 , 1 , 1 , 1 ] true_result_mg = [ 0 , 0 , 0 , 1 , 1 ] out = simple_func ( arr ) assert isinstance ( out , np . ndarray ) assert is_int_dtype ( out . dtype ) assert out . shape == ( 5 , ) assert all_equal ( out , true_result_arr ) out = simple_func ( mg ) assert isinstance ( out , np . ndarray ) assert out . shape == ( 5 , ) assert is_int_dtype ( out . dtype ) assert all_equal ( out , true_result_mg ) assert simple_func ( val_1 ) == 0 assert simple_func ( val_2 ) == 1  def test_vectorize_2d_dtype ( ) :      arr = np . empty ( ( 2 , 5 ) , dtype = <str> ) arr [ 0 ] = ( [ - 3 , - 2 , - 1 , 0 , 1 ] ) arr [ 1 ] = ( [ - 1 , 0 , 1 , 2 , 3 ] ) mg = sparse_meshgrid ( [ - 3 , - 2 , - 1 , 0 , 1 ] , [ - 1 , 0 , 1 , 2 , 3 ] ) val_1 = ( - 1 , 1 ) val_2 = ( 2 , 1 ) @ vectorize ( otypes = [ <str> ] ) def simple_func ( x ) :          return 0 if x [ 0 ] < 0 and x [ 1 ] > 0 else 1  true_result_arr = [ 1 , 1 , 0 , 1 , 1 ] true_result_mg = [ [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 ] ] out = simple_func ( arr ) assert isinstance ( out , np . ndarray ) assert out . dtype == np . dtype ( <str> ) assert out . shape == ( 5 , ) assert all_equal ( out , true_result_arr ) out = simple_func ( mg ) assert isinstance ( out , np . ndarray ) assert out . dtype == np . dtype ( <str> ) assert out . shape == ( 5 , 5 ) assert all_equal ( out , true_result_mg ) assert simple_func ( val_1 ) == 0 assert simple_func ( val_2 ) == 1 out = np . empty ( 5 , dtype = <str> ) simple_func ( arr , out = out ) assert all_equal ( out , true_result_arr ) out = np . empty ( ( 5 , 5 ) , dtype = <str> ) simple_func ( mg , out = out ) assert all_equal ( out , true_result_mg )  def test_vectorize_2d_lazy ( ) :      arr = np . empty ( ( 2 , 5 ) , dtype = <str> ) arr [ 0 ] = ( [ - 3 , - 2 , - 1 , 0 , 1 ] ) arr [ 1 ] = ( [ - 1 , 0 , 1 , 2 , 3 ] ) mg = sparse_meshgrid ( [ - 3 , - 2 , - 1 , 0 , 1 ] , [ - 1 , 0 , 1 , 2 , 3 ] ) val_1 = ( - 1 , 1 ) val_2 = ( 2 , 1 ) @ vectorize def simple_func ( x ) :          return 0 if x [ 0 ] < 0 and x [ 1 ] > 0 else 1  true_result_arr = [ 1 , 1 , 0 , 1 , 1 ] true_result_mg = [ [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 ] ] out = simple_func ( arr ) assert isinstance ( out , np . ndarray ) assert is_int_dtype ( out . dtype ) assert out . shape == ( 5 , ) assert all_equal ( out , true_result_arr ) out = simple_func ( mg ) assert isinstance ( out , np . ndarray ) assert is_int_dtype ( out . dtype ) assert out . shape == ( 5 , 5 ) assert all_equal ( out , true_result_mg ) assert simple_func ( val_1 ) == 0 assert simple_func ( val_2 ) == 1  def test_vectorize_callable_class ( ) :      arr = [ [ - 2 , - 1 , 0 , 1 , 2 ] ] mg = [ [ - 3 , - 2 , - 1 , 0 , 1 ] ] val_1 = - 1 val_2 = 2 class CallableClass ( object ) :          def __call__ ( self , x ) :              return 0 if x < 0 else 1   vectorized_call = vectorize ( CallableClass ( ) ) true_result_arr = [ 0 , 0 , 1 , 1 , 1 ] true_result_mg = [ 0 , 0 , 0 , 1 , 1 ] out = vectorized_call ( arr ) assert isinstance ( out , np . ndarray ) assert is_int_dtype ( out . dtype ) assert out . shape == ( 5 , ) assert all_equal ( out , true_result_arr ) out = vectorized_call ( mg ) assert isinstance ( out , np . ndarray ) assert out . shape == ( 5 , ) assert is_int_dtype ( out . dtype ) assert all_equal ( out , true_result_mg ) assert vectorized_call ( val_1 ) == 0 assert vectorized_call ( val_2 ) == 1  if __name__ == <str> :      odl . util . test_file ( __file__ )   