import numpy as np import odl import matplotlib . pyplot as plt shape = [ 100 , 100 ] space = odl . uniform_discr ( [ 0 , 0 ] , shape , shape ) orig = odl . phantom . smooth_cuboid ( space ) d = odl . phantom . salt_pepper_noise ( orig , fraction = 0.2 ) op = odl . Gradient ( space ) norm_op = np . sqrt ( 8 ) + 1e-2 lam = 2 const = 0.5 f = const / lam * odl . solvers . L1Norm ( space ) . translated ( d ) g = const * odl . solvers . Huber ( op . range , gamma = .01 ) obj_fun = f + g * op mu_g = 1 / g . grad_lipschitz class CallbackStore ( odl . solvers . Callback ) :      def __init__ ( self ) :          self . iteration_count = 0 self . iteration_counts = [ ] self . obj_function_values = [ ]  def __call__ ( self , x ) :          self . iteration_count += 1 self . iteration_counts . append ( self . iteration_count ) self . obj_function_values . append ( obj_fun ( x ) )  def reset ( self ) :          self . iteration_count = 0 self . iteration_counts = [ ] self . obj_function_values = [ ]   callback = odl . solvers . CallbackPrintIteration ( step = 10 ) & CallbackStore ( ) niter = 500 tau = 1.0 / norm_op sigma = 1.0 / norm_op x = space . zero ( ) callback ( x ) odl . solvers . pdhg ( x , f , g , op , niter , tau , sigma , gamma_dual = mu_g , callback = callback ) obj = callback . callbacks [ 1 ] . obj_function_values clim = [ 0 , 1 ] cmap = <str> orig . show ( <str> , clim = clim , cmap = cmap ) d . show ( <str> , clim = clim , cmap = cmap ) x . show ( <str> , clim = clim , cmap = cmap ) def rel_fun ( x ) :      x = np . array ( x ) return ( x - min ( x ) ) / ( x [ 0 ] - min ( x ) )  i = np . array ( callback . callbacks [ 1 ] . iteration_counts ) plt . figure ( ) plt . loglog ( i , rel_fun ( obj ) , label = <str> ) plt . loglog ( i [ 1 : ] , 20. / i [ 1 : ] ** 2 , <str> , label = <str> ) plt . title ( <str> ) plt . legend ( )  