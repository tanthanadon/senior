from __future__ import division import numpy as np import pytest import odl from odl . operator . oputils import matrix_representation , power_method_opnorm from odl . operator . pspace_ops import ProductSpaceOperator from odl . util . testutils import all_almost_equal def test_matrix_representation ( ) :      n = 3 A = np . random . rand ( n , n ) Aop = odl . MatrixOperator ( A ) matrix_repr = matrix_representation ( Aop ) assert all_almost_equal ( A , matrix_repr )  def test_matrix_representation_product_to_lin_space ( ) :      n = 3 A = np . random . rand ( n , n ) Aop = odl . MatrixOperator ( A ) B = np . random . rand ( n , n ) Bop = odl . MatrixOperator ( B ) ABop = ProductSpaceOperator ( [ [ Aop , Bop ] ] ) matrix_repr = matrix_representation ( ABop ) assert matrix_repr . shape == ( 1 , n , 2 , n ) assert np . linalg . norm ( A - matrix_repr [ 0 , : , 0 , : ] ) == pytest . approx ( 0 ) assert np . linalg . norm ( B - matrix_repr [ 0 , : , 1 , : ] ) == pytest . approx ( 0 )  def test_matrix_representation_lin_space_to_product ( ) :      n = 3 A = np . random . rand ( n , n ) Aop = odl . MatrixOperator ( A ) B = np . random . rand ( n , n ) Bop = odl . MatrixOperator ( B ) ABop = ProductSpaceOperator ( [ [ Aop ] , [ Bop ] ] ) matrix_repr = matrix_representation ( ABop ) assert matrix_repr . shape == ( 2 , n , 1 , n ) assert np . linalg . norm ( A - matrix_repr [ 0 , : , 0 , : ] ) == pytest . approx ( 0 ) assert np . linalg . norm ( B - matrix_repr [ 1 , : , 0 , : ] ) == pytest . approx ( 0 )  def test_matrix_representation_product_to_product ( ) :      n = 3 A = np . random . rand ( n , n ) Aop = odl . MatrixOperator ( A ) B = np . random . rand ( n , n ) Bop = odl . MatrixOperator ( B ) ABop = ProductSpaceOperator ( [ [ Aop , 0 ] , [ 0 , Bop ] ] ) matrix_repr = matrix_representation ( ABop ) assert matrix_repr . shape == ( 2 , n , 2 , n ) assert np . linalg . norm ( A - matrix_repr [ 0 , : , 0 , : ] ) == pytest . approx ( 0 ) assert np . linalg . norm ( B - matrix_repr [ 1 , : , 1 , : ] ) == pytest . approx ( 0 )  def test_matrix_representation_not_linear_op ( ) :      class MyNonLinOp ( odl . Operator ) :          def _call ( self , x ) :              return x ** 2   nonlin_op = MyNonLinOp ( domain = odl . rn ( 3 ) , range = odl . rn ( 3 ) , linear = False ) with pytest . raises ( ValueError ) :          matrix_representation ( nonlin_op )   def test_matrix_representation_wrong_domain ( ) :      class MyOp ( odl . Operator ) :          def __init__ ( self ) :              super ( MyOp , self ) . __init__ ( domain = odl . rn ( 3 ) * odl . rn ( 3 ) ** 2 , range = odl . rn ( 4 ) , linear = True )  def _call ( self , x , out ) :              return odl . rn ( np . random . rand ( 4 ) )   nonlin_op = MyOp ( ) with pytest . raises ( TypeError ) :          matrix_representation ( nonlin_op )   def test_matrix_representation_wrong_range ( ) :      class MyOp ( odl . Operator ) :          def __init__ ( self ) :              super ( MyOp , self ) . __init__ ( domain = odl . rn ( 3 ) , range = odl . rn ( 3 ) * odl . rn ( 3 ) ** 2 , linear = True )  def _call ( self , x , out ) :              return odl . rn ( np . random . rand ( 4 ) )   nonlin_op = MyOp ( ) with pytest . raises ( TypeError ) :          matrix_representation ( nonlin_op )   def test_power_method_opnorm_symm ( ) :      mat = np . array ( [ [ 10 , - 18 ] , [ 6 , - 11 ] ] , dtype = float ) op = odl . MatrixOperator ( mat ) true_opnorm = 2 opnorm_est = power_method_opnorm ( op ) assert opnorm_est == pytest . approx ( true_opnorm , rel = 1e-2 ) xstart = odl . rn ( 2 ) . element ( [ 0.8 , 0.5 ] ) opnorm_est = power_method_opnorm ( op , xstart = xstart ) assert opnorm_est == pytest . approx ( true_opnorm , rel = 1e-2 )  def test_power_method_opnorm_nonsymm ( ) :      mat = np . array ( [ [ - 1.52441557 , 5.04276365 ] , [ 1.90246927 , 2.54424763 ] , [ 5.32935411 , 0.04573162 ] ] ) op = odl . MatrixOperator ( mat ) true_opnorm = 6 xstart = odl . rn ( 2 ) . element ( [ 1 , 1 ] ) opnorm_est = power_method_opnorm ( op , xstart = xstart , maxiter = 50 ) assert opnorm_est == pytest . approx ( true_opnorm , rel = 1e-2 ) xstart = odl . rn ( 2 ) . element ( [ - 0.8 , 0.5 ] ) opnorm_est = power_method_opnorm ( op , xstart = xstart , maxiter = 6 ) assert opnorm_est == pytest . approx ( true_opnorm , rel = 1e-2 )  def test_power_method_opnorm_exceptions ( ) :      space = odl . rn ( 2 ) op = odl . IdentityOperator ( space ) with pytest . raises ( ValueError ) :          power_method_opnorm ( op , maxiter = 0 )  with pytest . raises ( ValueError ) :          power_method_opnorm ( op , maxiter = - 5 )  with pytest . raises ( ValueError ) :          power_method_opnorm ( op , maxiter = 2 , xstart = space . zero ( ) )  with pytest . raises ( ValueError ) :          op = odl . MatrixOperator ( [ [ 0. , 1. ] , [ 0. , 0. ] ] ) power_method_opnorm ( op , maxiter = 2 , xstart = op . domain . one ( ) )  with pytest . raises ( ValueError ) :          op = odl . MatrixOperator ( [ [ 1. , 2. , 3. ] , [ 4. , 5. , 6. ] ] ) power_method_opnorm ( op , maxiter = 1 , xstart = op . domain . one ( ) )   if __name__ == <str> :      odl . util . test_file ( __file__ )   