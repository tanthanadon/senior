from __future__ import division import numpy as np from packaging . version import parse as parse_version import pytest import odl from odl . tomo . backends import ASTRA_VERSION from odl . tomo . util . testutils import ( skip_if_no_astra , skip_if_no_astra_cuda , skip_if_no_skimage ) from odl . util . testutils import all_almost_equal , simple_fixture impl = simple_fixture ( name = <str> , params = [ skip_if_no_astra ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_skimage ( <str> ) ] ) geometry_params = [ <str> , <str> , <str> , <str> , <str> ] geometry_ids = [ <str> . format ( p ) for p in geometry_params ] @ pytest . fixture ( scope = <str> , ids = geometry_ids , params = geometry_params ) def geometry ( request ) :      geom = request . param m = 100 n_angles = 100 if geom == <str> :          apart = odl . uniform_partition ( 0 , np . pi , n_angles ) dpart = odl . uniform_partition ( - 30 , 30 , m ) return odl . tomo . Parallel2dGeometry ( apart , dpart )  elif geom == <str> :          apart = odl . uniform_partition ( 0 , np . pi , n_angles ) dpart = odl . uniform_partition ( [ - 30 , - 30 ] , [ 30 , 30 ] , ( m , m ) ) return odl . tomo . Parallel3dAxisGeometry ( apart , dpart )  elif geom == <str> :          apart = odl . uniform_partition ( 0 , 2 * np . pi , n_angles ) dpart = odl . uniform_partition ( - 30 , 30 , m ) return odl . tomo . FanFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 )  elif geom == <str> :          apart = odl . uniform_partition ( 0 , 2 * np . pi , n_angles ) dpart = odl . uniform_partition ( [ - 60 , - 60 ] , [ 60 , 60 ] , ( m , m ) ) return odl . tomo . ConeFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 )  elif geom == <str> :          apart = odl . uniform_partition ( 0 , 8 * 2 * np . pi , n_angles ) dpart = odl . uniform_partition ( [ - 30 , - 3 ] , [ 30 , 3 ] , ( m , m ) ) return odl . tomo . ConeFlatGeometry ( apart , dpart , pitch = 5.0 , src_radius = 200 , det_radius = 100 )  else :          raise ValueError ( <str> )   geometry_type = simple_fixture ( <str> , [ <str> , <str> , <str> , <str> ] ) projectors = [ skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_astra_cuda ( <str> ) , skip_if_no_skimage ( <str> ) , skip_if_no_skimage ( <str> ) ] projector_ids = [ <str> <str> . format ( * p . args [ 1 ] . split ( ) ) for p in projectors ] @ pytest . fixture ( scope = <str> , params = projectors , ids = projector_ids ) def projector ( request ) :      n = 100 m = 100 n_angles = 100 dtype = <str> geom , impl , angle = request . param . split ( ) if angle == <str> :          apart = odl . uniform_partition ( 0 , 2 * np . pi , n_angles )  elif angle == <str> :          apart = odl . uniform_partition ( 0 , np . pi , n_angles )  elif angle == <str> :          min_pt = 2 * ( 2.0 * np . pi ) / n_angles max_pt = ( 2.0 * np . pi ) - 2 * ( 2.0 * np . pi ) / n_angles points = np . linspace ( min_pt , max_pt , n_angles ) points += np . random . rand ( n_angles ) * ( max_pt - min_pt ) / ( 5 * n_angles ) apart = odl . nonuniform_partition ( points )  elif angle == <str> :          min_pt = 2 * ( 2.0 * np . pi ) / n_angles max_pt = ( 2.0 * np . pi ) - 2 * ( 2.0 * np . pi ) / n_angles points = np . linspace ( min_pt ** 0.5 , max_pt ** 0.5 , n_angles ) ** 2 apart = odl . nonuniform_partition ( points )  else :          raise ValueError ( <str> )  if geom == <str> :          reco_space = odl . uniform_discr ( [ - 20 ] * 2 , [ 20 ] * 2 , [ n ] * 2 , dtype = dtype ) dpart = odl . uniform_partition ( - 30 , 30 , m ) geom = odl . tomo . Parallel2dGeometry ( apart , dpart ) return odl . tomo . RayTransform ( reco_space , geom , impl = impl )  elif geom == <str> :          reco_space = odl . uniform_discr ( [ - 20 ] * 3 , [ 20 ] * 3 , [ n ] * 3 , dtype = dtype ) dpart = odl . uniform_partition ( [ - 30 ] * 2 , [ 30 ] * 2 , [ m ] * 2 ) geom = odl . tomo . Parallel3dAxisGeometry ( apart , dpart ) return odl . tomo . RayTransform ( reco_space , geom , impl = impl )  elif geom == <str> :          reco_space = odl . uniform_discr ( [ - 20 ] * 2 , [ 20 ] * 2 , [ n ] * 2 , dtype = dtype ) dpart = odl . uniform_partition ( - 30 , 30 , m ) geom = odl . tomo . FanFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 ) return odl . tomo . RayTransform ( reco_space , geom , impl = impl )  elif geom == <str> :          reco_space = odl . uniform_discr ( [ - 20 ] * 3 , [ 20 ] * 3 , [ n ] * 3 , dtype = dtype ) dpart = odl . uniform_partition ( [ - 60 ] * 2 , [ 60 ] * 2 , [ m ] * 2 ) geom = odl . tomo . ConeFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 ) return odl . tomo . RayTransform ( reco_space , geom , impl = impl )  elif geom == <str> :          reco_space = odl . uniform_discr ( [ - 20 , - 20 , 0 ] , [ 20 , 20 , 40 ] , [ n ] * 3 , dtype = dtype ) apart = odl . uniform_partition ( 0 , 8 * 2 * np . pi , n_angles ) dpart = odl . uniform_partition ( [ - 30 , - 3 ] , [ 30 , 3 ] , [ m ] * 2 ) geom = odl . tomo . ConeFlatGeometry ( apart , dpart , pitch = 5.0 , src_radius = 200 , det_radius = 100 ) return odl . tomo . RayTransform ( reco_space , geom , impl = impl )  else :          raise ValueError ( <str> )   @ pytest . fixture ( scope = <str> , params = [ True , False ] , ids = [ <str> , <str> ] ) def in_place ( request ) :      return request . param  def test_projector ( projector , in_place ) :      rtol = 1e-1 vol = projector . domain . one ( ) if in_place :          proj = projector . range . zero ( ) projector ( vol , out = proj )  else :          proj = projector ( vol )  expected_max = projector . domain . partition . extent [ 0 ] * np . sqrt ( 2 ) assert proj . ufuncs . max ( ) == pytest . approx ( expected_max , rel = rtol )  def test_adjoint ( projector ) :      if ( parse_version ( ASTRA_VERSION ) < parse_version ( <str> ) and isinstance ( projector . geometry , odl . tomo . ConeFlatGeometry ) ) :          rtol = 0.1  else :          rtol = 0.05  vol = odl . phantom . shepp_logan ( projector . domain , modified = True ) proj = projector ( vol ) backproj = projector . adjoint ( proj ) result_AxAx = proj . inner ( proj ) result_xAtAx = backproj . inner ( vol ) assert result_AxAx == pytest . approx ( result_xAtAx , rel = rtol )  def test_adjoint_of_adjoint ( projector ) :      vol = odl . phantom . shepp_logan ( projector . domain , modified = True ) proj = projector ( vol ) proj_adj_adj = projector . adjoint . adjoint ( vol ) assert all_almost_equal ( proj , proj_adj_adj ) proj_adj = projector . adjoint ( proj ) proj_adj_adj_adj = projector . adjoint . adjoint . adjoint ( proj ) assert all_almost_equal ( proj_adj , proj_adj_adj_adj )  def test_angles ( projector ) :      vol = projector . domain . element ( lambda x : np . exp ( - ( 2 * x [ 0 ] - 10 + x [ 1 ] ) ** 2 ) ) result = projector ( vol ) . asarray ( ) axes = 1 if projector . domain . ndim == 2 else ( 1 , 2 ) ind_angle = np . argmax ( np . max ( result , axis = axes ) ) maximum_angle = np . fmod ( projector . geometry . angles [ ind_angle ] , 2 * np . pi ) expected = np . arctan2 ( 1 , 2 ) assert np . fmod ( maximum_angle , np . pi ) == pytest . approx ( expected , abs = 0.1 ) axes = ( ) if projector . domain . ndim == 2 else 1 ind_pixel = np . argmax ( np . max ( result [ ind_angle ] , axis = axes ) ) max_pixel = projector . geometry . det_partition [ ind_pixel , ... ] . mid_pt [ 0 ] expected = 2 * np . sqrt ( 5 ) if maximum_angle < np . pi else - 2 * np . sqrt ( 5 ) if isinstance ( projector . geometry , odl . tomo . DivergentBeamGeometry ) :          src_to_det = ( projector . geometry . src_radius + projector . geometry . det_radius ) magnification = src_to_det / projector . geometry . src_radius expected *= magnification  assert max_pixel == pytest . approx ( expected , abs = 0.2 )  def test_complex ( impl ) :      space_c = odl . uniform_discr ( [ - 1 , - 1 ] , [ 1 , 1 ] , ( 10 , 10 ) , dtype = <str> ) space_r = space_c . real_space geom = odl . tomo . parallel_beam_geometry ( space_c ) ray_trafo_c = odl . tomo . RayTransform ( space_c , geom , impl = impl ) ray_trafo_r = odl . tomo . RayTransform ( space_r , geom , impl = impl ) vol = odl . phantom . shepp_logan ( space_c ) vol . imag = odl . phantom . cuboid ( space_r ) data = ray_trafo_c ( vol ) true_data_re = ray_trafo_r ( vol . real ) true_data_im = ray_trafo_r ( vol . imag ) assert all_almost_equal ( data . real , true_data_re ) assert all_almost_equal ( data . imag , true_data_im )  def test_anisotropic_voxels ( geometry ) :      ndim = geometry . ndim shape = [ 10 ] * ( ndim - 1 ) + [ 5 ] space = odl . uniform_discr ( [ - 1 ] * ndim , [ 1 ] * ndim , shape = shape , dtype = <str> ) if ndim == 2 and not odl . tomo . ASTRA_AVAILABLE :          pytest . skip ( msg = <str> )  elif ndim == 3 and not odl . tomo . ASTRA_CUDA_AVAILABLE :          pytest . skip ( msg = <str> )  ray_trafo = odl . tomo . RayTransform ( space , geometry ) vol_one = ray_trafo . domain . one ( ) data_one = ray_trafo . range . one ( ) if ndim == 2 :          with pytest . raises ( NotImplementedError ) :              ray_trafo ( vol_one )  with pytest . raises ( NotImplementedError ) :              ray_trafo . adjoint ( data_one )   elif ndim == 3 :          data = ray_trafo ( vol_one ) backproj = ray_trafo . adjoint ( data_one ) assert data . norm ( ) > 0 assert backproj . norm ( ) > 0  else :          assert False   def test_shifted_volume ( geometry_type ) :      apart = odl . nonuniform_partition ( [ 0 , np . pi / 2 , np . pi , 3 * np . pi / 2 ] ) if geometry_type == <str> and odl . tomo . ASTRA_AVAILABLE :          ndim = 2 dpart = odl . uniform_partition ( - 30 , 30 , 30 ) geometry = odl . tomo . Parallel2dGeometry ( apart , dpart )  elif geometry_type == <str> and odl . tomo . ASTRA_CUDA_AVAILABLE :          ndim = 3 dpart = odl . uniform_partition ( [ - 30 , - 30 ] , [ 30 , 30 ] , ( 30 , 30 ) ) geometry = odl . tomo . Parallel3dAxisGeometry ( apart , dpart )  if geometry_type == <str> and odl . tomo . ASTRA_AVAILABLE :          ndim = 2 dpart = odl . uniform_partition ( - 30 , 30 , 30 ) geometry = odl . tomo . FanFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 )  elif geometry_type == <str> and odl . tomo . ASTRA_CUDA_AVAILABLE :          ndim = 3 dpart = odl . uniform_partition ( [ - 30 , - 30 ] , [ 30 , 30 ] , ( 30 , 30 ) ) geometry = odl . tomo . ConeFlatGeometry ( apart , dpart , src_radius = 200 , det_radius = 100 )  else :          pytest . skip ( <str> )  min_pt = np . array ( [ - 5.0 ] * ndim ) max_pt = np . array ( [ 5.0 ] * ndim ) shift_len = 6 shift = np . zeros ( ndim ) shift [ 0 ] = - shift_len space = odl . uniform_discr ( min_pt + shift , max_pt + shift , [ 10 ] * ndim ) ray_trafo = odl . tomo . RayTransform ( space , geometry ) proj = ray_trafo ( space . one ( ) ) assert np . max ( proj [ 0 , : 15 ] ) > 5 assert np . max ( proj [ 0 , 15 : ] ) == 0 assert np . max ( proj [ 1 , : 15 ] ) > 5 assert np . max ( proj [ 1 , 15 : ] ) > 5 assert np . max ( proj [ 2 , : 15 ] ) == 0 assert np . max ( proj [ 2 , 15 : ] ) > 5 assert np . max ( proj [ 3 , : 15 ] ) > 5 assert np . max ( proj [ 3 , 15 : ] ) > 5 shift = np . zeros ( ndim ) shift [ 1 ] = - shift_len space = odl . uniform_discr ( min_pt + shift , max_pt + shift , [ 10 ] * ndim ) ray_trafo = odl . tomo . RayTransform ( space , geometry ) proj = ray_trafo ( space . one ( ) ) assert np . max ( proj [ 0 , : 15 ] ) > 5 assert np . max ( proj [ 0 , 15 : ] ) > 5 assert np . max ( proj [ 1 , : 15 ] ) > 5 assert np . max ( proj [ 1 , 15 : ] ) == 0 assert np . max ( proj [ 2 , : 15 ] ) > 5 assert np . max ( proj [ 2 , 15 : ] ) > 5 assert np . max ( proj [ 3 , : 15 ] ) == 0 assert np . max ( proj [ 3 , 15 : ] ) > 5  if __name__ == <str> :      odl . util . test_file ( __file__ )   