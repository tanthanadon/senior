import sys , os sys . path . append ( os . path . abspath ( <str> ) ) import deep . tools as tools import deep . convnet import utils . actions . read import basic . external PREPROC_DICT = { <str> : tools . ImgPreproc2D , <str> : tools . ImgPreprocProj } class FeatSeq ( object ) :      def __init__ ( self , conv ) :          self . conv = conv  def __call__ ( self , action ) :          if ( type ( action ) != utils . actions . Action ) :              raise Exception ( <str> + str ( type ( action ) ) )  return [ self . conv ( img_i ) for img_i in action . img_seq ]   def make_feat_seq ( nn_path , prep_type = <str> , text_feat = False ) :      if ( text_feat ) :          feat_extr = basic . external . read_external ( nn_path )  else :          feat_extr = read_convnet ( nn_path , prep_type )  return FeatSeq ( feat_extr )  def read_convnet ( nn_path , prep_type = <str> ) :      preproc_method = PREPROC_DICT [ prep_type ] preproc = preproc_method ( ) nn_reader = deep . reader . NNReader ( preproc ) convnet = nn_reader ( nn_path , 0.0 ) return convnet  def read_actions ( cat_path , action_type = <str> ) :      action_reader = utils . actions . read . ReadActions ( action_type , norm = True ) actions = action_reader ( cat_path ) return actions  if __name__ == <str> :      nn_path = <str> full = make_feat_seq ( nn_path )    