import sys , os sys . path . append ( os . path . abspath ( <str> ) ) import utils . paths import deep . convnet , deep . tools import utils . actions . read class MakeFeats ( object ) :      def __init__ ( self , preproc_type = <str> , extractor_type = <str> , dataset_format = <str> ) :          self . dataset_format = dataset_format self . preproc_type = preproc_type self . extractor_type = extractor_type  def __call__ ( self , img_path , out_path , feat_path = None ) :          preproc = deep . tools . ImgPreproc2D ( ) extractor = deep . convnet . get_model ( 10 , preproc , feat_path , compile = True , model_p = 0.5 ) read_actions = utils . actions . read . ReadActions ( dataset_format ) actions = read_actions ( in_path ) new_actions = [ action_i . transform ( extractor , False ) for action_i in actions ] save_actions = utils . actions . read . SaveActions ( img_actions = False ) save_actions ( out_path )   if __name__ == <str> :      img_path = <str> out_path = <str> feat_path = <str> make_feats = MakeFeats ( ) make_feats ( img_path , out_path , feat_path )   