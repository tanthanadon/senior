import allcells_test055 as allcells from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt SAMPLING_RATE = 30000.0 outputDir = <str> nameOfFile = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> tetrodeID = <str> baseRange = [ - 0.050 , - 0.025 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] responseTimeRange = [ - 0.1 , 0.1 ] responseTime = responseTimeRange [ 1 ] - responseTimeRange [ 0 ] binEdges = np . arange ( - 3 , 4 ) * binTime finalOutputDir = outputDir + <str> + subject + <str> text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) firstPass = True for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          print oneCell . behavSession subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) if ( not firstPass ) :              for Frequency in range ( numberOfFrequencies ) :                  text_file . write ( <str> % possibleFreq [ Frequency ] ) for cellVal in maxZFreq [ Frequency ] :                      text_file . write ( <str> % cellVal ) text_file . write ( <str> )    else :              firstPass = False  maxZFreq = [ [ ] for i in range ( numberOfFrequencies ) ] text_file . write ( <str> % behavSession )  for Frequency in range ( numberOfFrequencies ) :          Freq = possibleFreq [ Frequency ] oneFreqTrials = bdata [ <str> ] == Freq oneFreqEventOnsetTimes = eventOnsetTimes [ oneFreqTrials ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , oneFreqEventOnsetTimes , timeRange ) [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) maxZFreq [ Frequency ] . append ( maxZ )   for Frequency in range ( numberOfFrequencies ) :      text_file . write ( <str> % possibleFreq [ Frequency ] ) for cellVal in maxZFreq [ Frequency ] :          text_file . write ( <str> % cellVal ) text_file . write ( <str> )   text_file . close ( )  