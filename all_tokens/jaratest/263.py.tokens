import os import sys import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox . test . lan import behavioranalysis_vlan as behavioranalysis reload ( behavioranalysis ) from jaratoolbox import extraplots from jaratoolbox import loadbehavior from jaratoolbox import settings reload ( settings ) from jaratoolbox import colorpalette import matplotlib . lines as mlines EXPERIMENTER = <str> subjects = [ <str> ] FREQCOLORS = [ colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] , <str> , <str> , <str> ] if len ( sys . argv ) > 1 :      sessions = sys . argv [ 1 : ]  nSessions = len ( sessions ) nAnimals = len ( subjects ) loadingClass = loadbehavior . FlexCategBehaviorData paradigm = <str> gs = gridspec . GridSpec ( nSessions * nAnimals , 1 ) gs . update ( hspace = 0.5 , wspace = 0.4 ) plt . clf ( ) for inds , thisSession in enumerate ( sessions ) :      for inda , animalName in enumerate ( subjects ) :          try :              behavFile = loadbehavior . path_to_behavior_data ( animalName , EXPERIMENTER , paradigm , thisSession ) behavData = loadingClass ( behavFile , readmode = <str> )  except IOError :              print thisSession + <str> continue  print <str> % ( animalName , thisSession ) targetFrequency = behavData [ <str> ] choice = behavData [ <str> ] valid = behavData [ <str> ] & ( choice != behavData . labels [ <str> ] [ <str> ] ) choiceRight = choice == behavData . labels [ <str> ] [ <str> ] currentBlock = behavData [ <str> ] behavData . find_trials_each_block ( ) trialsEachBlock = behavData . blocks [ <str> ] nBlocks = behavData . blocks [ <str> ] thisAnimalPos = 1 * inda * nSessions thisPlotPos = thisAnimalPos + 1 * inds ax1 = plt . subplot ( gs [ thisPlotPos ] ) fontsize = 12 allPline = [ ] legendLabels = [ ] for block in range ( nBlocks ) :              targetFrequencyThisBlock = targetFrequency [ trialsEachBlock [ : , block ] ] validThisBlock = valid [ trialsEachBlock [ : , block ] ] choiceRightThisBlock = choiceRight [ trialsEachBlock [ : , block ] ] ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRightThisBlock , targetFrequencyThisBlock , validThisBlock ) ( pline , pcaps , pbars , pdots ) = extraplots . plot_psychometric ( 1e-3 * possibleValues , fractionHitsEachValue , ciHitsEachValue , xTickPeriod = 1 ) plt . setp ( ( pline , pcaps , pbars ) , color = FREQCOLORS [ block ] ) plt . setp ( pdots , mfc = FREQCOLORS [ block ] , mec = FREQCOLORS [ block ] ) legendLabels . append ( <str> % ( block + 1 ) ) allPline . append ( pline ) legend = plt . legend ( allPline , legendLabels , loc = 2 ) ax = plt . gca ( ) . add_artist ( legend ) plt . hold ( True ) if block == nBlocks - 1 :                  plt . xlabel ( <str> , fontsize = fontsize ) plt . ylabel ( <str> , fontsize = fontsize ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontsize )  plt . show ( )  plt . title ( <str> % ( animalName , thisSession ) )  outputDir = <str> animalStr = <str> . join ( subjects ) sessionStr = <str> . join ( sessions ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( animalStr , sessionStr , figformat ) fullFileName = os . path . join ( outputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )   