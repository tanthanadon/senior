from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.2 , 0.8 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> outputDir = <str> numOfCells = len ( allcells . cellDB ) baseRange = [ - 0.050 , - 0.025 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] responseTimeRange = [ - 0.1 , 0.1 ] responseTime = responseTimeRange [ 1 ] - responseTimeRange [ 0 ] binEdges = np . arange ( - 8 , 24 ) * binTime behavSession = <str> for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] tetrode = oneCell . tetrode cluster = oneCell . cluster try :          if ( behavSession != oneCell . behavSession ) :              subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print oneCell . behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) print <str> , numberOfTrials ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] print <str> , len ( eventOnsetTimes ) possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) validTrials = ( ( bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] ) | ( bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] ) )  for Frequency in range ( numberOfFrequencies ) :              Freq = possibleFreq [ Frequency ] oneFreqTrials = bdata [ <str> ] == Freq trialsToUse = ( oneFreqTrials & validTrials ) oneFreqEventOnsetTimes = eventOnsetTimes [ trialsToUse ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , oneFreqEventOnsetTimes , timeRange ) plt . clf ( ) ax1 = plt . subplot ( 2 , 1 , 1 ) plt . plot ( spikeTimesFromEventOnset , trialIndexForEachSpike , <str> ) baseRange = [ - 0.050 , - 0.025 ] rangeLength = np . diff ( baseRange ) binEdges = np . arange ( - 8 , 24 ) * rangeLength [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) print <str> . format ( maxZ ) ax2 = plt . subplot ( 2 , 1 , 2 , sharex = ax1 ) plt . axhline ( 0 , ls = <str> , color = <str> ) plt . axhline ( + 3 , ls = <str> , color = <str> ) plt . axhline ( - 3 , ls = <str> , color = <str> ) plt . step ( binEdges [ : - 1 ] , zStat , where = <str> , lw = 2 ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) nameFreq = str ( Freq ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , nameFreq , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :                  os . makedirs ( directory )  print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )   except :          print <str> + oneCell . behavSession    