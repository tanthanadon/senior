import numpy as np import matplotlib . pyplot as plt from scipy . spatial import Delaunay import itertools import allcells_test055 as allcells from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots class ClusterCutter ( object ) :      def __init__ ( self , animalName , ephysSession , tetrode , cluster ) :          self . animalName = animalName self . ephysSession = ephysSession self . tetrode = tetrode self . cluster = cluster self . featureNames = [ <str> , <str> , <str> ] self . dataDir = os . path . join ( settings . EPHYS_PATH , self . animalName , self . ephysSession ) self . tetrodeFile = os . path . join ( self . dataDir , <str> . format ( self . tetrode ) ) self . dataTT = None self . featureValues = None self . create_fet_files ( ) self . points = self . featureValues [ : , 0 : 4 ] self . numDims = self . points . shape [ 1 ] self . combinations = [ c for c in itertools . combinations ( range ( self . numDims ) , 2 ) ] self . maxDim = len ( self . combinations ) - 1 self . dimNumber = 0 self . inCluster = np . ones ( len ( self . points ) , dtype = bool ) self . outsideCluster = np . logical_not ( self . inCluster ) self . oldInsideCluster = self . inCluster self . oldOutsideCluster = self . outsideCluster self . fig = plt . figure ( ) self . ax = self . fig . add_subplot ( 111 ) self . draw_dimension ( self . dimNumber ) self . mpid = self . fig . canvas . mpl_connect ( <str> , self . on_click ) self . mouseClickData = [ ] self . kpid = self . fig . canvas . mpl_connect ( <str> , self . on_key_press ) plt . show ( )  def on_click ( self , event ) :          self . mouseClickData . append ( [ event . xdata , event . ydata ] ) self . ax . plot ( event . xdata , event . ydata , <str> ) self . fig . canvas . draw ( )  def on_key_press ( self , event ) :          if event . key == <str> :              if len ( self . mouseClickData ) > 2 :                  hullArray = np . array ( self . mouseClickData ) self . cut_cluster ( self . points [ : , self . combinations [ self . dimNumber ] ] , hullArray ) self . draw_dimension ( self . dimNumber ) self . mouseClickData = [ ]  else :                  pass   if event . key == <str> :              self . mouseClickData = [ ] self . inCluster = self . oldInsideCluster self . outsideCluster = self . oldOutsideCluster self . draw_dimension ( self . dimNumber )  elif event . key == <str> :              if self . dimNumber > 0 :                  self . dimNumber -= 1  else :                  self . dimNumber = self . maxDim  self . draw_dimension ( self . dimNumber )  elif event . key == <str> :              if self . dimNumber < self . maxDim :                  self . dimNumber += 1  else :                  self . dimNumber = 0  self . draw_dimension ( self . dimNumber )   def draw_dimension ( self , dimNumber ) :          self . ax . cla ( ) self . mouseClickData = [ ] dim0 = self . combinations [ self . dimNumber ] [ 0 ] dim1 = self . combinations [ self . dimNumber ] [ 1 ] self . ax . plot ( self . points [ : , dim0 ] [ self . inCluster ] , self . points [ : , dim1 ] [ self . inCluster ] , <str> ) self . ax . plot ( self . points [ : , dim0 ] [ self . outsideCluster ] , self . points [ : , dim1 ] [ self . outsideCluster ] , marker = <str> , color = <str> , linestyle = <str> ) self . ax . set_xlabel ( <str> . format ( dim0 ) ) self . ax . set_ylabel ( <str> . format ( dim1 ) ) plt . title ( <str> ) self . fig . canvas . draw ( )  def cut_cluster ( self , points , hull ) :          if not isinstance ( hull , Delaunay ) :              hull = Delaunay ( hull )  self . oldInsideCluster = self . inCluster self . oldOutsideCluster = self . outsideCluster inHull = hull . find_simplex ( points ) >= 0 newInsidePoints = self . inCluster & inHull self . inCluster = newInsidePoints self . outsideCluster = np . logical_not ( self . inCluster )  def load_waveforms ( self ) :          print <str> self . dataTT = loadopenephys . DataSpikes ( self . tetrodeFile ) self . nSpikes = self . dataTT . nRecords self . dataTT . samples = self . dataTT . samples . astype ( float ) - 2 ** 15 self . dataTT . samples = ( 1000.0 / self . dataTT . gain [ 0 , 0 ] ) * self . dataTT . samples self . dataTT . timestamps = self . dataTT . timestamps / self . dataTT . samplingRate  def create_fet_files ( self ) :          self . load_waveforms ( ) self . featureValues = self . calculate_features ( self . dataTT . samples , self . featureNames )  def calculate_features ( self , waveforms , featureNames ) :          nFeatures = len ( featureNames ) [ nSpikes , nChannels , nSamples ] = waveforms . shape featureValues = np . empty ( ( nSpikes , 0 ) , dtype = float ) for oneFeature in featureNames :              print <str> . format ( oneFeature ) if oneFeature == <str> :                  theseValues = waveforms . max ( axis = 2 ) featureValues = np . hstack ( ( featureValues , theseValues ) )  elif oneFeature == <str> :                  theseValues = waveforms . min ( axis = 2 ) featureValues = np . hstack ( ( featureValues , theseValues ) )  if oneFeature == <str> :                  theseValues = np . sqrt ( np . sum ( waveforms . astype ( float ) ** 2 , axis = 2 ) ) featureValues = np . hstack ( ( featureValues , theseValues ) )   return featureValues   if __name__ == <str> :      SAMPLING_RATE = 30000.0 outputDir = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = <str> behavSession = <str> ephysSession = <str> for cellID in range ( 0 , numOfCells ) :          oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :              subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq )  tetrode = oneCell . tetrode cluster = oneCell . cluster clusterObj = ClusterCutter ( subject , ephysSession , tetrode , cluster ) raw_input ( <str> )    