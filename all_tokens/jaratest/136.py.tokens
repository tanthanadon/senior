from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from jaratoolbox import behavioranalysis import matplotlib . pyplot as plt import sys import importlib if sys . argv [ 1 ] == <str> :      countTimeRange = [ int ( sys . argv [ 1 ] ) , float ( sys . argv [ 2 ] ) ]  elif sys . argv [ 2 ] == <str> :      countTimeRange = [ float ( sys . argv [ 1 ] ) , int ( sys . argv [ 2 ] ) ]  else :      countTimeRange = [ float ( sys . argv [ 1 ] ) , float ( sys . argv [ 2 ] ) ]  mouseNameList = sys . argv [ 3 : ] SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 binWidth = 0.020 clusNum = 12 numTetrodes = 8 timeRange = [ - 0.2 , 0.8 ] outputDir = <str> class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    for mouseName in mouseNameList :      allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) subject = allcells . cellDB [ 0 ] . animalName ephysRootDir = settings . EPHYS_PATH window = str ( countTimeRange [ 0 ] ) + <str> + str ( countTimeRange [ 1 ] ) + <str> nameOfmodSFile = <str> + window + mouseName nameOfmodIFile = <str> + window + mouseName finalOutputDir = outputDir + <str> + subject + <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) print numOfCells behavSession = <str> modIList = [ ] try :          modI_file = open ( <str> % ( finalOutputDir , nameOfmodIFile ) , <str> ) behavName = <str> for line in modI_file :              behavLine = line . split ( <str> ) if ( behavLine [ 0 ] == <str> ) :                  behavName = behavLine [ 1 ] [ : - 1 ] modIList . append ( behavName )    except :          modI_file = open ( <str> % ( finalOutputDir , nameOfmodIFile ) , <str> )  try :          modSig_file = open ( <str> % ( finalOutputDir , nameOfmodSFile ) , <str> )  except :          modSig_file = open ( <str> % ( finalOutputDir , nameOfmodSFile ) , <str> )  badSessionList = [ ] behavSession = <str> modIndexArray = [ ] modIDict = nestedDict ( ) modSigDict = nestedDict ( ) for cellID in range ( 0 , numOfCells ) :          oneCell = allcells . cellDB [ cellID ] if ( oneCell . behavSession in modIList ) :              continue  try :              if ( behavSession != oneCell . behavSession ) :                  subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) soundOnsetTimeBehav = bdata [ <str> ] ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventTimes [ soundOnsetEvents ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) EventOnsetTimes = eventTimes [ soundOnsetEvents ] diffTimes = bdata [ <str> ] - bdata [ <str> ] EventOnsetTimes += diffTimes rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct modIDict [ behavSession ] = np . zeros ( [ clusNum * numTetrodes ] ) modSigDict [ behavSession ] = np . ones ( [ clusNum * numTetrodes ] )  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps clusterNumber = ( oneCell . tetrode - 1 ) * clusNum + ( oneCell . cluster - 1 ) trialsEachCond = [ correctRightward , correctLeftward ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , EventOnsetTimes , timeRange ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , countTimeRange ) spikeCountEachTrial = spikeCountMat . flatten ( ) spikeAvgLeftward = sum ( spikeCountEachTrial [ correctLeftward ] ) / float ( sum ( correctLeftward ) ) spikeAvgRightward = sum ( spikeCountEachTrial [ correctRightward ] ) / float ( sum ( correctRightward ) ) if ( ( spikeAvgRightward + spikeAvgLeftward ) == 0 ) :                  modIDict [ behavSession ] [ clusterNumber ] = 0.0 modSigDict [ behavSession ] [ clusterNumber ] = 1.0  else :                  modIDict [ behavSession ] [ clusterNumber ] = ( ( spikeAvgRightward - spikeAvgLeftward ) / ( spikeAvgRightward + spikeAvgLeftward ) ) modSig = spikesanalysis . evaluate_modulation ( spikeTimesFromEventOnset , indexLimitsEachTrial , countTimeRange , trialsEachCond ) modSigDict [ behavSession ] [ clusterNumber ] = modSig [ 1 ]   except :              if ( oneCell . behavSession not in badSessionList ) :                  badSessionList . append ( oneCell . behavSession )    bSessionList = [ ] for bSession in modIDict :          if ( bSession not in badSessionList ) :              bSessionList . append ( bSession )   bSessionList . sort ( ) for bSession in bSessionList :          modI_file . write ( <str> % bSession ) for modInd in modIDict [ bSession ] :              modI_file . write ( <str> % modInd )  modI_file . write ( <str> ) modSig_file . write ( <str> % bSession ) for modSig in modSigDict [ bSession ] :              modSig_file . write ( <str> % modSig )  modSig_file . write ( <str> )  modI_file . close ( ) modSig_file . close ( ) print <str> for badSes in badSessionList :          print badSes  print <str>   