from jaratoolbox import loadopenephys from jaratoolbox import spikesorting reload ( spikesorting ) from matplotlib import pyplot as plt import imp import sys print sys . argv [ 0 ] if len ( sys . argv ) > 1 :      tetrode = int ( sys . argv [ 1 ] )  else :      tetrode = 3  subject = <str> ephysSession = <str> srate = 30000.0 ttdata = spikesorting . TetrodeToCluster ( subject , ephysSession , tetrode ) ttdata . load_waveforms ( ) ttdata . set_clusters_from_file ( ) plt . clf ( ) for cluster in range ( 1 , 7 ) :      indsThisCluster = ( ttdata . clusters == cluster ) onettwaveforms = ttdata . samples [ indsThisCluster , : , : ] ( peakTimes , peakAmplitudes , spikeShape , spikeShapeSD ) = spikesorting . estimate_spike_peaks ( onettwaveforms , srate ) shapeQuality = abs ( peakAmplitudes [ 1 ] / spikeShapeSD . mean ( ) ) print <str> . format ( cluster , shapeQuality ) nSamples = len ( spikeShape ) plt . subplot ( 6 , 1 , cluster ) plt . hold ( 1 ) plt . fill_between ( range ( nSamples ) , spikeShape + spikeShapeSD , spikeShape - spikeShapeSD , color = <str> ) plt . plot ( spikeShape , <str> ) plt . hold ( 0 ) plt . show ( )   