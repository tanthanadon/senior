import numpy as np import matplotlib . pyplot as plt from scipy . spatial import Delaunay import itertools class ClusterCutter ( object ) :      def __init__ ( self , points ) :          plt . close ( <str> ) self . points = points self . numDims = self . points . shape [ 1 ] self . combinations = [ c for c in itertools . combinations ( range ( self . numDims ) , 2 ) ] self . maxDim = len ( self . combinations ) - 1 self . dimNumber = 0 self . inCluster = np . ones ( len ( self . points ) , dtype = bool ) self . outsideCluster = np . logical_not ( self . inCluster ) self . oldInsideCluster = self . inCluster self . oldOutsideCluster = self . outsideCluster self . fig = plt . figure ( ) self . ax = self . fig . add_subplot ( 111 ) self . draw_dimension ( self . dimNumber ) self . mpid = self . fig . canvas . mpl_connect ( <str> , self . on_click ) self . mouseClickData = [ ] self . kpid = self . fig . canvas . mpl_connect ( <str> , self . on_key_press ) plt . show ( )  def on_click ( self , event ) :          self . mouseClickData . append ( [ event . xdata , event . ydata ] ) self . ax . plot ( event . xdata , event . ydata , <str> ) self . fig . canvas . draw ( )  def on_key_press ( self , event ) :          if event . key == <str> :              if len ( self . mouseClickData ) > 2 :                  hullArray = np . array ( self . mouseClickData ) self . cut_cluster ( self . points [ : , self . combinations [ self . dimNumber ] ] , hullArray ) self . draw_dimension ( self . dimNumber ) self . mouseClickData = [ ]  else :                  pass   if event . key == <str> :              self . mouseClickData = [ ] self . inCluster = self . oldInsideCluster self . outsideCluster = self . oldOutsideCluster self . draw_dimension ( self . dimNumber )  elif event . key == <str> :              if self . dimNumber > 0 :                  self . dimNumber -= 1  else :                  self . dimNumber = self . maxDim  self . draw_dimension ( self . dimNumber )  elif event . key == <str> :              if self . dimNumber < self . maxDim :                  self . dimNumber += 1  else :                  self . dimNumber = 0  self . draw_dimension ( self . dimNumber )   def draw_dimension ( self , dimNumber ) :          self . ax . cla ( ) self . mouseClickData = [ ] dim0 = self . combinations [ self . dimNumber ] [ 0 ] dim1 = self . combinations [ self . dimNumber ] [ 1 ] self . ax . plot ( self . points [ : , dim0 ] [ self . inCluster ] , self . points [ : , dim1 ] [ self . inCluster ] , <str> ) self . ax . plot ( self . points [ : , dim0 ] [ self . outsideCluster ] , self . points [ : , dim1 ] [ self . outsideCluster ] , marker = <str> , color = <str> , linestyle = <str> ) self . ax . set_xlabel ( <str> . format ( dim0 ) ) self . ax . set_ylabel ( <str> . format ( dim1 ) ) plt . title ( <str> ) self . fig . canvas . draw ( )  def cut_cluster ( self , points , hull ) :          if not isinstance ( hull , Delaunay ) :              hull = Delaunay ( hull )  self . oldInsideCluster = self . inCluster self . oldOutsideCluster = self . outsideCluster inHull = hull . find_simplex ( points ) >= 0 newInsidePoints = self . inCluster & inHull self . inCluster = newInsidePoints self . outsideCluster = np . logical_not ( self . inCluster )  def output_cut_points ( self ) :          return self . inCluster   if __name__ == <str> :      mean = [ 1 , 1 , 1 , 1 ] cov = np . random . random ( [ 4 , 4 ] ) data = np . random . multivariate_normal ( mean , cov , 1000 ) cw = ClusterCutter ( data )   