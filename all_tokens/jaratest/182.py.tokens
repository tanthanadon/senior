class tetLength ( object ) :      def __init__ ( self , animalName , ap_coord , ml_coord , brain_side , tetrodeLengthList = [ ] , depth_range_striatum = [ ] ) :          self . animalName = animalName self . tetrodeLengthList = tetrodeLengthList self . depth_range_striatum = depth_range_striatum self . ap_coord = ap_coord self . ml_coord = ml_coord self . brain_side = brain_side   class tetDatabase ( list ) :      def __init__ ( self ) :          super ( tetDatabase , self ) . __init__ ( )  def append_animal ( self , tetInfo ) :          self . append ( tetInfo )  def findAllTetLength ( self , mouseName ) :          for ind , animal in enumerate ( self ) :              if animal . animalName == mouseName :                  return animal . tetrodeLengthList   return None  def findOneTetLength ( self , mouseName , tetrode , longestTetDepth ) :          for ind , animal in enumerate ( self ) :              if animal . animalName == mouseName :                  return ( longestTetDepth - animal . tetrodeLengthList [ tetrode - 1 ] )   return None  def striatumRange ( self , mouseName ) :          range = [ ] for ind , animal in enumerate ( self ) :              if animal . animalName == mouseName :                   range = animal . depth_range_striatum   return range  def isInStriatum ( self , mouseName , tetrode , longestTetDepth ) :          if tetrode not in range ( 1 , 9 ) :              return False  for ind , animal in enumerate ( self ) :              if animal . animalName == mouseName :                  curDepth = ( longestTetDepth - animal . tetrodeLengthList [ tetrode - 1 ] ) if ( animal . depth_range_striatum [ 0 ] <= curDepth <= animal . depth_range_striatum [ 1 ] ) and ( animal . ap_coord > 0 ) :                      return True  else :                      return False    return None    