from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis import numpy as np from pylab import * import os SAMPLING_RATE = 30000.0 timeRange = [ - 0.4 , 0.5 ] timeRange = [ - 0.3 , 1 ] ephysRoot = <str> ephysSession = sort ( os . listdir ( ephysRoot ) ) [ - 1 ] ephysDir = os . path . join ( ephysRoot , ephysSession ) numTetrodes = 8 event_filename = os . path . join ( ephysDir , <str> ) ev = loadopenephys . Events ( event_filename ) eventTimes = np . array ( ev . timestamps ) / SAMPLING_RATE evID = np . array ( ev . eventID ) eventOnsetTimes = eventTimes [ evID == 1 ] clf ( ) for ind in range ( numTetrodes ) :      tetrodeID = ind + 1 spike_filename = os . path . join ( ephysDir , <str> . format ( tetrodeID ) ) sp = loadopenephys . DataSpikes ( spike_filename ) try :          spkTimeStamps = np . array ( sp . timestamps ) / SAMPLING_RATE ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) subplot ( numTetrodes , 1 , ind + 1 ) plot ( spikeTimesFromEventOnset , trialIndexForEachSpike , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) xlim ( timeRange ) if ind == 0 : 	     title ( ephysDir )   except AttributeError :          pass   xlabel ( <str> ) draw ( ) show ( )  