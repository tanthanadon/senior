from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib import animalTetDepths mouseList = [ <str> , <str> , <str> , <str> ] outputDir = <str> binWidth = 0.020 clusNum = 12 numTetrodes = 8 qualityList = [ 1 , 6 ] minZVal = 3.0 maxISIviolation = 0.02 minModDirectionScore = 1.0 minPValue = 0.05 inStriatumRangeCheck = True modFileName = <str> class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    modIndexArray = [ ] for mouseName in mouseList :      allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> processedDir = os . path . join ( settings . EPHYS_PATH , subject + <str> ) maxZFilename = os . path . join ( processedDir , <str> ) minPerfFilename = os . path . join ( processedDir , <str> ) minTrialFilename = os . path . join ( processedDir , <str> ) ISIFilename = os . path . join ( processedDir , <str> ) modIFilename = os . path . join ( processedDir , <str> ) maxZFile = open ( maxZFilename , <str> ) minPerfFile = open ( minPerfFilename , <str> ) minTrialFile = open ( minTrialFilename , <str> ) ISIFile = open ( ISIFilename , <str> ) modIFile = open ( modIFilename , <str> ) minPerfFile . readline ( ) minPerfList = minPerfFile . read ( ) . split ( ) minTrialFile . readline ( ) minTrialFile . readline ( ) minTrialDict = { } for lineCount , line in enumerate ( minTrialFile ) :          minTrialStr = line . split ( <str> ) trialFreq = minTrialStr [ 1 ] . split ( ) minTrialDict . update ( { minTrialStr [ 0 ] [ 1 : ] : trialFreq } )  maxZDict = nestedDict ( ) behavName = <str> for line in maxZFile :          behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :              behavName = behavLine [ 1 ] [ : - 1 ]  else :              maxZDict [ behavName ] [ freqLine [ 0 ] ] = freqLine [ 1 ] . split ( <str> ) [ 0 : - 1 ]   ISIDict = { } behavName = <str> for line in ISIFile :          if ( line . split ( <str> ) [ 0 ] == <str> ) :              behavName = line . split ( <str> ) [ 1 ] [ : - 1 ]  else :              ISIDict [ behavName ] = [ float ( x ) for x in line . split ( <str> ) [ 0 : - 1 ] ]   modIDict = { } modSigDict = { } modDirectionScoreDict = { } behavName = <str> for line in modIFile :          splitLine = line . split ( <str> ) if ( splitLine [ 0 ] == <str> ) :              behavName = splitLine [ 1 ] [ : - 1 ]  elif ( splitLine [ 0 ] == <str> ) :              modIDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]  elif ( splitLine [ 0 ] == <str> ) :              modSigDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]  elif ( splitLine [ 0 ] == <str> ) :              modDirectionScoreDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]   ISIFile . close ( ) maxZFile . close ( ) minPerfFile . close ( ) minTrialFile . close ( ) modIFile . close ( ) for cellID in range ( 0 , numOfCells ) :          oneCell = allcells . cellDB [ cellID ] subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession tetrode = oneCell . tetrode cluster = oneCell . cluster clusterQuality = oneCell . quality [ cluster - 1 ] depth = oneCell . depth if clusterQuality not in qualityList :              continue  elif behavSession not in minPerfList :              continue  elif behavSession not in minTrialDict :              continue  elif behavSession not in maxZDict :              continue  elif behavSession not in modIDict :              continue  elif behavSession not in ISIDict :              continue  clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) midFreq = minTrialDict [ behavSession ] [ 0 ] if inStriatumRangeCheck :              if ( ( abs ( float ( maxZDict [ behavSession ] [ midFreq ] [ clusterNumber ] ) ) >= minZVal ) & ( ISIDict [ behavSession ] [ clusterNumber ] <= maxISIviolation ) & ( animalTetDepths . tetDB . isInStriatum ( subject , tetrode , depth ) ) ) :                  modIndexArray . append ( [ modIDict [ behavSession ] [ clusterNumber ] , modSigDict [ behavSession ] [ clusterNumber ] , modDirectionScoreDict [ behavSession ] [ clusterNumber ] ] )   else :              if ( ( abs ( float ( maxZDict [ behavSession ] [ midFreq ] [ clusterNumber ] ) ) >= minZVal ) & ( ISIDict [ behavSession ] [ clusterNumber ] <= maxISIviolation ) ) :                  modIndexArray . append ( [ modIDict [ behavSession ] [ clusterNumber ] , modSigDict [ behavSession ] [ clusterNumber ] , modDirectionScoreDict [ behavSession ] [ clusterNumber ] ] ) print <str> , subject , <str> , behavSession , <str> , tetrode , <str> , cluster     modIndBinVec = np . arange ( - 1 , 1 , binWidth ) binModIndexArraySig = np . empty ( len ( modIndBinVec ) ) binModIndexArrayNonSig = np . empty ( len ( modIndBinVec ) ) maxMI = 0 totalSig = 0 for binInd in range ( len ( modIndBinVec ) - 1 ) :      binTotalSig = 0 binTotalNonSig = 0 for modIndSig in modIndexArray :          if ( ( modIndSig [ 0 ] >= modIndBinVec [ binInd ] ) and ( modIndSig [ 0 ] < modIndBinVec [ binInd + 1 ] ) and ( modIndSig [ 1 ] <= minPValue ) and ( modIndSig [ 2 ] >= minModDirectionScore ) ) :              binTotalSig += 1 totalSig += 1  elif ( ( modIndSig [ 0 ] >= modIndBinVec [ binInd ] ) and ( modIndSig [ 0 ] < modIndBinVec [ binInd + 1 ] ) ) :              binTotalNonSig += 1  maxMI = max ( maxMI , abs ( modIndSig [ 0 ] ) )  binModIndexArraySig [ binInd ] = binTotalSig binModIndexArrayNonSig [ binInd ] = binTotalNonSig  binModIndexArraySig [ - 1 ] = 0 binModIndexArrayNonSig [ - 1 ] = 0 print <str> , len ( modIndexArray ) print <str> , totalSig plt . clf ( ) plt . bar ( modIndBinVec , binModIndexArraySig , width = binWidth , color = <str> ) plt . bar ( modIndBinVec , binModIndexArrayNonSig , width = binWidth , color = <str> , bottom = binModIndexArraySig ) plt . xlim ( ( - ( maxMI + binWidth ) , maxMI + binWidth ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . figtext ( .15 , .83 , <str> % ( len ( modIndexArray ) ) , fontsize = 15 ) plt . figtext ( .15 , .87 , <str> % totalSig , fontsize = 15 ) plt . figtext ( .15 , .91 , <str> % ( round ( ( totalSig / float ( len ( modIndexArray ) ) ) , 3 ) * 100 ) , fontsize = 15 ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( modFileName , <str> , figformat ) fulloutputDir = outputDir + <str> + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :      os . makedirs ( directory )  print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat ) plt . show ( )  