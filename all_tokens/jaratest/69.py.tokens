from jaratoolbox import loadbehavior from jaratoolbox import behavioranalysis from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import settings from jaratoolbox import extraplots import numpy as np from matplotlib import pyplot as plt import os SAMPLING_RATE = 30000.0 timeRange = [ - 0.3 , 0.5 ] responseRange = [ 0.0 , 0.100 ] subject = <str> ; behavSession = <str> ; tune = <str> ; task = <str> ; tetrode = 4 ; cluster = 7 MODE = 1 MULTIUNIT = 1 if MODE == 0 :      ephysSession = tune paradigm = <str> if subject == <str> : paradigm = <str> freqKeyName = <str> plt . figure ( 1 )  elif MODE == 1 :      ephysSession = task paradigm = <str> freqKeyName = <str> plt . figure ( 2 )  fullephysDir = os . path . join ( settings . EPHYS_PATH , subject , ephysSession ) eventFilename = os . path . join ( fullephysDir , <str> ) behavDataFileName = loadbehavior . path_to_behavior_data ( subject , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behavDataFileName ) freqEachTrial = bdata [ freqKeyName ] nTrials = len ( freqEachTrial ) ev = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( ev . timestamps ) / SAMPLING_RATE evID = np . array ( ev . eventID ) evCh = np . array ( ev . eventChannel ) eventOnsetTimes = eventTimes [ ( evCh == 0 ) & ( evID == 1 ) ] if nTrials != len ( eventOnsetTimes ) :      print <str> print <str> . format ( nTrials , len ( eventOnsetTimes ) ) minNtrials = min ( nTrials , len ( eventOnsetTimes ) ) nTrials = minNtrials freqEachTrial = freqEachTrial [ : nTrials ] eventOnsetTimes = eventOnsetTimes [ : nTrials ]  possibleFreq = np . unique ( freqEachTrial ) if MODE == 0 :      trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq )  elif MODE == 1 :      trialsEachComb = behavioranalysis . find_trials_each_combination ( freqEachTrial , possibleFreq , bdata [ <str> ] , [ 0 , 1 ] ) trialsEachFreq = trialsEachComb [ : , : , 1 ]  spikesFilename = os . path . join ( fullephysDir , <str> . format ( tetrode ) ) clustersFilename = os . path . join ( fullephysDir + <str> , <str> . format ( tetrode ) ) dataSpikes = loadopenephys . DataSpikes ( spikesFilename ) if MULTIUNIT :      spkTimeStamps = np . array ( dataSpikes . timestamps ) / SAMPLING_RATE  else :      dataSpikes . set_clusters ( clustersFilename ) spkTimeStamps = np . array ( dataSpikes . timestamps [ dataSpikes . clusters == cluster ] ) / SAMPLING_RATE  ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) plt . clf ( ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachFreq ) plt . show ( )  