__author__ = <str> __date__ = <str> import sys from PySide import QtCore from PySide import QtGui import signal import os import numpy as np def plotting_function ( someValue ) :      import matplotlib . pyplot as plt plt . plot ( np . random . rand ( someValue ) , <str> ) plt . draw ( ) plt . show ( )  class myWindow ( QtGui . QMainWindow ) :      def __init__ ( self , parent = None , paramfile = None , paramdictname = None ) :          super ( myWindow , self ) . __init__ ( parent ) self . centralWidget = QtGui . QWidget ( ) layoutMain = QtGui . QVBoxLayout ( ) self . oneLabel = QtGui . QLabel ( <str> ) self . oneNumeric = QtGui . QLineEdit ( ) self . oneNumeric . setText ( <str> ) self . oneButton = QtGui . QPushButton ( <str> ) self . oneButton . clicked . connect ( self . plot_data ) layoutMain . addWidget ( self . oneLabel ) layoutMain . addWidget ( self . oneNumeric ) layoutMain . addWidget ( self . oneButton ) self . centralWidget . setLayout ( layoutMain ) self . setCentralWidget ( self . centralWidget )  def plot_data ( self ) :          oneValue = int ( self . oneNumeric . text ( ) ) plotting_function ( oneValue )  def closeEvent ( self , event ) :          event . accept ( )   if __name__ == <str> :      signal . signal ( signal . SIGINT , signal . SIG_DFL ) app = QtGui . QApplication . instance ( ) if not app :          app = QtGui . QApplication ( sys . argv )  mywin = myWindow ( ) mywin . show ( ) sys . exit ( app . exec_ ( ) )   