import os import numpy as np from jaratoolbox import settings from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase import studyparams d1mice = studyparams . ASTR_D1_CHR2_MICE nameDB = <str> . join ( d1mice ) + <str> pathtoDB = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , <str> . format ( <str> ) ) db = celldatabase . load_hdf ( pathtoDB ) PLOT = 0 SAVE = 1 for indIter , ( indRow , dbRow ) in enumerate ( db . iterrows ( ) ) :      cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) try :          ephysData , bdata = cell . load ( <str> )  except ( IndexError , ValueError ) :          print ( <str> . format ( indRow ) )  else :          eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimes = ephysData [ <str> ] freqEachTrial = bdata [ <str> ] if len ( eventOnsetTimes ) != len ( freqEachTrial ) :              eventOnsetTimes = eventOnsetTimes [ : - 1 ] if len ( eventOnsetTimes ) != len ( freqEachTrial ) :                  print ( <str> ) continue   possibleFreq = np . unique ( freqEachTrial ) intensityEachTrial = bdata [ <str> ] cfTrials = freqEachTrial == dbRow [ <str> ] eventsThisFreq = eventOnsetTimes [ cfTrials ] intenThisFreq = intensityEachTrial [ cfTrials ] possibleIntensity = np . unique ( intenThisFreq ) if len ( possibleIntensity ) > 4 :              intenToUse = possibleIntensity [ - 5 : ]  else :              intenToUse = possibleIntensity  highIntenTrials = np . in1d ( intenThisFreq , intenToUse ) eventsThisFreqHighIntensity = eventsThisFreq [ highIntenTrials ] cellLatency = dbRow [ <str> ] if not cellLatency > 0 :              print ( <str> ) continue  baseRange = [ - 0.1 , - 0.05 ] responseRange = [ cellLatency , cellLatency + 0.05 , 0.1 + cellLatency ] alignmentRange = [ baseRange [ 0 ] , responseRange [ - 1 ] ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventsThisFreqHighIntensity , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) avgResponse = nspkResp . mean ( axis = 0 ) onsetSpikes = avgResponse [ 0 ] sustainedSpikes = avgResponse [ 1 ] onsetRate = onsetSpikes / ( responseRange [ 1 ] - responseRange [ 0 ] ) sustainedRate = sustainedSpikes / ( responseRange [ 2 ] - responseRange [ 1 ] ) baseSpikes = nspkBase . mean ( ) baseRate = baseSpikes / ( baseRange [ 1 ] - baseRange [ 0 ] ) onsetBaseSubtracted = onsetRate - baseRate sustainedBaseSubtracted = sustainedRate - baseRate db . at [ indRow , <str> ] = onsetRate db . at [ indRow , <str> ] = sustainedRate db . at [ indRow , <str> ] = baseRate   db [ <str> ] = ( db [ <str> ] - db [ <str> ] ) / ( db [ <str> ] + db [ <str> ] ) if SAVE :      celldatabase . save_hdf ( db , pathtoDB )   