from jaratoolbox import behavioranalysis from jaratoolbox import loadbehavior import numpy as np from pylab import * import matplotlib . pyplot as plt from statsmodels . stats . proportion import proportion_confint from jaratoolbox import settings from jaratoolbox import extraplots import sys , os animalsNames = [ <str> ] sessionsPre = [ <str> , <str> , <str> , <str> ] sessionsPost = [ <str> , <str> , <str> , <str> ] sessionsMorePost = [ <str> , <str> , <str> , <str> ] allSessions = [ sessionsPre , sessionsPost , sessionsMorePost ] nAnimals = len ( animalsNames ) nSets = len ( allSessions ) fontSize = 12 clf ( ) gcf ( ) . subplots_adjust ( bottom = 0.15 ) markerFaceColors = [ <str> , <str> , <str> ] plotHandles = [ ] for inda , animalName in enumerate ( animalsNames ) :      subplot ( 1 , len ( animalsNames ) , inda + 1 ) for indset , sessions in enumerate ( allSessions [ : 2 ] ) :          bdata = behavioranalysis . load_many_sessions ( animalName , sessions ) targetFrequency = bdata [ <str> ] choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) intensities = bdata [ <str> ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( targetFrequency ) nFreq = len ( possibleFreq ) trialsEachFreq = behavioranalysis . find_trials_each_type ( targetFrequency , possibleFreq ) ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRight , targetFrequency , valid ) hold ( True ) ( pline , pcaps , pbars , pdots ) = extraplots . plot_psychometric ( possibleValues , fractionHitsEachValue , ciHitsEachValue ) setp ( pdots , ms = 6 , mec = <str> , mew = 2 , mfc = markerFaceColors [ indset ] ) plotHandles . append ( pdots [ 0 ] )  xlabel ( <str> , fontsize = fontSize ) ylabel ( <str> , fontsize = fontSize ) legend ( plotHandles , [ <str> , <str> ] , numpoints = 1 , loc = <str> , fontsize = fontSize - 2 ) title ( animalName )  show ( ) outputDir = <str> PRINT_FIGURE = 1 figFormat = <str> if PRINT_FIGURE :      plt . gcf ( ) . set_size_inches ( ( 5 , 4 ) ) figName = <str> . format ( animalName , figFormat ) fullName = os . path . join ( outputDir , figName ) print <str> % fullName plt . gcf ( ) . set_frameon ( False ) plt . savefig ( fullName , format = figFormat ) plt . gcf ( ) . set_frameon ( True ) print <str> pass  sys . exit ( ) figure ( 2 ) clf ( ) for inda , animalName in enumerate ( animalsNames ) :      for indset , sessions in enumerate ( allSessions ) :          subplot2grid ( ( nSets , nAnimals ) , ( indset , inda ) ) try :              bdata = behavioranalysis . load_many_sessions ( animalName , sessions )  except IOError :              continue  targetFrequency = bdata [ <str> ] valid = bdata [ <str> ] choice = bdata [ <str> ] intensities = bdata [ <str> ] choiceRight = choice == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( targetFrequency ) nFreq = len ( possibleFreq ) fractionRightEachFreq = np . zeros ( nFreq ) confLimitsEachFreq = np . zeros ( [ 2 , nFreq ] ) trialsEachFreq = behavioranalysis . find_trials_each_type ( targetFrequency , possibleFreq ) nTrialsEachFreq = np . empty ( nFreq ) nRightwardEachFreq = np . empty ( nFreq ) for indf , thisFreq in enumerate ( possibleFreq ) :              nTrialsThisFreq = sum ( valid & trialsEachFreq [ : , indf ] ) nRightwardThisFreq = sum ( valid & choiceRight & trialsEachFreq [ : , indf ] ) conf = np . array ( proportion_confint ( nRightwardThisFreq , nTrialsThisFreq , method = <str> ) ) nTrialsEachFreq [ indf ] = nTrialsThisFreq nRightwardEachFreq [ indf ] = nRightwardThisFreq confLimitsEachFreq [ 0 , indf ] = conf [ 0 ] confLimitsEachFreq [ 1 , indf ] = conf [ 1 ]  fractionRightEachFreq = nRightwardEachFreq / nTrialsEachFreq . astype ( float ) upperWhisker = confLimitsEachFreq [ 1 , : ] - fractionRightEachFreq lowerWhisker = fractionRightEachFreq - confLimitsEachFreq [ 0 , : ] x = possibleFreq errorbar ( x , 100 * fractionRightEachFreq , yerr = [ 100 * lowerWhisker , 100 * upperWhisker ] ) axhline ( y = 50 , color = <str> ) ax = gca ( ) ax . set_xscale ( <str> ) ax . set_xticks ( [ 3000 , 7000 , 16000 ] ) ax . set_xticks ( np . arange ( 1000 , 40000 , 1000 ) , minor = True ) from matplotlib . ticker import ScalarFormatter for axis in [ ax . xaxis , ax . yaxis ] :              axis . set_major_formatter ( ScalarFormatter ( ) )  ylim ( [ 0 , 100 ] ) xlim ( [ possibleFreq [ 0 ] / 1.2 , possibleFreq [ - 1 ] * 1.2 ] ) xlabel ( <str> ) ylabel ( <str> ) title ( animalName )   suptitle ( <str> . join ( sessions ) ) show ( )  