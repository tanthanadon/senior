import os import sys import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import behavioranalysis from jaratoolbox import extraplots from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import colorpalette EXPERIMENTER = <str> subjects = [ <str> ] FREQCOLORS = [ colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] , <str> , <str> , <str> ] if len ( sys . argv ) > 1 :      sessions = sys . argv [ 1 : ]  nSessions = len ( sessions ) nAnimals = len ( subjects ) gs = gridspec . GridSpec ( nAnimals , 1 ) gs . update ( hspace = 0.5 , wspace = 0.4 ) plt . clf ( ) for inda , thisAnimal in enumerate ( subjects ) :      allBehavDataThisAnimal = behavioranalysis . load_many_sessions ( thisAnimal , sessions ) targetFrequency = allBehavDataThisAnimal [ <str> ] choice = allBehavDataThisAnimal [ <str> ] valid = allBehavDataThisAnimal [ <str> ] & ( choice != allBehavDataThisAnimal . labels [ <str> ] [ <str> ] ) choiceRight = choice == allBehavDataThisAnimal . labels [ <str> ] [ <str> ] currentBlock = allBehavDataThisAnimal [ <str> ] blockTypes = [ allBehavDataThisAnimal . labels [ <str> ] [ <str> ] , allBehavDataThisAnimal . labels [ <str> ] [ <str> ] ] blockLabels = [ <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( currentBlock , blockTypes ) nBlocks = len ( blockTypes ) thisAnimalPos = inda ax1 = plt . subplot ( gs [ thisAnimalPos ] ) fontsize = 20 allPline = [ ] blockLegends = [ ] for blockType in range ( nBlocks ) :          if np . any ( trialsEachType [ : , blockType ] ) :              targetFrequencyThisBlock = targetFrequency [ trialsEachType [ : , blockType ] ] validThisBlock = valid [ trialsEachType [ : , blockType ] ] choiceRightThisBlock = choiceRight [ trialsEachType [ : , blockType ] ] ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRightThisBlock , targetFrequencyThisBlock , validThisBlock ) ( pline , pcaps , pbars , pdots ) = extraplots . plot_psychometric ( 1e-3 * possibleValues , fractionHitsEachValue , ciHitsEachValue , xTickPeriod = 1 ) plt . setp ( ( pline , pcaps , pbars ) , color = FREQCOLORS [ blockType ] ) plt . setp ( pdots , mfc = FREQCOLORS [ blockType ] , mec = FREQCOLORS [ blockType ] ) allPline . append ( pline ) blockLegends . append ( blockLabels [ blockType ] ) if blockType == nBlocks - 1 :                  plt . xlabel ( <str> , fontsize = fontsize ) plt . ylabel ( <str> , fontsize = fontsize ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontsize ) legend = plt . legend ( allPline , blockLegends , loc = 2 ) ax = plt . gca ( ) . add_artist ( legend )   plt . show ( )  plt . title ( <str> % ( thisAnimal , sessions [ 0 ] , sessions [ - 1 ] ) )  outputDir = <str> animalStr = <str> . join ( subjects ) sessionStr = <str> . join ( sessions ) plt . gcf ( ) . set_size_inches ( ( 6 , 4 ) ) figformat = <str> filename = <str> % ( animalStr , sessionStr , figformat ) fullFileName = os . path . join ( outputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )  