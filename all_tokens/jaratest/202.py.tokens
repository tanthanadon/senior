from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis import numpy as np from pylab import * import os import decision_discrimination_rasterplot as behaveData ephysRoot = <str> ephysSession = <str> tetrodeID = 1 responseRange = [ 0.10 , 0.40 ] timeRange = [ - 0.5 , 1 ] binTime = 0.1 trialsToUse1 = behaveData . incorrectRightward trialsToUse2 = behaveData . correctLeftward Frequency = 0 possibleFreq = behaveData . possibleFreq targetFreqs = behaveData . targetFrequencies SAMPLING_RATE = 30000.0 ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE multipleEventOnset = np . array ( events . eventID ) eventChannel = np . array ( events . eventChannel ) spike_filename = os . path . join ( ephysDir , <str> . format ( tetrodeID ) ) spikeData = loadopenephys . DataSpikes ( spike_filename ) spkTimeStamps = np . array ( spikeData . timestamps ) / SAMPLING_RATE numberOfTrials = behaveData . numberOfTrials eventID = 0 oneEvent = eventChannel == eventID eventOnset = multipleEventOnset * oneEvent while ( numberOfTrials != np . sum ( eventOnset ) ) :          eventOnset = eventOnset [ : - 1 ]  eventOnsetTimes = eventTimes [ eventOnset == 1 ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) startTime = float ( timeRange [ 0 ] ) endTime = float ( timeRange [ 1 ] ) fullTime = endTime - startTime numberOfBins = int ( ( fullTime // binTime ) + 1 ) binTimeRanges = np . empty ( [ numberOfBins , 2 ] ) xCoordinatesPlot = np . empty ( numberOfBins ) for indBin in range ( 0 , numberOfBins ) :      xCoordinatesPlot [ indBin ] = startTime + indBin * binTime binTimeRanges [ indBin ] = np . array ( [ ( startTime + indBin * binTime ) , ( startTime + ( indBin + 1 ) * binTime ) ] )  spikeNumberInBinPerTrial = np . empty ( [ numberOfBins , numberOfTrials ] ) for i , binRange in enumerate ( binTimeRanges ) :      spikeNumberInBinPerTrial [ i ] = spikesanalysis . count_spikes_in_range ( spikeTimesFromEventOnset , indexLimitsEachTrial , binRange )  spikeMeanInBin1 = np . empty ( numberOfBins ) spikeMeanInBin2 = np . empty ( numberOfBins ) for indBin , spikeCounts in enumerate ( spikeNumberInBinPerTrial ) :      spikeMeanInBin1 [ indBin ] = np . mean ( np . append ( spikeCounts [ trialsToUse1 == 1 ] , 0 ) ) spikeMeanInBin2 [ indBin ] = np . mean ( np . append ( spikeCounts [ trialsToUse2 == 1 ] , 0 ) )  sortedTrials = [ ] numTrialsEachFreq = [ ] for indf , oneFreq in enumerate ( possibleFreq ) :      indsThisFreq = np . flatnonzero ( targetFreqs == oneFreq ) sortedTrials = np . concatenate ( ( sortedTrials , indsThisFreq ) ) numTrialsEachFreq . append ( len ( indsThisFreq ) )  sortingInds = argsort ( sortedTrials ) sortedIndexForEachSpike = sortingInds [ trialIndexForEachSpike ] nSpikes = spikesanalysis . count_spikes_in_range ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) meanSpikesEachFrequency = np . empty ( len ( possibleFreq ) ) for indf , oneFreq in enumerate ( possibleFreq ) :      meanSpikesEachFrequency [ indf ] = np . mean ( nSpikes [ indf ] )  clf ( ) rastorFreq1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 3 , rowspan = 2 ) plot ( spikeTimesFromEventOnset , sortedIndexForEachSpike , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) numTrials = cumsum ( numTrialsEachFreq ) for indf , num in enumerate ( numTrials ) :      rastorFreq1 . axhline ( y = num , xmin = 0 , xmax = 1 , color = <str> , zorder = 0 )  tickPositions = numTrials - mean ( numTrialsEachFreq ) / 2 tickLabels = [ <str> % ( possibleFreq [ indf ] / 1000.0 ) for indf in range ( len ( possibleFreq ) ) ] rastorFreq1 . set_yticks ( tickPositions ) rastorFreq1 . set_yticklabels ( tickLabels ) ylabel ( <str> . format ( numTrials [ - 1 ] ) ) title ( ephysSession + <str> . format ( tetrodeID ) ) xlabel ( <str> ) rastorFreq2 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 3 ) , colspan = 1 , rowspan = 2 ) rastorFreq2 . set_xscale ( <str> ) plot ( possibleFreq , meanSpikesEachFrequency , <str> ) ylabel ( <str> . format ( * responseRange ) ) xlabel ( <str> ) histogram3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin1 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) histogram4 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin2 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) show ( )  