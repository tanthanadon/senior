from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import behavioranalysis from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 outputDir = <str> soundTriggerChannel = 0 binWidth = 0.010 Frequency = 1 timeRange = [ - 0.3 , 0.7 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = <str> behavSession = <str> ephysSession = <str> tetrodeID = <str> badSessionList = [ ] print <str> for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] try :          if ( behavSession != oneCell . behavSession ) :              subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( eventOnsetTimes , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) numberOfTrials = len ( bdata [ <str> ] ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == possibleFreq [ Frequency ] trialsToUseRight = correctRightward & oneFreq trialsToUseLeft = correctLeftward & oneFreq lowFreq = ( ( bdata [ <str> ] == possibleFreq [ 0 ] ) & correct ) highFreq = ( ( bdata [ <str> ] == possibleFreq [ 2 ] ) & correct ) trialsEachCond = np . c_ [ highFreq , trialsToUseLeft , trialsToUseRight , lowFreq ] ; colorEachCond = [ <str> , <str> , <str> , <str> ]  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) plt . clf ( ) ax1 = plt . subplot2grid ( ( 3 , 1 ) , ( 0 , 0 ) , rowspan = 2 ) plt . setp ( ax1 . get_xticklabels ( ) , visible = False ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 ax2 = plt . subplot2grid ( ( 3 , 1 ) , ( 2 , 0 ) , sharex = ax1 ) extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) nameFreq = str ( Freq ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , nameFreq , tetrodeClusterName , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :              os . makedirs ( directory )  plt . gcf ( ) . savefig ( fullFileName , format = figformat )  except :          if ( oneCell . behavSession not in badSessionList ) :              badSessionList . append ( oneCell . behavSession )    print <str> for badSes in badSessionList :      print badSes   