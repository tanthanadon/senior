import os import sys import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec import pandas as pd import random from jaratoolbox import settings from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from jaratoolbox import spikesorting from jaratoolbox import ephyscore from jaratoolbox import celldatabase from jaratoolbox import behavioranalysis import figparams import studyparams if sys . version_info [ 0 ] < 3 :      input_func = raw_input  elif sys . version_info [ 0 ] >= 3 :      input_func = input  timeRange = [ - 0.5 , 0.5 ] binWidth = 0.010 timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) smoothWinSizePsth = 3 lwPsth = 2 downsampleFactorPsth = 1 msRaster = 2 tuningcurve = studyparams . tuningcurve bottom = 0.05 top = 0.93 hspace = 0.4 wspace = 0.65 left = 0.1 right = 0.88 countreport = 0 fig = plt . gcf ( ) fig . clf ( ) studyname = studyparams . STUDY_NAME outputDir = os . path . join ( settings . FIGURES_DATA_PATH , studyname , <str> ) d1mice = studyparams . ASTR_D1_CHR2_MICE nameDB = <str> . join ( d1mice ) + <str> pathtoDB = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , nameDB ) db = celldatabase . load_hdf ( pathtoDB ) celldb = db . query ( <str> . format ( studyparams . R2_CUTOFF ) ) celldb = celldb . query ( <str> ) for indRow , dbRow in celldb . iterrows ( ) :      oneCell = ephyscore . Cell ( dbRow , useModifiedClusters = False ) rast1 = [ ] rast2 = [ ] spkMat = [ ] spikeT = [ ] waveF = [ ] ax = [ ] sessionCell = [ con for ( i , con ) in enumerate ( dbRow [ <str> ] ) ] sessionUC = pd . Series ( sessionCell ) . unique ( ) sessionsOrig = [ ss for ss in sessionUC if ( ss == <str> ) or ( ss == <str> ) or ( ss == <str> ) ] sessions = np . copy ( sessionsOrig ) gs = gridspec . GridSpec ( 4 , 8 , width_ratios = [ 1 , 1 , 1 , 1 , 1 , 1 , 6 , 4 ] ) gs . update ( left = 0.04 , right = 0.98 , top = 0.90 , bottom = 0.175 , wspace = 1.1 , hspace = 0.5 ) axNoiseburstRaster = plt . subplot ( gs [ 0 , 0 : 2 ] ) axLaserpulseRaster = plt . subplot ( gs [ 0 , 2 : 4 ] ) axNoiseburstPSTH = plt . subplot ( gs [ 1 , 0 : 2 ] ) axLaserpulsePSTH = plt . subplot ( gs [ 1 , 2 : 4 ] ) axTuningCurveISI = plt . subplot ( gs [ 3 , 0 : 2 ] ) axLaserpulseISI = plt . subplot ( gs [ 2 , 0 : 2 ] ) axTuningCurveWaveform = plt . subplot ( gs [ 3 , 2 : 4 ] ) axLaserpulseWaveform = plt . subplot ( gs [ 2 , 2 : 4 ] ) axTuningCurveEvents = plt . subplot ( gs [ 2 , 0 : 2 ] ) axTuningCurveRaster = plt . subplot ( gs [ 0 : 3 , 4 : 7 ] ) axTuningCurveHeatmap = plt . subplot ( gs [ 3 , 4 : 6 ] ) for sessiontype in sessionsOrig :          sessionInds = [ ind for ( ind , con ) in enumerate ( dbRow [ <str> ] ) if con == sessiontype ] randomchoice = random . choice ( sessionInds ) sessionIndToUse = sessionInds [ - 1 ] ephysData , bdata = oneCell . load_by_index ( sessionIndToUse ) spikeTimes = ephysData [ <str> ] if sessiontype == <str> :              eventOnsetTimes = ephysData [ <str> ] [ <str> ]  else :              eventOnsetTimes = ephysData [ <str> ] [ <str> ]  if sessiontype == <str> :              currentFreq = bdata [ <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( currentFreq , np . unique ( currentFreq ) ) uniqFreq = np . unique ( currentFreq ) b = np . array ( [ <str> % i for i in uniqFreq ] ) freqTicks = [ str ( b [ i ] ) + <str> + str ( i ) + <str> for i , con in enumerate ( b ) ] nTrialsEachCond = [ trialsEachType [ : , i ] . sum ( ) for i in range ( trialsEachType . shape [ 1 ] ) ] new_tick_locations = np . cumsum ( nTrialsEachCond ) lowFreq = 2 highFreq = 40 nFreqLabels = 3 freqTickLocations = np . linspace ( 0 , 15 , nFreqLabels ) freqs = np . logspace ( np . log10 ( lowFreq ) , np . log10 ( highFreq ) , nFreqLabels ) freqs = np . round ( freqs , decimals = 1 ) baseRange = [ - 0.1 , 0 ] responseRange = [ 0 , 0.1 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ 1 ] ] currentIntensity = bdata [ <str> ] possibleIntensity = np . unique ( bdata [ <str> ] ) nIntenLabels = len ( possibleIntensity ) lowIntensity = min ( possibleIntensity ) highIntensity = max ( possibleIntensity ) intensities = np . linspace ( lowIntensity , highIntensity , nIntenLabels ) intensities = intensities . astype ( np . int ) intenTickLocations = np . linspace ( 0 , nIntenLabels - 1 , nIntenLabels ) allIntenResp = np . empty ( ( len ( possibleIntensity ) , len ( uniqFreq ) ) ) for indinten , inten in enumerate ( possibleIntensity ) :                  for indfreq , freq in enumerate ( uniqFreq ) :                      selectinds = np . flatnonzero ( ( currentFreq == freq ) & ( currentIntensity == inten ) ) while selectinds [ - 1 ] >= eventOnsetTimes . shape [ 0 ] :                          selectinds = np . delete ( selectinds , - 1 , 0 )  selectedOnsetTimes = eventOnsetTimes [ selectinds ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , selectedOnsetTimes , alignmentRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) allIntenResp [ indinten , indfreq ] = np . mean ( nspkResp ) FR_data = allIntenResp / 0.1    ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , timeRange ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) rast1 . append ( spikeTimesFromEventOnset ) rast2 . append ( indexLimitsEachTrial ) spkMat . append ( spikeCountMat ) spikeT . append ( spikeTimes ) waveF . append ( ephysData [ <str> ] )  tetnum = dbRow [ <str> ] chanum = dbRow [ <str> ] for sessInd , con in enumerate ( sessions ) :          if con not in tuningcurve :              if con == <str> :                  plt . sca ( axNoiseburstRaster ) pRaster , hcond , zline = extraplots . raster_plot ( rast1 [ sessInd ] , rast2 [ sessInd ] , timeRange , trialsEachCond = [ ] , colorEachCond = <str> ) plt . setp ( pRaster , ms = msRaster ) plt . setp ( hcond , zorder = 3 ) plt . ylabel ( <str> ) axNoiseburstRaster . set_xlim ( - 0.3 , 0.5 ) plt . title ( con . title ( ) ) plt . sca ( axNoiseburstPSTH ) pPSTH = extraplots . plot_psth ( spkMat [ sessInd ] / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth , colorEachCond = <str> ) extraplots . boxoff ( plt . gca ( ) ) plt . ylabel ( <str> ) plt . xlabel ( <str> )  elif con == <str> :                  plt . sca ( axLaserpulseRaster ) pRaster , hcond , zline = extraplots . raster_plot ( rast1 [ sessInd ] , rast2 [ sessInd ] , timeRange , trialsEachCond = [ ] , colorEachCond = <str> ) plt . setp ( pRaster , ms = msRaster ) plt . setp ( hcond , zorder = 3 ) plt . ylabel ( <str> ) axLaserpulseRaster . set_xlim ( - 0.3 , 0.5 ) plt . title ( con . title ( ) ) plt . sca ( axLaserpulsePSTH ) pPSTH = extraplots . plot_psth ( spkMat [ sessInd ] / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth , colorEachCond = <str> ) extraplots . boxoff ( plt . gca ( ) ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) plt . sca ( axLaserpulseWaveform ) if waveF [ sessInd ] . any ( ) :                      all_waves , mean_waves , scale_bar = spikesorting . plot_waveforms ( waveF [ sessInd ] ) plt . setp ( mean_waves , color = <str> )  plt . title ( con . title ( ) )   else :              while indexLimitsEachTrial . shape [ 1 ] < trialsEachType . shape [ 0 ] :                  trialsEachType = np . delete ( trialsEachType , - 1 , 0 )  plt . sca ( axTuningCurveRaster ) pRaster , hcond , zline = extraplots . raster_plot ( rast1 [ sessInd ] , rast2 [ sessInd ] , timeRange , trialsEachCond = trialsEachType ) plt . setp ( pRaster , ms = msRaster ) plt . setp ( hcond , zorder = 3 ) plt . ylabel ( <str> ) axTuningCurveRaster . set_yticks ( new_tick_locations ) axTuningCurveRaster . set_yticklabels ( new_tick_locations ) plt . xticks ( np . arange ( timeRange [ 0 ] , timeRange [ 1 ] , .02 ) ) plt . xlim ( [ - 0.05 , 0.3 ] ) ylim = axTuningCurveRaster . get_ylim ( ) plt . vlines ( dbRow [ <str> ] , ylim [ 0 ] , ylim [ 1 ] , colors = <str> ) plt . title ( con . title ( ) ) axTuningCurveRaster . set_yticks ( new_tick_locations ) axTuningCurveRaster . set_yticklabels ( freqTicks ) axTuningCurveRaster . set_ylabel ( <str> ) plt . sca ( axTuningCurveWaveform ) if waveF [ sessInd ] . any ( ) :                  all_waves , mean_waves , scale_bar = spikesorting . plot_waveforms ( waveF [ sessInd ] ) plt . setp ( mean_waves , color = <str> ) plt . setp ( all_waves , color = <str> )  plt . axis ( <str> ) plt . title ( con . title ( ) ) plt . sca ( axTuningCurveISI ) hp_ISI , ISIhistogram , ISIbins = spikesorting . plot_isi_loghist ( spikeT [ sessInd ] ) plt . setp ( hp_ISI , color = <str> ) plt . title ( con . title ( ) ) plt . sca ( axTuningCurveEvents ) if spikeT [ sessInd ] . any ( ) :                  hp_Events = spikesorting . plot_events_in_time ( spikeT [ sessInd ] ) plt . setp ( hp_Events , color = <str> )  plt . title ( con . title ( ) ) fontSizeLabels = figparams . fontSizeLabels * 2 fontSizeTicks = fontSizeLabels cax = axTuningCurveHeatmap . imshow ( np . flipud ( FR_data ) , interpolation = <str> , cmap = <str> ) cbar = plt . colorbar ( cax , ax = axTuningCurveHeatmap , format = <str> ) maxFR = np . max ( FR_data . ravel ( ) ) cbar . ax . set_ylabel ( <str> , fontsize = fontSizeLabels , labelpad = - 10 ) extraplots . set_ticks_fontsize ( cbar . ax , fontSizeTicks ) cbar . set_ticks ( [ 0 , maxFR ] ) cax . set_clim ( [ 0 , maxFR ] ) axTuningCurveHeatmap . set_yticks ( intenTickLocations ) axTuningCurveHeatmap . set_yticklabels ( intensities [ : : - 1 ] ) axTuningCurveHeatmap . set_xticks ( freqTickLocations ) freqLabels = [ <str> . format ( freq ) for freq in freqs ] axTuningCurveHeatmap . set_xticklabels ( freqLabels ) axTuningCurveHeatmap . set_xlabel ( <str> , fontsize = fontSizeLabels ) axTuningCurveHeatmap . set_ylabel ( <str> , fontsize = fontSizeLabels ) extraplots . set_ticks_fontsize ( axTuningCurveHeatmap , fontSizeTicks )   title = <str> . format ( dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , tetnum , chanum , dbRow . name , sessionCell ) plt . suptitle ( title , fontsize = 15 , fontname = <str> ) fig . set_size_inches ( [ 20 , 10 ] ) fig . savefig ( outputDir + <str> . format ( dbRow . name , dbRow [ <str> ] , dbRow [ <str> ] , tetnum , chanum ) ) plt . clf ( ) countreport += 1 print ( <str> . format ( countreport ) )  print ( <str> . format ( countreport ) ) plt . plot ( )  