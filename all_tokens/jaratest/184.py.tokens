from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from jaratoolbox import spikesorting_ISIValues as spikesorting import matplotlib . pyplot as plt import sys import importlib numRows = 13 numCols = 6 sizeClusterPlot = 1 sizeRasters = ( numRows - sizeClusterPlot ) / 3 sizeHists = ( numRows - sizeClusterPlot ) / 6 SAMPLING_RATE = 30000.0 outputDir = <str> soundTriggerChannel = 0 binWidth = 0.010 Frequency = 1 timeRange = [ - 0.3 , 0.7 ] minBlockSize = 20 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> bdata = None eventOnsetTimes = None spikeTimesFromEventOnset = None indexLimitsEachTrial = None spikeTimesFromMovementOnset = None indexLimitsEachMovementTrial = None def switch_report ( mouseName , behavSession , tetrode , cluster ) :      global bdata global eventOnsetTimes global spikeTimesFromEventOnset global indexLimitsEachTrial global spikeTimesFromMovementOnset global indexLimitsEachMovementTrial allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) cellID = allcells . cellDB . findcell ( mouseName , behavSession , tetrode , cluster ) oneCell = allcells . cellDB [ cellID ] subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . FlexCategBehaviorData ( behaviorFilename ) bdata . find_trials_each_block ( ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] centerOutTimes = bdata [ <str> ] soundStartTimes = bdata [ <str> ] timeDiff = centerOutTimes - soundStartTimes if ( len ( eventOnsetTimes ) < len ( timeDiff ) ) :          timeDiff = timeDiff [ : - 1 ]  eventOnsetTimesCenter = eventOnsetTimes + timeDiff spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) ( spikeTimesFromMovementOnset , movementTrialIndexForEachSpike , indexLimitsEachMovementTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesCenter , timeRange ) plt . clf ( ) if ( len ( spkTimeStamps ) > 0 ) :          ax1 = plt . subplot2grid ( ( numRows , numCols ) , ( ( numRows - sizeClusterPlot ) , 0 ) , colspan = ( numCols / 3 ) ) spikesorting . plot_isi_loghist ( spkData . spikes . timestamps ) ax3 = plt . subplot2grid ( ( numRows , numCols ) , ( ( numRows - sizeClusterPlot ) , ( numCols / 3 ) * 2 ) , colspan = ( numCols / 3 ) ) spikesorting . plot_events_in_time ( spkTimeStamps ) samples = spkData . spikes . samples . astype ( float ) - 2 ** 15 samples = ( 1000.0 / spkData . spikes . gain [ 0 , 0 ] ) * samples ax2 = plt . subplot2grid ( ( numRows , numCols ) , ( ( numRows - sizeClusterPlot ) , ( numCols / 3 ) ) , colspan = ( numCols / 3 ) ) spikesorting . plot_waveforms ( samples )  ax4 = plt . subplot2grid ( ( numRows , numCols ) , ( 0 , 0 ) , colspan = ( numCols / 2 ) , rowspan = sizeRasters ) raster_sound_block_switching ( ) ax5 = plt . subplot2grid ( ( numRows , numCols ) , ( sizeRasters , 0 ) , colspan = ( numCols / 2 ) , rowspan = sizeHists ) hist_sound_block_switching ( ) ax6 = plt . subplot2grid ( ( numRows , numCols ) , ( 0 , ( numCols / 2 ) ) , colspan = ( numCols / 2 ) , rowspan = sizeRasters ) raster_movement_block_switching ( ) ax7 = plt . subplot2grid ( ( numRows , numCols ) , ( sizeRasters , ( numCols / 2 ) ) , colspan = ( numCols / 2 ) , rowspan = sizeHists ) hist_movement_block_switching ( ) ax8 = plt . subplot2grid ( ( numRows , numCols ) , ( ( sizeRasters + sizeHists ) , 0 ) , colspan = ( numCols / 2 ) , rowspan = sizeRasters ) raster_sound_allFreq_switching ( ) ax9 = plt . subplot2grid ( ( numRows , numCols ) , ( ( 2 * sizeRasters + sizeHists ) , 0 ) , colspan = ( numCols / 2 ) , rowspan = sizeHists ) hist_sound_allFreq_switching ( ) ax10 = plt . subplot2grid ( ( numRows , numCols ) , ( ( sizeRasters + sizeHists ) , ( numCols / 2 ) ) , colspan = ( numCols / 2 ) , rowspan = sizeRasters ) raster_sound_switching ( ) ax11 = plt . subplot2grid ( ( numRows , numCols ) , ( ( 2 * sizeRasters + sizeHists ) , ( numCols / 2 ) ) , colspan = ( numCols / 2 ) , rowspan = sizeHists ) hist_sound_switching ( ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . suptitle ( mouseName + <str> + behavSession + <str> + tetrodeClusterName ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat ) plt . show ( )  def raster_sound_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> + str ( Freq ) )  def hist_sound_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 2 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def raster_movement_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] extraplots . raster_plot ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> )  def hist_movement_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 2 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def raster_sound_allFreq_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq lowFreq = ( ( bdata [ <str> ] == possibleFreq [ 0 ] ) & correct ) highFreq = ( ( bdata [ <str> ] == possibleFreq [ 2 ] ) & correct ) trialsEachCond = np . c_ [ highFreq , trialsToUseLeft , trialsToUseRight , lowFreq ] ; colorEachCond = [ <str> , <str> , <str> , <str> ] extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> )  def hist_sound_allFreq_switching ( ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq lowFreq = ( ( bdata [ <str> ] == possibleFreq [ 0 ] ) & correct ) highFreq = ( ( bdata [ <str> ] == possibleFreq [ 2 ] ) & correct ) trialsEachCond = np . c_ [ highFreq , trialsToUseLeft , trialsToUseRight , lowFreq ] ; colorEachCond = [ <str> , <str> , <str> , <str> ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 2 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def raster_movement_block_switching ( ) :      correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq correctOneFreq = oneFreq & correct trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :          blockSizes = sum ( trialsEachBlock ) numBlocks = len ( trialsEachBlock [ 0 ] ) sumBlocks = sum ( blockSizes ) newTrialsLastBlock = np . zeros ( ( blockSizes [ - 1 ] , numBlocks ) , dtype = np . bool ) correctTrialsEachBlock [ ( sumBlocks - blockSizes [ - 1 ] ) : ] = newTrialsLastBlock  trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :          colorEachBlock = 3 * [ <str> , <str> ]  else :          colorEachBlock = 3 * [ <str> , <str> ]  extraplots . raster_plot ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachBlock , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> )  def hist_movement_block_switching ( ) :      correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq correctOneFreq = oneFreq & correct trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :          blockSizes = sum ( trialsEachBlock ) numBlocks = len ( trialsEachBlock [ 0 ] ) sumBlocks = sum ( blockSizes ) newTrialsLastBlock = np . zeros ( ( blockSizes [ - 1 ] , numBlocks ) , dtype = np . bool ) correctTrialsEachBlock [ ( sumBlocks - blockSizes [ - 1 ] ) : ] = newTrialsLastBlock  trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :          colorEachBlock = 3 * [ <str> , <str> ]  else :          colorEachBlock = 3 * [ <str> , <str> ]  timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachBlock , linestyle = None , linewidth = 2 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def raster_sound_block_switching ( ) :      correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq correctOneFreq = oneFreq & correct trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :          blockSizes = sum ( trialsEachBlock ) numBlocks = len ( trialsEachBlock [ 0 ] ) sumBlocks = sum ( blockSizes ) newTrialsLastBlock = np . zeros ( ( blockSizes [ - 1 ] , numBlocks ) , dtype = np . bool ) correctTrialsEachBlock [ ( sumBlocks - blockSizes [ - 1 ] ) : ] = newTrialsLastBlock  trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :          colorEachBlock = 3 * [ <str> , <str> ]  else :          colorEachBlock = 3 * [ <str> , <str> ]  extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachBlock , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> )  def hist_sound_block_switching ( ) :      correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq correctOneFreq = oneFreq & correct trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :          blockSizes = sum ( trialsEachBlock ) numBlocks = len ( trialsEachBlock [ 0 ] ) sumBlocks = sum ( blockSizes ) newTrialsLastBlock = np . zeros ( ( blockSizes [ - 1 ] , numBlocks ) , dtype = np . bool ) correctTrialsEachBlock [ ( sumBlocks - blockSizes [ - 1 ] ) : ] = newTrialsLastBlock  trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :          colorEachBlock = 3 * [ <str> , <str> ]  else :          colorEachBlock = 3 * [ <str> , <str> ]  timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachBlock , linestyle = None , linewidth = 2 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )   