from jaratoolbox import ephyscore from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import settings from jaratoolbox import spikesorting_ISI as spikesorting import numpy as np from pylab import * import os import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 timeRange = [ - 0.2 , 0.3 ] responseRange = [ 0.000 , 0.10 ] outputDir = <str> numOfCells = len ( allcells . cellDB ) ephysRootDir = <str> behaviorDir = <str> fulloutputDir = outputDir + mouseName + <str> if not os . path . exists ( fulloutputDir ) :      os . makedirs ( fulloutputDir )  for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] subject = oneCell . animalName behavSession = oneCell . behavSession print behavSession ephysSession = oneCell . ephysSession ephysRoot = ephysRootDir + subject + <str> tetrodeID = oneCell . tetrode clusterID = oneCell . cluster fullbehaviorDir = behaviorDir + subject + <str> behavName = subject + <str> + behavSession + <str> behavDataFileName = os . path . join ( fullbehaviorDir , behavName ) bdata = loadbehavior . BehaviorData ( behavDataFileName , readmode = <str> ) freqEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) numberOfTrials = len ( freqEachTrial ) sortedTrials = [ ] numTrialsEachFreq = [ ] for indf , oneFreq in enumerate ( possibleFreq ) :          indsThisFreq = np . flatnonzero ( freqEachTrial == oneFreq ) sortedTrials = np . concatenate ( ( sortedTrials , indsThisFreq ) ) numTrialsEachFreq . append ( len ( indsThisFreq ) )  sortingInds = argsort ( sortedTrials ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) ev = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( ev . timestamps ) / SAMPLING_RATE evID = np . array ( ev . eventID ) eventOnsetTimes = eventTimes [ evID == 1 ] while ( numberOfTrials < len ( eventOnsetTimes ) ) :          eventOnsetTimes = eventOnsetTimes [ : - 1 ]  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) sortedIndexForEachSpike = sortingInds [ trialIndexForEachSpike ] nSpikes = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) meanSpikesEachFrequency = np . empty ( len ( possibleFreq ) ) trialsEachFreq = [ ] for indf , oneFreq in enumerate ( possibleFreq ) :          trialsEachFreq . append ( np . flatnonzero ( freqEachTrial == oneFreq ) )  for indf , oneFreq in enumerate ( possibleFreq ) :          meanSpikesEachFrequency [ indf ] = np . mean ( nSpikes [ trialsEachFreq [ indf ] ] )  clf ( ) if ( len ( spkTimeStamps ) > 0 ) :          ax1 = plt . subplot2grid ( ( 4 , 4 ) , ( 3 , 0 ) , colspan = 1 ) spikesorting . plot_isi_loghist ( spkData . spikes . timestamps ) ax3 = plt . subplot2grid ( ( 4 , 4 ) , ( 3 , 3 ) , colspan = 1 ) spikesorting . plot_events_in_time ( spkTimeStamps ) samples = spkData . spikes . samples . astype ( float ) - 2 ** 15 samples = ( 1000.0 / spkData . spikes . gain [ 0 , 0 ] ) * samples ax2 = plt . subplot2grid ( ( 4 , 4 ) , ( 3 , 1 ) , colspan = 2 ) spikesorting . plot_waveforms ( samples )  ax4 = plt . subplot2grid ( ( 4 , 4 ) , ( 0 , 0 ) , colspan = 3 , rowspan = 3 ) plot ( spikeTimesFromEventOnset , sortedIndexForEachSpike , <str> , ms = 3 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) numTrials = cumsum ( numTrialsEachFreq ) for indf , num in enumerate ( numTrials ) :          ax4 . axhline ( y = num , xmin = 0 , xmax = 1 , color = <str> , zorder = 0 )  tickPositions = numTrials - mean ( numTrialsEachFreq ) / 2 tickLabels = [ <str> % ( possibleFreq [ indf ] / 1000 ) for indf in range ( len ( possibleFreq ) ) ] ax4 . set_yticks ( tickPositions ) ax4 . set_yticklabels ( tickLabels ) ylabel ( <str> . format ( numTrials [ - 1 ] ) ) title ( ephysSession + <str> . format ( tetrodeID , clusterID ) ) xlabel ( <str> ) ax5 = plt . subplot2grid ( ( 4 , 4 ) , ( 0 , 3 ) , colspan = 1 , rowspan = 3 ) ax5 . set_xscale ( <str> ) plot ( possibleFreq , meanSpikesEachFrequency , <str> ) ylabel ( <str> . format ( * responseRange ) ) xlabel ( <str> ) tetrodeClusterName = <str> + str ( tetrodeID ) + <str> + str ( clusterID ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , figformat ) fullFileName = os . path . join ( fulloutputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )   