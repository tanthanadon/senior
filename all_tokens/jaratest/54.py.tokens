from pylab import * from jaratoolbox import ephyscore from jaratoolbox import spikesorting from scipy . interpolate import interp1d import sys import allcells_test055 as allcells cellID = allcells . cellDB . findcell ( <str> , <str> , 3 , 9 ) oneCell = allcells . cellDB [ cellID ] spkData = ephyscore . CellData ( oneCell ) waveforms = spkData . spikes . samples samplingRate = spkData . spikes . samplingRate waveforms = spikesorting . align_waveforms ( waveforms ) N_INTERP_SAMPLES = 200 avWaveforms = np . mean ( waveforms , 0 ) avWaveforms = avWaveforms - 2 ** 15 energyEachChannel = np . sum ( np . abs ( avWaveforms ) , 1 ) maxChannel = np . argmax ( energyEachChannel ) spikeShape = avWaveforms [ maxChannel , : ] sampVals = np . arange ( 0 , len ( spikeShape ) / samplingRate , 1 / samplingRate ) interpFun = interp1d ( sampVals , spikeShape , kind = <str> ) interpSampVals = np . linspace ( 0 , sampVals [ - 1 ] , N_INTERP_SAMPLES ) interpSpikeShape = interpFun ( interpSampVals ) peakNaSample = np . argmin ( interpSpikeShape ) peakNaTime = interpSampVals [ peakNaSample ] dsign = np . r_ [ 0 , np . diff ( np . sign ( np . diff ( interpSpikeShape ) ) ) ] extremePointsPre = flatnonzero ( dsign [ 0 : peakNaSample ] ) peakCapSample = extremePointsPre [ - 1 ] if len ( extremePointsPre ) else 0 peakCapTime = interpSampVals [ peakCapSample ] extremePointsPost = flatnonzero ( dsign [ peakNaSample + 1 : ] ) peakKSample = extremePointsPost [ 0 ] + peakNaSample + 1 if len ( extremePointsPost ) else len ( extremePointsPost ) - 1 peakKTime = interpSampVals [ peakKSample ] clf ( ) hold ( 1 ) plot ( sampVals , spikeShape , <str> ) plot ( interpSampVals , interpSpikeShape , <str> ) axvline ( peakNaTime , ls = <str> , color = <str> ) axvline ( peakCapTime , ls = <str> , color = <str> ) axvline ( peakKTime , ls = <str> , color = <str> ) hold ( 0 ) show ( )  