import allcells_MI_test017 as allcells from jaratoolbox import ephyscore from jaratoolbox import loadopenephys from jaratoolbox import loadbehavior from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import numpy as np from pylab import * import os ephysRootDir = <str> experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) timeRange = [ - 0.3 , 0.7 ] Frequency = 1 eventID = 0 SAMPLING_RATE = 30000.0 subject = <str> behavSession = <str> ephysSession = <str> for cellID in range ( 0 , numOfCells ) : 	 oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) : 		 subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = ephysRootDir + subject + <str> behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) targetFreqs = bdata [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] incorrect = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = correct & rightward leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctLeftward = correct & leftward incorrectRightward = incorrect & rightward incorrectLeftward = incorrect & leftward trialsToUse1 = correctLeftward trialsToUse2 = correctRightward ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE multipleEventOnset = np . array ( events . eventID ) eventChannel = np . array ( events . eventChannel )  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps oneEvent = eventChannel == eventID eventOnset = multipleEventOnset * oneEvent while ( numberOfTrials < np . sum ( eventOnset ) ) : 		 eventOnset = eventOnset [ : - 1 ]  eventOnsetTimes = eventTimes [ eventOnset == 1 ] trialsOfFreq = targetFreqs == possibleFreq [ Frequency ] trialsToUseWithFreq1 = trialsToUse1 & trialsOfFreq trialsToUseWithFreq2 = trialsToUse2 & trialsOfFreq eventOnsetTimesTrials1 = eventOnsetTimes [ trialsToUseWithFreq1 == 1 ] eventOnsetTimesTrials2 = eventOnsetTimes [ trialsToUseWithFreq2 == 1 ] ( spikeTimesFromEventOnsetTrials1 , trialIndexForEachSpikeTrials1 , indexLimitsEachTrialTrials1 ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesTrials1 , timeRange ) ( spikeTimesFromEventOnsetTrials2 , trialIndexForEachSpikeTrials2 , indexLimitsEachTrialTrials2 ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesTrials2 , timeRange ) spikeNumber1 = spikesanalysis . count_spikes_in_range ( spikeTimesFromEventOnsetTrials1 , indexLimitsEachTrialTrials1 , timeRange )   