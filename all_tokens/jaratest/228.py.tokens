import allcells_test055 as allcells from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt SAMPLING_RATE = 30000.0 outputDir = <str> nameOfFile = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] clusNum = 12 numTetrodes = 8 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> tetrodeID = <str> baseRange = [ - 0.050 , - 0.025 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] responseTimeRange = [ - 0.1 , 0.1 ] responseTime = responseTimeRange [ 1 ] - responseTimeRange [ 0 ] binEdges = np . arange ( - 3 , 4 ) * binTime finalOutputDir = outputDir + <str> + subject + <str> text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    maxZDict = nestedDict ( ) for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] tetrode = oneCell . tetrode cluster = oneCell . cluster if ( behavSession != oneCell . behavSession ) :          print oneCell . behavSession subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) for possFreq in possibleFreq :              maxZDict [ behavSession ] [ possFreq ] = np . empty ( [ clusNum * numTetrodes ] )   for Frequency in range ( numberOfFrequencies ) :          Freq = possibleFreq [ Frequency ] oneFreqTrials = bdata [ <str> ] == Freq oneFreqEventOnsetTimes = eventOnsetTimes [ oneFreqTrials ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , oneFreqEventOnsetTimes , timeRange ) [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) maxZDict [ behavSession ] [ Freq ] [ clusterNumber ] = maxZ   bSessionList = [ ] for bSession in maxZDict :      bSessionList . append ( bSession )  bSessionList . sort ( ) for bSession in bSessionList :      text_file . write ( <str> % bSession ) for freq in maxZDict [ bSession ] :          text_file . write ( <str> % freq ) for ZVal in maxZDict [ bSession ] [ freq ] :              text_file . write ( <str> % ZVal )    text_file . close ( )  