from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib import re mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 outputDir = <str> nameOfFile = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] clusNum = 12 numTetrodes = 8 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> tetrodeID = <str> baseRange = [ - 0.050 , - 0.025 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] responseTimeRange = [ - 0.1 , 0.1 ] responseTime = responseTimeRange [ 1 ] - responseTimeRange [ 0 ] binEdges = np . arange ( 0 , 5 ) * binTime finalOutputDir = outputDir + <str> + subject + <str> class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    maxZDict = nestedDict ( ) maxZList = [ ] try :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) text_file . readline ( ) behavName = <str> for line in text_file :          behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :              behavName = behavLine [ 1 ] [ : - 1 ] maxZList . append ( behavName )    except :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> )  allcellsFileName = <str> + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) for cellID in range ( 0 , 1 ) :      cellNUM = allcells . cellDB . findcell ( <str> , <str> , 2 , 9 ) oneCell = allcells . cellDB [ cellNUM ] tetrode = oneCell . tetrode cluster = oneCell . cluster if ( behavSession != oneCell . behavSession ) :          subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print oneCell . behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) for possFreq in possibleFreq :              maxZDict [ behavSession ] [ possFreq ] = np . empty ( [ clusNum * numTetrodes ] )   for Frequency in range ( 1 ) :          Freq = possibleFreq [ 1 ] oneFreqTrials = bdata [ <str> ] == Freq oneFreqEventOnsetTimes = eventOnsetTimes [ oneFreqTrials ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , oneFreqEventOnsetTimes , timeRange ) [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) maxZDict [ behavSession ] [ Freq ] [ clusterNumber ] = maxZ   text_file . close ( ) print <str>  