from jaratoolbox import behavioranalysis from pylab import * from jaratoolbox import loadbehavior from jaratoolbox import extraplots import sys import os if len ( sys . argv ) > 1 :      session = sys . argv [ 1 ] + <str>  else :      session = <str>  subjects = [ <str> , <str> , <str> , <str> , <str> , <str> ] nAnimals = len ( subjects ) smallFontSize = 8 fontSize = 10 clf ( ) for inda , animalName in enumerate ( subjects ) :      fname = loadbehavior . path_to_behavior_data ( animalName , <str> , <str> , session ) try :          bdata = loadbehavior . BehaviorData ( fname )  except IOError :          continue  nReward = bdata [ <str> ] [ - 1 ] nValid = bdata [ <str> ] [ - 1 ] fractionCorrect = nReward / float ( nValid ) targetFrequency = bdata [ <str> ] possibleTarget = unique ( targetFrequency ) cueFrequency = bdata [ <str> ] possibleCue = unique ( cueFrequency ) trialsEachTarget = behavioranalysis . find_trials_each_type ( targetFrequency , possibleTarget ) trialsEachCue = behavioranalysis . find_trials_each_type ( cueFrequency , possibleCue ) correct = bdata [ <str> ] == ( bdata . labels [ <str> ] [ <str> ] ) correctEachTarget = trialsEachTarget & correct [ : , np . newaxis ] nTrialsEachTarget = trialsEachTarget . sum ( axis = 0 ) nCorrectEachTarget = correctEachTarget . sum ( axis = 0 ) fractionCorrectEachTarget = nCorrectEachTarget . astype ( float ) / nTrialsEachTarget correctEachCue = trialsEachCue & correct [ : , np . newaxis ] nTrialsEachCue = trialsEachCue . sum ( axis = 0 ) nCorrectEachCue = correctEachCue . sum ( axis = 0 ) fractionCorrectEachCue = nCorrectEachCue . astype ( float ) / nTrialsEachCue ax0 = subplot2grid ( ( nAnimals , 3 ) , ( inda , 0 ) ) axhline ( 50 , ls = <str> , color = <str> ) axhline ( 75 , ls = <str> , color = <str> ) plot ( 100 * fractionCorrectEachTarget , <str> , mec = <str> ) ylim ( [ 0 , 100 ] ) xlim ( [ - 0.5 , len ( possibleTarget ) - 0.5 ] ) ylabel ( animalName + <str> , fontsize = fontSize ) if inda == nAnimals - 1 :          xlabel ( <str> , fontsize = fontSize )  ax1 = subplot2grid ( ( nAnimals , 3 ) , ( inda , 1 ) ) axhline ( 50 , ls = <str> , color = <str> ) axhline ( 75 , ls = <str> , color = <str> ) plot ( 100 * fractionCorrectEachCue , <str> , mec = <str> ) ylim ( [ 0 , 100 ] ) xlim ( [ - 0.5 , len ( possibleCue ) - 0.5 ] ) if inda == nAnimals - 1 :          xlabel ( <str> , fontsize = fontSize )  if inda == 0 :          title ( session )  tec = behavioranalysis . find_trials_each_combination ( targetFrequency , possibleTarget , cueFrequency , possibleCue ) nTrialsEachComb = tec . sum ( axis = 0 ) nCorrectEachComb = np . sum ( tec & correct [ : , np . newaxis , np . newaxis ] , axis = 0 ) fractionCorrectEachComb = nCorrectEachComb . astype ( float ) / nTrialsEachComb ax2 = subplot2grid ( ( nAnimals , 3 ) , ( inda , 2 ) ) if 1 :          imshow ( 100 * fractionCorrectEachComb , cmap = <str> , vmin = 0 , vmax = 100 ) cbar = colorbar ( ) cbar . set_ticks ( [ 0 , 25 , 50 , 75 , 100 ] ) cbar . set_label ( <str> , rotation = 270 , fontsize = fontSize ) plt . setp ( cbar . ax . get_yticklabels ( ) , fontsize = smallFontSize )  else :          imshow ( nTrialsEachComb , cmap = <str> , vmin = 0 ) cbar = colorbar ( )  for indt in range ( len ( possibleTarget ) ) :          for indc in range ( len ( possibleCue ) ) :              text ( indc , indt , nTrialsEachComb [ indt , indc ] , ha = <str> , va = <str> , fontsize = 8 , color = <str> )   ylabel ( <str> , fontsize = fontSize ) if inda == nAnimals - 1 :          xlabel ( <str> , fontsize = fontSize )  ax2 . set_xticks ( range ( len ( possibleCue ) ) ) ax2 . set_yticks ( range ( len ( possibleTarget ) ) ) extraplots . set_ticks_fontsize ( ax0 , smallFontSize ) extraplots . set_ticks_fontsize ( ax1 , smallFontSize ) extraplots . set_ticks_fontsize ( ax2 , smallFontSize ) show ( )  PRINT_FIG = 1 outputDir = <str> if PRINT_FIG :      animalStr = <str> . join ( subjects ) sessionStr = session plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( animalStr , sessionStr , figformat ) fullFileName = os . path . join ( outputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )   