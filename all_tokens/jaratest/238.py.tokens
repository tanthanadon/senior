import allcells_test017 as allcells from jaratoolbox import ephyscore from jaratoolbox import loadopenephys from jaratoolbox import loadbehavior from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import numpy as np from pylab import * import os outputDir = <str> timeLabeling = <str> ephysRootDir = <str> experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) responseRange = [ 0.10 , 0.40 ] timeRange = [ - 0.3 , 0.7 ] binTime = 0.05 nametrialsToUse = <str> Frequency = 1 eventID = 0 SAMPLING_RATE = 30000.0 startTime = float ( timeRange [ 0 ] ) endTime = float ( timeRange [ 1 ] ) fullTime = endTime - startTime numberOfBins = int ( ( fullTime // binTime ) + 1 ) binTimeRanges = np . empty ( [ numberOfBins , 2 ] ) xCoordinatesPlot = np . empty ( numberOfBins ) for indBin in range ( 0 , numberOfBins ) :      xCoordinatesPlot [ indBin ] = startTime + indBin * binTime binTimeRanges [ indBin ] = np . array ( [ ( startTime + indBin * binTime ) , ( startTime + ( indBin + 1 ) * binTime ) ] )  subject = <str> behavSession = <str> ephysSession = <str> for cellID in range ( 0 , numOfCells ) : 	 oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) : 		 subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = ephysRootDir + subject + <str> behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) targetFreqs = bdata [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] incorrect = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = correct * rightward leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctLeftward = correct * leftward incorrectRightward = incorrect * rightward incorrectLeftward = incorrect * leftward trialsToUse1 = correctLeftward trialsToUse2 = correctRightward ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE multipleEventOnset = np . array ( events . eventID ) eventChannel = np . array ( events . eventChannel )  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps oneEvent = eventChannel == eventID eventOnset = multipleEventOnset * oneEvent while ( numberOfTrials < np . sum ( eventOnset ) ) : 		 eventOnset = eventOnset [ : - 1 ]  eventOnsetTimes = eventTimes [ eventOnset == 1 ] trialsOfFreq = targetFreqs == possibleFreq [ Frequency ] trialsToUseWithFreq1 = trialsToUse1 * trialsOfFreq trialsToUseWithFreq2 = trialsToUse2 * trialsOfFreq eventOnsetTimesTrials1 = eventOnsetTimes [ trialsToUseWithFreq1 == 1 ] eventOnsetTimesTrials2 = eventOnsetTimes [ trialsToUseWithFreq2 == 1 ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) ( spikeTimesFromEventOnsetTrials1 , trialIndexForEachSpikeTrials1 , indexLimitsEachTrialTrials1 ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesTrials1 , timeRange ) ( spikeTimesFromEventOnsetTrials2 , trialIndexForEachSpikeTrials2 , indexLimitsEachTrialTrials2 ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesTrials2 , timeRange ) spikeNumberInBinPerTrial = np . empty ( [ numberOfBins , numberOfTrials ] ) for i , binRange in enumerate ( binTimeRanges ) : 	     spikeNumberInBinPerTrial [ i ] = spikesanalysis . count_spikes_in_range ( spikeTimesFromEventOnset , indexLimitsEachTrial , binRange )  spikeMeanInBin1 = np . empty ( numberOfBins ) spikeMeanInBin2 = np . empty ( numberOfBins ) for indBin , spikeCounts in enumerate ( spikeNumberInBinPerTrial ) :              spikeMeanInBin1 [ indBin ] = np . mean ( np . append ( spikeCounts [ trialsToUseWithFreq1 == 1 ] , 0 ) ) spikeMeanInBin2 [ indBin ] = np . mean ( np . append ( spikeCounts [ trialsToUseWithFreq2 == 1 ] , 0 ) )  targetFreqsTrials1 = targetFreqs [ trialsToUseWithFreq1 == 1 ] targetFreqsTrials2 = targetFreqs [ trialsToUseWithFreq2 == 1 ] sortedTrials1 = [ ] for indf1 , oneFreq1 in enumerate ( possibleFreq ) : 	     indsThisFreq1 = np . flatnonzero ( targetFreqsTrials1 == oneFreq1 ) sortedTrials1 . append ( indsThisFreq1 )  sortedTrials2 = [ ] for indf2 , oneFreq2 in enumerate ( possibleFreq ) : 	     indsThisFreq2 = np . flatnonzero ( targetFreqsTrials2 == oneFreq2 ) sortedTrials2 . append ( indsThisFreq2 )  colorEachFreq = [ ] strPossibleFreq = [ ] for indFreq , Freq in enumerate ( possibleFreq ) :              colorEachFreq . append ( <str> ) colorEachFreq . append ( <str> ) strPossibleFreq . append ( str ( Freq ) )  clf ( ) rastorFreq1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 2 , rowspan = 2 ) extraplots . raster_plot ( spikeTimesFromEventOnsetTrials1 , indexLimitsEachTrialTrials1 , timeRange , sortedTrials1 , labels = strPossibleFreq , colorEachCond = colorEachFreq ) rastorFreq2 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 2 ) , colspan = 2 , rowspan = 2 ) extraplots . raster_plot ( spikeTimesFromEventOnsetTrials2 , indexLimitsEachTrialTrials2 , timeRange , sortedTrials2 , labels = strPossibleFreq , colorEachCond = colorEachFreq ) hist_Ymax = max ( np . amax ( spikeMeanInBin1 ) , np . amax ( spikeMeanInBin2 ) ) + 0.1 histogram3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin1 , width = binTime ) plt . ylim ( [ 0 , hist_Ymax ] ) ylabel ( <str> . format ( binTime ) ) xlabel ( timeLabeling ) histogram4 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin2 , width = binTime ) plt . ylim ( [ 0 , hist_Ymax ] ) ylabel ( <str> . format ( binTime ) ) xlabel ( timeLabeling ) tetrodeID = oneCell . tetrode tetrodeClusterName = <str> + str ( tetrodeID ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , nametrialsToUse , figformat ) fulloutputDir = outputDir + subject + <str> + <str> + <str> fullFileName = os . path . join ( fulloutputDir , filename ) print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )   