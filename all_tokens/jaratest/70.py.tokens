import numpy as np import scipy . optimize from jaratoolbox import behavioranalysis from jaratoolbox import loadbehavior from jaratoolbox import extraplots from matplotlib import pyplot as plt sessionsDict = { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , ] , } subject = <str> paradigm = <str> eachBehavData = [ ] nTrialsToAnalyze = 150 allCorrectMidFreqAfterSwitch = np . ma . masked_array ( np . zeros ( ( 0 , nTrialsToAnalyze ) ) , dtype = int ) for session in sessionsDict [ subject ] :      behavFileName = loadbehavior . path_to_behavior_data ( subject , paradigm , session ) bdata = loadbehavior . FlexCategBehaviorData ( behavFileName ) bdata . find_trials_each_block ( ) eachBehavData . append ( bdata ) valid = bdata [ <str> ] indexValidEachBlock = [ ] for blockInd in range ( bdata . blocks [ <str> ] ) :          trialsThisBlock = bdata . blocks [ <str> ] [ : , blockInd ] indexValidEachBlock . extend ( np . cumsum ( valid [ trialsThisBlock ] ) )  bdata [ <str> ] = np . array ( indexValidEachBlock ) valid = bdata [ <str> ] . astype ( bool ) correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctSubset = correct [ valid ] indexEachBlockSubset = bdata [ <str> ] [ valid ] trialsMidFreq = bdata [ <str> ] == bdata [ <str> ] trialsMidFreqSubset = trialsMidFreq [ valid ] trialsPerBlock = bdata [ <str> ] nSwitches = bdata . blocks [ <str> ] - 1 correctMidFreqAfterSwitch = np . ma . masked_array ( np . zeros ( ( nSwitches , nTrialsToAnalyze ) ) , dtype = int ) correctMidFreqAfterSwitch . mask = np . ones ( correctMidFreqAfterSwitch . shape , dtype = bool ) for indt in range ( nTrialsToAnalyze ) :          trialsToAnalyze = np . flatnonzero ( indexEachBlockSubset == indt + 1 ) [ 1 : ] midFreqAfterSwitch = trialsMidFreqSubset [ trialsToAnalyze ] if len ( correctSubset [ trialsToAnalyze ] ) == nSwitches :              correctMidFreqAfterSwitch [ : , indt ] = correctSubset [ trialsToAnalyze ] correctMidFreqAfterSwitch . mask [ : , indt ] = ~ midFreqAfterSwitch  else :              correctMidFreqAfterSwitch [ : - 1 , indt ] = correctSubset [ trialsToAnalyze ] correctMidFreqAfterSwitch . mask [ : - 1 , indt ] = ~ midFreqAfterSwitch   allCorrectMidFreqAfterSwitch = np . ma . vstack ( ( allCorrectMidFreqAfterSwitch , correctMidFreqAfterSwitch ) )  avgCorrectAfterSwitch = allCorrectMidFreqAfterSwitch . mean ( axis = 0 ) if np . any ( avgCorrectAfterSwitch . mask ) :      raise Warning ( <str> )  plt . clf ( ) plt . plot ( avgCorrectAfterSwitch , <str> ) plt . show ( ) def fixedintercept_exponential ( xval , intercept , tau , amp = 1 ) :      return amp * ( 1 - np . exp ( - ( xval ) / tau ) ) + intercept  def error_fixed_exponential ( theta , xval , yval , intercept ) :      yhat = fixedintercept_exponential ( xval , intercept , * theta ) return np . sum ( ( yval - yhat ) ** 2 )  xval = np . arange ( len ( avgCorrectAfterSwitch ) , dtype = float ) yMeasured = avgCorrectAfterSwitch . filled ( 0.5 ) intercept = 1 - avgCorrectAfterSwitch [ - 10 : ] . mean ( ) theta0 = np . array ( [ 25. , 1 ] ) thetahat = scipy . optimize . fmin ( error_fixed_exponential , theta0 , args = ( xval , yMeasured , intercept ) , disp = False ) yFit = fixedintercept_exponential ( xval , intercept , * thetahat ) firstTrialAboveChance = np . flatnonzero ( yFit > 0.5 ) [ 0 ] print <str> . format ( thetahat [ 0 ] , firstTrialAboveChance ) mfactor = 100 fontsize = 14 plt . clf ( ) plt . gcf ( ) . set_facecolor ( <str> ) plt . plot ( xval + 1 , mfactor * avgCorrectAfterSwitch , <str> , color = <str> , mfc = <str> , mew = 2 , mec = <str> , clip_on = False ) plt . plot ( xval + 1 , mfactor * yFit , <str> , lw = 4 , color = <str> ) plt . axhline ( mfactor * 0.5 , ls = <str> , color = <str> ) plt . axvline ( firstTrialAboveChance , ls = <str> , color = <str> ) plt . xlabel ( <str> , fontsize = fontsize ) plt . ylabel ( <str> , ma = <str> , fontsize = fontsize ) plt . ylim ( [ 0 , mfactor * 1 ] ) extraplots . boxoff ( plt . gca ( ) ) plt . title ( subject ) plt . show ( )  