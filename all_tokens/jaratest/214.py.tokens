from jaratoolbox import loadbehavior from jaratoolbox import settings_2 as settings reload ( settings ) from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import loadbehavior from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from jaratoolbox import celldatabase as cellDB import matplotlib . pyplot as plt import sys import importlib import re mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) reload ( allcells ) SAMPLING_RATE = 30000.0 outputDir = <str> nameOfFile = <str> + mouseName finalOutputDir = outputDir + <str> + mouseName + <str> if not os . path . exists ( finalOutputDir ) :      os . mkdir ( finalOutputDir )  soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] clusNum = 12 numTetrodes = 8 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> Zthreshold = 3 numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> tetrodeID = <str> baseRange = [ - 0.050 , - 0.025 ] binTime = baseRange [ 1 ] - baseRange [ 0 ] binEdges = np . arange ( 6 , 13 ) * binTime class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    maxZDict = nestedDict ( ) maxZList = [ ] try :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) behavName = <str> for line in text_file :          behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :              behavName = behavLine [ 1 ] [ : - 1 ] maxZList . append ( behavName )  else :              maxZDict [ behavName ] [ freqLine [ 0 ] ] = freqLine [ 1 ] . split ( <str> ) [ 0 : - 1 ]    except :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> )  badSessionList = [ ] for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] tetrode = oneCell . tetrode cluster = oneCell . cluster if ( oneCell . behavSession in maxZList ) :          continue  try :          if ( behavSession != oneCell . behavSession ) :              subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print oneCell . behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) print <str> , numberOfTrials ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) soundOnsetTimeBehav = bdata [ <str> ] nTrialsBehav = len ( soundOnsetTimeBehav ) nTrialsEphys = len ( soundOnsetTimeEphys ) print <str> . format ( nTrialsBehav ) print <str> . format ( nTrialsEphys ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) for possFreq in possibleFreq :                  maxZDict [ behavSession ] [ possFreq ] = np . zeros ( [ clusNum * numTetrodes ] )  validTrials = ( ( bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] ) | ( bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] ) )  for Frequency in range ( numberOfFrequencies ) :              Freq = possibleFreq [ Frequency ] oneFreqTrials = bdata [ <str> ] == Freq trialsToUse = ( oneFreqTrials & validTrials ) oneFreqEventOnsetTimes = eventOnsetTimes [ trialsToUse ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , oneFreqEventOnsetTimes , timeRange ) [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) maxZDict [ behavSession ] [ Freq ] [ clusterNumber ] = maxZ   except :          if ( oneCell . behavSession not in badSessionList ) :              badSessionList . append ( oneCell . behavSession )    bSessionList = [ ] for bSession in maxZDict :      if ( bSession not in badSessionList ) and ( bSession not in maxZList ) :          bSessionList . append ( bSession )   bSessionList . sort ( ) for bSession in bSessionList :      text_file . write ( <str> % bSession ) for freq in maxZDict [ bSession ] :          text_file . write ( <str> % freq ) for ZVal in maxZDict [ bSession ] [ freq ] :              text_file . write ( <str> % ZVal )   text_file . write ( <str> )  text_file . close ( ) print <str> for badSes in badSessionList :      print badSes  print <str>  