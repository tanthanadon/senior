import os import sys import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import behavioranalysis from jaratoolbox import extraplots from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import colorpalette def plot_ave_psycurve_reward_change ( animal , sessions ) :      FREQCOLORS = [ colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] , colorpalette . TangoPalette [ <str> ] ] allBehavDataThisAnimal = behavioranalysis . load_many_sessions ( animal , sessions ) targetFrequency = allBehavDataThisAnimal [ <str> ] choice = allBehavDataThisAnimal [ <str> ] valid = allBehavDataThisAnimal [ <str> ] & ( choice != allBehavDataThisAnimal . labels [ <str> ] [ <str> ] ) choiceRight = choice == allBehavDataThisAnimal . labels [ <str> ] [ <str> ] currentBlock = allBehavDataThisAnimal [ <str> ] blockTypes = [ allBehavDataThisAnimal . labels [ <str> ] [ <str> ] , allBehavDataThisAnimal . labels [ <str> ] [ <str> ] , allBehavDataThisAnimal . labels [ <str> ] [ <str> ] ] blockLabels = [ <str> , <str> , <str> ] trialsEachType = behavioranalysis . find_trials_each_type ( currentBlock , blockTypes ) nFreqs = len ( np . unique ( targetFrequency ) ) nBlocks = len ( blockTypes ) fontsize = 12 allPline = [ ] blockLegends = [ ] fractionHitsEachValueAllBlocks = np . empty ( ( nBlocks , nFreqs ) ) for blockType in range ( nBlocks ) :          if np . any ( trialsEachType [ : , blockType ] ) :              targetFrequencyThisBlock = targetFrequency [ trialsEachType [ : , blockType ] ] validThisBlock = valid [ trialsEachType [ : , blockType ] ] choiceRightThisBlock = choiceRight [ trialsEachType [ : , blockType ] ] ( possibleValues , fractionHitsEachValue , ciHitsEachValue , nTrialsEachValue , nHitsEachValue ) = behavioranalysis . calculate_psychometric ( choiceRightThisBlock , targetFrequencyThisBlock , validThisBlock ) fractionHitsEachValueAllBlocks [ blockType , : ] = fractionHitsEachValue ( pline , pcaps , pbars , pdots ) = extraplots . plot_psychometric ( 1e-3 * possibleValues , fractionHitsEachValue , ciHitsEachValue , xTickPeriod = 1 ) plt . setp ( ( pline , pcaps , pbars ) , color = FREQCOLORS [ blockType ] ) plt . setp ( pdots , mfc = FREQCOLORS [ blockType ] , mec = FREQCOLORS [ blockType ] ) allPline . append ( pline ) blockLegends . append ( blockLabels [ blockType ] ) if blockType == nBlocks - 1 :                  plt . xlabel ( <str> , fontsize = fontsize ) plt . ylabel ( <str> , fontsize = fontsize ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontsize ) legend = plt . legend ( allPline , blockLegends , loc = 2 ) ax = plt . gca ( ) . add_artist ( legend )    plt . title ( <str> % ( animal , sessions [ 0 ] , sessions [ - 1 ] ) ) return fractionHitsEachValueAllBlocks  if __name__ == <str> :      import numpy as np import matplotlib . pyplot as plt CASE = 1 if CASE == 1 :          subjects = [ <str> , <str> , ] if len ( sys . argv ) > 1 :              sessions = sys . argv [ 1 : ]  else : 	     sessions = [ <str> , <str> , <str> , <str> ]  plt . figure ( ) for indanimal , thisAnimal in enumerate ( subjects ) : 	     plt . subplot ( len ( subjects ) , 1 , indanimal + 1 ) plot_ave_psycurve_reward_change ( thisAnimal , sessions )  plt . show ( )  elif CASE == 2 :          sujectSessionsDict = { <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , <str> : [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , } numOfAnimals = len ( sujectSessionsDict . keys ( ) ) avePsycurveMoreLeft = np . empty ( ( numOfAnimals , 8 ) ) avePsycurveMoreRight = np . empty ( ( numOfAnimals , 8 ) ) for ind , ( subject , sessions ) in enumerate ( sujectSessionsDict . items ( ) ) :              fractionHitsEachValueAllBlocks = plot_ave_psycurve_reward_change ( subject , sessions ) save_svg_psycurve_reward_change ( subject , sessions ) avePsycurveMoreLeft [ ind , : ] = fractionHitsEachValueAllBlocks [ 0 , : ] avePsycurveMoreRight [ ind , : ] = fractionHitsEachValueAllBlocks [ 1 , : ]  fontsize = 12 plt . clf ( ) plt . hold ( <str> ) plt . xlabel ( <str> , fontsize = fontsize ) plt . ylabel ( <str> , fontsize = fontsize ) plt . ylim ( ( - 0.1 , 1.1 ) ) extraplots . set_ticks_fontsize ( plt . gca ( ) , fontsize ) plt . show ( )    