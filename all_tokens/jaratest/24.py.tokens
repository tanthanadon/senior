import os , sys import pdb import numpy as np from scipy import stats import pandas as pd import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import celldatabase from jaratoolbox import extraplots from jaratoolbox import spikesanalysis from jaratoolbox import spikesorting from jaratoolbox import behavioranalysis from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import ephyscore reload ( loadopenephys ) from jaratoolbox import settings subject = <str> dbpath = <str> . format ( subject ) db = pd . read_hdf ( dbpath , key = <str> ) goodCells = db . query ( <str> ) def noise_raster ( ephysData , gs ) :      plt . subplot ( gs [ 0 , 0 ] ) eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ - 0.3 , 0.6 ] trialsEachCond = [ ] spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond ) xlabel = <str> ylabel = <str> plt . title ( <str> ) plt . xlabel ( xlabel ) plt . ylabel ( ylabel )  def tuning_raster ( bdata , ephysdata , gs ) :      plt . subplot ( gs [ 0 , 1 ] ) freqEachTrial = bdata [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ - 0.3 , 0.6 ] possiblefreqs = np . unique ( freqEachTrial ) freqLabels = [ round ( x / 1000 , 1 ) for x in possiblefreqs ] trialsEachCond = behavioranalysis . find_trials_each_type ( freqEachTrial , possiblefreqs ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , labels = freqLabels ) xlabel = <str> ylabel = <str> plt . title ( <str> ) plt . xlabel ( xlabel ) plt . ylabel ( ylabel )  def tuning_curve ( bdata , ephysData , gs ) :      plt . subplot ( gs [ 3 , 0 ] ) freqEachTrial = bdata [ <str> ] intEachTrial = bdata [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ 0.0 , 0.1 ] possiblefreqs = np . unique ( freqEachTrial ) freqLabels = [ round ( x / 1000 , 1 ) for x in possiblefreqs ] possibleInts = np . unique ( intEachTrial ) intTrialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , possiblefreqs , intEachTrial , possibleInts ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) for intInd , inten in enumerate ( possibleInts ) :          line = <str> if intInd == 0 and len ( possibleInts ) > 1 :              line = <str>  curveName = str ( inten ) + <str> trialsEachCond = intTrialsEachCond [ : , : , intInd ] try :              freq_avgs = spikesanalysis . avg_num_spikes_each_condition ( trialsEachCond , indexLimitsEachTrial )  except :              behavIndexLimitsEachTrial = indexLimitsEachTrial [ 0 : 2 , : - 1 ] freq_avgs = spikesanalysis . avg_num_spikes_each_condition ( trialsEachCond , behavIndexLimitsEachTrial )  xpoints = [ x for x in range ( 0 , len ( possiblefreqs ) ) ] plt . plot ( xpoints , freq_avgs , linestyle = line , color = <str> , marker = <str> , label = curveName ) plt . xticks ( xpoints , freqLabels ) plt . hold ( True )  plt . title ( <str> ) plt . legend ( fontsize = <str> ) plt . hold ( False )  def laser_tuning_raster ( bdata , ephysData , gs ) :      freqEachTrial = bdata [ <str> ] laserEachTrial = bdata [ <str> ] intEachTrial = bdata [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ - 0.3 , 0.6 ] possiblefreqs = np . unique ( freqEachTrial ) freqLabels = [ round ( x / 1000 , 1 ) for x in possiblefreqs ] possiblelaser = np . unique ( laserEachTrial ) possibleInts = np . unique ( intEachTrial ) laserTrialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , possiblefreqs , laserEachTrial , possiblelaser ) intTrialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , possiblefreqs , intEachTrial , possibleInts ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) for intInd , inten in enumerate ( possibleInts ) :          for indLaser in possiblelaser :              plt . subplot ( gs [ intInd + 1 , indLaser ] ) if indLaser == 0 :                  title = <str> + str ( inten ) + <str>  else :                  title = <str> + str ( inten ) + <str>  trialsEachCond = laserTrialsEachCond [ : , : , indLaser ] & intTrialsEachCond [ : , : , intInd ] pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , labels = freqLabels ) xlabel = <str> ylabel = <str> plt . title ( title ) plt . xlabel ( xlabel ) plt . ylabel ( ylabel )    def laser_tuning_curve ( bdata , ephysData , gs ) :      plt . subplot ( gs [ 3 , 1 ] ) freqEachTrial = bdata [ <str> ] laserEachTrial = bdata [ <str> ] intEachTrial = bdata [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ 0.0 , 0.1 ] possiblefreqs = np . unique ( freqEachTrial ) freqLabels = [ round ( x / 1000 , 1 ) for x in possiblefreqs ] possiblelaser = np . unique ( laserEachTrial ) possibleInts = np . unique ( intEachTrial ) laserTrialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , possiblefreqs , laserEachTrial , possiblelaser ) intTrialsEachCond = behavioranalysis . find_trials_each_combination ( freqEachTrial , possiblefreqs , intEachTrial , possibleInts ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) for intInd , inten in enumerate ( possibleInts ) :          line = <str> if intInd == 0 :              line = <str>  for indLaser in possiblelaser :              color = <str> if indLaser == 1 :                  color = <str>  laser = <str> if indLaser == 1 :                  laser = <str>  curveName = laser + str ( inten ) + <str> trialsEachCond = laserTrialsEachCond [ : , : , indLaser ] & intTrialsEachCond [ : , : , intInd ] try :                  freq_avgs = spikesanalysis . avg_num_spikes_each_condition ( trialsEachCond , indexLimitsEachTrial )  except :                  behavIndexLimitsEachTrial = indexLimitsEachTrial [ 0 : 2 , : - 1 ] freq_avgs = spikesanalysis . avg_num_spikes_each_condition ( trialsEachCond , behavIndexLimitsEachTrial )  xpoints = [ x for x in range ( 0 , len ( possiblefreqs ) ) ] plt . plot ( xpoints , freq_avgs , linestyle = line , color = color , marker = <str> , label = curveName ) plt . xticks ( xpoints , freqLabels ) plt . hold ( True )   plt . title ( <str> ) plt . legend ( fontsize = <str> ) plt . hold ( False )  for indRow , dbRow in goodCells . iterrows ( ) :      print ( indRow ) cell = ephyscore . Cell ( dbRow ) noiseSessionInds = cell . get_session_inds ( <str> ) plt . figure ( figsize = ( 12 , 16 ) ) gs = gridspec . GridSpec ( 4 , 2 ) gs . update ( hspace = 0.3 ) if len ( noiseSessionInds ) != 0 :          for sessionInd in noiseSessionInds :              try :                  ephysData = cell . load_ephys_by_index ( sessionInd ) noise_raster ( ephysData , gs )  except :                  print ( <str> )    tuningSessionInds = cell . get_session_inds ( <str> ) if len ( tuningSessionInds ) != 0 :          for sessionInd in tuningSessionInds :              try :                  bdata = cell . load_behavior_by_index ( sessionInd ) ephysData = cell . load_ephys_by_index ( sessionInd ) tuning_raster ( bdata , ephysData , gs ) tuning_curve ( bdata , ephysData , gs )  except :                  print ( <str> )    laserTuningSessionInds = cell . get_session_inds ( <str> ) if len ( laserTuningSessionInds ) != 0 :          for sessionInd in laserTuningSessionInds :              try :                  bdata = cell . load_behavior_by_index ( sessionInd ) ephysData = cell . load_ephys_by_index ( sessionInd ) laser_tuning_raster ( bdata , ephysData , gs ) laser_tuning_curve ( bdata , ephysData , gs )  except :                  print ( <str> )    print ( <str> + str ( indRow ) ) figname = <str> . format ( subject , dbRow [ <str> ] , int ( dbRow [ <str> ] ) , dbRow [ <str> ] , dbRow [ <str> ] ) plt . savefig ( figname ) plt . close ( )   