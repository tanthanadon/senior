import discrimination_analysis as discrm import numpy as np import os from pylab import * eventID = 0 def plottingAllFreqRaster ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) :      allFreqData = discrm . allFreqData ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) spikeTimesFromEventOnset = allFreqData [ 0 ] sortedIndexForEachSpike = allFreqData [ 1 ] numTrialsEachFreq = allFreqData [ 2 ] possibleFreq = allFreqData [ 3 ] meanSpikesEachFrequency = allFreqData [ 4 ] xCoordinatesPlot = allFreqData [ 5 ] spikeMeanInBin1 = allFreqData [ 6 ] spikeMeanInBin2 = allFreqData [ 7 ] responseRange = [ startTime , endTime ] close ( ) rastorFreq1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 3 , rowspan = 2 ) plot ( spikeTimesFromEventOnset , sortedIndexForEachSpike , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) numTrials = cumsum ( numTrialsEachFreq ) for indf , num in enumerate ( numTrials ) :          rastorFreq1 . axhline ( y = num , xmin = 0 , xmax = 1 , color = <str> , zorder = 0 )  tickPositions = numTrials - mean ( numTrialsEachFreq ) / 2 tickLabels = [ <str> % ( possibleFreq [ indf ] / 1000.0 ) for indf in range ( len ( possibleFreq ) ) ] rastorFreq1 . set_yticks ( tickPositions ) rastorFreq1 . set_yticklabels ( tickLabels ) ylabel ( <str> . format ( numTrials [ - 1 ] ) ) title ( ephysSession + <str> . format ( tetrodeID ) ) xlabel ( <str> ) rastorFreq2 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 3 ) , colspan = 1 , rowspan = 2 ) rastorFreq2 . set_xscale ( <str> ) plot ( possibleFreq , meanSpikesEachFrequency , <str> ) ylabel ( <str> . format ( * responseRange ) ) xlabel ( <str> ) histogram3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin1 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) histogram4 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin2 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) show ( ) return ;  def plottingAllFreqCompareRaster ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) :      allFreqCompareData = discrm . allFreqCompareData ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) spikeTimesFromEventOnsetTrials1 = allFreqCompareData [ 0 ] spikeTimesFromEventOnsetTrials2 = allFreqCompareData [ 1 ] sortedIndexForEachSpikeTrials1 = allFreqCompareData [ 2 ] sortedIndexForEachSpikeTrials2 = allFreqCompareData [ 3 ] tickPossibleFreq1 = allFreqCompareData [ 4 ] tickNumTrialsTrials1 = allFreqCompareData [ 5 ] tickNumTrialsEachFreqTrials1 = allFreqCompareData [ 6 ] tickPossibleFreq2 = allFreqCompareData [ 7 ] tickNumTrialsTrials2 = allFreqCompareData [ 8 ] tickNumTrialsEachFreqTrials2 = allFreqCompareData [ 9 ] xCoordinatesPlot = allFreqCompareData [ 10 ] spikeMeanInBin1 = allFreqCompareData [ 11 ] spikeMeanInBin2 = allFreqCompareData [ 12 ] close ( ) rastorFreq1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 2 , rowspan = 2 ) plot ( spikeTimesFromEventOnsetTrials1 , sortedIndexForEachSpikeTrials1 , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) for indf , num in enumerate ( tickNumTrialsTrials1 ) :          rastorFreq1 . axhline ( y = num , xmin = 0 , xmax = 1 , color = <str> , zorder = 0 )  tickPositions1 = tickNumTrialsTrials1 - mean ( tickNumTrialsEachFreqTrials1 ) / 2 tickLabels1 = [ <str> % ( tickPossibleFreq1 [ indf ] / 1000.0 ) for indf in range ( len ( tickPossibleFreq1 ) ) ] rastorFreq1 . set_yticks ( tickPositions1 ) rastorFreq1 . set_yticklabels ( tickLabels1 ) ylabel ( <str> . format ( tickNumTrialsTrials1 [ - 1 ] ) ) title ( ephysSession + <str> . format ( tetrodeID ) ) xlabel ( <str> ) rastorFreq2 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 2 ) , colspan = 2 , rowspan = 2 ) plot ( spikeTimesFromEventOnsetTrials2 , sortedIndexForEachSpikeTrials2 , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) for indf , num in enumerate ( tickNumTrialsTrials2 ) :          rastorFreq2 . axhline ( y = num , xmin = 0 , xmax = 1 , color = <str> , zorder = 0 )  tickPositions2 = tickNumTrialsTrials2 - mean ( tickNumTrialsEachFreqTrials2 ) / 2 tickLabels2 = [ <str> % ( tickPossibleFreq2 [ indf ] / 1000.0 ) for indf in range ( len ( tickPossibleFreq2 ) ) ] rastorFreq2 . set_yticks ( tickPositions2 ) rastorFreq2 . set_yticklabels ( tickLabels2 ) ylabel ( <str> . format ( tickNumTrialsTrials2 [ - 1 ] ) ) title ( ephysSession + <str> . format ( tetrodeID ) ) xlabel ( <str> ) histogram3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin1 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) histogram4 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin2 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) show ( ) return ;  def plottingOneFreqCompareRaster ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) :      oneFreqCompareData = discrm . oneFreqCompareData ( subject , ephysSession , behaviorSession , tetrodeID , FreqInd , binTime , startTime , endTime , startRange , endRange ) spikeTimesFromEventOnsetTrials1 = allFreqData [ 0 ] spikeTimesFromEventOnsetTrials2 = allFreqData [ 1 ] sortedIndexForEachSpikeTrials1 = allFreqData [ 2 ] sortedIndexForEachSpikeTrials2 = allFreqData [ 3 ] xCoordinatesPlot = allFreqData [ 8 ] spikeMeanInBin1 = allFreqData [ 9 ] spikeMeanInBin2 = allFreqData [ 10 ] close ( ) rastorFreq1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 2 , rowspan = 2 ) plot ( spikeTimesFromEventOnsetOneFreqTrials1 , sortedIndexForEachSpikeOneFreqTrials1 , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) ylabel1 ( <str> . format ( numTrials1 [ - 1 ] ) ) title1 ( ephysSession + <str> . format ( tetrodeID ) ) xlabel1 ( <str> ) rastorFreq2 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) , colspan = 2 , rowspan = 2 ) plot ( spikeTimesFromEventOnsetOneFreqTrials2 , sortedIndexForEachSpikeOneFreqTrials2 , <str> , ms = 1 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) ylabel2 ( <str> . format ( numTrials2 [ - 1 ] ) ) title2 ( ephysSession + <str> . format ( tetrodeID ) ) xlabel2 ( <str> ) histogram3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin1 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) histogram4 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) , colspan = 2 ) bar ( xCoordinatesPlot , spikeMeanInBin2 , width = binTime ) ylabel ( <str> . format ( binTime ) ) xlabel ( <str> ) show ( ) return ;   