from jaratoolbox import settings import os import glob import sys import importlib import re import numpy as np mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) clusNum = 12 numTetrodes = 8 qualityList = [ 1 , 6 ] minZVal = 3.0 maxISIviolation = 0.02 minPVal = 0.05 minDepth = 2.1 maxDepth = 3.27 minFileName = <str> subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> processedDir = os . path . join ( settings . EPHYS_PATH , subject + <str> ) maxZFilename = os . path . join ( processedDir , <str> ) minPerfFilename = os . path . join ( processedDir , <str> ) minTrialFilename = os . path . join ( processedDir , <str> ) ISIFilename = os . path . join ( processedDir , <str> ) modIFilename = os . path . join ( processedDir , <str> ) class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    maxZFile = open ( maxZFilename , <str> ) minPerfFile = open ( minPerfFilename , <str> ) minTrialFile = open ( minTrialFilename , <str> ) ISIFile = open ( ISIFilename , <str> ) minPerfFile . readline ( ) minPerfList = minPerfFile . read ( ) . split ( ) minTrialFile . readline ( ) minTrialFile . readline ( ) minTrialDict = { } for lineCount , line in enumerate ( minTrialFile ) :      minTrialStr = line . split ( <str> ) trialFreq = minTrialStr [ 1 ] . split ( ) minTrialDict . update ( { minTrialStr [ 0 ] [ 1 : ] : trialFreq } )  maxZDict = nestedDict ( ) behavName = <str> for line in maxZFile :      behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :          behavName = behavLine [ 1 ] [ : - 1 ]  else :          maxZDict [ behavName ] [ freqLine [ 0 ] ] = freqLine [ 1 ] . split ( <str> ) [ 0 : - 1 ]   ISIDict = { } ephysName = <str> for line in ISIFile :      ephysLine = line . split ( <str> ) tetrodeLine = line . split ( ) tetrodeName = tetrodeLine [ 0 ] . split ( <str> ) if ( ephysLine [ 0 ] == <str> ) :          ephysName = ephysLine [ 1 ] [ : - 1 ] ISIDict . update ( { ephysName : np . full ( ( numTetrodes , clusNum ) , 1.0 ) } )  else :          ISIDict [ ephysName ] [ int ( tetrodeName [ 1 ] ) ] = tetrodeLine [ 1 : ]   modIFile = open ( modIFilename , <str> ) modIDict = { } modSigDict = { } modDirectionScoreDict = { } behavName = <str> behavName = <str> for line in modIFile :      splitLine = line . split ( <str> ) if ( splitLine [ 0 ] == <str> ) :          behavName = splitLine [ 1 ] [ : - 1 ]  elif ( splitLine [ 0 ] == <str> ) :          modIDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]  elif ( splitLine [ 0 ] == <str> ) :          modSigDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]  elif ( splitLine [ 0 ] == <str> ) :          modDirectionScoreDict [ behavName ] = [ float ( x ) for x in splitLine [ 1 ] . split ( <str> ) [ 0 : - 1 ] ]   modIFile . close ( ) ISIFile . close ( ) maxZFile . close ( ) minPerfFile . close ( ) minTrialFile . close ( ) copyReportsToDir = <str> + subject + <str> + minFileName + <str> if not os . path . exists ( copyReportsToDir ) :      os . makedirs ( copyReportsToDir )  os . chdir ( copyReportsToDir ) files = glob . glob ( <str> ) for filename in files :      os . unlink ( filename )  for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          print oneCell . behavSession  behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession tetrode = oneCell . tetrode cluster = oneCell . cluster clusterQuality = oneCell . quality [ cluster - 1 ] depth = oneCell . depth if clusterQuality not in qualityList :          continue  elif behavSession not in minPerfList :          continue  elif behavSession not in minTrialDict :          continue  elif behavSession not in maxZDict :          continue  elif ephysSession not in ISIDict :          continue  elif ( ( depth < minDepth ) or ( depth > maxDepth ) ) :          continue  clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) midFreq = minTrialDict [ behavSession ] [ 0 ] if ( ( abs ( float ( maxZDict [ behavSession ] [ midFreq ] [ clusterNumber ] ) ) >= minZVal ) & ( ISIDict [ ephysSession ] [ tetrode - 1 ] [ cluster - 1 ] <= maxISIviolation ) ) :          for freq in minTrialDict [ behavSession ] :              if ( modSigDict [ behavSession ] [ clusterNumber ] <= minPVal ) :                  os . system ( <str> % ( subject , subject , behavSession , str ( tetrode ) , str ( cluster ) , subject , minFileName ) )      