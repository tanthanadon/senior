from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import settings import numpy as np from pylab import * import os SAMPLING_RATE = 30000.0 timeRange = [ - 0.4 , 1.6 ] subject = sys . argv [ 1 ] if len ( sys . argv ) > 2 :      sessionInd = int ( sys . argv [ 2 ] )  else :      sessionInd = - 1  ephysRoot = os . path . join ( settings . EPHYS_PATH , subject ) ephysSession = sort ( os . listdir ( ephysRoot ) ) [ sessionInd ] ephysDir = os . path . join ( ephysRoot , ephysSession ) tetrodes = [ 6 ] nTetrodes = len ( tetrodes ) event_filename = os . path . join ( ephysDir , <str> ) ev = loadopenephys . Events ( event_filename ) eventTimes = np . array ( ev . timestamps ) / SAMPLING_RATE eventOnsetTimes = eventTimes [ ( ev . eventID == 1 ) & ( ev . eventChannel == 0 ) ] clf ( ) dEv = np . r_ [ 1 , np . diff ( eventOnsetTimes ) ] eventOnsetTimes = eventOnsetTimes [ dEv > 0.4 ] ax = [ subplot ( nTetrodes , 1 , 1 ) ] for ind , tetrodeID in enumerate ( tetrodes ) :      spikeFilename = os . path . join ( ephysDir , <str> . format ( tetrodeID ) ) sp = loadopenephys . DataSpikes ( spikeFilename ) kkDataDir = os . path . dirname ( spikeFilename ) + <str> clusterFilename = <str> . format ( tetrodeID ) fullPath = os . path . join ( kkDataDir , clusterFilename ) clusters = np . fromfile ( fullPath , dtype = <str> , sep = <str> ) [ 1 : ] clustersToPlot = [ 2 , 3 , 4 , 5 , 6 , 7 ] for indc , clusterID in enumerate ( clustersToPlot ) :          try :              spkTimeStamps = np . array ( sp . timestamps [ clusters == clusterID ] ) / SAMPLING_RATE ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) ax . append ( subplot ( len ( clustersToPlot ) , 1 , indc + 1 , sharex = ax [ 0 ] ) ) plot ( spikeTimesFromEventOnset , trialIndexForEachSpike , <str> , ms = 3 ) axvline ( x = 0 , ymin = 0 , ymax = 1 , color = <str> ) xlim ( timeRange ) if indc == 0 :                  title ( ephysDir )  ylabel ( <str> . format ( tetrodeID , clusterID ) )  except AttributeError :              print <str> . format ( spikeFilename ) pass    xlabel ( <str> ) draw ( ) show ( )  