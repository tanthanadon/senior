from jaratoolbox import behavioranalysis from jaratoolbox import loadbehavior import numpy as np from pylab import * from jaratoolbox import settings import os experimenter = <str> animalsNames = [ <str> ] sessionsPre = [ <str> , <str> , <str> , <str> ] sessionsPost = [ <str> , <str> , <str> , <str> , <str> ] sessionsVisual = [ <str> , <str> , <str> , <str> , <str> , <str> ] sessionsMorePost = [ <str> , <str> , <str> , <str> ] typeEachSessionLabels = [ <str> , <str> , <str> , <str> ] typeEachSession = len ( sessionsPre ) * [ 0 ] + len ( sessionsPost ) * [ 1 ] + len ( sessionsVisual ) * [ 2 ] + len ( sessionsMorePost ) * [ 3 ] allSessions = sessionsPre + sessionsPost + sessionsVisual + sessionsMorePost nAnimals = len ( animalsNames ) nSessions = len ( allSessions ) nCorrectEachSession = np . empty ( nSessions ) nValidEachSession = np . empty ( nSessions ) clf ( ) gcf ( ) . subplots_adjust ( bottom = 0.15 ) for inda , animalName in enumerate ( animalsNames ) :      subplot ( 1 , nAnimals , inda + 1 ) for inds , oneSession in enumerate ( allSessions ) :          typeThisSession = typeEachSessionLabels [ typeEachSession [ inds ] ] if ( typeThisSession == <str> ) | ( typeThisSession == <str> ) | ( typeThisSession == <str> ) :              paradigm = <str>  elif typeThisSession == <str> :              paradigm = <str>  else :              raise TypeError ( <str> )  try :              fname = loadbehavior . path_to_behavior_data ( animalName , experimenter , paradigm , oneSession ) bdata = loadbehavior . BehaviorData ( fname )  except IOError :              print <str> . format ( fname ) continue  nCorrectEachSession [ inds ] = bdata [ <str> ] [ - 1 ] nValidEachSession [ inds ] = bdata [ <str> ] [ - 1 ]  avPerfEachSession = nCorrectEachSession / nValidEachSession colorEachType = [ <str> , <str> , <str> , <str> ] markerFaceEachType = [ <str> , <str> , <str> , <str> ] fontSize = 12 ax = gca ( ) xValues = np . arange ( nSessions ) + 1 plot ( xValues , 100 * avPerfEachSession , <str> , color = <str> ) axhline ( 100 * 0.5 , color = <str> , ls = <str> ) axhline ( 100 * 0.75 , color = <str> , ls = <str> ) for inds , perfOneSession in enumerate ( avPerfEachSession ) :          hold ( True ) thisColor = colorEachType [ typeEachSession [ inds ] ] thisFace = markerFaceEachType [ typeEachSession [ inds ] ] plot ( xValues [ inds ] , 100 * perfOneSession , <str> , ms = 6 , mew = 2 , mec = thisColor , mfc = thisFace )  ylim ( 100 * np . array ( [ 0.4 , 1 ] ) ) ax . set_ylabel ( <str> , fontsize = fontSize ) xlabel ( <str> , fontsize = fontSize ) title ( animalName ) draw ( ) show ( )  outputDir = <str> PRINT_FIGURE = 1 figFormat = <str> if PRINT_FIGURE :      plt . gcf ( ) . set_size_inches ( ( 5 , 4 ) ) figName = <str> . format ( animalName , figFormat ) fullName = os . path . join ( outputDir , figName ) print <str> % fullName plt . gcf ( ) . set_frameon ( False ) plt . savefig ( fullName , format = figFormat ) plt . gcf ( ) . set_frameon ( True ) print <str> pass   