from jaratoolbox import settings from jaratoolbox import loadopenephys import numpy as np import os from pylab import * from jaratoolbox import spikesorting reload ( spikesorting ) from jaratoolbox import loadbehavior from jaratoolbox import ephyscore from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib import re mouseName = <str> behavSession = <str> tetrode = 2 cluster = 11 channel_to_plot = 0 allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) ISIcutoff = 0.002 SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 ephysRootDir = settings . EPHYS_PATH def waveformPlot ( waveform1 , waveform2 ) :      plt . subplot ( 211 ) plt . plot ( waveform1 ) plt . subplot ( 212 ) plt . plot ( waveform2 ) plt . show ( )  cellID = allcells . cellDB . findcell ( mouseName , behavSession , tetrode , cluster ) oneCell = allcells . cellDB [ cellID ] spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ISI = np . diff ( spkTimeStamps ) if np . any ( ISI < 0 ) :      raise <str>  if len ( ISI ) == 0 :      ISI = np . array ( 10 )  ISIVioBool = ISI < ISIcutoff fractionViolation = np . mean ( ISIVioBool ) print <str> , ISIcutoff , <str> , fractionViolation ISIVioBoolFirst = np . append ( ISIVioBool , False ) ISIVioBoolSecond = np . append ( False , ISIVioBool ) dataDir = os . path . join ( settings . EPHYS_PATH , mouseName , oneCell . ephysSession ) tetrodeFile = os . path . join ( dataDir , <str> . format ( tetrode ) ) clustersDir = os . path . join ( settings . EPHYS_PATH , mouseName , oneCell . ephysSession + <str> ) dataTT = loadopenephys . DataSpikes ( tetrodeFile ) dataTT . samples = dataTT . samples . astype ( float ) - 2 ** 15 dataTT . samples = ( 1000.0 / dataTT . gain [ 0 , 0 ] ) * dataTT . samples dataTT . timestamps = dataTT . timestamps / dataTT . samplingRate clustersFile = os . path . join ( clustersDir , <str> % tetrode ) if os . path . isfile ( clustersFile ) :      dataTT . set_clusters ( clustersFile )  else :      print ( <str> . format ( tetrode ) )  fetFilename = os . path . join ( clustersDir , <str> % tetrode ) fetFile = open ( fetFilename , <str> ) numFetclusters = fetFile . readline ( ) fetList = fetFile . read ( ) . split ( <str> ) for indF , fet in enumerate ( fetList ) :      fetList [ indF ] = fet . split ( )  fetList = np . asarray ( fetList [ : - 1 ] ) waveFet = fetList [ dataTT . clusters == cluster ] waveforms = dataTT . samples [ dataTT . clusters == cluster ] waveforms_first = waveforms [ ISIVioBoolFirst ] waveforms_second = waveforms [ ISIVioBoolSecond ] nISIVio = len ( waveforms_first ) allWaves = [ ] for indISI in range ( nISIVio ) :      allWaves . append ( ( waveforms_first [ indISI ] [ channel_to_plot ] , waveforms_second [ indISI ] [ channel_to_plot ] ) )  flipPlots = extraplots . FlipThrough ( waveformPlot , allWaves )  