import os import numpy as np import pdb import matplotlib . pyplot as plt from jaratoolbox import settings from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from jaratoolbox import spikesorting from jaratoolbox import extraplots import matplotlib . patches as mpatches EPHYS_PATH = settings . EPHYS_PATH BEHAVIOR_PATH = settings . BEHAVIOR_PATH colorDictRC = { <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> , <str> : <str> } colorDictMovement = { <str> : <str> , <str> : <str> } EPHYS_SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 minBlockSize = 20 def set_clusters_from_file ( animal , session , tetrode ) :      clustersDir = os . path . join ( EPHYS_PATH , animal , session + <str> ) if not os . path . exists ( clustersDir ) :          print <str> return None  else :          clusterFile = os . path . join ( clustersDir , <str> % tetrode ) clusterList = np . fromfile ( clusterFile , dtype = <str> , sep = <str> ) [ 1 : ] return clusterList   def load_event_data ( animal , ephysSession ) :      fullEventFilename = os . path . join ( EPHYS_PATH , animal , ephysSession , <str> ) eventData = loadopenephys . Events ( fullEventFilename ) eventData . timestamps = np . array ( eventData . timestamps ) / EPHYS_SAMPLING_RATE return eventData  def load_spike_data ( animal , ephysSession , tetrode , cluster ) :      spikeFilename = os . path . join ( EPHYS_PATH , animal , ephysSession , <str> . format ( tetrode ) ) spikeData = loadopenephys . DataSpikes ( spikeFilename ) spikeData . timestamps = spikeData . timestamps / EPHYS_SAMPLING_RATE clustersDir = os . path . join ( EPHYS_PATH , animal , ephysSession ) + <str> clusterFilename = os . path . join ( clustersDir , <str> . format ( tetrode ) ) clusters = np . fromfile ( clusterFilename , dtype = <str> , sep = <str> ) [ 1 : ] spikeData . timestamps = spikeData . timestamps [ clusters == cluster ] spikeData . samples = spikeData . samples [ clusters == cluster , : , : ] spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples return spikeData  def plot_waveform_each_cluster ( animal , ephysSession , tetrode , cluster ) :      spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) wavesThisCluster = spikeData . samples spikesorting . plot_waveforms ( wavesThisCluster )  def plot_projections_each_cluster ( animal , ephysSession , tetrode , cluster ) :      spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) wavesThisCluster = spikeData . samples spikesorting . plot_projections ( wavesThisCluster )  def plot_events_in_time_each_cluster ( animal , ephysSession , tetrode , cluster ) :      spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) tsThisCluster = spikeData . timestamps spikesorting . plot_events_in_time ( tsThisCluster )  def plot_isi_loghist_each_cluster ( animal , ephysSession , tetrode , cluster ) :      spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) tsThisCluster = spikeData . timestamps spikesorting . plot_isi_loghist ( tsThisCluster )  def load_behavior_basic ( animal , behavSession ) :      behavFullPath = os . path . join ( BEHAVIOR_PATH , animal , behavSession ) bData = loadbehavior . BehaviorData ( behavFullPath ) return bData  def load_behavior_flexcat ( animal , behavSession ) :      behavFullPath = os . path . join ( BEHAVIOR_PATH , animal , behavSession ) bData = loadbehavior . FlexCategBehaviorData ( behavFullPath ) return bData  def plot_tuning_raster ( animal , ephysSession , behavSession , tetrode , cluster , intensity = 50 , timeRange = [ - 0.5 , 1 ] ) :      bdata = load_behavior_basic ( animal , behavSession ) spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) spikeTimestamps = spikeData . timestamps eventData = load_event_data ( animal , ephysSession ) eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] freqEachTrial = bdata [ <str> ] intensityEachTrial = bdata [ <str> ] possibleFreq = np . unique ( freqEachTrial ) possibleIntensity = np . unique ( intensityEachTrial ) if len ( possibleIntensity ) != 1 :          intensity = intensity trialsThisIntensity = [ intensityEachTrial == intensity ] freqEachTrial = freqEachTrial [ trialsThisIntensity ] intensityEachTrial = intensityEachTrial [ trialsThisIntensity ] eventOnsetTimes = eventOnsetTimes [ trialsThisIntensity ]  freqLabels = [ <str> . format ( freq / 1000.0 ) for freq in possibleFreq ] if len ( eventOnsetTimes ) == len ( intensityEachTrial ) + 1 :          eventOnsetTimes = eventOnsetTimes [ : - 1 ]  trialsEachFreq = behavioranalysis . find_trials_each_type ( freqEachTrial , possibleFreq ) ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachFreq , labels = freqLabels ) plt . xlabel ( <str> ) plt . xlim ( timeRange [ 0 ] + 0.1 , timeRange [ 1 ] ) plotTitle = <str> + str ( tetrode ) + <str> + str ( cluster ) + <str> plt . title ( plotTitle , fontsize = 10 )  def load_n_remove_missing_trials_2afc_behav ( animal , behavSession , ephysSession , tetrode , cluster ) :      bData = load_behavior_flexcat ( animal , behavSession ) eventData = load_event_data ( animal , ephysSession ) eventOnsetTimes = np . array ( eventData . timestamps ) soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) soundOnsetTimeEphys = eventOnsetTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bData [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( soundOnsetTimeEphys , soundOnsetTimeBehav ) bData . remove_trials ( missingTrials ) return bData  def get_trials_each_cond_reward_change ( animal , behavSession , ephysSession , tetrode , cluster , freqToPlot , byBlock , colorCondDict ) :      bdata = load_n_remove_missing_trials_2afc_behav ( animal , behavSession , ephysSession , tetrode , cluster ) correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) numFreqs = len ( possibleFreq ) currentBlock = bdata [ <str> ] if freqToPlot == <str> :          freq = possibleFreq [ 0 ]  elif freqToPlot == <str> :          freq = possibleFreq [ 1 ]  oneFreq = bdata [ <str> ] == freq correctOneFreq = oneFreq & correct if byBlock :          bdata . find_trials_each_block ( ) numBlocks = bdata . blocks [ <str> ] trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :              correctTrialsEachBlock = correctTrialsEachBlock [ : , : - 1 ] numBlocks -= 1  trialsEachCond = correctTrialsEachBlock colorEachCond = np . empty ( numBlocks , dtype = object ) labelEachCond = np . empty ( numBlocks , dtype = object ) for blockNum in range ( numBlocks ) :              currentBlockLabel = currentBlock [ trialsEachBlock [ : , blockNum ] ] [ 0 ] if freqToPlot == <str> :                  if currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>  elif currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>  elif currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>   elif freqToPlot == <str> :                  if currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>  elif currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>  elif currentBlockLabel == bdata . labels [ <str> ] [ <str> ] :                      colorEachCond [ blockNum ] = colorCondDict [ <str> ] labelEachCond [ blockNum ] = <str>     else :          blockTypes = [ bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] , bdata . labels [ <str> ] [ <str> ] ] trialsEachType = behavioranalysis . find_trials_each_type ( currentBlock , blockTypes ) oneFreqCorrectBlockSameReward = correctOneFreq & trialsEachType [ : , 0 ] oneFreqCorrectBlockMoreLeft = correctOneFreq & trialsEachType [ : , 1 ] oneFreqCorrectBlockMoreRight = correctOneFreq & trialsEachType [ : , 2 ] trialsEachCond = np . c_ [ oneFreqCorrectBlockSameReward , oneFreqCorrectBlockMoreLeft , oneFreqCorrectBlockMoreRight ] if freqToPlot == <str> :              colorEachCond = [ colorCondDict [ <str> ] , colorCondDict [ <str> ] , colorCondDict [ <str> ] ] labelEachCond = [ <str> , <str> , <str> ]  elif freqToPlot == <str> :              colorEachCond = [ colorCondDict [ <str> ] , colorCondDict [ <str> ] , colorCondDict [ <str> ] ]  labelEachCond = [ <str> , <str> , <str> ]  return trialsEachCond , colorEachCond , labelEachCond  def get_intermediate_data_for_raster_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment , timeRange ) :      bdata = load_n_remove_missing_trials_2afc_behav ( animal , behavSession , ephysSession , tetrode , cluster ) eventData = load_event_data ( animal , ephysSession ) spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) if alignment == <str> :          soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) EventOnsetTimes = eventOnsetTimes [ soundOnsetEvents ]  elif alignment == <str> :          soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) EventOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] diffTimes = bdata [ <str> ] - bdata [ <str> ] EventOnsetTimes += diffTimes  elif alignment == <str> :          soundOnsetEvents = ( eventData . eventID == 1 ) & ( eventData . eventChannel == soundTriggerChannel ) EventOnsetTimes = eventOnsetTimes [ soundOnsetEvents ] diffTimes = bdata [ <str> ] - bdata [ <str> ] EventOnsetTimes += diffTimes  ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , EventOnsetTimes , timeRange ) return spikeTimesFromEventOnset , indexLimitsEachTrial  def plot_reward_change_raster ( animal , behavSession , ephysSession , tetrode , cluster , alignment = <str> , timeRange = [ - 0.3 , 0.4 ] , freqToPlot = <str> , byBlock = False , colorCondDict = colorDictRC ) :      spikeTimesFromEventOnset , indexLimitsEachTrial = get_intermediate_data_for_raster_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment , timeRange ) if freqToPlot == <str> or freqToPlot == <str> :          trialsEachCond , colorEachCond , labelEachCond = get_trials_each_cond_reward_change ( animal , behavSession , ephysSession , tetrode , cluster , freqToPlot = freqToPlot , byBlock = byBlock , colorCondDict = colorCondDict )  elif freqToPlot == <str> :          trialsEachCondList = [ ] colorEachCond = [ ] labelEachCond = [ ] for freq in [ <str> , <str> ] :              trialsEachCondThisFreq , colorEachCondThisFreq , labelEachCondThisFreq = get_trials_each_cond_reward_change ( animal , behavSession , ephysSession , tetrode , cluster , freqToPlot = freq , byBlock = byBlock , colorCondDict = colorCondDict ) trialsEachCondList . append ( trialsEachCondThisFreq ) colorEachCond . extend ( colorEachCondThisFreq ) labelEachCond . extend ( labelEachCondThisFreq )  trialsEachCond = np . concatenate ( trialsEachCondList , axis = 1 )  extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . ylabel ( <str> ) plt . xlim ( timeRange [ 0 ] + 0.1 , timeRange [ - 1 ] ) plt . title ( <str> . format ( behavSession , tetrode , cluster , alignment , freqToPlot ) , fontsize = 10 )  def plot_reward_change_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment = <str> , timeRange = [ - 0.3 , 0.4 ] , binWidth = 0.010 , freqToPlot = <str> , byBlock = False , colorCondDict = colorDictRC , smoothWinSize = 3 ) :      spikeTimesFromEventOnset , indexLimitsEachTrial = get_intermediate_data_for_raster_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment , timeRange ) if freqToPlot == <str> or freqToPlot == <str> :          trialsEachCond , colorEachCond , labelEachCond = get_trials_each_cond_reward_change ( animal , behavSession , ephysSession , tetrode , cluster , freqToPlot = freqToPlot , byBlock = byBlock , colorCondDict = colorCondDict )  elif freqToPlot == <str> :          trialsEachCondList = [ ] colorEachCond = [ ] labelEachCond = [ ] for freq in [ <str> , <str> ] :              trialsEachCondThisFreq , colorEachCondThisFreq , labelEachCondThisFreq = get_trials_each_cond_reward_change ( animal , behavSession , ephysSession , tetrode , cluster , freqToPlot = freq , byBlock = byBlock , colorCondDict = colorCondDict ) trialsEachCondList . append ( trialsEachCondThisFreq ) colorEachCond . extend ( colorEachCondThisFreq ) labelEachCond . extend ( labelEachCondThisFreq )  trialsEachCond = np . concatenate ( trialsEachCondList , axis = 1 )  timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = smoothWinSize pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = labelEachCond [ ind ] ) plt . legend ( loc = <str> , fontsize = 10 , handlelength = 0.2 , frameon = False , labelspacing = 0 , borderaxespad = 0.1 )  plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlabel ( <str> . format ( alignment ) ) plt . ylabel ( <str> ) plt . xlim ( timeRange [ 0 ] + 0.1 , timeRange [ - 1 ] )  def plot_movement_response_raster ( animal , behavSession , ephysSession , tetrode , cluster , alignment = <str> , timeRange = [ - 0.3 , 0.5 ] , colorCondDict = colorDictMovement ) :      spikeTimesFromEventOnset , indexLimitsEachTrial = get_intermediate_data_for_raster_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment , timeRange ) bdata = load_n_remove_missing_trials_2afc_behav ( animal , behavSession , ephysSession , tetrode , cluster ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] condLabels = [ <str> , <str> ] trialsEachCond = np . c_ [ leftward , rightward ] colorEachCond = [ colorCondDict [ <str> ] , colorCondDict [ <str> ] ] extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . ylabel ( <str> ) plt . xlim ( timeRange [ 0 ] + 0.1 , timeRange [ - 1 ] ) plt . title ( <str> . format ( behavSession , tetrode , cluster , alignment ) , fontsize = 10 )  def plot_movement_response_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment = <str> , timeRange = [ - 0.3 , 0.5 ] , binWidth = 0.010 , colorCondDict = colorDictMovement , smoothWinSize = 3 ) :      spikeTimesFromEventOnset , indexLimitsEachTrial = get_intermediate_data_for_raster_psth ( animal , behavSession , ephysSession , tetrode , cluster , alignment , timeRange ) bdata = load_n_remove_missing_trials_2afc_behav ( animal , behavSession , ephysSession , tetrode , cluster ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] condLabels = [ <str> , <str> ] trialsEachCond = np . c_ [ leftward , rightward ] colorEachCond = [ colorCondDict [ <str> ] , colorCondDict [ <str> ] ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = smoothWinSize pPSTH = extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) for ind , line in enumerate ( pPSTH ) :          plt . setp ( line , label = condLabels [ ind ] ) plt . legend ( loc = <str> , fontsize = 10 , handlelength = 0.2 , frameon = False , labelspacing = 0 , borderaxespad = 0.1 )  plt . axvline ( x = 0 , linewidth = 1 , color = <str> ) plt . xlabel ( <str> . format ( alignment ) ) plt . ylabel ( <str> ) plt . xlim ( timeRange [ 0 ] + 0.1 , timeRange [ - 1 ] )  def plot_noisebursts_response_raster ( animal , ephysSession , tetrode , cluster , alignment = <str> , timeRange = [ - 0.1 , 0.3 ] ) :      eventData = load_event_data ( animal , ephysSession ) spikeData = load_spike_data ( animal , ephysSession , tetrode , cluster ) spikeTimestamps = spikeData . timestamps eventOnsetTimes = np . array ( eventData . timestamps ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimestamps , eventOnsetTimes , timeRange ) plt . subplot ( 2 , 1 , 1 ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = [ ] , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . subplot ( 2 , 1 , 2 ) wavesThisCluster = spikeData . samples spikesorting . plot_waveforms ( wavesThisCluster ) plt . title ( <str> . format ( ephysSession , tetrode , cluster , alignment ) , fontsize = 10 ) plt . show ( )   