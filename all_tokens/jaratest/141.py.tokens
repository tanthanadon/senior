from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib import re mouseName = <str> behavSession = <str> tetrode = 2 cluster = 8 allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 binWidth = 0.010 outputDir = <str> timeRange = [ - 0.2 , 0.8 ] responseRange = [ 0.0 , 0.1 ] middleFreq = 1 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) minBlockSize = 20 cellID = allcells . cellDB . findcell ( mouseName , behavSession , tetrode , cluster ) oneCell = allcells . cellDB [ cellID ] subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . FlexCategBehaviorData ( behaviorFilename ) bdata . find_trials_each_block ( ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) oneFreq = bdata [ <str> ] == possibleFreq [ middleFreq ] correctOneFreq = oneFreq & correct trialsEachBlock = bdata . blocks [ <str> ] correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ] correctBlockSizes = sum ( correctTrialsEachBlock ) if ( correctBlockSizes [ - 1 ] < minBlockSize ) :      blockSizes = sum ( trialsEachBlock ) numBlocks = len ( trialsEachBlock [ 0 ] ) sumBlocks = sum ( blockSizes ) newTrialsLastBlock = np . zeros ( ( blockSizes [ - 1 ] , numBlocks ) , dtype = np . bool ) trialsEachBlock [ ( sumBlocks - blockSizes [ - 1 ] ) : ] = newTrialsLastBlock correctTrialsEachBlock = trialsEachBlock & correctOneFreq [ : , np . newaxis ]  trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :      colorEachBlock = [ <str> , <str> , <str> , <str> , <str> ]  else :      colorEachBlock = [ <str> , <str> , <str> , <str> , <str> ]  spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) plt . clf ( ) ax1 = plt . subplot2grid ( ( 3 , 1 ) , ( 0 , 0 ) , rowspan = 2 ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = correctTrialsEachBlock , colorEachCond = colorEachBlock , fillWidth = None , labels = None ) plt . ylabel ( <str> ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 ax2 = plt . subplot2grid ( ( 3 , 1 ) , ( 2 , 0 ) , sharex = ax1 ) extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = correctTrialsEachBlock , colorEachCond = colorEachBlock , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) nameFreq = str ( possibleFreq [ middleFreq ] ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , nameFreq , tetrodeClusterName , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :      os . makedirs ( directory )  plt . show ( ) leftRightTrials = [ trialsEachCond [ : , 0 ] , trialsEachCond [ : , 1 ] ] mod_sig = spikesanalysis . evaluate_modulation ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange , trialsEachCond = leftRightTrials ) print mod_sig  