from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib import re mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName + <str> sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 binWidth = 0.010 outputDir = <str> timeRange = [ - 0.2 , 0.8 ] middleFreq = 1 ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) clusNum = 12 numTetrodes = 8 qualityList = [ 1 ] minZVal = 3.0 maxISIviolation = 0.02 subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> processedDir = os . path . join ( settings . EPHYS_PATH , subject + <str> ) maxZFilename = os . path . join ( processedDir , <str> ) minPerfFilename = os . path . join ( processedDir , <str> ) minTrialFilename = os . path . join ( processedDir , <str> ) ISIFilename = os . path . join ( processedDir , <str> ) maxZFile = open ( maxZFilename , <str> ) minPerfFile = open ( minPerfFilename , <str> ) minTrialFile = open ( minTrialFilename , <str> ) ISIFile = open ( ISIFilename , <str> ) minPerfFile . readline ( ) minPerfList = minPerfFile . read ( ) . split ( ) minTrialFile . readline ( ) minTrialFile . readline ( ) minTrialDict = { } for lineCount , line in enumerate ( minTrialFile ) :      minTrialStr = line . split ( <str> ) trialFreq = minTrialStr [ 1 ] . split ( ) minTrialDict . update ( { minTrialStr [ 0 ] [ 1 : ] : trialFreq } )  class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    maxZFile . readline ( ) maxZDict = nestedDict ( ) behavName = <str> for line in maxZFile :      behavLine = line . split ( <str> ) freqLine = line . split ( ) if ( behavLine [ 0 ] == <str> ) :          behavName = behavLine [ 1 ] [ : - 1 ]  else :          maxZDict [ behavName ] [ freqLine [ 0 ] ] = freqLine [ 1 ] . split ( <str> ) [ 0 : - 1 ]   ISIDict = { } ephysName = <str> for line in ISIFile :      ephysLine = line . split ( <str> ) tetrodeLine = line . split ( ) tetrodeName = tetrodeLine [ 0 ] . split ( <str> ) if ( ephysLine [ 0 ] == <str> ) :          ephysName = ephysLine [ 1 ] [ : - 1 ] ISIDict . update ( { ephysName : np . full ( ( numTetrodes , clusNum ) , 1.0 ) } )  else :          ISIDict [ ephysName ] [ int ( tetrodeName [ 1 ] ) ] = tetrodeLine [ 1 : ]   maxZFile . close ( ) minPerfFile . close ( ) minTrialFile . close ( ) def main ( ) :      for cellID in range ( 0 , numOfCells ) :          oneCell = allcells . cellDB [ cellID ] behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession tetrode = oneCell . tetrode cluster = oneCell . cluster clusterQuality = oneCell . quality [ cluster - 1 ] if clusterQuality not in qualityList :              continue  elif behavSession not in minPerfList :              continue  elif behavSession not in minTrialDict :              continue  elif behavSession not in maxZDict :              continue  elif ephysSession not in ISIDict :              continue  clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) freq = minTrialDict [ behavSession ] [ 0 ] if ( ( abs ( float ( maxZDict [ behavSession ] [ freq ] [ clusterNumber ] ) ) >= minZVal ) & ( ISIDict [ ephysSession ] [ tetrode - 1 ] [ cluster - 1 ] >= maxISIviolation ) ) :              rasterBlock ( oneCell )    def rasterBlock ( oneCell ) :      subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . FlexCategBehaviorData ( behaviorFilename ) bdata . find_trials_each_block ( ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps eventOnsetTimes = eventTimes [ soundOnsetEvents ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) oneFreq = bdata [ <str> ] == possibleFreq [ middleFreq ] correctOneFreq = oneFreq & correct correctTrialsEachBlock = bdata . blocks [ <str> ] & correctOneFreq [ : , np . newaxis ] trialsEachCond = correctTrialsEachBlock ; if bdata [ <str> ] [ 0 ] == bdata . labels [ <str> ] [ <str> ] :          colorEachBlock = 3 * [ <str> , <str> ]  else :          colorEachBlock = 3 * [ <str> , <str> ]  ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) plt . clf ( ) ax1 = plt . subplot2grid ( ( 3 , 1 ) , ( 0 , 0 ) , rowspan = 2 ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = correctTrialsEachBlock , colorEachCond = colorEachBlock , fillWidth = None , labels = None ) plt . ylabel ( <str> ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 ax2 = plt . subplot2grid ( ( 3 , 1 ) , ( 2 , 0 ) , sharex = ax1 ) extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = correctTrialsEachBlock , colorEachCond = colorEachBlock , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) nameFreq = str ( possibleFreq [ middleFreq ] ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , nameFreq , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :          os . makedirs ( directory )  print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )  main ( )  