from jaratoolbox import loadbehavior from jaratoolbox import settings import os import numpy as np import sys import importlib import re mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) nameOfFile = <str> minTrialNumber = 30 subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> numOfCells = len ( allcells . cellDB ) ephysRootDir = settings . EPHYS_PATH outputDir = ephysRootDir experimenter = <str> paradigm = <str> Frequency = 1 finalOutputDir = outputDir + subject + <str> minTrialList = [ ] try :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) text_file . readline ( ) text_file . readline ( ) minTrialList = re . split ( <str> , text_file . read ( ) )  except :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) text_file . write ( <str> % minTrialNumber )  for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) if ( behavSession in minTrialList ) :              continue  behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] correctRightward = rightward & correct correctLeftward = leftward & correct possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) text_file . write ( <str> % behavSession ) Freq = possibleFreq [ Frequency ] FreqName = str ( Freq ) oneFreq = bdata [ <str> ] == Freq trialsToUseRight = correctRightward & oneFreq trialsToUseLeft = correctLeftward & oneFreq if ( ( sum ( trialsToUseRight ) >= minTrialNumber ) & ( sum ( trialsToUseLeft ) >= minTrialNumber ) ) :              text_file . write ( <str> % FreqName )    text_file . close ( ) print <str>  