from PySide import QtGui from taskontrol . core import dispatcher from taskontrol . core import paramgui from taskontrol . core import savedata from taskontrol . settings import rigsettings from taskontrol . core import statematrix from taskontrol . plugins import speakercalibration from taskontrol . plugins import manualcontrol from numpy import log import numpy as np import itertools import random from taskontrol . plugins import soundclient import time if rigsettings . OUTPUTS . has_key ( <str> ) :      trialStartSync = [ <str> ]  else :      trialStartSync = [ ]  if rigsettings . OUTPUTS . has_key ( <str> ) :      stimSync = [ <str> ]  else :      stimSync = [ ]  if rigsettings . OUTPUTS . has_key ( <str> ) :      laserSync = [ <str> , <str> ]  else :      laserSync = [ <str> ]  class Paradigm ( QtGui . QMainWindow ) :      def __init__ ( self , parent = None , paramfile = None , paramdictname = None ) :          super ( Paradigm , self ) . __init__ ( parent ) self . name = <str> smServerType = rigsettings . STATE_MACHINE_TYPE self . spkCal = speakercalibration . Calibration ( rigsettings . SPEAKER_CALIBRATION_SINE ) self . noiseCal = speakercalibration . NoiseCalibration ( rigsettings . SPEAKER_CALIBRATION_NOISE ) self . dispatcherModel = dispatcher . Dispatcher ( serverType = smServerType , interval = 0.1 ) self . dispatcherView = dispatcher . DispatcherGUI ( model = self . dispatcherModel ) self . manualControl = manualcontrol . ManualControl ( self . dispatcherModel . statemachine ) self . params = paramgui . Container ( ) self . params [ <str> ] = paramgui . StringParam ( <str> , value = <str> , group = <str> ) self . params [ <str> ] = paramgui . StringParam ( <str> , value = <str> , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 2000 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 40000 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 16 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 60 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 60 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 1 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0.01 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 2 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 1 , group = <str> ) self . params [ <str> ] = paramgui . MenuParam ( <str> , [ <str> , <str> ] , value = 1 , group = <str> ) self . params [ <str> ] = paramgui . MenuParam ( <str> , [ <str> , <str> , <str> , <str> , <str> , <str> , <str> , <str> ] , value = 2 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , units = <str> , enabled = False , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , enabled = False , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , enabled = False , group = <str> , decimals = 4 ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , enabled = False , group = <str> , decimals = 4 ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , enabled = False , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , group = <str> ) self . params [ <str> ] = paramgui . NumericParam ( <str> , value = 0 , group = <str> ) timingParams = self . params . layout_group ( <str> ) self . params . from_file ( paramfile , paramdictname ) self . sm = statematrix . StateMatrix ( inputs = rigsettings . INPUTS , outputs = rigsettings . OUTPUTS , readystate = <str> ) self . saveData = savedata . SaveData ( rigsettings . DATA_DIR , remotedir = rigsettings . REMOTE_DIR ) self . saveData . checkInteractive . setChecked ( True ) self . centralWidget = QtGui . QWidget ( ) layoutMain = QtGui . QHBoxLayout ( ) layoutCol1 = QtGui . QVBoxLayout ( ) layoutCol2 = QtGui . QVBoxLayout ( ) layoutMain . addLayout ( layoutCol1 ) layoutMain . addLayout ( layoutCol2 ) layoutCol1 . addWidget ( self . dispatcherView ) layoutCol1 . addWidget ( self . saveData ) layoutCol1 . addWidget ( self . manualControl ) self . clearButton = QtGui . QPushButton ( <str> , self ) self . clearButton . clicked . connect ( self . clear_tone_list ) layoutCol1 . addWidget ( self . clearButton ) layoutCol2 . addWidget ( timingParams ) self . centralWidget . setLayout ( layoutMain ) self . setCentralWidget ( self . centralWidget ) self . dispatcherModel . prepareNextTrial . connect ( self . prepare_next_trial ) self . saveData . buttonSaveData . clicked . connect ( self . save_to_file ) print <str> print <str> time . sleep ( 0.2 ) self . soundClient = soundclient . SoundClient ( ) self . soundClient . start ( ) self . trialParams = [ ] self . soundParamList = [ ]  def populate_sound_params ( self ) :          maxFreq = self . params [ <str> ] . get_value ( ) minFreq = self . params [ <str> ] . get_value ( ) numFreqs = self . params [ <str> ] . get_value ( ) toneList = np . logspace ( np . log10 ( minFreq ) , np . log10 ( maxFreq ) , num = numFreqs ) minInt = self . params [ <str> ] . get_value ( ) maxInt = self . params [ <str> ] . get_value ( ) numInt = self . params [ <str> ] . get_value ( ) ampList = np . linspace ( minInt , maxInt , num = numInt ) productList = list ( itertools . product ( toneList , ampList ) ) randomMode = self . params [ <str> ] . get_string ( ) if randomMode == <str> :              random . shuffle ( productList )  else :              pass  self . soundParamList = productList  def logscale ( self , minFreq , maxFreq , numFreqs ) :          slope = ( log ( maxFreq ) - log ( minFreq ) ) / ( numFreqs - 1 ) xVals = range ( numFreqs ) logs = [ slope * x + log ( minFreq ) for x in xVals ] logs = np . array ( logs ) vals = np . exp ( logs ) return vals  def prepare_next_trial ( self , nextTrial ) :          if nextTrial > 0 :              self . params . update_history ( )  self . sm . reset_transitions ( ) randNum = ( 2 * np . random . random ( 1 ) [ 0 ] - 1 ) isi = self . params [ <str> ] . get_value ( ) + self . params [ <str> ] . get_value ( ) * randNum try :              self . trialParams = self . soundParamList . pop ( 0 )  except IndexError :              self . populate_sound_params ( ) self . trialParams = self . soundParamList . pop ( 0 )  stimType = self . params [ <str> ] . get_string ( ) stimDur = self . params [ <str> ] . get_value ( ) if stimType in [ <str> , <str> ] :              targetAmp = self . noiseCal . find_amplitude ( self . trialParams [ 1 ] )  else :              targetAmp = self . spkCal . find_amplitude ( self . trialParams [ 0 ] , self . trialParams [ 1 ] )  if stimType == <str> :              sound = { <str> : <str> , <str> : stimDur , <str> : targetAmp , <str> : self . trialParams [ 0 ] }  elif stimType == <str> :              sound = { <str> : <str> , <str> : self . trialParams [ 0 ] , <str> : stimDur , <str> : targetAmp , <str> : 12 , <str> : 1.2 }  elif stimType == <str> :              sound = { <str> : <str> , <str> : stimDur , <str> : targetAmp }  elif stimType == <str> :              sound = { <str> : <str> , <str> : stimDur , <str> : targetAmp , <str> : self . trialParams [ 0 ] }  elif stimType == <str> :              sound = { <str> : <str> , <str> : stimDur , <str> : targetAmp , <str> : self . trialParams [ 0 ] }  if ( stimType == <str> ) or ( stimType == <str> ) :              stimOutput = stimSync + laserSync serialOutput = 0  elif stimType == <str> :              stimOutput = stimSync + [ <str> , <str> , <str> ] serialOutput = 0  else :              stimOutput = stimSync serialOutput = 1 self . soundClient . set_sound ( 1 , sound )  if stimType == <str> :              laserProbability = self . params [ <str> ] . get_value ( ) if random . random ( ) <= laserProbability :                  laserOutput = laserSync self . params [ <str> ] . set_value ( 1 )  else :                  laserOutput = [ ] self . params [ <str> ] . set_value ( 0 )   laserOnset = self . params [ <str> ] . get_value ( ) laserDuration = self . params [ <str> ] . get_value ( ) laserOffset = laserOnset + laserDuration self . params [ <str> ] . set_value ( self . trialParams [ 0 ] ) self . params [ <str> ] . set_value ( self . trialParams [ 1 ] ) self . params [ <str> ] . set_value ( targetAmp [ 0 ] ) self . params [ <str> ] . set_value ( targetAmp [ 1 ] ) soa = 0.2 if stimType == <str> :              self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = soa - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = soa - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = soa - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = soa - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = stimOutput )  elif stimType == <str> :              if ( laserOnset < 0 ) and ( laserOffset <= 0 ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = laserDuration , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = - laserOnset - laserDuration , transitions = { <str> : <str> } , outputsOff = laserOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = stimOutput )  elif ( laserOnset < 0 ) and ( laserOffset <= stimDur ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = - laserOnset , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = laserOffset , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur - laserOffset , transitions = { <str> : <str> } , outputsOff = laserOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = stimOutput )  elif ( laserOnset < 0 ) and ( laserOffset > stimDur ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = - laserOnset , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = laserOffset - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = laserOutput )  elif ( laserOnset >= 0 ) and ( laserOnset <= stimDur ) and ( laserOffset <= stimDur ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = laserOnset , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = laserDuration , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur - laserOffset , transitions = { <str> : <str> } , outputsOff = laserOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = stimOutput )  elif ( laserOnset >= 0 ) and ( laserOnset <= stimDur ) and ( laserOffset > stimDur ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = laserOnset , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = stimDur - laserOnset , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = laserOffset - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = laserOutput )  elif ( laserOnset > stimDur ) :                  self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = laserOnset - stimDur , transitions = { <str> : <str> } , outputsOff = stimOutput ) self . sm . add_state ( name = <str> , statetimer = laserDuration , transitions = { <str> : <str> } , outputsOn = laserOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = laserOutput )   else :              self . sm . add_state ( name = <str> , statetimer = 0 , transitions = { <str> : <str> } ) self . sm . add_state ( name = <str> , statetimer = stimDur , transitions = { <str> : <str> } , outputsOn = stimOutput , serialOut = serialOutput ) self . sm . add_state ( name = <str> , statetimer = isi , transitions = { <str> : <str> } , outputsOff = stimOutput )  self . dispatcherModel . set_state_matrix ( self . sm ) self . dispatcherModel . ready_to_start_trial ( )  def save_to_file ( self ) :          self . saveData . to_file ( [ self . params , self . dispatcherModel , self . sm ] , self . dispatcherModel . currentTrial , experimenter = <str> , subject = self . params [ <str> ] . get_value ( ) , paradigm = self . name )  def clear_tone_list ( self ) :          print self . soundParamList self . soundParamList = [ ] print self . soundParamList  def closeEvent ( self , event ) :          self . dispatcherModel . die ( ) event . accept ( )   if __name__ == <str> :      ( app , paradigm ) = paramgui . create_app ( Paradigm )   