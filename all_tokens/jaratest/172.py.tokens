from jaratoolbox import loadopenephys from jaratoolbox import loadbehavior from jaratoolbox import settings import numpy as np import matplotlib . pyplot as plt import os subject = <str> behavSession = <str> ephysSession = <str> SAMPLING_RATE = 30000.0 ephysRootDir = settings . EPHYS_PATH paradigm = <str> ephysRoot = ephysRootDir + subject + <str> eventID = 0 behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE multipleEventOnset = np . array ( events . eventID ) eventChannel = np . array ( events . eventChannel ) oneEvent = eventChannel == eventID eventOnset = multipleEventOnset * oneEvent eventOnsetTimes = eventTimes [ eventOnset == 1 ] behavTimes = np . empty ( numberOfTrials ) prevTimeCenter = bdata [ <str> ] [ 0 ] for trial , timeCenter in enumerate ( bdata [ <str> ] ) :      behavTimes [ trial ] = timeCenter - prevTimeCenter prevTimeCenter = timeCenter  ephysTimes = np . empty ( np . sum ( eventOnset ) ) prevTime = eventOnsetTimes [ 0 ] for etrial , timeSound in enumerate ( eventOnsetTimes ) :      ephysTimes [ etrial ] = timeSound - prevTime prevTime = timeSound  numberToPlot = min ( numberOfTrials , np . sum ( eventOnset ) ) differenceTimes = np . empty ( numberToPlot ) firstSkipped = True badTrial = 0 for dtrial in range ( 0 , numberToPlot ) :      differenceTimes [ dtrial ] = ephysTimes [ dtrial ] - behavTimes [ dtrial ] if ( abs ( differenceTimes [ dtrial ] ) > 0.2 ) and firstSkipped :          badTrial = dtrial firstSkipped = False   differenceTimesSkipped = np . empty ( numberToPlot ) for dstrial in range ( 0 , badTrial ) :      differenceTimesSkipped [ dstrial ] = ephysTimes [ dstrial ] - behavTimes [ dstrial ]  for dstrial in range ( badTrial , numberToPlot ) :      differenceTimesSkipped [ dstrial ] = ephysTimes [ dstrial ] - behavTimes [ dstrial + 1 ]  plt . clf ( ) differencePlt = plt . subplot2grid ( ( 1 , 2 ) , ( 0 , 0 ) , colspan = 1 ) plt . plot ( differenceTimes ) differenceSkippedPlt = plt . subplot2grid ( ( 1 , 2 ) , ( 0 , 1 ) , colspan = 1 ) plt . plot ( differenceTimesSkipped ) plt . show ( ) print <str> . format ( numberOfTrials ) print <str> . format ( np . sum ( eventOnset ) ) print <str> . format ( badTrial )  