import cluster_cutting from jaratoolbox import settings import os import numpy as np animalName = <str> ephysSession = <str> tetrode = 7 Feature = 0 electrodeNumber = 4 ephysRootDir = settings . EPHYS_PATH dataDir = os . path . join ( settings . EPHYS_PATH , animalName , ephysSession ) clustersDir = os . path . join ( settings . EPHYS_PATH , animalName , ephysSession + <str> ) fetFilename = os . path . join ( clustersDir , <str> . format ( tetrode ) ) cluFilename = os . path . join ( clustersDir , <str> . format ( tetrode ) ) processedDir = os . path . join ( settings . EPHYS_PATH , animalName + <str> ) cutFilename = os . path . join ( processedDir , <str> + ephysSession + <str> + <str> + str ( tetrode ) ) cutClusterFile = open ( cutFilename , <str> ) for cluster in range ( 1 , 13 ) :      cluFile = open ( cluFilename , <str> ) cluFile . readline ( ) totalLineCount = sum ( 1 for _ in cluFile ) cluFile . close ( ) cluFile = open ( cluFilename , <str> ) cluFile . readline ( ) clusterBoolArray = np . zeros ( [ totalLineCount ] , dtype = bool ) for lineCount , line in enumerate ( cluFile ) :          oneCluVal = int ( line ) clusterBoolArray [ lineCount ] = ( oneCluVal == cluster )  cluFile . close ( ) fetFile = open ( fetFilename , <str> ) fetFile . readline ( ) featureValues = np . empty ( [ totalLineCount , 12 ] ) * np . nan for lineCount , line in enumerate ( fetFile ) :          oneFetValStr = line . split ( ) oneFetVal = np . array ( map ( float , oneFetValStr ) ) featureValues [ lineCount ] = oneFetVal  fetFile . close ( ) numClusterSpikes = sum ( clusterBoolArray ) clusterFetVals = featureValues [ clusterBoolArray ] cw = cluster_cutting . ClusterCutter ( clusterFetVals [ : , 0 : 4 ] ) raw_input ( <str> ) cut_spikes = cw . output_cut_points ( ) cutClusterBoolArray = np . zeros ( [ totalLineCount ] , dtype = bool ) cutClusterCount = 0 for cluCount , spikeBool in enumerate ( clusterBoolArray ) :          if spikeBool :              cutClusterBoolArray [ cluCount ] = cut_spikes [ cutClusterCount ] cutClusterCount += 1   cutClusterFile . write ( cutClusterBoolArray ) cutClusterFile . write ( <str> )  cutClusterFile . close ( )  