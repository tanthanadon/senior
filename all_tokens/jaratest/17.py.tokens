import os import numpy as np from jaratoolbox import spikesanalysis from jaratoolbox import celldatabase from jaratoolbox import ephyscore from jaratoolbox import settings import studyparams d1mice = studyparams . ASTR_D1_CHR2_MICE dbPath = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , <str> . format ( <str> . join ( d1mice ) ) ) db = celldatabase . load_hdf ( dbPath ) thresholdFRA = 0.2 mono = [ ] maxSpikes = [ ] SAVE = 1 for indIter , ( indRow , dbRow ) in enumerate ( db . iterrows ( ) ) :      print ( indRow ) failed = False cell = ephyscore . Cell ( dbRow , useModifiedClusters = True ) try :          ephysData , bdata = cell . load ( <str> )  except ( IndexError , ValueError ) :          failed = True print ( <str> . format ( indRow ) )  else :          eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimes = ephysData [ <str> ] freqEachTrial = bdata [ <str> ] if len ( eventOnsetTimes ) != len ( freqEachTrial ) :              eventOnsetTimes = eventOnsetTimes [ : - 1 ] if len ( eventOnsetTimes ) != len ( freqEachTrial ) :                  continue   possibleFreq = np . unique ( freqEachTrial ) intensityEachTrial = bdata [ <str> ] possibleIntensity = np . unique ( intensityEachTrial ) cfTrials = freqEachTrial == dbRow [ <str> ] eventsThisFreq = eventOnsetTimes [ cfTrials ] intenThisFreq = intensityEachTrial [ cfTrials ] baseRange = [ - 0.1 , 0 ] responseRange = [ 0 , 0.1 ] alignmentRange = [ baseRange [ 0 ] , responseRange [ 1 ] ] meanSpikesAllInten = np . empty ( len ( possibleIntensity ) ) maxSpikesAllInten = np . empty ( len ( possibleIntensity ) ) baseSpikesAllInten = np . empty ( len ( possibleIntensity ) ) for indInten , inten in enumerate ( possibleIntensity ) :              trialsThisIntensity = intenThisFreq == inten eventsThisCombo = eventsThisFreq [ trialsThisIntensity ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventsThisCombo , alignmentRange ) nspkBase = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange ) nspkResp = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , responseRange ) spikesThisInten = nspkResp [ : , 0 ] baselineThisInten = nspkBase [ : , 0 ] try :                  meanSpikesThisInten = np . mean ( spikesThisInten ) meanBaselineSpikesThisInten = np . mean ( baselineThisInten ) maxSpikesThisInten = np . max ( spikesThisInten )  except ValueError :                  meanSpikesThisInten = 0 maxSpikesThisInten = 0  meanSpikesAllInten [ indInten ] = meanSpikesThisInten maxSpikesAllInten [ indInten ] = maxSpikesThisInten baseSpikesAllInten [ indInten ] = meanBaselineSpikesThisInten  baseline = np . mean ( baseSpikesAllInten ) monoIndex = ( meanSpikesAllInten [ - 1 ] - baseline ) / ( np . max ( meanSpikesAllInten ) - baseline ) db . loc [ indRow , <str> ] = monoIndex overallMaxSpikes = np . max ( maxSpikesAllInten ) maxSpikes . append ( overallMaxSpikes )   if SAVE :      celldatabase . save_hdf ( db , dbPath )    