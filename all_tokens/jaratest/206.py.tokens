import allcells_test055 as allcells from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt SAMPLING_RATE = 30000.0 outputDir = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = <str> behavSession = <str> ephysSession = <str> tetrodeID = <str> for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) targetFreqs = bdata [ <str> ] behavTimes = np . empty ( numberOfTrials ) prevTimeCenter = bdata [ <str> ] [ 0 ] for trial , timeCenter in enumerate ( bdata [ <str> ] ) :              behavTimes [ trial ] = timeCenter - prevTimeCenter prevTimeCenter = timeCenter  ephysTimes = np . empty ( np . sum ( soundOnsetEvents ) ) prevTime = eventOnsetTimes [ 0 ] for etrial , timeSound in enumerate ( eventOnsetTimes ) :              ephysTimes [ etrial ] = timeSound - prevTime prevTime = timeSound  numberToPlot = min ( numberOfTrials , np . sum ( soundOnsetEvents ) ) differenceTimes = np . empty ( numberToPlot ) firstSkipped = True badTrial = 0 for dtrial in range ( 0 , numberToPlot ) :              differenceTimes [ dtrial ] = ephysTimes [ dtrial ] - behavTimes [ dtrial ] if ( differenceTimes [ dtrial ] > 0.2 ) and firstSkipped :                  badTrial = dtrial firstSkipped = False   if badTrial != 0 :              rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] rightward = np . concatenate ( ( rightward [ 0 : badTrial ] , rightward [ ( badTrial + 1 ) : ] ) , 0 ) leftward = np . concatenate ( ( leftward [ 0 : badTrial ] , leftward [ ( badTrial + 1 ) : ] ) , 0 ) invalid = np . concatenate ( ( invalid [ 0 : badTrial ] , invalid [ ( badTrial + 1 ) : ] ) , 0 ) targetFreqs = np . concatenate ( ( targetFreqs [ 0 : badTrial ] , targetFreqs [ ( badTrial + 1 ) : ] ) , 0 ) numberOfTrials = numberOfTrials - 1   spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) for Frequency in range ( numberOfFrequencies ) :          Freq = possibleFreq [ Frequency ] oneFreq = targetFreqs == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] plt . clf ( ) ax1 = plt . subplot2grid ( ( 3 , 1 ) , ( 0 , 0 ) , rowspan = 2 ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 ax2 = plt . subplot2grid ( ( 3 , 1 ) , ( 2 , 0 ) , sharex = ax1 ) extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) nameFreq = str ( Freq ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , nameFreq , tetrodeClusterName , figformat ) fulloutputDir = outputDir + subject + <str> + nameFreq + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :              os . makedirs ( directory )  print <str> % fullFileName plt . gcf ( ) . savefig ( fullFileName , format = figformat )    