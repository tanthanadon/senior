from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import behavioranalysis from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 countTimeRange = [ 0 , 0.1 ] timeRange = [ - 0.2 , 0.8 ] stimulusRange = [ 0.0 , 0.1 ] clusNum = 12 numTetrodes = 8 ephysRootDir = settings . EPHYS_PATH outputDir = ephysRootDir experimenter = <str> paradigm = <str> numOfCells = len ( allcells . cellDB ) subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> nameOfFile = <str> finalOutputDir = outputDir + subject + <str> class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    modIList = [ ] try :      modI_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) behavName = <str> for line in modI_file :          behavLine = line . split ( <str> ) if ( behavLine [ 0 ] == <str> ) :              behavName = behavLine [ 1 ] [ : - 1 ] modIList . append ( behavName )    except :      modI_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> )  badSessionList = [ ] behavSession = <str> maxMI = 0.0 modIDict = nestedDict ( ) modSigDict = nestedDict ( ) print <str> for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( oneCell . behavSession in modIList ) :          continue  try :          if ( behavSession != oneCell . behavSession ) :              subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( eventOnsetTimes , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) numberOfTrials = len ( bdata [ <str> ] ) targetFreqs = bdata [ <str> ] for possFreq in possibleFreq :                  modIDict [ behavSession ] [ str ( possFreq ) ] = np . empty ( [ clusNum * numTetrodes ] ) modSigDict [ behavSession ] [ str ( possFreq ) ] = np . empty ( [ clusNum * numTetrodes ] )   tetrode = oneCell . tetrode cluster = oneCell . cluster clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , countTimeRange ) spikeCountEachTrial = spikeCountMat . flatten ( ) for Freq in possibleFreq :                  oneFreq = targetFreqs == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = [ trialsToUseRight , trialsToUseLeft ] if ( ( sum ( trialsToUseRight ) == 0 ) or ( sum ( trialsToUseLeft ) == 0 ) ) :                      modIDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = 0.0 modSigDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = 1.0 continue  spikeAvgRight = sum ( spikeCountEachTrial [ trialsToUseRight ] ) / float ( sum ( trialsToUseRight ) ) spikeAvgLeft = sum ( spikeCountEachTrial [ trialsToUseLeft ] ) / float ( sum ( trialsToUseLeft ) ) if ( ( spikeAvgRight + spikeAvgLeft ) == 0 ) :                      modIDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = 0 modSigDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = 1.0  else :                      mod_sig = spikesanalysis . evaluate_modulation ( spikeTimesFromEventOnset , indexLimitsEachTrial , stimulusRange , trialsEachCond ) modIDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = ( ( spikeAvgRight - spikeAvgLeft ) / ( spikeAvgRight + spikeAvgLeft ) ) modSigDict [ behavSession ] [ str ( Freq ) ] [ clusterNumber ] = mod_sig [ 1 ]    except :          if ( oneCell . behavSession not in badSessionList ) :              badSessionList . append ( oneCell . behavSession )    bSessionList = [ ] for bSession in modIDict :      if ( bSession not in badSessionList ) :          bSessionList . append ( bSession )   bSessionList . sort ( ) for bSession in bSessionList :      modI_file . write ( <str> % bSession ) for Freq in modIDict [ bSession ] :          modI_file . write ( <str> % Freq ) for modIInd in modIDict [ bSession ] [ Freq ] :              modI_file . write ( <str> % modIInd )  modI_file . write ( <str> )  for Freq in modSigDict [ bSession ] :          modI_file . write ( <str> % Freq ) for modSigInd in modSigDict [ bSession ] [ Freq ] :              modI_file . write ( <str> % modSigInd )  modI_file . write ( <str> )   modI_file . close ( ) print <str> for badSes in badSessionList :      print badSes  print <str>  