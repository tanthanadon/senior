import numpy as np import matplotlib . pyplot as plt import scipy . signal datafile = <str> data = np . load ( datafile ) cellind = 2 spikeTimes = data [ <str> ] [ cellind ] [ <str> ] trialInds = data [ <str> ] [ cellind ] [ <str> ] newTrialInds = np . empty ( trialInds . shape , dtype = int ) uniqueTrialInds = np . unique ( trialInds ) for ind , trialInd in enumerate ( uniqueTrialInds ) :      newTrialInds [ trialInds == trialInd ] = ind  binEdges = np . arange ( 0 , 0.1 , 0.001 ) nTrials = len ( uniqueTrialInds ) spikeCountMat = np . empty ( ( nTrials , len ( binEdges ) - 1 ) , dtype = int ) for indtrial in range ( nTrials ) :      indsThisTrial = ( newTrialInds == indtrial ) spkCountThisTrial , binsEdges = np . histogram ( spikeTimes [ indsThisTrial ] , binEdges ) spikeCountMat [ indtrial , : ] = spkCountThisTrial  avResp = np . mean ( spikeCountMat , axis = 0 ) winShape = scipy . signal . hanning ( 7 ) ; winShape = winShape / np . sum ( winShape ) smoothPSTH = np . convolve ( avResp , winShape , mode = <str> ) avBaseline = np . mean ( smoothPSTH [ : 10 ] ) maxResp = np . max ( smoothPSTH ) threshold = avBaseline + 0.5 * ( maxResp - avBaseline ) respLatencyInd = np . flatnonzero ( smoothPSTH > threshold ) [ 0 ] timeVec = binsEdges [ 1 : ] yFraction = ( threshold - smoothPSTH [ respLatencyInd - 1 ] ) / ( smoothPSTH [ respLatencyInd ] - smoothPSTH [ respLatencyInd - 1 ] ) respLatency = timeVec [ respLatencyInd - 1 ] + yFraction * ( timeVec [ respLatencyInd ] - timeVec [ respLatencyInd - 1 ] ) print <str> . format ( respLatency ) plt . clf ( ) plt . title ( cellind ) plt . subplot ( 2 , 1 , 1 ) plt . plot ( spikeTimes , newTrialInds , <str> ) plt . hold ( 1 ) plt . axvline ( respLatency , color = <str> ) plt . subplot ( 2 , 1 , 2 ) plt . plot ( binsEdges [ 1 : ] , avResp , <str> ) plt . hold ( 1 ) plt . axvline ( respLatency , color = <str> ) plt . axhline ( threshold , ls = <str> , color = <str> ) plt . axhline ( avBaseline , ls = <str> , color = <str> ) plt . axhline ( maxResp , ls = <str> , color = <str> ) plt . plot ( binsEdges [ 1 : ] , smoothPSTH , <str> , mec = <str> , lw = 3 ) plt . show ( )  