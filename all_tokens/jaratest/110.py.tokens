filename = <str> sliceSize = [ 1040 , 1388 ] point = np . array ( [ 409.1 , 81.72 ] ) point = np . array ( [ 387.1 , 85.7 ] ) point = np . array ( [ 381.1 , 99.7 ] ) if 1 :      tree = ETree . parse ( filename ) root = tree . getroot ( ) images = root . findall ( <str> ) if len ( images ) != 2 :          raise ValueError ( <str> )  if ( images [ 0 ] . attrib [ <str> ] != <str> ) or ( images [ 0 ] . attrib [ <str> ] != <str> ) :          raise ValueError ( <str> )  if images [ 1 ] . attrib . has_key ( <str> ) :          transformString = images [ 1 ] . attrib [ <str> ] if transformString . startswith ( <str> ) :              transformValueStrings = re . findall ( <str> , transformString ) transformValues = [ float ( x ) for x in transformValueStrings ]  elif transformString . startswith ( <str> ) :              transformValueString = re . findall ( <str> , transformString ) [ 0 ] theta = - np . pi * float ( transformValueString ) / 180 transformValues = [ np . cos ( theta ) , - np . sin ( theta ) , np . sin ( theta ) , np . cos ( theta ) ]   else :          transformValues = [ 1 , 0 , 0 , 1 , 0 , 0 ]  scaleWidth = float ( images [ 1 ] . attrib [ <str> ] ) / float ( sliceSize [ 0 ] ) scaleHeight = float ( images [ 1 ] . attrib [ <str> ] ) / float ( sliceSize [ 1 ] ) xPos = float ( images [ 1 ] . attrib [ <str> ] ) yPos = float ( images [ 1 ] . attrib [ <str> ] ) scale = np . array ( [ [ scaleWidth ] , [ scaleHeight ] ] ) translate = np . array ( [ [ xPos ] , [ yPos ] ] ) affine = np . reshape ( transformValues [ : 4 ] , ( 2 , 2 ) , order = <str> )   