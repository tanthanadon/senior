import os , sys import pdb import numpy as np from scipy import stats import pandas as pd import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import celldatabase from jaratoolbox import extraplots from jaratoolbox import spikesanalysis from jaratoolbox import spikesorting from jaratoolbox import behavioranalysis from jaratoolbox import loadbehavior from jaratoolbox import loadopenephys from jaratoolbox import ephyscore reload ( loadopenephys ) from jaratoolbox import settings subject = <str> dbpath = <str> . format ( subject ) db = pd . read_hdf ( dbpath , key = <str> ) goodCells = db . query ( <str> ) cellInd = 223 dbRow = db . loc [ cellInd ] cell = ephyscore . Cell ( dbRow ) print ( cell [ <str> ] ) sys . exit ( ) def plot_report ( ) :      plt . figure ( ) gs = gridspec . GridSpec ( 2 , 2 ) plt . subplot ( gs [ 0 , 0 ] ) ephysData , bdata = cell . load ( <str> ) eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ - 0.1 , 1.0 ] trialsEachCond = [ ] spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond ) xlabel = <str> ylabel = <str> plt . title ( <str> ) plt . xlabel ( xlabel ) plt . ylabel ( ylabel ) plt . subplot ( gs [ 0 , 1 ] ) ephysData , bdata = cell . load ( <str> ) freqEachTrial = bdata [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] spikeTimeStamps = ephysData [ <str> ] timeRange = [ - 0.1 , 1.0 ] possiblefreqs = np . unique ( freqEachTrial ) freqLabels = [ round ( x / 1000 , 1 ) for x in possiblefreqs ] trialsEachCond = behavioranalysis . find_trials_each_type ( freqEachTrial , possiblefreqs ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , labels = freqLabels ) xlabel = <str> ylabel = <str> plt . title ( <str> ) plt . xlabel ( xlabel ) plt . ylabel ( ylabel ) idString = <str> . format ( dbRow [ <str> ] , cellInfo [ <str> ] ) oneTT = cms2 . MultipleSessionsToCluster ( cellInfo [ <str> ] , cellInfo [ <str> ] , cellInfo [ <str> ] , idString ) oneTT . load_all_waveforms ( ) clusterFile = os . path . join ( oneTT . clustersDir , <str> % oneTT . tetrode ) oneTT . set_clusters_from_file ( ) tsThisCluster = oneTT . timestamps [ oneTT . clusters == cellInfo [ <str> ] ] wavesThisCluster = oneTT . samples [ oneTT . clusters == cellInfo [ <str> ] ] return tsThisCluster , wavesThisCluster plt . subplot ( gs [ 1 , 0 ] ) spikesorting . plot_isi_loghist ( tsThisCluster ) plt . ylabel ( <str> % cellInfo [ <str> ] , rotation = 0 , va = <str> , ha = <str> ) plt . xlabel ( <str> ) plt . subplot ( gs [ 0 , 1 ] ) spikesorting . plot_waveforms ( wavesThisCluster ) print ( <str> + str ( cellInd ) ) figname = <str> plt . savefig ( figname ) plt . clf ( )  def load_cluster_waveforms ( cellInfo ) :      idString = <str> . format ( cellInfo [ <str> ] , cellInfo [ <str> ] ) oneTT = cms2 . MultipleSessionsToCluster ( cellInfo [ <str> ] , cellInfo [ <str> ] , cellInfo [ <str> ] , idString ) oneTT . load_all_waveforms ( ) clusterFile = os . path . join ( oneTT . clustersDir , <str> % oneTT . tetrode ) oneTT . set_clusters_from_file ( ) tsThisCluster = oneTT . timestamps [ oneTT . clusters == cellInfo [ <str> ] ] wavesThisCluster = oneTT . samples [ oneTT . clusters == cellInfo [ <str> ] ] return tsThisCluster , wavesThisCluster  sys . exit ( ) for ind in db . index :      if ind != 339 :          continue  thisCell = db . loc [ ind ] tetrode = int ( thisCell [ <str> ] ) cluster = int ( thisCell [ <str> ] ) depth = int ( thisCell [ <str> ] ) if len ( thisCell [ <str> ] ) < 2 :        continue  behavFileName = thisCell [ <str> ] [ 1 ] session = thisCell [ <str> ] [ 1 ] ephysBaseDir = os . path . join ( settings . EPHYS_PATH , subject ) eventFilename = os . path . join ( ephysBaseDir , session , <str> ) spikesFilename = os . path . join ( ephysBaseDir , session , <str> . format ( tetrode ) ) eventData = loadopenephys . Events ( eventFilename ) spikeData = loadopenephys . DataSpikes ( spikesFilename ) clustersDir = os . path . join ( ephysBaseDir , <str> . format ( session ) ) clustersFile = os . path . join ( clustersDir , <str> . format ( tetrode ) ) spikeData . set_clusters ( clustersFile ) if cluster is not None :          spikeData . samples = spikeData . samples [ spikeData . clusters == cluster ] spikeData . timestamps = spikeData . timestamps [ spikeData . clusters == cluster ]  spikeData . samples = spikeData . samples . astype ( float ) - 2 ** 15 spikeData . samples = ( 1000.0 / spikeData . gain [ 0 , 0 ] ) * spikeData . samples spikeData . timestamps = spikeData . timestamps / spikeData . samplingRate eventData . timestamps = eventData . timestamps / eventData . samplingRate behavFile = os . path . join ( settings . BEHAVIOR_PATH , subject , behavFileName ) bdata = loadbehavior . BehaviorData ( behavFile , readmode = <str> ) eventOnsetTimes = eventData . get_event_onset_times ( ) spikeTimeStamps = spikeData . timestamps tuningBData = bdata freqEachTrial = tuningBData [ <str> ] timeRange = [ - 0.1 , 1.0 ] possiblefreqs = np . unique ( freqEachTrial ) trialsEachCond = behavioranalysis . find_trials_each_type ( freqEachTrial , possiblefreqs ) spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial = spikesanalysis . eventlocked_spiketimes ( spikeTimeStamps , eventOnsetTimes , timeRange ) pRaster , hcond , zline = extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , labels = possiblefreqs ) xlabel = <str> ylabel = <str> plt . xlabel ( xlabel ) plt . ylabel ( ylabel ) print ( <str> + str ( ind ) ) figname = <str> + str ( session ) + <str> + str ( depth ) + <str> + str ( tetrode ) + <str> + str ( cluster ) + <str> plt . savefig ( figname ) plt . clf ( )   