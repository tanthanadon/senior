from jaratoolbox import spikesorting_ISI as spikesorting from jaratoolbox import settings import numpy as np import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) outputDir = <str> nameOfFile = <str> animalName = allcells . cellDB [ 0 ] . animalName finalOutputDir = outputDir + <str> + animalName + <str> numOfCells = len ( allcells . cellDB ) numTetrodes = 8 numClusters = 12 ISIviolationsDict = { } ephysSessionEachCell = [ ] for cellID in range ( 0 , numOfCells ) :      ephysSessionEachCell . append ( allcells . cellDB [ cellID ] . ephysSession )  ephysSessionArray = np . unique ( ephysSessionEachCell ) badSessionList = [ ] for indEphys , ephysSession in enumerate ( ephysSessionArray ) :      try :          ISIviolationsDict . update ( { ephysSession : np . empty ( [ numTetrodes , numClusters ] ) } ) for tetrode in range ( 1 , ( numTetrodes + 1 ) ) :              oneTT = spikesorting . TetrodeToCluster ( animalName , ephysSession , tetrode , features = [ <str> , <str> ] ) oneTT . create_fet_files ( ) oneTT . run_clustering ( ) oneTT . save_report ( ) ISIviolationsDict [ ephysSession ] [ tetrode - 1 ] = oneTT . get_ISI_values ( )   except :          if ( ephysSession not in badSessionList ) :              badSessionList . append ( ephysSession )    prevISIList = [ ] try :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) ephysName = <str> for line in text_file :          ephysLine = line . split ( <str> ) if ( ephysLine [ 0 ] == <str> ) :              ephysName = ephysLine [ 1 ] [ : - 1 ] prevISIList . append ( ephysName )    except :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> )  for indEphys , ephysSession in enumerate ( ephysSessionArray ) :      if ( ( ephysSession in prevISIList ) or ( ephysSession in badSessionList ) ) :          continue  else :          text_file . write ( <str> % ephysSession ) ISIArray = ISIviolationsDict [ ephysSession ] for indTetrode , ISIlist in enumerate ( ISIArray ) :              text_file . write ( <str> % indTetrode ) for ISIval in ISIlist :                  text_file . write ( <str> % ISIval )  text_file . write ( <str> )    text_file . close ( ) for ESession in badSessionList :      print <str> + ESession   