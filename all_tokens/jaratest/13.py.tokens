import os import sys import numpy as np import matplotlib . pyplot as plt import matplotlib . gridspec as gridspec from jaratoolbox import settings from jaratoolbox import extraplots from jaratoolbox import celldatabase from scipy import stats import pandas as pd import figparams import studyparams reload ( extraplots ) reload ( figparams ) if sys . version_info [ 0 ] < 3 :      input_func = raw_input  elif sys . version_info [ 0 ] >= 3 :      input_func = input  def jitter ( arr , frac ) :      jitter = ( np . random . random ( len ( arr ) ) - 0.5 ) * 2 * frac jitteredArr = arr + jitter return jitteredArr  def medline ( ax , yval , midline , width , color = <str> , linewidth = 3 ) :      start = midline - ( width / 2 ) end = midline + ( width / 2 ) ax . plot ( [ start , end ] , [ yval , yval ] , color = color , lw = linewidth )  FIGNAME = <str> d1mice = studyparams . ASTR_D1_CHR2_MICE nameDB = <str> . join ( d1mice ) + <str> pathtoDB = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , nameDB ) db = celldatabase . load_hdf ( pathtoDB ) db = db . query ( <str> . format ( studyparams . R2_CUTOFF ) ) np . random . seed ( 8 ) D1 = db . query ( <str> ) nD1 = db . query ( <str> ) PANELS = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] SAVE_FIGURE = 1 outputDir = figparams . FIGURE_OUTPUT_DIR figFilename = <str> figFormat = <str> figSize = [ 13 , 6.5 ] fontSizeLabels = figparams . fontSizeLabels * 2 fontSizeTicks = fontSizeLabels fontSizePanel = figparams . fontSizePanel * 2 fontSizeTitles = figparams . fontSizeTitles * 2 fontSizeNS = figparams . fontSizeNS fontSizeStars = figparams . fontSizeStars starHeightFactor = figparams . starHeightFactor starGapFactor = figparams . starGapFactor starYfactor = figparams . starYfactor dotEdgeColor = figparams . dotEdgeColor nd1ColorMap = <str> d1ColorMap = <str> colornD1 = figparams . cp . TangoPalette [ <str> ] colorD1 = figparams . cp . TangoPalette [ <str> ] markerAlpha = 1 labelPosX = [ 0.05 , 0.24 , 0.45 , 0.64 , 0.835 ] labelPosY = [ 0.92 , 0.42 ] laserColor = figparams . colp [ <str> ] fig = plt . gcf ( ) fig . clf ( ) fig . set_facecolor ( <str> ) gs = gridspec . GridSpec ( 2 , 5 ) gs . update ( left = 0.02 , right = 0.98 , top = 0.95 , bottom = 0.125 , wspace = 0.7 , hspace = 0.5 ) ndOne = plt . subplot ( gs [ 0 , 0 : 2 ] ) dOne = plt . subplot ( gs [ 1 , 0 : 2 ] ) axBW = plt . subplot ( gs [ 0 : 2 , 2 ] ) axThresh = plt . subplot ( gs [ 0 : 2 , 3 ] ) axLatency = plt . subplot ( gs [ 0 : 2 , 4 ] ) plt . text ( - 0.25 , 1.03 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = ndOne . transAxes ) plt . text ( - 0.25 , 1.03 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = dOne . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axBW . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axThresh . transAxes ) plt . text ( - 0.3 , 1.01 , <str> , ha = <str> , va = <str> , fontsize = fontSizePanel , fontweight = <str> , transform = axLatency . transAxes ) messages = [ ] lowFreq = 2 highFreq = 40 nFreqLabels = 3 freqTickLocations = np . linspace ( 0 , 15 , nFreqLabels ) freqs = np . logspace ( np . log10 ( lowFreq ) , np . log10 ( highFreq ) , nFreqLabels ) freqs = np . round ( freqs , decimals = 1 ) nIntenLabels = 3 intensities = np . linspace ( 15 , 70 , nIntenLabels ) intenTickLocations = np . linspace ( 0 , 11 , nIntenLabels ) if PANELS [ 8 ] :      popStatCol = <str> D1PopStat = D1 [ popStatCol ] [ pd . notnull ( D1 [ popStatCol ] ) ] nD1PopStat = nD1 [ popStatCol ] [ pd . notnull ( nD1 [ popStatCol ] ) ] pos = jitter ( np . ones ( len ( nD1PopStat ) ) * 0 , 0.20 ) axLatency . plot ( pos , nD1PopStat * 1000 , <str> , mec = colornD1 , mfc = <str> , alpha = markerAlpha ) medline ( axLatency , np . median ( nD1PopStat ) * 1000 , 0 , 0.5 ) pos = jitter ( np . ones ( len ( D1PopStat ) ) * 1 , 0.20 ) axLatency . plot ( pos , D1PopStat * 1000 , <str> , mec = colorD1 , mfc = <str> , alpha = markerAlpha ) medline ( axLatency , np . median ( D1PopStat ) * 1000 , 1 , 0.5 ) axLatency . set_ylabel ( <str> , fontsize = fontSizeTicks ) tickLabels = [ <str> . format ( len ( nD1PopStat ) ) , <str> . format ( len ( D1PopStat ) ) ] axLatency . set_xticks ( range ( 2 ) ) axLatency . set_xlim ( [ - 0.5 , 1.5 ] ) extraplots . boxoff ( axLatency ) axLatency . set_ylim ( [ - 0.001 , 65 ] ) extraplots . set_ticks_fontsize ( axLatency , fontSizeTicks ) axLatency . set_xticklabels ( tickLabels , fontsize = fontSizeLabels , rotation = 45 ) zstat , pVal = stats . ranksums ( nD1PopStat , D1PopStat ) messages . append ( <str> . format ( popStatCol , pVal ) ) yDataMax = max ( [ max ( D1PopStat * 2500 ) , max ( nD1PopStat * 2500 ) ] ) yStars = yDataMax + yDataMax * starYfactor yStarHeight = ( yDataMax * starYfactor ) * starHeightFactor starString = None if pVal < 0.05 else <str> plt . sca ( axLatency ) extraplots . significance_stars ( [ 0 , 1 ] , yStars , yStarHeight , starMarker = <str> , starSize = fontSizeStars , starString = starString , gapFactor = starGapFactor ) plt . hold ( 1 )  plt . show ( )  