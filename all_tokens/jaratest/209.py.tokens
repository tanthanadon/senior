from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt reload ( spikesanalysis ) SAMPLING_RATE = 30000.0 soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.2 , 0.8 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> CASE = 2 if CASE == 1 :      import allcells_test055 as allcells cellID = allcells . cellDB . findcell ( <str> , <str> , 3 , 11 ) cellID = allcells . cellDB . findcell ( <str> , <str> , 3 , 6 )  elif CASE == 2 :      import allcells_test017 as allcells cellID = allcells . cellDB . findcell ( <str> , <str> , 8 , 11 )  oneCell = allcells . cellDB [ cellID ] subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps eventOnsetTimes = eventTimes [ soundOnsetEvents ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) plt . clf ( ) ax1 = plt . subplot ( 2 , 1 , 1 ) plt . plot ( spikeTimesFromEventOnset , trialIndexForEachSpike , <str> ) plt . show ( ) baseRange = [ - 0.050 , - 0.025 ] rangeLength = np . diff ( baseRange ) binEdges = np . arange ( - 8 , 24 ) * rangeLength [ zStat , pValue , maxZ ] = spikesanalysis . response_score ( spikeTimesFromEventOnset , indexLimitsEachTrial , baseRange , binEdges ) print <str> . format ( maxZ ) ax2 = plt . subplot ( 2 , 1 , 2 , sharex = ax1 ) plt . axhline ( 0 , ls = <str> , color = <str> ) plt . axhline ( + 3 , ls = <str> , color = <str> ) plt . axhline ( - 3 , ls = <str> , color = <str> ) plt . step ( binEdges [ : - 1 ] , zStat , where = <str> , lw = 2 ) plt . ylabel ( <str> ) plt . xlabel ( <str> ) plt . show ( )  