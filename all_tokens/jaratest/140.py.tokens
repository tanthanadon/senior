from jaratoolbox import loadbehavior from jaratoolbox import settings from jaratoolbox import ephyscore import os import numpy as np from jaratoolbox import behavioranalysis from jaratoolbox import loadopenephys from jaratoolbox import spikesanalysis from jaratoolbox import extraplots import matplotlib . pyplot as plt from jaratoolbox import spikesorting_ISIValues as spikesorting import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 clusNum = 12 numTetrodes = 8 outputDir = <str> soundTriggerChannel = 0 binWidth = 0.010 timeRange = [ - 0.3 , 0.7 ] ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> class nestedDict ( dict ) :      def __getitem__ ( self , item ) :          try :              return super ( nestedDict , self ) . __getitem__ ( item )  except KeyError :              value = self [ item ] = type ( self ) ( ) return value    subject = allcells . cellDB [ 0 ] . animalName processedDir = os . path . join ( settings . EPHYS_PATH , subject + <str> ) modIFilename = os . path . join ( processedDir , <str> ) modIFile = open ( modIFilename , <str> ) modIDict = nestedDict ( ) modSigDict = nestedDict ( ) behavName = <str> for line in modIFile :      splitLine = line . split ( <str> ) if ( splitLine [ 0 ] == <str> ) :          behavName = splitLine [ 1 ] [ : - 1 ]  elif ( splitLine [ 0 ] == <str> ) :          frequency = splitLine [ 1 ] modIDict [ behavName ] [ frequency ] = [ float ( x ) for x in splitLine [ 2 ] . split ( <str> ) [ 0 : - 1 ] ]  elif ( splitLine [ 0 ] == <str> ) :          frequency = splitLine [ 1 ] modSigDict [ behavName ] [ frequency ] = [ float ( x ) for x in splitLine [ 2 ] . split ( <str> ) [ 0 : - 1 ] ]   modIFile . close ( ) numOfCells = len ( allcells . cellDB ) subject = <str> behavSession = <str> ephysSession = <str> tetrode = <str> cluster = <str> bdata = None eventOnsetTimes = None spikeTimesFromEventOnset = None indexLimitsEachTrial = None spikeTimesFromMovementOnset = None indexLimitsEachMovementTrial = None timeDiff = None badSessionList = [ ] print <str> def main ( ) :      global behavSession global subject global ephysSession global tetrode global cluster global bdata global eventOnsetTimes global spikeTimesFromEventOnset global indexLimitsEachTrial global spikeTimesFromMovementOnset global indexLimitsEachMovementTrial for cellID in range ( 0 , numOfCells ) :              oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :                  subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) print behavSession behaviorFilename = loadbehavior . path_to_behavior_data ( subject = subject , paradigm = paradigm , sessionstr = behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE soundOnsetEvents = ( events . eventID == 1 ) & ( events . eventChannel == soundTriggerChannel ) eventOnsetTimes = eventTimes [ soundOnsetEvents ] soundOnsetTimeBehav = bdata [ <str> ] missingTrials = behavioranalysis . find_missing_trials ( eventOnsetTimes , soundOnsetTimeBehav ) bdata . remove_trials ( missingTrials ) possibleFreq = np . unique ( bdata [ <str> ] ) numberOfFrequencies = len ( possibleFreq ) centerFrequencies = [ ( numberOfFrequencies / 2 - 1 ) , numberOfFrequencies / 2 ] centerOutTimes = bdata [ <str> ] soundStartTimes = bdata [ <str> ] timeDiff = centerOutTimes - soundStartTimes if ( len ( eventOnsetTimes ) < len ( timeDiff ) ) :                      eventOnsetTimesCenter = eventOnsetTimes + timeDiff [ : - 1 ]  elif ( len ( eventOnsetTimes ) > len ( timeDiff ) ) :                      eventOnsetTimesCenter = eventOnsetTimes [ : - 1 ] + timeDiff  else :                      eventOnsetTimesCenter = eventOnsetTimes + timeDiff   tetrode = oneCell . tetrode cluster = oneCell . cluster spkData = ephyscore . CellData ( oneCell ) spkTimeStamps = spkData . spikes . timestamps ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimes , timeRange ) ( spikeTimesFromMovementOnset , movementTrialIndexForEachSpike , indexLimitsEachMovementTrial ) = spikesanalysis . eventlocked_spiketimes ( spkTimeStamps , eventOnsetTimesCenter , timeRange ) plt . clf ( ) if ( len ( spkTimeStamps ) > 0 ) :                  ax1 = plt . subplot2grid ( ( 7 , 6 ) , ( 6 , 0 ) , colspan = 2 ) spikesorting . plot_isi_loghist ( spkData . spikes . timestamps ) ax3 = plt . subplot2grid ( ( 7 , 6 ) , ( 6 , 4 ) , colspan = 2 ) spikesorting . plot_events_in_time ( spkData . spikes . timestamps ) samples = spkData . spikes . samples . astype ( float ) - 2 ** 15 samples = ( 1000.0 / spkData . spikes . gain [ 0 , 0 ] ) * samples ax2 = plt . subplot2grid ( ( 7 , 6 ) , ( 6 , 2 ) , colspan = 2 ) spikesorting . plot_waveforms ( samples )  ax4 = plt . subplot2grid ( ( 7 , 6 ) , ( 0 , 0 ) , colspan = 3 , rowspan = 2 ) plt . setp ( ax4 . get_xticklabels ( ) , visible = False ) raster_sound_psycurve ( centerFrequencies [ 0 ] ) ax5 = plt . subplot2grid ( ( 7 , 6 ) , ( 2 , 0 ) , colspan = 3 , sharex = ax4 ) hist_sound_psycurve ( centerFrequencies [ 0 ] ) ax6 = plt . subplot2grid ( ( 7 , 6 ) , ( 0 , 3 ) , colspan = 3 , rowspan = 2 ) plt . setp ( ax6 . get_xticklabels ( ) , visible = False ) raster_sound_psycurve ( centerFrequencies [ 1 ] ) ax7 = plt . subplot2grid ( ( 7 , 6 ) , ( 2 , 3 ) , colspan = 3 , sharex = ax6 ) hist_sound_psycurve ( centerFrequencies [ 1 ] ) ax8 = plt . subplot2grid ( ( 7 , 6 ) , ( 3 , 0 ) , colspan = 3 , rowspan = 2 ) plt . setp ( ax8 . get_xticklabels ( ) , visible = False ) raster_movement_psycurve ( centerFrequencies [ 0 ] ) ax9 = plt . subplot2grid ( ( 7 , 6 ) , ( 5 , 0 ) , colspan = 3 , sharex = ax8 ) hist_movement_psycurve ( centerFrequencies [ 0 ] ) ax10 = plt . subplot2grid ( ( 7 , 6 ) , ( 3 , 3 ) , colspan = 3 , rowspan = 2 ) plt . setp ( ax10 . get_xticklabels ( ) , visible = False ) raster_movement_psycurve ( centerFrequencies [ 1 ] ) ax11 = plt . subplot2grid ( ( 7 , 6 ) , ( 5 , 3 ) , colspan = 3 , sharex = ax10 ) hist_movement_psycurve ( centerFrequencies [ 1 ] ) modulation_index_psycurve ( centerFrequencies ) plt . suptitle ( titleText ) tetrodeClusterName = <str> + str ( oneCell . tetrode ) + <str> + str ( oneCell . cluster ) plt . gcf ( ) . set_size_inches ( ( 8.5 , 11 ) ) figformat = <str> filename = <str> % ( subject , behavSession , tetrodeClusterName , figformat ) fulloutputDir = outputDir + subject + <str> fullFileName = os . path . join ( fulloutputDir , filename ) directory = os . path . dirname ( fulloutputDir ) if not os . path . exists ( directory ) :                  os . makedirs ( directory )  plt . gcf ( ) . savefig ( fullFileName , format = figformat )  print <str> for badSes in badSessionList :          print badSes   def raster_sound_psycurve ( Frequency ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> ) plt . title ( <str> + str ( Freq ) )  def hist_sound_psycurve ( Frequency ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def raster_movement_psycurve ( Frequency ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] extraplots . raster_plot ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeRange , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , fillWidth = None , labels = None ) plt . ylabel ( <str> )  def hist_movement_psycurve ( Frequency ) :      rightward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] leftward = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] invalid = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) Freq = possibleFreq [ Frequency ] oneFreq = bdata [ <str> ] == Freq trialsToUseRight = rightward & oneFreq trialsToUseLeft = leftward & oneFreq trialsEachCond = np . c_ [ trialsToUseLeft , trialsToUseRight ] ; colorEachCond = [ <str> , <str> ] timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) spikeCountMat = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromMovementOnset , indexLimitsEachMovementTrial , timeVec ) smoothWinSize = 3 extraplots . plot_psth ( spikeCountMat / binWidth , smoothWinSize , timeVec , trialsEachCond = trialsEachCond , colorEachCond = colorEachCond , linestyle = None , linewidth = 3 , downsamplefactor = 1 ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  def modulation_index_psycurve ( centerFrequencies ) :      global titleText global modIDict global modSigDict global cluster global tetrode clusterNumber = ( tetrode - 1 ) * clusNum + ( cluster - 1 ) possibleFreq = np . unique ( bdata [ <str> ] ) Freq1 = str ( possibleFreq [ centerFrequencies [ 0 ] ] ) firstCenterMI = str ( round ( modIDict [ behavSession ] [ Freq1 ] [ clusterNumber ] , 3 ) ) firstCenterMSig = str ( round ( modSigDict [ behavSession ] [ Freq1 ] [ clusterNumber ] , 3 ) ) Freq2 = str ( possibleFreq [ centerFrequencies [ 1 ] ] ) secondCenterMI = str ( round ( modIDict [ behavSession ] [ Freq2 ] [ clusterNumber ] , 3 ) ) secondCenterMSig = str ( round ( modSigDict [ behavSession ] [ Freq2 ] [ clusterNumber ] , 3 ) ) titleText = <str> + firstCenterMI + <str> + firstCenterMSig + <str> + secondCenterMI + <str> + secondCenterMSig  main ( )  