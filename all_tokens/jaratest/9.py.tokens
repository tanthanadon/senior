import os import numpy as np import matplotlib . pyplot as plt import matplotlib . patches as mpatches from jaratoolbox import settings from jaratoolbox import celldatabase from jaratoolbox import behavioranalysis from jaratoolbox import spikesanalysis from jaratoolbox import extraplots from jaratoolbox import ephyscore from jaratoolbox import spikesorting import studyparams dbPath = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME ) dbFilename = os . path . join ( dbPath , <str> . format ( studyparams . STUDY_NAME ) ) figFormat = <str> outputDir = os . path . join ( settings . FIGURES_DATA_PATH , studyparams . STUDY_NAME , <str> ) celldb = celldatabase . load_hdf ( dbFilename ) number_of_clusters = len ( celldb ) - 1 for indRow , dbRow in celldb [ 260 : 261 ] . iterrows ( ) :      ax = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) ) ax0 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 3 ) ) ax0 . axis ( <str> ) plt . text ( 0.02 , 0.8 , <str> . format ( dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] ) , fontsize = 12 ) oneCell = ephyscore . Cell ( dbRow ) try :          ephysData , bdata = oneCell . load ( <str> )  except ValueError as verror :          print ( verror ) continue  spikeTimes = ephysData [ <str> ] eventOnsetTimes = ephysData [ <str> ] [ <str> ] timeRange = [ - 0.3 , 0.8 ] ( spikeTimesFromEventOnset , trialIndexForEachSpike , indexLimitsEachTrial ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , timeRange ) ax1 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 0 ) ) extraplots . raster_plot ( spikeTimesFromEventOnset , indexLimitsEachTrial , timeRange ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) ax2 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 0 ) ) try :          spikesorting . plot_waveforms ( ephysData [ <str> ] ) ax2 . set_title ( <str> )  except ValueError as verror :          print ( verror ) continue  ax3 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 0 ) ) spikesorting . plot_isi_loghist ( spikeTimes ) if oneCell . get_session_inds ( <str> ) != [ ] :          ephysDataTuning , bdataTuning = oneCell . load ( <str> ) spikeTimes = ephysDataTuning [ <str> ] eventOnsetTimes = ephysDataTuning [ <str> ] [ <str> ] ( spikeTimesFromEventOnsetTuning , trialIndexForEachSpikeTuning , indexLimitsEachTrialTuning ) = spikesanalysis . eventlocked_spiketimes ( spikeTimes , eventOnsetTimes , timeRange ) frequenciesEachTrialTuning = bdataTuning [ <str> ] numberOfTrialsTuning = len ( frequenciesEachTrialTuning ) arrayOfFrequenciesTuning = np . unique ( bdataTuning [ <str> ] ) labelsForYaxis = [ <str> % f for f in arrayOfFrequenciesTuning ] trialsEachCondTuning = behavioranalysis . find_trials_each_type ( frequenciesEachTrialTuning , arrayOfFrequenciesTuning ) ax4 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 1 ) , rowspan = 3 ) extraplots . raster_plot ( spikeTimesFromEventOnsetTuning , indexLimitsEachTrialTuning , timeRange , trialsEachCondTuning , labels = labelsForYaxis ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> . format ( numberOfTrialsTuning ) )  else :          ax4 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 1 ) , rowspan = 3 ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> )  if oneCell . get_session_inds ( <str> ) != [ ] :          try :              ephysDataStd , bdataStd = oneCell . load ( <str> )  except ValueError as verror :              print ( verror ) continue  spikeTimesStd = ephysDataStd [ <str> ] eventOnsetTimesStd = ephysDataStd [ <str> ] [ <str> ] if len ( eventOnsetTimesStd ) == len ( bdataStd [ <str> ] ) + 1 :              print ( <str> ) eventOnsetTimesStd = eventOnsetTimesStd [ : - 1 ]  ( spikeTimesFromEventOnsetStd , trialIndexForEachSpikeStd , indexLimitsEachTrialStd ) = spikesanalysis . eventlocked_spiketimes ( spikeTimesStd , eventOnsetTimesStd , timeRange ) frequenciesEachTrialStd = bdataStd [ <str> ] numberOfTrialsStd = len ( frequenciesEachTrialStd ) arrayOfFrequenciesStd = np . unique ( bdataStd [ <str> ] ) labelsForYaxis = [ <str> % f for f in arrayOfFrequenciesStd ] trialsEachCondStd = behavioranalysis . find_trials_each_type ( frequenciesEachTrialStd , arrayOfFrequenciesStd ) ax5 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) ) extraplots . raster_plot ( spikeTimesFromEventOnsetStd , indexLimitsEachTrialStd , timeRange , trialsEachCondStd , labels = labelsForYaxis ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> . format ( numberOfTrialsStd ) ) ax7 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 2 ) ) try :              spikesorting . plot_waveforms ( ephysDataStd [ <str> ] ) ax7 . set_title ( <str> )  except ValueError as verror :              print ( verror ) continue   else :          ax5 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 2 ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> ) ax7 = plt . subplot2grid ( ( 3 , 4 ) , ( 0 , 2 ) )  if oneCell . get_session_inds ( <str> ) != [ ] :          try :              ephysDataOdd , bdataOdd = oneCell . load ( <str> )  except ValueError as verror :              print ( verror ) continue  ax0 . text ( 0.02 , 0.6 , <str> , fontsize = 12 ) ax0 . text ( 0.02 , 0.5 , <str> . format ( bdataOdd [ <str> ] [ 1 ] ) ) ax0 . text ( 0.02 , 0.4 , <str> . format ( bdataOdd [ <str> ] [ 1 ] ) ) ax0 . text ( 0.02 , 0.3 , <str> . format ( bdataOdd [ <str> ] [ 1 ] ) ) ax0 . text ( 0.02 , 0.2 , <str> . format ( bdataOdd [ <str> ] [ 1 ] , bdataOdd [ <str> ] [ 1 ] ) ) spikeTimesOdd = ephysDataOdd [ <str> ] eventOnsetTimesOdd = ephysDataOdd [ <str> ] [ <str> ] if len ( eventOnsetTimesOdd ) == len ( bdataOdd [ <str> ] ) + 1 :              print ( <str> ) eventOnsetTimesOdd = eventOnsetTimesOdd [ : - 1 ]  ( spikeTimesFromEventOnsetOdd , trialIndexForEachSpikeOdd , indexLimitsEachTrialOdd ) = spikesanalysis . eventlocked_spiketimes ( spikeTimesOdd , eventOnsetTimesOdd , timeRange ) frequenciesEachTrialOdd = bdataOdd [ <str> ] numberOfTrialsOdd = len ( frequenciesEachTrialOdd ) arrayOfFrequenciesOdd = np . unique ( bdataOdd [ <str> ] ) labelsForYaxis = [ <str> % f for f in arrayOfFrequenciesOdd ] trialsEachCondOdd = behavioranalysis . find_trials_each_type ( frequenciesEachTrialOdd , arrayOfFrequenciesOdd ) ax6 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 2 ) ) extraplots . raster_plot ( spikeTimesFromEventOnsetOdd , indexLimitsEachTrialOdd , timeRange , trialsEachCondOdd , labels = labelsForYaxis ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> . format ( numberOfTrialsOdd ) )  else :          ax6 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 2 ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> )  if oneCell . get_session_inds ( <str> ) != [ ] and oneCell . get_session_inds ( <str> ) != [ ] :          binWidth = 0.010 timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) smoothWinSizePsth = 5 lwPsth = 2 downsampleFactorPsth = 1 iletLowFreqOddInStdPara = indexLimitsEachTrialStd [ : , trialsEachCondStd [ : , 0 ] ] spikeCountMatLowFreqOddInStdPara = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnsetStd , iletLowFreqOddInStdPara , timeVec ) iletHighFreqStdInStdPara = indexLimitsEachTrialStd [ : , trialsEachCondStd [ : , 1 ] ] spikeCountMatHighFreqStdInStdPara = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnsetStd , iletHighFreqStdInStdPara , timeVec ) iletLowFreqStdInOddPara = indexLimitsEachTrialOdd [ : , trialsEachCondOdd [ : , 0 ] ] spikeCountMatLowFreqStdInOddPara = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnsetOdd , iletLowFreqStdInOddPara , timeVec ) iletHighFreqOddInOddPara = indexLimitsEachTrialOdd [ : , trialsEachCondOdd [ : , 1 ] ] spikeCountMatHighFreqOddInOddPara = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnsetOdd , iletHighFreqOddInOddPara , timeVec ) ax8 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 3 ) ) extraplots . plot_psth ( spikeCountMatHighFreqStdInStdPara / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , colorEachCond = <str> , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) extraplots . plot_psth ( spikeCountMatHighFreqOddInOddPara / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , colorEachCond = <str> , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> . format ( arrayOfFrequenciesOdd [ 1 ] ) ) oddball_patch = mpatches . Patch ( color = <str> , label = <str> ) standard_patch = mpatches . Patch ( color = <str> , label = <str> ) plt . legend ( handles = [ oddball_patch , standard_patch ] ) ax9 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 3 ) ) extraplots . plot_psth ( spikeCountMatLowFreqStdInOddPara / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , colorEachCond = <str> , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) extraplots . plot_psth ( spikeCountMatLowFreqOddInStdPara / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , colorEachCond = <str> , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> . format ( arrayOfFrequenciesOdd [ 0 ] ) ) plt . legend ( handles = [ oddball_patch , standard_patch ] )  elif oneCell . get_session_inds ( <str> ) == [ ] and oneCell . get_session_inds ( <str> ) != [ ] :          binWidth = 0.010 timeVec = np . arange ( timeRange [ 0 ] , timeRange [ - 1 ] , binWidth ) smoothWinSizePsth = 2 lwPsth = 2 downsampleFactorPsth = 1 spikeCountMatOdd = spikesanalysis . spiketimes_to_spikecounts ( spikeTimesFromEventOnsetOdd , indexLimitsEachTrialOdd , timeVec ) ax8 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 3 ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) ax9 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 3 ) ) extraplots . plot_psth ( spikeCountMatOdd / binWidth , smoothWinSizePsth , timeVec , trialsEachCond = [ ] , linestyle = None , linewidth = lwPsth , downsamplefactor = downsampleFactorPsth ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) plt . title ( <str> )  else :          ax8 = plt . subplot2grid ( ( 3 , 4 ) , ( 2 , 3 ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> ) ax9 = plt . subplot2grid ( ( 3 , 4 ) , ( 1 , 3 ) ) plt . xlabel ( <str> ) plt . ylabel ( <str> )  figFilename = <str> . format ( dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , dbRow [ <str> ] , figFormat ) figFullpath = os . path . join ( outputDir , figFilename ) plt . savefig ( figFullpath , format = figFormat ) plt . gcf ( ) . set_size_inches ( [ 18 , 10 ] ) plt . tight_layout ( ) plt . show ( ) print ( <str> . format ( indRow , number_of_clusters , figFilename ) )   