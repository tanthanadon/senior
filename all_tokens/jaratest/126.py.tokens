from jaratoolbox import loadopenephys from jaratoolbox import loadbehavior from jaratoolbox import settings import numpy as np import matplotlib . pyplot as plt import os import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) SAMPLING_RATE = 30000.0 outputDir = <str> nameOfFile = <str> subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> numOfCells = len ( allcells . cellDB ) ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> ephysRoot = ephysRootDir + mouseName + <str> eventID = 0 finalOutputDir = outputDir + <str> + subject + <str> alignedCheckList = [ ] try :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) behavName = <str> for line in text_file :          behavLine = line . split ( <str> ) behavName = behavLine [ 0 ] alignedCheckList . append ( behavName )   except :      text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> )  thresDiff = 0.2 for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) if ( behavSession in alignedCheckList ) :              continue  behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) ephysDir = os . path . join ( ephysRoot , ephysSession ) eventFilename = os . path . join ( ephysDir , <str> ) events = loadopenephys . Events ( eventFilename ) eventTimes = np . array ( events . timestamps ) / SAMPLING_RATE multipleEventOnset = np . array ( events . eventID ) eventChannel = np . array ( events . eventChannel ) oneEvent = eventChannel == eventID eventOnset = multipleEventOnset * oneEvent eventOnsetTimes = eventTimes [ eventOnset == 1 ] behavTimes = np . empty ( numberOfTrials ) prevTimeCenter = bdata [ <str> ] [ 0 ] for trial , timeCenter in enumerate ( bdata [ <str> ] ) :              behavTimes [ trial ] = timeCenter - prevTimeCenter prevTimeCenter = timeCenter  ephysTimes = np . empty ( np . sum ( eventOnset ) ) prevTime = eventOnsetTimes [ 0 ] for etrial , timeSound in enumerate ( eventOnsetTimes ) :              ephysTimes [ etrial ] = timeSound - prevTime prevTime = timeSound  numberToPlot = min ( numberOfTrials , np . sum ( eventOnset ) ) differenceTimes = np . empty ( numberToPlot ) firstSkipped = False badTrial = 0 for dtrial in range ( 0 , numberToPlot ) :              differenceTimes [ dtrial ] = ephysTimes [ dtrial ] - behavTimes [ dtrial ] if ( abs ( differenceTimes [ dtrial ] ) > thresDiff ) and not firstSkipped :                  badTrial = dtrial firstSkipped = True   text_file . write ( <str> % ( behavSession , firstSkipped ) )   text_file . close ( ) print <str>  