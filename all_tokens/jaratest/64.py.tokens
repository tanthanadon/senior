import numpy as np from jaratoolbox import extraplots from jaratoolbox import loadbehavior from jaratoolbox import behavioranalysis import matplotlib . pyplot as plt import sys import matplotlib . pyplot as plt session = sys . argv [ 1 ] animalList = [ <str> , <str> , <str> , <str> , , <str> , , <str> , <str> , <str> , , <str> , <str> , <str> , ] nValidAll = [ ] fractionValidAll = [ ] fractionCorrectAll = [ ] for inds , subject in enumerate ( animalList ) :      behavFile = loadbehavior . path_to_behavior_data ( subject , <str> , session ) bdata = loadbehavior . BehaviorData ( behavFile ) delayToTargetMean = bdata [ <str> ] [ - 1 ] delayToTargetHalfRange = bdata [ <str> ] [ - 1 ] targetDuration = bdata [ <str> ] [ - 1 ] delayToGoSignal = bdata [ <str> ] [ - 1 ] antibiasMode = bdata [ <str> ] [ - 1 ] targetFrequency = bdata [ <str> ] choice = bdata [ <str> ] valid = bdata [ <str> ] & ( choice != bdata . labels [ <str> ] [ <str> ] ) choiceRight = ( choice == bdata . labels [ <str> ] [ <str> ] ) outcome = bdata [ <str> ] validCorrect = outcome [ valid . astype ( bool ) ] == bdata . labels [ <str> ] [ <str> ] nValid = np . sum ( valid ) fractionValid = np . mean ( valid ) fractionCorrect = np . mean ( validCorrect ) print <str> . format ( subject ) print <str> . format ( delayToTargetMean , delayToTargetHalfRange , targetDuration , delayToGoSignal , antibiasMode ) print <str> . format ( nValid ) print <str> . format ( fractionValid ) print <str> . format ( fractionCorrect ) print <str> nValidAll . append ( nValid ) fractionValidAll . append ( fractionValid ) fractionCorrectAll . append ( fractionCorrect )  plt . clf ( ) nSubjects = len ( animalList ) xvals = np . arange ( 1 , len ( animalList ) + 1 ) plt . subplot ( 3 , 1 , 1 ) plt . bar ( xvals , nValidAll , align = <str> , color = <str> ) plt . ylabel ( <str> ) plt . xlim ( [ 0 , nSubjects + 1 ] ) plt . title ( <str> . format ( session ) , fontweight = <str> ) plt . subplot ( 3 , 1 , 2 ) plt . bar ( xvals , 100 * np . array ( fractionValidAll ) , align = <str> , color = <str> ) plt . ylabel ( <str> ) plt . ylim ( [ 0 , 100 ] ) plt . xlim ( [ 0 , nSubjects + 1 ] ) plt . subplot ( 3 , 1 , 3 ) plt . bar ( xvals , 100 * np . array ( fractionCorrectAll ) , align = <str> , color = <str> ) plt . ylabel ( <str> ) plt . ylim ( [ 0 , 100 ] ) plt . xlim ( [ 0 , nSubjects + 1 ] ) plt . show ( )  