from jaratoolbox import loadbehavior from jaratoolbox import settings import os import numpy as np import sys import importlib mouseName = str ( sys . argv [ 1 ] ) allcellsFileName = <str> + mouseName sys . path . append ( settings . ALLCELLS_PATH ) allcells = importlib . import_module ( allcellsFileName ) outputDir = <str> nameOfFile = <str> minPerf = 0.50 minCorrectPerBlock = 50 minNumBlocks = 3 subject = allcells . cellDB [ 0 ] . animalName behavSession = <str> ephysSession = <str> nameOfOutputFile = nameOfFile + <str> + subject numOfCells = len ( allcells . cellDB ) ephysRootDir = settings . EPHYS_PATH experimenter = <str> paradigm = <str> finalOutputDir = outputDir + <str> + subject + <str> text_file = open ( <str> % ( finalOutputDir , nameOfFile ) , <str> ) text_file . write ( <str> % minPerf ) for cellID in range ( 0 , numOfCells ) :      oneCell = allcells . cellDB [ cellID ] if ( behavSession != oneCell . behavSession ) :          subject = oneCell . animalName behavSession = oneCell . behavSession ephysSession = oneCell . ephysSession ephysRoot = os . path . join ( ephysRootDir , subject ) behaviorFilename = loadbehavior . path_to_behavior_data ( subject , experimenter , paradigm , behavSession ) bdata = loadbehavior . BehaviorData ( behaviorFilename ) numberOfTrials = len ( bdata [ <str> ] ) correct = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] incorrect = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] possibleFreq = np . unique ( bdata [ <str> ] ) firstFreq = bdata [ <str> ] == possibleFreq [ 0 ] lastFreq = bdata [ <str> ] == possibleFreq [ 2 ] correctFirst = sum ( correct & firstFreq ) correctLast = sum ( correct & lastFreq ) incorrectFirst = sum ( incorrect & firstFreq ) incorrectLast = sum ( incorrect & lastFreq ) firstPerf = float ( correctFirst ) / ( correctFirst + incorrectFirst ) lastPerf = float ( correctLast ) / ( correctLast + incorrectLast ) middleFreq = bdata [ <str> ] == possibleFreq [ 1 ] highBlock = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] lowBlock = bdata [ <str> ] == bdata . labels [ <str> ] [ <str> ] middleFreqHighBlock = middleFreq & highBlock middleFreqLowBlock = middleFreq & lowBlock correctMidHigh = sum ( middleFreqHighBlock & correct ) incorrectMidHigh = sum ( middleFreqHighBlock & incorrect ) correctMidLow = sum ( middleFreqLowBlock & correct ) incorrectMidLow = sum ( middleFreqLowBlock & incorrect ) highBlPerf = float ( correctMidHigh ) / ( correctMidHigh + incorrectMidHigh ) lowBlPerf = float ( correctMidLow ) / ( correctMidLow + incorrectMidLow ) blocks = bdata [ <str> ] highBlock = bdata . labels [ <str> ] [ <str> ] lowBlock = bdata . labels [ <str> ] [ <str> ] goodBlockCount = 0 badBlockCheck = False curBlock = blocks [ 0 ] print behavSession + <str> + str ( curBlock ) curTrial = 0 startTrial = 0 endTrial = 0 while ( curTrial < ( len ( blocks ) - 1 ) ) :              print curBlock startTrial = curTrial while ( ( curTrial < ( len ( blocks ) - 1 ) ) & ( blocks [ curTrial ] == curBlock ) ) :                  curTrial += 1  endTrial = curTrial curBlock = blocks [ curTrial ] print <str> + str ( sum ( correct [ startTrial : ( endTrial + 1 ) ] ) ) if ( sum ( correct [ startTrial : ( endTrial + 1 ) ] ) >= minCorrectPerBlock ) :                  goodBlockCount += 1  else :                  if ( goodBlockCount < minNumBlocks ) :                      badBlockCheck = True break    if ( ( firstPerf >= minPerf ) & ( lastPerf >= minPerf ) & ( highBlPerf >= minPerf ) & ( lowBlPerf >= minPerf ) & ( goodBlockCount >= minNumBlocks ) & ( not badBlockCheck ) ) :              text_file . write ( <str> % behavSession )    text_file . close ( )  